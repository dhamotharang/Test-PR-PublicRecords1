#OPTION( persist, 0 )


Customer := ENTITY(QUERY(UID=gc_id,
    INTEGER CustomerId,
    INTEGER IndustryType, 
        STRING JurisdictionState // This is filled from ECL but will be switch to fill in ECL from MBS later!!! (then take this comment out).
        ), 
  MODEL(UID, CustomerId, IndustryType, JurisdictionState));
    

Person := ENTITY(QUERY(UID=LexId,  
    INTEGER LexId, 
        DATE DateOfBirth,
        STRING Ssn,
        STRING EmailAddress,
        STRING Title=NULL(),
        STRING FirstName=NULL(),
        STRING MiddleName=NULL(),
        STRING LastName=NULL(),
        STRING NameSuffix=NULL()
    ),
    MODEL(UID,
    LexId, DateOfBirth,Ssn,EmailAddress,Title,FirstName,MiddleName,LastName,NameSuffix));

Email := ENTITY(QUERY(UID=OttoEmailId,
        STRING EmailAddress,
        STRING Host,
        STRING EmailLastDomain,
        INTEGER isdisposableemail),
    MODEL(UID,
    EmailAddress, Host, EmailLastDomain, isdisposableemail));

Address := ENTITY(QUERY(UID=OttoAddressId,  
        STRING PrimaryRange=NULL(),
        STRING Predirectional=NULL(),
        STRING PrimaryName=NULL(),
        STRING Suffix=NULL(),
        STRING Postdirectional=NULL(),
        STRING UnitDesignation=NULL(),
        STRING SecondaryRange=NULL(),
        STRING PostalCity=NULL(),
        STRING VanityCity=NULL(),
        STRING State=NULL(),
        STRING Zip=NULL(),
        STRING Zip4=NULL(),
        STRING CarrierRouteNumber=NULL(),
        STRING CarrierRouteSortationAtZIP=NULL(),
        INTEGER LineOfTravel=NULL(),
        STRING LineOfTravelOrder=NULL(),
        INTEGER DeliveryPointBarcode=NULL(),
        INTEGER DeliveryPointBarcodeCheckDigit=NULL(),
        STRING TypeCode=NULL(),
        INTEGER County=NULL(),
        REAL Latitude=NULL(),
        REAL Longitude=NULL(),
        INTEGER MetropolitanStatisticalArea=NULL(),
        INTEGER GeoBlock=NULL(),
        STRING GeoMatch=NULL(),
        STRING ACECleanerErrorCode=NULL(),
        BOOLEAN isAdditional),
    MODEL(UID,
    PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, UnitDesignation, SecondaryRange, PostalCity, VanityCity, State, 
        Zip, Zip4, CarrierRouteNumber, CarrierRouteSortationAtZIP, LineOfTravel, LineOfTravelOrder, DeliveryPointBarcode, DeliveryPointBarcodeCheckDigit, 
        TypeCode, County, Latitude, Longitude, MetropolitanStatisticalArea, GeoBlock, GeoMatch,ACECleanerErrorCode,isAdditional));

SocialSecurityNumber := ENTITY(QUERY(UID=OttoSSNId,
    Ssn,
    STRING OttoSSNId,
    STRING SsnFormatted,

    v2_divssnidentitycountnew,
    DATE DeceasedDate,
    DATE DeceasedDateOfBirth,
    STRING DeceasedFirst,
    STRING DeceasedMiddle,
    STRING DeceasedLast,   

    STRING DeceasedMatchCode,
    BOOLEAN isdeepdive,

    STRING county_death,
    STRING DeceasedSsn,
    STRING state_death_flag,
    STRING death_rec_src,
    STRING state_death_id
    ),
  MODEL(
    UID, Ssn, OttoSSNId, SsnFormatted, v2_divssnidentitycountnew,DeceasedDate,DeceasedDateOfBirth,DeceasedFirst,DeceasedMiddle,DeceasedLast,DeceasedMatchCode,isdeepdive,county_death,DeceasedSsn,state_death_flag,death_rec_src,state_death_id
    ));

Phone := ENTITY(QUERY(UID=PhoneNumber,
    STRING PhoneFormatted,
    STRING PhoneNumber,
        BOOLEAN isCellPhone
        ),
    MODEL(UID,
    PhoneFormatted, PhoneNumber, isCellPhone));

InternetProtocol := ENTITY(QUERY(UID=ip_address,
    STRING IpAddress=ip_address,

    STRING host,
    STRING alias,
    STRING location,
    STRING ip_address,
    STRING ip_address_date,
    STRING version,
    STRING class,
    STRING subnet_mask,
    STRING reserved,
    STRING isp,
    INTEGER v2_validationipproblems,
    STRING v2_ipstate,
    STRING v2_ipcountry,
    STRING v2_ipcontinent,

    STRING iprngbeg,
    STRING iprngend,
    STRING edgecountry,
    STRING edgeregion,
    STRING edgecity,
    STRING edgeconnspeed,
    STRING edgemetrocode,
    STRING edgelatitude,
    STRING edgelongitude,
    STRING edgepostalcode,
    STRING edgecountrycode,
    STRING edgeregioncode,
    STRING edgecitycode,
    STRING edgecontinentcode,
    STRING edgetwolettercountry,
    STRING edgeinternalcode,
    STRING edgeareacodes,
    STRING edgecountryconf,
    STRING edgeregionconf,
    STRING edgecitycong,
    STRING edgepostalconf,
    STRING edgegmtoffset,
    STRING edgeindst,
    STRING siccode,
    STRING domainname,
    STRING ispname,
    STRING homebiztype,
    STRING asn,
    STRING asnname,
    STRING primarylang,
    STRING secondarylang,
    STRING proxytype,
    STRING proxydescription,
    STRING isanisp,
    STRING companyname,
    STRING ranks,
    STRING households,
    STRING women,
    STRING women18to34,
    STRING women35to49,
    STRING men,
    STRING men18to34,
    STRING men35to49,
    STRING teens,
    STRING kids,
    STRING naicscode,
    STRING cbsacode,
    STRING cbsatitle,
    STRING cbsatype,
    STRING csacode,
    STRING csatitle,
    STRING mdcode,
    STRING mdtitle,
    STRING organizationname
    
    ),
  MODEL(
    UID, IpAddress, host,alias,location,ip_address,ip_address_date,version,class,subnet_mask,reserved,isp,v2_validationipproblems,v2_ipstate,v2_ipcountry,v2_ipcontinent,
    iprngbeg,iprngend,edgecountry,edgeregion,edgecity,edgeconnspeed,edgemetrocode,edgelatitude,edgelongitude,edgepostalcode,edgecountrycode,edgeregioncode,edgecitycode,edgecontinentcode,edgetwolettercountry,edgeinternalcode,edgeareacodes,edgecountryconf,edgeregionconf,edgecitycong,edgepostalconf,edgegmtoffset,edgeindst,siccode,domainname,ispname,homebiztype,asn,asnname,primarylang,secondarylang,proxytype,proxydescription,isanisp,companyname,ranks,households,women,women18to34,women35to49,men,men18to34,men35to49,teens,kids,naicscode,cbsacode,cbsatitle,cbsatype,csacode,csatitle,mdcode,mdtitle,organizationname
    ));

Bank := ENTITY(QUERY(UID=RoutingNumber,
    STRING RoutingNumber,
    STRING FullBankname,
    STRING AbbreviatedBankname,
    STRING FractionalRoutingnumber,
    STRING HeadofficeRoutingnumber,
    STRING HeadofficeBranchcodes,
    STRING hit
        ),
    MODEL(UID,
    RoutingNumber,FullBankname,AbbreviatedBankname,FractionalRoutingnumber,HeadofficeRoutingnumber,HeadofficeBranchcodes,hit));
    
BankAccount := ENTITY(QUERY(UID=OttoBankAccountId,
    Bank rBank=RoutingNumber,
    STRING AccountNumber,
    STRING OttoBankAccountId
        ),
    MODEL(UID,
    rBank, AccountNumber, OttoBankAccountId));

DriversLicense := ENTITY(QUERY(UID=OttoDriversLicenseId,
    Customer rCustomer=AssociatedCustomerFileInfo,
    Customer rSourceCustomer=SourceCustomerFileInfo,
    STRING LicenseNumber,
    STRING State,
    STRING OttoDriversLicenseId
        ),
    MODEL(UID,
    rCustomer, SourceCustomers{rSourceCustomer}, LicenseNumber, State, OttoDriversLicenseId));

Event := ENTITY(QUERY(UID(record_id), 
    Customer rCustomer=gc_id,
    Customer rSourceCustomer=gc_id,

    Person Subject=LexId,
        Address Location=OttoAddressId,    
    SocialSecurityNumber rSsn=OttoSSNId,
    Phone rPhone=PhoneNumber,
    Email rEmail=OttoEmailId,
    InternetProtocol rInternetProtocol=ip_address,
    BankAccount rBankAccount=OttoBankAccountId,
    DriversLicense rDriversLicense=OttoDriversLicenseId,
        
    INTEGER rin_source,     
    INTEGER LexId, 
    STRING PhoneNumber,
    STRING OttoAddressId,
    STRING OttoEmailId,
    STRING OttoIpAddressId,
    STRING OttoDriversLicenseId,
    STRING OttoSSNId,
    STRING OttoBankAccountId,
    STRING CaseId,
        STRING ClientId,

    INTEGER RecordId=record_id,
    DATE EventDate,
        
        STRING Title=NULL(),
        STRING FirstName=NULL(),
        STRING MiddleName=NULL(),
        STRING LastName=NULL(),
        STRING NameSuffix=NULL(),

    STRING unique_number,
    STRING mac_address,
    STRING serial_number,
    STRING device_type,
    STRING device_identification_provider,
    
    BOOLEAN addresspobox,
    BOOLEAN addresscmra,
        STRING PrimaryRange=NULL(),
        STRING Predirectional=NULL(),
        STRING PrimaryName=NULL(),
        STRING Suffix=NULL(),
        STRING Postdirectional=NULL(),
        STRING UnitDesignation=NULL(),
        STRING SecondaryRange=NULL(),
        STRING PostalCity=NULL(),
        STRING VanityCity=NULL(),
        STRING State=NULL(),
        STRING Zip=NULL(),
        STRING Zip4=NULL(),
        STRING CarrierRouteNumber=NULL(),
        STRING CarrierRouteSortationAtZIP=NULL(),
        INTEGER LineOfTravel=NULL(),
        STRING LineOfTravelOrder=NULL(),
        INTEGER DeliveryPointBarcode=NULL(),
        INTEGER DeliveryPointBarcodeCheckDigit=NULL(),
        STRING TypeCode=NULL(),
        INTEGER County=NULL(),
        REAL Latitude=NULL(),
        REAL Longitude=NULL(),
        INTEGER MetropolitanStatisticalArea=NULL(),
        INTEGER GeoBlock=NULL(),
        STRING GeoMatch=NULL(),
        STRING ACECleanerErrorCode=NULL(),
        BOOLEAN isAdditional,

    STRING PhoneFormatted,

    STRING LicenseNumber,
    STRING LicenseState, 

        STRING EmailAddress,
        STRING Type,
        DATE CreatedOn,
        STRING Host,
        STRING EmailLastDomain,
        INTEGER isdisposableemail,  
        
    STRING Ssn,
    STRING SsnFormatted,

    STRING RoutingNumber,
    STRING FullBankname,
    STRING AbbreviatedBankname,
    STRING FractionalRoutingnumber,
    STRING HeadofficeRoutingnumber,
    STRING HeadofficeBranchcodes,
    STRING AccountNumber,
    STRING BankHit,
                
    INTEGER Confidence_that_activity_was_deceitful_id,
    INTEGER name_risk_code,
    INTEGER dob_risk_code,
    INTEGER ssn_risk_code,
    INTEGER drivers_license_risk_code,
    INTEGER physical_address_risk_code,
    INTEGER phone_risk_code,
    INTEGER cell_phone_risk_code,
    INTEGER work_phone_risk_code,
    INTEGER bank_account_1_risk_code,
    INTEGER bank_account_2_risk_code,
    INTEGER email_address_risk_code,
    INTEGER ip_address_fraud_code,
    INTEGER business_risk_code,
    INTEGER mailing_address_risk_code,
    INTEGER device_risk_code,
    INTEGER identity_risk_code,

    INTEGER event_type_1,
        INTEGER event_type_2,
        INTEGER event_type_3,
        
    DATE DateOfBirth,

    // BocaShell Columns

    // BocaShell Columns

      BOOLEAN BocashellHit,
        INTEGER BocashellLexId,
    INTEGER nap_summary,
    INTEGER nas_summary,
    INTEGER cvi,
    INTEGER fp3_stolenidentityindex,
    INTEGER syntheticidentityindex_v3,
    INTEGER manipulatedidentityindex_v3,
    INTEGER socsdobflag,
    INTEGER pwsocsdobflag,
    INTEGER dobmatchlevel,
    INTEGER sourcerisklevel,
    STRING reason1,
    STRING reason2,
    STRING reason3,
    STRING reason4,
    STRING reason5,
    STRING reason6,
    INTEGER socsvalflag,
    INTEGER drlcvalflag,
    INTEGER hphonevalflag,

    BOOLEAN truedid = truedid,
    STRING best_fname   = best_flags.fname,
    STRING best_lname   = best_flags.lname,
    STRING best_ssn = best_flags.ssn,       
        
    STRING input_fname_isbestmatch,
    STRING input_lname_isbestmatch,
    STRING input_ssn_isbestmatch,
    BOOLEAN add_curr_pop,
        

    STRING add_curr_prim_range,
    STRING add_curr_predir,
    STRING add_curr_prim_name,
    STRING add_curr_addr_suffix,
    STRING add_curr_postdir,
    STRING add_curr_unit_desig,
    STRING add_curr_sec_range,
    STRING add_curr_city_name,
    STRING add_curr_st,
    STRING add_curr_zip5,
    STRING add_curr_county,
    STRING add_curr_geo_blk,
    STRING add_curr_lat,
    STRING add_curr_long,
    BOOLEAN add_input_isbestmatch,

    DATE bocashell_addr1_dt_first_seen,
        DATE bocashell_addr1_date_last_seen,

        
        STRING historydatetimestamp,
        DATE reported_dob,
        
    BOOLEAN diddeceased,
    DATE diddeceaseddate,
    STRING fraudpoint_v3,
        
        // Best 
        
    BOOLEAN BestHit,
        STRING best_phone,
        STRING best_drivers_license_state,
        STRING best_drivers_license,
        STRING best_drivers_license_exp,
            
    // Deceased
    
    DATE DeceasedDate,
    DATE DeceasedDateOfBirth,
    STRING DeceasedFirst,
    STRING DeceasedMiddle,
    STRING DeceasedLast,   

    STRING DeceasedMatchCode,
    BOOLEAN isdeepdive,

    STRING county_death,
    STRING DeceasedSsn,
    STRING state_death_flag,
    STRING death_rec_src,
    STRING state_death_id,
    
        // Crim
        BOOLEAN CrimHit,
    STRING curr_incar_flag,
    STRING off_cat_list,
    INTEGER name_ssn_dob_match,

    STRING IpAddress=ip_address,
    STRING iprngbeg,
    STRING iprngend,
    STRING edgecountry,
    STRING edgeregion,
    STRING edgecity,
    STRING edgeconnspeed,
    STRING edgemetrocode,
    STRING edgelatitude,
    STRING edgelongitude,
    STRING edgepostalcode,
    STRING edgecountrycode,
    STRING edgeregioncode,
    STRING edgecitycode,
    STRING edgecontinentcode,
    STRING edgetwolettercountry,
    STRING edgeinternalcode,
    STRING edgeareacodes,
    STRING edgecountryconf,
    STRING edgeregionconf,
    STRING edgecitycong,
    STRING edgepostalconf,
    STRING edgegmtoffset,
    STRING edgeindst,
    STRING siccode,
    STRING domainname,
    STRING ispname,
    STRING homebiztype,
    STRING asn,
    STRING asnname,
    STRING primarylang,
    STRING secondarylang,
    STRING proxytype,
    STRING proxydescription,
    STRING isanisp,
    STRING companyname,
    STRING ranks,
    STRING households,
    STRING women,
    STRING women18to34,
    STRING women35to49,
    STRING men,
    STRING men18to34,
    STRING men35to49,
    STRING teens,
    STRING kids,
    STRING naicscode,
    STRING cbsacode,
    STRING cbsatitle,
    STRING cbsatype,
    STRING csacode,
    STRING csatitle,
    STRING mdcode,
    STRING mdtitle,
    STRING organizationname,
    STRING advo_hitflag,
    STRING advo_vacancyindicator,
    STRING advo_addressstyle,
    STRING advo_dropindicator,
    STRING advo_residentialorbusinessindicator,
    STRING advo_addresstype,
    STRING advo_addressusagetype

    ),
    MODEL(
      UID,
      RecordId,
      EventDate,
      rCustomer,
      rSourceCustomer,
            Subject,
            rEmail,
            rSsn,
            Location,
            rPhone,
            rInternetProtocol,
            rBankAccount,
            rDriversLicense,

    OttoEmailId,
    OttoIpAddressId,
        OttoSSNId,
    CaseId,
        ClientId,
    OttoDriversLicenseId,
      OttoBankAccountId,

        rin_source,
    LexId,
    OttoAddressId,
        PhoneNumber,
        
    Title,FirstName,MiddleName,LastName,NameSuffix,

    DateOfBirth,
    DeceasedDate,
    DeceasedDateOfBirth,
    DeceasedFirst,
    DeceasedMiddle,
    DeceasedLast,   



    unique_number, mac_address, serial_number, device_type, device_identification_provider,
        
    DeceasedMatchCode,
    isdeepdive,

    BocashellHit, BocashellLexId, nap_summary,nas_summary,cvi,fp3_stolenidentityindex,syntheticidentityindex_v3,manipulatedidentityindex_v3,socsdobflag,pwsocsdobflag,dobmatchlevel,
        sourcerisklevel,reason1,reason2,reason3,reason4,reason5,reason6,socsvalflag,drlcvalflag,hphonevalflag,historydatetimestamp,reported_dob,
    bocashell_addr1_dt_first_seen,bocashell_addr1_date_last_seen,diddeceased,diddeceaseddate,fraudpoint_v3,
        
        // best
    BestHit,best_phone,best_drivers_license_state,best_drivers_license,best_drivers_license_exp,
    truedid,best_fname,best_lname,best_ssn,             
        input_fname_isbestmatch,input_lname_isbestmatch,input_ssn_isbestmatch,add_curr_pop,add_curr_prim_range,
        add_curr_predir,add_curr_prim_name,add_curr_addr_suffix,add_curr_postdir,add_curr_unit_desig,add_curr_sec_range,
        add_curr_city_name,add_curr_st,add_curr_zip5,add_curr_county,add_curr_geo_blk,add_curr_lat,add_curr_long,
        add_input_isbestmatch,      
        county_death,DeceasedSsn,state_death_flag,death_rec_src,state_death_id,

    addresspobox, addresscmra, PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, UnitDesignation, SecondaryRange, PostalCity, VanityCity, State, 
        Zip, Zip4, CarrierRouteNumber, CarrierRouteSortationAtZIP, LineOfTravel, LineOfTravelOrder, DeliveryPointBarcode, DeliveryPointBarcodeCheckDigit, 
        TypeCode, County, Latitude, Longitude, MetropolitanStatisticalArea, GeoBlock, GeoMatch,ACECleanerErrorCode,isAdditional,
        
        LicenseNumber,
    LicenseState,

    PhoneFormatted,
        
    EmailAddress, Type, CreatedOn, Host , EmailLastDomain, isdisposableemail,

    Ssn, SsnFormatted,

    RoutingNumber,FullBankname,AbbreviatedBankname,FractionalRoutingnumber,HeadofficeRoutingnumber,HeadofficeBranchcodes,AccountNumber,BankHit,
        
        CrimHit,
    curr_incar_flag,
    off_cat_list,
    name_ssn_dob_match,

    IpAddress,iprngbeg,iprngend,edgecountry,edgeregion,edgecity,edgeconnspeed,edgemetrocode,edgelatitude,edgelongitude,edgepostalcode,edgecountrycode,edgeregioncode,edgecitycode,edgecontinentcode,edgetwolettercountry,edgeinternalcode,edgeareacodes,edgecountryconf,edgeregionconf,edgecitycong,edgepostalconf,edgegmtoffset,edgeindst,siccode,domainname,ispname,homebiztype,asn,asnname,primarylang,secondarylang,proxytype,proxydescription,isanisp,companyname,ranks,households,women,women18to34,women35to49,men,men18to34,men35to49,teens,kids,naicscode,cbsacode,cbsatitle,cbsatype,csacode,csatitle,mdcode,mdtitle,organizationname,
    Confidence_that_activity_was_deceitful_id,event_type_1,event_type_2,event_type_3,name_risk_code,dob_risk_code,ssn_risk_code,drivers_license_risk_code,physical_address_risk_code,phone_risk_code,cell_phone_risk_code,work_phone_risk_code,bank_account_1_risk_code,bank_account_2_risk_code,email_address_risk_code,ip_address_fraud_code,business_risk_code,mailing_address_risk_code,device_risk_code,identity_risk_code,
        advo_hitflag, advo_vacancyindicator, advo_addressstyle, advo_dropindicator, advo_residentialorbusinessindicator, advo_addresstype, advo_addressusagetype
          ));

PersonEvent := ASSOCIATION(QUERY(
    Customer rCustomer=gc_id,
    Person Subject=LexId,
    DATE EventDate,
    Event Transaction=UID(record_id)
   ));
     


/*

 LOGIC STATEMENTS

*/   
     
Event: => EntityContextUid := '_01' + RecordId;     
Event: => InCustomerPopulation := 1;

Event: => Deceased := MAP(ISVALIDDATE(DeceasedDate) => 1, 0);
Event: => DeceasedNameMatch := MAP(FirstName=DeceasedFirst AND LastName=DeceasedLast => 1, 0);
Event: => DeceasedDobMatch := MAP(DeceasedDateOfBirth=DateOfBirth => 1, 0);
Event: => DeceasedMatch := MAP(Deceased=1 AND DeceasedNameMatch=1 AND DeceasedDobMatch=1 => 1, 0);

Event: => CurrentlyIncarceratedFlag := MAP(name_ssn_dob_match = 1 AND curr_incar_flag='Y' => 1, 0);
Event: => IdAge := YEARSBETWEEN(DateOfBirth, EventDate); // Age at time of transaction.
Event: => NoLexId := MAP(LexId > 900000000000 => 1, 0);
Event: => NoLexIdAdult := MAP(NoLexId = 1 AND IdAge > 17 => 1, 0);


// Nicole's attr

Event: => AgencyUid := 0;//CustomerId; jp
Event: => AgencyProgType := 0;//IndustryType; jp
Event: => AgencyProgDesc := '';//ind_type_description; jp
Event: => AgencyProgJurSt := rCustomer.JurisdictionState;

Event: => T_SrcAgencyUid := rSourceCustomer.CustomerId; 
Event: => T_SrcAgencyProgType := rSourceCustomer.IndustryType; 

Event: => T_ActUid := RecordId;
Event: => T_ActDtEcho := EventDate; 

Event: => T_SrcType := MAP(rin_source <= 0 OR rin_source > 15 => -99997,rin_source); 
Event: => T_SrcDesc := MAP(T_SrcType=-99997 => -99997, '');//rin_sourcelabel); jp

Event: => T_SrcClassType := MAP(T_SrcType = -99997 => -99997,
                                                                T_SrcType IN [6,14] => 0, //Agency Updates
                                                                T_SrcType IN [4,8,11] => 1, //Additional Activity
                                                                T_SrcType IN [3,7] => 2, //Safe List
                                                                T_SrcType IN [2,5] => 3, //Known Risk
                                                                4); //Identity Activity


Event: => T_PersonUidEcho   := MAP(LexId = '' OR LexId:Null OR LexId = 0 => -99999, LexId);
                                                                    
                                                        
Event: => T_InpClnTitleEcho := MAP(Title = '' OR Title:Null => -99999, Title);
Event: => T_InpClnFullNmEcho := MAP(T_InpClnFirstNmEcho=-99999 OR T_InpClnMiddleNmEcho=-99999 OR T_InpClnLastNmEcho=-99999 => -99999, TRIM(FirstName) + ' ' + TRIM(MiddleName) + ' ' + TRIM(LastName));
Event: => T_InpClnFirstNmEcho := MAP(FirstName ='' OR FirstName:Null => -99999, FirstName);
Event: => T_InpClnMiddleNmEcho := MAP(MiddleName = '' OR MiddleName:Null => -99999, MiddleName);
Event: => T_InpClnLastNmEcho := MAP(LastName = '' OR LastName:Null => -99999, LastName);
Event: => T_InpClnNmSuffixEcho := MAP(NameSuffix = '' OR NameSuffix:Null => -99999, NameSuffix);
                                                                     
Event: => T_InpClnAddrPrimRangeEcho := MAP(PrimaryRange = '' OR PrimaryRange:Null => -99999, PrimaryRange);
Event: => T_InpClnAddrPreDirEcho := MAP(Predirectional = '' OR Predirectional:Null => -99999, Predirectional);
Event: => T_InpClnAddrPrimNmEcho := MAP(PrimaryName = '' OR PrimaryName:Null OR Location = 0 => -99999, PrimaryName);
Event: => T_InpClnAddrSuffixEcho := MAP(Suffix = '' OR Suffix:Null => -99999, Suffix);
Event: => T_InpClnAddrPostDirEcho := MAP(Postdirectional = '' OR Postdirectional:Null => -99999, Postdirectional);
Event: => T_InpClnAddrUnitDesigEcho := MAP(UnitDesignation = '' OR UnitDesignation:Null => -99999, UnitDesignation);
Event: => T_InpClnAddrSecRangeEcho := MAP(SecondaryRange = '' OR SecondaryRange:Null => -99999, SecondaryRange);
Event: => T_InpClnAddrCityEcho := MAP(PostalCity = '' OR PostalCity:Null => -99999, PostalCity);
Event: => T_InpClnAddrStEcho := MAP(State = '' OR State:Null => -99999, State);
Event: => T_InpClnAddrZip5Echo := MAP(Zip = '' OR Zip:Null OR Zip=0 => -99999, Zip);
Event: => T_InpClnAddrZip4Echo := MAP(Zip4 = '' OR Zip4:Null OR Zip=0 => -99999, Zip4);
Event: => T_InpClnAddrLatEcho := MAP(Latitude:Null OR Latitude=0 => -99999, Latitude);
Event: => T_InpClnAddrLongEcho := MAP(Longitude:Null OR Longitude=0 => -99999, Longitude);
Event: => T_InpClnAddrCountyEcho := MAP(County = '' OR County:Null OR County=0 => -99999, County);
Event: => T_InpClnAddrGeoBlkEcho := MAP(GeoBlock = '' OR GeoBlock:Null OR GeoBlock=0 => -99999, GeoBlock);

Event: => T_InpClnSsnEcho := MAP(Ssn = '' OR Ssn:Null OR Ssn = '000000000' => -99999, TRIM(Ssn));
Event: => T_InpClnDobEcho := MAP(DateOfBirth:Null => -99999, INTEGER(DateOfBirth));
Event: => T_InpClnDlEcho := MAP(LicenseNumber = '' OR rDriversLicense.LicenseNumber:Null => -99999, rDriversLicense.LicenseNumber);
Event: => T_InpClnDlStEcho := MAP(LicenseState = '' OR LicenseState:Null => -99999, LicenseState);
Event: => T_InpClnEmailEcho := MAP(EmailAddress = '' OR EmailAddress:Null => -99999, EmailAddress);
Event: => T_InpClnBnkAcctEcho := MAP(AccountNumber = '' OR AccountNumber:Null => -99999, AccountNumber);
Event: => T_InpClnBnkAcctRtgEcho := MAP(RoutingNumber = '' OR RoutingNumber:Null => -99999, RoutingNumber);
Event: => T_InpClnIpAddrEcho := MAP(IpAddress = '' OR IpAddress:Null => -99999, IpAddress);
Event: => T_InpClnPhnEcho := MAP(PhoneNumber = '' OR PhoneNumber:Null OR PhoneNumber='0000000000' OR STARTSWITH(PhoneNumber,'0') => -99999, TRIM(PhoneNumber));

Event: => T1_LexIdPopFlag := MAP(T_PersonUidEcho = -99999 => -99999,
                                                                 NoLexId = 1 => 0, 1);
Event: => T1_RinIdPopFlag := MAP(T_PersonUidEcho = -99999 => -99999,
                                                                 NoLexId = 1 => 1, 0);
                                                                 

Event: => T18_IsIpMetaHitFlag := MAP(T_InpClnIpAddrEcho = -99999 => -99999, 
                                     T_InpClnIpAddrEcho != -99999 AND iprngbeg = '' AND iprngend = '' => 0,
                                                                         1);                                         
Event: => T18_IpAddrCity := MAP(T_InpClnIpAddrEcho=-99999 => -99999,
                                                                T18_IsIpMetaHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                edgecity = '' OR edgecity:Null => -99997,
                                                                edgecity);
Event: => T18_IpAddrCountry := MAP(T_InpClnIpAddrEcho=-99999 => -99999,
                                                                T18_IsIpMetaHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                edgecountry = '' OR edgecountry:Null OR edgecountry='0' => -99997,
                                                                edgecountry);
Event: => T18_IpAddrRegion := MAP(T_InpClnIpAddrEcho=-99999 => -99999,
                                                                T18_IsIpMetaHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                edgeregion = '' OR edgeregion:Null => -99997,
                                                                edgeregion);
Event: => T18_IpAddrDomain := MAP(T_InpClnIpAddrEcho=-99999 => -99999,
                                                                T18_IsIpMetaHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                domainname = '' OR domainname:Null => -99997,
                                                                domainname);
Event: => T18_IpAddrIspNm := MAP(T_InpClnIpAddrEcho=-99999 => -99999,
                                                                T18_IsIpMetaHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                ispname = '' OR ispname:Null => -99997,
                                                              ispname);
Event: => T18_IpAddrLocType := MAP(T_InpClnIpAddrEcho=-99999 => -99999,
                                                                T18_IsIpMetaHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                homebiztype = '' OR homebiztype:Null => -99997,
                                                              homebiztype);
Event: => T18_IpAddrProxyType := MAP(T_InpClnIpAddrEcho=-99999 => -99999,
                                                                T18_IsIpMetaHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                proxytype = '' OR proxytype:Null => -99997,
                                                              proxytype);
Event: => T18_IpAddrProxyDesc := MAP(T_InpClnIpAddrEcho=-99999 => -99999,
                                                                T18_IsIpMetaHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                proxydescription = '' OR proxydescription:Null => -99997,
                                                              proxydescription);
Event: => T18_IpAddrIsIspFlag := MAP(T_InpClnIpAddrEcho=-99999 => -99999,
                                                                T18_IsIpMetaHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                isanisp:Null => -99997,
                                                              isanisp='YES' => 1,
                                                                isanisp='NO' => 0);
Event: => T18_IpAddrAsnCompNm := MAP(T_InpClnIpAddrEcho=-99999 => -99999,
                                                            T18_IsIpMetaHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                            asnname = '' OR asnname:Null => -99997,
                                                            asnname);
Event: => T18_IpAddrAsn := MAP(T_InpClnIpAddrEcho=-99999 => -99999,
                                                                T18_IsIpMetaHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                asn:Null OR asn=0 => -99997,
                                                              asn);
Event: => T18_IpAddrCompNm := MAP(T_InpClnIpAddrEcho=-99999 => -99999,
                                                                T18_IsIpMetaHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                companyname = '' OR companyname:Null => -99997,
                                                              companyname);
Event: => T18_IpAddrOrgNm := MAP(T_InpClnIpAddrEcho=-99999 => -99999,
                                                                T18_IsIpMetaHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                organizationname = '' OR organizationname:Null => -99997,
                                                              organizationname);
                                                                
Event: => T18_IpAddrHostedFlag := MAP(T_InpClnIpAddrEcho=-99999 => -99999,
                                                                T18_IsIpMetaHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                T18_IpAddrProxyType<1 OR T18_IpAddrProxyDesc<1 => -99997,
                                                              T18_IpAddrProxyType='HOSTING' AND (T18_IpAddrProxyDesc != 'CLOUD-SECURITY' AND T18_IpAddrProxyDesc != 'CLOUD') => 1, //CHECKME - double check this logic make sure it matches reqs
                                                                0);
Event: => T18_IpAddrVpnFlag := MAP(T_InpClnIpAddrEcho=-99999 => -99999,
                                                                T18_IsIpMetaHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                T18_IpAddrProxyDesc < 1 => -99997,
                                                              T18_IpAddrProxyDesc = 'VPN' => 1,
                                                                0);
Event: => T18_IpAddrTorNodeFlag := MAP(T_InpClnIpAddrEcho=-99999 => -99999,
                                                                T18_IsIpMetaHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                T18_IpAddrProxyDesc < 1 => -99997,
                                                                T18_IpAddrProxyDesc IN ['TOR EXIT','TOR RELAY'] => 1,
                                                                0);
Event: => T18_IpAddrLocNonUsFlag := MAP(T_InpClnIpAddrEcho=-99999 => -99999,
                                                                T18_IsIpMetaHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                T18_IpAddrCountry < 1 => -99997,
                                                                T18_IpAddrCountry != 'USA' => 1,
                                                                0);
Event: => T18_IpAddrLocMiamiFlag := MAP(T_InpClnIpAddrEcho=-99999 => -99999,
                                                                T18_IsIpMetaHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                T18_IpAddrCity < 1 => -99997,
                                                                AgencyProgJurSt != 'FL' AND T18_IpAddrCity = 'MIAMI' => 1,
                                                                0);
    
Event: => T19_BnkAcctPopFlag := MAP(T_InpClnBnkAcctEcho IN ['-99999','-99998'] OR T_InpClnBnkAcctRtgEcho IN ['-99999','-99998'] => 0,
                                                                    1);
Event: => T19_IsBnkAppHitFlag := MAP(T19_BnkAcctPopFlag = 0 => -99999, 
                                                                         BankHit = 1 => 1, 0); 
Event: => T19_BnkAcctBnkNm := MAP(T19_BnkAcctPopFlag=0 => -99999,
                                                                    T19_IsBnkAppHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                    FullBankname); 
Event: => T19_BnkAcctHrPrePdRtgFlag := MAP(T19_BnkAcctPopFlag = 0 => -99999,
                                                                                     T_SrcClassType < 4 => -99998,
                                                                                     T_InpClnBnkAcctRtgEcho IN ['031101169','124071889','124303120','073972181','084003997','114924742','031101169','063115194'] => 1,
                                                                                     0);
                                                                                     
Event: => T17_EmailPopFlag := MAP(WORD(EmailAddress,1,'@') = '' OR WORD(EmailAddress,2,'@') = '' OR T_InpClnEmailEcho = -99999  => 0, 
                                                                    1);
Event: => T17_EmailDomain := MAP(T17_EmailPopFlag = 0 => -99999,
                                                                 T_SrcClassType < 4 => -99998,
                                                                 WORD(EmailAddress,2,'@')); 
Event: => T17_EmailDomainDispFlag := MAP(T17_EmailPopFlag = 0 => -99999,
                                                                                 T_SrcClassType < 4 => -99998,
                                                                                 rEmail.isdisposableemail);

Event: => T9_AddrPopFlag := MAP((T_InpClnAddrPrimNmEcho != -99999 AND T_InpClnAddrCityEcho != -99999 AND T_InpClnAddrStEcho != -99999) OR (T_InpClnAddrPrimNmEcho != -99999 AND T_InpClnAddrZip5Echo != -99999) => 1,0);
Event: => T9_AddrType := MAP(T9_AddrPopFlag < 1 => -99999,
                                                         Location.TypeCode = '' OR Location.TypeCode:Null => -99997,
                                                         Location.TypeCode);
Event: => T9_AddrStatus := MAP(T9_AddrPopFlag < 1 => -99999,
                                                             Location.ACECleanerErrorCode = '' OR Location.ACECleanerErrorCode:Null => -99997,
                                                             Location.ACECleanerErrorCode);

Event: => T16_PhnPopFlag := MAP(T_InpClnPhnEcho IN ['-99999','-99998','-99997'] OR LENGTH(T_InpClnPhnEcho) < 10 => 0, 1);
Event: => T15_SsnPopFlag := MAP(T_InpClnSsnEcho <= -99997 OR LENGTH(T_InpClnSsnEcho) < 9 => 0, 1);
Event: => T20_DlPopFlag := MAP(T_InpClnDlEcho IN ['-99999','-99998','-99997'] OR T_InpClnDlStEcho IN ['-99999','-99998','-99997'] => 0, 1);
Event: => T18_IpAddrPopFlag := MAP(T_InpClnIpAddrEcho IN ['-99999','-99998','-99997'] => 0, 1);


Event: => T_InAgencyFlag := MAP(rSourceCustomer != rCustomer => 0, 1);

Event: => T_StatusActionDesc := MAP(T_SrcClassType=1 OR T_SrcClassType>3 => -99998,
                                    T_SrcClassType=3 => 'Added to Known Risk',
                                                                        T_SrcClassType=2 => 'Added to Safe List',
                                                                        T_SrcClassType=0 => 'Updated Status');

Event: => T_EvtType1StatusCodeEcho := MAP(T_SrcClassType!=2 AND T_SrcClassType!=3 AND T_SrcClassType!=0 => -99998,
                                                                            event_type_1 = '' OR event_type_1:Null => -99997,
                                                                            event_type_1);
Event: => T_EvtType2StatusCodeEcho := MAP(T_SrcClassType!=2 AND T_SrcClassType!=3 AND T_SrcClassType!=0 => -99998,
                                                                            event_type_2 = '' OR event_type_2:Null => -99997,
                                                                            event_type_2);
Event: => T_EvtType3StatusCodeEcho := MAP(T_SrcClassType!=2 AND T_SrcClassType!=3 AND T_SrcClassType!=0 => -99998,
                                                                            event_type_3 = '' OR event_type_3:Null => -99997,
                                                                            event_type_3);
                                                                            
Event: => T_NameStatusCodeEcho := MAP(T_SrcClassType!=2 AND T_SrcClassType!=3 AND T_SrcClassType!=0 => -99998,
                                                                name_risk_code = '' OR name_risk_code:Null => -99997,
                                                                name_risk_code);
Event: => T_IdStatusCodeEcho := MAP(T_SrcClassType!=2 AND T_SrcClassType!=3 AND T_SrcClassType!=0 => -99998,
                                                                identity_risk_code = '' OR identity_risk_code:Null => -99997,
                                                                identity_risk_code);
Event: => T_SsnStatusCodeEcho := MAP(T_SrcClassType!=2 AND T_SrcClassType!=3 AND T_SrcClassType!=0 => -99998,
                                                                ssn_risk_code = '' OR ssn_risk_code:Null => -99997,
                                                                ssn_risk_code);                                                             
Event: => T_DlStatusCodeEcho := MAP(T_SrcClassType!=2 AND T_SrcClassType!=3 AND T_SrcClassType!=0 => -99998,
                                                                drivers_license_risk_code = '' OR drivers_license_risk_code:Null => -99997,
                                                                drivers_license_risk_code);
Event: => T_AddrStatusCodeEcho := MAP(T_SrcClassType!=2 AND T_SrcClassType!=3 AND T_SrcClassType!=0 => -99998,
                                                                physical_address_risk_code = '' OR physical_address_risk_code:Null => -99997,
                                                                physical_address_risk_code);
Event: => T_PhnStatusCodeEcho := MAP(T_SrcClassType!=2 AND T_SrcClassType!=3 AND T_SrcClassType!=0 => -99998,
                                                                phone_risk_code = '' OR phone_risk_code:Null => -99997,
                                                                phone_risk_code);
Event: => T_EmailStatusCodeEcho := MAP(T_SrcClassType!=2 AND T_SrcClassType!=3 AND T_SrcClassType!=0 => -99998,
                                                                email_address_risk_code = '' OR email_address_risk_code:Null => -99997,
                                                                email_address_risk_code);
Event: => T_IpAddrStatusCodeEcho := MAP(T_SrcClassType!=2 AND T_SrcClassType!=3 AND T_SrcClassType!=0 => -99998,
                                                                ip_address_fraud_code = '' OR ip_address_fraud_code:Null => -99997,
                                                                ip_address_fraud_code);
Event: => T_BnkAcctStatusCodeEcho := MAP(T_SrcClassType!=2 AND T_SrcClassType!=3 AND T_SrcClassType!=0 => -99998,
                                                                bank_account_1_risk_code = '' OR bank_account_1_risk_code:Null => -99997,
                                                                bank_account_1_risk_code);



Event: => T15_SsnIsKrFlag := MAP(T15_SsnPopFlag = 0 => -99999,
                                                                 T_SrcClassType != 3 => -99998,
                                                                 T_SsnStatusCodeEcho = -99997 => 0,
                                                                 T_SsnStatusCodeEcho IN ['100','101','190','191','192','193'] => 1, -99997);
                                                                 
Event: => T20_DlIsKrFlag := MAP(T20_DlPopFlag = 0 => -99999,
                                                                T_SrcClassType != 3 => -99998,
                                                                T_DlStatusCodeEcho = -99997 => 0,
                                                                T_DlStatusCodeEcho IN ['200','201','202','203','204','290','291','292','293'] => 1, -99997);

Event: => T9_AddrIsKrFlag := MAP(T9_AddrPopFlag = 0 => -99999,
                                                                 T_SrcClassType !=3 => -99998,
                                                                 T_AddrStatusCodeEcho = -99997 => 0,
                                                                 T_AddrStatusCodeEcho IN ['300','301','302','303','390','391','392','393'] => 1, -99997);
                                                                
Event: => T16_PhnIsKrFlag := MAP(T16_PhnPopFlag = 0 => -99999,
                                                                 T_SrcClassType !=3 => -99998,
                                                                 T_PhnStatusCodeEcho = -99997 => 0,
                                                                 T_PhnStatusCodeEcho IN ['400','401','402','490','491','492','493'] => 1, -99997);
                                                                 
Event: => T17_EmailIsKrFlag := MAP(T17_EmailPopFlag = 0 => -99999,
                                                                 T_SrcClassType != 3 => -99998,
                                                                 T_EmailStatusCodeEcho = -99997 => 0,
                                                                 T_EmailStatusCodeEcho IN ['500','501','502','590','591','592','593'] => 1, -99997);
                                                                 
Event: => T18_IpAddrIsKrFlag := MAP(T18_IpAddrPopFlag = 0 => -99999,
                                                                 T_SrcClassType != 3 => -99998,
                                                                 T_IpAddrStatusCodeEcho = -99997 => 0,
                                                                 T_IpAddrStatusCodeEcho IN ['600','601','602','603','604','605','1000','1001','1090','1091','1092','1093'] => 1, -99997);

Event: => T19_BnkAcctIsKrFlag := MAP(T19_BnkAcctPopFlag = 0 => -99999,
                                                                 T_SrcClassType !=3 => -99998,
                                                                 T_BnkAcctStatusCodeEcho = -99997 => 0,
                                                                 T_BnkAcctStatusCodeEcho IN ['800','801','802','890','891','892','893'] => 1, -99997);

Event: => T1_IdIsKrGenFrdFlag := MAP(T1_LexIdPopFlag = 0 AND T1_RinIdPopFlag = 0 => -99999,
                                                                 T_SrcClassType != 3 => -99998,
                                                                 T_EvtType1StatusCodeEcho = -99997 AND T_EvtType2StatusCodeEcho = -99997 AND T_EvtType3StatusCodeEcho = -99997 => 0,
                                                                 T_EvtType1StatusCodeEcho IN ['10000','10001','10002','10003','10004','10005','10006','10007',
                                                                                                    '11000','11001','11002','11003','11004','11005','11006','11007','11008','11009','11010','11011','11012','11013','11014','11015','11016','11017','11018','11019',
                                                                                                    '12000','12001','12002','12003','12004','12006','12007',
                                                                                                    '13000','13001','13002','13003','13005','13006','13007']
                                                                 OR T_EvtType2StatusCodeEcho IN ['10000','10001','10002','10003','10004','10005','10006','10007',
                                                                                                    '11000','11001','11002','11003','11004','11005','11006','11007','11008','11009','11010','11011','11012','11013','11014','11015','11016','11017','11018','11019',
                                                                                                    '12000','12001','12002','12003','12004','12006','12007',
                                                                                                    '13000','13001','13002','13003','13005','13006','13007']
                                                                 OR T_EvtType3StatusCodeEcho IN ['10000','10001','10002','10003','10004','10005','10006','10007',
                                                                                                    '11000','11001','11002','11003','11004','11005','11006','11007','11008','11009','11010','11011','11012','11013','11014','11015','11016','11017','11018','11019',
                                                                                                    '12000','12001','12002','12003','12004','12006','12007',
                                                                                                    '13000','13001','13002','13003','13005','13006','13007'] => 1, -99997);
Event: => T1_IdIsKrStolIdFlag := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
                                                                     T_SrcClassType != 3 => -99998,
                                                                     T1_IdIsKrGenFrdFlag = -99997 => 0,
                                                                     T_EvtType1StatusCodeEcho IN ['10000','10001','10002','10004']
                                                                         OR T_EvtType2StatusCodeEcho IN ['10000','10001','10002','10004']
                                                                         OR T_EvtType3StatusCodeEcho IN ['10000','10001','10002','10004'] => 1, -99997);
Event: => T1_IdIsKrAppFrdFlag := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
                                                                     T_SrcClassType != 3 => -99998,
                                                                     T1_IdIsKrGenFrdFlag = -99997 => 0,
                                                                     T_EvtType1StatusCodeEcho IN ['10002','10003','11003','11005','11017','11018','11019']
                                                                         OR T_EvtType2StatusCodeEcho IN ['10002','10003','11003','11005','11017','11018','11019']
                                                                         OR T_EvtType3StatusCodeEcho IN ['10002','10003','11003','11005','11017','11018','11019'] => 1, -99997);
Event: => T1_IdIsKrOthFrdFlag := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
                                                                     T_SrcClassType != 3 => -99998,
                                                                     T1_IdIsKrGenFrdFlag = -99997 => 0,
                                                                     T_EvtType1StatusCodeEcho IN ['14900','14901','14902','14903']
                                                                         OR T_EvtType2StatusCodeEcho IN ['14900','14901','14902','14903']
                                                                         OR T_EvtType3StatusCodeEcho IN ['14900','14901','14902','14903'] => 1, -99997);
Event: => T1_IdIsKrFlag := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
                                                                     T_SrcClassType != 3 => -99998,
                                                                     T1_IdIsKrGenFrdFlag = -99997 => 0,
                                                                     T1_IdIsKrGenFrdFlag=1 OR T1_IdIsKrStolIdFlag=1 OR T1_IdIsKrAppFrdFlag=1 OR T1_IdIsKrOthFrdFlag=1 => 1, 0);

Event: => T_FirstNmPopFlag := MAP(T_InpClnFirstNmEcho IN ['-99999','-99998','-99997'] => 0, 1);
Event: => T_LastNmPopFlag := MAP(T_InpClnLastNmEcho IN ['-99999','-99998','-99997'] => 0, 1);
Event: => T_DobPopFlag := MAP(T_InpClnDobEcho < -99997 => 0, 1);

// jp Event: => T20_DlPopFlag := MAP(T_InpClnDlEcho IN ['-99999','-99998','-99997'] OR T_InpClnDlStEcho IN ['-99999','-99998','-99997'] => 0, 1);


Event: => T_IsBcShllHitFlag := MAP(BocashellHit=TRUE => 1, 0);
Event: => T_BcShllLexIdEcho := MAP(T_IsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                     BocashellLexId = 0 => -99997,
                                                                     BocashellLexId); 

Event: => T1_IdAge := MAP((T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0) OR T_DobPopFlag=0 => -99999,
                                                    T_SrcClassType < 4 => -99998,
                                                    INTEGER(T_InpClnDobEcho) > INTEGER(T_ActDtEcho) => -99997,
                                                    MIN(FLOOR(DAYSBETWEEN(DATE(T_InpClnDobEcho),T_ActDtEcho)/365.25),200));

Event: => T1L_LexIdSeenFlag := MAP(T1_LexIdPopFlag = 0 => -99999,
                                                                     T_IsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                    T_BcShllLexIdEcho=-99997 => -99997,
                                                                     truedid=TRUE => 1, 0);
                                                                     
Event: => T1L_IdIsBcShllHitFlag := MAP(T1_LexIdPopFlag=0 => -99999,
                                                                             T_IsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                            T1L_BcShllLexIdMatchesInpFlag=-99997 OR T1L_LexIdSeenFlag=-99997 => -99997,
                                                                             T1L_BcShllLexIdMatchesInpFlag=1 AND T1L_LexIdSeenFlag=1 => 1, 0);

Event: => T1L_BcShllLexIdMatchesInpFlag := MAP(T1_LexIdPopFlag=0 => -99999,
                                                                                             T_IsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                                             T_BcShllLexIdEcho=-99997 => -99997,
                                                                                             T_BcShllLexIdEcho = T_PersonUidEcho => 1, 0);                                                                           
Event: => T1_AdultIdNotSeenFlag := MAP((T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0) OR T_DobPopFlag=0 => -99999,
                                        T_IsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                                T1_IdAge=-99997 => -99997,
                                                                                T1_IdAge >= 18 AND ((T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=1) OR (T1_LexIdPopFlag=1 AND T1L_IdIsBcShllHitFlag=0)) => 1, 0);
Event: => T1_StolIdFlag := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
                               T_IsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                             T1_Fp3_StolenIdentityIndex=-99997 => -99997,
                                                             T1_Fp3_StolenIdentityIndex >=7 => 1, 0);           
Event: => T1_Fp3_StolenIdentityIndex := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
                                            T_IsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                                        fp3_stolenidentityindex='' OR fp3_stolenidentityindex:Null OR fp3_stolenidentityindex=0 => -99997,
                                                                                        fp3_stolenidentityindex);   
                                                                                        
Event: => T1_SynthIdFlag := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
                                T_IsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                T1_Fp3_SyntheticIdentityIndex=-99997 => -99997,
                                                                T1_Fp3_SyntheticIdentityIndex >=7 => 1, 0);
                                                                
Event: => T1_Fp3_SyntheticIdentityIndex := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
                                           T_IsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                                     syntheticidentityindex_v3='' OR syntheticidentityindex_v3:Null OR syntheticidentityindex_v3=0 => -99997,
                                                                                     syntheticidentityindex_v3);
                                                                                     
Event: => T1L_DobNotVerFlag := MAP(T1_LexIdPopFlag=0 OR T_DobPopFlag=0 => -99999,
                                   T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                     T1L_DobVerIndx=-99997 => -99997,
                                                                     T1L_DobVerIndx < 7 => 1, 0);
                                                                     
Event: => T1L_DobVerIndx := MAP(T1_LexIdPopFlag=0 OR T_DobPopFlag=0 => -99999,
                                T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                dobmatchlevel:Null OR dobmatchlevel=0 => -99997,
                                                                dobmatchlevel);
                                                                
Event: => T1_ManipIDFlag := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
                                T_IsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                T1_Fp3_ManipIdentityIndex=-99997 => -99997,
                                                                T1_Fp3_ManipIdentityIndex >=7 => 1, 0);
                                                                
Event: => T1_Fp3_ManipIdentityIndex := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
                                           T_IsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                                     manipulatedidentityindex_v3='' OR manipulatedidentityindex_v3:Null OR manipulatedidentityindex_v3=0 => -99997,
                                                                                     manipulatedidentityindex_v3);
                                                                                     
Event: => T1L_SsnWAltNAVerFlag := MAP(T1_LexIdPopFlag=0 OR T15_SsnPopFlag=0 => -99999,
                                      T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                            T1L_NasSummary < 1 => -99997,
                                                                            T1L_NasSummary = 1 => 1, 0);
                                                                            
Event: => T1_NapSummary := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
                           T_IsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                     nap_summary);
Event: => T1L_NasSummary := MAP(T1_LexIdPopFlag=0 => -99999,
                            T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                        nas_summary);
Event: => T1_Cvi := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
                    T_IsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                        cvi);
                                                        
Event: => T1_FirstNmNotVerFlag := MAP((T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0) OR T_FirstNmPopFlag=0 => -99999,
                                       T_IsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                             T1_NapSummary < 1 AND T1L_NasSummary < 1 => -99997,
                                                                             (T1_NapSummary IN [1,5,6,7,11]) AND (T1L_NasSummary IN [1,5,6,7,11]) => 1, 0);
Event: => T1_LastNmNotVerFlag := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 OR T_LastNmPopFlag=0 => -99999,
                                     T_IsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                         T1_NapSummary < 1 AND T1L_NasSummary < 1 => -99997,
                                                                         T1_NapSummary IN [1,3,4,6,10] AND T1L_NasSummary IN [1,3,4,6,10] => 1, 0);
                                                                         
Event: => T1_AddrNotVerFlag := MAP((T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0) OR T9_AddrPopFlag=0 => -99999,
                                    T_IsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                        T1_NapSummary  < 1 AND T1L_NasSummary < 1 => -99997,
                                                                        T1_NapSummary IN [1,2,4,7,9] AND T1L_NasSummary IN [1,2,4,7,9] => 1, 0);
                                                                         
Event: => T1L_HiRiskCviFlag :=  MAP(T1_LexIdPopFlag=0 => -99999, 
                                    T_IsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                        T1_Cvi <= 20 => 1, 0);
Event: => T1L_MedRiskCviFlag := MAP(T1_LexIdPopFlag=0 => -99999,
                                    T_IsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                        T1_Cvi IN [30,40] => 1, 0);
                                                                        
Event: => T1_MinorWLexIDFlag := MAP((T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0) OR T_DobPopFlag=0 => -99999,
                                     T_IsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                         T1_IdAge=-99997 => -99997,
                                                                         T1_IdAge < 18 AND T1L_IdIsBcShllHitFlag=1 AND T1_LexIdPopFlag=1 => 1,0);

Event: => T1_PhnNotVerFlag := MAP((T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0) OR T16_PhnPopFlag=0 => -99999,
                                   T_IsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                     T1_NapSummary < 1 => -99997,
                                                                     T1_NapSummary IN [2,3,5,8] => 1, 0);
                                                                     
Event: => T1L_SsnWAddrNotVerFlag := MAP(T1_LexIdPopFlag=0 OR T15_SsnPopFlag=0 OR T9_AddrPopFlag=0 => -99999,
                                        T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                                T1L_NasSummary < 1 => -99997,
                                                                                T1L_NasSummary IN [4,7,9] => 1, 0);
                                                                                
Event: => T1_SsnPriorDOBFlag := MAP((T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0) OR T15_SsnPopFlag=0 OR T_DobPopFlag=0 => -99999,
                                     T_IsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                         socsdobflag:Null OR socsdobflag > 1 => -99997,
                                                                         socsdobflag);
                                                                         
Event: => T1L_SsnNotVerFlag := MAP(T1_LexIdPopFlag=0 OR T15_SsnPopFlag=0 => -99999,
                                   T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                     T1L_NasSummary < 1 => -99997,
                                                                     T1L_NasSummary IN [2,3,5,8] => 1, 0);
                                                                     
Event: => T1L_CurrAddrNotInAgcyJurStFlag := MAP(T1_LexIdPopFlag=0 => -99999,
                                                T1L_CurrAddrPopFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                                                T1L_CurrAddrStEcho != AgencyProgJurSt => 1, 0);
                                                                                                
Event: => T1L_CurrAddrPopFlag := MAP(T1_LexIdPopFlag=0 => -99999,
                                                                        T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                        add_curr_pop=TRUE => 1, 0);
Event: => T1L_CurrAddrStEcho := MAP(T1_LexIdPopFlag=0 => -99999,
                                                                                     T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                                     add_curr_st = '' OR add_curr_st:Null => -99997,
                                                                                     add_curr_st);  

Event: => T1_HdrSrcCatCntLwFlag := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
                                       T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                             T1L_Fp_SourceRiskLevel=-99997 => -99997,
                                                                             T1L_Fp_SourceRiskLevel >=7 => 1, 0);
                                                                             
Event: => T1L_Fp_SourceRiskLevel := MAP(T1_LexIdPopFlag=0 => -99999,
                                        T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                                sourcerisklevel < 1 => -99997,
                                                                                sourcerisklevel);
                                                                                
Event: => T1L_IdDeceasedFlag := MAP(T1_LexIdPopFlag=0 => -99999,
                                    T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                        diddeceased:Null => -99997,
                                                                        diddeceased=TRUE => 1, 0);
Event: => T1L_IdDtOfDeath := MAP(T1_LexIdPopFlag=0 => -99999,
                             T1L_IdDeceasedFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                         NOT ISVALIDDATE(diddeceaseddate) => -99997,
                                                         INTEGER(diddeceaseddate));
Event: => T1L_IdDtOfDeathAftIdActCntEv := MAP(T1_LexIdPopFlag=0 => -99999,
                                              T1L_IdDeceasedFlag < 1 OR T_SrcClassType < 4 => -99998, 
                                                                                            T1L_IdDtOfDeath=-99997 => -99997,
                                                                                            EventDate > Event.diddeceaseddate => 1, 0);
Event: => T1L_IdDtOfDeathAftIdActFlagEv := MAP(T1_LexIdPopFlag=0 => -99999,
                                               T1L_IdDeceasedFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                                             T1L_IdDtOfDeath=-99997 => -99997,
                                                                                             T1L_IdDtOfDeathAftIdActCntEv>0 => 1, 0);                                                                                        
                                                                                             
Event: => P1_AotIdKrStolIdActCntEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
                                                                              T_SrcClassType <2 => -99998,
                                                                                    T1_IdIsKrStolIdFlag=-99997 => -99997,
                                                                                    T1_IdIsKrStolIdFlag=1 AND T_InAgencyFlag=1 => 1, 0);
Event: => P1_AotIdKrStolIdActFlagEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
                                                                              T_SrcClassType <2 => -99998,
                                                                                    P1_AotIdKrStolIdActCntEv=-99997 => -99997,
                                                                                    P1_AotIdKrStolIdActCntEv>0 => 1, 0);
                                                                                    
Event: => P1_AotIdKrGenFrdActCntEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
                                                                            T_SrcClassType <2 => -99998,
                                                                            T1_IdIsKrGenFrdFlag=-99997 => -99997,
                                                                                T1_IdIsKrGenFrdFlag=1 AND T_InAgencyFlag=1 => 1, 0);                                                                                        
Event: => P1_AotIdKrGenFrdActFlagEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
                                                                               T_SrcClassType <2 => -99998,
                                                                                   P1_AotIdKrGenFrdActCntEv = -99997 => -99997,
                                                                                     P1_AotIdKrGenFrdActCntEv>0 => 1, 0);
    
Event: => P1_AotIdKrAppFrdActCntEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
                                                                          T_SrcClassType <2 => -99998,
                                                                            T1_IdIsKrAppFrdFlag=-99997 => -99997,
                                                                            T1_IdIsKrAppFrdFlag=1 AND T_InAgencyFlag=1 => 1, 0);                                                                    
Event: => P1_AotIdKrAppFrdActFlagEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
                                                                           T_SrcClassType <2 => -99998,
                                                                             P1_AotIdKrAppFrdActCntEv=-99997 => -99997,
                                                                             P1_AotIdKrAppFrdActCntEv>0 => 1, 0);   
                                                                             
Event: => P1_AotIdKrOthFrdActCntEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
                                                                              T_SrcClassType <2 => -99998,
                                                                                    T1_IdIsKrOthFrdFlag=-99997 => -99997,
                                                                                    T1_IdIsKrOthFrdFlag=1 AND T_InAgencyFlag=1 => 1, 0);
Event: => P1_AotIdKrOthFrdActFlagEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
                                                                              T_SrcClassType <2 => -99998,
                                                                                    P1_AotIdKrOthFrdActCntEv = -99997 => -99997,
                                                                                    P1_AotIdKrOthFrdActCntEv>0 => 1, 0);
                                                                                    
Event: => P9_AotAddrKrActCntEv := MAP(T9_AddrPopFlag=0 => -99999,
                                                                            T_SrcClassType < 2 => -99998,
                                                                            T9_AddrIsKrFlag=-99997 => -99997,
                                                                            T9_AddrIsKrFlag=1 AND T_InAgencyFlag=1 => 1, 0);
Event: => P9_AotAddrKrActFlagEv := MAP(T9_AddrPopFlag=0 => -99999,
                                                                            T_SrcClassType <2 => -99998,
                                                                            P9_AotAddrKrActCntEv=-99997 => -99997,
                                                                            P9_AotAddrKrActCntEv>0 => 1, 0);

Event: => P15_AotSsnKrActCntEv := MAP(T15_SsnPopFlag=0 => -99999,
                                                                            T_SrcClassType <2 => -99998,
                                                                            T15_SsnIsKrFlag=-99997 => -99997,
                                                                            T15_SsnIsKrFlag=1 AND T_InAgencyFlag=1 => 1, 0);
Event: => P15_AotSsnKrActFlagEv := MAP(T15_SsnPopFlag=0 => -99999,
                                                                            T_SrcClassType <2 => -99998,
                                                                            P15_AotSsnKrActCntEv=-99997 => -99997,
                                                                            P15_AotSsnKrActCntEv>0 => 1, 0);
                                                                            
Event: => P16_AotPhnKrActCntEv := MAP(T16_PhnPopFlag=0 => -99999,
                                                                            T_SrcClassType <2 => -99998,
                                                                            T16_PhnIsKrFlag=-99997 => -99997,
                                                                            T16_PhnIsKrFlag=1 AND T_InAgencyFlag=1 => 1, 0);
Event: => P16_AotPhnKrActFlagEv := MAP(T16_PhnPopFlag=0 => -99999,
                                                                            T_SrcClassType <2 => -99998,
                                                                            P16_AotPhnKrActCntEv=-99997 => -99997,
                                                                            P16_AotPhnKrActCntEv>0 => 1, 0);
    
Event: => P17_AotEmailKrActCntEv := MAP(T17_EmailPopFlag=0 => -99999,
                                                                                T_SrcClassType <2 => -99998,
                                                                                T17_EmailIsKrFlag=-99997 => -99997,
                                                                                T17_EmailIsKrFlag=1 AND T_InAgencyFlag=1 => 1, 0);
Event: => P17_AotEmailKrActFlagEv := MAP(T17_EmailPopFlag=0 => -99999,
                                                                                T_SrcClassType <2 => -99998,
                                                                                P17_AotEmailKrActCntEv=-99997 => -99997,
                                                                                P17_AotEmailKrActCntEv>0 => 1, 0);
                                                                                
Event: => P18_AotIpAddrKrActCntEv := MAP(T18_IpAddrPopFlag=0 => -99999,
                                                                                 T_SrcClassType <2 => -99998,
                                                                                 T18_IpAddrIsKrFlag=-99997 => -99997,
                                                                                 T18_IpAddrIsKrFlag=1 AND T_InAgencyFlag=1 => 1, 0);
Event: => P18_AotIpAddrKrActFlagEv := MAP(T18_IpAddrPopFlag=0 => -99999,
                                                                                 T_SrcClassType <2 => -99998,
                                                                                 P18_AotIpAddrKrActCntEv=-99997 => -99997,
                                                                                 P18_AotIpAddrKrActCntEv>0 => 1, 0);    
                                                                                 
Event: => P19_AotBnkAcctKrActCntEv := MAP(T19_BnkAcctPopFlag=0 => -99999,
                                                                                    T_SrcClassType <2 => -99998,
                                                                                    T19_BnkAcctIsKrFlag=-99997 => -99997,
                                                                                    T19_BnkAcctIsKrFlag=1 AND T_InAgencyFlag=1 => 1, 0);
Event: => P19_AotBnkAcctKrActFlagEv := MAP(T19_BnkAcctPopFlag=0 => -99999,
                                                                                    T_SrcClassType <2 => -99998,
                                                                                    P19_AotBnkAcctKrActCntEv=-99997 => -99997,
                                                                                    P19_AotBnkAcctKrActCntEv>0 => 1, 0);
                                                                                    
Event: => P20_AotDlKrActCntEv := MAP(T20_DlPopFlag=0 => -99999,
                                                                         T_SrcClassType <2 => -99998,
                                                                         T20_DlIsKrFlag=-99997 => -99997,
                                                                         T20_DlIsKrFlag=1 AND T_InAgencyFlag=1 => 1, 0);
Event: => P20_AotDlKrActFlagEv := MAP(T20_DlPopFlag=0 => -99999,
                                                                         T_SrcClassType <2 => -99998,
                                                                         P20_AotDlKrActCntEv = -99997 => -99997,
                                                                         P20_AotDlKrActCntEv>0 => 1, 0);        
                                                                         
Event: => T1L_IdCrimFlSdMatchFlag := MAP(T1_LexIdPopFlag=0 => -99999,
                                     T1L_IdCrimHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                         T_FirstNmPopFlag=0 OR T_LastNmPopFlag=0 OR T15_SsnPopFlag=0 OR T_DobPopFlag=0 => -99997,
                                                                         name_ssn_dob_match);
Event: => T1L_IdCrimHitFlag := MAP(T1_LexIdPopFlag=0 => -99999,
                                  T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                    CrimHit=TRUE => 1, 0);
Event: => T1L_IdCurrIncarcFlag := MAP(T1_LexIdPopFlag=0 => -99999,
                                  T1L_IdCrimHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                    T1L_IdCrimFlSdMatchFlag=-99997 OR curr_incar_flag='' OR curr_incar_flag:Null => -99997,
                                                                    T1L_IdCrimFlSdMatchFlag=1 AND curr_incar_flag='Y' => 1, 0); 
                                                                    
Event: => T1L_BestDlEcho := MAP(T1_LexIdPopFlag=0 => -99999, 
                             T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                         best_drivers_license = '' OR best_drivers_license:Null => -99997,
                                                         best_drivers_license);
                                                         
Event: => T1L_BestDlStEcho := MAP(T1_LexIdPopFlag=0 => -99999, 
                             T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                         best_drivers_license_state = '' OR best_drivers_license_state:Null => -99997,
                                                         best_drivers_license_state);
                                                                    
Event: => T1L_BestDlPopFlag := MAP(T1_LexIdPopFlag=0 => -99999, 
                             T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                         T1L_BestDlEcho = -99997 OR T1L_BestDlStEcho = -99997 => 0, 1);
                                                                    
Event: => T1L_BestDlNotInAgcyJurStFlag := MAP(T1_LexIdPopFlag=0 => -99999,
                                              T1L_BestDlPopFlag < 1 OR T_SrcClassType < 4 => -99998,
                                                                                            T1L_BestDlStEcho != AgencyProgJurSt => 1, 0);
                                                                    

Event: => P1_IdRiskUnscrbleFlag := MAP((T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=1) OR T_SrcClassType < 2 => 1, 0);
Event: => P9_AddrRiskUnscrbleFlag := 1;
Event: => P15_SsnRiskUnscrbleFlag := 1;
Event: => P16_PhnRiskUnscrbleFlag := 1;
Event: => P17_EmailRiskUnscrbleFlag := 1;
Event: => P18_IpAddrRiskUnscrbleFlag := 1;
Event: => P19_BnkAcctRiskUnscrbleFlag := 1;
Event: => P20_DlRiskUnscrbleFlag := 1;


QUERY: InputRin(DATASET OF RiskIntelligenceNetwork_Analytics.Layouts.LayoutInputPII_2 InputPIIDataset) <= Event 
         {
                 T1L_IdCurrIncarcFlag,
                  T1L_IdCrimFlSdMatchFlag,
                    
                    EntityContextUid,     
                    InCustomerPopulation,

                    Deceased,
                    DeceasedNameMatch,
                    DeceasedDobMatch,
                    DeceasedMatch,

                    CurrentlyIncarceratedFlag,
                    IdAge,
                    NoLexId,
                    NoLexIdAdult,

AgencyUid,
AgencyProgType,
AgencyProgJurSt,
T_SrcAgencyUid,
T_SrcAgencyProgType,
T_ActUid,
T_ActDtEcho,
T_SrcType,
T_SrcClassType,
T_PersonUidEcho,
T_InpClnTitleEcho,
T_InpClnFullNmEcho,
T_InpClnFirstNmEcho,
T_InpClnMiddleNmEcho,
T_InpClnLastNmEcho,
T_InpClnNmSuffixEcho,
T_InpClnAddrPrimRangeEcho,
T_InpClnAddrPreDirEcho,
T_InpClnAddrPrimNmEcho,
T_InpClnAddrSuffixEcho,
T_InpClnAddrPostDirEcho,
T_InpClnAddrUnitDesigEcho,
T_InpClnAddrSecRangeEcho,
T_InpClnAddrCityEcho,
T_InpClnAddrStEcho,
T_InpClnAddrZip5Echo,
T_InpClnAddrZip4Echo,
T_InpClnAddrLatEcho,
T_InpClnAddrLongEcho,
T_InpClnAddrCountyEcho,
T_InpClnAddrGeoBlkEcho,
T_InpClnSsnEcho,
T_InpClnDobEcho,
T_InpClnDlStEcho,
T_InpClnEmailEcho,
T_InpClnBnkAcctEcho,
T_InpClnBnkAcctRtgEcho,
T_InpClnIpAddrEcho,
T_InpClnPhnEcho,
T1_LexIdPopFlag,
T1_RinIdPopFlag,
T18_IsIpMetaHitFlag,
T18_IpAddrCity,
T18_IpAddrCountry ,
T18_IpAddrRegion,
T18_IpAddrDomain,
T18_IpAddrIspNm,
T18_IpAddrLocType,
T18_IpAddrProxyType,
T18_IpAddrProxyDesc,
T18_IpAddrIsIspFlag,
T18_IpAddrAsnCompNm,
T18_IpAddrAsn,
T18_IpAddrCompNm,
T18_IpAddrOrgNm,
T18_IpAddrHostedFlag,
T18_IpAddrVpnFlag,
T18_IpAddrTorNodeFlag,
T18_IpAddrLocNonUsFlag,
T18_IpAddrLocMiamiFlag,
T19_BnkAcctPopFlag,
T19_IsBnkAppHitFlag,
T19_BnkAcctBnkNm,
T19_BnkAcctHrPrePdRtgFlag,
T17_EmailPopFlag,
T17_EmailDomain,
T17_EmailDomainDispFlag,
T9_AddrPopFlag,
T9_AddrType,
T9_AddrStatus,
T16_PhnPopFlag,
T15_SsnPopFlag,
T18_IpAddrPopFlag,
P1_IdRiskUnscrbleFlag,
P9_AddrRiskUnscrbleFlag,
P15_SsnRiskUnscrbleFlag,
P16_PhnRiskUnscrbleFlag,
P17_EmailRiskUnscrbleFlag,
P18_IpAddrRiskUnscrbleFlag,
P19_BnkAcctRiskUnscrbleFlag,
P20_DlRiskUnscrbleFlag,
T1_StolIdFlag,
T1_SynthIdFlag,
T1L_DobNotVerFlag,
T1_ManipIDFlag,
T1_AdultIdNotSeenFlag,
T1L_SsnWAltNAVerFlag,
T1_FirstNmNotVerFlag,
T1_LastNmNotVerFlag,
T1_AddrNotVerFlag,
T1L_HiRiskCviFlag,
T1L_MedRiskCviFlag,
T1_MinorWLexIDFlag,
T1_PhnNotVerFlag,
T1L_SsnWAddrNotVerFlag,
T1_SsnPriorDOBFlag,
T1L_SsnNotVerFlag,
T1L_CurrAddrNotInAgcyJurStFlag,
T1L_BestDlNotInAgcyJurStFlag,
T1_HdrSrcCatCntLwFlag,
T1L_IdDeceasedFlag,
T1L_IdDtOfDeathAftIdActFlagEv,
P1_AotIdKrStolIdActFlagEv,
P1_AotIdKrGenFrdActFlagEv,
P1_AotIdKrAppFrdActFlagEv,
P1_AotIdKrOthFrdActFlagEv,
P9_AotAddrKrActFlagEv,
P15_AotSsnKrActFlagEv,
P16_AotPhnKrActFlagEv,
P17_AotEmailKrActFlagEv,
P18_AotIpAddrKrActFlagEv,
P19_AotBnkAcctKrActFlagEv,
P20_AotDlKrActFlagEv

                 }
             USE InputPIIDataset(FLAT, 
               
         Customer(
           CustomerId=gc_id,
           IndustryType=ind_type,
               JurisdictionState = batchin_rec.st // jp this will need to be switched to a col passed in from MBS
                 ),

                 SocialSecurityNumber(FILTER((UNSIGNED)batchin_rec.ssn <> 0),
                        Ssn=batchin_rec.ssn,
                        OttoSSNId=OttoSSNId,
                        SsnFormatted=batchin_rec.ssn,

                        v2_divssnidentitycountnew='', //Not sure what this is
                        DeceasedDate=boca_shell_appends.iid.diddeceaseddate,
                        DeceasedDateOfBirth=boca_shell_appends.iid.diddeceaseddob,
                        DeceasedFirst=boca_shell_appends.iid.diddeceasedfirst,
                        DeceasedMiddle='',
                        DeceasedLast=boca_shell_appends.iid.diddeceasedlast,   

                        DeceasedMatchCode='', //??
                         isdeepdive=FALSE,

                        county_death='', //??
                        DeceasedSsn='', //??
                        state_death_flag='', //??
                        death_rec_src='', //??
                        state_death_id=''), //??

                 Phone(FILTER(TRIM(batchin_rec.phoneno) != ''),
                        PhoneFormatted = cell_phone_formatted,  //NEEDS ADDED
                        PhoneNumber = batchin_rec.phoneno,
                        isCellPhone = TRUE),
    
                 Person(FILTER((UNSIGNED)batchin_rec.did <> 0),
                        LexId = batchin_rec.did,
                        DateOfBirth = batchin_rec.dob,
                        EventDate = event_date,
                        Title = pr_best_appends.best_title,
                        FirstName = batchin_rec.name_first,
                        MiddleName =batchin_rec.name_middle,
                        LastName = batchin_rec.name_last,
                        NameSuffix = batchin_rec.name_suffix
                        /*
                        EmailAddress=email_address,
                        PrimaryRange = clean_address.prim_range,
                        Predirectional = clean_address.predir,
                        PrimaryName = clean_address.prim_name,
                        Suffix =clean_address.addr_suffix,
                        Postdirectional = clean_address.postdir,
                        UnitDesignation = clean_address.unit_desig,
                        SecondaryRange = clean_address.sec_range,
                        PostalCity = clean_address.p_city_name,
                        VanityCity = clean_address.v_city_name,
                        State = clean_address.st,
                        Zip = clean_address.zip,
                        Zip4 = clean_address.zip4,
                        DeceasedDate = dod8,
                        DeceasedDateOfBirth = dob8,
                        DeceasedFirst = fname,
                        DeceasedMiddle = mname,
                        DeceasedLast = lname,
                        DeceasedSsn = ssn,
                        DeceasedMatchCode = matchcode,
                        DateFirstSeen = dt_first_seen, // Contains information for ASOF
                        DateLastSeen = dt_last_seen*/),     // Contains information for ASOF
                 
               Email(FILTER(batchin_rec.email_address != ''),
                   EmailAddress = batchin_rec.email_address,
                     Host = '',
                     EmailLastDomain = '',
                     isdisposableemail=0),  

                 Address(FILTER(/*(STRING10)batchin_rec.prim_range <> '' AND */ (STRING28)batchin_rec.prim_name <> '' AND (UNSIGNED3)batchin_rec.z5 <> 0),
                        PrimaryRange = batchin_rec.prim_range,
                        Predirectional = batchin_rec.predir,
                        PrimaryName = batchin_rec.prim_name,
                        Suffix =batchin_rec.addr_suffix,
                        Postdirectional = batchin_rec.postdir,
                        UnitDesignation = batchin_rec.unit_desig,
                        SecondaryRange = batchin_rec.sec_range,
                        PostalCity = batchin_rec.p_city_name,
                        VanityCity = '',  //NOT in input...it is in crim/advo/dl appends
                        State = batchin_rec.st,
                        Zip = batchin_rec.z5,
                        Zip4 = batchin_rec.zip4,
                        CarrierRouteNumber = advo_appends.cart,
                        CarrierRouteSortationAtZIP = advo_appends.cr_sort_sz,
                        LineOfTravel =advo_appends.lot,
                        LineOfTravelOrder = advo_appends.lot_order,
                        DeliveryPointBarcode = advo_appends.dbpc,
                        DeliveryPointBarcodeCheckDigit = advo_appends.chk_digit,
                        TypeCode = advo_appends.rec_type,
                        County = advo_appends.fips_county,
                        Latitude = advo_appends.geo_lat,
                        Longitude = advo_appends.geo_long,
                        MetropolitanStatisticalArea = advo_appends.msa,
                        GeoBlock = advo_appends.geo_blk,
                        GeoMatch = advo_appends.geo_match,
                        ACECleanerErrorCode = advo_appends.err_stat,
                        isAdditional=FALSE,
                        DateFirstSeen = advo_appends.date_first_seen, 
                        DateLastSeen = advo_appends.date_last_seen),
                 
                 InternetProtocol(FILTER(AssociatedCustomerFileInfo > 0 AND (UNSIGNED)record_id > 0 AND TRIM(batchin_rec.ipaddress) != '' AND batchin_rec.ipaddress NOT IN ['0.0.0.0','10.121.146.247','10.121.146.90','10.121.146.15','10.121.146.159','10.121.146.249','10.121.146.34','10.121.146.231','10.121.146.235','10.121.146.232']),
                        host = host,
                        alias = alias,
                        location = location,
                        ip_address = batchin_rec.ipaddress,
                        ip_address_date = ip_address_date,
                        version = version,
                        class = class,
                        subnet_mask = subnet_mask,
                        reserved = reserved,
                        isp = isp,
                         v2_validationipproblems =  v2_validationipproblems,
                        v2_ipstate = v2_ipstate,
                        v2_ipcountry = v2_ipcountry,
                        v2_ipcontinent = v2_ipcontinent,

                        iprngbeg = iprngbeg,
                        iprngend = iprngend,
                        edgecountry = edgecountry,
                        edgeregion = edgeregion,
                        edgecity = edgecity,
                        edgeconnspeed = edgeconnspeed,
                        edgemetrocode = edgemetrocode,
                        edgelatitude = edgelatitude,
                        edgelongitude = edgelongitude,
                        edgepostalcode = edgepostalcode,
                        edgecountrycode = edgecountrycode,
                        edgeregioncode = edgeregioncode,
                        edgecitycode = edgecitycode,
                        edgecontinentcode = edgecontinentcode,
                        edgetwolettercountry = edgetwolettercountry,
                        edgeinternalcode = edgeinternalcode,
                        edgeareacodes = edgeareacodes,
                        edgecountryconf = edgecountryconf,
                        edgeregionconf = edgeregionconf,
                        edgecitycong = edgecitycong,
                        edgepostalconf = edgepostalconf,
                        edgegmtoffset = edgegmtoffset,
                        edgeindst = edgeindst,
                        siccode = siccode,
                        domainname = domainname,
                        ispname = ispname,
                        homebiztype = homebiztype,
                        asn = asn,
                        asnname = asnname,
                        primarylang = primarylang,
                        secondarylang = secondarylang,
                        proxytype = proxytype,
                        proxydescription = proxydescription,
                        isanisp = isanisp,
                        companyname = companyname,
                        ranks = ranks,
                        households = households,
                        women = women,
                        women18to34 = women18to34,
                        women35to49 = women35to49,
                        men = men,
                        men18to34 = men18to34,
                        men35to49 = men35to49,
                        teens = teens,
                        kids = kids,
                        naicscode = naicscode,
                        cbsacode = cbsacode,
                        cbsatitle = cbsatitle,
                        cbsatype = cbsatype,
                        csacode = csacode,
                        csatitle = csatitle,
                        mdcode = mdcode,
                        mdtitle = mdtitle,
                        organizationname = organizationname
),               

                 Bank(FILTER(batchin_rec.bank_routing_number != '' AND batchin_rec.bank_account_number != ''),
                   RoutingNumber = batchin_rec.bank_routing_number,
                   FullBankname = bank1FullBankname,
                   AbbreviatedBankname = bank1AbbreviatedBankname,
                   FractionalRoutingnumber = bank1FractionalRoutingnumber,
                   HeadofficeRoutingnumber = bank1HeadofficeRoutingnumber,
                   HeadofficeBranchcodes = bank1HeadofficeBranchcodes,
                   hit = bank1hit 
                    ),

                 BankAccount(FILTER((UNSIGNED)batchin_rec.did <> 0 AND TRIM(batchin_rec.bank_account_number) != ''),
                    RoutingNumber = batchin_rec.bank_routing_number,
                    AccountNumber = batchin_rec.bank_account_number,
                    OttoBankAccountId = OttoBankAccountId
                    ),

                    DriversLicense(FILTER(TRIM(batchin_rec.dl_number) != ''),
                        LicenseNumber = batchin_rec.dl_number,
                        State = batchin_rec.dl_state,
                        OttoDriversLicenseId = OttoDriversLicenseId
                    ),

                 PersonEvent(
                            LexId = batchin_rec.did,
                            EventDate = event_date,
                            record_id = batchin_rec.seq
                         ),
     
               Event( 
          CustomerId=gc_id,
          IndustryType=ind_type,            
                    rin_source = rin_source,    
                    LexId = batchin_rec.did,
                    CaseId = '',
                    ClientId = '',
                    OttoAddressId = OttoAddressId,
                    OttoEmailId = OttoEmailId,
                    OttoIpAddressId = OttoIpAddressId,
                    OttoDriversLicenseId = OttoDriversLicenseId,
                    OttoSSNId = OttoSSNId,
                    OttoBankAccountId = OttoBankAccountId,
                    EventDate = event_date,
                    RecordId=record_id,
                    DateOfBirth = batchin_rec.dob,      
                    Title = pr_best_appends.best_title,
                    FirstName = batchin_rec.name_first,
                    MiddleName =batchin_rec.name_middle,
                    LastName = batchin_rec.name_last,
                    NameSuffix = batchin_rec.name_suffix,
                    unique_number = '', // ????
                    mac_address = mac_address,
                    serial_number = serial_number,
                    device_type = device_type,
                    device_identification_provider = device_identification_provider,
                    addresspobox = FALSE, // ??
                    addresscmra = FALSE,  //??
                    PrimaryRange = batchin_rec.prim_range,
                    Predirectional = batchin_rec.predir,
                    PrimaryName = batchin_rec.prim_name,
                    Suffix =batchin_rec.addr_suffix,
                    Postdirectional = batchin_rec.postdir,
                    UnitDesignation = batchin_rec.unit_desig,
                    SecondaryRange = batchin_rec.sec_range,
                    PostalCity = batchin_rec.p_city_name,
                    VanityCity = '',  //NOT in input...it is in crim/advo/dl appends
                    State = batchin_rec.st,
                    Zip = batchin_rec.z5,
                    Zip4 = batchin_rec.zip4,
                    CarrierRouteNumber = advo_appends.cart,
                    CarrierRouteSortationAtZIP = advo_appends.cr_sort_sz,
                    LineOfTravel =advo_appends.lot,
                    LineOfTravelOrder = advo_appends.lot_order,
                    DeliveryPointBarcode = advo_appends.dbpc,
                    DeliveryPointBarcodeCheckDigit = advo_appends.chk_digit,
                    TypeCode = advo_appends.rec_type,
                    County = advo_appends.fips_county,
                    Latitude = advo_appends.geo_lat,
                    Longitude = advo_appends.geo_long,
                    MetropolitanStatisticalArea = advo_appends.msa,
                    GeoBlock = advo_appends.geo_blk,
                    GeoMatch = advo_appends.geo_match,
                    ACECleanerErrorCode = advo_appends.err_stat,
                    isAdditional=FALSE,
                    PhoneFormatted = batchin_rec.phoneno,   //Doesn't exist...I can create it with whatever format we need
                    LicenseNumber = batchin_rec.dl_number,
                    LicenseState = batchin_rec.dl_state,
                    
                    EmailAddress=batchin_rec.email_address,
                    Type = '', // ??
                    CreatedOn = 0,
                    Host = '', // ??
                    EmailLastDomain = '', // ??
                    isdisposableemail = 0,   //??

                    Ssn = batchin_rec.ssn,
                    SsnFormatted = '', //??

                    RoutingNumber = batchin_rec.bank_routing_number,
                    FullBankname = '',
                    AbbreviatedBankname = '',
                    FractionalRoutingnumber = '',
                    HeadofficeRoutingnumber = '',
                    HeadofficeBranchcodes = '',
                    AccountNumber = batchin_rec.bank_account_number,
                    BankHit = '',
                                
                    Confidence_that_activity_was_deceitful_id = Confidence_that_activity_was_deceitful_id,
                    name_risk_code = name_risk_code,
                    dob_risk_code = dob_risk_code,
                    ssn_risk_code = ssn_risk_code,
                    drivers_license_risk_code = drivers_license_risk_code,
                    physical_address_risk_code = physical_address_risk_code,
                    phone_risk_code = phone_risk_code,
                    cell_phone_risk_code = cell_phone_risk_code,
                    work_phone_risk_code = work_phone_risk_code,
                    bank_account_1_risk_code = bank_account_1_risk_code,
                    bank_account_2_risk_code = bank_account_2_risk_code,
                    email_address_risk_code = email_address_risk_code,
                    ip_address_fraud_code = ip_address_fraud_code,
                    business_risk_code = business_risk_code,
                    mailing_address_risk_code = mailing_address_risk_code,
                    device_risk_code = device_risk_code,
                    identity_risk_code = identity_risk_code,

                    event_type_1 = event_type_1,
                    event_type_2 = event_type_2,
                    event_type_3 = event_type_3,
                    
                    DateOfBirth = batchin_rec.dob,
                    BocashellHit = BocaShellHit ,
                    BocashellLexId = boca_shell_appends.shell_input.did,
                    nap_summary = boca_shell_appends.iid.nap_summary,
                    nas_summary = boca_shell_appends.iid.nap_summary,
                    cvi = boca_shell_appends.iid.cvi,
                    fp3_stolenidentityindex = boca_shell_appends.fd_scores.stolenidentityindex_v3,
                    syntheticidentityindex_v3 = boca_shell_appends.fd_scores.syntheticidentityindex_v3,
                    manipulatedidentityindex_v3 = boca_shell_appends.fd_scores.manipulatedidentityindex_v3,
                    socsdobflag =boca_shell_appends. iid.socsdobflag,
                    pwsocsdobflag = boca_shell_appends.iid.pwsocsdobflag,
                    dobmatchlevel = boca_shell_appends.dobmatchlevel,
                    sourcerisklevel = boca_shell_appends.fdattributesv2.sourcerisklevel,
                    reason1 = boca_shell_appends.iid.reason1,
                    reason2 = boca_shell_appends.iid.reason2,
                    reason3 = boca_shell_appends.iid.reason3,
                    reason4 = boca_shell_appends.iid.reason4,
                    reason5 = boca_shell_appends.iid.reason5,
                    reason6 = boca_shell_appends.iid.reason6,
                    socsvalflag = boca_shell_appends.iid.socsvalflag,
                    drlcvalflag = boca_shell_appends.iid.drlcvalflag,
                    hphonevalflag = boca_shell_appends.iid.hphonevalflag,
                    truedid = boca_shell_appends.truedid,

                            best_fname  = pr_best_appends.best_fname,
                            best_lname  = pr_best_appends.best_lname,
                            best_ssn    = pr_best_appends.best_ssn,     

                            input_fname_isbestmatch = boca_shell_appends.best_flags.input_fname_isbestmatch,
                            input_lname_isbestmatch = boca_shell_appends.best_flags.input_lname_isbestmatch,
                            input_ssn_isbestmatch = boca_shell_appends.best_flags.input_ssn_isbestmatch,
                             add_curr_pop = boca_shell_appends.adl_shell_flags.in_addrpop,  //This is a wild guess


                            add_curr_prim_range = boca_shell_appends.address_verification.input_address_information.prim_range,
                            add_curr_predir = boca_shell_appends.address_verification.input_address_information.predir,
                            add_curr_prim_name = boca_shell_appends.address_verification.input_address_information.prim_name,
                            add_curr_addr_suffix =boca_shell_appends.address_verification.input_address_information.addr_suffix,
                            add_curr_postdir = boca_shell_appends.address_verification.input_address_information.postdir,
                            add_curr_unit_desig = boca_shell_appends.address_verification.input_address_information.unit_desig,
                            add_curr_sec_range = boca_shell_appends.address_verification.input_address_information.sec_range,
                            add_curr_city_name = boca_shell_appends.address_verification.input_address_information.city_name,
                            add_curr_st = boca_shell_appends.address_verification.input_address_information.st,
                            add_curr_zip5 = boca_shell_appends.address_verification.input_address_information.zip5,
                            add_curr_county = boca_shell_appends.address_verification.input_address_information.county,
                            add_curr_geo_blk = boca_shell_appends.address_verification.input_address_information.geo_blk,
                            add_curr_lat = boca_shell_appends.address_verification.input_address_information.lat,
                            add_curr_long = boca_shell_appends.address_verification.input_address_information.long,
                            add_input_isbestmatch = boca_shell_appends.address_verification.input_address_information.isbestmatch,
                            bocashell_addr1_dt_first_seen = boca_shell_appends.address_verification.input_address_information.date_first_seen,
                            bocashell_addr1_date_last_seen = boca_shell_appends.address_verification.input_address_information.date_last_seen,          
                            historydatetimestamp = boca_shell_appends.historydatetimestamp,
                            reported_dob = boca_shell_appends.reported_dob,
                            diddeceased = boca_shell_appends.iid.diddeceased,
                            diddeceaseddate = boca_shell_appends.iid.diddeceaseddate,
                            fraudpoint_v3 = boca_shell_appends.fd_scores.fraudpoint_v3,
                            BestHit = TRUE, //by definition
                            best_phone = pr_best_appends.best_phone, //or boca_shell_appends.best_flags.best_phone_phoneval
                            best_drivers_license_state = pr_best_appends.dl_state,
                            best_drivers_license = pr_best_appends.dl_nbr,
                            best_drivers_license_exp = dl_appends.expiration_date,
                            DeceasedDate = boca_shell_appends.iid.diddeceaseddate,
                            DeceasedDateOfBirth = boca_shell_appends.iid.diddeceaseddob,
                            DeceasedFirst = boca_shell_appends.iid.diddeceasedfirst,
                            DeceasedMiddle = '',
                            DeceasedLast = boca_shell_appends.iid.diddeceasedlast,   

                            DeceasedMatchCode = '',
                             isdeepdive = FALSE,

                            county_death = '',
                            DeceasedSsn = '',
                            state_death_flag = '',
                            death_rec_src = '',
                            state_death_id = '',

                            CrimHit = crim_hit,
                            curr_incar_flag = curr_incar_flag,
                            off_cat_list = '', //Need to build list from the offense categories
                            name_ssn_dob_match = crim_match_type, //??

                            IpAddress=ip_address,
                            iprngbeg = iprngbeg,
                            iprngend = iprngend,
                            edgecountry = edgecountry,
                            edgeregion = edgeregion,
                            edgecity = edgecity,
                            edgeconnspeed = edgeconnspeed,
                            edgemetrocode = edgemetrocode,
                            edgelatitude = edgelatitude,
                            edgelongitude = edgelongitude,
                            edgepostalcode = edgepostalcode,
                            edgecountrycode = edgecountrycode,
                            edgeregioncode = edgeregioncode,
                            edgecitycode = edgecitycode,
                            edgecontinentcode = edgecontinentcode,
                            edgetwolettercountry = edgetwolettercountry,
                            edgeinternalcode = edgeinternalcode,
                            edgeareacodes = edgeareacodes,
                            edgecountryconf = edgecountryconf,
                            edgeregionconf = edgeregionconf,
                            edgecitycong = edgecitycong,
                            edgepostalconf = edgepostalconf,
                            edgegmtoffset = edgegmtoffset,
                            edgeindst = edgeindst,
                            siccode = siccode,
                            domainname = domainname,
                            ispname = ispname,
                            homebiztype = homebiztype,
                            asn = asn,
                            asnname = asnname,
                            primarylang = primarylang,
                            secondarylang = secondarylang,
                            proxytype = proxytype,
                            proxydescription = proxydescription,
                            isanisp = isanisp,
                            companyname = companyname,
                            ranks = ranks,
                            households = households,
                            women = women,
                            women18to34 = women18to34,
                            women35to49 = women35to49,
                            men = men,
                            men18to34 = men18to34,
                            men35to49 = men35to49,
                            teens = teens,
                            kids = kids,
                            naicscode = naicscode,
                            cbsacode = cbsacode,
                            cbsatitle = cbsatitle,
                            cbsatype = cbsatype,
                            csacode = csacode,
                            csatitle = csatitle,
                            mdcode = mdcode,
                            mdtitle = mdtitle,
                            organizationname = organizationname,

                            advo_hitflag = '',
                            advo_vacancyindicator = boca_shell_appends.advo_input_addr.address_vacancy_indicator,
                            advo_addressstyle = advo_appends.address_style_flag,
                            advo_dropindicator = boca_shell_appends.advo_input_addr.drop_indicator,
                            advo_residentialorbusinessindicator  = boca_shell_appends.advo_input_addr.residential_or_business_ind,
                            advo_addresstype = advo_appends.address_type,
                            advo_addressusagetype = advo_appends.mixed_address_usage // ??
  ));               
                    
                    
                        
