import doxie,address,suppress, AutoStandardI, BIPV2, lib_thorlib;

export GlobalModule(boolean isFCRA = false) := module
	export boolean OnlyCurrentLegal := FALSE : STORED('OnlyCurrentLegal');
	export boolean useGlobalScope := true;
  export boolean isPRP:= false : STORED('isPRP');
	export boolean ignoreFares := AutoStandardI.Constants.IGNORE_FARES_DEFAULT : stored('ignoreFares');
	export boolean ignoreFidelity := AutoStandardI.Constants.IGNORE_FIDELITY_DEFAULT : stored('ignoreFidelity');
	export string120 nameasis := '' : stored('nameasis');
	export string120 asisname := '' : stored('asisname');
	export string120 cn := '' : stored('cn');
	export string120 company := '' : stored('company');
	export string350 corpname := '' : stored('Corpname');
	export string2 st := '' : stored('st');
	export string2 st_orig := '' : stored('st_orig');
	export string50 ucc_key := '' : stored('ucc_key');
	export string50 event_key := '' : stored('event_key');
	export string50 orig_filing_num := '' : stored('orig_filing_num');
	export string50 file_state := '' : stored('file_state');
	export string50 lname := '' : stored('lname');
	export string4	namesuffix := '': stored('namesuffix');
	export string50 street_name := '' : stored('street_name');
	export string50 lfmname := '' : stored('lfmname');
	export string50 dl_number := '' : stored('dl_number');
	export string1 partytype := '' : stored('PartyType');
	export string1 partytype_bk := '' : stored('PartyTypeBK');
	export boolean includemultiplesecured := false : stored('IncludeMultipleSecured');
	export boolean returnrolleddebtors := false : stored('ReturnRolledDebtors');
	export boolean nodeepdive := false : stored('NoDeepDive');
	export unsigned1 bankruptcyversion := 0 : stored('BankruptcyVersion');
	export unsigned1 uccversion := 0 : stored('UccVersion');
	export unsigned1 judgmentlienversion := 0 : stored('JudgmentLienVersion');
	export unsigned1 vehicleversion := 0 : stored('VehicleVersion');
	export unsigned1 voterversion := 0 : stored('VoterVersion');
	export unsigned1 dlversion := 0 : stored('DlVersion');
	export unsigned1 deaversion := 0 : stored('DeaVersion');
	export unsigned1 propertyversion := 0 : stored('PropertyVersion');
	export unsigned1 CriminalRecordVersion := 0 : stored('CriminalRecordVersion');
	export string120 unparsedfullname := '' : stored('UnParsedFullName');
	export string120 entity2_unparsedfullname := '' : stored('entity2_UnParsedFullName');
	export string11 ssn := '' : stored('ssn');
	export string11 entity2_ssn := '' : stored('entity2_ssn');
	export string14 did := '' : stored('did');
	export string14 entity2_did := '' : stored('entity2_did');
	export string14 rid := '' : stored('rid');
	export string30 firstname := '' : stored('FirstName');
	export string30 entity2_firstname := '' : stored('entity2_FirstName');
	export string30 relativefirstname1 := '' : stored('RelativeFirstName1');
	export string30 relativefirstname2 := '' : stored('RelativeFirstName2');
	export string30 lastname := '' : stored('LastName');
	export string30 entity2_lastname := '' : stored('entity2_LastName');
	export string30 otherlastname1 := '' : stored('OtherLastName1');
	export string4 lname4 := '' : stored('Lname4');
	export string3 fname3 := '' : stored('Fname3');
	export string30 middlename := '' : stored('MiddleName');
	export string30 entity2_middlename := '' : stored('entity2_MiddleName');
	export string120 companyname := '' : stored('CompanyName');
	export string120 entity2_companyname := '' : stored('entity2_CompanyName');
	export string2 state := '' : stored('State');
	export string2 entity2_state := '' : stored('entity2_State');
	export string2 otherstate1 := '' : stored('OtherState1');
	export string2 otherstate2 := '' : stored('OtherState2');
	export string25 city := '' : stored('City');
	export string25 entity2_city := '' : stored('entity2_City');
	export string25 othercity1 := '' : stored('OtherCity1');
	export string30 county := '' : stored('County');
	export string6 zip := '' : stored('Zip');
	export string6 entity2_zip := '' : stored('entity2_Zip');
	export unsigned2 zipradius := 0 : stored('ZipRadius');
	export unsigned2 entity2_zipradius := 0 : stored('entity2_ZipRadius');
	export string50 statecityzip := '' : stored('StateCityZip');
	export boolean currentresidentsonly := false : stored('CurrentResidentsOnly');
	export string15 phone := '' : stored('phone');
	export string15 entity2_phone := '' : stored('entity2_phone');
	export string200 addr := '' : stored('Addr');
	export string200 entity2_addr := '' : stored('entity2_Addr');
	export string50 driverslicense := '' : stored('DriversLicense');
	export string30 vin := '' : stored('VIN');
	export string20 tag := '' : stored('Tag');
	export boolean ssntypos := false : stored('SSNTypos');
	export boolean household := false : stored('Household');
	export boolean includealldidrecords := false : stored('IncludeAllDIDRecords');
	export boolean didonly := false : stored('DIDOnly');
	export boolean phoneticmatch := false : stored('PhoneticMatch');
	export boolean entity2_phoneticmatch := false : stored('entity2_PhoneticMatch');
  export boolean TUGatewayPhoneticMatch := phoneticmatch : stored('TUGatewayPhoneticMatch');
	export boolean allownicknames := false : stored('AllowNickNames');
	export boolean UseTagBlur := false : stored('UseTagBlur');
	export boolean entity2_allownicknames := false : stored('entity2_AllowNickNames');
	export boolean checknamevariants := false : stored('CheckNameVariants');
	export boolean raw := false : stored('Raw');
	export unsigned1 agelow := 0 : stored('AgeLow');
	export unsigned1 agehigh := 0 : stored('AgeHigh');
	export unsigned8 dob := 0 : stored('DOB');
	export unsigned8 dod := 0 : stored('DOD');
	export unsigned8 maxresults := 2000 : stored('MaxResults');
	export unsigned8 maxresultsthistime := 2000 : stored('MaxResultsThisTime');
	export unsigned8 skiprecords := 0 : stored('SkipRecords');
	export boolean donotfillblanks := false : stored('DoNotFillBlanks');
	export string100 seisintadlservice := '' : stored('SeisintAdlService');
	export boolean isaneighbor := false : stored('isANeighbor');
	export set of string256 neighborservice := [] : stored('NeighborService');
	export dataset(doxie.layout_neighbors) neighbordata := dataset([],doxie.layout_neighbors) : stored('NeighborData',few);
	export boolean report := false : stored('Report');
	export unsigned1 setrepaddrbit := 4 : stored('SetRepAddrBit');
	export boolean setrepaddr := false : stored('SetRepAddr');
	export string10 lookuptype := '' : stored('LookupType');
	export boolean latestformas := false : stored('LatestForMAs');
	export boolean simplifiedcontactreturn := false : stored('SimplifiedContactReturn');
	export boolean excludelessors := false : stored('ExcludeLessors');
	export boolean moxievehicles := false : stored('moxievehicles');
	export string8 DidTypeMask := '11111111' : Stored('DidTypeMask');
  export boolean isCRS := false : STORED('IsCRS');	
	
	export unsigned1 scorethreshold := 10 : stored('ScoreThreshold');
	export string6 ssnmask := 'NONE' : stored('SSNMask');
	export unsigned1 dlmask := 0 : stored('DLMask');
	export string6 dobmask := 'NONE' : stored('DOBMask');
	export string5 industryclass := '' : stored('IndustryClass');
	export boolean probationoverride := false : stored('ProbationOverride');
	export boolean lnbranded := AutoStandardI.Constants.LNBRANDED_DEFAULT : stored('LnBranded');
	export boolean nonexclusion := false : stored('NonExclusion');
	export boolean searchgoodssnonly := false : stored('SearchGoodSSNOnly');
	export boolean searchignoresaddressonly := false : stored('SearchIgnoresAddressOnly');
	export string1 race := '' : stored('Race');
	export string1 gender := '' : stored('Gender');
	export string8 recordbydate := '' : stored('RecordByDate');
	export boolean useonlybestdid := false : stored('useOnlyBestDID');
	export boolean isprofilesearch := false : stored('isProfileSearch');
	export unsigned dialrecordmatch := 0 : stored('DialRecordMatch');
	export unsigned dialcontactprecision := 4 : stored('DialContactPrecision');
	export unsigned dialbouncedistance := 1 : stored('DialBounceDistance');
	export boolean includezerodidrefs := false : stored('IncludeZeroDIDRefs');
	export boolean getbdidsbyexecutive := true : stored('getbdidsbyexecutive');
	export boolean usehigherlimit := false : stored('usehigherlimit');
	export string50 tmsid := '' : stored('TMSID');
	export string101 rmsid := '' : stored('RMSID');
	export string50 liencasenumber := '' : stored('LienCaseNumber');
	export string25 irsserialnumber := '' : stored('IRSSerialNumber');
	export string17 casenumber := '' : stored('CaseNumber');
	export string50 filingnumber := '' : stored('FilingNumber');
	export string20 filingjurisdiction := '' : stored('FilingJurisdiction');
	export string20 filingdatebegin := '' : stored('FilingDateBegin');
	export string20 filingdateend := '' : stored('FilingDateEnd');
	export string20 dunsnumber := '' : stored('DUNSNumber');
	export string16 statedeathid := '' : stored('StateDeathID');
	export string5 z5 := '' : stored('z5');
	export string28 prim_name := '' : stored('prim_name');
	export string4 suffix := '' : stored('suffix');
	export string2 predir := '' : stored('predir');
	export string2 postdir := '' : stored('postdir');
	export string10 prim_range := '' : stored('prim_range');
	export string8 sec_range := '' : stored('sec_range');
	export real latitude  := 0.0 : stored('Latitude');
	export real longitude := 0.0 : stored('Longitude');
	export integer	FuzzySecRange := AutoStandardI.Constants.SECRANGE.EXACT :stored('FuzzySecRange');
	export boolean phoneticdistancematch := false : stored('PhoneticDistanceMatch');
	export unsigned1 distancethreshold := 3 : stored('DistanceThreshold');
	export unsigned datefirstseen := 0 : stored('DateFirstSeen');
	export unsigned datelastseen := 0 : stored('DateLastSeen');
	export boolean allowdateseen := false : stored('AllowDateSeen');
	export boolean allowwildcard := if(thorlib.getenv('AllowWildcard','Default')='1',
																	 true, false) : STORED('AllowWildcard');
	export boolean reduceddata := false : stored('ReducedData');
	export boolean isFCRAval := isFCRA;
	export string11 fein := '' : stored('FEIN');
	export string11 entity2_fein := '' : stored('entity2_FEIN');
	export string bdid := '' : stored('BDID');
	export string entity2_bdid := '' : stored('entity2_BDID');
	export string bdl := '' : stored('BDL');
	export boolean exactonly := false : stored('ExactOnly');
	export boolean bdidonly := false : stored('BDIDOnly');
	export unsigned2 mileradius := 0 : stored('MileRadius');
	export boolean uselevels := false : stored('useLevels');
	export boolean useSupergroup := false : stored('useSupergroup');
	export boolean usesupergrouppropertyaddress := true : stored('useSupergroupPropertyAddress');
	export boolean disregardlimits := false : stored('DisregardLimits');
	export boolean isDayBR := false : stored('isDayBR');
	export boolean SelectIndividually := false : stored('SelectIndividually');
	export boolean AlwaysCompute := false : stored('AlwaysCompute');
	export boolean Include_Bus_DPPA := false : stored('Include_Bus_DPPA');
	export boolean IncludeNameVariations := false : stored('IncludeNameVariations');
	export boolean IncludeAddressVariations := false : stored('IncludeAddressVariations');	
	export boolean IncludeBusinessesAtAddress := false : stored('IncludeBusinessesAtAddress');  
	export boolean IncludeBusinessFilings := false : stored('IncludeBusinessFilings');   
	export boolean IncludeBankruptcies := false : stored('IncludeBankruptcies');
	export boolean IncludeBankruptciesV2 := false : stored('IncludeBankruptciesV2');
	export boolean IncludeSourceDocCounts := false : stored('IncludeSourceDocCounts');
	export boolean IncludeProperties := false : stored('IncludeProperties'); 
	export boolean IncludePropertiesV2 := false : stored('IncludePropertiesV2'); 
	export boolean IncludeLiensJudgments := false : stored('IncludeLiensJudgments'); 
	export boolean IncludeLiensJudgmentsV2 := false : stored('IncludeLiensJudgmentsV2'); 
	export boolean IncludeLiens := false : stored('IncludeLiens');
	export boolean IncludeJudgments := false : stored('IncludeJudgments');
	export boolean IncludeMotorVehicles := false : stored('IncludeMotorVehicles');  
	export boolean IncludeMotorVehiclesV2 := false : stored('IncludeMotorVehiclesV2');
	export boolean IncludeWatercrafts := false : stored('IncludeWatercrafts');
	export boolean IncludeAircrafts := false : stored('IncludeAircrafts');
	export boolean IncludeCorporationFilings := false : stored('IncludeCorporationFilings');        
	export boolean IncludeCorporationFilingsV2 := false : stored('IncludeCorporationFilingsV2');        
	export boolean IncludeBusinessRegistrations := false : stored('IncludeBusinessRegistrations'); 
	export boolean IncludeUCCFilings := false : stored('IncludeUCCFilings'); 
	export boolean IncludeUCCFilingsV2 := false : stored('IncludeUCCFilingsV2'); 
	export boolean IncludeDunBradstreetRecords := false : stored('IncludeDunBradstreetRecords'); 
	export boolean IncludeAssociatedBusinesses := false : stored('IncludeAssociatedBusinesses');      
	export boolean IncludeAssociatedPeople := false : stored('IncludeAssociatedPeople');
	export boolean IncludeReversePhone := false : stored('IncludeReversePhone');
	export boolean IncludeYellowPages := false : stored('IncludeYellowPages');
	export boolean IncludeProfessionalLicenses := false : stored('IncludeProfessionalLicenses');
	export boolean IncludeFeinVariations := false : stored('IncludeFeinVariations');
	export boolean IncludeCompanyIDnumbers := false : stored('IncludeCompanyIDnumbers');
	export boolean IncludeCompanyIDnumbersV2 := false : stored('IncludeCompanyIDnumbersV2');
	export boolean IncludeParentChild := false : stored('IncludeParentChild');
	export boolean IncludeHRI := false : stored('IncludeHRI');
	export boolean IncludePatriotAct := false : stored('IncludePatriotAct');
	export boolean IncludeCompanyProfile := false : stored('IncludeCompanyProfile');
	export boolean IncludeCompanyProfileV2 := false : stored('IncludeCompanyProfileV2');
	export boolean IncludeInternetDomains := false : stored('IncludeInternetDomains');
	export boolean IncludePhoneVariations := false : stored('IncludePhoneVariations');
	export boolean IncludeExecutives := false : stored('IncludeExecutives');
	export boolean IncludeDCA := false : stored('IncludeDCA');
	export boolean IncludeBBB := false : stored('IncludeBBB');
	export boolean IncludeSales := false : stored('IncludeSales');
	export boolean IncludeIndustryInformation := false : stored('IncludeIndustryInformation');
	export boolean IncludeFinder := false : stored('IncludeFinder');
	export boolean IncludeLiensJudgmentsUCC := false : stored('IncludeLiensJudgmentsUCC');
	export boolean IncludeLiensJudgmentsUCCV2 := false : stored('IncludeLiensJudgmentsUCCV2');
	export boolean IncludeParentCompany := false : stored('IncludeParentCompany');
	export boolean IncludeRegisteredAgents := false : stored('IncludeRegisteredAgents');
	export boolean IncludeRegisteredAgentsV2 := false : stored('IncludeRegisteredAgentsV2');
	export boolean SearchRegisteredAgents := false : stored('SearchRegisteredAgents');
	export boolean IncludeSuperiorLiens := false : stored('IncludeSuperiorLiens');
	export boolean IncludeBusinessAssociates := false : stored('IncludeBusinessAssociates');
	export boolean IncludeEBRHeader := false : stored('IncludeEBRHeader');
	export boolean IncludeEBRSummary := false : stored('IncludeEBRSummary');
	export boolean IncludeExperianBusinessReports := false : stored('IncludeExperianBusinessReports');
	export boolean IncludeIRS5500 := false : stored('IncludeIRS5500');
	export boolean IncludeIRSNonP := false : stored('IncludeIRSNonP');
	export boolean IncludeFDIC := false         : stored('IncludeFDIC');
	export boolean IncludeBBBMember := false    : stored('IncludeBBBMember');
	export boolean IncludeBBBNonMember := false : stored('IncludeBBBNonMember');
	export boolean IncludeCASalesTax := false   : stored('IncludeCASalesTax');
	export boolean IncludeIASalesTax := false   : stored('IncludeIASalesTax');
	export boolean IncludeMSWorkComp := false   : stored('IncludeMSWorkComp');
	export boolean IncludeORWorkComp := false   : stored('IncludeORWorkComp');
	export boolean IncludePriorAddresses := false   : stored('IncludePriorAddresses');
	export boolean IncludeWeaponPermits := false : stored('IncludeWeaponPermits');
	export string SourceIdName := '' : stored('SourceIdName');
	export string SourceIdAddr := '' : stored('SourceIdAddr');
	export string SourceIdPhone := '' : stored('SourceIdPhone');
	export string SourceIdFein := '' : stored('SourceIdFein');
	export unsigned MaxBusinessesAtAddress := 50 : stored('MaxBusinessesAtAddress');
	export unsigned MaxProfessionalLicenses := 50 : stored('MaxProfessionalLicenses');
	export unsigned MaxAssociatedBusinesses := 100 : stored('MaxAssociatedBusinesses');
	export unsigned MaxAssociatedPeople := 100 : stored('MaxAssociatedPeople');
	export unsigned MaxNameVariations := 50 : stored('MaxNameVariations');
	export unsigned MaxPhoneVariations := 50 : stored('MaxPhoneVariations');
	export unsigned MaxAddressVariations := 50 : stored('MaxAddressVariations');
	export unsigned MaxCorporationFilings := 50 : stored('MaxCorporationFilings');
	export unsigned MaxUCCFilings := 50 : stored('MaxUCCFilings');
	export unsigned MaxLiens := 50 : stored('MaxLiens');
	export unsigned MaxJudgments := 50 : stored('MaxJudgments');
	export unsigned MaxMotorVehicles := 50 : stored('MaxMotorVehicles'); // GCL - 20051026
	export unsigned MaxWatercrafts := 50 : stored('MaxWatercrafts'); // GCL - 20051026
	export unsigned MaxInternetDomains := 50 : stored('MaxInternetDomains');
	export unsigned MaxBankruptcies := 50 : stored('MaxBankruptcies');
	export unsigned MaxBankruptciesV2 := 50 : stored('MaxBankruptciesV2');
	export unsigned MaxBusinessRegistrations := 50 : stored('MaxBusinessRegistrations');
	export unsigned MaxProperties := 50 : stored('MaxProperties');
	export unsigned MaxPropertiesV2 := 50 : stored('MaxPropertiesV2');
	export unsigned MaxReverseLookup := 50 : stored('MaxReverseLookup');
	export unsigned MaxExecutives := 50 : stored('MaxExecutives');
	export unsigned MaxDCA := 50 : stored('MaxDCA');
	export unsigned MaxYellowPages := 50 : stored('MaxYellowPages');
	export unsigned MaxPatriotAct := 50 : stored('MaxPatriotAct');
	export unsigned MaxBBB := 50 : stored('MaxBBB');
	export unsigned MaxSales := 50 : stored('MaxSales');
	export unsigned MaxIndustryInformation := 50 : stored('MaxIndustryInformation');
	export unsigned MaxFinder := 50 : stored('MaxFinder');
	export unsigned MaxLiensJudgmentsUCC := 50 : stored('MaxLiensJudgmentsUCC');
	export unsigned MaxLiensJudgmentsUCCV2 := 50 : stored('MaxLiensJudgmentsUCCV2');
	export unsigned MaxParentCompany := 50 : stored('MaxParentCompany');	
	export unsigned MaxRegisteredAgents := 50 : stored('MaxRegisteredAgents');
	export unsigned MaxCompanyIDnumbers := 50 : stored('MaxCompanyIDnumbers');
	export unsigned MaxBusinessAssociates := 100 : stored('MaxBusinessAssociates');
	export unsigned MaxEBRHeader := 50 : stored('MaxEBRHeader');
	export unsigned MaxEBRSummary := 50 : stored('MaxEBRSummary');
	export unsigned MaxExperianBusinessReports := 25 : stored('MaxExperianBusinessReports');
	export unsigned MaxIRS5500 := 50 : stored('MaxIRS5500');
	export unsigned MaxIRSNonP := 50 : stored('MaxIRSNonP');
	export unsigned MaxFDIC         := 50 : stored('MaxFDIC');
	export unsigned MaxBBBMember    := 50 : stored('MaxBBBMember');
	export unsigned MaxBBBNonMember := 50 : stored('MaxBBBNonMember');
	export unsigned MaxCASalesTax   := 50 : stored('MaxCASalesTax');
	export unsigned MaxIASalesTax   := 50 : stored('MaxIASalesTax');
	export unsigned MaxMSWorkComp   := 50 : stored('MaxMSWorkComp');
	export unsigned MaxORWorkComp   := 50 : stored('MaxORWorkComp');
	export unsigned MaxMotorVehicle := 50 : stored('MaxMotorVehicle');
	export boolean AllowAll := false : stored('AllowAll');
	export boolean AllowGLB := AutoStandardI.Constants.ALLOW_GLB_DEFAULT : stored('AllowGLB');
	export boolean AllowDPPA := AutoStandardI.Constants.ALLOW_DPPA_DEFAULT : stored('AllowDPPA');
	export unsigned1 DPPAPurpose := 0 : stored('DPPAPurpose');
	export unsigned1 GLBPurpose := AutoStandardI.Constants.GLBPurpose_default : stored('GLBPurpose');
	export boolean IncludeMinors := AutoStandardI.Constants.INCLUDE_MINORS_DEFAULT : stored('IncludeMinors');
	export boolean KeepOldSsns := false : stored('KeepOldSsns');
	export boolean UsingKeepSSNs := false : stored('UsingKeepSSNs');
	export string30 primname := '' : stored('primname');
	export string10 primrange := '' : stored('primrange');
	export string10 secrange := '' : stored('secrange');
	export boolean ExcludeCheckSufficientInputs := false : stored('ExcludeCheckSufficientInputs');
	export boolean AllowLeadingLname := false : stored('AllowLeadingLname');
	export unsigned1 addr_origin_country := address.Components.Country.US : STORED ('AddressOrigin');
	export string6 PostalCode := '' : stored('PostalCode');
	export boolean OnlyExactMatches := false : stored('OnlyExactMatches');
	export boolean StrictMatch := false : stored('StrictMatch');
	export unsigned2 penalty_threshold := 10 : stored('PenaltThreshold');
	export boolean DisplayMatchedParty := false : stored('DisplayMatchedParty');
	// The DataRestrictionMask string default was revised here so that the new
	// Experian Credit Header default value is not restricted (i.e. position 6=0) if
	// no DataRestrictionMask value is input.
  // NOTE: Position 1 was left as "1" and positions 2-5 were left as blank to match the 
  // previous default value of "1" (which was the same as "1    " since it is a string).
	export string DataRestrictionMask := AutoStandardI.Constants.DataRestrictionMask_default : STORED('DataRestrictionMask');
	export string DataPermissionMask := AutoStandardI.Constants.DataPermissionMask_default : STORED('DataPermissionMask');
	export boolean BpsLeadingNameMatch := false: stored('BpsLeadingNameMatch');
	export boolean AllowFuzzyDOBMatch := true: stored('AllowFuzzyDOBMatch');
	export boolean UseSSNFallBack := false : STORED('UseSSNFallBack');	
	export boolean UseUberFetch := false : STORED('UseUberFetch');
	export boolean SearchAroundAddress := false : STORED('SearchAroundAddress');
	export boolean cleanfmlname := false : STORED('CleanFMLName');
	export boolean AllowUberKeys := false : STORED('AllowUberKeys');
	export string SIC := '' : stored('SIC');//needs to be string here because 1 to 4 digits can be input
	export boolean TwoPartySearch := false : STORED('TwoPartySearch');
	export string32 ApplicationType := Suppress.Constants.ApplicationTypes.DEFAULT : STORED('ApplicationType');
	export boolean isPeopleWise := ApplicationType='CON';
	export string20  DemoCustomerName := '' : stored('DemoCustomerName');
  export unsigned6 UltID := 0 : stored('UltID');
  export unsigned6 OrgID := 0 : stored('OrgID');
  export unsigned6 SELEID := 0 : stored('SELEID');
  export unsigned6 ProxID := 0 : stored('ProxID');
  export unsigned6 POWID := 0 : stored('POWID');
  export unsigned6 EmpID := 0 : stored('EmpID');
  export unsigned6 DotID := 0 : stored('DotID');
  export string1 BusinessIDFetchLevel := BIPV2.IDconstants.Fetch_Level_SELEID : stored('BusinessIDFetchLevel');
	export boolean SuppressDMVInfo := false : stored('ExcludeDMVPII');
	export unsigned2 xadl2_weight_threshold := 0 : stored('xadl2_weight_threshold');
	export boolean restrictPreGlb := DataRestrictionMask[23] = '1';
end;
