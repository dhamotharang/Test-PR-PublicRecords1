//SANDBOXED!!!!!!
/*
5.	Compare & validate SALT code
      once we have the .mod file from step 4, we can use that to import the attributes(if they weren't already imported by
      the IDE).  Then, we can pull the historical version of the attribute with the current version.  historical version 
      needs to be checked-in.  or we could just compare the prod module's version of that attribute with this new version,
      with the replacement of the module name for the new module name of course.

      so we need to:
        ensure the module names are the same to eliminate the noise in the compare, so bipv2_proxid gets replaced by bipv2_proxid_dev or vice versa 
        also the salt versions need to be standardized before the compare.  so, if we upgrade from salt20 to salt33, every instance of salt29 should change to salt33.
        want to this be very flexible so that any two modules can be compared even across different environments.
        simplest case(and hopefully most frequent) is where we have two modules in the same environment to be compared.

*/
import ut,tools,std,repository;

EXPORT Compare_SALT_Code(

   string     pModule1
  ,string     pModule2        = ''
  ,string     pToSaltVersion  = ''  //salt 3.3.0 = '3.3.0'
  // ,
  ,string     pAttRegex       = '' 
  ,string     pUnique_Output  = ''
  ,unsigned4  pCompareVersion = 1   //1 = compare sandboxed to latest version.  2 = previous version, etc.
) :=
function

/*
5.	Compare & validate SALT code
      once we have the .mod file from step 4, we can use that to import the attributes(if they weren't already imported by
      the IDE).  Then, we can pull the historical version of the attribute with the current version.  historical version 
      needs to be checked-in.  or we could just compare the prod module's version of that attribute with this new version,
      with the replacement of the module name for the new module name of course.
*/

ds_getatts_old1 := Repository.find_Attributes(
	 pModuleName          := pModule1
	,pAttributeName     	:= ''//pAttRegex   
	,pIsSandbox				    := false 
  ,pGetHistory          := true
)(regexfind(pAttRegex,attributename,nocase));

// Repository.get_Attribute('SALT_REGRESSION_TESTING','___Proc_Build_All',0,true);   //gets it
lmodule2 := if(pModule2 = ''  ,pModule1 ,pModule2);

ds_getatts_old2 := if(count(ds_getatts_old1(IsSandbox = true)) > 0// and pModule2 = ''
                    ,ds_getatts_old1(IsSandbox = true) 
                    ,dedup(sort(ds_getatts_old1,modulename,attributename,-version),modulename,attributename)
                  );
                  
ds_not_sandboxed_atts := ds_getatts_old1(IsSandbox = false);
ds_previous_version := if(count(ds_getatts_old1(IsSandbox = true)) > 0
                          ,join(dedup(sort(ds_not_sandboxed_atts,modulename,attributename,-version),modulename,attributename)  ,ds_getatts_old2  ,left.modulename = right.modulename and left.attributename = right.attributename,transform(left))
                          ,dedup(sort(join(ds_not_sandboxed_atts  ,ds_getatts_old2  ,left.modulename = right.modulename and left.attributename = right.attributename and left.version = right.version,transform(left),left only),modulename,attributename,-version),modulename,attributename)
                       );
ds_getatts_new1     := Repository.find_Attributes(
	 pModuleName          := lmodule2
	,pAttributeName     	:= ''//pAttRegex   
	,pIsSandbox				    := false 
  ,pGetHistory          := false
  // ,pEsp                 := 'prod_esp.br.seisint.com:8145'
)(regexfind(pAttRegex,attributename,nocase));

// ds_getatts_new12 := join(dedup(sort(ds_getatts_new1,modulename,attributename,-version),modulename,attributename)  ,ds_getatts_old2  ,left.attributename = right.attributename,transform(left));
ds_getatts_new12 := join(ds_getatts_new1(pCompareVersion = _version)  ,ds_getatts_old2  ,left.attributename = right.attributename,transform(left));


ds_getatts_new2 := if(pModule2 != '' ,ds_getatts_new12  ,ds_previous_version);



//switch them if comparing sandboxed versions
ds_getatts_old := if(count(ds_getatts_old1(IsSandbox = true)) > 0 and pModule2 = ''
  ,ds_getatts_new2
  ,ds_getatts_old2
);

ds_getatts_new := if(count(ds_getatts_old1(IsSandbox = true)) > 0 and pModule2 = ''
  ,ds_getatts_old2
  ,ds_getatts_new2
);

//if we are comparing one module, the sandboxed to the checked-in versions, we only want to do this with sandboxed attributes.
//if the module doesn't have any sandboxed attributes, it will compare the latest checked-in version to the previous checked-in version.



recdiff := recordof(ut.fStringDiff('',''));

// SALT V3.3.0
// SALT V2.8 Gold SR1
//Generated by SALT V3.4.3
// Generated by SALT V2.8 Gold SR1

generationdocs_old  := ds_getatts_old(attributename = 'GenerationDocs')[1].text;
oldsaltversion      := trim(regexfind('(SALT V[0-9].[0-9].[0-9]([-](PV|RC)[0-9])?|SALT V[0-9].[0-9] (Gold|Beta|Alpha|SR[0-9])( SR[0-9]|[0-9])?)',generationdocs_old,0,nocase),left,right);
oldsaltmodule       := if(oldsaltversion != ''  ,'SALT' + oldsaltversion[7] + oldsaltversion[9] ,'');

newsaltmodule       := 'SALT' + pToSaltVersion[1] + pToSaltVersion[3]  ;  //remove ., i.e 3.3.0 = 33
newsaltversion      := 'SALT V' + pToSaltVersion;

/*
  different scenarios.
    old has all salt 3.3.0, new is 3.4.3
      we change 3.3.0 to 3.4.3 in all instances in the old code, everything is fine.
    old has salt 3.3.0, new is 3.4.3, but both also have old salt versions in the code.
      we change 3.3.0 to 3.4.3 in all instances in the old code.      
      leave the older salt versions alone.

*/
ds_getatts_old_prep  := project(ds_getatts_old(regexfind(pAttRegex,attributename,nocase)) ,transform({recordof(left),string rawtext},self.text := if(pToSaltVersion != '' and trim(generationdocs_old) != ''
    ,regexreplace(oldsaltversion//'(SALT V[0-9].[0-9].[0-9]([-](PV|RC)[0-9])?|SALT V[0-9].[0-9] (Gold|Beta|Alpha|SR[0-9])( SR[0-9]|[0-9])?)'
      ,regexreplace(oldsaltmodule//'SALT[0-9][0-9]'
        ,regexreplace(pModule1,left.text,lmodule2,nocase)
      ,newsaltmodule)   
    ,newsaltversion,nocase)
    ,regexreplace(pModule1,left.text,pModule1,nocase)
  )
  ,self.rawtext := regexreplace(pModule1,left.text,lmodule2,nocase)
  ,self := left));
ds_getatts_new_prep  := project(ds_getatts_new(regexfind(pAttRegex,attributename,nocase)) ,transform(recordof(left),self.text := left.text/*regexreplace(lmodule2,left.text,pModule1,nocase)*/ ,self := left));


diffs := join(ds_getatts_old_prep ,ds_getatts_new_prep  ,left.attributename = right.attributename and (STD.Str.CleanSpaces(left.text) != STD.Str.CleanSpaces(right.text) and STD.Str.CleanSpaces(left.rawtext) != STD.Str.CleanSpaces(right.text))
  // ,transform({string attname,unsigned4 begindate,unsigned4 enddate,unsigned4 diff,unsigned lines_old,unsigned lines_new,unsigned lines_same,unsigned lines_diff/*,string left_text,string right_text*/,dataset(recdiff - lines_old - lines_new - lines_same - lines_diff) diffs},
  ,transform({string attname/*,unsigned4 begindate,unsigned4 enddate,unsigned4 diff*/,unsigned lines_old,unsigned lines_new,unsigned lines_same,unsigned lines_diff,string pct_diff,dataset(recdiff - lines_old - lines_new - lines_same - lines_diff) diffs,string blank/*,dataset(recdiff) rawdiff*/},
     thediff := ut.fStringDiff(left.text,right.text);
     // self.oldtext := left.text;
     // self.newtext := right.text;
    // self.rawdiff := thediff;
    // self.begindate    := STD.System.Debug.msTick ( );
    self.attname      := right.fullname;
    self.lines_old    := thediff[1].lines_old;
    self.lines_new    := thediff[1].lines_new;
    self.lines_same   := thediff[1].lines_same;
    self.lines_diff   := thediff[1].lines_diff;
    self.pct_diff     := realformat(self.lines_diff / self.lines_old * 100.0  ,9,2);
    self.diffs        := project(thediff,{recdiff - lines_old - lines_new - lines_same - lines_diff});//(status != '')
    // self.enddate      := if(exists(self.diffs)  ,STD.System.Debug.msTick ( )  ,0);
    // self.diff         := self.enddate - self.begindate;
    self := [];
  )
,hash)(exists(diffs));
// ,hash);

newlayout := {string attname,unsigned cnt,dataset(recdiff) diffs};

// diffs_raw1 := project(ut.fStringDiff(diffs_raw[1].oldtext,diffs_raw[1].newtext,,true) ,transform(newlayout,self.attname := diffs_raw[1].attname,self.cnt := left.cnt,self.diffs := dataset(left)));
// diffs_raw2 := project(ut.fStringDiff(diffs_raw[2].oldtext,diffs_raw[2].newtext,,true) ,transform(newlayout,self.attname := diffs_raw[2].attname,self.cnt := left.cnt,self.diffs := dataset(left)));
/*
// -- workaround
#uniquename(cnter)
#uniquename(diffs_raw_all)
#SET(cnter  ,1)
#SET(diffs_raw_all  ,'diffs_raw_concat := \n')
#LOOP
  #IF(%cnter% > 200)
    #BREAK
  #ELSEIF(%cnter% != 1)
    #APPEND(diffs_raw_all ,'  + ')
  #ELSE
    #APPEND(diffs_raw_all ,'    ')
  #END
  
  #APPEND(diffs_raw_all ,'iff(count(diffs_raw) >= ' + %'cnter'% + ' ,project(ut.fStringDiff(diffs_raw[' + %'cnter'% + '].oldtext,diffs_raw[' + %'cnter'% + '].newtext,,true) ,transform(newlayout,self.attname := diffs_raw[' + %'cnter'% + '].attname,self.cnt := left.cnt,self.diffs := dataset(left)))  ,dataset([],newlayout))')
  
  #SET(cnter  ,%cnter% + 1)
#END
#APPEND(diffs_raw_all ,';')

%diffs_raw_all%
diffs := rollup(sort(diffs_raw_concat ,attname,cnt) ,left.attname = right.attname,transform(recordof(left)  ,self.diffs := left.diffs + right.diffs,self := left));
*/
/*
ds_norm_diffs := normalize(diffs  ,left.diffs ,transform(
  {string attname,recdiff}
  ,self.attname := left.attname
  ,self.line    := if(right.status = '------>' ,regexreplace('[[:space:]]',right.line,'_')  ,right.line)
  ,self         := right
));
*/
// text
diff_layout := {string attname,unsigned4 begindate,unsigned4 enddate,unsigned4 diff,unsigned lines_old,unsigned lines_new,unsigned lines_same,unsigned lines_diff/*,string left_text,string right_text*/,dataset(recdiff - lines_old - lines_new - lines_same - lines_diff) diffs};

// diffs2 := project(diffs ,transform(diff_layout,
    // self.begindate    := STD.System.Debug.msTick ( );
    // self.lines_old    := left.diffs[1].lines_old;
    // self.lines_new    := left.diffs[1].lines_new;
    // self.lines_same   := left.diffs[1].lines_same;
    // self.lines_diff   := left.diffs[1].lines_diff;
    // self.diffs        := project(left.diffs,{recdiff - lines_old - lines_new - lines_same - lines_diff});//(status != '')
    // self.enddate      := if(exists(self.diffs)  ,STD.System.Debug.msTick ( )  ,0);
    // self.diff         := self.enddate - self.begindate;
    // self := left
// ))(exists(diffs));

// ut.fStringDiff

ds_getatts_old1_out := dedup(sort(ds_getatts_old1 ,modulename,attributename,issandbox = false,-(unsigned)version),modulename,attributename,keep(5));
ds_getatts_old_out  := dedup(sort(ds_getatts_old  ,modulename,attributename,issandbox = false,-(unsigned)version),modulename,attributename,keep(5));

ds_previous_version_out  := dedup(sort(ds_previous_version  ,modulename,attributename,issandbox = false,-(unsigned)version),modulename,attributename,keep(5));

ds_getatts_new_out        := dedup(sort(ds_getatts_new      ,modulename,attributename,issandbox = false,-(unsigned)version),modulename,attributename,keep(5));
ds_getatts_new_prep_out   := dedup(sort(ds_getatts_new_prep ,modulename,attributename,issandbox = false,-(unsigned)version),modulename,attributename,keep(5));

return parallel(
   output(generationdocs_old ,named('generationdocs_old_'    + pUnique_Output))
  ,output(oldsaltversion     ,named('oldsaltversion_'        + pUnique_Output))
  ,output(oldsaltmodule      ,named('oldsaltmodule_'         + pUnique_Output))
  ,output(newsaltversion     ,named('newsaltversion_'        + pUnique_Output))
  ,output(newsaltmodule      ,named('newsaltmodule_'         + pUnique_Output))
  ,output(ds_getatts_old1_out  ,named('ds_getatts_old1_'       + pUnique_Output),all)
  ,output(ds_getatts_old_out  ,named('ds_getatts_old_'       + pUnique_Output),all)
  ,output(ds_previous_version_out      ,named('ds_previous_version_'       + pUnique_Output),all)
  ,output(ds_getatts_new_out      ,named('ds_getatts_new_'       + pUnique_Output),all)
  ,output(ds_getatts_new_prep_out  ,named('ds_getatts_new_prep_' + pUnique_Output),all)
  ,output(diffs                ,named('diffs_'               + pUnique_Output),all)
  ,output(sort(diffs,-(real8)pct_diff)                ,named('diffs_sort'               + pUnique_Output),all)
  ,output(sort(diffs,-lines_diff)                ,named('diffs_sort_lines_diff'               + pUnique_Output),all)
  ,output(sort(diffs,-(real8)pct_diff)[1].attname                ,named('most_diff_attribute_'               + pUnique_Output),all)
  ,output(sort(diffs, (real8)pct_diff)[1].attname                ,named('least_diff_attribute_'               + pUnique_Output),all)
  ,output(realformat(sum(diffs,(real8)pct_diff) / count(diffs),9,2)  ,named('Avg_Pct_diff_'              + pUnique_Output))
  ,output(realformat(sum(diffs,lines_diff) / count(diffs),15,2)  ,named('Avg_lines_diff_'              + pUnique_Output))
  // ,output(sort(diffs2 ,-diff)               ,named('sort_diffs_'               + pUnique_Output),all)
  // ,output(ds_norm_diffs        ,named('ds_norm_diffs'      ),all)

);

/*
ds_getatts_sort := sort(ds_getatts  ,fullname,-modifieddate);

ds_getatts_dedup  := dedup(ds_getatts_sort  ,fullname,keep 2);

ds_getatts_proj := project(ds_getatts_dedup ,transform({string fullname,boolean issame,dataset({string modifieddate,string description,string text}) versions}
  ,self.versions := project(dataset(left),transform({string modifieddate,string description,string text},self := left)),self := left,self := []));

ds_getatts_group := group(ds_getatts_proj,fullname);

ds_getatts_rollup := rollup(ds_getatts_group ,true,transform(recordof(left),self.versions := left.versions + right.versions,self.fullname := left.fullname
  ,self.issame := if(left.versions[1].text = right.versions[1].text ,true ,false)
));

ds_getatts_only_diffs := ds_getatts_rollup(count(versions) = 2);

lstringextract(string pString,unsigned2 pinstance,string1 pdelim = '\n')	:= 
  map( pinstance 																			 = 1 	=> pString[1..(stringlib.stringfind(pString,pdelim,1) - 1)]
      ,stringlib.stringfind(pString,pdelim,pinstance) != 0	=> pString[(stringlib.stringfind(pString,pdelim,pinstance - 1) + 1)..(stringlib.stringfind(pString,pdelim,pinstance) - 1)]
      ,																												 pString[(stringlib.stringfind(pString,pdelim,pinstance - 1) + 1)..]
  );

datts_norm := normalize(ds_getatts_dedup, stringlib.stringfindcount(left.text,'\n') + 1  
,transform(
 {string fullname,string modifieddate,string description,unsigned lineno,string line}
,self.lineno	  := counter
,self.line 			:= lstringextract(left.text,counter)
,self           := left
));

ds_same_lines := join(datts_norm  ,datts_norm ,left.fullname = right.fullname and left.modifieddate > right.modifieddate and left.line = right.line ,transform(
 {string fullname,dataset({string modifieddate,string description,unsigned lineno,string line}) lines}
 ,self.fullname := left.fullname
 ,self.lines    := project(dataset(left) + dataset(right) ,{string modifieddate,string description,unsigned lineno,string line})
));

ds_norm_same_lines := normalize(ds_same_lines ,left.lines ,transform({string fullname,string modifieddate,unsigned lineno}
  ,self := left
  ,self := right
));

ds_remove_same_lines  := join(datts_norm ,ds_norm_same_lines ,left.fullname = right.fullname and left.modifieddate = right.modifieddate and left.lineno = right.lineno,transform(left),left only);

output(ds_getatts_sort   ,named('ds_getatts_sort'  ),all);
output(ds_getatts_dedup  ,named('ds_getatts_dedup' ),all);
output(ds_getatts_proj   ,named('ds_getatts_proj'  ),all);
output(ds_getatts_group  ,named('ds_getatts_group' ),all);
output(ds_getatts_rollup ,named('ds_getatts_rollup'),all);
output(ds_getatts_only_diffs ,named('ds_getatts_only_diffs'),all);
output(datts_norm ,named('datts_norm'),all);
output(ds_same_lines ,named('ds_same_lines'),all);
output(ds_norm_same_lines ,named('ds_norm_same_lines'),all);
output(sort(ds_remove_same_lines,fullname,-modifieddate,lineno) ,named('ds_remove_same_lines'),all);
*/
// compare pure salt to hacks
// compare hacks + salt to prod module
end;