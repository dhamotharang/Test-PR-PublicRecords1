IMPORT AutoStandardI;

export RegressionUtils := MODULE
	shared ResponseADL := SearchUtils.ResponseADL;

	shared mr := UPS_Testing.mod_Regression;
	export autnQuery := mr.autnQueryLayout;
	export autnResponse := mr.autnResponse;
	export autnQueryAndResponse := mr.autnQueryAndResponse;

	shared PersonLookup := SearchUtils.PersonLookup;
	shared BusinessLookup := SearchUtils.BusinessLookup;

	// get the DIDs matching an individual response generated by Autonomy
	export DATASET(ResponseADL) fn_IndToADL(autnResponse resp) := FUNCTION
		// use the first name and address from the response (should be most recent).
		useName := resp.names[1];
		useAddr := resp.addrs[1];

		inputs := MODULE(PROJECT(AutoStandardI.GlobalModule(), PersonLookup.params, opt))
			export firstname:= useName.fname;
			export middlename:= useName.mname;
			export lastname:= useName.lname;
			export addr := useAddr.street;
			export city := useAddr.city;
			export state := useAddr.state;
			export zip := useAddr.zip;
		end;

		emptyResponse := DATASET( [], ResponseADL);
		dids := PersonLookup.getDIDs(inputs);
		return if(exists(resp.names) AND exists(resp.addrs), dids, emptyResponse);
	END;

	// get the BDIDs matching a business response generated by Autonomy
	export DATASET(ResponseADL) fn_FirmToADL(autnResponse resp) := FUNCTION

		// use the first name and address from the response (should be most recent).
		useName := resp.names[1];
		useAddr := resp.addrs[1];

		inputs := MODULE(PROJECT(AutoStandardI.GlobalModule(), BusinessLookup.params, opt))
			export CompanyName := useName.cname;
			export addr := useAddr.street;
			export city := useAddr.city;
			export state := useAddr.state;
			export zip := useAddr.zip;

			export bdid_limit := 10;
			export match_ssn_as_fein := false;
			export score_results := false;
			export use_exec_search := false;
		end;

		emptyResponse := DATASET( [], ResponseADL);
		bdids := BusinessLookup.getBDIDs(inputs);	
		return if(exists(resp.names) AND exists(resp.addrs), bdids, emptyResponse);
	END;

	// get the ADLs matching an autonomy response
	export DATASET(ResponseADL) autnResponseToADL(autnResponse resp) := FUNCTION
		// there will be at least one name.  Regardless of how many we get back,
		// we'll only consider the first one when determining the type of the 
		// response.
		return MAP(resp.names[1].type = 'INDIVIDUAL' => fn_IndToADL(resp),
							 resp.names[1].type = 'FIRM' => fn_FirmToADL(resp),
							 resp.names[1].type = 'FIRMSHORT' => fn_FirmToADL(resp),
							 DATASET( [ ], ResponseADL));
	END;

END;

