IMPORT KnowledgeUniverse.PublicRecords_KEL.Entities;

USE PublicRecords_KEL.ECL_Functions.Dataset_FDC(FDC,
	Dataset_Doxie__Key_Header( 
		SSNAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)ssn != 0),
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			Social = ssn, 
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			Source = src),
		SocialSecurityNumber(FILTER((UNSIGNED)ssn != 0),
			UID=ssn,
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateOfDeath = dod,
			IssueState = st,
			HeaderFirstSeen = dt_first_seen,
			Source = src),
		Person(FILTER((UNSIGNED)did != 0),
			UID=did,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Title = title,
			FirstName = fname,
			MiddleName = mname,
			LastName = lname,
			NameSuffix = name_suffix,
			DateOfBirth = dob,
			DateOfDeath = dod,
			Source = src),
		Address(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0),
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = suffix,
			Postdirectional = postdir,
			UnitDesignation = unit_desig,
			SecondaryRange = sec_range,
			State = st,
			ZIP5 = zip,
			ZIP4 = zip4,
			County = county,
			GeoBlock = geo_blk,
			ADVODateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			ADVODateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			ADVODateVendorFirstReported = FORMAT('YYYYMM01')dt_vendor_first_reported,
			ADVODateVendorLastReported = FORMAT('YYYYMM01')dt_vendor_last_reported,
			RecordTypeCode = rec_type,
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			Source = src),
		Phone(FILTER((UNSIGNED)phone != 0),
			UID = phone,
			Phone10 = phone,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = src),
		PhoneSSN(FILTER((UNSIGNED)phone != 0 AND (UNSIGNED)ssn != 0),
			PhoneNumber = phone,
			Social = ssn,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = src),
		PersonSSN(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)ssn != 0),
			Subject = did,
			Social = ssn,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = src),
		PersonAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)did != 0),
			Subject = did,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = src),
		PersonPhone(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)phone != 0),
			Subject = did,
			PhoneNumber = phone,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = src),
		AddressPhone(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)phone != 0),
			PhoneNumber = phone,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = src),
		ZipCode(FILTER((UNSIGNED3)zip !=0), // Not sure we want this permanantly, but adding this for now until the 'correct' ZipCode files are added to the FDC bundle so that the Address ENTITY/ASSOCIATIONS will compile.
			UID = zip),
		ZipCodePerson(
			Zip = zip,
			Subject = did)), // leaving FCRA and nonFCRA the same for now, since on Vault side, Header use statement is only defined for FCRA. During FDC fetch, we are pointing to the correct version of the key (FCRA or NonFCRA)
		
	Dataset_Header_Quick__Key_Did(
		SocialSecurityNumber(FILTER((UNSIGNED)ssn != 0),	
			UID = ssn,
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen,     // Contains information for ASOF
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen,   // Contains information for ASOF
			IssueState = st,
			HeaderFirstSeen = dt_first_seen,
			Source = src),
		SSNAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)ssn != 0),
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen,   // Contains information for ASOF
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			Social = ssn,
			PrimaryRange = prim_range, 
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			Source = src),
		Person(FILTER((UNSIGNED)did != 0),
			UID = did,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen,   // Contains information for ASOF
			Title = title,
			FirstName = fname,
			MiddleName = mname,
			LastName = lname,
			NameSuffix = name_suffix,
			DateOfBirth = dob,
			Source = src),
		PersonSSN(FILTER((UNSIGNED)ssn != 0 AND (UNSIGNED)did != 0),
			Subject = did,
			Social = ssn,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = src),
		Address(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0),
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = suffix,
			Postdirectional = postdir,
			UnitDesignation = unit_desig,
			SecondaryRange = sec_range,
			State = st,
			ZIP5 = zip,
			ZIP4 = zip4,
			County = county,
			GeoBlock = geo_blk,
			ADVODateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			ADVODateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			ADVODateVendorFirstReported = FORMAT('YYYYMM01')dt_vendor_first_reported,
			ADVODateVendorLastReported = FORMAT('YYYYMM01')dt_vendor_last_reported,
			RecordTypeCode = rec_type,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = src),
		Phone(FILTER((UNSIGNED)phone != 0),
			UID = phone,
			Phone10 = phone,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = src),
		PhoneSSN(FILTER((UNSIGNED)ssn != 0 AND (UNSIGNED)phone != 0),
			PhoneNumber = phone,
			Social = ssn,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = src),
		PersonAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)did != 0),
			Subject = did,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = src),
		PersonPhone(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)phone != 0),
			Subject = did,
			PhoneNumber = phone,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = src),
		AddressPhone(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)phone != 0),
			PhoneNumber = phone,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = src)), // leaving FCRA and nonFCRA the same for now, since on Vault side, Header use statement is only defined for FCRA. During FDC fetch, we are pointing to the correct version of the key (FCRA or NonFCRA)

			
	Dataset_Doxie_Files__Key_Offenders_Risk(
		CriminalOffense(
			OffenderKey = offender_key,
			OffenseScore = offense_score,
			OffenderLevel = criminal_offender_level,
			DataType = data_type,
			CaseNumber = case_num,
			DateFirstSeen = earliest_offense_date,
			Source = src),
		PersonOffenses(FILTER((UNSIGNED)sdid != 0),
			Subject = sdid,
			OffenderKey = offender_key,
			DateFirstSeen = earliest_offense_date,
			Source = src),		
		SocialSecurityNumber(FILTER((UNSIGNED)ssn != 0),
			UID = ssn,
			IssueState = st,
			DateFirstSeen = earliest_offense_date,
			Source = src),
		PersonSSN(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)ssn != 0),
			Subject = did,
			Social = ssn,
			DateFirstSeen = earliest_offense_date,
			Source = src),	
		SSNAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip5 != 0 AND (UNSIGNED)ssn != 0),
			Social = ssn,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			ZIP5 = zip5,
			SecondaryRange = sec_range,
			DateFirstSeen = earliest_offense_date,
			Source = src),			
		DriversLicense(FILTER(dl_state != ''),
			DriversLicenseNumber = dl_num,
			IssuingState = dl_state,
			DateFirstSeen = earliest_offense_date,
			Source = src),
		ZipCodePerson(
			Zip = zip5,
			Subject = did,
			PrimaryRange = prim_range, 
			Predirectional = predir, 
			PrimaryName = prim_name, 
			Postdirectional = postdir, 
			Suffix = addr_suffix, 
			ZIP5 = zip5, 
			SecondaryRange = sec_range,
			DateFirstSeen = earliest_offense_date,
			Source = src),
		PERMITS([nonFCRA])),


	Dataset_Doxie_Files__Key_Punishment(
		CriminalOffense(
			OffenderKey = offender_key,
			ConvictionOverrideDate = conviction_override_date,
			ConvictionOverrideDateType = conviction_override_date_type,
			DateFirstSeen = event_dt,
			DateLastSeen = process_date,
			Source = 'DC'),
		CriminalPunishment(
			OffenderKey = offender_key,
			SourceFile = source_file,
			PunishmentType = punishment_type, 
			SourceState = orig_state,
			PunishmentPersistentID = punishment_persistent_id,	
			DateOfSentence = sent_date,
			SentenceLength = sent_length,
			SentenceLengthDescription = sent_length_desc,
			CurrentKnownInmateStatus = cur_stat_inm_desc,
			CurrentLocationOfInmate = cur_loc_inm,
			CurrentLocationSecurity = cur_loc_sec,
			IncarcerationAdmissionDate = latest_adm_dt,
			ScheduledReleaseDate = sch_rel_dt,
			ActualReleaseDate = act_rel_dt,
			ControlReleaseDate = ctl_rel_dt,
			PresumptiveParoleReleaseDate = presump_par_rel_dt,
			ParoleCurrentStatus = par_cur_stat,
			ParoleCurrentStatusDescription = par_cur_stat_desc,
			ParoleStartDate = par_st_dt,
			ParoleScheduledReleaseDate = par_sch_end_dt,
			ParoleActualReleaseDate = par_act_end_dt,
			ParoleCounty = par_cty,
			DateFirstSeen = event_dt,
			DateLastSeen = process_date,
			Source = 'DC'),
		CriminalDetails(
			OffenderKey = offender_key,
			DateFirstSeen = event_dt,
			DateLastSeen = process_date,
			Source = 'DC'),
		PERMITS([nonFCRA])),

		
	Dataset_Doxie_Files__Key_Offenses(
		CriminalOffender(
			OffenderKey = offender_key,
			NumberOfOffenseCounts = num_of_counts,
			Source = 'DC'),
		CriminalOffense(
			OffenderKey = offender_key,
			CaseNumber = case_num,
			PersistentOffenseKey = offense_key,
			DataType = data_type,
			StateOfSource = orig_state,
			DataSource = source_file,
			OffenseDate = off_date,
			DateOfArrest = arr_date,
			CourtOffenseCode = off_code,
			CourtOffenseDescription = off_desc_1,
			CourtOffenseAdditionalDescription = off_desc_2,
			OffenseType = off_typ,
			CourtOffenseLevel = off_lev,
			CourtDescription = court_desc,
			CourtDispositionDate = ct_disp_dt,
			CourtDispositionDescription = ct_disp_desc_1,
			CourtAdditionalDispositionDescription = ct_disp_desc_2,
			OffenseTown = offensetown,
			OffenseScore = offense_score,
			CourtCounty = court_county,
			TrafficFlag = fcra_traffic_flag,
			ConvictionFlag = fcra_conviction_flag,
			FcraOffenseKey = fcra_offense_key,
			PersistentOffenseKey = offense_persistent_id,
			FcraDate = fcra_date,
			FcraDateType = fcra_date_type,
			ConvictionOverrideDate = conviction_override_date,
			ConvictionOverrideDateType = conviction_override_date_type,
			Source = 'DC'),
		CriminalPunishment(
			OffenderKey = offender_key,
			DateOfSentence = stc_dt,
			SentenceCounty = cty_conv,		
			SentenceType = stc_desc_1,
			SentenceDescription = stc_desc_2,
			CommunityService = stc_desc_3,
			CurrentStatus = stc_desc_4,
			SentenceLength = stc_lgth,
			SentenceLengthDescription = stc_lgth_desc,
			IncarcerationAdmissionDate = inc_adm_dt,
			MinimumTerm = min_term,
			MinimumTermDescription = min_term_desc,
			MaximumTerm = max_term,
			MaximumTermDescription = max_term_desc,
			SourceFile = source_file,
			SourceState = orig_state,
			ParoleCurrentStatusDescription = parole,
			ProbationTimePeriod = probation,
			Source = 'DC'),
		CriminalDetails(
			OffenderKey = offender_key,
			Source = 'DC'),
		PERMITS([FCRA])),
			
	Dataset_Doxie_Files__Key_Court_Offenses(
		CriminalOffender(
			OffenderKey = offender_key,
			NumberOfOffenseCounts = num_of_counts),
		CriminalOffense(
			OffenderKey = offender_key,
			CaseNumber = court_case_number,
			PersistentOffenseKey = offense_persistent_id,
			OffenseScore = offense_score,
			OffenseCategory = offense_category,
			CourtOffenseLevel = court_off_lev,
			OffenseDate = off_date,
			DataType = data_type,		 
			CourtCost = sent_court_cost,
			CourtFine = sent_court_fine,
			SuspendedCourtFine = sent_susp_court_fine,
			TrafficFlag = fcra_traffic_flag,
			ConvictionFlag = fcra_conviction_flag,
			StateOfSource = state_origin,
			DataSource = source_file,
			DateOfArrest = arr_date,
			AgencyName = le_agency_desc,
			AgencyCaseNumber = le_agency_case_number,
			TrafficTicketNumber = traffic_ticket_number,
			ArrestOffenseCode = arr_off_code,
			ArrestInitialChargeDescription = arr_off_desc_1,
			ArrestAmendedChargeDescription = arr_off_desc_2,
			ArrestOffenceTypeDescription = arr_off_type_desc,
			ArrestOffenseLevel = arr_off_lev,
			DateOfDispositionForInitialCharge = arr_disp_date,
			InitialChargeDispositionDescription = arr_disp_desc_1,
			AdditionalDispositionDescription = arr_disp_desc_2,
			CourtCode = court_cd,
			CourtDescription = court_desc,
			CourtFinalPlea = court_final_plea,
			CourtOffenseCode = court_off_code,
			CourtOffenseDescription = court_off_desc_1,
			CourtOffenseAdditionalDescription = court_off_desc_2,
			CourtStatute = court_statute,
			CourtDispositionDate = court_disp_date,
			CourtDispositionCode = court_disp_code,
			CourtDispositionDescription = court_disp_desc_1,
			CourtAdditionalDispositionDescription = court_disp_desc_2,
			DateOfAppeal = appeal_date,
			DateofVerdict = convict_dt,
			OffenseTown = offense_town,
			CourtDate = court_dt,
			CourtCounty = court_county,
			ArrestOffenseLevelMapped = arr_off_lev_mapped,
			CourtOffenseLevelMapped = court_off_lev_mapped,
			FcraOffenseKey = fcra_offense_key,
			FcraDate = fcra_date,
			FcraDateType = fcra_date_type,
			ConvictionOverrideDate = conviction_override_date,
			ConvictionOverrideDateType = conviction_override_date_type),
		CriminalPunishment(
			OffenderKey = offender_key,
			DateOfSentence = sent_date,
			CurrentStatus = sent_susp_time,
			SentenceLengthDescription = sent_jail,
			ProbationTimePeriod = sent_probation,
			AdditionalProvision1 = sent_addl_prov_desc_1,
			AdditionalProvision2 = sent_addl_prov_desc_2,
			ConsecutiveAndConcurrentInformation = sent_consec,
			InstituitonName = sent_agency_rec_cust,
			Restitution = restitution,
			SentenceCounty = cty_conv,
			CommunityService = community_service,
			AdditionalSentenceDates = addl_sent_dates,
			ProbationDescription = probation_desc2),
		CriminalDetails(
			OffenderKey = offender_key),
		PERMITS([FCRA])),
	
			
	Dataset_Doxie_Files__Key_BocaShell_Crim_FCRA(
		PersonOffenses(FILTER((UNSIGNED)did != 0),
			Subject = did,
			OffenderKey = offender_key),
		PersonOffender(
			Subject = did,
			OffenderKey = offender_key),
		CriminalOffense(
			OffenderKey = offender_key,
			CaseDate = date,
			CaseNumber = case_num,
			ConvictionFlag = fcra_conviction_flag,
			TrafficFlag = fcra_traffic_flag,
			OffenseScore = offense_score),
		PERMITS([FCRA])),

	// FCRA and NonFCRA have slightly different USE statements in the Vault for key offenders, so keeping them separate here.
	Dataset_Doxie_Files__Key_Offenders(
		CriminalOffender(
			OffenderKey = offender_key,
			SourceFile = source_file,
			SourceState = orig_state,
			Citizenship = citizenship,
			HairColor = hair_color_desc,
			EyeColor = eye_color_desc,
			SkinColor = skin_color_desc,
			Height = height,
			Weight = weight,
			Status = party_status_desc,
			CurrentIncarceratedFlag = curr_incar_flag,
			CurrentParoleFlag = curr_parole_flag,
			CurrentProbationFlag = curr_probation_flag,
			DataType = data_type,
			DataSource = datasource,
			DateFirstSeen = fcra_date,
			Source = src),
		CriminalOffense(
			OffenderKey = offender_key,
			CaseNumber = case_num,
			CourtDescription = case_court,
			CaseDate = case_date,
			CaseTypeDescription = case_type_desc,
			CountyOfSource = county_of_origin,
			DepartmentOfLawEnforcementNumber = dle_num,
			FederalBureauOfInvestigationsNumber = fbi_num,
			InmateNumber = doc_num,
			StateIdentificationNumberAssigned = id_num,
			OffenseScore = offense_score,
			FcraDate = fcra_date,
			FcraDateType = fcra_date_type,
			ConvictionFlag = fcra_conviction_flag,
			TrafficFlag = fcra_traffic_flag,
			ConvictionOverrideDate = conviction_override_date,
			ConvictionOverrideDateType = conviction_override_date_type,
			DateFirstSeen = fcra_date,
			Source = src),
		CriminalDetails(
			OffenderKey = offender_key,
			DateFirstSeen = fcra_date,
			Source = src),
		Person(
			UID = did,
			Race = race,
			RaceDescription = race_desc,
			DateOfBirth = dob,
			FirstName = fname,
			LastName = lname,
			MiddleName = mname,
			NameSuffix = name_suffix,
			DateFirstSeen = fcra_date,
			Source = src),
		Person(
			UID = did,
			DateOfBirth = dob_alias,
			DateFirstSeen = fcra_date,
			Source = src),
		PersonOffenses(
			Subject = did,
			OffenderKey = offender_key,
			DateFirstSeen = fcra_date,
			Source = src),
		PersonOffender(
			Subject = did,
			OffenderKey = offender_key,
			DateFirstSeen = fcra_date,
			Source = src),	
		Address(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip5 != 0),
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			UnitDesignation = unit_desig,
			SecondaryRange = sec_range,
			PostalCity = p_city_name,
			VanityCity = v_city_name,
			State = st,
			ZIP5 = zip5,
			ZIP4 = zip4,
			CarrierRouteNumber = cart,
			CarrierRouteSortationAtZIP = cr_sort_sz,
			LineOfTravel = lot,
			LineOfTravelOrder = lot_order,
			DeliveryPointBarcode = dpbc,
			DeliveryPointBarcodeCheckDigit = chk_digit,
			TypeCode = rec_type,
			County = ace_fips_county,
			Latitude = geo_lat,
			Longitude = geo_long,
			MetropolitanStatisticalArea = msa,
			GeoBlock = geo_blk,
			GeoMatch = geo_match,
			ACECleanerErrorCode = err_stat,
			DateFirstSeen = fcra_date,
			Source = src),		
		OffenderAddress(
			OffenderKey = offender_key,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			ZIP5 = zip5,
			SecondaryRange = sec_range,
			DateFirstSeen = fcra_date,
			Source = src),
		SocialSecurityNumber(FILTER((UNSIGNED)ssn != 0),
			UID=ssn,
			DateFirstSeen = fcra_date,
			Source = src),		
		OffenderSSN(
			Social = ssn,
			OffenderKey = offender_key,
			DateFirstSeen = fcra_date,
			Source = src),
		PersonSSN(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)ssn != 0),
			Subject = did,
			Social = ssn,
			DateFirstSeen = fcra_date,
			Source = src),	
		PersonAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip5 != 0 AND (UNSIGNED)did != 0),
			Subject = did,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			ZIP5 = zip5,
			SecondaryRange = sec_range,
			DateFirstSeen = fcra_date,
			Source = src),
		PERMITS([FCRA])),

	Dataset_Doxie_Files__Key_Offenders(
		CriminalOffender(
			OffenderKey = offender_key,
			SourceFile = source_file,
			SourceState = orig_state,
			Citizenship = citizenship,
			HairColor = hair_color_desc,
			EyeColor = eye_color_desc,
			SkinColor = skin_color_desc,
			Height = height,
			Weight = weight,
			Status = party_status_desc,
			CurrentIncarceratedFlag = curr_incar_flag,
			CurrentParoleFlag = curr_parole_flag,
			CurrentProbationFlag = curr_probation_flag,
			DataType = data_type,
			DataSource = datasource,
			Source = src),
		CriminalOffense(
			OffenderKey = offender_key,
			CaseNumber = case_num,
			CourtDescription = case_court,
			CaseDate = case_date,
			CaseTypeDescription = case_type_desc,
			CountyOfSource = county_of_origin,
			DataType = data_type,
			DepartmentOfLawEnforcementNumber = dle_num,
			FederalBureauOfInvestigationsNumber = fbi_num,
			InmateNumber = doc_num,
			StateIdentificationNumberAssigned = id_num,
			OffenseScore = offense_score,
			FcraDate = fcra_date,
			FcraDateType = fcra_date_type,
			ConvictionFlag = fcra_conviction_flag,
			TrafficFlag = fcra_traffic_flag,
			ConvictionOverrideDate = conviction_override_date,
			ConvictionOverrideDateType = conviction_override_date_type,
			Source = src),
		CriminalDetails(
			OffenderKey = offender_key,
			Source = src),
		Person(
			UID = did,
			Race = race,
			RaceDescription = race_desc,
			DateOfBirth = dob,
			FirstName = fname,
			LastName = lname,
			MiddleName = mname,
			NameSuffix = name_suffix,
			Source = src),
		Person( // This is a second mapping of the Person ENTITY because there are two DateOfBirth fields contained within this file
			UID = did,
			DateOfBirth = dob_alias,
			Source = src),
		PersonOffenses(
			Subject = did,
			OffenderKey = offender_key,
			Source = src),
		PersonOffender(
			Subject = did,
			OffenderKey = offender_key,
			Source = src),
		Address(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED)zip5 != 0),
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			UnitDesignation = unit_desig,
			SecondaryRange = sec_range,
			PostalCity = p_city_name,
			VanityCity = v_city_name,
			State = st,
			ZIP5 = zip5,
			ZIP4 = zip4,
			CarrierRouteNumber = cart,
			CarrierRouteSortationAtZIP = cr_sort_sz,
			LineOfTravel = lot,
			LineOfTravelOrder = lot_order,
			DeliveryPointBarcode = dpbc,
			DeliveryPointBarcodeCheckDigit = chk_digit,
			TypeCode = rec_type,
			County = ace_fips_county,
			Latitude = geo_lat,
			Longitude = geo_long,
			MetropolitanStatisticalArea = msa,
			GeoBlock = geo_blk,
			GeoMatch = geo_match,
			ACECleanerErrorCode = err_stat,
			Source = src),
		OffenderAddress(
			OffenderKey = offender_key,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			ZIP5 = zip5,
			SecondaryRange = sec_range,
			Source = src),
		SocialSecurityNumber(FILTER((UNSIGNED)ssn != 0),
			UID=ssn,
			Source = src),
		OffenderSSN(
			Social = ssn,
			OffenderKey = offender_key,
			Source = src),
		PersonSSN(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)ssn != 0),
			Subject = did,
			Social = ssn,
			Source = src),
		PersonAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED)zip5 != 0 AND (UNSIGNED)did != 0),
			Subject = did,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			ZIP5 = zip5,
			SecondaryRange = sec_range,
			Source = src),
		ZipCodePerson(
			Zip = zip5,
			Subject = did,
			PrimaryRange = prim_range, 
			Predirectional = predir, 
			PrimaryName = prim_name, 
			Postdirectional = postdir, 
			Suffix = addr_suffix, 
			ZIP5 = zip5, 
			SecondaryRange = sec_range,
			Source = src),
		PERMITS([nonFCRA])),
	
	Dataset_Bankruptcy_Files__Key_Search(
		Person(
			UID = did,
			DateFirstSeen = date_first_seen, // Contains information for ASOF
			DateLastSeen = date_last_seen, // Contains information for ASOF
			Title = title,
			FirstName = fname,
			MiddleName = mname,  
			LastName = lname,
			NameSuffix = name_suffix,
			Source = 'BA'),
		PersonBankruptcy(FILTER((UNSIGNED)did != 0),
			TMSID = TMSID,
			Court_Code = Court_Code,
			Case_Number = Case_Number,
			DateFirstSeen = date_first_seen, // Contains information for ASOF
			DateLastSeen = date_last_seen, // Contains information for ASOF
			Subject = did,
			Source = 'BA'),
		Bankruptcy(
			TMSID = TMSID,
			CourtCode = Court_Code,
			CaseNumber = Case_Number,
			DateFirstSeen = date_first_seen, // Contains information for ASOF
			DateLastSeen = date_last_seen, // Contains information for ASOF
			OriginalCaseNumber = orig_case_number,
			SourceDescription = srcdesc,
			OriginalChapter = chapter,
			FilingType = filing_type,
			BusinessFlag = business_flag,
			CorporateFlag = corp_flag,
			DischargedDate = discharged,
			Disposition = disposition,
			DebtorType = debtor_type,
			DebtorSequence = debtor_seq,
			DispositionType = disptype,
			DispositionReason = dispreason,
			DispositionTypeDescription = disptypedesc,
			NameType = name_type,
			ScreenDescription = screendesc,
			DecodedDescription = dcodedesc,
			DateFiled = date_filed,
			RecordType = record_type,
			DateVendorFirstReported = date_vendor_first_reported,
			DateVendorLastReported = date_vendor_last_reported,
			CaseID = caseid,
			DefendantID = defendantid,
			Source = 'BA'),
		PersonSSN(FILTER((UNSIGNED)ssn != 0 AND (UNSIGNED)did != 0),
			Subject = did,
			Social = ssn,	
			DateFirstSeen = date_first_seen,
			DateLastSeen = date_last_seen,
			Source = 'BA'),
		SocialSecurityNumber(FILTER((UNSIGNED)ssn != 0),
			UID=ssn,
			IssueState = st,
			DateFirstSeen = date_first_seen,
			DateLastSeen = date_last_seen,
			Source = 'BA'),
		PhoneSSN(FILTER((UNSIGNED)ssn != 0 AND (UNSIGNED)phone != 0),
			PhoneNumber = phone,
			Social = ssn,
			DateFirstSeen = date_first_seen,
			DateLastSeen = date_last_seen,
			Source = 'BA'),
		SSNBankruptcy(FILTER((UNSIGNED)ssn != 0),
			Social = ssn,
			Bankrupt = tmsid,
			DateFirstSeen = date_first_seen,
			DateLastSeen = date_last_seen,
			Source = 'BA'),
		SSNAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)ssn != 0),
			Social = ssn,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			DateFirstSeen = date_first_seen,
			DateLastSeen = date_last_seen,
			Source = 'BA'),
		PersonAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)did != 0),
			Subject = did,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			DateFirstSeen = date_first_seen,
			DateLastSeen = date_last_seen,
			Source = 'BA'),
		ZipCodePerson(
			Zip = zip,
			Subject = did,
			PrimaryRange = prim_range, 
			Predirectional = predir, 
			PrimaryName = prim_name, 
			Postdirectional = postdir, 
			Suffix = addr_suffix, 
			ZIP5 = zip, 
			SecondaryRange = sec_range,
			DateFirstSeen = date_first_seen,
			DateLastSeen = date_last_seen,
			Source = 'BA'),
		PERMITS([FCRA])),

	Dataset_Bankruptcy_Files__Key_Search(
		Person(
			UID = did,
			DateFirstSeen = date_first_seen, // Contains information for ASOF
			DateLastSeen = date_last_seen, // Contains information for ASOF
			Title = title,
			FirstName = fname,
			MiddleName = mname,  
			LastName = lname,
			NameSuffix = name_suffix,
			Source = 'BA'),
		PersonBankruptcy(FILTER((UNSIGNED)did != 0),
			DateFirstSeen = date_first_seen, // Contains information for ASOF
			DateLastSeen = date_last_seen, // Contains information for ASOF
			Subject = did,
			Source = 'BA'),
		Bankruptcy(
			TMSID = TMSID,
			CourtCode = Court_Code,
			CaseNumber = Case_Number,
			DateFirstSeen = date_first_seen, // Contains information for ASOF
			DateLastSeen = date_last_seen, // Contains information for ASOF
			OriginalCaseNumber = orig_case_number,
			SourceDescription = srcdesc,
			OriginalChapter = chapter,
			FilingType = filing_type,
			BusinessFlag = business_flag,
			CorporateFlag = corp_flag,
			DischargedDate = discharged,
			Disposition = disposition,
			DebtorType = debtor_type,
			DebtorSequence = debtor_seq,
			DispositionType = disptype,
			DispositionReason = dispreason,
			DispositionTypeDescription = disptypedesc,
			NameType = name_type,
			ScreenDescription = screendesc,
			DecodedDescription = dcodedesc,
			DateFiled = date_filed,
			RecordType = record_type,
			DateVendorFirstReported = date_vendor_first_reported,
			DateVendorLastReported = date_vendor_last_reported,
			CaseID = caseid,
			DefendantID = defendantid,
			Source = 'BA'),
		PersonSSN(FILTER((UNSIGNED)ssn != 0 AND (UNSIGNED)did != 0),
			Subject = did,
			Social = ssn,	
			DateFirstSeen = date_first_seen,
			DateLastSeen = date_last_seen,
			Source = 'BA'),
		SocialSecurityNumber(FILTER((UNSIGNED)ssn != 0),
			UID=ssn,
			IssueState = st,
			DateFirstSeen = date_first_seen,
			DateLastSeen = date_last_seen,
			Source = 'BA'),
		PhoneSSN(FILTER((UNSIGNED)ssn != 0 AND (UNSIGNED)phone != 0),
			PhoneNumber = phone,
			Social = ssn,
			DateFirstSeen = date_first_seen,
			DateLastSeen = date_last_seen,
			Source = 'BA'),
		SSNBankruptcy(FILTER((UNSIGNED)ssn != 0),
			Social = ssn,
			Bankrupt = tmsid,
			DateFirstSeen = date_first_seen,
			DateLastSeen = date_last_seen,
			Source = 'BA'),
		SSNAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)ssn != 0),
			Social = ssn,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			DateFirstSeen = date_first_seen,
			DateLastSeen = date_last_seen,
			Source = 'BA'),
		PersonAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)did != 0),
			Subject = did,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			DateFirstSeen = date_first_seen,
			DateLastSeen = date_last_seen,
			Source = 'BA'),
		ZipCodePerson(
			Zip = zip,
			Subject = did,
			PrimaryRange = prim_range, 
			Predirectional = predir, 
			PrimaryName = prim_name, 
			Postdirectional = postdir, 
			Suffix = addr_suffix, 
			ZIP5 = zip, 
			SecondaryRange = sec_range,
			DateFirstSeen = date_first_seen,
			DateLastSeen = date_last_seen,
			Source = 'BA'),
		PERMITS([nonFCRA])),

    Property,
    Business, 
    Inquiry, 
    Aircraft,    
    Watercraft,
    Email,
    Household,
    Education,
    Vehicle,
    Utility,
    ProfessionalLicense,
    // PersonBankruptcy,
    // SSNBankruptcy,
    PersonInquiry,
    AddressInquiry,
    SSNInquiry,
    DriversLicenseInquiry,
    PersonDriversLicense,
    AddressVehicle,
    AddressDriversLicense,
    FirstDegreeAssociations,   
    SecondDegreeAssociations,
    FirstDegreeRelative,
    AircraftOwner,
    AircraftAddress,
    WatercraftOwner,
    // WatercraftAddress,
    PersonEmail,
    HouseholdMember,
    PersonProperty,
    AddressProperty,
    BusinessProperty,
    SSNProperty,
    PersonEducation,
    EducationSSN,
    EducationStudentAddress,
    EmploymentBusiness,
    EmploymentPerson,
    EmploymentSSN,
    EmploymentBusinessAddress,
    UtilityHomeAddress,
    UtilityPerson,
    UtilityPhone,
    ProfessionalLicenseAddress,
    ProfessionalLicensePhone,
    ProfessionalLicensePerson,
    PersonVehicle,
		Employment
    );