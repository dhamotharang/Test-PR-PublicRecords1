﻿IMPORT KnowledgeUniverse.PublicRecords_KEL.Entities; 

USE PublicRecords_KEL.ECL_Functions.Dataset_FDC(FDC, 
	Dataset_Doxie__Key_Header(
		SSNAddress(FILTER((STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)ssn != 0),
		DateLastSeen = FORMAT('YYYYMM01','YYYY0101')dt_last_seen, // Contains information for ASOF
		DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen, // Contains information for ASOF
		//DateVendorFirstReported = FORMAT('YYYYMM01')dt_vendor_first_reported,
		//DateVendorLastReported = FORMAT('YYYYMM01')dt_vendor_last_reported,
		Social = ssn,
		PrimaryRange = prim_range,
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = suffix,
		Postdirectional = postdir,
		ZIP5 = zip,
		SecondaryRange = sec_range,
		Source = src,
		HybridArchiveDate = FORMAT('YYYYMMDD'),
		Archive_Date = FORMAT('YYYYMMDD')archive_date),
	Person(FILTER((UNSIGNED)did != 0),
		UID=did,
		DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen, // Contains information for ASOF
		DateLastSeen = FORMAT('YYYYMM01','YYYY0101')dt_last_seen, // Contains information for ASOF
		//DateVendorFirstReported = FORMAT('YYYYMM01')dt_vendor_first_reported,
		//DateVendorLastReported = FORMAT('YYYYMM01')dt_vendor_last_reported,
		Title = title,
		FirstName = fname,
		MiddleName = mname,
		LastName = lname,
		NameSuffix = name_suffix,
		DateOfBirth = dob,
		DateOfBirthPadded = DOBPadded,
		ValidDOB = valid_dob,
		DateOfDeath = dod,
		HeaderHitFlag = TRUE,
		Source = src,
		HybridArchiveDate = FORMAT('YYYYMMDD'),
		Archive_Date = FORMAT('YYYYMMDD')archive_date),
	SocialSecurityNumber(FILTER((UNSIGNED)ssn != 0),//header has lookup table for ssn for roxie
		UID=ssn,
		DateLastSeen = FORMAT('YYYYMM01','YYYY0101')dt_last_seen, // Contains information for ASOF
		DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen, // Contains information for ASOF
		//DateVendorFirstReported = FORMAT('YYYYMM01')dt_vendor_first_reported,
		//DateVendorLastReported = FORMAT('YYYYMM01')dt_vendor_last_reported,
		DateOfDeath = dod,
		IssueState = st,
		HeaderFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
		Source = src,
		HybridArchiveDate = FORMAT('YYYYMMDD'),
		Archive_Date = FORMAT('YYYYMMDD')archive_date),
	PersonSSN(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)ssn != 0),
		Subject = did,
		Social = ssn,
		DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen, // Contains information for ASOF
		DateLastSeen = FORMAT('YYYYMM01','YYYY0101')dt_last_seen, // Contains information for ASOF
		//DateVendorFirstReported = FORMAT('YYYYMM01')dt_vendor_first_reported,
		//DateVendorLastReported = FORMAT('YYYYMM01')dt_vendor_last_reported,
		HeaderHitFlag = TRUE,
		ValidSSN = valid_ssn,
		Source = src,
		HybridArchiveDate = FORMAT('YYYYMMDD'),
		Archive_Date = FORMAT('YYYYMMDD')archive_date),
	PersonAddress(FILTER((STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)did != 0),
		Subject = did,
		PrimaryRange = prim_range,
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = suffix,
		Postdirectional = postdir,
		ZIP5 = zip,
		SecondaryRange = sec_range,
		DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen, // Contains information for ASOF
		DateLastSeen = FORMAT('YYYYMM01','YYYY0101')dt_last_seen, // Contains information for ASOF
		//DateVendorFirstReported = FORMAT('YYYYMM01')dt_vendor_first_reported,
		//DateVendorLastReported = FORMAT('YYYYMM01')dt_vendor_last_reported,
		HeaderHitFlag = TRUE,
		Source = src,
		HybridArchiveDate = FORMAT('YYYYMMDD'), 
		Archive_Date = FORMAT('YYYYMMDD')archive_date),
	ZipCodePerson(FILTER((UNSIGNED3)zip != 0 AND (UNSIGNED)did != 0),
		Subject = did,
		Zip = zip,
		DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen, // Contains information for ASOF
		DateLastSeen = FORMAT('YYYYMM01','YYYY0101')dt_last_seen, // Contains information for ASOF
		//DateVendorFirstReported = FORMAT('YYYYMM01')dt_vendor_first_reported,
		//DateVendorLastReported = FORMAT('YYYYMM01')dt_vendor_last_reported,
		HeaderHitFlag = TRUE,
		Source = src,
		HybridArchiveDate = FORMAT('YYYYMMDD'),
		Archive_Date = FORMAT('YYYYMMDD')archive_date),
	PersonPhone(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)phone != 0),
		Subject = did,
		PhoneNumber = phone,
		PhoneQuality = pflag2,
		TNT = tnt,
		DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen, // Contains information for ASOF
		DateLastSeen = FORMAT('YYYYMM01','YYYY0101')dt_last_seen, // Contains information for ASOF
		//DateVendorFirstReported = FORMAT('YYYYMM01')dt_vendor_first_reported,
		//DateVendorLastReported = FORMAT('YYYYMM01')dt_vendor_last_reported,
		HeaderHitFlag = TRUE,
		Source = src,
		HybridArchiveDate = FORMAT('YYYYMMDD'),
		Archive_Date = FORMAT('YYYYMMDD')archive_date),
	PhoneSSN(FILTER((UNSIGNED)ssn != 0 AND (UNSIGNED)phone != 0),
		PhoneNumber = phone,
		Social = ssn,
		DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen, // Contains information for ASOF
		DateLastSeen = FORMAT('YYYYMM01','YYYY0101')dt_last_seen, // Contains information for ASOF
		//DateVendorFirstReported = FORMAT('YYYYMM01')dt_vendor_first_reported, 
		//DateVendorLastReported = FORMAT('YYYYMM01')dt_vendor_last_reported,
		HeaderHitFlag = TRUE,
		Source = src,
		HybridArchiveDate = FORMAT('YYYYMMDD'), 
		Archive_Date = FORMAT('YYYYMMDD')archive_date),	
	HouseHoldPhone(FILTER((UNSIGNED)hhid != 0 AND (UNSIGNED)phone != 0),
		DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen, // Contains information for ASOF
		DateLastSeen = FORMAT('YYYYMM01','YYYY0101')dt_last_seen, // Contains information for ASOF
		//DateVendorFirstReported = FORMAT('YYYYMM01')dt_vendor_first_reported,
		//DateVendorLastReported = FORMAT('YYYYMM01')dt_vendor_last_reported,
		Household = hhid,
		PhoneNumber = phone,
		Source = src,
		HybridArchiveDate = FORMAT('YYYYMMDD'),
		Archive_Date = FORMAT('YYYYMMDD')archive_date),	
		PERMITS(DPMBitmap)), // leaving FCRA and nonFCRA the same for now, since on Vault side, Header use statement is only defined for FCRA. During FDC fetch, we are pointing to the correct version of the key (FCRA or NonFCRA)
		
	Dataset_Header_Quick__Key_Did(
		SocialSecurityNumber(FILTER((UNSIGNED)ssn != 0),	
			UID = ssn,
			DateLastSeen = FORMAT('YYYYMM01','YYYY0101')dt_last_seen,     // Contains information for ASOF
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,   // Contains information for ASOF
			//DateVendorFirstReported = FORMAT('YYYYMM01')dt_vendor_first_reported,
			//DateVendorLastReported = FORMAT('YYYYMM01')dt_vendor_last_reported,
			IssueState = st,
			HeaderFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),  
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		SSNAddress(FILTER((STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)ssn != 0),
			DateLastSeen = FORMAT('YYYYMM01','YYYY0101')dt_last_seen,   // Contains information for ASOF
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen, // Contains information for ASOF
			//DateVendorFirstReported = FORMAT('YYYYMM01')dt_vendor_first_reported,
			//DateVendorLastReported = FORMAT('YYYYMM01')dt_vendor_last_reported,
			Social = ssn,
			PrimaryRange = prim_range, 
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		Person(FILTER((UNSIGNED)did != 0),
			UID = did,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01','YYYY0101')dt_last_seen,   // Contains information for ASOF
			//DateVendorFirstReported = FORMAT('YYYYMM01')dt_vendor_first_reported,
			//DateVendorLastReported = FORMAT('YYYYMM01')dt_vendor_last_reported,
			Title = title,
			FirstName = fname,
			MiddleName = mname,
			LastName = lname,
			NameSuffix = name_suffix,
			DateOfBirth = dob,
			DateOfBirthPadded = DOBPadded,
			HeaderHitFlag = TRUE,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PersonSSN(FILTER((UNSIGNED)ssn != 0 AND (UNSIGNED)did != 0),
			Subject = did,
			Social = ssn,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01','YYYY0101')dt_last_seen, // Contains information for ASOF
			//DateVendorFirstReported = FORMAT('YYYYMM01')dt_vendor_first_reported,
			//DateVendorLastReported = FORMAT('YYYYMM01')dt_vendor_last_reported,
			HeaderHitFlag = TRUE,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PersonAddress(FILTER((STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)did != 0),
			Subject = did,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01','YYYY0101')dt_last_seen, // Contains information for ASOF
			HeaderHitFlag = TRUE,
			//DateVendorFirstReported = FORMAT('YYYYMM01')dt_vendor_first_reported,
			//DateVendorLastReported = FORMAT('YYYYMM01')dt_vendor_last_reported,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		ZipCodePerson(FILTER((UNSIGNED3)zip != 0 AND (UNSIGNED)did != 0),
			Subject = did,
			Zip = zip,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01','YYYY0101')dt_last_seen, // Contains information for ASOF
			//DateVendorFirstReported = FORMAT('YYYYMM01')dt_vendor_first_reported,
			//DateVendorLastReported = FORMAT('YYYYMM01')dt_vendor_last_reported,
			HeaderHitFlag = TRUE,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PersonPhone(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)phone != 0),
			Subject = did,
			PhoneNumber = phone,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01','YYYY0101')dt_last_seen, // Contains information for ASOF
			//DateVendorFirstReported = FORMAT('YYYYMM01')dt_vendor_first_reported,
			//DateVendorLastReported = FORMAT('YYYYMM01')dt_vendor_last_reported,
			HeaderHitFlag = TRUE,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PhoneSSN(FILTER((UNSIGNED)ssn != 0 AND (UNSIGNED)phone != 0),
			PhoneNumber = phone,
			Social = ssn,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01','YYYY0101')dt_last_seen, // Contains information for ASOF
			//DateVendorFirstReported = FORMAT('YYYYMM01')dt_vendor_first_reported, 
			//DateVendorLastReported = FORMAT('YYYYMM01')dt_vendor_last_reported,
			HeaderHitFlag = TRUE,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),	
		PERMITS(DPMBitmap)), // leaving FCRA and nonFCRA the same for now, since on Vault side, Header use statement is only defined for FCRA. During FDC fetch, we are pointing to the correct version of the key (FCRA or NonFCRA)
	
	Dataset_ConsumerStatementFlags(			
		Person(FILTER((UNSIGNED)UniqueId != 0),
			UID = UniqueId,
			DateFirstSeen = FORMAT('YYYYMMDD')datefirstseen, //timestamp date, month, year
			StatementID = StatementId, 
			StatementType = StatementType, 
			DataGroup = DataGroup, 
			Content = Content, 
			CorrectedFlag = Corrected_Flag, 
			ConsumerStatementFlag = Consumer_Statement_Flag,
			DisputeFlag = Dispute_Flag, 
			SecurityFreeze = Security_Freeze, 
			SecurityAlert = Security_Alert, 
			IDTheftFlag = ID_Theft_Flag, 
			LegalHoldAlert = Legal_Hold_Alert, 
			Source = src,
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),	
		
	Dataset_Doxie_Files__Key_Offenders_Risk(
		CriminalOffense(
			OffenderKey = offender_key,
			OffenseScore = offense_score,
			OffenderLevel = criminal_offender_level,
			DataType = data_type,
			CaseNumber = case_num,
			DateFirstSeen = FORMAT('YYYYMMDD')earliest_offense_date,
			Source = src,
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PersonOffenses(FILTER((UNSIGNED)sdid != 0),
			Subject = sdid,
			OffenderKey = offender_key,
			DateFirstSeen = FORMAT('YYYYMMDD')earliest_offense_date,
			Source = src,
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),		
		PERMITS(DPMBitmap)),

	Dataset_Doxie_Files__Key_Punishment(
		CriminalOffense(
			OffenderKey = offender_key,
			ConvictionOverrideDate = conviction_override_date,
			ConvictionOverrideDateType = conviction_override_date_type,
			DateFirstSeen = FORMAT('YYYYMMDD')event_dt,
			DateLastSeen = FORMAT('YYYYMMDD')process_date,
			Source = 'DC',
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		CriminalPunishment(
			OffenderKey = offender_key,
			SourceFile = source_file,
			PunishmentType = punishment_type, 
			SourceState = orig_state,
			PunishmentPersistentID = punishment_persistent_id,	
			DateOfSentence = sent_date,
			SentenceLength = sent_length,
			SentenceLengthDescription = sent_length_desc,
			CurrentKnownInmateStatus = cur_stat_inm_desc,
			CurrentLocationOfInmate = cur_loc_inm,
			CurrentLocationSecurity = cur_loc_sec,
			IncarcerationAdmissionDate = latest_adm_dt,
			ScheduledReleaseDate = sch_rel_dt,
			ActualReleaseDate = act_rel_dt,
			ControlReleaseDate = ctl_rel_dt,
			PresumptiveParoleReleaseDate = presump_par_rel_dt,
			ParoleCurrentStatus = par_cur_stat,
			ParoleCurrentStatusDescription = par_cur_stat_desc,
			ParoleStartDate = par_st_dt,
			ParoleScheduledReleaseDate = par_sch_end_dt,
			ParoleActualReleaseDate = par_act_end_dt,
			ParoleCounty = par_cty,
			DateFirstSeen = FORMAT('YYYYMMDD')event_dt,
			DateLastSeen = FORMAT('YYYYMMDD')process_date,
			Source = 'DC',
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		CriminalDetails(
			OffenderKey = offender_key,
			DateFirstSeen = FORMAT('YYYYMMDD')event_dt,
			DateLastSeen = FORMAT('YYYYMMDD')process_date,
			Source = 'DC',
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),
		
	Dataset_Doxie_Files__Key_Offenses(
		CriminalOffender(
			OffenderKey = offender_key,
			NumberOfOffenseCounts = num_of_counts,
			Source = 'DC',
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		CriminalOffense(
			OffenderKey = offender_key,
			CaseNumber = case_num,
			PersistentOffenseKey = offense_key,
			DataType = data_type,
			StateOfSource = orig_state,
			DataSource = source_file,
			OffenseDate = off_date,
			DateOfArrest = arr_date,
			CourtOffenseCode = off_code,
			CourtOffenseDescription = off_desc_1,
			CourtOffenseAdditionalDescription = off_desc_2,
			OffenseType = off_typ,
			CourtOffenseLevel = off_lev,
			CourtDescription = court_desc,
			CourtDispositionDate = ct_disp_dt,
			CourtDispositionDescription = ct_disp_desc_1,
			CourtAdditionalDispositionDescription = ct_disp_desc_2,
			OffenseTown = offensetown,
			OffenseScore = offense_score,
			CourtCounty = court_county,
			TrafficFlag = fcra_traffic_flag,
			ConvictionFlag = fcra_conviction_flag,
			FcraOffenseKey = fcra_offense_key,
			FcraDate = fcra_date,
			FcraDateType = fcra_date_type,
			ConvictionOverrideDate = conviction_override_date,
			ConvictionOverrideDateType = conviction_override_date_type,
			Source = 'DC',
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		CriminalOffense(
			OffenderKey = offender_key,
			PersistentOffenseKey = offense_persistent_id,
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		CriminalPunishment(
			OffenderKey = offender_key,
			DateOfSentence = stc_dt,
			SentenceCounty = cty_conv,		
			SentenceType = stc_desc_1,
			SentenceDescription = stc_desc_2,
			CommunityService = stc_desc_3,
			CurrentStatus = stc_desc_4,
			SentenceLength = stc_lgth,
			SentenceLengthDescription = stc_lgth_desc,
			IncarcerationAdmissionDate = inc_adm_dt,
			MinimumTerm = min_term,
			MinimumTermDescription = min_term_desc,
			MaximumTerm = max_term,
			MaximumTermDescription = max_term_desc,
			SourceFile = source_file,
			SourceState = orig_state,
			ParoleCurrentStatusDescription = parole,
			ProbationTimePeriod = probation,
			Source = 'DC',
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		CriminalDetails(
			OffenderKey = offender_key,
			Source = 'DC',
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),
			
	Dataset_Doxie_Files__Key_Court_Offenses(
		CriminalOffender(
			OffenderKey = offender_key,
			NumberOfOffenseCounts = num_of_counts,
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		CriminalOffense(
			OffenderKey = offender_key,
			CaseNumber = court_case_number,
			PersistentOffenseKey = offense_persistent_id,
			OffenseScore = offense_score,
			OffenseCategory = offense_category,
			CourtOffenseLevel = court_off_lev,
			OffenseDate = off_date,
			DataType = data_type,		 
			CourtCost = sent_court_cost,
			CourtFine = sent_court_fine,
			SuspendedCourtFine = sent_susp_court_fine,
			TrafficFlag = fcra_traffic_flag,
			ConvictionFlag = fcra_conviction_flag,
			StateOfSource = state_origin,
			DataSource = source_file,
			DateOfArrest = arr_date,
			AgencyName = le_agency_desc,
			AgencyCaseNumber = le_agency_case_number,
			TrafficTicketNumber = traffic_ticket_number,
			ArrestOffenseCode = arr_off_code,
			ArrestInitialChargeDescription = arr_off_desc_1,
			ArrestAmendedChargeDescription = arr_off_desc_2,
			ArrestOffenceTypeDescription = arr_off_type_desc,
			ArrestOffenseLevel = arr_off_lev,
			DateOfDispositionForInitialCharge = arr_disp_date,
			InitialChargeDispositionDescription = arr_disp_desc_1,
			AdditionalDispositionDescription = arr_disp_desc_2,
			CourtCode = court_cd,
			CourtDescription = court_desc,
			CourtFinalPlea = court_final_plea,
			CourtOffenseCode = court_off_code,
			CourtOffenseDescription = court_off_desc_1,
			CourtOffenseAdditionalDescription = court_off_desc_2,
			CourtStatute = court_statute,
			CourtDispositionDate = court_disp_date,
			CourtDispositionCode = court_disp_code,
			CourtDispositionDescription = court_disp_desc_1,
			CourtAdditionalDispositionDescription = court_disp_desc_2,
			DateOfAppeal = appeal_date,
			DateofVerdict = convict_dt,
			OffenseTown = offense_town,
			CourtDate = court_dt,
			CourtCounty = court_county,
			ArrestOffenseLevelMapped = arr_off_lev_mapped,
			CourtOffenseLevelMapped = court_off_lev_mapped,
			FcraOffenseKey = fcra_offense_key,
			FcraDate = fcra_date,
			FcraDateType = fcra_date_type,
			ConvictionOverrideDate = conviction_override_date,
			ConvictionOverrideDateType = conviction_override_date_type,
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		CriminalPunishment(
			OffenderKey = offender_key,
			DateOfSentence = sent_date,
			CurrentStatus = sent_susp_time,
			SentenceLengthDescription = sent_jail,
			ProbationTimePeriod = sent_probation,
			AdditionalProvision1 = sent_addl_prov_desc_1,
			AdditionalProvision2 = sent_addl_prov_desc_2,
			ConsecutiveAndConcurrentInformation = sent_consec,
			InstituitonName = sent_agency_rec_cust,
			Restitution = restitution,
			SentenceCounty = cty_conv,
			CommunityService = community_service,
			AdditionalSentenceDates = addl_sent_dates,
			ProbationDescription = probation_desc2,
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		CriminalDetails(
			OffenderKey = offender_key,
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),

	Dataset_Doxie_Files__Key_Offenders(
		CriminalOffender(
			OffenderKey = offender_key,
			SourceFile = source_file,
			SourceState = orig_state,
			Citizenship = citizenship,
			HairColor = hair_color_desc,
			EyeColor = eye_color_desc,
			SkinColor = skin_color_desc,
			Height = height,
			Weight = weight,
			Status = party_status_desc,
			CurrentIncarceratedFlag = curr_incar_flag,
			CurrentParoleFlag = curr_parole_flag,
			CurrentProbationFlag = curr_probation_flag,
			DataType = data_type,
			DataSource = datasource,
			DateFirstSeen = FORMAT('YYYYMMDD')fcra_date,
			Source = src,
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		CriminalOffense(
			OffenderKey = offender_key,
			CaseNumber = case_num,
			CourtDescription = case_court,
			CaseDate = case_date,
			CaseTypeDescription = case_type_desc,
			CountyOfSource = county_of_origin,
			DepartmentOfLawEnforcementNumber = dle_num,
			FederalBureauOfInvestigationsNumber = fbi_num,
			InmateNumber = doc_num,
			StateIdentificationNumberAssigned = id_num,
			OffenseScore = offense_score,
			FcraDate = fcra_date,
			FcraDateType = fcra_date_type,
			ConvictionFlag = fcra_conviction_flag,
			TrafficFlag = fcra_traffic_flag,
			ConvictionOverrideDate = conviction_override_date,
			ConvictionOverrideDateType = conviction_override_date_type,
			DateFirstSeen = FORMAT('YYYYMMDD')fcra_date,
			Source = src,
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		CriminalDetails(
			OffenderKey = offender_key,
			DateFirstSeen = FORMAT('YYYYMMDD')fcra_date,
			Source = src,
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PersonOffenses(
			Subject = did,
			OffenderKey = offender_key,
			DateFirstSeen = FORMAT('YYYYMMDD')fcra_date,
			Source = src,
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PersonOffender(
			Subject = did,
			OffenderKey = offender_key,
			DateFirstSeen = FORMAT('YYYYMMDD')fcra_date,
			Source = src,
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),	
		PERMITS(DPMBitmap)),

	Dataset_Bankruptcy_Files__Key_Search(
		PersonBankruptcy(FILTER((UNSIGNED)did != 0 AND name_type = 'D'),
			TMSID = TMSID,
			Court_Code = Court_Code,
			Case_Number = Case_Number,
			DID = did,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMMDD')date_last_seen, // Contains information for ASOF
			Subject = did,
			Source = 'BA',
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported),
		Bankruptcy(FILTER(name_type = 'D'),
			TMSID = TMSID,
			Court_Code = Court_Code,
			CourtCode = Court_Code,
			Case_Number = Case_Number,
			CaseNumber = Case_Number,
			DID = did,	
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMMDD')date_last_seen, // Contains information for ASOF
			OriginalCaseNumber = orig_case_number,
			SourceDescription = srcdesc,
			OriginalChapter = chapter,
			FilingType = filing_type,
			BusinessFlag = business_flag,
			CorporateFlag = corp_flag,
			DischargedDate = discharged,
			Disposition = disposition,
			DebtorType = debtor_type,
			DebtorSequence = debtor_seq,
			DispositionType = disptype,
			DispositionReason = dispreason,
			DispositionTypeDescription = disptypedesc,
			NameType = name_type,
			ScreenDescription = screendesc,
			DecodedDescription = dcodedesc,
			DateFiled = date_filed,
			RecordType = record_type,
			//DateVendorFirstReported = date_vendor_first_reported,
			//DateVendorLastReported = date_vendor_last_reported,
			CaseID = caseid,
			DefendantID = defendantid,
			LastStatusUpdate = statusdate,
			Source = 'BA',
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),
		
 	Dataset_Bankruptcy_Files__Linkids_Key_Search(
		Bankruptcy(FILTER(name_type = 'D'),
			TMSID = TMSID,
			Court_Code = Court_Code,
			CourtCode = Court_Code,
			Case_Number = Case_Number,
			CaseNumber = Case_Number,
			DID = did,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMMDD')date_last_seen, // Contains information for ASOF
			OriginalCaseNumber = orig_case_number,
			SourceDescription = srcdesc,
			OriginalChapter = chapter,
			FilingType = filing_type,
			BusinessFlag = business_flag,
			CorporateFlag = corp_flag,
			DischargedDate = discharged,
			Disposition = disposition,
			DebtorType = debtor_type,
			DebtorSequence = debtor_seq,
			DispositionType = disptype,
			DispositionReason = dispreason,
			DispositionTypeDescription = disptypedesc,
			NameType = name_type,
			ScreenDescription = screendesc,
			DecodedDescription = dcodedesc,
			DateFiled = date_filed,
			RecordType = record_type,
			//DateVendorFirstReported = date_vendor_first_reported,
			//DateVendorLastReported = date_vendor_last_reported,
			CaseID = caseid,
			DefendantID = defendantid,
			LastStatusUpdate = statusdate,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		SeleBankruptcy(
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			TMSID = TMSID,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMMDD')date_last_seen, // Contains information for ASOF
			DID = did,
			Court_Code = Court_Code,
			Case_Number = Case_Number,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),	
		PERMITS(DPMBitmap)),
			
	Dataset_BIPV2__Key_BH_Linking_kfetch2(
		BusinessUlt(
			UID=UltID,
			UltSegment = ult_seg,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01','YYYY0101')dt_last_seen,
			HeaderHitFlag = TRUE,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		BusinessOrg(
			UltID = ultid,   
			OrgID = orgid,
			NodesTotal = nodes_total,
			OrgSegment = org_seg,
			SourceGroupID = vl_id,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01','YYYY0101')dt_last_seen,
			HeaderHitFlag = TRUE,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
    BusinessSeleOverflow(
      UltID = ultid,   
      OrgID = orgid,    
      SeleID = seleid,
      EBRNumber = ebr_file_number,
      // DateVendorFirstReported = dt_vendor_first_reported,
      // DateVendorLastReported = dt_vendor_last_reported,
      DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
      DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01','YYYY0101')dt_last_seen,
      HeaderHitFlag = TRUE,
      Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),      
		BusinessSele(
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid,
			SeleGold = sele_gold,
			IsSeleLevel = is_sele_level,
			IsOrgLevel = is_org_level,
			IsUltLevel = is_ult_level,
			SeleSegment = sele_seg,
			IsCorporation = iscorp,
			Name = company_name,
			NameType = company_name_type_derived,
			NameStatus = company_name_status_derived,
			CorporationLegalName = corp_legal_name,
			DoingBusinessAs = dba_name,
			Ticker = company_ticker,
			TickerExchange = company_ticker_exchange,
			URL = company_url,
			BusinessType = cnp_btype,
			CompanyStatus = company_status_derived,
			OrganizationStructure = company_org_structure_derived,
			EBRNumber = ebr_file_number,
			SICCode = company_sic_code1,
			SICCodeOrder = 1,
			NAICSCode = company_naics_code1,
			NAICSCodeOrder = 1,
			//Copied from prox
			// StoreNumber = cnp_store_number,
			// ActiveDunsNumber = active_duns_number,
			// HistDunsNumber = hist_duns_number,
			// DeletedKey = deleted_key,
			// DUNSNumber = duns_number,
			//dates
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01','YYYY0101')dt_last_seen,
			HeaderHitFlag = TRUE,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		BusinessSele(FILTER((UNSIGNED)company_sic_code2 > 0 OR (UNSIGNED)company_naics_code2 > 0), // Pulling SIC and NAICS Codes 2 through 5 if populated		
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid,
			SICCode = company_sic_code2,
			SICCodeOrder = 2,
			NAICSCode = company_naics_code2,
			NAICSCodeOrder = 2,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01','YYYY0101')dt_last_seen,
			HeaderHitFlag = TRUE,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		BusinessSele(FILTER((UNSIGNED)company_sic_code3 > 0 OR (UNSIGNED)company_naics_code3 > 0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid,
			SICCode = company_sic_code3,
			SICCodeOrder = 3,
			NAICSCode = company_naics_code3,
			NAICSCodeOrder = 3,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01','YYYY0101')dt_last_seen,
			HeaderHitFlag = TRUE,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		BusinessSele(FILTER((UNSIGNED)company_sic_code4 > 0 OR (UNSIGNED)company_naics_code4 > 0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid,
			SICCode = company_sic_code4,
			SICCodeOrder = 4,
			NAICSCode = company_naics_code4,
			NAICSCodeOrder = 4,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01','YYYY0101')dt_last_seen,
			HeaderHitFlag = TRUE,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		BusinessSele(FILTER((UNSIGNED)company_sic_code5 > 0 OR (UNSIGNED)company_naics_code5 > 0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid,
			SICCode = company_sic_code5,
			SICCodeOrder = 5,
			NAICSCode = company_naics_code5,
			NAICSCodeOrder = 5,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01','YYYY0101')dt_last_seen,
			HeaderHitFlag = TRUE,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		BusinessProx(FILTER((UNSIGNED)proxid<>0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			ParentProxID = parent_proxid,
			SeleProxID = sele_proxid,
			OrgProxID = org_proxid,
			UltProxID = ultimate_proxid,
			LevelsFromTop = levels_from_top,
			NodesBelow = nodes_below,
			ProxSegment = prox_seg,
			StoreNumber = cnp_store_number,
			ActiveDunsNumber = active_duns_number,
			HistDunsNumber = hist_duns_number,
			DeletedKey = deleted_key,
			DUNSNumber = duns_number,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01','YYYY0101')dt_last_seen,
			HeaderHitFlag = TRUE,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		BusinessPow(
			UltID = ultid,   
			OrgID = orgid,
			SeleID = seleid,
			ProxID = proxid,
			PowID = powid,
			PowSegment = pow_seg,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01','YYYY0101')dt_last_seen,
			HeaderHitFlag = TRUE,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		//ProxAddress below is not a duplicate, this key has 5 SIC & 5 NAICS code fields each ProdAddress statement below is for a different pair.	
		ProxAddress(FILTER((STRING28)prim_name_derived != '' AND (UNSIGNED3)zip != 0  AND (UNSIGNED)proxid<>0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			PrimaryRange = prim_range_derived,
			Predirectional = predir,
			PrimaryName = prim_name_derived,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			SecondaryRange = sec_range,
			UnitDesignation = unit_desig,
			PostalCity = p_city_name,
			VanityCity = v_city_name,
			State = st,
			ZIP4 = zip4,
			ZIP5 = zip,
			CompanyAddressTypeRaw = company_address_type_raw,
			CompanyAddressTypeDerived = company_address_type_derived,
			MetropolitanStatisticalArea = msa,
			AddressTypeDerived = address_type_derived,		
			SICCode = company_sic_code1,
			NAICSCode = company_naics_code1,
			DateFirstSeenCompanyAddress = FORMAT('YYYYMMDD')dt_first_seen_company_address,
			DateLastSeenCompanyAddress = dt_last_seen_company_address,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01','YYYY0101')dt_last_seen,
			RecType = rec_type,
			HeaderHitFlag = TRUE,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported),
		ProxAddress(FILTER((STRING28)prim_name_derived != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)proxid<>0 AND((UNSIGNED)company_sic_code2 > 0 OR (UNSIGNED)company_naics_code2 > 0)),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			PrimaryRange = prim_range_derived,
			Predirectional = predir,
			PrimaryName = prim_name_derived,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			SICCode = company_sic_code2,
			NAICSCode = company_naics_code2,
			DateFirstSeenCompanyAddress = FORMAT('YYYYMMDD')dt_first_seen_company_address,
			DateLastSeenCompanyAddress = dt_last_seen_company_address,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01','YYYY0101')dt_last_seen,
			HeaderHitFlag = TRUE,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported),
		ProxAddress(FILTER((STRING28)prim_name_derived != '' AND (UNSIGNED3)zip != 0  AND (UNSIGNED)proxid<>0 AND((UNSIGNED)company_sic_code3 > 0 OR (UNSIGNED)company_naics_code3 > 0)),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			PrimaryRange = prim_range_derived,
			Predirectional = predir,
			PrimaryName = prim_name_derived,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			SICCode = company_sic_code3,
			NAICSCode = company_naics_code3,
			DateFirstSeenCompanyAddress = FORMAT('YYYYMMDD')dt_first_seen_company_address,
			DateLastSeenCompanyAddress = dt_last_seen_company_address,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01','YYYY0101')dt_last_seen,
			HeaderHitFlag = TRUE,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
			// DateVendorFirstReported = dt_vendor_first_reported,
			// DateVendorLastReported = dt_vendor_last_reported),
		ProxAddress(FILTER((STRING28)prim_name_derived != '' AND (UNSIGNED3)zip != 0  AND (UNSIGNED)proxid<>0 AND((UNSIGNED)company_sic_code4 > 0 OR (UNSIGNED)company_naics_code4 > 0)),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			PrimaryRange = prim_range_derived,
			Predirectional = predir,
			PrimaryName = prim_name_derived,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			SICCode = company_sic_code4,
			NAICSCode = company_naics_code4,
			DateFirstSeenCompanyAddress = FORMAT('YYYYMMDD')dt_first_seen_company_address,
			DateLastSeenCompanyAddress = dt_last_seen_company_address,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01','YYYY0101')dt_last_seen,
			HeaderHitFlag = TRUE,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),		
		ProxAddress(FILTER((STRING28)prim_name_derived != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)proxid<>0 AND((UNSIGNED)company_sic_code5 > 0 OR (UNSIGNED)company_naics_code5 > 0)),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			PrimaryRange = prim_range_derived,
			Predirectional = predir,
			PrimaryName = prim_name_derived,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			SICCode = company_sic_code5,
			NAICSCode = company_naics_code5,
			DateFirstSeenCompanyAddress = FORMAT('YYYYMMDD')dt_first_seen_company_address,
			DateLastSeenCompanyAddress = dt_last_seen_company_address,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01','YYYY0101')dt_last_seen,
			HeaderHitFlag = TRUE,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
			// DateVendorFirstReported = dt_vendor_first_reported,
			// DateVendorLastReported = dt_vendor_last_reported),
	SeleAddress(FILTER((STRING28)prim_name_derived != '' AND (UNSIGNED3)zip != 0  AND (UNSIGNED)seleid<>0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			PrimaryRange = prim_range_derived,
			Predirectional = predir,
			PrimaryName = prim_name_derived,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			SecondaryRange = sec_range,
			UnitDesignation = unit_desig,
			PostalCity = p_city_name,
			VanityCity = v_city_name,
			State = st,
			ZIP4 = zip4,
			ZIP5 = zip,
			CompanyAddressTypeRaw = company_address_type_raw,
			CompanyAddressTypeDerived = company_address_type_derived,
			MetropolitanStatisticalArea = msa,
			AddressTypeDerived = address_type_derived,		
			SICCode = company_sic_code1,
			NAICSCode = company_naics_code1,
			DateFirstSeenCompanyAddress = FORMAT('YYYYMMDD')dt_first_seen_company_address,
			DateLastSeenCompanyAddress = dt_last_seen_company_address,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01','YYYY0101')dt_last_seen,
			RecType = rec_type,
			HeaderHitFlag = TRUE,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
			// DateVendorFirstReported = dt_vendor_first_reported,
			// DateVendorLastReported = dt_vendor_last_reported),
		SeleAddress(FILTER((STRING28)prim_name_derived != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)seleid<>0 AND((UNSIGNED)company_sic_code2 > 0 OR (UNSIGNED)company_naics_code2 > 0)),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			PrimaryRange = prim_range_derived,
			Predirectional = predir,
			PrimaryName = prim_name_derived,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			SICCode = company_sic_code2,
			NAICSCode = company_naics_code2,
			DateFirstSeenCompanyAddress = FORMAT('YYYYMMDD')dt_first_seen_company_address,
			DateLastSeenCompanyAddress = dt_last_seen_company_address,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01','YYYY0101')dt_last_seen,
			HeaderHitFlag = TRUE,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
			// DateVendorFirstReported = dt_vendor_first_reported,
			// DateVendorLastReported = dt_vendor_last_reported),
		SeleAddress(FILTER((STRING28)prim_name_derived != '' AND (UNSIGNED3)zip != 0  AND (UNSIGNED)seleid<>0 AND((UNSIGNED)company_sic_code3 > 0 OR (UNSIGNED)company_naics_code3 > 0)),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			PrimaryRange = prim_range_derived,
			Predirectional = predir,
			PrimaryName = prim_name_derived,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			SICCode = company_sic_code3,
			NAICSCode = company_naics_code3,
			DateFirstSeenCompanyAddress = dt_first_seen_company_address,
			DateLastSeenCompanyAddress = dt_last_seen_company_address,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01','YYYY0101')dt_last_seen,
			HeaderHitFlag = TRUE,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
			// DateVendorFirstReported = dt_vendor_first_reported,
			// DateVendorLastReported = dt_vendor_last_reported),
		SeleAddress(FILTER((STRING28)prim_name_derived != '' AND (UNSIGNED3)zip != 0  AND (UNSIGNED)seleid<>0 AND((UNSIGNED)company_sic_code4 > 0 OR (UNSIGNED)company_naics_code4 > 0)),
	
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			PrimaryRange = prim_range_derived,
			Predirectional = predir,
			PrimaryName = prim_name_derived,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			SICCode = company_sic_code4,
			NAICSCode = company_naics_code4,
			DateFirstSeenCompanyAddress = dt_first_seen_company_address,
			DateLastSeenCompanyAddress = dt_last_seen_company_address,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01','YYYY0101')dt_last_seen,
			HeaderHitFlag = TRUE,
			Source = source,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),		
		SeleAddress(FILTER((STRING28)prim_name_derived != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)seleid<>0 AND((UNSIGNED)company_sic_code5 > 0 OR (UNSIGNED)company_naics_code5 > 0)),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			PrimaryRange = prim_range_derived,
			Predirectional = predir,
			PrimaryName = prim_name_derived,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			SICCode = company_sic_code5,
			NAICSCode = company_naics_code5,
			DateFirstSeenCompanyAddress = dt_first_seen_company_address,
			DateLastSeenCompanyAddress = dt_last_seen_company_address,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01','YYYY0101')dt_last_seen,
			HeaderHitFlag = TRUE,
			Source = source,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),				
		// ProxPhoneNumber below is not a duplicate, this key has 5 SIC & 5 NAICS code fields each ProdPhone statement below is for a different pair.	
		ProxPhoneNumber(FILTER((UNSIGNED)company_phone != 0 AND (UNSIGNED)proxid<>0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			PhoneNumber = company_phone,
			SICCode = company_sic_code1,
			NAICSCode = company_naics_code1,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01','YYYY0101')dt_last_seen,
			HeaderHitFlag = TRUE,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
			// DateVendorFirstReported = dt_vendor_first_reported,
			// DateVendorLastReported = dt_vendor_last_reported),
		ProxPhoneNumber(FILTER((UNSIGNED)company_phone != 0 AND (UNSIGNED)proxid<>0 AND ((UNSIGNED)company_sic_code2 > 0 OR (UNSIGNED)company_naics_code2 > 0 )),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			PhoneNumber = company_phone,
			SICCode = company_sic_code2,
			NAICSCode = company_naics_code2,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01','YYYY0101')dt_last_seen,
			HeaderHitFlag = TRUE,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
			// DateVendorFirstReported = dt_vendor_first_reported,
			// DateVendorLastReported = dt_vendor_last_reported),
		ProxPhoneNumber(FILTER((UNSIGNED)company_phone != 0 AND (UNSIGNED)proxid<>0 AND ((UNSIGNED)company_sic_code3 > 0 OR (UNSIGNED)company_naics_code3 > 0)),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			PhoneNumber = company_phone,
			SICCode = company_sic_code3,
			NAICSCode = company_naics_code3,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01','YYYY0101')dt_last_seen,
			HeaderHitFlag = TRUE,
			Source = source,
			// DateVendorFirstReported = dt_vendor_first_reported,
			// DateVendorLastReported = dt_vendor_last_reported,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),	
		ProxPhoneNumber(FILTER((UNSIGNED)company_phone != 0 AND (UNSIGNED)proxid<>0 AND ((UNSIGNED)company_sic_code4 > 0 OR (UNSIGNED)company_naics_code4 > 0)),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			PhoneNumber = company_phone,
			SICCode = company_sic_code4,
			NAICSCode = company_naics_code4,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01','YYYY0101')dt_last_seen,
			HeaderHitFlag = TRUE,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
			// DateVendorFirstReported = dt_vendor_first_reported,
			// DateVendorLastReported = dt_vendor_last_reported),
	ProxPhoneNumber(FILTER((UNSIGNED)company_phone != 0 AND (UNSIGNED)proxid<>0 AND ((UNSIGNED)company_sic_code5 > 0 OR (UNSIGNED)company_naics_code5 > 0)),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			PhoneNumber = company_phone,
			SICCode = company_sic_code5,
			NAICSCode = company_naics_code5,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01','YYYY0101')dt_last_seen,
			HeaderHitFlag = TRUE,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
			// DateVendorFirstReported = dt_vendor_first_reported,
			// DateVendorLastReported = dt_vendor_last_reported),
	SelePhoneNumber(FILTER((UNSIGNED)company_phone != 0 AND (UNSIGNED)seleid<>0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			PhoneNumber = company_phone,
			SICCode = company_sic_code1,
			NAICSCode = company_naics_code1,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01','YYYY0101')dt_last_seen,
			HeaderHitFlag = TRUE,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
			// DateVendorFirstReported = dt_vendor_first_reported,
			// DateVendorLastReported = dt_vendor_last_reported),
	SelePhoneNumber(FILTER((UNSIGNED)company_phone != 0 AND (UNSIGNED)seleid<>0 AND ((UNSIGNED)company_sic_code2 > 0 OR (UNSIGNED)company_naics_code2 > 0 )),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			PhoneNumber = company_phone,
			SICCode = company_sic_code2,
			NAICSCode = company_naics_code2,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01','YYYY0101')dt_last_seen,
			HeaderHitFlag = TRUE,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
			// DateVendorFirstReported = dt_vendor_first_reported,
			// DateVendorLastReported = dt_vendor_last_reported),
	SelePhoneNumber(FILTER((UNSIGNED)company_phone != 0 AND (UNSIGNED)seleid<>0 AND ((UNSIGNED)company_sic_code3 > 0 OR (UNSIGNED)company_naics_code3 > 0)),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			PhoneNumber = company_phone,
			SICCode = company_sic_code3,
			NAICSCode = company_naics_code3,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01','YYYY0101')dt_last_seen,
			HeaderHitFlag = TRUE,
			Source = source,
			// DateVendorFirstReported = dt_vendor_first_reported,
			// DateVendorLastReported = dt_vendor_last_reported,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),	
		SelePhoneNumber(FILTER((UNSIGNED)company_phone != 0 AND (UNSIGNED)seleid<>0 AND ((UNSIGNED)company_sic_code4 > 0 OR (UNSIGNED)company_naics_code4 > 0)),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			PhoneNumber = company_phone,
			SICCode = company_sic_code4,
			NAICSCode = company_naics_code4,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01','YYYY0101')dt_last_seen,
			HeaderHitFlag = TRUE,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
			// DateVendorFirstReported = dt_vendor_first_reported,
			// DateVendorLastReported = dt_vendor_last_reported),
	SelePhoneNumber(FILTER((UNSIGNED)company_phone != 0 AND (UNSIGNED)seleid<>0 AND ((UNSIGNED)company_sic_code5 > 0 OR (UNSIGNED)company_naics_code5 > 0)),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			PhoneNumber = company_phone,
			SICCode = company_sic_code5,
			NAICSCode = company_naics_code5,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01','YYYY0101')dt_last_seen,
			HeaderHitFlag = TRUE,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),	
		TIN(FILTER((UNSIGNED)company_fein	!= 0),
			UID = company_fein,
			// DateVendorFirstReported = dt_vendor_first_reported,
			// DateVendorLastReported = dt_vendor_last_reported,
			HeaderHitFlag = TRUE,		//we need TIN mapped to INQ by FEIN on roxie in order to popualate TINInquiry, we need this here to tell us when we found a BH TIN vs Inq TIN
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01','YYYY0101')dt_last_seen,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		SeleTIN(FILTER((UNSIGNED)ultid<>0 AND (UNSIGNED)orgid<>0 AND (UNSIGNED)seleid<>0 AND (UNSIGNED)company_fein	!= 0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			TaxID = company_fein,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01','YYYY0101')dt_last_seen,
			// DateVendorFirstReported = dt_vendor_first_reported,
			// DateVendorLastReported = dt_vendor_last_reported,
			HeaderHitFlag = TRUE,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),	
		TINAddress(FILTER((STRING28)prim_name_derived != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)company_fein	!= 0),
			TaxID = company_fein,	
			PrimaryRange = prim_range_derived,
			Predirectional = predir,
			PrimaryName = prim_name_derived,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			// DateVendorFirstReported = dt_vendor_first_reported,
			// DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01','YYYY0101')dt_last_seen,
			HeaderHitFlag = TRUE,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),	
		TINPhoneNumber(FILTER((UNSIGNED)company_phone != 0 AND (UNSIGNED)company_fein	!= 0),
			TaxID = company_fein,
			PhoneNumber = company_phone,
			IsContactPhone = FALSE,
			// DateVendorFirstReported = dt_vendor_first_reported,
			// DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01','YYYY0101')dt_last_seen,
			HeaderHitFlag = TRUE,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),	
		TINPhoneNumber(FILTER((UNSIGNED)contact_phone != 0 AND (UNSIGNED)company_fein	!= 0),
			TaxID = company_fein,
			PhoneNumber = contact_phone,
			IsContactPhone = TRUE,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01','YYYY0101')dt_last_seen,
			HeaderHitFlag = TRUE,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),	
		PERMITS(DPMBitmap)),

	Dataset_FAA__Key_Aircraft_IDs(
		Aircraft(
			NNumber = n_number,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMMDD')date_last_seen, // Contains information for ASOF
			SerialNumber = serial_number,
			ManufacturerModelCode = mfr_mdl_code,
			EngineManufacturerModelCode = eng_mfr_mdl,
			YearManufactured = year_mfr,
			LastActionDate = last_action_date,
			Type = type_aircraft,
			TypeEngine = type_engine,
			StatusCode = status_code,
			TransponderCode = mode_s_code,					
			FractionalOwner = fract_owner,
			ManufacturerName = aircraft_mfr_name,
			ModelName = model_name,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		AircraftOwner(FILTER((UNSIGNED)did_out != 0),
			NNumber = n_number,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMMDD')date_last_seen, // Contains information for ASOF
			Owner = did_out,
			RegistrantType = type_registrant,
			CertificateIssueDate = FORMAT('YYYYMMDD','YYYYMM01','YYYY0101')cert_issue_date,
			Certification = certification,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),	
		PERMITS(DPMBitmap)),
		
	Dataset_FAA__key_aircraft_linkids(
		Aircraft(
			NNumber = n_number,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMMDD')date_last_seen, // Contains information for ASOF
			SerialNumber = serial_number,
			ManufacturerModelCode = mfr_mdl_code,
			EngineManufacturerModelCode = eng_mfr_mdl,
			YearManufactured = year_mfr,
			LastActionDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')last_action_date,
			Type = type_aircraft,
			TypeEngine = type_engine,
			StatusCode = status_code,
			TransponderCode = mode_s_code,					
			FractionalOwner = fract_owner,
			ManufacturerName = aircraft_mfr_name,
			ModelName = model_name,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),	
		SeleAircraft(FILTER((UNSIGNED)ultid<>0 AND (UNSIGNED)orgid<>0 AND (UNSIGNED)seleid<>0),
			UltID = ultid,
			OrgID = orgid,
			SeleID = seleid,
			NNumber = n_number,
			RegistrantType = type_registrant,
			FractionalOwner = fract_owner,
			CertificateIssueDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')cert_issue_date,
			Certification = certification,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')date_last_seen,
			Source = Src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),

	Dataset_VehicleV2__Key_Vehicle_Main_Key(
		Vehicle(FILTER((STRING20)vehicle_key <> ''),
			VehicleKey = vehicle_key,
			StateOfOrigin = state_origin,
			OriginalVin = orig_vin,
			OriginalYearMake = orig_year,
			OriginalMake = orig_make_code,
			OriginalMakeDescription = orig_make_desc,
			OriginalSeries = orig_series_code,
			OriginalSeriesDescription = orig_series_desc,
			OriginalModel = orig_model_code,
			OriginalModelDescription = orig_model_desc,
			OriginalBody = orig_body_code,
			OriginalBodyDescription = orig_body_desc,
			OriginalNetWeight = orig_net_weight,
			OriginalGrossWeight = orig_gross_weight,
			OriginalNumberAxles = orig_number_of_axles,
			OriginalVehicleUse = orig_vehicle_use_code,
			OriginalVehicleUseDescription = orig_vehicle_use_desc,
			OriginalVehicleType = orig_vehicle_type_code,
			OriginalVehicleTypeDescription = orig_vehicle_type_desc,
			OriginalMajorColor = orig_major_color_code,
			OriginalMajorColorDescription = orig_major_color_desc,
			OriginalMinorColor = orig_minor_color_code,
			OriginalMinorColorDescription = orig_minor_color_desc,
			VinaVin = vina_vin,
			VinaVinPattern = vina_vin_pattern_indicator,
			VinaBypassCode = vina_bypass_code,
			VinaVehicleType = vina_veh_type,
			VinaNCICMake = vina_ncic_make,
			VinaModelYearYY = vina_model_year_yy,
			VinaRestraint = vina_vp_restraint,
			VinaMakeName = vina_vp_abbrev_make_name,
			VinaYear = vina_vp_year,
			VinaVpSeries = vina_vp_series,
			VinaVpModel = vina_vp_model,
			VinaAirConditioning = vina_vp_air_conditioning,
			VinaPowerSteering = vina_vp_power_steering,
			VinaPowerBrakes = vina_vp_power_brakes,
			VinaPowerWindows = vina_vp_power_windows,
			VinaTiltWheel = vina_vp_tilt_wheel,
			VinaRoof = vina_vp_roof,
			VinaOptionalRoof1 = vina_vp_optional_roof1,
			VinaOptionalRoof2 = vina_vp_optional_roof2,
			VinaRadio = vina_vp_radio,
			VinaOptionalRadio1 = vina_vp_optional_radio1,
			VinaOptionalRadio2 = vina_vp_optional_radio2,
			VinaTransmission = vina_vp_transmission,
			VinaOptionalTransmission1 = vina_vp_optional_transmission1,
			VinaOptionalTransmission2 = vina_vp_optional_transmission2,
			VinaALB = vina_vp_anti_lock_brakes,
			VinaFrontWD = vina_vp_front_wheel_drive,
			VinaFourWD = vina_vp_four_wheel_drive,
			VinaSecuritySystem = vina_vp_security_system,
			VinaDRL = vina_vp_daytime_running_lights,
			VinaSeriesName = vina_vp_series_name,
			VinaModelYear = vina_model_year,
			VinaSeries = vina_series,
			VinaModel = vina_model,
			VinaBodyStyle = vina_body_style,
			VinaMakeDescription = vina_make_desc,
			VinaModelDescription = vina_model_desc,
			VinaSeriesDescription = vina_series_desc,
			VinaBodyStyleDescription = vina_body_style_desc,
			VinaCylinders = vina_number_of_cylinders,
			VinaEngineSize = vina_engine_size,
			VinaFuelCode = vina_fuel_code,
			VinaPrice = vina_price,
			BestMakeCode = best_make_code,
			BestSeriesCode = best_series_code,
			BestModelCode = best_model_code,
			BestBodyCode = best_body_code,
			BestModelYear = best_model_year,
			BestMajorColor = best_major_color_code,
			BestMinorColor = best_minor_color_code,
			BrandedTitleFlag = branded_title_flag,
			BrandCode1 = brand_code_1,
			BrandDate1 = cleaned_brand_date_1,
			BrandState1 = brand_state_1,
			BrandCode2 = brand_code_2,
			BrandDate2 = cleaned_brand_date_2,
			BrandSate2 = brand_state_2,
			BrandCode3 = brand_code_3,
			BrandDate3 = cleaned_brand_date_3,
			BrandSate3 = brand_state_3,
			BrandCode4 = brand_code_4,
			BrandDate4 = cleaned_brand_date_4,
			BrandSate4 = brand_state_4,
			BrandCode5 = brand_code_5,
			BrandDate5 = cleaned_brand_date_5,
			BrandSate5 = brand_state_5,
			TodFlag = tod_flag,
			ModelClassCode = model_class_code,
			ModelClass = model_class,
			MinDoorCount = min_door_count,
			SafetyType = safety_type,
			AirbagDriver = airbag_driver,
			AirbagFrontDriverSide = airbag_front_driver_side,
			AirbagFrontHeadCurtain = airbag_front_head_curtain,
			AirbagFrontPassanger = airbag_front_pass,
			AirbagFrontPassangerSide = airbag_front_pass_side,
			Airbags = airbags,
			Source = source_code,
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')), 
		PERMITS(DPMBitmap)),

	Dataset_VehicleV2__Key_Vehicle_Party_Key(
		PersonVehicle(FILTER((STRING20)vehicle_key <> '' AND (UNSIGNED)append_did != 0),
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')date_last_seen, // Contains information for ASOF
			Subject = append_did,
			VehicleKey = vehicle_key,
			RegistrationFirstDate = reg_first_date,
			RegistrationEarliestEffectiveDate = reg_earliest_effective_date,
			RegistrationLatestEffectiveDate = reg_latest_effective_date,
			RegistrationLatestExpirationeDate = reg_latest_expiration_date,
			RegistrationRecordCount = reg_rollup_count,
			RegistrationDecalNumber = reg_decal_number,
			RegistratoinDecalYear = reg_decal_year,
			RegistrationStatusCode = reg_status_code,
			RegistrationStatusDescription = reg_status_desc,
			RegistrationTrueLicensePlate = reg_true_license_plate,
			RegistrationLicensePlate = reg_license_plate,
			RegistrationLicenseState = reg_license_state,
			RegistrationLicensePlateTypeCode = reg_license_plate_type_code,
			RegistrationLicensePlateTypeDescription = reg_license_plate_type_desc,
			RegistrationPreviousLicenseState = reg_previous_license_state,
			RegistrationPreviousLicensePlate = reg_previous_license_plate,
			TitleNumber = ttl_number,
			TitleEarliestIssueDate = ttl_earliest_issue_date,
			TitleLatestIssueDate = ttl_latest_issue_date,
			TitlePreviousIssueDate = ttl_previous_issue_date,
			TitleRecordCount = ttl_rollup_count,
			TitleStatusCode = ttl_status_code,
			TitleStatusDescription = ttl_status_desc,
			TitleOdometerMileage = ttl_odometer_mileage,
			TitleOdometerStatusCode = ttl_odometer_status_code,
			TitleOdometerStatusDescription = ttl_odometer_status_desc,
			TitleOdometerDate = ttl_odometer_date,
			SequenceKey = sequence_key,
			History = history,
			HistorySource = TRUE,
			Source = source_code,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),		
		SeleVehicle(FILTER((STRING20)vehicle_key <> '' AND (UNSIGNED)ultid<>0 AND (UNSIGNED)orgid<>0 AND (UNSIGNED)seleid<>0),
			UltID = ultid,
			OrgID = orgid,
			SeleID = seleid,
			VehicleKey = vehicle_key,
			SequenceKey = sequence_key,
			PartyType = orig_party_type,
			PartyNameType = orig_name_type,
			RegistrationFirstDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')reg_first_date,
			RegistrationEarliestEffectiveDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')reg_earliest_effective_date,
			RegistrationLatestEffectiveDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')reg_latest_effective_date,
			RegistrationLatestExpirationeDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')reg_latest_expiration_date,
			RegistrationRecordCount = reg_rollup_count,
			RegistrationDecalNumber = reg_decal_number,
			RegistratoinDecalYear = reg_decal_year,
			RegistrationStatusCode = reg_status_code,
			RegistrationStatusDescription = reg_status_desc,
			RegistrationTrueLicensePlate = reg_true_license_plate,
			RegistrationLicensePlate = reg_license_plate,
			RegistrationLicenseState = reg_license_state,
			RegistrationLicensePlateTypeCode = reg_license_plate_type_code,
			RegistrationLicensePlateTypeDescription = reg_license_plate_type_desc,
			RegistrationPreviousLicenseState = reg_previous_license_state,
			RegistrationPreviousLicensePlate = reg_previous_license_plate,
			TitleNumber = ttl_number,
			TitleEarliestIssueDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')ttl_earliest_issue_date,
			TitleLatestIssueDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')ttl_latest_issue_date,
			TitlePreviousIssueDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')ttl_previous_issue_date,
			TitleRecordCount = ttl_rollup_count,
			TitleStatusCode = ttl_status_code,
			TitleStatusDescription = ttl_status_desc,
			TitleOdometerMileage = ttl_odometer_mileage,
			TitleOdometerStatusCode = ttl_odometer_status_code,
			TitleOdometerStatusDescription = ttl_odometer_status_desc,
			TitleOdometerDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')ttl_odometer_date,
			History = history,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen, 
			DateLastSeen = FORMAT('YYYYMM01')date_last_seen,
			//DateVendorFirstReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')date_vendor_first_reported,
			//DateVendorLastReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')date_vendor_last_reported,
			Source = source_code,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),

	Dataset_VehicleV2__Key_Vehicle_LinkID_Key(
		SeleVehicle(FILTER((STRING20)vehicle_key <> '' AND (UNSIGNED)ultid<>0 AND (UNSIGNED)orgid<>0 AND (UNSIGNED)seleid<>0),
			UltID = ultid,
			OrgID = orgid,
			SeleID = seleid,
			VehicleKey = vehicle_key,
			SequenceKey = sequence_key,
			PartyType = orig_party_type,
			PartyNameType = orig_name_type,
			RegistrationFirstDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')reg_first_date,
			RegistrationEarliestEffectiveDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')reg_earliest_effective_date,
			RegistrationLatestEffectiveDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')reg_latest_effective_date,
			RegistrationLatestExpirationeDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')reg_latest_expiration_date,
			RegistrationRecordCount = reg_rollup_count,
			RegistrationDecalNumber = reg_decal_number,
			RegistratoinDecalYear = reg_decal_year,
			RegistrationStatusCode = reg_status_code,
			RegistrationStatusDescription = reg_status_desc,
			RegistrationTrueLicensePlate = reg_true_license_plate,
			RegistrationLicensePlate = reg_license_plate,
			RegistrationLicenseState = reg_license_state,
			RegistrationLicensePlateTypeCode = reg_license_plate_type_code,
			RegistrationLicensePlateTypeDescription = reg_license_plate_type_desc,
			RegistrationPreviousLicenseState = reg_previous_license_state,
			RegistrationPreviousLicensePlate = reg_previous_license_plate,
			TitleNumber = ttl_number,
			TitleEarliestIssueDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')ttl_earliest_issue_date,
			TitleLatestIssueDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')ttl_latest_issue_date,
			TitlePreviousIssueDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')ttl_previous_issue_date,
			TitleRecordCount = ttl_rollup_count,
			TitleStatusCode = ttl_status_code,
			TitleStatusDescription = ttl_status_desc,
			TitleOdometerMileage = ttl_odometer_mileage,
			TitleOdometerStatusCode = ttl_odometer_status_code,
			TitleOdometerStatusDescription = ttl_odometer_status_desc,
			TitleOdometerDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')ttl_odometer_date,
			History = history,
			DateFirstSeen =  FORMAT('YYYYMMDD')date_first_seen, 
			DateLastSeen = FORMAT('YYYYMM01')date_last_seen,
			//DateVendorFirstReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')date_vendor_first_reported,
			//DateVendorLastReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')date_vendor_last_reported,
			Source = source_code,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),

	Dataset_Watercraft__Key_Watercraft_SID(
		Watercraft(
			WatercraftKey = watercraft_key,
			SequenceKey = sequence_key,
			OriginState = state_origin,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01')date_last_seen, // Contains information for ASOF
			//DateVendorFirstReported = date_vendor_first_reported,
			//DateVendorLastReported = date_vendor_last_reported,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		WatercraftOwner(FILTER((UNSIGNED)did > 0),
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01')date_last_seen, // Contains information for ASOF
			WatercraftKey = watercraft_key,
			Owner = did,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported)
		PERMITS(DPMBitmap)),

	Dataset_Watercraft__Watercraft__Key_LinkIds(		
		Watercraft(
			WatercraftKey = watercraft_key,
			SequenceKey = sequence_key,
			OriginState = state_origin,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMMDD', 'YYYYMM01')date_last_seen, // Contains information for ASOF
			//DateVendorFirstReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')date_vendor_first_reported,
			//DateVendorLastReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')date_vendor_last_reported,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),	
		SeleWatercraft(FILTER((UNSIGNED)ultid<>0 AND (UNSIGNED)orgid<>0 AND (UNSIGNED)seleid<>0),
			UltID = ultid,
			OrgID = orgid,
			SeleID = seleid,
			WatercraftKey = watercraft_key,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD', 'YYYYMM01')date_last_seen,
			//DateVendorFirstReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')date_vendor_first_reported,
			//DateVendorLastReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')date_vendor_last_reported,		
			Source = Src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),

	Dataset_ADVO__Key_Addr1_History(
		Address(FILTER((STRING28)prim_name != '' AND (UNSIGNED3)zip != 0),
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMMDD')date_last_seen, // Contains information for ASOF
			ADVODateFirstSeen = FORMAT('YYYYMMDD')date_first_seen,
			ADVODateLastSeen = FORMAT('YYYYMMDD')date_last_seen,
			ADVODateVendorFirstReported = date_vendor_first_reported,
			ADVODateVendorLastReported = date_vendor_last_reported,
			//DateVendorFirstReported = date_vendor_first_reported,
			//DateVendorLastReported = date_vendor_last_reported,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			UnitDesignation = unit_desig,
			SecondaryRange = sec_range,
			PostalCity = p_city_name,
			VanityCity = v_city_name,
			State = st,
			ZIP5 = zip,
			ZIP4 = zip4,
			CarrierRouteNumber = cart,
			CarrierRouteSortationAtZIP = cr_sort_sz,
			LineOfTravel = lot,
			LineOfTravelOrder = lot_order,
			DeliveryPointBarcode = dbpc,
			DeliveryPointBarcodeCheckDigit = chk_digit,
			TypeCode = rec_type,
			AddressTypeCode = address_type,
			County = county,
			Latitude = geo_lat,
			Longitude = geo_long,
			MetropolitanStatisticalArea = msa,
			GeoBlock = geo_blk,
			GeoMatch = geo_match,
			ACECleanerErrorCode = err_stat,
			VacancyIndicator = address_vacancy_indicator,
			ThrowBackIndicator = throw_back_indicator,
			SeasonalDeliveryIndicator = seasonal_delivery_indicator,
			SeasonalStartSuppressionDate = seasonal_start_suppression_date,
			SeasonalEndSuppressionDate = seasonal_end_suppression_date,
			DoNotDeliverIndicator = dnd_indicator,
			CollegeIndicator = college_indicator,
			CollegeStartSuppressionDate = college_start_suppression_date,
			CollegeEndSuppressionDate = college_end_suppression_date,
			StyleCode = address_style_flag,
			SimplifyCount = simplify_address_count,
			DropIndicator = drop_indicator,
			ResidentialOrBusinessIndicator = residential_or_business_ind,
			OnlyWayToGetMailIndicator = owgm_indicator,
			RecordTypeCode = record_type_code,
			MixedUsageCode = mixed_address_usage,
			VacationBeginDate = vac_begdt,
			VacationEndDate = vac_enddt,
			NumberOfCurrentVacationMonths = months_vac_curr,
			MaxVacationMonths = months_vac_max,
			VacationPeriodsCount = vac_count,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),

	Dataset_DMA__Key_DNM_Name_Address( 
		Address(FILTER((STRING28)prim_name != '' AND (UNSIGNED3)zip != 0),
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			UnitDesignation = unit_desig,
			SecondaryRange = sec_range,
			PostalCity = p_city_name,
			VanityCity = v_city_name,
			DoNotMailIndicator = 'Y',
			State = st,
			ZIP5 = zip,
			ZIP4 = zip4,
			Source = src,
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date), // This file doesn't contain a Source code
		PERMITS(DPMBitmap)), 

	// These fraudpoint3 keys might be a gateway.			
	Dataset_Fraudpoint3__Key_Address(
		Address(FILTER((STRING28)prim_name != '' AND (UNSIGNED3)zip != 0),
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			UnitDesignation = unit_desig,
			SecondaryRange = sec_range,
			PostalCity = p_city_name,
			VanityCity = v_city_name,
			State = st,
			ZIP5 = zip,
			ZIP4 = zip4,
			Longitude = geo_long,
			Latitude = geo_lat,
			GeoBlock = geo_blk,
			FDNIndicator = TRUE,
			Source = src,
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PersonAddress(FILTER((STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)appended_lexid != 0),
			Subject = appended_lexid,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			FDNIndicator = TRUE,
			Source = src,
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),

	Dataset_Header__Key_Addr_Hist(
		PersonAddress(FILTER((STRING28)prim_name != '' AND (UNSIGNED)zip != 0 AND (UNSIGNED)s_did != 0),
			Subject = s_did,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = suffix,
			Postdirectional = postdir,
			SecondaryRange = sec_range,
			UnitDesignation = unit_desig,
			PostalCity = v_city_name,
			State = st,
			ZIP5 = zip,
			ZIP4 = zip4,
			StateCode = StateCode,
			CountyCode = county,
			Latitude = geo_lat,
			Longitude = geo_long,
			GeoBlk = geo_blk,
			GeoMmatch = geo_match,
			GeoLinkID = Geo_Link,
			AddressRank = address_history_seq,
			InsuranceSourceCount = Insurance_Source_Count,
			AddressType = AddressType,
			AddressStatus = err_stat,
			PropertySourceCount = Property_Source_Count,
			UtilitySourceCount = Utility_Source_Count,
			VehicleSourceCount = Vehicle_Source_Count,
			DLSourceCount = DL_Source_Count,
			VoterSourceCount = Voter_Source_Count,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen,
			DateLastSeen = FORMAT('YYYYMM01','YYYY0101')date_last_seen,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		Address(FILTER((STRING28)prim_name != '' AND (UNSIGNED)zip != 0),   
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = suffix,
			Postdirectional = postdir,
			SecondaryRange = sec_range,
			ZIP5 = zip,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen,
			DateLastSeen = FORMAT('YYYYMM01','YYYY0101')date_last_seen,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		ZipCodePerson(FILTER((UNSIGNED3)zip != 0 AND (UNSIGNED)s_did != 0),
			Subject = s_did,
			Zip = zip,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen,
			DateLastSeen = FORMAT('YYYYMM01','YYYY0101')date_last_seen,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),
		
	Dataset_USPIS_HotList__key_addr_search_zip(
		Address(FILTER((STRING28)prim_name != '' AND (UNSIGNED3)zip != 0),
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			UnitDesignation = unit_desig,
			SecondaryRange = sec_range,
			PostalCity = p_city_name,
			VanityCity = v_city_name,
			State = st,
			ZIP5 = zip,
			ZIP4 = zip4,
			HotListIndicator = 'Y',
			//DateVendorFirstReported = dt_first_reported,
			//DateVendorLastReported = dt_last_reported,
			Source = src,
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),

	Dataset_UtilFile__Key_Address(
		Utility(
			UID = id,
			UtilityID = id,
			DateAddedToExchange = date_added_to_exchange,
			ConnectDate = connect_date,
			UtilityType = util_type,
			RecordDate = record_date,
			OriginalLastName = orig_lname,
			OriginalFirstName = orig_fname,
			FirstName = fname,
			LastName = lname,
			PrimaryRange = prim_range,
			PrimaryName = prim_name,
			Postdirectional = postdir,
			Predirectional = predir,
			Suffix = addr_suffix,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			Phone = phone,
			WorkPhone = work_phone,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen,
			Source = src,
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		UtilityAddress(FILTER((STRING28)prim_name != '' AND (UNSIGNED)zip != 0),
			PrimaryRange = prim_range,
			PrimaryName = prim_name,
			Postdirectional = postdir,
			Predirectional = predir,
			Suffix = addr_suffix,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			Util = id,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen,
			Source = src,
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		AddressPhone(FILTER((STRING28)prim_name != '' AND (UNSIGNED)zip != 0),
			PrimaryRange = prim_range,
			PrimaryName = prim_name,
			Postdirectional = postdir,
			Predirectional = predir,
			Suffix = addr_suffix,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			PhoneNumber = phone,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen,
			Source = src,
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),		
		PERMITS(DPMBitmap)),

	Dataset_UtilFile__Key_DID(
		Utility(
			UID = id,
			UtilityID = id,
			DateAddedToExchange = date_added_to_exchange,
			ConnectDate = connect_date,
			UtilityType = util_type,
			RecordDate = record_date,
			OriginalLastName = orig_lname,
			OriginalFirstName = orig_fname,
			FirstName = fname,
			LastName = lname,
			PrimaryRange = prim_range,
			PrimaryName = prim_name,
			Postdirectional = postdir,
			Predirectional = predir,
			Suffix = addr_suffix,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			Phone = phone,
			WorkPhone = work_phone,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen,
			Source = src,
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		UtilityPerson(FILTER((UNSIGNED)did != 0),
			Util = id,
			Subject = did,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen,
			Source = src,
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PersonPhone(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)phone != 0),
			Subject = did,
			PhoneNumber = phone,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen,
			Source = src,
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),	
		PERMITS(DPMBitmap)),
	
	// ------------------------[ Business ]---------------------------

	Dataset_Cortera_Tradeline__Key_LinkIds(
		Tradeline(FILTER(status NOT IN ['D', 'R']),// excluding records 'D' (deleted record) and 'R' (replaced by newer record)
			UltID = ultid,    
			OrgID = orgid,   
			SeleID = seleid,
			AccountKey = account_key,
			ARDate = ar_date,
			Status = status,		 
			SegmentID = segment_id,
			TotalAR = total_ar, 
			CurrentAR = current_ar, 
			Aging1To30 = aging_1to30,
			Aging31To60 = aging_31to60,
			Aging61To90 = aging_61to90,
			Aging91Plus = aging_91plus,
			CreditLimit = credit_limit,
			FirstSaleDate = first_sale_date,
			LastSaleDate = last_sale_date,
			FileDate = filedate,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date), 
		SeleTradeline(FILTER(status NOT IN ['D', 'R']),//  excluding records 'D' (deleted record) and 'R' (replaced by newer record)
			UltID = ultid,    
			OrgID = orgid,   
			SeleID = seleid,   
			AccountKey = account_key, 
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			Source = source,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date), 
		PERMITS(DPMBitmap)),

	Dataset_DX_Email__Key_Email_Payload(	
		Email(
			EmailAddress = clean_email,
			EmailRecKey = email_rec_key,
			Rules = rules,
			UserName = append_email_username,
			DomainName = append_domain,
			DomainType = append_domain_type,
			DomainRoot = append_domain_root,
			DomainExtension = append_domain_ext,
			IsTopLevelDomainState = append_is_tld_state,
			IsTopLevelDomainGeneric = append_is_tld_generic,
			IsTopLevelDomainCountry = append_is_tld_country,
			OrigLoginDate = orig_login_date,
			OrigSite = orig_site,
			E360ID = orig_e360_id,
			TeramediaID = orig_teramedia_id,
			ProcessDate = process_date,
			ActiveCode = activecode,
			CompanyName = cln_companyname,
			CompanyTitle = companytitle,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01')date_last_seen, // Contains information for ASOF
			Source = Email_Src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported),
		PersonEmail(
			Subject = did,
			EmailAddress = clean_email,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01')date_last_seen, // Contains information for ASOF
			Source = Email_Src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported),
		PersonEmailPhoneAddress(
			Subject = did,
			EmailAddress = clean_email,
			PhoneNumber = clean_phone,
			FirstName = clean_name.fname,
			LastName = clean_name.lname,
			PrimaryRange = clean_address.prim_range,
			Predirectional = clean_address.predir,
			PrimaryName = clean_address.prim_name,
			Suffix = clean_address.addr_suffix,
			Postdirectional = clean_address.postdir,
			SecondaryRange = clean_address.sec_range,
			ZIP5 = clean_address.zip,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01')date_last_seen, // Contains information for ASOF
			Source = Email_Src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported),
		EmailHousehold(
			EmailAddress = clean_email,
			Household = hhid,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen, // Contains information for ASOF; nonFCRA only
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01')date_last_seen, // Contains information for ASOF; nonFCRA only
			Source = Email_Src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported),
		PERMITS(DPMBitmap)),
		
	Dataset_Corp2__Kfetch_LinkIDs_Corp(
		BusinessSele(
      UltID = ultid,
      OrgID = orgid,
      SeleID = seleid,
      ForProfitIndicator = corp_for_profit_ind,
      PublicOrPrivateIndicator = corp_public_or_private_ind,
      SICCode = corp_sic_code,
      SICCodeOrder = 1,
      NAICSCode = corp_naic_code,
      NAICSCodeOrder = 1,
      //copied from prox
      // ContactFirstName = corp_ra_fname1, 
      // ContactMiddleName = corp_ra_mname1, 
      // ContactLastName = corp_ra_lname1, 
      // ContactNameSuffix = corp_ra_name_suffix1, 
      // ContactPrimaryRange = corp_ra_prim_range,
      // ContactPredirectional = corp_ra_predir,
      // ContactPrimaryName = corp_ra_prim_name,
      // ContactSuffix = corp_ra_addr_suffix,
      // ContactPostdirectional = corp_ra_postdir,
      // ContactSecondaryRange = corp_ra_sec_range,
      // ContactState = corp_ra_state,
      // ContactZIP5 = corp_ra_zip5,
      // ContactPhoneNumber = corp_ra_phone10, 
      // ContactJobTitle = corp_ra_title_desc, 
      // DateRegusteredAgentResigned = corp_ra_resign_date,//there is a corp_ra_effective_date but all cases are the same as ra dt first seen
      // DateFirstSeenContact = corp_ra_dt_first_seen, 
      // DateLastSeenContact = corp_ra_dt_last_seen, 
      //dates
      //DateVendorFirstReported = dt_vendor_first_reported,
      //DateVendorLastReported = dt_vendor_last_reported,
      DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
      DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
      Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
    BusinessSeleOverflow(
      UltID = ultid,
      OrgID = orgid,
      SeleID = seleid,
      SOSKey = corp_key,
      SOSEntityDescription = corp_entity_desc,
      SOSNameTypeDescription = corp_ln_name_type_desc,
      SOSProcessDate = corp_process_date,
      SOSStatusCode = corp_status_cd,
      SOSStatusDescription = corp_status_desc,
      SOSStatusDate = corp_status_date,
      SOSIncorporationState = corp_inc_state,
      SOSIncorporationDate = corp_inc_date,
      SOSForeignStateCode = corp_forgn_state_cd,
      SOSForeignStateDate = corp_forgn_date,
      SOSForeignDomesticIndicator = corp_foreign_domestic_ind,
      SOSOriginalBusinessTypeDescription = corp_orig_bus_type_desc,
      SOSOriginalOrgStructureDescription = corp_orig_org_structure_desc,
      SOSOriginalCharterNumber = corp_orig_sos_charter_nbr,
      SOSTermExistCode = corp_term_exist_cd,
      SOSRegisteredAgentName = corp_ra_name,
      SOSRegisteredAgentEffectiveDate = corp_ra_effective_date,
      SOSRegisteredAgentDateFirstSeen = corp_ra_dt_first_seen,
      SOSRegisteredAgentDateLastSeen = corp_ra_dt_last_seen,
      // DateVendorFirstReported = dt_vendor_first_reported,
      // DateVendorLastReported = dt_vendor_last_reported,
      DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
      DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
      Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		ProxAddress(FILTER((STRING28)corp_addr1_prim_name != '' AND (UNSIGNED3)corp_addr1_zip5 != 0 AND (UNSIGNED)proxid<>0  ),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			PrimaryRange = corp_addr1_prim_range,
			Predirectional = corp_addr1_predir,
			PrimaryName = corp_addr1_prim_name,
			Suffix = corp_addr1_addr_suffix,
			Postdirectional = corp_addr1_postdir,
			SecondaryRange = corp_addr1_sec_range,
			ZIP5 = corp_addr1_zip5,
			SICCode = corp_sic_code,
			NAICSCode = corp_naic_code,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		ProxAddress(FILTER((STRING28)corp_addr2_prim_name != '' AND (UNSIGNED3)corp_addr2_zip5 != 0 AND (UNSIGNED)proxid<>0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			PrimaryRange = corp_addr2_prim_range,
			Predirectional = corp_addr2_predir,
			PrimaryName = corp_addr2_prim_name,
			Suffix = corp_addr2_addr_suffix,
			Postdirectional = corp_addr2_postdir,
			SecondaryRange = corp_addr2_sec_range,
			ZIP5 = corp_addr2_zip5,
			SICCode = corp_sic_code,
			NAICSCode = corp_naic_code,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),	
		ProxAddress(FILTER((STRING28)corp_ra_prim_name != '' AND (UNSIGNED3)corp_ra_zip5 != 0  AND (UNSIGNED)proxid<>0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			PrimaryRange = corp_ra_prim_range,
			Predirectional = corp_ra_predir,
			PrimaryName = corp_ra_prim_name,
			Suffix = corp_ra_addr_suffix,
			Postdirectional = corp_ra_postdir,
			SecondaryRange = corp_ra_sec_range,
			ZIP5 = corp_ra_zip5,
			SICCode = corp_sic_code,
			NAICSCode = corp_naic_code,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),		
		SeleAddress(FILTER((STRING28)corp_addr1_prim_name != '' AND (UNSIGNED3)corp_addr1_zip5 != 0 AND (UNSIGNED)seleid<>0  ),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			PrimaryRange = corp_addr1_prim_range,
			Predirectional = corp_addr1_predir,
			PrimaryName = corp_addr1_prim_name,
			Suffix = corp_addr1_addr_suffix,
			Postdirectional = corp_addr1_postdir,
			SecondaryRange = corp_addr1_sec_range,
			ZIP5 = corp_addr1_zip5,
			SICCode = corp_sic_code,
			NAICSCode = corp_naic_code,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		SeleAddress(FILTER((STRING28)corp_addr2_prim_name != '' AND (UNSIGNED3)corp_addr2_zip5 != 0 AND (UNSIGNED)seleid<>0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			PrimaryRange = corp_addr2_prim_range,
			Predirectional = corp_addr2_predir,
			PrimaryName = corp_addr2_prim_name,
			Suffix = corp_addr2_addr_suffix,
			Postdirectional = corp_addr2_postdir,
			SecondaryRange = corp_addr2_sec_range,
			ZIP5 = corp_addr2_zip5,
			SICCode = corp_sic_code,
			NAICSCode = corp_naic_code,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),	
		SeleAddress(FILTER((STRING28)corp_ra_prim_name != '' AND (UNSIGNED3)corp_ra_zip5 != 0  AND (UNSIGNED)seleid<>0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			PrimaryRange = corp_ra_prim_range,
			Predirectional = corp_ra_predir,
			PrimaryName = corp_ra_prim_name,
			Suffix = corp_ra_addr_suffix,
			Postdirectional = corp_ra_postdir,
			SecondaryRange = corp_ra_sec_range,
			ZIP5 = corp_ra_zip5,
			SICCode = corp_sic_code,
			NAICSCode = corp_naic_code,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),		
		BusinessProx(FILTER((UNSIGNED)proxid<>0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			ContactFirstName = corp_ra_fname1, 
			ContactMiddleName = corp_ra_mname1, 
			ContactLastName = corp_ra_lname1, 
			ContactNameSuffix = corp_ra_name_suffix1, 
			ContactPrimaryRange = corp_ra_prim_range,
			ContactPredirectional = corp_ra_predir,
			ContactPrimaryName = corp_ra_prim_name,
			ContactSuffix = corp_ra_addr_suffix,
			ContactPostdirectional = corp_ra_postdir,
			ContactSecondaryRange = corp_ra_sec_range,
			ContactState = corp_ra_state,
			ContactZIP5 = corp_ra_zip5,
			ContactPhoneNumber = corp_ra_phone10, 
			ContactJobTitle = corp_ra_title_desc, 
			DateRegusteredAgentResigned = corp_ra_resign_date,//there is a corp_ra_effective_date but all cases are the same as ra dt first seen
			DateFirstSeen = FORMAT('YYYYMMDD')corp_ra_dt_first_seen, 
			DateLastSeen = FORMAT('YYYYMMDD')corp_ra_dt_last_seen, 
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported),
		PERMITS(DPMBitmap)),

	Dataset_UtilFile__Kfetch2_LinkIds(
		BusinessSele(
			UltID = ultid,
			OrgID = orgid,
			SeleID = seleid,
			//DateVendorFirstReported = date_added_to_exchange,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')record_date,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		SeleUtility(FILTER((UNSIGNED)seleid<>0),
			Util = id,
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			UtilityType = util_type,
			//DateVendorFirstReported = date_added_to_exchange,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen,
			ConnectDate = connect_date,
			DateLastSeen = FORMAT('YYYYMMDD')record_date,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),	
		ProxUtility(FILTER((UNSIGNED)proxid<>0),
			Util = id,
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			UtilityType = util_type,
			//DateVendorFirstReported = date_added_to_exchange,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen,
			ConnectDate = connect_date,
			DateLastSeen = FORMAT('YYYYMMDD')record_date,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		Utility(		
			UID = id,
			UtilityID = id,
			DateAddedToExchange = date_added_to_exchange,
			ConnectDate = connect_date,
			UtilityType = util_type,
			RecordDate = record_date,
			OriginalLastName = orig_lname,
			OriginalFirstName = orig_fname,
			FirstName = fname,
			LastName = lname,
			PrimaryRange = prim_range,
			PrimaryName = prim_name,
			Postdirectional = postdir,
			Predirectional = predir,
			Suffix = addr_suffix,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			Phone = phone,
			WorkPhone = work_phone,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')record_date,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),
		
	Dataset_Prof_LicenseV2__Key_Proflic_Did(
		ProfessionalLicense(FILTER(TRIM(cleaned_license_number) != '' AND TRIM(source_st) != ''),
			LicenseNumber = cleaned_license_number,
			LicenseState = source_st,
			LexID = did,		
			SourceDescription  = vendor,
			LicenseDescription = license_type,
			LicenseBusinessFlag = business_flag,
			DateOfExpiration = expiration_date,
			DateOfLicenseRenewal = last_renewal_date,
			LicenseStatus = status,
			OriginalDateOfIssuance = issue_date,
			LicenseProfessionDescription  = profession_or_board,
			LicenseCategory = category,
			Occupation = occupation,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD', 'YYYYMM01')date_last_seen,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		ProfessionalLicensePerson(FILTER(TRIM(cleaned_license_number) != '' AND TRIM(source_st) != '' AND did != 0),
			LicenseNumber = cleaned_license_number,
			LicenseState = source_st,
			LexID = did,		
			Subject=did,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD', 'YYYYMM01')date_last_seen,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),
	
	Dataset_Prof_License_Mari__Key_Did(
		ProfessionalLicense(FILTER(TRIM(cleaned_license_number) != '' AND TRIM(license_state) != ''),
			LicenseNumber = cleaned_license_number,
			LicenseState = license_state,
			LexID = did,		
			DateCreated = create_dte,
			DateProcessed = process_date,
			LegacyResultCode = result_cd_1, // This indicates RecordStatusCode with the following values: C = Latest/Current Updating Source, S = Superceded Mari RID Updating Source, D = Dropped Mari RID Updating Source
			SourceDescription = std_source_desc,
			SourceCode = std_source_upd,
			DateFirstReported = date_vendor_first_reported,
			DateLastReported = date_vendor_last_reported,
			DateLastUpdated = last_upd_dte,
			LicenseBusinessFlag = type_cd,
			LicenseProfessionCode = std_prof_cd,
			LicenseProfessionDescription  = std_prof_desc,
			LicenseStatus = std_status_desc,
			LicenseDescription = std_license_desc,
			OriginalDateOfIssuance = orig_issue_dte,
			CurrentDateOfIssuance = curr_issue_dte,
			DateOfExpiration = expire_dte,
			StartDate = start_dte,
			DateOfLicenseRenewal = FORMAT('YYYYMMDD', 'YYYY0101')renewal_dte,
			AffiliatedTypeCode  = affil_type_cd,
			LicenseCategory = category,
			Occupation = occupation,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')date_last_seen,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),   
		ProfessionalLicensePerson(FILTER(TRIM(cleaned_license_number) != '' AND TRIM(license_state) != '' AND did != 0),
			LicenseNumber = cleaned_license_number,
			LicenseState = license_state,
			LexID = did,
			Subject=did,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')date_last_seen,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported),
		PERMITS(DPMBitmap)),
		
	Dataset_UCC__Key_LinkIds_key(
		UCC(
			TMSID = tmsid,
			RMSID = rmsid,
			ForeignFlag = foreign_indc,
			ProcessDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')process_date,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen, 
			DateLastSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_last_seen,  
			//DateVendorLastReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_vendor_last_reported,
			//DateVendorFirstReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_vendor_first_reported,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		SeleUCC(FILTER((UNSIGNED)ultid<>0 AND (UNSIGNED)orgid<>0 AND (UNSIGNED)seleid<>0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			TMSID = tmsid,
			RMSID = rmsid,
			PartyType = party_type,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen, 
			DateLastSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_last_seen,  
			//DateVendorLastReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_vendor_last_reported,
			//DateVendorFirstReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_vendor_first_reported,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),
	
	Dataset_UCC__Key_RMSID_Main(
		UCC(
			TMSID = tmsid,
			RMSID = rmsid,
			ProcessDate = process_date,
			FilingJurisdiction = filing_jurisdiction,
			FilingNumber = filing_number,		
			FilingType = filing_type,
			FilingDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')filing_date,
			OriginalFilingDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')orig_filing_date,
			FilingTime = filing_time,
			FilingStatus = filing_status,
			FilingAgency = filing_agency,
			StatusType = status_type,
			ExpirationDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')expiration_date,
			ContractType = contract_type,
			StatementsFiled = statements_filed,
			CollateralDesc = collateral_desc,
			CollateralMachine = prim_machine,
			VendorEntryDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')vendor_entry_date, 
			VendorUpdateDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')vendor_upd_date, 
			Source = src,
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),
	
	Dataset_UCC__Key_RMSID_Party(
		UCC(
			TMSID = tmsid,
			RMSID = rmsid,
			ForeignFlag = foreign_indc,
			ProcessDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')process_date,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen, 
			DateLastSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_last_seen,  
			//DateVendorLastReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_vendor_last_reported,
			//DateVendorFirstReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_vendor_first_reported,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		SeleUCC(FILTER((UNSIGNED)ultid<>0 AND (UNSIGNED)orgid<>0 AND (UNSIGNED)seleid<>0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			TMSID = tmsid,
			RMSID = rmsid,
			PartyType = party_type,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen, 
			DateLastSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_last_seen,  
			//DateVendorLastReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_vendor_last_reported,
			//DateVendorFirstReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_vendor_first_reported,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),
	
	Dataset_Doxie__Key_Death_MasterV2_SSA_DID(
		Person(FILTER((UNSIGNED)l_did != 0),
			UID=l_did,
			FirstName = fname,
			MiddleName = mname,
			LastName = lname,
			NameSuffix = name_suffix,
			DateOfBirth = dob8,
			DateOfBirthPadded = DOB8Padded,
			DateOfDeath = dod8,
			DeathMasterFlag = TRUE,
			Source = src,
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PersonSSN(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)ssn != 0),
			Subject = did,
			Social = ssn,
			DeathMasterFlag = TRUE,
			Source = src,
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),


	Dataset_DriversV2__Key_DL_DID(
		DriversLicense(FILTER(orig_state != ''),
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			DriversLicenseNumber = dl_number,
			IssuingState = orig_state,
			DriversLicenseSequence = dl_seq,
			LicenseClass = license_class,
			LicenseType = license_type,
			MoxieLicenseType = moxie_license_type,
			AttentionCode = attention_flag,
			Attention = attention_name,
			Restrictions = restrictions,
			RestrictionsDelimited = restrictions_delimited,
			OriginalExpirationDate = orig_expiration_date,
			OriginalIssueDate = orig_issue_date,
			IssueDate = lic_issue_date,
			ExpirationDate = expiration_date,
			ActiveDate = active_date,
			InactiveDate = inactive_date,
			Endorsement = lic_endorsement,
			MotorcycleCode = motorcycle_code,
			DriverEducationCode = driver_edu_code,
			DuplicateCount = dup_lic_count,
			RCDStat = rcd_stat_flag,
			Height = height,
			// HairColor = hair_color,
			// EyeColor = eye_color,
			Weight = weight,
			OOSPreviousDriversLicenseNumber = oos_previous_dl_number,
			PreviousState = oos_previous_st,
			Issuance = issuance,
			AddressChange = address_change,
			NameChange = name_change,
			DateOfBirthChange = dob_change,
			SexChange = sex_change,
			PreviousDriversLicenseNumber = old_dl_number,
			DriversLicenseKeyNumber = dl_key_number,
			CDLStatus = cdl_status,
			County = county_name,
			HistoryName = history_name,
			Race = race_name,
			RaceCode = race,
			Sex = sex_name,
			SexCode = sex_flag,
			HairColor = hair_color_name,
			EyeColor = eye_color_name,
			StateName = orig_state_name,
			History = history,
			Source = source_code,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported),
			//DateVendorLastReported = dt_vendor_last_reported),		
		PersonDriversLicense(
			Subject=did,
			DriversLicenseNumber = dl_number,
			IssuingState = orig_state,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = source_code,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported),
		PERMITS(DPMBitmap)),

	Dataset_DriversV2__Key_DL_Number(
		DriversLicense(FILTER(orig_state != ''),
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			DriversLicenseNumber = dl_number,
			IssuingState = orig_state,
			DriversLicenseSequence = dl_seq,
			LicenseClass = license_class,
			LicenseType = license_type,
			MoxieLicenseType = moxie_license_type,
			AttentionCode = attention_flag,
			Attention = attention_name,
			Restrictions = restrictions,
			RestrictionsDelimited = restrictions_delimited,
			OriginalExpirationDate = orig_expiration_date,
			OriginalIssueDate = orig_issue_date,
			IssueDate = lic_issue_date,
			ExpirationDate = expiration_date,
			ActiveDate = active_date,
			InactiveDate = inactive_date,
			Endorsement = lic_endorsement,
			MotorcycleCode = motorcycle_code,
			DriverEducationCode = driver_edu_code,
			DuplicateCount = dup_lic_count,
			RCDStat = rcd_stat_flag,
			Height = height,
			HairColor = hair_color,
			EyeColor = eye_color,
			Weight = weight,
			OOSPreviousDriversLicenseNumber = oos_previous_dl_number,
			PreviousState = oos_previous_st,
			Issuance = issuance,
			AddressChange = address_change,
			NameChange = name_change,
			DateOfBirthChange = dob_change,
			SexChange = sex_change,
			PreviousDriversLicenseNumber = old_dl_number,
			DriversLicenseKeyNumber = dl_key_number,
			CDLStatus = cdl_status,
			County = county_name,
			HistoryName = history_name,
			Race = race_name,
			RaceCode = race,
			Sex = sex_name,
			SexCode = sex_flag,
			StateName = orig_state_name,
			History = history,
			Source = source_code,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported),
		DriversLicense(FILTER(orig_state != ''),
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			DriversLicenseNumber = dl_number,
			IssuingState = orig_state,
			HairColor = hair_color_name,
			EyeColor = eye_color_name,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported),
			//DateVendorLastReported = dt_vendor_last_reported),		
		PersonDriversLicense(
			Subject=did,
			DriversLicenseNumber = dl_number,
			IssuingState = orig_state,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = source_code,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported),
		PERMITS(DPMBitmap)),
	
	Dataset_Certegy__Key_Certegy_DID(
		PersonDriversLicense(FILTER(orig_dl_num != '' AND (UNSIGNED6)did > 0),
			Subject=did,
			DriversLicenseNumber = orig_dl_num,
			IssuingState = orig_dl_state,
			Source = source_code,
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
	PERMITS(DPMBitmap)),
	
	Dataset_Doxie__Key_Header_Address(
		Address(FILTER((STRING28)prim_name != '' AND (UNSIGNED3)zip != 0),
			PrimaryName = prim_name,
			ZIP5 = zip,
			PrimaryRange = prim_range,
			SecondaryRange = sec_range,
			Predirectional = predir,
			Suffix = suffix,
			Postdirectional = postdir,
			UnitDesignation = unit_desig,
			PostalCity = city_name,
			State = st,
			County = county,
			GeoBlock = geo_blk,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen,
			HeaderHitFlag = TRUE,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		SSNAddress(FILTER((STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)ssn != 0),	
			PrimaryName = prim_name,
			ZIP5 = zip,
			PrimaryRange = prim_range,
			SecondaryRange = sec_range,
			Predirectional = predir,
			Suffix = suffix,
			Postdirectional = postdir,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen,
			Social = ssn,
			HeaderHitFlag = TRUE,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PersonAddress(FILTER((STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)did != 0),
			Subject=did,
			PrimaryName = prim_name,
			ZIP5 = zip,
			PrimaryRange = prim_range,
			SecondaryRange = sec_range,
			Predirectional = predir,
			Suffix = suffix,
			Postdirectional = postdir,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen,
			HeaderHitFlag = TRUE,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),

		
	Dataset_Relatives__Key_Relatives_V3( 
		FirstDegreeAssociations(FILTER(Type IN ['PERSONAL', 'SSN ONLY', 'UCC', 'TRANS CLOSURE'] AND Personal = TRUE AND Business = FALSE AND Confidence = 'HIGH' AND ((Title >= 1 AND Title < 43) OR (CoSourceCount > 1 AND CoSourceSum > 1 AND Title IN [43, 44]))),
			DateFirstSeen = FORMAT('YYYYMMDD')rel_dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMMDD')rel_dt_last_seen, // Contains information for ASOF
			Subject = did1, 
			FirstDegreeAssociation = did2, 
			Title = title,
			RelationshipType = type,
			RelationshipConfidence = confidence,
			RelationshipScore = total_score,
			Generation = generation,
			RelationshipDateFirstSeen = rel_dt_first_seen,
			RelationshipDateLastSeen = rel_dt_last_seen,
			Source = Src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),	
		
	Dataset_BBB2__kfetch_BBB_LinkIds(
		BusinessSele(
			UltID = ultid,
			OrgID = orgid,
			SeleID = seleid,
			URL = http_link,
			BBBMemberSince = member_since_date,
			BBBCategory = member_category,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')date_last_seen,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),	
	
	Dataset_BBB2__kfetch_BBB_Non_Member_LinkIds(	
		BusinessSele(
			UltID = ultid,
			OrgID = orgid,
			SeleID = seleid,
			URL = http_link,
			BBBCategory = non_member_category,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')date_last_seen,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),	
		
	Dataset_BusReg__kfetch_busreg_company_linkids(	
		BusinessSele(
      UltID = ultid,
      OrgID = orgid,
      SeleID = seleid,
      TotalEmployees = rawfields.emp_size,
      SICCode = rawfields.sic,
      SICCodeOrder = 1,
      NAICSCode = rawfields.naics,
      NAICSCodeOrder = 1,
      CompanyDescription = rawfields.descript,
      OwnerSize = rawfields.Own_size,
      //Copied from prox
      // EmployeeCount = rawfields.emp_size,
      // CorporationCode = rawfields.corpcode,
      //dates
      //DateVendorFirstReported = dt_vendor_first_reported,
      //DateVendorLastReported = dt_vendor_last_reported,
      DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
      DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
      Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
    BusinessSeleOverflow(
      UltID = ultid,
      OrgID = orgid,
      SeleID = seleid,
      SOSCode = rawfields.sos_code,
      Filing_Code = rawfields.filing_cod,
      RegistrationStatus = rawfields.status,
      RegistrationStatusDescription = rawfields.stat_des,
      //DateVendorFirstReported = dt_vendor_first_reported,
      //DateVendorLastReported = dt_vendor_last_reported,
      DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
      DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
      Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),      
		BusinessProx(FILTER((UNSIGNED)proxid<>0),
			UltID = ultid,
			OrgID = orgid,
			SeleID = seleid,
			ProxID = proxid,
			EmployeeCount = rawfields.emp_size,
			CorporationCode = rawfields.corpcode,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),	
	
	Dataset_CalBus__kfetch_Calbus_LinkIDS(	
		BusinessSele(
				UltID = ultid,
				OrgID = orgid,
				SeleID = seleid,
				IndustryCode = industry_code,
				OwnershipType = ownership_code,
				NAICSCode = naics_code,
				NAICSCodeOrder = 1,
				DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
				DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
				Source = src,
				HybridArchiveDate = FORMAT('YYYYMMDD'),
				Archive_Date = FORMAT('YYYYMMDD')archive_date),
			PERMITS(DPMBitmap)),	
		
	Dataset_Cortera__kfetch_LinkID(
		BusinessSele(
			UltID = ultid,
			OrgID = orgid,
			SeleID = seleid,
			TotalEmployees = total_employees,
			TotalSales = total_sales,
			SICCode = primary_sic,
			SICCodeOrder = 1,
			NAICSCode = primary_naics,
			NAICSCodeOrder = 1,
			//Copied from prox
			CorteraUltimateLinkID = ultimate_linkid,//9-digit unique number of the ultimate parent location.
			// CorteraLinkID = link_id,//9-digit unique number assigned by Cortera to a company in its database.
			// CompanyStatus = status,//Possible Values: 'A' - Active, 'D' - Dormant  (Dormant means we have not seen any activity within 30 months)
			// IsClosed = is_closed,
			// LocationCorpHierarchy = position_type, //Location in the corporate hierarchy.  Possible Values: 'S' - Single Location, 'B' - Branch, 'H' - Headquarters
			// DateLastSeenLocation = loc_date_last_seen,
			// DateClosed = closed_date,
			//dates
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		BusinessProx(FILTER((UNSIGNED)proxid<>0),
			UltID = ultid,
			OrgID = orgid,
			SeleID = seleid,
			ProxID = proxid,
			CorteraUltimateLinkID = ultimate_linkid,//9-digit unique number of the ultimate parent location.
			CorteraLinkID = link_id,//9-digit unique number assigned by Cortera to a company in its database.
			CompanyStatus = status,//Possible Values: 'A' - Active, 'D' - Dormant  (Dormant means we have not seen any activity within 30 months)
			IsClosed = is_closed,
			LocationCorpHierarchy = position_type, //Location in the corporate hierarchy.  Possible Values: 'S' - Single Location, 'B' - Branch, 'H' - Headquarters
			DateLastSeenLocation = loc_date_last_seen,
			DateClosed = closed_date,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),		
		PERMITS(DPMBitmap)),

	Dataset_DCAV2__kfetch_LinkIds(	
		BusinessSele(
			UltID = ultid,
			OrgID = orgid,
			SeleID = seleid,
			URL = rawfields.url,
			TotalSales = rawfields.sales,
			TotalEmployees = rawfields.emp_num,
			SICCode = rawfields.sic1,
			SICCodeOrder = 1,
			NAICSCode = rawfields.naics1,
			NAICSCodeOrder = 1,
			DCAEnterpriseNumber = rawfields.enterprise_num,			
			//DateVendorFirstReported = date_vendor_first_reported,
			//DateVendorLastReported = date_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')date_last_seen,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		BusinessSele(FILTER((UNSIGNED)rawfields.sic2 > 0 OR (UNSIGNED)rawfields.naics2 > 0), // Populating SIC/NAICS 2 through 10
			SICCode = rawfields.sic2,
			SICCodeOrder = 2,
			NAICSCode = rawfields.naics2,
			NAICSCodeOrder = 2,
			//DateVendorFirstReported = date_vendor_first_reported,
			//DateVendorLastReported = date_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')date_last_seen,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		BusinessSele(FILTER((UNSIGNED)rawfields.sic3 > 0 OR (UNSIGNED)rawfields.naics3 > 0),
			SICCode = rawfields.sic3,
			SICCodeOrder = 3,
			NAICSCode = rawfields.naics3,
			NAICSCodeOrder = 3,
			//DateVendorFirstReported = date_vendor_first_reported,
			//DateVendorLastReported = date_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')date_last_seen,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		BusinessSele(FILTER((UNSIGNED)rawfields.sic4 > 0 OR (UNSIGNED)rawfields.naics4 > 0),
			SICCode = rawfields.sic4,
			SICCodeOrder = 4,
			NAICSCode = rawfields.naics4,
			NAICSCodeOrder = 4,
			//DateVendorFirstReported = date_vendor_first_reported,
			//DateVendorLastReported = date_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')date_last_seen,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		BusinessSele(FILTER((UNSIGNED)rawfields.sic5 > 0 OR (UNSIGNED)rawfields.naics5 > 0),
			SICCode = rawfields.sic5,
			SICCodeOrder = 5,
			NAICSCode = rawfields.naics5,
			NAICSCodeOrder = 5,
			//DateVendorFirstReported = date_vendor_first_reported,
			//DateVendorLastReported = date_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')date_last_seen,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		BusinessSele(FILTER((UNSIGNED)rawfields.sic6 > 0 OR (UNSIGNED)rawfields.naics6 > 0),
			SICCode = rawfields.sic6,
			SICCodeOrder = 6,
			NAICSCode = rawfields.naics6,
			NAICSCodeOrder = 6,
			//DateVendorFirstReported = date_vendor_first_reported,
			//DateVendorLastReported = date_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')date_last_seen,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		BusinessSele(FILTER((UNSIGNED)rawfields.sic7 > 0 OR (UNSIGNED)rawfields.naics7 > 0),
			SICCode = rawfields.sic7,
			SICCodeOrder = 7,
			NAICSCode = rawfields.naics7,
			NAICSCodeOrder = 7,
			//DateVendorFirstReported = date_vendor_first_reported,
			//DateVendorLastReported = date_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')date_last_seen,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		BusinessSele(FILTER((UNSIGNED)rawfields.sic8 > 0 OR (UNSIGNED)rawfields.naics8 > 0),
			SICCode = rawfields.sic8,
			SICCodeOrder = 8,
			NAICSCode = rawfields.naics8,
			NAICSCodeOrder = 8,
			//DateVendorFirstReported = date_vendor_first_reported,
			//DateVendorLastReported = date_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')date_last_seen,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		BusinessSele(FILTER((UNSIGNED)rawfields.sic9 > 0 OR (UNSIGNED)rawfields.naics9 > 0),
			SICCode = rawfields.sic9,
			SICCodeOrder = 9,
			NAICSCode = rawfields.naics9,
			NAICSCodeOrder = 9,
			//DateVendorFirstReported = date_vendor_first_reported,
			//DateVendorLastReported = date_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')date_last_seen,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		BusinessSele(FILTER((UNSIGNED)rawfields.sic10 > 0 OR (UNSIGNED)rawfields.naics10 > 0),
			SICCode = rawfields.sic10,
			SICCodeOrder = 10,
			NAICSCode = rawfields.naics10,
			NAICSCodeOrder = 10,
			//DateVendorFirstReported = date_vendor_first_reported,
			//DateVendorLastReported = date_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')date_last_seen,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),	
	
	Dataset_EBR_kfetch_5600_Demographic_Data_linkids(	
		BusinessSele(
      UltID = ultid,
      OrgID = orgid,
      SeleID = seleid,
      OwnershipType = owner_type_code,
      AgeEstablished = yrs_in_bus_actual,
      ReportedSales = sales_actual,
      EBREmployeeSizeCode = empl_size_code,
      TotalEmployees = empl_size_actual,
      BusinessType = bus_type_code,
      SICCode = SIC_1_Code,
      SICCodeOrder = 1,
      EBRNumber = file_number,
      //prox
      // LocationCorpHierarchy = location_code,//B= Branch, D = Department Store; F = Franchise; H = HQ; S = Single Entity; X = Multiple Name Occurrence; N = Division; U = Subsidiary; Blank = Not Available
      //dates
      DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen, // Only the Date First Seen appears to be "dirty"
      DateLastSeen = FORMAT('YYYYMMDD')date_last_seen,
      Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
    BusinessSeleOverflow(
      UltID = ultid,
      OrgID = orgid,
      SeleID = seleid,
      DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen, // Only the Date First Seen appears to be "dirty"
      DateLastSeen = FORMAT('YYYYMMDD')date_last_seen,
      EBRProcessDate = process_date,
      EBRNumber = file_number,
      Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		BusinessSele(FILTER((UNSIGNED)SIC_2_Code > 0), // Setting SIC Codes 2 through 4
			SICCode = SIC_2_Code,
			SICCodeOrder = 2,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')date_last_seen,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		BusinessSele(FILTER((UNSIGNED)SIC_3_Code > 0),
			SICCode = SIC_3_Code,
			SICCodeOrder = 3,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')date_last_seen,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		BusinessSele(FILTER((UNSIGNED)SIC_4_Code > 0),
			SICCode = SIC_4_Code,
			SICCodeOrder = 4,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')date_last_seen,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		BusinessProx(FILTER((UNSIGNED)proxid<>0),
			UltID = ultid,
			OrgID = orgid,
			SeleID = seleid,
			ProxID = proxid,
			LocationCorpHierarchy = location_code,//B= Branch, D = Department Store; F = Franchise; H = HQ; S = Single Entity; X = Multiple Name Occurrence; N = Division; U = Subsidiary; Blank = Not Available
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen, // Only the Date First Seen appears to be "dirty"
			DateLastSeen = FORMAT('YYYYMMDD')date_last_seen,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),
	
	Dataset_FBNv2__kfetch_LinkIds(
		BusinessSele(
			UltID = ultid,
			OrgID = orgid,
			SeleID = seleid,
			SICCode = sic_code,
			SICCodeOrder = 1,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),	
		
	Dataset_GovData__kfetch_IRS_NonProfit_linkIDs(
		BusinessSele(
			UltID = ultid,
			OrgID = orgid,
			SeleID = seleid,
			ReportedSales = Income_Amount,
			ReportedEarnings = Reported_Earnings, // Combination of Negative_Rev_Amount and Form_990_Revenue_Amount
			ReportedAssets = asset_amount,
			NonProfitClassificationCode = classification_code,
			NonProfitFoundationCode = foundation_code,
			NonProfitOrganizationCode = organization_code,
			DateFirstSeen = FORMAT('YYYYMMDD')process_date,
			// DateLastSeen doesn't exist in this file
			Source = src,
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),	
		
	Dataset_IRS5500__kfetch_LinkIDs(	
		BusinessSeleOverflow(
			UltID = ultid,
			OrgID = orgid,
			SeleID = seleid,
			RetirementPlanBeginDate = form_plan_year_begin_date,
			RetirementPlanEffectiveDate = plan_eff_date,
			RetirementPlanEntityIndicator = type_plan_entity_ind,
			RetirementTotalParticipants = tot_partcp_boy_cnt,
			RetirementTotalActiveParticipants = tot_active_partcp_cnt,
			RetirementParticipantReceivingCount = rtd_sep_partcp_rcvg_cnt,
			RetirementParticipantFutureCount = rtd_sep_partcp_fut_cnt,
			RetirementReceivingBenefitCount = benef_rcvg_bnft_cnt,
			RetirementParticipantAccountBalanceCount = partcp_account_bal_cnt,
			RetirementParticipantPartiallyVestedCount = sep_partcp_partl_vstd_cnt,
			RetirementPlanPensionBenefitID = pension_benefit_plan_id,
			RetirementPlanWelfareBenefitIndicator = welfare_benefit_plan_ind,
			DateFirstSeen = FORMAT('YYYYMMDD')form_plan_year_begin_date,
			// DateLastSeen doesn't exist in this file
			Source = src,
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),	
		
	Dataset_OSHAIR__kfetch_OSHAIR_LinkIds(
		BusinessSele(
			UltID = ultid,
			OrgID = orgid,
			SeleID = seleid,
			OwnershipType = owner_type,
			SICCode = sic_code,
			SICCodeOrder = 1,
			NAICSCode = naics_code,
			NAICSCodeOrder = 1,
			//Copied from prox
			// OSHAPreviousActivityType = previous_activity_type,
			// OSHAPreviousActivityTypeDescription = prev_activity_type_desc,
			// OSHAAdvanceNoticeFlag = advance_notice_flag,
			// OSHAInspectionOpeningDate = inspection_opening_date,
			// OSHAInspectionCloseDate = inspection_close_date,
			// OSHASafetyHealthFlag = safety_health_flag,
			// OSHAInspectionType = inspection_type,
			// OSHAInspectionScope = inspection_scope,
			// OSHAWalkAroundFlag = walk_around_flag,
			// OSHAEmployeesInterviewedFlag = employees_interviewed_flag,
			// OSHAUnionFlag = union_flag,
			// OSHACaseClosedFlag = closed_case_flag,
			// OSHANoInspectionCode = why_no_inspection_code,
			// OSHAInspectionTypeCode = inspection_type_code, // Derived from a series of fields: safety_pg_manufacturing_insp_flag, safety_pg_construction_insp_flag, safety_pg_maritime_insp_flag, health_pg_manufacturing_insp_flag, health_pg_construction_insp_flag, health_pg_maritime_insp_flag, migrant_farm_insp_flag
			// OSHATotalViolations = total_violations,
			// OSHATotalSeriousViolations = total_serious_violations,
			// OSHANumberOfViolations = number_violations,
			// OSHANumberOfEvents = number_event,
			// OSHANumberOfHazardousSubstance = number_hazardous_substance,
			// OSHANumberOfAccidents = number_accident,
			// OSHAOwnerType = owner_type,
			// OSHAOwnerTypeDescription = own_type_desc,
			// OSHAEmployeeCount12Months = number_in_establishment,
			// DUNSNumber = duns_number,		
			//dates
			DateFirstSeen = FORMAT('YYYYMMDD')inspection_opening_date,
			DateLastSeen = FORMAT('YYYYMMDD')inspection_close_date,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		BusinessSele(FILTER((UNSIGNED)NAICs_Secondary_Code > 0), // Populating NAICs Code 2
			NAICSCode = NAICs_Secondary_Code,
			NAICSCodeOrder = 2,
			DateFirstSeen = FORMAT('YYYYMMDD')inspection_opening_date,
			DateLastSeen = FORMAT('YYYYMMDD')inspection_close_date,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		BusinessProx(FILTER((UNSIGNED)proxid<>0),
			UltID = ultid,
			OrgID = orgid,
			SeleID = seleid,
			ProxID = proxid,
			OSHAPreviousActivityType = previous_activity_type,
			OSHAPreviousActivityTypeDescription = prev_activity_type_desc,
			OSHAAdvanceNoticeFlag = advance_notice_flag,
			OSHAInspectionOpeningDate = inspection_opening_date,
			OSHAInspectionCloseDate = inspection_close_date,
			OSHASafetyHealthFlag = safety_health_flag,
			OSHAInspectionType = inspection_type,
			OSHAInspectionScope = inspection_scope,
			OSHAWalkAroundFlag = walk_around_flag,
			OSHAEmployeesInterviewedFlag = employees_interviewed_flag,
			OSHAUnionFlag = union_flag,
			OSHACaseClosedFlag = closed_case_flag,
			OSHANoInspectionCode = why_no_inspection_code,
			OSHAInspectionTypeCode = inspection_type_code, // Derived from a series of fields: safety_pg_manufacturing_insp_flag, safety_pg_construction_insp_flag, safety_pg_maritime_insp_flag, health_pg_manufacturing_insp_flag, health_pg_construction_insp_flag, health_pg_maritime_insp_flag, migrant_farm_insp_flag
			OSHATotalViolations = total_violations,
			OSHATotalSeriousViolations = total_serious_violations,
			OSHANumberOfViolations = number_violations,
			OSHANumberOfEvents = number_event,
			OSHANumberOfHazardousSubstance = number_hazardous_substance,
			OSHANumberOfAccidents = number_accident,
			OSHAOwnerType = owner_type,
			OSHAOwnerTypeDescription = own_type_desc,
			OSHAEmployeeCount12Months = number_in_establishment,
			DUNSNumber = duns_number,
			DateFirstSeen = FORMAT('YYYYMMDD')inspection_opening_date,
			DateLastSeen = FORMAT('YYYYMMDD')inspection_close_date,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),

	Dataset_SAM__kfetch_linkID(
		BusinessSeleOverflow(
			UltID = ultid,
			OrgID = orgid,
			SeleID = seleid,
			GovDebarredClassification = classification,
			GovDebarredExclusionProgram = exclusionprogram,
			GovDebarredExclusionType = exclusiontype,
			GovDebarredExcludingAgency = excludingagency,
			GovDebarredActiveDate = activedate,
			GovDebarredTerminationDate = TerminationDate,
			DateFirstSeen = FORMAT('YYYYMMDD')ActiveDate,
			// DateLastSeen doesn't exist on this file
			Source = src,
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),

	Dataset_YellowPages__kfetch_yellowpages_linkids(
		BusinessSele(
			UltID = ultid,
			OrgID = orgid,
			SeleID = seleid,
			IndustryClass = indstryclass,
			SICCode = sic_code,
			SICCodeOrder = 1,
			NAICSCode = naics_code,
			NAICSCodeOrder = 1,
			DateFirstSeen = FORMAT('YYYYMMDD')pub_date,
			// DateLastSeen doesn't exist in this file
			Source = source,
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		BusinessSele(FILTER((UNSIGNED)sic2 > 0), // Populating SIC Codes 2 through 4
			SICCode = sic2,
			SICCodeOrder = 2,
			DateFirstSeen = FORMAT('YYYYMMDD')pub_date,
			Source = source,
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		BusinessSele(FILTER((UNSIGNED)sic3 > 0),
			SICCode = sic3,
			SICCodeOrder = 3,
			DateFirstSeen = FORMAT('YYYYMMDD')pub_date,
			Source = source,
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		BusinessSele(FILTER((UNSIGNED)sic4 > 0),
			SICCode = sic4,
			SICCodeOrder = 4,
			DateFirstSeen = FORMAT('YYYYMMDD')pub_date,
			Source = source,
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		SelePhoneNumber(FILTER((UNSIGNED)phone10 <> 0  AND (UNSIGNED)seleid<>0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			PhoneNumber = phone10,
			SICCode = sic_code,
			NAICSCode = naics_code,
			RecordType = record_type,
			NoSolicitCode = nosolicitcode,
			DateFirstSeen = FORMAT('YYYYMMDD')pub_date,
			Source = source,
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),			
		ProxPhoneNumber(FILTER((UNSIGNED)phone10 <> 0  AND (UNSIGNED)proxid<>0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			PhoneNumber = phone10,
			SICCode = sic_code,
			NAICSCode = naics_code,
			RecordType = record_type,
			NoSolicitCode = nosolicitcode,
			DateFirstSeen = FORMAT('YYYYMMDD')pub_date,
			Source = source,
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		ProxAddress(FILTER((STRING28)prim_name != '' AND (UNSIGNED3)zip != 0  AND (UNSIGNED)proxid<>0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			SICCode = sic_code,
			NAICSCode = naics_code,
			DateFirstSeen = FORMAT('YYYYMMDD')pub_date,
			Source = source,
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),	
		SeleAddress(FILTER((STRING28)prim_name != '' AND (UNSIGNED3)zip != 0  AND (UNSIGNED)seleid<>0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			SICCode = sic_code,
			NAICSCode = naics_code,
			DateFirstSeen = FORMAT('YYYYMMDD')pub_date,
			Source = source,
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),		
		PERMITS(DPMBitmap)),

	Dataset_Layout_Infutor_NARB__kfetch_LinkIds(
		BusinessSele(
			UltID = ultid,
			OrgID = orgid,
			SeleID = seleid,
			URL = url,
			SICCode = sic1,
			SICCodeOrder = 1,
			BusinessType = business_type,
			BusinessSpecialty = business_specialty,
			NARBSalesCode = sales_code,
			NARBEmployeeCode = employee_code,
			NARBRecordID = record_id,
			Ticker = stock_symbol,
			TickerExchange = stock_exchange,
			CompanyType = normcompany_type,
			IsMinorityOwned = minority,
			IsWomanOwned = woman,
			IsGovermentCompany = government,
			IsSmallCompany = small,
			IsHomeOffice = home_office,
			IsHomeOrSmallOffice = soho,
			IsFranchise = franchise,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		BusinessSele(FILTER((UNSIGNED)sic2 > 0), // Populating SIC Codes 2 through 5
			SICCode = sic2,
			SICCodeOrder = 2,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		BusinessSele(FILTER((UNSIGNED)sic3 > 0),
			SICCode = sic3,
			SICCodeOrder = 3,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		BusinessSele(FILTER((UNSIGNED)sic4 > 0),
			SICCode = sic4,
			SICCodeOrder = 4,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		BusinessSele(FILTER((UNSIGNED)sic5 > 0),
			SICCode = sic5,
			SICCodeOrder = 5,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),	
	
	Dataset_Equifax_Business__Data_kfetch_LinkIDs(
		BusinessSele(
      UltID = ultid,
      OrgID = orgid,
      SeleID = seleid,
      Ticker = efx_tcksym,
      TickerExchange = efx_stkexc,
      URL = efx_web,
      BusinessType = efx_busstat,
      TotalEmployees = efx_corpempcnt,
      TotalSales = efx_corpamount,
      TotalSalesPrecision = efx_corpamountprec,
      SICCode = efx_primsic,
      SICCodeOrder = 1,
      NAICSCode = efx_primnaicscode,
      NAICSCodeOrder = 1,
      //copied from prox
      // ProcessDate = process_date,
      // RecordStatus = record_type,
      EquifaxID = efx_id,
      // IsSmallBusinessHomeOffice = efx_soho,
      // URL = efx_web,
      EmployeeCount = efx_locempcnt,
      // EmployeeCountCode = efx_locempcd,
      FinancialAmountFigure = efx_locamount,
      // FinancialAmountCode = efx_locamountcd,
      // FinancialAmountType = efx_locamounttp,
      // FinancialAmountPrecision = efx_locamountprec,
      // IsDead = efx_dead,
      // DateDead = efx_deaddt,
      // AssociatedAddrCommercial = EFX_BIZ,
      // AssociatedAddrResidential = EFX_RES,
      // GeneralMarketabilityScore = efx_mrkt_totalscore,
      // GeneralMarketabilityIndicator = efx_mrkt_totalind,
      // IsVacant = efx_mrkt_vacant,
      // IsSeasonal = efx_mrkt_seasonal,
      // IsMinorityOwned = efx_mbe,
      // IsWomanOwned = efx_wbe,
      // IsMinorityWomanOwned = efx_mwbe,
      // IsSBADisadvantagedOwned = efx_sdb,
      // IsSBAHUBZone = efx_hubzone,
      // IsDisadvantageOwned = efx_dbe,
      // IsVeteranOwned = efx_vet,
      // IsDisabledVetOwned = efx_dvet,
      // IsSBA8AOwned = efx_8a,
      // SBA8AOwnedDate = efx_8aexpdt,
      // IsDisabledOwned = efx_dis,
      // IsSBE = efx_sbe,
      // IsNotSBE = efx_lbe,
      // IsGoverment = efx_gov,
      // IsFederalGoverment = efx_fgov,
      // MerchantType = efx_merctype,
      // IsHistBlackCollege = efx_hbcu,
      // IsGayLesbianOwned = efx_gaylesbian,
      // IsWomanOwnedSBE = efx_wsbe,
      // IsVeteranOwnedSBE = efx_vsbe,
      // IsDisabledVetOwnedSBE = efx_dvsbe,
      // YearEstablished = EFX_YREST,
      // PublicPrivateIndicator = EFX_PUBLIC,
      // BusinessSize = EFX_BUSSIZE,
      // GovermentType = EFX_GOV1057,
      // IsNonProfit = EFX_NONPROFIT,
      // MinorityWomanStatus = EFX_MWBESTATUS,
      // IsNMSDCCertified = EFX_NMSDC,
      // IsWBENCCertified = EFX_WBENC,
      // IsCaliforniaPUCCertified = EFX_CA_PUC,
      // IsTexasHUBCertified = EFX_TX_HUB,
      // IsCaliforniaCaltransCertified = EFX_CALTRANS,
      // IsEducationalInstitution = EFX_EDU,
      // IsMinorityInstitue = EFX_MI,
      // IsAlaskaNativeCorporation = EFX_ANC,
      //dates
      //DateVendorFirstReported = dt_vendor_first_reported,
      //DateVendorLastReported = dt_vendor_last_reported,
      DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
      DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
      Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
    BusinessSeleOverflow(
      UltID = ultid,
      OrgID = orgid,
      SeleID = seleid,
      EFXNumber = efx_id,
      // DateVendorFirstReported = dt_vendor_first_reported,
      // DateVendorLastReported = dt_vendor_last_reported,
      DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
      DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
      Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		BusinessSele(FILTER((UNSIGNED)efx_secsic1 > 0 OR (UNSIGNED)efx_secnaics1 > 0), // Pulling SIC and NAICS Codes 2 through 5 if populated
			SICCode = efx_secsic1,
			SICCodeOrder = 2,
			NAICSCode = efx_secnaics1,
			NAICSCodeOrder = 2,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		BusinessSele(FILTER((UNSIGNED)efx_secsic2 > 0 OR (UNSIGNED)efx_secnaics2 > 0),
			SICCode = efx_secsic2,
			SICCodeOrder = 3,
			NAICSCode = efx_secnaics2,
			NAICSCodeOrder = 3,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		BusinessSele(FILTER((UNSIGNED)efx_secsic3 > 0 OR (UNSIGNED)efx_secnaics3 > 0),
			SICCode = efx_secsic3,
			SICCodeOrder = 4,
			NAICSCode = efx_secnaics3,
			NAICSCodeOrder = 4,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		BusinessSele(FILTER((UNSIGNED)efx_secsic4 > 0 OR (UNSIGNED)efx_secnaics4 > 0),
			SICCode = efx_secsic4,
			SICCodeOrder = 5,
			NAICSCode = efx_secnaics4,
			NAICSCodeOrder = 5,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		BusinessProx(FILTER((UNSIGNED)proxid<>0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			ProcessDate = process_date,
			RecordStatus = record_type,
			EquifaxID = efx_id,
			IsSmallBusinessHomeOffice = efx_soho,
			URL = efx_web,
			EmployeeCount = efx_locempcnt,
			EmployeeCountCode = efx_locempcd,
			FinancialAmountFigure = efx_locamount,
			FinancialAmountCode = efx_locamountcd,
			FinancialAmountType = efx_locamounttp,
			FinancialAmountPrecision = efx_locamountprec,
			IsDead = efx_dead,
			DateDead = efx_deaddt,
			AssociatedAddrCommercial = EFX_BIZ,
			AssociatedAddrResidential = EFX_RES,
			GeneralMarketabilityScore = efx_mrkt_totalscore,
			GeneralMarketabilityIndicator = efx_mrkt_totalind,
			IsVacant = efx_mrkt_vacant,
			IsSeasonal = efx_mrkt_seasonal,
			IsMinorityOwned = efx_mbe,
			IsWomanOwned = efx_wbe,
			IsMinorityWomanOwned = efx_mwbe,
			IsSBADisadvantagedOwned = efx_sdb,
			IsSBAHUBZone = efx_hubzone,
			IsDisadvantageOwned = efx_dbe,
			IsVeteranOwned = efx_vet,
			IsDisabledVetOwned = efx_dvet,
			IsSBA8AOwned = efx_8a,
			SBA8AOwnedDate = efx_8aexpdt,
			IsDisabledOwned = efx_dis,
			IsSBE = efx_sbe,
			IsNotSBE = efx_lbe,
			IsGoverment = efx_gov,
			IsFederalGoverment = efx_fgov,
			MerchantType = efx_merctype,
			IsHistBlackCollege = efx_hbcu,
			IsGayLesbianOwned = efx_gaylesbian,
			IsWomanOwnedSBE = efx_wsbe,
			IsVeteranOwnedSBE = efx_vsbe,
			IsDisabledVetOwnedSBE = efx_dvsbe,
			YearEstablished = EFX_YREST,
			PublicPrivateIndicator = EFX_PUBLIC,
			BusinessSize = EFX_BUSSIZE,
			GovermentType = EFX_GOV1057,
			IsNonProfit = EFX_NONPROFIT,
			MinorityWomanStatus = EFX_MWBESTATUS,
			IsNMSDCCertified = EFX_NMSDC,
			IsWBENCCertified = EFX_WBENC,
			IsCaliforniaPUCCertified = EFX_CA_PUC,
			IsTexasHUBCertified = EFX_TX_HUB,
			IsCaliforniaCaltransCertified = EFX_CALTRANS,
			IsEducationalInstitution = EFX_EDU,
			IsMinorityInstitue = EFX_MI,
			IsAlaskaNativeCorporation = EFX_ANC,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		ProxAddress(FILTER((STRING28)prim_name != '' AND (UNSIGNED3)zip != 0  AND (UNSIGNED)proxid<>0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			SICCode = efx_primsic,
			NAICSCode = efx_primnaicscode,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),	
		ProxAddress(FILTER((STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)proxid<>0 AND ((UNSIGNED)efx_secsic1 > 0 OR (UNSIGNED)efx_secnaics1 > 0)),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			SICCode = efx_secsic1,
			NAICSCode = efx_secnaics1,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),				
		ProxAddress(FILTER((STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)proxid<>0 AND ((UNSIGNED)efx_secsic2 > 0 OR (UNSIGNED)efx_secnaics2 > 0)),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			SICCode = efx_secsic2,
			NAICSCode = efx_secnaics2,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),				
		ProxAddress(FILTER((STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)proxid<>0 AND ((UNSIGNED)efx_secsic3 > 0 OR (UNSIGNED)efx_secnaics3 > 0)),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			SICCode = efx_secsic3,
			NAICSCode = efx_secnaics3,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),		
		ProxAddress(FILTER((STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)proxid<>0 AND ((UNSIGNED)efx_secsic4 > 0 OR (UNSIGNED)efx_secnaics4 > 0)),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			SICCode = efx_secsic4,
			NAICSCode = efx_secnaics4,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),	
		SeleAddress(FILTER((STRING28)prim_name != '' AND (UNSIGNED3)zip != 0  AND (UNSIGNED)seleid<>0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			SICCode = efx_primsic,
			NAICSCode = efx_primnaicscode,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),	
		SeleAddress(FILTER((STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)seleid<>0 AND ((UNSIGNED)efx_secsic1 > 0 OR (UNSIGNED)efx_secnaics1 > 0)),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			SICCode = efx_secsic1,
			NAICSCode = efx_secnaics1,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),				
		SeleAddress(FILTER((STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)seleid<>0 AND ((UNSIGNED)efx_secsic2 > 0 OR (UNSIGNED)efx_secnaics2 > 0)),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			SICCode = efx_secsic2,
			NAICSCode = efx_secnaics2,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),				
		SeleAddress(FILTER((STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)seleid<>0 AND ((UNSIGNED)efx_secsic3 > 0 OR (UNSIGNED)efx_secnaics3 > 0)),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			SICCode = efx_secsic3,
			NAICSCode = efx_secnaics3,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),		
		SeleAddress(FILTER((STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)seleid<>0 AND ((UNSIGNED)efx_secsic4 > 0 OR (UNSIGNED)efx_secnaics4 > 0)),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			SICCode = efx_secsic4,
			NAICSCode = efx_secnaics4,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),		
		ProxPhoneNumber(FILTER((UNSIGNED)proxid<>0 AND (UNSIGNED)efx_phone != 0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			PhoneNumber = efx_phone,
			IsPhoneMarketable = efx_mrkt_telever,
			PhoneMarketabilityScore = efx_mrkt_telescore,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),	
		SelePhoneNumber(FILTER((UNSIGNED)seleid<>0 AND (UNSIGNED)efx_phone != 0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			PhoneNumber = efx_phone,
			IsPhoneMarketable = efx_mrkt_telever,
			PhoneMarketabilityScore = efx_mrkt_telescore,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),	
		PERMITS(DPMBitmap)),	
	
	Dataset_BIPV2_Build__kfetch_contact_linkids(
		// BusinessSele(FILTER((UNSIGNED)contact_did = 0 AND (UNSIGNED)seleid<>0),
			// UltID = ultid,   
			// OrgID = orgid,    
			// SeleID = seleid, 
			// ContactFirstName = contact_name.fname, 
			// ContactMiddleName = contact_name.mname, 
			// ContactLastName = contact_name.lname, 
			// ContactNameSuffix = contact_name.name_suffix, 
			// ContactSSN = contact_ssn, 
			// ContactPhoneNumber = contact_phone, 
			// ContactScore = contact_score, 
			// ContactType = contact_type_derived, 
			// ContactJobTitle = JobTitle, //use derived if its populated else use raw
			// ContactStatus = Status, //use derived if its populated else use raw
			// ContactIsExecutive = executive_ind, 
			// ContactEmail = contact_email, 
			// ContactEmailUsername = contact_email_username, 
			// ContactEmailDomain = contact_email_domain, 
			// IsContact = TRUE, //marking "contacts" from this key from other keys
			// ContactExecutiveOrder = executive_ind_order, 
			// HeaderHitFlag = TRUE, 
			// //DateVendorLastReported = dt_vendor_last_reported,
			// //DateVendorFirstReported = dt_vendor_first_reported,
			// DateFirstSeenContact = dt_first_seen_contact, 
			// DateLastSeenContact = dt_last_seen_contact, 
			// Source = source,
			// DateFirstSeen = FORMAT('YYYYMMDD'),
			// DateLastSeen = FORMAT('YYYYMMDD'),
			// HybridArchiveDate = FORMAT('YYYYMMDD'),
			// Archive_Date = FORMAT('YYYYMMDD')archive_date),		
		// BusinessSele(FILTER((UNSIGNED)seleid<>0),
			// UltID = ultid,   
			// OrgID = orgid,    
			// SeleID = seleid, 
			// HeaderHitFlag = TRUE, 
			// //DateVendorLastReported = dt_vendor_last_reported,
			// //DateVendorFirstReported = dt_vendor_first_reported,
			// DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen_contact, 
			// DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen_contact, 
			// Source = source),		
		BusinessProx(FILTER((UNSIGNED)contact_did = 0 AND (UNSIGNED)proxid<>0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			ContactFirstName = contact_name.fname, 
			ContactMiddleName = contact_name.mname, 
			ContactLastName = contact_name.lname, 
			ContactNameSuffix = contact_name.name_suffix, 
			ContactSSN = contact_ssn, 
			ContactPhoneNumber = contact_phone, 
			ContactScore = contact_score, 
			ContactType = contact_type_derived, 
			ContactJobTitle = JobTitle, //use derived if its populated else use raw
			ContactStatus = Status, //use derived if its populated else use raw
			ContactIsExecutive = executive_ind, 
			ContactEmail = contact_email, 
			ContactEmailUsername = contact_email_username, 
			ContactEmailDomain = contact_email_domain, 
			IsContact = TRUE, //marking "contacts" from this key from other keys
			ContactExecutiveOrder = executive_ind_order, 
			HeaderHitFlag = TRUE, 
			//DateVendorLastReported = dt_vendor_last_reported,
			//DateVendorFirstReported = dt_vendor_first_reported,
			DateFirstSeen = FORMAT('YYYYMMDD','YYYYMM01')dt_first_seen_contact, 
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01')dt_last_seen_contact, 
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),		
		BusinessProx(FILTER((UNSIGNED)proxid<>0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			HeaderHitFlag = TRUE, 
			//DateVendorLastReported = dt_vendor_last_reported,
			//DateVendorFirstReported = dt_vendor_first_reported,
			DateFirstSeen = FORMAT('YYYYMMDD','YYYYMM01')dt_first_seen_contact, 
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01')dt_last_seen_contact, 
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),		
		ProxPerson(FILTER((UNSIGNED)contact_did > 0 AND (UNSIGNED)proxid<>0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			Contact = contact_did,
			ContactFirstName = contact_name.fname, 
			ContactMiddleName = contact_name.mname,
			LastName = contact_name.lname,
			ContactLastName = contact_name.lname, 
			ContactNameSuffix = contact_name.name_suffix, 
			ContactSSN = contact_ssn, 
			ContactPhoneNumber = contact_phone, 
			ContactScore = contact_score, 
			ContactType = contact_type_derived, 
			ContactEmail = contact_email, 
			ContactEmailUsername = contact_email_username, 
			ContactEmailDomain = contact_email_domain, 
			JobTitle = JobTitle, //use derived if its populated else use raw
			ContactStatus = Status, //use derived if its populated else use raw
			IsExecutive = executive_ind, 
			ExecutiveOrder = executive_ind_order, 
			HeaderHitFlag = TRUE, 
			//DateVendorLastReported = dt_vendor_last_reported,
			//DateVendorFirstReported = dt_vendor_first_reported,
			DateFirstSeen = FORMAT('YYYYMMDD','YYYYMM01')dt_first_seen_contact, 
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01')dt_last_seen_contact, 
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),	
		SelePerson(FILTER((UNSIGNED)contact_did > 0 AND (UNSIGNED)seleid<>0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			Contact = contact_did,
			ContactFirstName = contact_name.fname, 
			ContactMiddleName = contact_name.mname,
			LastName = contact_name.lname,
			ContactLastName = contact_name.lname,
			ContactNameSuffix = contact_name.name_suffix, 
			ContactSSN = contact_ssn, 
			ContactPhoneNumber = contact_phone, 
			ContactScore = contact_score, 
			ContactType = contact_type_derived, 
			ContactEmail = contact_email, 
			ContactEmailUsername = contact_email_username, 
			ContactEmailDomain = contact_email_domain, 
			JobTitle = JobTitle, //use derived if its populated else use raw
			ContactStatus = Status, //use derived if its populated else use raw
			IsExecutive = executive_ind, 
			ExecutiveOrder = executive_ind_order, 
			HeaderHitFlag = TRUE, 
			//DateVendorLastReported = dt_vendor_last_reported,
			//DateVendorFirstReported = dt_vendor_first_reported,
			DateFirstSeen = FORMAT('YYYYMMDD','YYYYMM01')dt_first_seen_contact, 
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01')dt_last_seen_contact, 
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),		
		ProxEmail(FILTER(contact_email <> '' AND (UNSIGNED)proxid<>0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			EmailAddress = contact_email, 
			ContactEmailUsername = contact_email_username, 
			ContactEmailDomain = contact_email_domain, 
			HeaderHitFlag = TRUE, 
			//DateVendorLastReported = dt_vendor_last_reported,
			//DateVendorFirstReported = dt_vendor_first_reported,
			DateFirstSeen = FORMAT('YYYYMMDD','YYYYMM01')dt_first_seen_contact, 
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01')dt_last_seen_contact, 
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		SeleEmail(FILTER(contact_email <> '' AND (UNSIGNED)seleid<>0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			EmailAddress = contact_email, 
			ContactEmailUsername = contact_email_username, 
			ContactEmailDomain = contact_email_domain, 
			HeaderHitFlag = TRUE, 
			//DateVendorLastReported = dt_vendor_last_reported,
			//DateVendorFirstReported = dt_vendor_first_reported,
			DateFirstSeen = FORMAT('YYYYMMDD','YYYYMM01')dt_first_seen_contact, 
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01')dt_last_seen_contact, 
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)), 	

	Dataset_BIPV2_Build__kfetch_contact_linkids_slim(
		// BusinessSele(FILTER((UNSIGNED)seleid<>0),
			// UltID = ultid,   
			// OrgID = orgid,    
			// SeleID = seleid, 
			// HeaderHitFlag = TRUE, 
			// //DateVendorLastReported = dt_vendor_last_reported,
			// //DateVendorFirstReported = dt_vendor_first_reported,
			// DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen_contact, 
			// DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen_contact, 
			// Source = source,
			// HybridArchiveDate = FORMAT('YYYYMMDD'),
			// Archive_Date = FORMAT('YYYYMMDD')archive_date),		
		BusinessProx(FILTER((UNSIGNED)proxid<>0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			HeaderHitFlag = TRUE, 
			//DateVendorLastReported = dt_vendor_last_reported,
			//DateVendorFirstReported = dt_vendor_first_reported,
			DateFirstSeen = FORMAT('YYYYMMDD','YYYYMM01')dt_first_seen_contact, 
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01')dt_last_seen_contact, 
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),		
		ProxPerson(FILTER((UNSIGNED)contact_did > 0 AND (UNSIGNED)proxid<>0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			Contact = contact_did,
			HeaderHitFlag = TRUE, 
			//DateVendorLastReported = dt_vendor_last_reported,
			//DateVendorFirstReported = dt_vendor_first_reported,
			DateFirstSeen = FORMAT('YYYYMMDD','YYYYMM01')dt_first_seen_contact, 
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01')dt_last_seen_contact, 
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),	
		SelePerson(FILTER((UNSIGNED)contact_did > 0 AND (UNSIGNED)seleid<>0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			Contact = contact_did,
			HeaderHitFlag = TRUE, 
			//DateVendorLastReported = dt_vendor_last_reported,
			//DateVendorFirstReported = dt_vendor_first_reported,
			DateFirstSeen = FORMAT('YYYYMMDD','YYYYMM01')dt_first_seen_contact, 
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01')dt_last_seen_contact, 
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),		
		PERMITS(DPMBitmap)), 	
		
	// The BIP Best USE statement on roxie differs from the USE statement on Vault because on Roxie, we use the BIP Best interface to get the business best information.
	// On vault, we access the BIP Best key directly. The BIP Best key and interface returndifferent layouts, requiring modifications to the USE statements.
	Dataset_BIPV2_Best__Key_LinkIds(
		BusinessSele(FILTER(proxid = 0 AND seleid != 0 AND company_name != ''), // In the Best Key, Best information at the SeleID level is stored on records where ProxID = 0.
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			BestCompanyName = company_name,
			BestCompanyNameRank = 1,// BIP Best Rank will always be 1 on Roxie since only one best value is returned by the BIP Best Interface. On Vault, where we use the BIP Best key directly, we will need to choose the record with the lowest rank in our best attribute logic.
			Source = src,		//need dummy source since Vault needs source for permissions but roxie does not have source avaiable
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date), 
		BusinessProx(FILTER(proxid != 0 AND seleid != 0 AND company_name != ''),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			BestCompanyName = company_name,
			BestCompanyNameRank = 1, // BIP Best Rank will always be 1 on Roxie since only one best value is returned by the BIP Best Interface. On Vault, where we use the BIP Best key directly, we will need to choose the record with the lowest rank in our best attribute logic.
			Source = src, 		//need dummy source since Vault needs source for permissions but roxie does not have source avaiable
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		BusinessSele(FILTER(proxid = 0 AND seleid != 0 AND company_sic_code1 <> ''), // In the Best Key, Best information at the SeleID level is stored on records where ProxID = 0.
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			BestSICCode = company_sic_code1,
			BestSICCodeRank = 1, // BIP Best Rank will always be 1 on Roxie since only one best value is returned by the BIP Best Interface. On Vault, where we use the BIP Best key directly, we will need to choose the record with the lowest rank in our best attribute logic.
			Source = src, 		//need dummy source since Vault needs source for permissions but roxie does not have source avaiable
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		BusinessProx(FILTER(proxid != 0 AND seleid != 0 AND company_sic_code1 <> ''),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			BestSICCode = company_sic_code1,
			BestSICCodeRank = 1, // BIP Best Rank will always be 1 on Roxie since only one best value is returned by the BIP Best Interface. On Vault, where we use the BIP Best key directly, we will need to choose the record with the lowest rank in our best attribute logic.	
			Source = src, 		//need dummy source since Vault needs source for permissions but roxie does not have source avaiable
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		BusinessSele(FILTER(proxid = 0 AND seleid != 0 AND company_naics_code1 <> ''), // In the Best Key, Best information at the SeleID level is stored on records where ProxID = 0.
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			BestNAICSCode = company_naics_code1,
			BestNAICSCodeRank = 1, // BIP Best Rank will always be 1 on Roxie since only one best value is returned by the BIP Best Interface. On Vault, where we use the BIP Best key directly, we will need to choose the record with the lowest rank in our best attribute logic.
			Source = src, 		//need dummy source since Vault needs source for permissions but roxie does not have source avaiable
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		BusinessProx(FILTER(proxid != 0 AND seleid != 0 AND company_naics_code1 <> ''),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			BestNAICSCode = company_naics_code1,
			BestNAICSCodeRank = 1, // BIP Best Rank will always be 1 on Roxie since only one best value is returned by the BIP Best Interface. On Vault, where we use the BIP Best key directly, we will need to choose the record with the lowest rank in our best attribute logic.
			Source = src, 		//need dummy source since Vault needs source for permissions but roxie does not have source avaiable
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		SelePhoneNumber(FILTER(proxid = 0 AND seleid != 0 AND company_phone <> ''), // In the Best Key, Best information at the SeleID level is stored on records where ProxID = 0.
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			PhoneNumber = company_phone,
			BestPhone = company_phone,
			BestPhoneRank = 1, // BIP Best Rank will always be 1 on Roxie since only one best value is returned by the BIP Best Interface. On Vault, where we use the BIP Best key directly, we will need to choose the record with the lowest rank in our best attribute logic.
			Source = src, 		//need dummy source since Vault needs source for permissions but roxie does not have source avaiable
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		ProxPhoneNumber(FILTER(proxid != 0 AND seleid != 0 AND company_phone <> ''),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			PhoneNumber = company_phone,
			BestPhone = company_phone,
			BestPhoneRank = 1, // BIP Best Rank will always be 1 on Roxie since only one best value is returned by the BIP Best Interface. On Vault, where we use the BIP Best key directly, we will need to choose the record with the lowest rank in our best attribute logic.
			Source = src, 		//need dummy source since Vault needs source for permissions but roxie does not have source avaiable
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		SeleTIN(FILTER(proxid = 0 AND seleid != 0 AND company_fein <> ''), // In the Best Key, Best information at the SeleID level is stored on records where ProxID = 0.
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			TaxID = company_fein,
			BestTIN = company_fein,
			BestTINRank = 1, // BIP Best Rank will always be 1 on Roxie since only one best value is returned by the BIP Best Interface. On Vault, where we use the BIP Best key directly, we will need to choose the record with the lowest rank in our best attribute logic.
			Source = src, 		//need dummy source since Vault needs source for permissions but roxie does not have source avaiable
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		ProxTIN(FILTER(proxid != 0 AND seleid != 0 AND company_fein <> ''),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			TaxID = company_fein,
			BestTIN = company_fein,
			BestTINRank = 1, // BIP Best Rank will always be 1 on Roxie since only one best value is returned by the BIP Best Interface. On Vault, where we use the BIP Best key directly, we will need to choose the record with the lowest rank in our best attribute logic.
			Source = src, 		//need dummy source since Vault needs source for permissions but roxie does not have source avaiable
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		SeleAddress(FILTER(proxid = 0 AND seleid != 0 AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0), // In the Best Key, Best information at the SeleID level is stored on records where ProxID = 0.
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid,
			PrimaryRange = prim_range, 
			Predirectional = predir, 
			PrimaryName = prim_name, 
			Suffix = addr_suffix, 
			Postdirectional = postdir, 
			SecondaryRange = sec_range,
			ZIP5 = zip,
			BestPrimaryRange = prim_range, 
			BestPredirectional = predir, 
			BestPrimaryName = prim_name, 
			BestSuffix = addr_suffix, 
			BestPostdirectional = postdir, 
			BestUnitDesignation = unit_desig, 
			BestSecondaryRange = sec_range, 
			BestPostalCity = p_city_name, 
			BestVanityCity = v_city_name, 
			BestState = st,
			BestZip5 = zip, 
			BestZip4 = zip4,
			BestAddressRank = 1, // BIP Best Rank will always be 1 on Roxie since only one best value is returned by the BIP Best Interface. On Vault, where we use the BIP Best key directly, we will need to choose the record with the lowest rank in our best attribute logic.
			Source = src, 		//need dummy source since Vault needs source for permissions but roxie does not have source avaiable
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		ProxAddress(FILTER(proxid != 0 AND seleid != 0 AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			PrimaryRange = prim_range, 
			Predirectional = predir, 
			PrimaryName = prim_name, 
			Suffix = addr_suffix, 
			Postdirectional = postdir, 
			SecondaryRange = sec_range,
			ZIP5 = zip,
			BestPrimaryRange = prim_range, 
			BestPredirectional = predir, 
			BestPrimaryName = prim_name, 
			BestSuffix = addr_suffix, 
			BestPostdirectional = postdir, 
			BestUnitDesignation = unit_desig, 
			BestSecondaryRange = sec_range, 
			BestPostalCity = p_city_name, 
			BestVanityCity = v_city_name, 
			BestState = st,
			BestZip5 = zip, 
			BestZip4 = zip4,
			BestAddressRank = 1, // BIP Best Rank will always be 1 on Roxie since only one best value is returned by the BIP Best Interface. On Vault, where we use the BIP Best key directly, we will need to choose the record with the lowest rank in our best attribute logic.
			Source = src, 		//need dummy source since Vault needs source for permissions but roxie does not have source avaiable
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		Address(FILTER((STRING28)prim_name != '' AND (UNSIGNED3)zip != 0),  // Make sure we have something in the Address ENTITY for all best addresses
			PrimaryRange = prim_range, 
			Predirectional = predir, 
			PrimaryName = prim_name, 
			Suffix = addr_suffix, 
			Postdirectional = postdir, 
			SecondaryRange = sec_range,
			ZIP5 = zip,
			Source = src, 		//need dummy source since Vault needs source for permissions but roxie does not have source avaiable
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),

	Dataset_Gong__Key_History_DID(
		PersonPhone(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)phone10 != 0),
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen, // Contains information for ASOF
			Subject = did,
			PhoneNumber = phone10,
			PriorAreaCode = prior_area_code,
			CurrentFlag = current_flag,
			BusinessFlag = business_flag,
			PublishCode = publish_code,
			ListingType = listing_type,
			IsActive = current_record_flag,
			OmitIndicator = omit_phone,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),

	Dataset_Gong__Key_History_Address(
		AddressPhone(FILTER((STRING28)prim_name != '' AND (UNSIGNED3)z5 != 0 AND (UNSIGNED)phone10 != 0),
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen, // Contains information for ASOF
			PhoneNumber = phone10,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = suffix,
			Postdirectional = postdir,
			SecondaryRange = sec_range,
			ZIP5 = z5,
			PriorAreaCode = prior_area_code,
			CurrentFlag = current_flag,
			BusinessFlag = business_flag,
			PublishCode = publish_code,
			ListingType = listing_type,
			IsActive = current_record_flag,
			OmitIndicator = omit_phone,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),

	Dataset_Gong__Key_History_Phone(
		Phone(FILTER((UNSIGNED)phone10 != 0),
			UID = phone10,
			Phone10 = phone10,
			PriorAreaCode = prior_area_code,
			CurrentFlag = current_flag,
			BusinessFlag = business_flag,
			PublishCode = publish_code,
			ListingType = listing_type,
			IsActive = current_record_flag,
			OmitIndicator = omit_phone,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen, // Contains information for ASOF
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),
		
	Dataset_Gong__Key_History_LinkIds(
		ProxPhoneNumber(FILTER((UNSIGNED)phone10 != 0 AND (UNSIGNED)proxid<>0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			PhoneNumber = phone10,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			PriorAreaCode = prior_area_code,
			PublishCode = publish_code,
			CurrentFlag = current_record_flag,
			BusinessFlag = listing_type_bus,
			ListingType = listing_type,
			IsActive = current_record_flag,
			OmitIndicator = omit_phone,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		SelePhoneNumber(FILTER((UNSIGNED)phone10 != 0 AND (UNSIGNED)seleid<>0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			PhoneNumber = phone10,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			PriorAreaCode = prior_area_code,
			CurrentFlag = current_record_flag,
			BusinessFlag = listing_type_bus,
			PublishCode = publish_code,
			ListingType = listing_type,
			IsActive = current_record_flag,
			OmitIndicator = omit_phone,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),		
			Archive_Date = FORMAT('YYYYMMDD')archive_date),		
		BusinessSele(
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			Name = listed_name,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		BusinessProx(FILTER((UNSIGNED)proxid<>0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			Name = listed_name,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		SeleAddress(FILTER((STRING28)prim_name != '' AND (UNSIGNED3)z5 != 0 AND (UNSIGNED)seleid<>0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = suffix,
			Postdirectional = postdir,
			SecondaryRange = sec_range,
			UnitDesignation = unit_desig,
			PostalCity = p_city_name,
			VanityCity = v_city_name,
			State = st,
			ZIP4 = z4,
			ZIP5 = z5,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		ProxAddress(FILTER((STRING28)prim_name != '' AND (UNSIGNED3)z5 != 0 AND (UNSIGNED)proxid<>0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid,
			ProxID = proxid,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = suffix,
			Postdirectional = postdir,
			SecondaryRange = sec_range,
			UnitDesignation = unit_desig,
			PostalCity = p_city_name,
			VanityCity = v_city_name,
			State = st,
			ZIP4 = z4,
			ZIP5 = z5,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),
		
	//only used for verification in the shell today.  
	//if we map in other fields like phone type that can be used in attributes we have to be able to correct the FCRA data and we DO NOT have FCRA correction key for this data
	Dataset_Targus__Key_Phone(
		Phone(FILTER((UNSIGNED)phone_number != 0),
			UID = phone_number,
			Phone10 = phone_number,
			ValidationFlag = validation_flag,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = Src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),

	Dataset_InfutorCID__Key_Phone(
		Phone(FILTER((UNSIGNED)phone <> 0),
			UID = phone,
			Phone10 = phone,
			RecordType = rec_type,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PersonPhone(FILTER((UNSIGNED)did<>0 AND (UNSIGNED)phone <> 0),
			Subject = did,
			PhoneNumber = phone,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),
		
	Dataset_Key_Iverification__Keys_Iverification_Phone(
		Phone(FILTER((UNSIGNED)Phone_Iver != 0),
			UID = phone,
			Phone10 = Phone_Iver,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01')dt_last_seen, // Contains information for ASOF
			RecordType = rec_type,// 1 -individual, 2-spouse, 3-household
			CurrentFlag = current_rec,
			SourceFile = file_source,// 1 -gong, 2-pp above (interal estimated good phone), 3-pp below (interal estimated bad phone)
			IverIndicator = iver_indicator,// 1-did&phone match curr ins, 2-did&phone match hist ins, 3-hhid&phone match curr ins, 4-hhid&phone match hist ins
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)), 
	
	Dataset_Key_Iverification__Keys_Iverification_Did_Phone(
		PersonPhone(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)Phone_Iver != 0),
			Subject = did,
			PhoneNumber = Phone_Iver,
			CurrentFlag = current_rec,
			RecordType = rec_type,// 1 -individual, 2-spouse, 3-household
			SourceFile = file_source,// 1 -gong, 2-pp above (interal estimated good phone), 3-pp below (interal estimated bad phone)
			IverIndicator = iver_indicator,// 1-did&phone match curr ins, 2-did&phone match hist ins, 3-hhid&phone match curr ins, 4-hhid&phone match hist ins
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMMDD','YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)), 

	Dataset_Key_CellPhone__Key_Neustar_Phone(
		Phone(FILTER((UNSIGNED)cellphone <> 0),
			UID = cellphone,
			Phone10 = cellphone,
			Source = Src,
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),

	Dataset_FraudPoint3__Key_Phone(
		Phone(FILTER((UNSIGNED)phone_number <> 0),
			UID = phone_number,
			Phone10 = phone_number,
			RecType = rec_type,
			Source = Src,
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PersonPhone(FILTER((UNSIGNED)appended_lexid != 0 AND (UNSIGNED)phone_number != 0),
			Subject = appended_lexid,
			PhoneNumber = phone_number,
			Source = Src,//source from MDR
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),		
		PERMITS(DPMBitmap)),
	
	Dataset_dx_PhonesInfo__Key_Phones_Type(
		Phone(FILTER((UNSIGNED)phone <> 0),
			UID = phone,
			Phone10 = phone,
			PhoneDateVendorFirstReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')vendor_first_reported_dt,
			PhoneDateVendorLastReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')vendor_last_reported_dt,
			Prepaid = prepaid,
			Serv = serv,
			Line = line,
			Source = Src,//source from dataset
			OriginalSource = source,
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),		
		
	Dataset_dx_PhonesInfo__Key_Phones_Transaction(
		Phone(FILTER((UNSIGNED)phone <> 0),
			UID = phone,
			Phone10 = phone,
			PhoneDateVendorFirstReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')vendor_first_reported_dt,
			PhoneDateVendorLastReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')vendor_last_reported_dt,
			CarrierName = carrier_name,
			Source = Src,
			OriginalSource = source,//source from dataset
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),	
    
	Dataset_PhonesPlus_v2__Key_Source_Level_Payload(
		Phone(FILTER((UNSIGNED)cellphone <> 0),
			UID = cellphone,
			Phone10 = cellphone,
			HouseholdFlag = household_flag,
			DateFirstSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')datefirstseen,
			DateLastSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')datelastseen,
			PhoneDateVendorFirstReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')datevendorfirstreported,
			PhoneDateVendorLastReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')datevendorlastreported,
			OrigPhone = orig_phone,
			OrigCarrierName = orig_carrier_name,
			RecType = rec_type,
			CurrentRec = current_rec,
			IngestTPE = ingest_tpe,
			Verified = verified,
			CordCutter = cord_cutter,
			ActivityStatus = activity_status,
			Prepaid = prepaid,
			Source = Src,
			OriginalSource = source,//source from dataset
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),		
		PersonPhone(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)cellphone != 0),
			Subject = did,
			PhoneNumber = cellphone,
			CurrentFlag = current_rec,
			DateFirstSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')datefirstseen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')datelastseen, // Contains information for ASOF
			Source = Src,//set from mdr for phones plus
			OriginalSource = Source,//source from dataset	
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),	
		// PersonAddress(FILTER((UNSIGNED)did != 0 AND (STRING28)prim_name != '' AND (UNSIGNED3)zip5 != 0),
			// Subject = did,
			// PrimaryName = prim_name,
			// ZIP5 = zip5,
			// ZIP4 = zip4,
			// PrimaryRange = prim_range,
			// SecondaryRange = sec_range,
			// Predirectional = predir,
			// Suffix = addr_suffix,
			// State = state,
			// Postdirectional = postdir,
			// Latitude = geo_lat,
			// Longitude = geo_long,
			// GeoBlk = geo_blk,
			// GeoMmatch = geo_match,
			// PostalCity = p_city_name,
			// DateFirstSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')datefirstseen, // Contains information for ASOF
			// DateLastSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')datelastseen, // Contains information for ASOF
			// Source = Src,
			// HybridArchiveDate = FORMAT('YYYYMMDD'),
			// Archive_Date = FORMAT('YYYYMMDD')archive_date),
		// AddressPhone(FILTER((STRING28)prim_name != '' AND (UNSIGNED3)zip5 != 0 AND (UNSIGNED)cellphone != 0),
			// PrimaryName = prim_name,
			// ZIP5 = zip5,
			// PrimaryRange = prim_range,
			// SecondaryRange = sec_range,
			// Predirectional = predir,
			// Suffix = addr_suffix,
			// Postdirectional = postdir,
			// PhoneNumber = cellphone
			// DateFirstSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')datefirstseen, // Contains information for ASOF
			// DateLastSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')datelastseen, // Contains information for ASOF
			// CurrentFlag = current_rec,
			// Source = Src, //source from MDR
			// OriginalSource = source, // source from dataset
			// HybridArchiveDate = FORMAT('YYYYMMDD'),
			// Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),
		
	Dataset_American_student_list__key_DID(
		Education(
		Sequence = '',
		Key = Key,
		RawAID = '',
		Tier = tier,
		Tier2 = tier2,
		SchoolSizeCode = school_size_code,
		FileType = file_type,
		CompetitiveCode = competitive_code,
		TuitionCode = tuition_code,
		//DateVendorFirstReported = date_vendor_first_reported,
		//DateVendorLastReported = date_vendor_last_reported,
		CollegeName = college_name,
		LNCollegeName = ln_college_name,
		CollegeCode = college_code,
		CollegeType = college_type,
		DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen,
		DateLastSeen = FORMAT('YYYYMMDD')date_last_seen,
		Source = source,
		HybridArchiveDate = FORMAT('YYYYMMDD'),
		Archive_Date = FORMAT('YYYYMMDD')archive_date),
	PersonEducation(FILTER((UNSIGNED)key != 0),
		Sequence = '',
		Key = Key,
		RawAID = '',
		Subject = did,
		ProcessDate = process_date,
		HistoricalFlag = historical_flag,
		Class = class,
		CollegeClass = college_class,
		CollegeMajor = college_major,
		NewCollegeMajor = new_college_major,
		HeadOfHouseholdFirstName = head_of_household_first_name,
		HeadOfHouseholdGenderCode = head_of_household_gender_code,
		HeadOfHouseholdGender =  head_of_household_gender,
		DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen,
		DateLastSeen = FORMAT('YYYYMMDD')date_last_seen,
		Source = source,
		//DateVendorFirstReported = date_vendor_first_reported,
		//DateVendorLastReported = date_vendor_last_reported,
		HybridArchiveDate = FORMAT('YYYYMMDD'),
		Archive_Date = FORMAT('YYYYMMDD')archive_date),	
	PERMITS(DPMBitmap)),

	Dataset_AlloyMedia_student_list__Key_DID(
		Education(
		Sequence = Sequence_Number, 
		Key = key_code,
		RawAID = rawaid,
		Tier = tier,
		Tier2 = tier2,
		SchoolSizeCode = school_size_code,
		FileType = file_type,
		CompetitiveCode = competitive_code,
		TuitionCode = tuition_code,
		//DateVendorFirstReported = date_vendor_first_reported,
		//DateVendorLastReported = date_vendor_last_reported,
		CollegeName = school_name,
		LNCollegeName = ln_college_name,
		CollegeCode = public_private_code,
		CollegeType = public_private_code,
		DateFirstSeen = FORMAT('YYYYMMDD')date_vendor_first_reported,
		DateLastSeen = FORMAT('YYYYMMDD')date_vendor_last_reported,
		Source = source,
		HybridArchiveDate = FORMAT('YYYYMMDD'),
		Archive_Date = FORMAT('YYYYMMDD')archive_date),
	PersonEducation(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)Sequence_Number != 0 AND (UNSIGNED)key_code != 0 AND (UNSIGNED)rawaid != 0),
		Sequence = Sequence_Number, 
		Key = key_code,
		RawAID = rawaid,
		Subject = did,
		ProcessDate = process_date,
		Class = class_rank,
		CollegeMajor = major_code,	
		HeadOfHouseholdFirstName = student_first_name,
		HeadOfHouseholdGender =  gender_code,
		DateFirstSeen = FORMAT('YYYYMMDD')date_vendor_first_reported,
		DateLastSeen = FORMAT('YYYYMMDD')date_vendor_last_reported,
		Source = source,
		//DateVendorFirstReported = date_vendor_first_reported,
		//DateVendorLastReported = date_vendor_last_reported,
		HybridArchiveDate = FORMAT('YYYYMMDD'),
		Archive_Date = FORMAT('YYYYMMDD')archive_date),	
	PERMITS(DPMBitmap)),

//Summary Section

	Dataset_Risk_Indicators__Correlation_Risk__key_addr_name_summary(
		AddressSummary(
			PrimaryName = prim_name,
			PrimaryRange = prim_range,
			Zip = zip,
			NameFirstName = fname,
			NameLastName = lname,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_last_seen,
			NameRecordCount = record_count,
			NameSource = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
	PERMITS (DPMBitmap)),

	Dataset_Risk_Indicators__Correlation_Risk__key_addr_dob_summary(
		AddressSummary(
			PrimaryName = prim_name,
			PrimaryRange = prim_range,
			Zip = zip,
			DobDateOfBirth = dob, //It's only int4 in the raw data. Year is the only applicable thing
			DobDateOfBirthPadded = DOBPadded,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_last_seen,
			DobRecordCount = record_count,
			DobSource = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS (DPMBitmap)),



	Dataset_AVM_V2__Key_AVM_Address(
	 Property(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0),
		PrimaryName = prim_name,
		State = st,
		ZIP5 = zip,
		PrimaryRange = prim_range,
		SecondaryRange = sec_range,
		DateFirstSeen = FORMAT('YYYYMMDD')history_date,
		DateLastSeen = FORMAT('YYYYMMDD')history_date,
		AVMUnformattedAPN = unformatted_apn,
		Predirectional = predir,
		Suffix = suffix,
		Postdirectional = postdir,
		AVMLandUseCode = land_use,
		AVMRecordingDate = recording_date,
		AVMAssessedValueYear = FORMAT('YYYY0101')assessed_value_year,
		AVMSalesPrice = sales_price,
		AVMAssessedTotalValue = assessed_total_value,
		AVMMarketTotalValue = market_total_value,
		AVMTaxAssessmentValuation = tax_assessment_valuation,
		AVMPriceIndexValuation = price_index_valuation,
		AVMHedonicValuation = hedonic_valuation,
		AVMAutomatedValuation = automated_valuation,
		AVMConfidenceScore = confidence_score,
		AVMCurrentFlag = iscurrent,
		Source = src,
		HybridArchiveDate = FORMAT('YYYYMMDD'),
		Archive_Date = FORMAT('YYYYMMDD')archive_date),
	PERMITS(DPMBitmap)),
	
	
//to help with memory limit errors in roxie we are removing fields that are not used.  these are popualted in vault. leave these here for easy additions and viewing
	Dataset_PropertyV2__Key_Assessor_Fid(
	PropertyEvent(FILTER(ln_fares_id != ''),		
		LNFaresID = ln_fares_id,
		IsAssessment = TRUE,
		DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen,
		DateLastSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')date_first_seen,
		// ProcessDate = process_date,
		VendorSourceCode = vendor_source_flag,
		CurrentRecord = current_record,
		// FIPSCode = fips_code,
		// State = state_code,
		// CountyName = county_name,
		// OldAPN = old_apn,
		// APNNumber = apna_or_pin_number,
		// FaresUnformattedAPN = fares_unformatted_apn,
		// DuplicateApnWithDifferentAddressCounter = duplicate_apn_multiple_address_id,
		// AssesseeName = assessee_name,
		// SecondAssesseeName = second_assessee_name,
		// OwnershipMethodCode = assessee_ownership_rights_code,
		// OwnersRelationshipCode = assessee_relationship_code,
		// OwnerPhoneNumber = assessee_phone_number,
		// TaxAccountNumber = tax_account_number,
		// Name1IDCode = assessee_name_type_code,
		// Name2IDCode = second_assessee_name_type_code,
		// MailingCareOfNameTypeCode = mail_care_of_name_type_code,
		// MailingCareOfName = mailing_care_of_name,
		// MailingFullStreetAddress = mailing_full_street_address,
		// MailingUnitNumber = mailing_unit_number,
		MailingCityStateZip = mailing_city_state_zip,
		PropertyFullStreetAddress = property_full_street_address,
		// PropertyAddressUnitNumber = property_unit_number,
		// PropertyAddressCityStateZip = property_city_state_zip,
		// PropertyAddressCountryCode = property_country_code,
		// PropertyAddressCode = property_address_code,
		// LegalLotCode = legal_lot_code,
		// LegalLotNumber = legal_lot_number,
		// LegalLandLot = legal_land_lot,
		// LegalBlock = legal_block,
		// LegalSection = legal_section,
		// LegalDistrict = legal_district,
		// LegalUnit = legal_unit,
		// LegalCityMunicipalityTownship = legal_city_municipality_township,
		// LegalSubdivisionName = legal_subdivision_name,
		// LegalPhaseNumber = legal_phase_number,
		// LegalTractNumber = legal_tract_number,
		// LegalSectionTownshipRangeMeridian = legal_sec_twn_rng_mer,
		// LegalBriefDescription = legal_brief_description,
		// MapReference = legal_assessor_map_ref,
		// CensusTract = census_tract,
		// RecordTypeCode = record_type_code,
		// OwnershipTypeCode = ownership_type_code,
		// NewRecordTypeCode = new_record_type_code,
		// StateLandUseCode = state_land_use_code,
		// CountyLandUseCode = county_land_use_code,
		// CountyLandUseDescription = county_land_use_description,
		StandardizedLandUseCode = standardized_land_use_code,
		// TimeshareCode = timeshare_code,
		// Zoning = zoning,
		OccupantOwned = owner_occupied,
		// DocumentNumber = recorder_document_number,
		// RecorderBookNumber = recorder_book_number,
		// RecorderPageNumber = recorder_page_number,
		// TransferDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')transfer_date,
		RecordingDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')recording_date,
		SaleDate = sale_date,
		DocumentTypeCode = document_type,
		SalePrice = sales_price,
		// SalePriceCode = sales_price_code,
		MortgageAmount = mortgage_loan_amount,
		MortgageType = mortgage_loan_type_code,
		// MortgageLenderName = mortgage_lender_name,
		// LenderIDCode = mortgage_lender_type_code,
		// PriorTransferDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')prior_transfer_date,
		PreviousRecordingDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')prior_recording_date,
		PreviousSalePrice = prior_sales_price,
		// PreviousSalePriceCode = prior_sales_price_code,
		// AssessedLandValue = assessed_land_value,
		// AssessedImprovementValue = assessed_improvement_value,
		AssessedTotalValue = assessed_total_value,
		AssessedValueYear = FORMAT('YYYY0101')assessed_value_year,
		// MarketLandValue = market_land_value,
		// MarketImprovementValue = market_improvement_value,
		MarketTotalValue = market_total_value,
		MarketValueYear = FORMAT('YYYY0101')market_value_year,
		// TaxExemptionCode1 = tax_exemption1_code,
		// TaxExemptionCode2 = tax_exemption2_code,
		// TaxExemptionCode3 = tax_exemption3_code,
		// TaxExemptionCode4 = tax_exemption4_code,
		// TaxRateCodeArea = tax_rate_code_area,
		// TaxAmount = tax_amount,
		TaxYear = FORMAT('YYYY0101')tax_year,
		// TaxDelinquentYear = FORMAT('YYYY0101')tax_delinquent_year,
		// SchoolTaxDistrict1 = school_tax_district1,
		// SchoolTaxDistrict2 = school_tax_district2,
		// SchoolTaxDistrict3 = school_tax_district3,
		// SchoolTaxDistrictIndicator1 = school_tax_district1_indicator,
		// SchoolTaxDistrictIndicator2 = school_tax_district2_indicator,
		// SchoolTaxDistrictIndicator3 = school_tax_district3_indicator,
		LotSize = lot_size,
		// LotSizeAcres = lot_size_acres,
		// LotSizeFrontageFeet = lot_size_frontage_feet,
		// LotSizeDepthFeet = lot_size_depth_feet,
		// LandAcres = land_acres,
		LandSquareFootage = land_square_footage,
		// LandDimensions = land_dimensions,
		BuildingArea = building_area,
		// BuildingArea1 = building_area1,
		// BuildingArea2 = building_area2,
		// BuildingArea3 = building_area3,
		// BuildingArea4 = building_area4,
		// BuildingArea5 = building_area5,
		// BuildingArea6 = building_area6,
		// BuildingArea7 = building_area7,
		// BuildingAreaIndicator = building_area_indicator,
		// BuildingAreaIndicator1 = building_area1_indicator,
		// BuildingAreaIndicator2 = building_area2_indicator,
		// BuildingAreaIndicator3 = building_area3_indicator,
		// BuildingAreaIndicator4 = building_area4_indicator,
		// BuildingAreaIndicator5 = building_area5_indicator,
		// BuildingAreaIndicator6 = building_area6_indicator,
		// BuildingAreaIndicator7 = building_area7_indicator,
		YearBuilt = FORMAT('YYYY0101')year_built,
		EffectiveYearBuilt = FORMAT('YYYY0101')effective_year_built,
		NumberOfBuildings = no_of_buildings,
		NumberOfStories = no_of_stories,
		NumberOfUnits = no_of_units,
		NumberOfRooms = no_of_rooms,
		NumberOfBedrooms = no_of_bedrooms,
		NumberOfBaths = no_of_baths,
		NumberOfPartialBaths = no_of_partial_baths,
		// NumberOfPlumbingFixtures = no_of_plumbing_fixtures,
		GarageTypeCode = garage_type_code,
		ParkingNumberOfCars = parking_no_of_cars,
		// PoolCode = pool_code,
		StyleCode = style_code,
		// TypeConstructionCode = type_construction_code,
		// FoundationCode = foundation_code,
		// BuildingQualityCode = building_quality_code,
		// BuildingConditionCode = building_condition_code,
		// ExteriorWallsCode = exterior_walls_code,
		// InteriorWallsCode = interior_walls_code,
		// RoofCoverCode = roof_cover_code,
		// RoofTypeCode = roof_type_code,
		// FloorCoverCode = floor_cover_code,
		// WaterCode = water_code,
		// SewerCode = sewer_code,
		// HeatingCode = heating_code,
		// HeatingFuelTypeCode = heating_fuel_type_code,
		// AirConditioningCode = air_conditioning_code,
		// AirConditioningTypeCode = air_conditioning_type_code,
		// Elevator = elevator,
		FireplaceIndicator = fireplace_indicator,
		// FireplaceNumber = fireplace_number,
		// BasementCode = basement_code,
		// BuildingClassCode = building_class_code,
		// SiteInfluenceCode1 = site_influence1_code,
		// SiteInfluenceCode2 = site_influence2_code,
		// SiteInfluenceCode3 = site_influence3_code,
		// SiteInfluenceCode4 = site_influence4_code,
		// SiteInfluenceCode5 = site_influence5_code,
		// AmenityCode1 = amenities1_code,
		// AmenityCode2 = amenities2_code,
		// AmenityCode3 = amenities3_code,
		// AmenityCode4 = amenities4_code,
		// AmenityCode5 = amenities5_code,
		// AmenityCode6 = amenities2_code1,
		// AmenityCode7 = amenities2_code2,
		// AmenityCode8 = amenities2_code3,
		// AmenityCode9 = amenities2_code4,
		// AmenityCode10 = amenities2_code5,
		// ExtraFeatureArea1 = extra_features1_area,
		// ExtraFeatureArea2 = extra_features2_area,
		// ExtraFeatureArea3 = extra_features3_area,
		// ExtraFeatureArea4 = extra_features4_area,
		// ExtraFeatureIndicator1 = extra_features1_indicator,
		// ExtraFeatureIndicator2 = extra_features2_indicator,
		// ExtraFeatureIndicator3 = extra_features3_indicator,
		// ExtraFeatureIndicator4 = extra_features4_indicator,
		// OtherBuildingCode1 = other_buildings1_code,
		// OtherBuildingCode2 = other_buildings2_code,
		// OtherBuildingCode3 = other_buildings3_code,
		// OtherBuildingCode4 = other_buildings4_code,
		// OtherBuildingCode5 = other_buildings5_code,
		// OtherImportantBuildingIndicator1 = other_impr_building1_indicator,
		// OtherImportantBuildingIndicator2 = other_impr_building2_indicator,
		// OtherImportantBuildingIndicator3 = other_impr_building3_indicator,
		// OtherImportantBuildingIndicator4 = other_impr_building4_indicator,
		// OtherImportantBuildingIndicator5 = other_impr_building5_indicator,
		// OtherImportantBuildingArea1 = other_impr_building_area1,
		// OtherImportantBuildingArea2 = other_impr_building_area2,
		// OtherImportantBuildingArea3 = other_impr_building_area3,
		// OtherImportantBuildingArea4 = other_impr_building_area4,
		// OtherImportantBuildingArea5 = other_impr_building_area5,
		// TopographyCode = topograpy_code,
		// NeighborhoodCode = neighborhood_code,
		// CondoProjectOrBuildingName = condo_project_or_building_name,
		// AssesseeNameIndicator = assessee_name_indicator,
		// SecondAssesseeNameIndicator = second_assessee_name_indicator,
		// OtherRoomsIndicator = other_rooms_indicator,
		// MailCareOfNameIndicator = mail_care_of_name_indicator,
		// Comments = comments,
		TapeCutDate = FORMAT('YYYYMM01')tape_cut_date,
		CertificationDate = certification_date,
		// EditionNumber = edition_number,
		// PropertyAddressPropegatedIndicator = prop_addr_propagated_ind,
		// LNOwnershipRights = ln_ownership_rights,
		// LNRelationshipType = ln_relationship_type,
		// LNMailingCountryCode = ln_mailing_country_code,
		// LNPropertyName = ln_property_name,
		// LNPropertyNameType = ln_property_name_type,
		// LNLandUseCategory = ln_land_use_category,
		// LNLotNumber = ln_lot,
		// LNBlockNumber = ln_block,
		// LNUnitNumber = ln_unit,
		// LNSubfloor = ln_subfloor,
		LNMobileHomeIndicator = ln_mobile_home_indicator,
		LNCondoIndicator = ln_condo_indicator,
		LNPropertyTaxExemptionIndicator = ln_property_tax_exemption,
		// LNVeteranStatus = ln_veteran_status,
		Source = src,
		HybridArchiveDate = FORMAT('YYYYMMDD'),
		Archive_Date = FORMAT('YYYYMMDD')archive_date),
	PERMITS(DPMBitmap)),

//to help with memory limit errors in roxie we are removing fields that are not used.  these are popualted in vault. leave these here for easy additions and viewing	
	Dataset_PropertyV2__Key_Deed_Fid_Fid(
	PropertyEvent(FILTER(ln_fares_id != ''),		
		LNFaresID = ln_fares_id,
		IsDeed = TRUE,
		DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen,
		DateLastSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')date_first_seen,
		ProcessDate = process_date,
		VendorSourceCode = vendor_source_flag,
		CurrentRecord = current_record,
		// SourceFile = from_file,
		// FIPSCode = fips_code,
		// State = state,
		// CountyName = county_name,
		// OwnershipTypeCode = record_type,
		// APNNumber = apnt_or_pin_number,
		// FaresUnformattedAPN = fares_unformatted_apn,
		// MultiAPNFlag = multi_apn_flag,
		// TaxNumber = tax_id_number,
		BuyerOrBorrowerOrAssessee = buyer_or_borrower_ind,
		Name1 = name1,
		// Name1Code = name1_id_code,
		Name2 = name2,
		// Name2Code = name2_id_code,
		// BuyerBorrowerVestingCode = vesting_code,
		// BuyerBorrowerAddendumFlag = addendum_flag,
		// OwnerPhoneNumber = phone_number,
		// MailingCareOf = mailing_care_of,
		// MailingStreet = mailing_street,
		// MailingUnitNumber = mailing_unit_number,
		MailingCityStateZip = mailing_csz,
		// Seller1 = seller1,
		// Seller1IDCode = seller1_id_code,
		// Seller2 = seller2,
		// Seller2IDCode = seller2_id_code,
		// SellerAddendumFlag = seller_addendum_flag,
		// SellerMailingFullStreetAddress = seller_mailing_full_street_address,
		// SellerMailingAddressUnitNumber = seller_mailing_address_unit_number,
		// SellerMailingAddressCityStateZip = seller_mailing_address_citystatezip,
		PropertyFullStreetAddress = property_full_street_address,
		// PropertyAddressUnitNumber = property_address_unit_number,
		PropertyAddressCityStateZip = property_address_citystatezip,
		// PropertyAddressCode = property_address_code,
		// LegalLotCode = legal_lot_code,
		// LegalLotNumber = legal_lot_number,
		// LegalBlock = legal_block,
		// LegalSection = legal_section,
		// LegalDistrict = legal_district,
		// LegalLandLot = legal_land_lot,
		// LegalUnit = legal_unit,
		// LegalCityMunicipalityTownship = legal_city_municipality_township,
		// LegalSubdivisionName = legal_subdivision_name,
		// LegalPhaseNumber = legal_phase_number,
		// LegalTractNumber = legal_tract_number,
		// LegalSectionTownshipRangeMeridian = legal_sec_twn_rng_mer,
		// LegalBriefDescription = legal_brief_description,
		// MapReference = recorder_map_reference,
		// LegalCompleteDescriptionCode = complete_legal_description_code,
		ContractDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')contract_date,
		RecordingDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')recording_date,
		// AdjustableRateMortgageResetDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')arm_reset_date,
		// DocumentNumber = document_number,
		DocumentTypeCode = document_type_code,
		// LoanNumber = loan_number,
		// RecorderBookNumber = recorder_book_number,
		// RecorderPageNumber = recorder_page_number,
		// ConcurrentMortgageBookPageDocumentNumber = concurrent_mortgage_book_page_document_number,
		SalePrice = sales_price,
		// SalePriceCode = sales_price_code,
		// CityTransferTax = city_transfer_tax,
		// CountyTransferTax = county_transfer_tax,
		// TotalTransferTax = total_transfer_tax,
		// PrimaryLoanAmount = first_td_loan_amount,
		// SecondaryLoanAmount = second_td_loan_amount,
		// PrimaryLoanLenderTypeCode = first_td_lender_type_code,
		// SecondaryLoanLenderTypeCode = second_td_lender_type_code,
		// PrimaryLoanTypeCode = first_td_loan_type_code,
		// TypeFinancing = type_financing,
		// PrimaryLoanInterestRate = first_td_interest_rate,
		// PrimaryLoanDueDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')first_td_due_date,
		// TitleCompanyName = title_company_name,
		// PartialInterestTransferred = partial_interest_transferred,
		// LoanTermMonths = loan_term_months,
		// LoanTermYears = loan_term_years,
		// LenderName = lender_name,
		// LenderIDCode = lender_name_id,
		// LenderDBAName = lender_dba_aka_name,
		// LenderFullStreetAddress = lender_full_street_address,
		// LenderAddressUnitNumber = lender_address_unit_number,
		// LenderAddressCityStateZip = lender_address_citystatezip,
		// StandardizedLandUseCode = assessment_match_land_use_code,
		// PropertyUseCode = property_use_code,
		// CondoCode = condo_code,
		TimeshareFlag = timeshare_flag,
		LandLotSize = land_lot_size,
		// RateChangeFrequency = rate_change_frequency,
		// ChangeIndex = change_index,
		// AdjustableRateIndex = adjustable_rate_index,
		// AdjustableRateRider = adjustable_rate_rider,
		// GraduatedPaymentRider = graduated_payment_rider,
		// BalloonRider = balloon_rider,
		// FixedStepRateRider = fixed_step_rate_rider,
		// CondominiumRider = condominium_rider,
		// PlannedUnitDevelopmentRider = planned_unit_development_rider,
		// AssumabilityRider = assumability_rider,
		// PrepaymentRider = prepayment_rider,
		// OneFourFamilyRider = one_four_family_rider,
		// BiweeklyPaymentRider = biweekly_payment_rider,
		// SecondHomeRider = second_home_rider,
		// DataSourceCode = data_source_code,
		// TypeOfDeedCode = main_record_id_code,
		AdditionalNameFlag = addl_name_flag,
		// PropertyAddressPropegatedIndicator = prop_addr_propagated_ind,
		// LNOwnershipRights = ln_ownership_rights,
		// LNRelationshipType = ln_relationship_type,
		// LNBuyerMailingCountryCode = ln_buyer_mailing_country_code,
		// LNSellerMailingCountryCode = ln_seller_mailing_country_code,
		Source = src,
		HybridArchiveDate = FORMAT('YYYYMMDD'),
		Archive_Date = FORMAT('YYYYMMDD')archive_date),
	PERMITS(DPMBitmap)),

//to help with memory limit errors in roxie we are removing fields that are not used.  these are popualted in vault. leave these here for easy additions and viewing
	Dataset_PropertyV2__Key_Search_Fid(
	Property(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND propertyaddress),
		PrimaryRange = prim_range,
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = suffix,
		Postdirectional = postdir,
		UnitDesignation = unit_desig,
		SecondaryRange = sec_range,
		PostalCity = p_city_name,
		VanityCity = v_city_name,
		State = st,
		ZIP5 = zip,
		// //DateVendorFirstReported = FORMAT('YYYYMM01')dt_vendor_first_reported,
		// //DateVendorLastReported = FORMAT('YYYYMM01')dt_vendor_last_reported,
		Source = src,
		DateFirstSeen = FORMAT('YYYYMMDD'),
		DateLastSeen = FORMAT('YYYYMMDD'),
		HybridArchiveDate = FORMAT('YYYYMMDD'),
		Archive_Date = FORMAT('YYYYMMDD')archive_date),
	PropertyEvent(FILTER(ln_fares_id != '' AND propertyaddress),
		LNFaresID = ln_fares_id,
		PrimaryRange = prim_range,
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = suffix,
		Postdirectional = postdir,
		SecondaryRange = sec_range,
		ZIP5 = zip,
		VendorSourceCode = vendor_source_flag,
		// //DateVendorFirstReported = FORMAT('YYYYMM01')dt_vendor_first_reported,
		// //DateVendorLastReported = FORMAT('YYYYMM01')dt_vendor_last_reported,
		Source = src,
		DateFirstSeen = FORMAT('YYYYMMDD'),
		DateLastSeen = FORMAT('YYYYMMDD'),
		HybridArchiveDate = FORMAT('YYYYMMDD'),  
    Archive_Date = FORMAT('YYYYMMDD')archive_date),		
	 PersonPropertyEvent(FILTER(did != 0 AND ln_fares_id != ''),
		Subject = did,
		LNFaresID = ln_fares_id,
		// PersonNumber = which_orig,
		// ConjunctiveNameSequence = conjunctive_name_seq,
		FirstName = fname,
		LastName = lname,
		PartyIsBuyerOrOwner = partyisbuyerorowner,
		PartyIsBorrower = partyisborrower,
		PartyIsSeller = partyisseller,
		PartyIsCareOf = partyiscareof,
		// //DateVendorFirstReported = FORMAT('YYYYMM01')dt_vendor_first_reported,
		// //DateVendorLastReported = FORMAT('YYYYMM01')dt_vendor_last_reported,
	  VendorSourceCode = vendor_source_flag,
		// ProcessDate = process_date,
		Source = src,
		DateFirstSeen = FORMAT('YYYYMMDD'),
		DateLastSeen = FORMAT('YYYYMMDD'),
		HybridArchiveDate = FORMAT('YYYYMMDD'),
		Archive_Date = FORMAT('YYYYMMDD')archive_date),
	PersonProperty(FILTER(did != 0 AND (STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0),
		Subject = did,
		PrimaryRange = prim_range,
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = suffix,
		Postdirectional = postdir,
		UnitDesignation = unit_desig,
		SecondaryRange = sec_range,
		PostalCity = p_city_name,
		VanityCity = v_city_name,
		State = st,
		ZIP5 = zip,
		// //DateVendorFirstReported = FORMAT('YYYYMM01')dt_vendor_first_reported,
		// //DateVendorLastReported = FORMAT('YYYYMM01')dt_vendor_last_reported,
		VendorSourceCode = vendor_source_flag,
		// ProcessDate = process_date,
		Source = src,
		DateFirstSeen = FORMAT('YYYYMMDD'),
		DateLastSeen = FORMAT('YYYYMMDD'),
		HybridArchiveDate = FORMAT('YYYYMMDD'),
		Archive_Date = FORMAT('YYYYMMDD')archive_date),
	SelePropertyEvent(FILTER(ultid != 0 AND orgid != 0 AND seleid != 0 AND ln_fares_id != ''),
		UltID = ultid,
		OrgID = orgid,
		SeleID = seleid,
		LNFaresID = ln_fares_id,
		// PersonNumber = which_orig,
		// ConjunctiveNameSequence = conjunctive_name_seq,
		PartyIsBuyerOrOwner = partyisbuyerorowner,
		PartyIsBorrower = partyisborrower,
		PartyIsSeller = partyisseller,
		PartyIsCareOf = partyiscareof,
		// //DateVendorFirstReported = FORMAT('YYYYMM01')dt_vendor_first_reported,
		// //DateVendorLastReported = FORMAT('YYYYMM01')dt_vendor_last_reported,
		VendorSourceCode = vendor_source_flag,
		// ProcessDate = process_date,
		Source = src,
		DateFirstSeen = FORMAT('YYYYMMDD'),
		DateLastSeen = FORMAT('YYYYMMDD'),
		HybridArchiveDate = FORMAT('YYYYMMDD'),
		Archive_Date = FORMAT('YYYYMMDD')archive_date),
	SeleProperty(FILTER(ultid != 0 AND orgid != 0 AND seleid != 0 AND (STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0),
		UltID = ultid,
		OrgID = orgid,
		SeleID = seleid,
		PrimaryRange = prim_range,
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = suffix,
		Postdirectional = postdir,
		UnitDesignation = unit_desig,
		SecondaryRange = sec_range,
		PostalCity = p_city_name,
		VanityCity = v_city_name,
		State = st,
		ZIP5 = zip,
		// //DateVendorFirstReported = FORMAT('YYYYMM01')dt_vendor_first_reported,
		// //DateVendorLastReported = FORMAT('YYYYMM01')dt_vendor_last_reported,
		VendorSourceCode = vendor_source_flag,
		// ProcessDate = process_date,
		Source = src,
		DateFirstSeen = FORMAT('YYYYMMDD'),
		DateLastSeen = FORMAT('YYYYMMDD'),
		HybridArchiveDate = FORMAT('YYYYMMDD'),  
    Archive_Date = FORMAT('YYYYMMDD')archive_date),
	AddressPropertyEvent(FILTER(ln_fares_id != '' AND (STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0),
		LNFaresID = ln_fares_id,
		PrimaryRange = prim_range,
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = suffix,
		Postdirectional = postdir,
		SecondaryRange = sec_range,
		ZIP5 = zip,
		IsOwnerAddress = owneraddress,
		IsSellerAddress = selleraddress,
		IsPropertyAddress = propertyaddress,
		IsBorrowerAddress = borroweraddress, 
		// //DateVendorFirstReported = FORMAT('YYYYMM01')dt_vendor_first_reported,
		// //DateVendorLastReported = FORMAT('YYYYMM01')dt_vendor_last_reported,
		VendorSourceCode = vendor_source_flag,
		// ProcessDate = process_date,
		Source = src,
		DateFirstSeen = FORMAT('YYYYMMDD'),
		DateLastSeen = FORMAT('YYYYMMDD'),
		HybridArchiveDate = FORMAT('YYYYMMDD'),
		Archive_Date = FORMAT('YYYYMMDD')archive_date),
	AddressProperty(FILTER(propertyaddress AND ln_fares_id != '' AND (STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0),
		PrimaryRange = prim_range,
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = suffix,
		Postdirectional = postdir,
		UnitDesignation = unit_desig,
		SecondaryRange = sec_range,
		PostalCity = p_city_name,
		VanityCity = v_city_name,
		State = st,
		ZIP5 = zip,
		// //DateVendorFirstReported = FORMAT('YYYYMM01')dt_vendor_first_reported,
		// //DateVendorLastReported = FORMAT('YYYYMM01')dt_vendor_last_reported,
		VendorSourceCode = vendor_source_flag,
		// ProcessDate = process_date,
		Source = src,
		DateFirstSeen = FORMAT('YYYYMMDD'),
		DateLastSeen = FORMAT('YYYYMMDD'),
		HybridArchiveDate = FORMAT('YYYYMMDD'),
		Archive_Date = FORMAT('YYYYMMDD')archive_date),
	PERMITS(DPMBitmap)), 
	
	Dataset_RiskWise__key_CityStZip(
	ZipCode(
		UID = Zip5,
		ZipClass = ZipClass,
		City = City,
		State = State,
		County = County,
		CityName = prefctystname,
		Source = src,
		DateFirstSeen = FORMAT('YYYYMMDD'),
		DateLastSeen = FORMAT('YYYYMMDD'),
		HybridArchiveDate = FORMAT('YYYYMMDD'),
		Archive_Date = FORMAT('YYYYMMDD')archive_date),
	PERMITS(DPMBitmap)),
	
	Dataset_Death_MasterV2__key_ssn_ssa(
		SocialSecurityNumber(FILTER((UNSIGNED)ssn != 0),
			UID = ssn,
			DateOfDeath = dod8,
			DeathMasterFlag = TRUE,
			IssueState = state,
			Source = src,
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PersonSSN(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)ssn != 0),
			Subject = did,
			Social = ssn,
			DeathMasterFlag = TRUE,
			Source = src,
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),	
	
	Dataset_Fraudpoint3__Key_SSN(
		PersonSSN(FILTER((unsigned)appended_lexid!=0 AND (unsigned) ssn != 0),
			Subject = appended_lexid,
			Social = ssn,
			FDNIndicator = TRUE,
			Source = src,
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		SSNAddress(FILTER((STRING28)prim_name != '' AND (UNSIGNED)zip != 0 AND (UNSIGNED)ssn != 0),
			Social = ssn,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			FDNIndicator = TRUE,
			Source = src,
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),

	Dataset_LiensV2_key_liens_main_ID_Records(
		LienJudgment(
			TMSID = tmsid,
			RMSID = rmsid,
			FilingNumber = filing_number,
			OriginalFilingNumber = orig_filing_number,
			FilingTypeDescription = filing_type_desc,
			Amount = amount,
			LandlordTenantDisputeFlag = eviction,
			CertificateNumber = certificate_number,
			IRSSerialNumber = irs_serial_number,
			CaseNumber = case_number,
			CaseLinkID = caselinkid,
			FilingBook = filing_book,
			FilingPage = filing_page,
			FilingState = filing_state,
			FilingStatusDescription = filingstatusdescription,
			AgencyID = agencyid,
			Agency = agency,
			AgencyCounty = agency_county,
			AgencyState = agency_state,
			SentToCreditBureauFlag = bcbflag,
			SatisfactionType = satisifaction_type,
			OriginalFilingDate = orig_filing_date,
			CollectionDate = collection_date,
			EffectiveDate = effective_date,
			ExpirationDate = expiration_date,
			LapseDate = lapse_date,
			ProcessDate = process_date,
			// DateFirstSeen = FORMAT('YYYYMMDD')release_date, // Due to legal concerns around the accuracy of release_date we are opting not to utilize that field
			Source = src,
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),

	Dataset_LiensV2_Key_Liens_Party_ID_Records(
		PersonLienJudgment(FILTER(name_type IN ['D', 'C']), // Filter to only keep Debtor and Plaintiff records
			Subject = DID,
			TMSID = tmsid,
			RMSID = rmsid,
			DebtorPlaintiff = name_type,
			SubjectsFullName = SubjectsName,
			//DateVendorFirstReported = date_vendor_first_reported,
			//DateVendorLastReported = date_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMMDD')date_last_seen, // Contains information for ASOF
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),

	Dataset_LiensV2__Key_party_Linkids_Records(
		SeleLienJudgment(
			UltID = ultid,
			OrgID = orgid,
			SeleID = seleid,
			TMSID = tmsid,
			RMSID = rmsid,
			DebtorPlaintiff = name_type,
			DebtorsFullName = orig_full_debtorname,
			//DateVendorFirstReported = date_vendor_first_reported,
			//DateVendorLastReported = date_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMMDD')date_last_seen, // Contains information for ASOF
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),
	
	Dataset_FLAccidents_Ecrash__Key_ECrash4(
		Accident(FILTER( l_acc_nbr NOT IN ['','0']),
			AccidentNumber = l_acc_nbr,
			IncidentCity = vehicle_incident_city, 
			IncidentState = vehicle_incident_st, 
			ReportCode = report_code,
			ReportCategory = report_category, 
			ReportCodeDescription = report_code_desc, 
			Source = src,
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD','YYYY0101'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PersonAccident(FILTER((UNSIGNED)did <> 0 AND l_acc_nbr NOT IN ['','0']),
			AccidentNumber = l_acc_nbr,
			Subject = did,
			PointOfImpact = point_of_impact,
			DriverBACTestType = driver_bac_test_type,
			DriverBACTestResults = driver_bac_test_results,
			DriverAlcoholDrugCode = driver_alco_drug_code,
			DriverPhysicalDefects = driver_physical_defects,
			DriverResidence = driver_residence,
			DriverInjurySeverity = driver_injury_severity,
			FirstDriverSafety = first_driver_safety,
			SecondDriverSafety = second_driver_safety,
			DriverEjectCode = driver_eject_code,
			RecommendReexam = recommand_reexam,
			FirstContributingCause = first_contrib_cause,
			SecondContributingCause = second_contrib_cause,
			ThirdContributingCause = third_contrib_cause,
			Source = src,
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD','YYYY0101'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),
		
	Dataset_FLAccidents_Ecrash__key_EcrashV2_accnbr(
		Accident(FILTER(l_accnbr NOT IN ['','0']),
			AccidentNumber = l_accnbr,
			ReportCode = report_code,
			JurisdictionState = jurisdiction_state,
			Jurisdiction = jurisdiction,
			AccidentDate = accident_date,
			ReportCodeDescription = report_code_desc,
			ReportCategory = report_category,
			AccidentLocation = accident_location,
			AccidentStreet = accident_street,
			AccidentCrossStreet = accident_cross_street,
			NextStreet = next_street,
			JurisdictionNumber = jurisdiction_nbr,
			ReportHasCoverSheet = report_has_coversheet,
			IncidentCity = vehicle_incident_city,
			IncidentState = vehicle_incident_st,
			AdditionalReportNumber = addl_report_number,
			ReportStatus = report_status,
			//DateVendorLastReported = date_vendor_last_reported,
			ReportTypeID = report_type_id,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD','YYYY0101')dt_last_seen,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),		
		PersonAccident(FILTER((UNSIGNED)did <> 0 AND l_accnbr NOT IN ['','0']),
			AccidentNumber = l_accnbr,
			Subject = did,
			VehicleIncidentID = vehicle_incident_id,
			VehicleStatus = vehicle_status,
			RecordType = record_type,
			AirbagsDeploy = airbags_deploy,
			Towed = towed,
			ImpactLocation = impact_location,
			VehicleOwnerDriverCode = vehicle_owner_driver_code,
			VehicleDriverAction = vehicle_driver_action,
			VehicleTravelOn = vehicle_travel_on,
			DirectionOfTravel = direction_travel,
			EstimatedVehicleSpeed = est_vehicle_speed,
			PostedSpeed = posted_speed,
			EstimatedVehicleDamage = est_vehicle_damage,
			DamageType = damage_type,
			VehicleRemovedBy = vehicle_removed_by,
			HowRemovedCode = how_removed_code,
			PointOfImpact = point_of_impact,
			VehicleMovement = vehicle_movement,
			VehicleFunction = vehicle_function,
			VehicleFirstDefect = vehs_first_defect,
			VehicleSecondDefect = vehs_second_defect,
			VehicleRoadwayLocation = vehicle_roadway_loc,
			HazardousMaterialTransport = hazard_material_transport,
			TotalOccupancyVehicle = total_occu_vehicle,
			TotalOccupancySafetyEquipment = total_occu_saf_equip,
			MovingViolation = moving_violation,
			VehicleFaultCode = vehicle_fault_code,
			VehicleInsuredCode = vehicle_insur_code,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD','YYYY0101')dt_last_seen,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),	
	
	//best person data is not archivable do not map dates for filtering from these keys
	Dataset_Best_Person__Key_Watchdog(
		Person(FILTER((UNSIGNED)rec.did != 0),
			UID= rec.did,
			Title = rec.title,
			FirstName =rec.fname,
			MiddleName = rec.mname,
			LastName = rec.lname,
			NameSuffix = rec.name_suffix,
			DateOfBirth = rec.dob,
			DateOfBirthPadded = DOBPadded,
			DateOfDeath = rec.dod,
			HeaderHitFlag = FALSE,
			Best = TRUE,
			Source = src,
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')),
		PersonSSN(FILTER((UNSIGNED)rec.did != 0 AND (UNSIGNED)rec.ssn != 0),
			Subject = rec.did,
			Social = rec.ssn,
			HeaderHitFlag = FALSE,
			Source = src,
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')),
		PersonPhone(FILTER((UNSIGNED)rec.did != 0 AND (UNSIGNED)rec.phone != 0),
			Subject = rec.did,
			PhoneNumber = rec.phone,
			HeaderHitFlag = FALSE,
			Source = src,
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')),
		PERMITS(DPMBitmap)),
	
	//best person data is not archivable do not map dates for filtering from these keys
	Dataset_Best_Person__Key_Watchdog_FCRA_nonEN(
		Person(FILTER((UNSIGNED)did != 0),
			UID=did,
			Title = title,
			FirstName = fname,
			MiddleName = mname,
			LastName = lname,
			NameSuffix = name_suffix,
			DateOfBirth = dob,
			DateOfBirthPadded = DOBPadded,
			DateOfDeath = dod,
			HeaderHitFlag = FALSE,
			Best = TRUE,
			Source = src,
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')),
		PersonSSN(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)ssn != 0),
			Subject = did,
			Social = ssn,
			HeaderHitFlag = FALSE,
			Source = src,
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')),
		PersonPhone(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)phone != 0),
			Subject = did,
			PhoneNumber = phone,
			HeaderHitFlag = FALSE,
			Source = src,
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')),
		PERMITS(DPMBitmap)),
	
	//best person data is not archivable do not map dates for filtering from these keys
	Dataset_Best_Person__Key_Watchdog_FCRA_nonEQ(
		Person(FILTER((UNSIGNED)did != 0),
			UID=did,
			Title = title,
			FirstName = fname,
			MiddleName = mname,
			LastName = lname,
			NameSuffix = name_suffix,
			DateOfBirth = dob,
			DateOfBirthPadded = DOBPadded,
			DateOfDeath = dod,
			HeaderHitFlag = FALSE,
			Best = TRUE,
			Source = src,
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')),
		PersonSSN(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)ssn != 0),
			Subject = did,
			Social = ssn,
			HeaderHitFlag = FALSE,
			Source = src,
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')),
		PersonPhone(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)phone != 0),
			Subject = did,
			PhoneNumber = phone,
			HeaderHitFlag = FALSE,
			Source = src,
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')),
		PERMITS(DPMBitmap)),
	 
	Dataset_dx_CFPB_key_Census_Surnames(
		Surname(
			Surname = name,
			IsLatest = is_latest,
			NameRank = name_rank,
			NameCount = name_count,
			Prop100K = prop100k,
			CumulativeProp100K = cum_prop100k,
			PercentWhite = pctwhite,
			PercentBlack = pctblack,
			PercentAsianPacificIslander = pctapi,
			PercentAmericanIndianAlaskaNative = pctaian,
			PercentMultiracial = pct2prace,
			PercentHispanic = pcthispanic,
			// DateVendorFirstReported = dt_vendor_first_reported,
			Source = src,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_vendor_first_reported,
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')),
		PERMITS (DPMBitmap)),
		
	Dataset_dx_Header__key_did_hhid(  //Archive Date Not supported
		HouseholdMember(
			Subject = did,
			Household = hhid_relat,
			Version = ver,
			Source = src,
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),
	
	Dataset_dx_Header__key_hhid_did(  //Archive Date Not supported
		Household(
			UID = hhid_relat,
			Source = src,
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		HouseholdMember(
			Subject = did,
			Household = hhid_relat,
			Version = ver,
			Source = src,
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),
	
	Dataset_dx_ConsumerFinancialProtectionBureau__Key_BLKGRP(
		GeoLink(
			GeoLink = geoid10_blkgrp,	
			IsLatest = is_latest,
			StateFips10 = state_fips10,
			CountyFips10 = county_fips10,
			TractFips10 = tract_fips10,
			BlockGroupFips10 = blkgrp_fips10,
			TotalPopulation = total_pop,
			HispanicTotal = hispanic_total,
			NonHispanicTotal = non_hispanic_total,
			NonHispanicWhiteAlone =	nh_white_alone,
			NonHispanicBlackAlone = nh_black_alone,
			NonHispanicAmericanIndianAlaskaNativeAlone = nh_aian_alone,
			NonHispanicAsianPacificIslanderAlone = nh_api_alone,
			NonHispanicOtherAlone = nh_other_alone,
			NonHispanicMultiracialAlone = nh_mult_total,
			NonHispanicWhiteOther = nh_white_other,
			NonHispanicBlackOther = nh_black_other,
			NonHispanicAmericanIndianAlaskaNativeOther = nh_aian_other,
			NonHispanicAsianOther = nh_asian_hpi,
			NonHispanicAsianPacificIslanderOther = nh_api_other,
			NonHispanicAsianHawaiianPacificIslanderOther = nh_asian_hpi_other,
			// DateVendorFirstReported = dt_vendor_first_reported,
			Source = src,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_vendor_first_reported,
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')),
		PERMITS (DPMBitmap)),	

	Dataset_dx_ConsumerFinancialProtectionBureau__key_BLKGRP_attr_over18(
		GeoLink(
			GeoLink = geoind,
			IsLatest = is_latest,
			GeoPercentWhite = geo_pr_white,
			GeoPercentBlack = geo_pr_black,
			GeoPercentAmericanIndianAlaskaNative = geo_pr_aian,
			GeoPercentAsianPacificIslander = geo_pr_api,
			GeoPercentMultiracial = geo_pr_mult_other,
			GeoPercentHispanic = geo_pr_hispanic,
			Here = here,
			HereGivenWhite = here_given_white,
			HereGivenBlack = here_given_black,
			HereGivenAmericanIndianAlaskaNative = here_given_aian,
			HereGivenAsianPacificIslander = here_given_api,
			HereGivenMultiracial = here_given_mult_other,
			HereGivenHispanic = here_given_hispanic,
			// DateVendorFirstReported = dt_vendor_first_reported,
			Source = src,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_vendor_first_reported,
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')),
		PERMITS (DPMBitmap)),		
	
	Dataset_RiskTable__Key_Name_Dob_Summary(
		NameSummary(
			FirstName = fname,
			LastName = lname,
			DateOfBirth = dob,
			DateOfBirthPadded = DOBPadded,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_last_seen,
			RecordCount = record_count,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
  PERMITS (DPMBitmap)),

	Dataset_Email_Data__Key_Did_FCRA(	
		Email(
			EmailAddress = clean_email,
			EmailRecKey = email_rec_key,
			// Rules = rules,
			UserName = append_email_username,
			DomainName = append_domain,
			DomainType = append_domain_type,
			DomainRoot = append_domain_root,
			DomainExtension = append_domain_ext,
			IsTopLevelDomainState = append_is_tld_state,
			IsTopLevelDomainGeneric = append_is_tld_generic,
			IsTopLevelDomainCountry = append_is_tld_country,
			OrigLoginDate = orig_login_date,
			OrigSite = orig_site,
			E360ID = orig_e360_id,
			TeramediaID = orig_teramedia_id,
			ProcessDate = process_date,
			ActiveCode = activecode,
			//DateVendorFirstReported = date_vendor_first_reported,
			//DateVendorLastReported = date_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMMDD')date_last_seen, // Contains information for ASOF
			Source = Email_Src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PersonEmail(
			Subject = did,
			EmailAddress = clean_email,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMMDD')date_last_seen, // Contains information for ASOF
			Source = Email_Src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported),
		PERMITS(DPMBitmap)),	
	
	Dataset_dx_DataBridge__Key_LinkIds(
		BusinessSele(FILTER(seleid > 0 AND (UNSIGNED)sic6_1 > 0),
			UltID = ultid,
			OrgID = orgid,
			SeleID = seleid,
			SICCode = sic6_1,
			SICCodeOrder = 1,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		BusinessSele(FILTER(seleid > 0 AND (UNSIGNED)sic6_2 > 0),
			UltID = ultid,
			OrgID = orgid,
			SeleID = seleid,
			SICCode = sic6_2,
			SICCodeOrder = 2,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		BusinessSele(FILTER(seleid > 0 AND (UNSIGNED)sic6_3 > 0),
			UltID = ultid,
			OrgID = orgid,
			SeleID = seleid,
			SICCode = sic6_3,
			SICCodeOrder = 3,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),		
		BusinessSele(FILTER(seleid > 0 AND (UNSIGNED)sic6_4 > 0),
			UltID = ultid,
			OrgID = orgid,
			SeleID = seleid,
			SICCode = sic6_4,
			SICCodeOrder = 4,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),		
		BusinessSele(FILTER(seleid > 0 AND (UNSIGNED)sic6_5 > 0),
			UltID = ultid,
			OrgID = orgid,
			SeleID = seleid,
			SICCode = sic6_5,
			SICCodeOrder = 5,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),		
		BusinessSele(FILTER(seleid > 0 AND (UNSIGNED)sic8_1 > 0),
			UltID = ultid,
			OrgID = orgid,
			SeleID = seleid,
			SICCode = sic8_1,
			SICCodeOrder = 6,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),		
		BusinessSele(FILTER(seleid > 0 AND (UNSIGNED)sic8_2 > 0),
			UltID = ultid,
			OrgID = orgid,
			SeleID = seleid,
			SICCode = sic8_2,
			SICCodeOrder = 7,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),		
		BusinessSele(FILTER(seleid > 0 AND (UNSIGNED)sic8_3 > 0),
			UltID = ultid,
			OrgID = orgid,
			SeleID = seleid,
			SICCode = sic8_3,
			SICCodeOrder = 8,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),		
		BusinessSele(FILTER(seleid > 0 AND (UNSIGNED)sic8_4 > 0),
			UltID = ultid,
			OrgID = orgid,
			SeleID = seleid,
			SICCode = sic8_4,
			SICCodeOrder = 9,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			Source = source,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS (DPMBitmap)),		

	Dataset_Experian_CRDB__Key_LinkIDs(
		BusinessSele(FILTER(seleid > 0),
			UltID = ultid,
			OrgID = orgid,
			SeleID = seleid,
			TotalCombinedTradeLinesCount = total_combined_trade_lines_count,
			DaysBeyondTermsOfCombinedTradeTotals = dbt_of_combined_trade_totals,
			CombinedTradeBalance = combined_trade_balance,
			AgedTradeLines = aged_trade_lines,
			ExperianBusinessID = experian_bus_id,
			EstimatedNumberOfEmployees = estimated_number_of_employees,
			EstimatedAnnualSalesAmount = estimated_annual_sales_amount,
			//DateVendorFirstReported = dt_vendor_first_reported,
			//DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS (DPMBitmap)),		
		
	Dataset_EBR__Key_0010_Header_linkids(
		SeleEBRTradeline(
			UltID = ultid,
			OrgID = orgid,
			SeleID = seleid,
			FileNumber = file_number,
			ProcessDate = process_date,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')date_last_seen,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),
		
	Dataset_EBR__Key_2015_Trade_Payment_Totals_FILE_NUMBER(
		EBRTradeline(
			FileNumber = file_number, 
			TradeCount1 = trade_count1,
			TradeCount2 = trade_count2,
			TradeCount3 = trade_count3,
			ProcessDate = process_date,
			DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')date_last_seen,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),		
	
	Dataset_fraudpoint3__Key_DID(	
		Person(FILTER((unsigned)appended_lexid !=0),
			UID=appended_lexid,
			FirstName = first_name,
			MiddleName = middle_name,
			LastName = last_name,
			DateOfBirth = dob,
			DateOfBirthPadded = DOBPadded,
			FDNIndicator = TRUE,
			Source = src,
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')),
		PersonAddress(FILTER((STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)appended_lexid != 0),
			Subject = appended_lexid,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			FDNIndicator = TRUE,
			Source = src,
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')),
		PersonSSN(FILTER((unsigned)appended_lexid!=0 AND (unsigned) ssn != 0),
			Subject = appended_lexid,
			Social = ssn,
			FDNIndicator = TRUE,
			Source = src,
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')),	
		PERMITS(DPMBitmap)),	
	
	
	Dataset_eMerges__Key_HuntFish_Rid(
		Person(FILTER((unsigned)did!=0),
			UID=did,
			DateFirstSeen = FORMAT('YYYYMMDD','YYYYMM01','YYYY0101')datelicense,
			HomeState = homestate,
			SourceState = source_state,
			IsResident = IsResident,
			IsHunting = IsHunting,
			IsFishing = IsFishing,
			IsHuntFish	= TRUE,
			// DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen,//blank 90% of the time
			// DateLastSeen = FORMAT('YYYYMMDD')date_last_seen,//blank 90% of the time
			Source = src,//in order for this data to play nice with marketing we need to use the hard code source instead of the sources in the keys.  this data doesn't have other permissions to worry about.
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),	
		
	Dataset_eMerges__key_ccw_rid(
		Person(FILTER((unsigned)did!=0),
			UID=did,
			PermitNumber = ccwpermnum,
			WeaponPermitsType = ccwpermtype,
			WeaponExpirationDate = ccwexpdate,
			WeaponRegistrationDate = ccwregdate,
			IsCCW	= TRUE,
			// DateFirstSeen = FORMAT('YYYYMMDD')date_first_seen,//blank 80% of the time, this file will not have dates for first seen mapped in
			// DateLastSeen = FORMAT('YYYYMMDD')date_last_seen,//blank 80% of the time, this file will not have dates for last seen mapped in
			Source = src,//in order for this data to play nice with marketing we need to use the hard code source instead of the sources in the keys.  this data doesn't have other permissions to worry about.
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS(DPMBitmap)),	
	
	Dataset_Inquiry_AccLogs__Key_FCRA_DID(
		Inquiry(
			TransactionID = search_info.transaction_id,
			SequenceNumber = search_info.sequence_number,
			DateFirstSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry, 
			DateLastSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry, 
			Method = search_info.method,
			ProductCode = search_info.product_code,
			FunctionDescription = search_info.function_description,
			GLBPurpose = permissions.glb_purpose,
			DPPAPurpose = permissions.dppa_purpose,
			FCRAPurpose = permissions.fcra_purpose,
			PrimaryMarketCode = bus_intel.primary_market_code,
			SecondaryMarketCode = bus_intel.secondary_market_code,
			IndustryCode1 = bus_intel.industry_1_code,
			IndustryCode2 = bus_intel.industry_2_code,
			SubMarket = bus_intel.sub_market,
			Vertical = bus_intel.vertical,
			Industry = bus_intel.industry,
			LexID = person_q.appended_adl, 
			FirstName = person_q.fname, 
			LastName = person_q.lname, 
			DateOfBirth = person_q.dob, 
			DateOfBirthPadded = DOBPadded,
			PersonalPhoneNumber = person_q.personal_phone,
			WorkPhoneNumber = person_q.work_phone,
			PrimaryRange = person_q.prim_range,
			Predirectional = person_q.predir,
			PrimaryName = person_q.prim_name,
			Suffix = person_q.addr_suffix,
			Postdirectional = person_q.postdir,
			SecondaryRange = person_q.sec_range,
			ZIP5 = person_q.zip5,
			SSN = person_q.ssn,
			AppendedSSN = person_q.appended_ssn,
			EmailAddress = person_q.email_address,
			Source = Src,
			HybridArchiveDate = FORMAT('YYYYMMDDhhmmsszzz'),
			Archive_Date = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000')archive_date),
		PersonInquiry(FILTER((UNSIGNED)person_q.appended_adl <> 0),
			Subject = person_q.appended_adl,
			TransactionID = search_info.transaction_id,
			SequenceNumber = search_info.sequence_number,
			DateFirstSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry, 
			DateLastSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry, 
			Source = Src,
			HybridArchiveDate = FORMAT('YYYYMMDDhhmmsszzz'),
			Archive_Date = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000')archive_date),
		PERMITS(DPMBitmap)),	
	
	Dataset_Inquiry_AccLogs__Key_FCRA_Phone(
		Inquiry(
			TransactionID = search_info.transaction_id,
			SequenceNumber = search_info.sequence_number,
			DateFirstSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry,
			DateLastSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry, 
			Method = search_info.method,
			ProductCode = search_info.product_code,
			FunctionDescription = search_info.function_description,
			GLBPurpose = permissions.glb_purpose,
			DPPAPurpose = permissions.dppa_purpose,
			FCRAPurpose = permissions.fcra_purpose,
			PrimaryMarketCode = bus_intel.primary_market_code,
			SecondaryMarketCode = bus_intel.secondary_market_code,
			IndustryCode1 = bus_intel.industry_1_code,
			IndustryCode2 = bus_intel.industry_2_code,
			SubMarket = bus_intel.sub_market,
			Vertical = bus_intel.vertical,
			Industry = bus_intel.industry,
			LexID = person_q.appended_adl, 
			FirstName = person_q.fname, 
			LastName = person_q.lname, 
			DateOfBirth = person_q.dob, 
			DateOfBirthPadded = DOBPadded,
			PersonalPhoneNumber = person_q.personal_phone,
			WorkPhoneNumber = person_q.work_phone,
			PrimaryRange = person_q.prim_range,
			Predirectional = person_q.predir,
			PrimaryName = person_q.prim_name,
			Suffix = person_q.addr_suffix,
			Postdirectional = person_q.postdir,
			SecondaryRange = person_q.sec_range,
			ZIP5 = person_q.zip5,
			SSN = person_q.ssn,
			AppendedSSN = person_q.appended_ssn,
			EmailAddress = person_q.email_address,
			Source = Src,
			HybridArchiveDate = FORMAT('YYYYMMDDhhmmsszzz'),
			Archive_Date = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000')archive_date),
		PhoneInquiry(FILTER((STRING)person_q.personal_phone <> ''),
			TransactionID = search_info.transaction_id,
			SequenceNumber = search_info.sequence_number,
			PhoneNumber = person_q.personal_phone,
			DateFirstSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry, 
			DateLastSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry, 
			Source = Src,
			HybridArchiveDate = FORMAT('YYYYMMDDhhmmsszzz'),
			Archive_Date = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000')archive_date),
		PhoneInquiry(FILTER((STRING)person_q.work_phone <> ''),
			TransactionID = search_info.transaction_id,
			SequenceNumber = search_info.sequence_number,
			PhoneNumber = person_q.work_phone,
			DateFirstSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry, 
			DateLastSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry,
			Source = Src,
			HybridArchiveDate = FORMAT('YYYYMMDDhhmmsszzz'),
			Archive_Date = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000')archive_date),		
		PERMITS(DPMBitmap)),	
	
	Dataset_Inquiry_AccLogs__Key_FCRA_Address(
		Inquiry(
			TransactionID = search_info.transaction_id,
			SequenceNumber = search_info.sequence_number,
			DateFirstSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry,
			DateLastSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry, 
			Method = search_info.method,
			ProductCode = search_info.product_code,
			FunctionDescription = search_info.function_description,
			GLBPurpose = permissions.glb_purpose,
			DPPAPurpose = permissions.dppa_purpose,
			FCRAPurpose = permissions.fcra_purpose,
			PrimaryMarketCode = bus_intel.primary_market_code,
			SecondaryMarketCode = bus_intel.secondary_market_code,
			IndustryCode1 = bus_intel.industry_1_code,
			IndustryCode2 = bus_intel.industry_2_code,
			SubMarket = bus_intel.sub_market,
			Vertical = bus_intel.vertical,
			Industry = bus_intel.industry,
			LexID = person_q.appended_adl, 
			FirstName = person_q.fname, 
			LastName = person_q.lname, 
			DateOfBirth = person_q.dob, 
			DateOfBirthPadded = DOBPadded,
			PersonalPhoneNumber = person_q.personal_phone,
			WorkPhoneNumber = person_q.work_phone,
			PrimaryRange = person_q.prim_range,
			Predirectional = person_q.predir,
			PrimaryName = person_q.prim_name,
			Suffix = person_q.addr_suffix,
			Postdirectional = person_q.postdir,
			SecondaryRange = person_q.sec_range,
			ZIP5 = person_q.zip5,
			SSN = person_q.ssn,
			AppendedSSN = person_q.appended_ssn,
			EmailAddress = person_q.email_address,
			Source = Src,
			HybridArchiveDate = FORMAT('YYYYMMDDhhmmsszzz'),
			Archive_Date = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000')archive_date),
		AddressInquiry(FILTER((STRING)person_q.prim_name <> '' AND (UNSIGNED)person_q.zip5 <> 0),
			TransactionID = search_info.transaction_id,
			SequenceNumber = search_info.sequence_number,
			PrimaryRange = person_q.prim_range,
			Predirectional = person_q.predir,
			PrimaryName = person_q.prim_name,
			Suffix = person_q.addr_suffix,
			Postdirectional = person_q.postdir,
			SecondaryRange = person_q.sec_range,
			ZIP5 = person_q.zip5,
			DateFirstSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry, 
			DateLastSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry, 
			Source = Src,
			HybridArchiveDate = FORMAT('YYYYMMDDhhmmsszzz'),
			Archive_Date = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000')archive_date),	
		PERMITS(DPMBitmap)),
	
	Dataset_Inquiry_AccLogs__Key_FCRA_SSN(
		Inquiry(
			TransactionID = search_info.transaction_id,
			SequenceNumber = search_info.sequence_number,
			DateFirstSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry, 
			DateLastSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry, 
			Method = search_info.method,
			ProductCode = search_info.product_code,
			FunctionDescription = search_info.function_description,
			GLBPurpose = permissions.glb_purpose,
			DPPAPurpose = permissions.dppa_purpose,
			FCRAPurpose = permissions.fcra_purpose,
			PrimaryMarketCode = bus_intel.primary_market_code,
			SecondaryMarketCode = bus_intel.secondary_market_code,
			IndustryCode1 = bus_intel.industry_1_code,
			IndustryCode2 = bus_intel.industry_2_code,
			SubMarket = bus_intel.sub_market,
			Vertical = bus_intel.vertical,
			Industry = bus_intel.industry,
			LexID = person_q.appended_adl, 
			FirstName = person_q.fname, 
			LastName = person_q.lname, 
			DateOfBirth = person_q.dob, 
			DateOfBirthPadded = DOBPadded,
			PersonalPhoneNumber = person_q.personal_phone,
			WorkPhoneNumber = person_q.work_phone,
			PrimaryRange = person_q.prim_range,
			Predirectional = person_q.predir,
			PrimaryName = person_q.prim_name,
			Suffix = person_q.addr_suffix,
			Postdirectional = person_q.postdir,
			SecondaryRange = person_q.sec_range,
			ZIP5 = person_q.zip5,
			SSN = SSN,
			EmailAddress = person_q.email_address,
			Source = Src,
			HybridArchiveDate = FORMAT('YYYYMMDDhhmmsszzz'),
			Archive_Date = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000')archive_date),
		SSNInquiry(FILTER((UNSIGNED)SSN <> 0),
			TransactionID = search_info.transaction_id,
			SequenceNumber = search_info.sequence_number,
			SSN = SSN,
			DateFirstSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry, 
			DateLastSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry, 
			Source = Src,
			HybridArchiveDate = FORMAT('YYYYMMDDhhmmsszzz'),
			Archive_Date = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000')archive_date),
		PERMITS(DPMBitmap)),	
	
	Dataset_Inquiry_AccLogs__Inquiry_Table_SSN(
		Inquiry(
			TransactionID = search_info.transaction_id,
			SequenceNumber = search_info.sequence_number,
			DateFirstSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry, 
			DateLastSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry, 
			Method = search_info.method,
			ProductCode = search_info.product_code,
			FunctionDescription = search_info.function_description,
			GLBPurpose = permissions.glb_purpose,
			DPPAPurpose = permissions.dppa_purpose,
			FCRAPurpose = permissions.fcra_purpose,
			PrimaryMarketCode = bus_intel.primary_market_code,
			SecondaryMarketCode = bus_intel.secondary_market_code,
			IndustryCode1 = bus_intel.industry_1_code,
			IndustryCode2 = bus_intel.industry_2_code,
			SubMarket = bus_intel.sub_market,
			Vertical = bus_intel.vertical,
			Industry = bus_intel.industry,
			LexID = person_q.appended_adl, 
			FirstName = person_q.fname, 
			LastName = person_q.lname, 
			DateOfBirth = person_q.dob, 
			DateOfBirthPadded = DOBPadded,
			PersonalPhoneNumber = person_q.personal_phone,
			WorkPhoneNumber = person_q.work_phone,
			PrimaryRange = person_q.prim_range,
			Predirectional = person_q.predir,
			PrimaryName = person_q.prim_name,
			Suffix = person_q.addr_suffix,
			Postdirectional = person_q.postdir,
			SecondaryRange = person_q.sec_range,
			ZIP5 = person_q.zip5,
			SSN = SSN,
			EmailAddress = person_q.email_address,	
			Source = Src,
			HybridArchiveDate = FORMAT('YYYYMMDDhhmmsszzz'),
			Archive_Date = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000')archive_date),
		SSNInquiry(FILTER((UNSIGNED)SSN <> 0),
			TransactionID = search_info.transaction_id,
			SequenceNumber = search_info.sequence_number,
			SSN = SSN,
			DateFirstSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry, 
			DateLastSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry, 
			Source = Src,
			HybridArchiveDate = FORMAT('YYYYMMDDhhmmsszzz'),
			Archive_Date = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000')archive_date),
		PERMITS (DPMBitmap)), 
	
	Dataset_Inquiry_AccLogs__Inquiry_Table_Address(
		Inquiry(
			TransactionID = search_info.transaction_id,
			SequenceNumber = search_info.sequence_number,
			DateFirstSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry, 
			DateLastSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry, 
			Method = search_info.method,
			ProductCode = search_info.product_code,
			FunctionDescription = search_info.function_description,
			GLBPurpose = permissions.glb_purpose,
			DPPAPurpose = permissions.dppa_purpose,
			FCRAPurpose = permissions.fcra_purpose,
			PrimaryMarketCode = bus_intel.primary_market_code,
			SecondaryMarketCode = bus_intel.secondary_market_code,
			IndustryCode1 = bus_intel.industry_1_code,
			IndustryCode2 = bus_intel.industry_2_code,
			SubMarket = bus_intel.sub_market,
			Vertical = bus_intel.vertical,
			Industry = bus_intel.industry,
			LexID = person_q.appended_adl, 
			FirstName = person_q.fname, 
			LastName = person_q.lname, 
			DateOfBirth = person_q.dob, 
			DateOfBirthPadded = DOBPadded,
			PersonalPhoneNumber = person_q.personal_phone,
			WorkPhoneNumber = person_q.work_phone,
			PrimaryRange = person_q.prim_range,
			Predirectional = person_q.predir,
			PrimaryName = person_q.prim_name,
			Suffix = person_q.addr_suffix,
			Postdirectional = person_q.postdir,
			SecondaryRange = person_q.sec_range,
			ZIP5 = person_q.zip5,
			SSN = person_q.ssn,
			AppendedSSN = person_q.appended_ssn,
			EmailAddress = person_q.email_address,
			Source = Src,
			HybridArchiveDate = FORMAT('YYYYMMDDhhmmsszzz'),
			Archive_Date = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000')archive_date),
		AddressInquiry(FILTER((STRING)person_q.prim_name <> '' AND (UNSIGNED)person_q.zip5 <> 0),
			TransactionID = search_info.transaction_id,
			SequenceNumber = search_info.sequence_number,
			PrimaryRange = person_q.prim_range,
			Predirectional = person_q.predir,
			PrimaryName = person_q.prim_name,
			Suffix = person_q.addr_suffix,
			Postdirectional = person_q.postdir,
			SecondaryRange = person_q.sec_range,
			ZIP5 = person_q.zip5,
			DateFirstSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry, 
			DateLastSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry, 
			Source = Src,
			HybridArchiveDate = FORMAT('YYYYMMDDhhmmsszzz'),
			Archive_Date = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000')archive_date),	
		PERMITS (DPMBitmap)), 
		
	Dataset_Inquiry_AccLogs__Inquiry_Table_DID(
		Inquiry(
			TransactionID = search_info.transaction_id,
			SequenceNumber = search_info.sequence_number,
			DateFirstSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry, 
			DateLastSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry, 
			Method = search_info.method,
			ProductCode = search_info.product_code,
			FunctionDescription = search_info.function_description,
			GLBPurpose = permissions.glb_purpose,
			DPPAPurpose = permissions.dppa_purpose,
			FCRAPurpose = permissions.fcra_purpose,
			PrimaryMarketCode = bus_intel.primary_market_code,
			SecondaryMarketCode = bus_intel.secondary_market_code,
			IndustryCode1 = bus_intel.industry_1_code,
			IndustryCode2 = bus_intel.industry_2_code,
			SubMarket = bus_intel.sub_market,
			Vertical = bus_intel.vertical,
			Industry = bus_intel.industry,
			LexID = person_q.appended_adl, 
			FirstName = person_q.fname, 
			LastName = person_q.lname, 
			DateOfBirth = person_q.dob, 
			DateOfBirthPadded = DOBPadded,
			PersonalPhoneNumber = person_q.personal_phone,
			WorkPhoneNumber = person_q.work_phone,
			PrimaryRange = person_q.prim_range,
			Predirectional = person_q.predir,
			PrimaryName = person_q.prim_name,
			Suffix = person_q.addr_suffix,
			Postdirectional = person_q.postdir,
			SecondaryRange = person_q.sec_range,
			ZIP5 = person_q.zip5,
			SSN = person_q.ssn,
			AppendedSSN = person_q.appended_ssn,
			EmailAddress = person_q.email_address,
			Source = Src,
			HybridArchiveDate = FORMAT('YYYYMMDDhhmmsszzz'),
			Archive_Date = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000')archive_date),
		PersonInquiry(FILTER((UNSIGNED)person_q.appended_adl <> 0),
			Subject = person_q.appended_adl,
			TransactionID = search_info.transaction_id,
			SequenceNumber = search_info.sequence_number,
			DateFirstSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry, 
			DateLastSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry, 
			Source = Src,
			HybridArchiveDate = FORMAT('YYYYMMDDhhmmsszzz'),
			Archive_Date = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000')archive_date),
		PERMITS (DPMBitmap)), 
		
	Dataset_Inquiry_AccLogs__Inquiry_Table_EMAIL(
		Inquiry(
			TransactionID = search_info.transaction_id,
			SequenceNumber = search_info.sequence_number,
			DateFirstSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry, 
			DateLastSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry, 
			Method = search_info.method,
			ProductCode = search_info.product_code,
			FunctionDescription = search_info.function_description,
			PrimaryMarketCode = bus_intel.primary_market_code,
			SecondaryMarketCode = bus_intel.secondary_market_code,
			IndustryCode1 = bus_intel.industry_1_code,
			IndustryCode2 = bus_intel.industry_2_code,
			SubMarket = bus_intel.sub_market,
			Vertical = bus_intel.vertical,
			Industry = bus_intel.industry,
			LexID = person_q.appended_adl, 
			FirstName = person_q.fname, 
			LastName = person_q.lname, 
			DateOfBirth = person_q.dob, 
			DateOfBirthPadded = DOBPadded,
			PersonalPhoneNumber = person_q.personal_phone,
			WorkPhoneNumber = person_q.work_phone,
			PrimaryRange = person_q.prim_range,
			Predirectional = person_q.predir,
			PrimaryName = person_q.prim_name,
			Suffix = person_q.addr_suffix,
			Postdirectional = person_q.postdir,
			SecondaryRange = person_q.sec_range,
			ZIP5 = person_q.zip5,
			SSN = person_q.ssn,
			AppendedSSN = person_q.appended_ssn,
			EmailAddress = person_q.email_address,
			Source = Src,
			HybridArchiveDate = FORMAT('YYYYMMDDhhmmsszzz'),
			Archive_Date = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000')archive_date),
		EmailInquiry(FILTER((STRING)person_q.email_address <> ''),
			TransactionID = search_info.transaction_id,
			SequenceNumber = search_info.sequence_number,
			EmailAddress = person_q.email_address,
			DateFirstSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry, 
			DateLastSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry,
			Source = Src,
			HybridArchiveDate = FORMAT('YYYYMMDDhhmmsszzz'),
			Archive_Date = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000')archive_date),				
		PERMITS (DPMBitmap)), 
		
	Dataset_Inquiry_AccLogs__Inquiry_Table_Phone(
		Inquiry(
			TransactionID = search_info.transaction_id,
			SequenceNumber = search_info.sequence_number,
			DateFirstSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry, 
			DateLastSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry, 
			Method = search_info.method,
			ProductCode = search_info.product_code,
			FunctionDescription = search_info.function_description,
			GLBPurpose = permissions.glb_purpose,
			DPPAPurpose = permissions.dppa_purpose,
			FCRAPurpose = permissions.fcra_purpose,
			PrimaryMarketCode = bus_intel.primary_market_code,
			SecondaryMarketCode = bus_intel.secondary_market_code,
			IndustryCode1 = bus_intel.industry_1_code,
			IndustryCode2 = bus_intel.industry_2_code,
			SubMarket = bus_intel.sub_market,
			Vertical = bus_intel.vertical,
			Industry = bus_intel.industry,
			LexID = person_q.appended_adl, 
			FirstName = person_q.fname, 
			LastName = person_q.lname, 
			DateOfBirth = person_q.dob, 
			DateOfBirthPadded = DOBPadded,
			PersonalPhoneNumber = person_q.personal_phone,
			WorkPhoneNumber = person_q.work_phone,
			PrimaryRange = person_q.prim_range,
			Predirectional = person_q.predir,
			PrimaryName = person_q.prim_name,
			Suffix = person_q.addr_suffix,
			Postdirectional = person_q.postdir,
			SecondaryRange = person_q.sec_range,
			ZIP5 = person_q.zip5,
			SSN = person_q.ssn,
			AppendedSSN = person_q.appended_ssn,
			EmailAddress = person_q.email_address,
			Source = Src,
			HybridArchiveDate = FORMAT('YYYYMMDDhhmmsszzz'),
			Archive_Date = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000')archive_date),
		PhoneInquiry(FILTER((STRING)person_q.personal_phone <> ''),
			TransactionID = search_info.transaction_id,
			SequenceNumber = search_info.sequence_number,
			PhoneNumber = person_q.personal_phone,
			DateFirstSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry, 
			DateLastSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry, 
			Source = Src,
			HybridArchiveDate = FORMAT('YYYYMMDDhhmmsszzz'),
			Archive_Date = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000')archive_date),
		PhoneInquiry(FILTER((STRING)person_q.work_phone <> ''),
			TransactionID = search_info.transaction_id,
			SequenceNumber = search_info.sequence_number,
			PhoneNumber = person_q.work_phone,
			DateFirstSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry, 
			DateLastSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry,
			Source = Src,
			HybridArchiveDate = FORMAT('YYYYMMDDhhmmsszzz'),
			Archive_Date = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000')archive_date),		
		PERMITS (DPMBitmap)), 

	Dataset_Inquiry_AccLogs__Inquiry_Table_FEIN(
		Inquiry(
			TransactionID = search_info.transaction_id,
			SequenceNumber = search_info.sequence_number,
			DateFirstSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry, 
			DateLastSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry, 
			Method = search_info.method,
			ProductCode = search_info.product_code,
			FunctionDescription = search_info.function_description,
			GLBPurpose = permissions.glb_purpose,
			DPPAPurpose = permissions.dppa_purpose,
			FCRAPurpose = permissions.fcra_purpose,
			PrimaryMarketCode = bus_intel.primary_market_code,
			SecondaryMarketCode = bus_intel.secondary_market_code,
			IndustryCode1 = bus_intel.industry_1_code,
			IndustryCode2 = bus_intel.industry_2_code,
			SubMarket = bus_intel.sub_market,
			Vertical = bus_intel.vertical,
			Industry = bus_intel.industry,
			LexID = bususer_q.appended_adl, 
			FirstName = bususer_q.fname, 
			LastName = bususer_q.lname, 
			DateOfBirth = bususer_q.dob, 
			DateOfBirthPadded = DOBPadded,
			PersonalPhoneNumber = bususer_q.personal_phone,
			SSN = bususer_q.ssn,
			AppendedSSN = bususer_q.appended_ssn,
			CompanyName = bus_q.cname, 
			CompanyPhone = bus_q.company_phone,
			PrimaryRange = bus_q.prim_range,
			Predirectional = bus_q.predir,
			PrimaryName = bus_q.prim_name,
			Suffix = bus_q.addr_suffix,
			Postdirectional = bus_q.postdir,
			SecondaryRange = bus_q.sec_range,
			ZIP5 = bus_q.zip5,
			TIN = appended_ein,
			Source = Src,
			HybridArchiveDate = FORMAT('YYYYMMDDhhmmsszzz'),
			Archive_Date = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000')archive_date),
		Inquiry(
			TransactionID = search_info.transaction_id,
			SequenceNumber = search_info.sequence_number,
			PrimaryRange = bususer_q.prim_range,
			Predirectional = bususer_q.predir,
			PrimaryName = bususer_q.prim_name,
			Suffix = bususer_q.addr_suffix,
			Postdirectional = bususer_q.postdir,
			SecondaryRange = bususer_q.sec_range,
			ZIP5 = bususer_q.zip5,
			DateFirstSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry, 
			DateLastSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry, 
			HybridArchiveDate = FORMAT('YYYYMMDDhhmmsszzz'),
			Archive_Date = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000')archive_date),
		TINInquiry(FILTER((UNSIGNED)appended_ein <> 0),
			TransactionID = search_info.transaction_id,
			SequenceNumber = search_info.sequence_number,
			TaxID = appended_ein,
			DateFirstSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry, 
			DateLastSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry,		
			Source = Src,
			HybridArchiveDate = FORMAT('YYYYMMDDhhmmsszzz'),
			Archive_Date = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000')archive_date),
		TIN(FILTER((UNSIGNED)appended_ein <> 0),//this needs to be here on roxie because TIN is only pulled through Busienss header which is indexed by BIPID
			UID = appended_ein,
			HeaderHitFlag = FALSE,
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD...')archive_date),		//we need TIN mapped to INQ by FEIN on roxie in order to popualate TINInquiry, we need this here to tell us when we found a BH TIN vs Inq TIN	
		PERMITS (DPMBitmap)),
		
	Dataset_Inquiry_AccLogs__Inquiry_Table_LinkIDs(
		Inquiry(
			TransactionID = search_info.transaction_id,
			SequenceNumber = search_info.sequence_number,
			DateFirstSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry, 
			DateLastSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry, 
			Method = search_info.method,
			ProductCode = search_info.product_code,
			FunctionDescription = search_info.function_description,
			GLBPurpose = permissions.glb_purpose,
			DPPAPurpose = permissions.dppa_purpose,
			FCRAPurpose = permissions.fcra_purpose,
			PrimaryMarketCode = bus_intel.primary_market_code,
			SecondaryMarketCode = bus_intel.secondary_market_code,
			IndustryCode1 = bus_intel.industry_1_code,
			IndustryCode2 = bus_intel.industry_2_code,
			SubMarket = bus_intel.sub_market,
			Vertical = bus_intel.vertical,
			Industry = bus_intel.industry,
			LexID = bususer_q.appended_adl, 
			FirstName = bususer_q.fname, 
			LastName = bususer_q.lname, 
			DateOfBirth = bususer_q.dob, 
			DateOfBirthPadded = DOBPadded,
			PersonalPhoneNumber = bususer_q.personal_phone,
			SSN = bususer_q.ssn,
			AppendedSSN = bususer_q.appended_ssn,
			CompanyName = bus_q.cname, 
			CompanyPhone = bus_q.company_phone,
			PrimaryRange = bus_q.prim_range,
			Predirectional = bus_q.predir,
			PrimaryName = bus_q.prim_name,
			Suffix = bus_q.addr_suffix,
			Postdirectional = bus_q.postdir,
			SecondaryRange = bus_q.sec_range,
			ZIP5 = bus_q.zip5,
			TIN = bus_q.appended_ein,
			UltID = UltID,
			OrgID = OrgID,
			SeleID = SeleID,
			Source = Src,
			HybridArchiveDate = FORMAT('YYYYMMDDhhmmsszzz'),
			Archive_Date = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000')archive_date),
		Inquiry(
			TransactionID = search_info.transaction_id,
			SequenceNumber = search_info.sequence_number,
			PrimaryRange = bususer_q.prim_range,
			Predirectional = bususer_q.predir,
			PrimaryName = bususer_q.prim_name,
			Suffix = bususer_q.addr_suffix,
			Postdirectional = bususer_q.postdir,
			SecondaryRange = bususer_q.sec_range,
			ZIP5 = bususer_q.zip5,
			DateFirstSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry, 
			DateLastSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry, 
			HybridArchiveDate = FORMAT('YYYYMMDDhhmmsszzz'),
			Archive_Date = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000')archive_date),
		SeleInquiry(FILTER((UNSIGNED)Ultid <> 0 AND (UNSIGNED)OrgID <> 0 AND (UNSIGNED)SeleID <> 0),
			TransactionID = search_info.transaction_id,
			SequenceNumber = search_info.sequence_number,
			UltID = UltID,
			OrgID = OrgID,
			SeleID = SeleID,
			DateFirstSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry, 
			DateLastSeen = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000','YYYYMM01000000000')dateofinquiry,		
			Source = Src,
			HybridArchiveDate = FORMAT('YYYYMMDDhhmmsszzz'),
			Archive_Date = FORMAT('YYYYMMDDhhmmsszzz','YYYYMMDD000000000')archive_date),
		PERMITS (DPMBitmap)),		
	
	Dataset_RiskTable__Key_Phone_Addr_Header_Summary(
		PhoneSummary(
			Phone10 = Phone10,
			PrimaryName = Prim_Name,
			PrimaryRange = Prim_Range,
			Zip = Zip,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_last_seen,
			RecordCount = record_count,
			Source = Src,
			HeaderHitFlag = FALSE,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS (DPMBitmap)),		

	Dataset_RiskTable__Key_Phone_Addr_Summary(
		PhoneSummary(
			Phone10 = Phone10,
			PrimaryName = Prim_Name,
			PrimaryRange = Prim_Range,
			Zip = Zip,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_last_seen,
			RecordCount = record_count,
			Source = Src,
			HeaderHitFlag = FALSE,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS (DPMBitmap)),	
  
	Dataset_RiskTable__Key_Phone_Lname_Summary(
		PhoneSummary(
			Phone10 = Phone10,
			LastName = lname,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_last_seen,
			RecordCount = record_count,
			Source = Src,
			HeaderHitFlag = FALSE,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS (DPMBitmap)),	

	Dataset_RiskTable__Key_Phone_Lname_Header_Summary(
		PhoneSummary(
			Phone10 = Phone10,
			LastName = lname,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_last_seen,
			RecordCount = record_count,
			Source = Src,
			HeaderHitFlag = FALSE,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS (DPMBitmap)),	

	Dataset_RiskTable__Key_Phone_Dob_Summary(
		PhoneSummary(
			UID = phone,
			Phone10 = phone,
			DateOfBirth = dob,
			DateOfBirthPadded = DOBPadded,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_last_seen,
			RecordCount = record_count,
			Source = Src,
			HeaderHitFlag = FALSE,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS (DPMBitmap)),	
  
	Dataset_Risk_Indicators__Key_SSN_Addr_Summary(
		SSNSummary(
			UID=ssn,
			SSN = ssn,
			AddressPrimaryName = prim_name,
			AddressPrimaryRange = prim_range,
			AddressZip = zip,
			AddressSource  = src,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_last_seen,
			AddressRecordCount = record_count,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS (DPMBitmap)),	

	Dataset_Risk_Indicators__Key_SSN_dob_Summary(
		SSNSummary(
			UID=ssn,
			SSN = ssn,
			DobDateOfBirth = dob,
			DobDateOfBirthPadded = DOBPadded,
			DobSource  = src,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_last_seen,
			DobRecordCount = record_count,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS (DPMBitmap)),	

	Dataset_Risk_Indicators__Key_SSN_Name_Summary(
		SSNSummary(
			UID=ssn,
			SSN = ssn,
			NameFirstName = fname,
			NameLastName = lname,
			NameSource  = src,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_last_seen,
			NameRecordCount = record_count,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS (DPMBitmap)),	

	Dataset_Risk_Indicators__Key_SSN_Phone_Summary(
		SSNSummary(
			UID=ssn,
			SSN = ssn,
			PhoneNumber = phone,
			PhoneSource  = src,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_last_seen,
			PhoneRecordCount = record_count,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS (DPMBitmap)),	
	
	Dataset_Thrive__Key___Did_QA(	
		Person(
			UID=did,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen, // Contains information for ASOF
			ThriveDateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,	
			//DateVendorFirstReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_vendor_first_reported,
			//DateVendorLastReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_vendor_last_reported, 
			Employer = employer,
			PayFrequency = pay_frequency,
			Income = income,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),	
		PERMITS (DPMBitmap)),
	
	Dataset_SexOffender__Key_SexOffender_SPK(
		SexOffender(
			SeisintPrimaryKey=sspk,	
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_reported, //this is updated every build
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_reported, //this is updated every build
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PersonSexOffender(FILTER((UNSIGNED)did != 0),
			Subject=did,
			SeisintPrimaryKey=sspk,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_reported, //this is updated every build
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_reported, //this is updated every build
			FCRADate = fcra_date, //this is updated every build
			FcraConvictionFlag = fcra_conviction_flag,
			FcraTrafficFlag = fcra_traffic_flag,
			SexOffenderRegistryNumber = sor_number,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		Person(
			UID=did,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_reported, //this is updated every build
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_reported, //this is updated every build
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),	
		PERMITS (DPMBitmap)),
	
	Dataset_AVM_V2__Key_AVM_Medians(
		GeoLink(FILTER((unsigned)fips_geo_12 > 0),
			GeoLink = fips_geo_12,	
			DateFirstSeen = FORMAT('YYYYMMDD', 'YYYYMM01')history_date,
			MedianValuation = median_valuation,
			Source = src,
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS (DPMBitmap)),
	
	Dataset_BIPV2_Build__key_high_risk_industries_addr(
		AddressSlim(FILTER((STRING28)prim_name != '' AND (UNSIGNED3)zip5 != 0),//sic
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			ZIP5 = zip5,
			HighRiskSIC = SIC_Code,
			HighRiskNAICS = NAICS_Code,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS (DPMBitmap)),

	Dataset_BIPV2_Build__key_high_risk_industries_phone(
		Phone(FILTER((UNSIGNED)company_phone <> 0),
			UID = company_phone,
			Phone10 = company_phone,
			HighRiskSIC = SIC_Code,
			HighRiskNAICS = NAICS_Code,
			DateFirstSeen = FORMAT('YYYYMMDD')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD')dt_last_seen,
			Source = src,
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS (DPMBitmap)),
	
	Dataset_Header__key_ADL_segmentation(	//data is not archivable
		Person(
			UID = did,
			LexIDSegment = ind1,
			LexIDSegment2 = ind2, //removes Z records
			Source = src,
			DateFirstSeen = FORMAT('YYYYMMDD'),
			DateLastSeen = FORMAT('YYYYMMDD'),
			HybridArchiveDate = FORMAT('YYYYMMDD'),
			Archive_Date = FORMAT('YYYYMMDD')archive_date),
		PERMITS (DPMBitmap)),	
	
Dataset_DX_Property__Key_Foreclosures_FID_With_Did(
	Foreclosure(
		ForeclosureID = fid,
		RecordingDate = FORMAT('YYYYMMDD')recording_date,
		Source = src,
		State =  state,
		County =  county,
		BatchDateAndSequenceNumber =  batch_date_and_seq_nbr,
		DeedCatagory =  deed_category,
		DeedDescriptions =  deed_desc,
		DocumentType =  document_type,
		DocumentDescriptions =  document_desc,
		FirstDefendantBorrowerOwnerFirstName =  first_defendant_borrower_owner_first_name,
		FirstDefendantBorrowerOwnerLastName =  first_defendant_borrower_owner_last_name,
		FirstDefendantBorrowerCompanyName =  first_defendant_borrower_company_name,
		SecondDefendantBorrowerOwnerFirstName =  second_defendant_borrower_owner_first_name,
		SecondDefendantBorrowerOwnerLastName =  second_defendant_borrower_owner_last_name,
		SecondDefendantBorrowerCompanyName =  second_defendant_borrower_company_name,
		DefaultDate =  date_of_default,
		FilingDate =  filing_date,
		FinalJudgementAmount =  final_judgment_amount,
		OriginalLoanDate =  original_loan_date,
		OriginalLoanRecordingDate =  original_loan_recording_date,
		OriginalLoanAmount =  original_loan_amount,
		DateFirstSeen = FORMAT('YYYYMMDD')recording_date,
		DateLastSeen = FORMAT('YYYYMMDD'),
		HybridArchiveDate = FORMAT('YYYYMMDD'),
		Archive_Date = FORMAT('YYYYMMDD')archive_date),
	PersonForeclosure(
		ForeclosureID = fid,
		Subject = did,
		RecordingDate = FORMAT('YYYYMMDD')Recording_Date,
		Source = src,
		DateFirstSeen = FORMAT('YYYYMMDD')recording_date,
		DateLastSeen = FORMAT('YYYYMMDD'),
		HybridArchiveDate = FORMAT('YYYYMMDD'),
		Archive_Date = FORMAT('YYYYMMDD')archive_date),
	ForeclosureAddress(
		ForeclosureID = fid,
		PrimaryRange = situs_house_number_1,
		Predirectional = situs_direction_1,
		PrimaryName = situs_street_name_1,
		Suffix = situs_mode_1,
		Postdirectional = situs_quadrant_1,
		SecondaryRange = apartment_unit,
		PostalCity = property_city_1,
		VerifiedCity = property_city_1,
		State = property_state_1,
		ZIP5 = Zip5,
		ZIP4 = Zip4,
		RecordingDate = FORMAT('YYYYMMDD')Recording_Date,
		Source = src,
		DateFirstSeen = FORMAT('YYYYMMDD')Recording_Date,
		DateLastSeen = FORMAT('YYYYMMDD'),
		HybridArchiveDate = FORMAT('YYYYMMDD'),
		Archive_Date = FORMAT('YYYYMMDD')archive_date),
	PERMITS(DPMBitmap)));