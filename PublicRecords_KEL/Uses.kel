IMPORT KnowledgeUniverse.PublicRecords_KEL.Entities;

USE PublicRecords_KEL.ECL_Functions.Dataset_FDC(FDC,
	Dataset_Doxie__Key_Header( 
		SSNAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)ssn != 0),
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			Social = ssn, 
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			Source = src),
		SocialSecurityNumber(FILTER((UNSIGNED)ssn != 0),
			UID=ssn,
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateOfDeath = dod,
			IssueState = st,
			HeaderFirstSeen = dt_first_seen,
			Source = src),
		Person(FILTER((UNSIGNED)did != 0),
			UID=did,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Title = title,
			FirstName = fname,
			MiddleName = mname,
			LastName = lname,
			NameSuffix = name_suffix,
			DateOfBirth = dob,
			DateOfDeath = dod,
			HeaderHitFlag = TRUE,
			Source = src),
		Address(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0),
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = suffix,
			Postdirectional = postdir,
			UnitDesignation = unit_desig,
			SecondaryRange = sec_range,
			State = st,
			ZIP5 = zip,
			ZIP4 = zip4,
			County = county,
			GeoBlock = geo_blk,
			ADVODateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			ADVODateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			ADVODateVendorFirstReported = FORMAT('YYYYMM01')dt_vendor_first_reported,
			ADVODateVendorLastReported = FORMAT('YYYYMM01')dt_vendor_last_reported,
			RecordTypeCode = rec_type,
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			Source = src),
		Phone(FILTER((UNSIGNED)phone != 0),
			UID = phone,
			Phone10 = phone,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = src),
		PhoneSSN(FILTER((UNSIGNED)phone != 0 AND (UNSIGNED)ssn != 0),
			PhoneNumber = phone,
			Social = ssn,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = src),
		PersonSSN(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)ssn != 0),
			Subject = did,
			Social = ssn,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			HeaderHitFlag = TRUE,
			Source = src),
		PersonAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)did != 0),
			Subject = did,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			HeaderHitFlag = TRUE,
			Source = src),
		PersonPhone(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)phone != 0),
			Subject = did,
			PhoneNumber = phone,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			HeaderHitFlag = TRUE,
			Source = src),
		AddressPhone(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)phone != 0),
			PhoneNumber = phone,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = src),
		ZipCode(FILTER((UNSIGNED3)zip !=0), // Not sure we want this permanantly, but adding this for now until the 'correct' ZipCode files are added to the FDC bundle so that the Address ENTITY/ASSOCIATIONS will compile.
			UID = zip),
		ZipCodePerson(
			Subject = did,
			Zip = zip,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			HeaderHitFlag = TRUE,
			Source = src),
		PERMITS(DPMBitmap)), // leaving FCRA and nonFCRA the same for now, since on Vault side, Header use statement is only defined for FCRA. During FDC fetch, we are pointing to the correct version of the key (FCRA or NonFCRA)
		
	Dataset_Header_Quick__Key_Did(
		SocialSecurityNumber(FILTER((UNSIGNED)ssn != 0),	
			UID = ssn,
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen,     // Contains information for ASOF
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen,   // Contains information for ASOF
			IssueState = st,
			HeaderFirstSeen = dt_first_seen,
			Source = src),
		SSNAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)ssn != 0),
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen,   // Contains information for ASOF
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			Social = ssn,
			PrimaryRange = prim_range, 
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			Source = src),
		Person(FILTER((UNSIGNED)did != 0),
			UID = did,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen,   // Contains information for ASOF
			Title = title,
			FirstName = fname,
			MiddleName = mname,
			LastName = lname,
			NameSuffix = name_suffix,
			DateOfBirth = dob,
			HeaderHitFlag = TRUE,
			Source = src),
		PersonSSN(FILTER((UNSIGNED)ssn != 0 AND (UNSIGNED)did != 0),
			Subject = did,
			Social = ssn,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			HeaderHitFlag = TRUE,
			Source = src),
		Address(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0),
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = suffix,
			Postdirectional = postdir,
			UnitDesignation = unit_desig,
			SecondaryRange = sec_range,
			State = st,
			ZIP5 = zip,
			ZIP4 = zip4,
			County = county,
			GeoBlock = geo_blk,
			ADVODateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			ADVODateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			ADVODateVendorFirstReported = FORMAT('YYYYMM01')dt_vendor_first_reported,
			ADVODateVendorLastReported = FORMAT('YYYYMM01')dt_vendor_last_reported,
			RecordTypeCode = rec_type,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = src),
		Phone(FILTER((UNSIGNED)phone != 0),
			UID = phone,
			Phone10 = phone,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = src),
		PhoneSSN(FILTER((UNSIGNED)ssn != 0 AND (UNSIGNED)phone != 0),
			PhoneNumber = phone,
			Social = ssn,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = src),
		PersonAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)did != 0),
			Subject = did,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			HeaderHitFlag = TRUE,
			Source = src),
		ZipCodePerson(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)did != 0),
			Subject = did,
			Zip = zip,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			HeaderHitFlag = TRUE,
			Source = src),
		PersonPhone(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)phone != 0),
			Subject = did,
			PhoneNumber = phone,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			HeaderHitFlag = TRUE,
			Source = src),
		AddressPhone(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)phone != 0),
			PhoneNumber = phone,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = src),
		PERMITS(DPMBitmap)), // leaving FCRA and nonFCRA the same for now, since on Vault side, Header use statement is only defined for FCRA. During FDC fetch, we are pointing to the correct version of the key (FCRA or NonFCRA)

			
	Dataset_Doxie_Files__Key_Offenders_Risk(
		CriminalOffense(
			OffenderKey = offender_key,
			OffenseScore = offense_score,
			OffenderLevel = criminal_offender_level,
			DataType = data_type,
			CaseNumber = case_num,
			DateFirstSeen = earliest_offense_date,
			Source = src),
		PersonOffenses(FILTER((UNSIGNED)sdid != 0),
			Subject = sdid,
			OffenderKey = offender_key,
			DateFirstSeen = earliest_offense_date,
			Source = src),		
		SocialSecurityNumber(FILTER((UNSIGNED)ssn != 0),
			UID = ssn,
			IssueState = st,
			DateFirstSeen = earliest_offense_date,
			Source = src),
		PersonSSN(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)ssn != 0),
			Subject = did,
			Social = ssn,
			DateFirstSeen = earliest_offense_date,
			Source = src),	
		SSNAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip5 != 0 AND (UNSIGNED)ssn != 0),
			Social = ssn,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			ZIP5 = zip5,
			SecondaryRange = sec_range,
			DateFirstSeen = earliest_offense_date,
			Source = src),			
		DriversLicense(FILTER(dl_state != ''),
			DriversLicenseNumber = dl_num,
			IssuingState = dl_state,
			DateFirstSeen = earliest_offense_date,
			Source = src),
		ZipCodePerson(
			Zip = zip5,
			Subject = did,
			PrimaryRange = prim_range, 
			Predirectional = predir, 
			PrimaryName = prim_name, 
			Postdirectional = postdir, 
			Suffix = addr_suffix, 
			ZIP5 = zip5, 
			SecondaryRange = sec_range,
			DateFirstSeen = earliest_offense_date,
			Source = src),
		PERMITS(DPMBitmap)),


	Dataset_Doxie_Files__Key_Punishment(
		CriminalOffense(
			OffenderKey = offender_key,
			ConvictionOverrideDate = conviction_override_date,
			ConvictionOverrideDateType = conviction_override_date_type,
			DateFirstSeen = event_dt,
			DateLastSeen = process_date,
			Source = 'DC'),
		CriminalPunishment(
			OffenderKey = offender_key,
			SourceFile = source_file,
			PunishmentType = punishment_type, 
			SourceState = orig_state,
			PunishmentPersistentID = punishment_persistent_id,	
			DateOfSentence = sent_date,
			SentenceLength = sent_length,
			SentenceLengthDescription = sent_length_desc,
			CurrentKnownInmateStatus = cur_stat_inm_desc,
			CurrentLocationOfInmate = cur_loc_inm,
			CurrentLocationSecurity = cur_loc_sec,
			IncarcerationAdmissionDate = latest_adm_dt,
			ScheduledReleaseDate = sch_rel_dt,
			ActualReleaseDate = act_rel_dt,
			ControlReleaseDate = ctl_rel_dt,
			PresumptiveParoleReleaseDate = presump_par_rel_dt,
			ParoleCurrentStatus = par_cur_stat,
			ParoleCurrentStatusDescription = par_cur_stat_desc,
			ParoleStartDate = par_st_dt,
			ParoleScheduledReleaseDate = par_sch_end_dt,
			ParoleActualReleaseDate = par_act_end_dt,
			ParoleCounty = par_cty,
			DateFirstSeen = event_dt,
			DateLastSeen = process_date,
			Source = 'DC'),
		CriminalDetails(
			OffenderKey = offender_key,
			DateFirstSeen = event_dt,
			DateLastSeen = process_date,
			Source = 'DC'),
		PERMITS(DPMBitmap)),

		
	Dataset_Doxie_Files__Key_Offenses(
		CriminalOffender(
			OffenderKey = offender_key,
			NumberOfOffenseCounts = num_of_counts,
			Source = 'DC'),
		CriminalOffense(
			OffenderKey = offender_key,
			CaseNumber = case_num,
			PersistentOffenseKey = offense_key,
			DataType = data_type,
			StateOfSource = orig_state,
			DataSource = source_file,
			OffenseDate = off_date,
			DateOfArrest = arr_date,
			CourtOffenseCode = off_code,
			CourtOffenseDescription = off_desc_1,
			CourtOffenseAdditionalDescription = off_desc_2,
			OffenseType = off_typ,
			CourtOffenseLevel = off_lev,
			CourtDescription = court_desc,
			CourtDispositionDate = ct_disp_dt,
			CourtDispositionDescription = ct_disp_desc_1,
			CourtAdditionalDispositionDescription = ct_disp_desc_2,
			OffenseTown = offensetown,
			OffenseScore = offense_score,
			CourtCounty = court_county,
			TrafficFlag = fcra_traffic_flag,
			ConvictionFlag = fcra_conviction_flag,
			FcraOffenseKey = fcra_offense_key,
			PersistentOffenseKey = offense_persistent_id,
			FcraDate = fcra_date,
			FcraDateType = fcra_date_type,
			ConvictionOverrideDate = conviction_override_date,
			ConvictionOverrideDateType = conviction_override_date_type,
			Source = 'DC'),
		CriminalPunishment(
			OffenderKey = offender_key,
			DateOfSentence = stc_dt,
			SentenceCounty = cty_conv,		
			SentenceType = stc_desc_1,
			SentenceDescription = stc_desc_2,
			CommunityService = stc_desc_3,
			CurrentStatus = stc_desc_4,
			SentenceLength = stc_lgth,
			SentenceLengthDescription = stc_lgth_desc,
			IncarcerationAdmissionDate = inc_adm_dt,
			MinimumTerm = min_term,
			MinimumTermDescription = min_term_desc,
			MaximumTerm = max_term,
			MaximumTermDescription = max_term_desc,
			SourceFile = source_file,
			SourceState = orig_state,
			ParoleCurrentStatusDescription = parole,
			ProbationTimePeriod = probation,
			Source = 'DC'),
		CriminalDetails(
			OffenderKey = offender_key,
			Source = 'DC'),
		PERMITS(DPMBitmap)),
			
	Dataset_Doxie_Files__Key_Court_Offenses(
		CriminalOffender(
			OffenderKey = offender_key,
			NumberOfOffenseCounts = num_of_counts),
		CriminalOffense(
			OffenderKey = offender_key,
			CaseNumber = court_case_number,
			PersistentOffenseKey = offense_persistent_id,
			OffenseScore = offense_score,
			OffenseCategory = offense_category,
			CourtOffenseLevel = court_off_lev,
			OffenseDate = off_date,
			DataType = data_type,		 
			CourtCost = sent_court_cost,
			CourtFine = sent_court_fine,
			SuspendedCourtFine = sent_susp_court_fine,
			TrafficFlag = fcra_traffic_flag,
			ConvictionFlag = fcra_conviction_flag,
			StateOfSource = state_origin,
			DataSource = source_file,
			DateOfArrest = arr_date,
			AgencyName = le_agency_desc,
			AgencyCaseNumber = le_agency_case_number,
			TrafficTicketNumber = traffic_ticket_number,
			ArrestOffenseCode = arr_off_code,
			ArrestInitialChargeDescription = arr_off_desc_1,
			ArrestAmendedChargeDescription = arr_off_desc_2,
			ArrestOffenceTypeDescription = arr_off_type_desc,
			ArrestOffenseLevel = arr_off_lev,
			DateOfDispositionForInitialCharge = arr_disp_date,
			InitialChargeDispositionDescription = arr_disp_desc_1,
			AdditionalDispositionDescription = arr_disp_desc_2,
			CourtCode = court_cd,
			CourtDescription = court_desc,
			CourtFinalPlea = court_final_plea,
			CourtOffenseCode = court_off_code,
			CourtOffenseDescription = court_off_desc_1,
			CourtOffenseAdditionalDescription = court_off_desc_2,
			CourtStatute = court_statute,
			CourtDispositionDate = court_disp_date,
			CourtDispositionCode = court_disp_code,
			CourtDispositionDescription = court_disp_desc_1,
			CourtAdditionalDispositionDescription = court_disp_desc_2,
			DateOfAppeal = appeal_date,
			DateofVerdict = convict_dt,
			OffenseTown = offense_town,
			CourtDate = court_dt,
			CourtCounty = court_county,
			ArrestOffenseLevelMapped = arr_off_lev_mapped,
			CourtOffenseLevelMapped = court_off_lev_mapped,
			FcraOffenseKey = fcra_offense_key,
			FcraDate = fcra_date,
			FcraDateType = fcra_date_type,
			ConvictionOverrideDate = conviction_override_date,
			ConvictionOverrideDateType = conviction_override_date_type),
		CriminalPunishment(
			OffenderKey = offender_key,
			DateOfSentence = sent_date,
			CurrentStatus = sent_susp_time,
			SentenceLengthDescription = sent_jail,
			ProbationTimePeriod = sent_probation,
			AdditionalProvision1 = sent_addl_prov_desc_1,
			AdditionalProvision2 = sent_addl_prov_desc_2,
			ConsecutiveAndConcurrentInformation = sent_consec,
			InstituitonName = sent_agency_rec_cust,
			Restitution = restitution,
			SentenceCounty = cty_conv,
			CommunityService = community_service,
			AdditionalSentenceDates = addl_sent_dates,
			ProbationDescription = probation_desc2),
		CriminalDetails(
			OffenderKey = offender_key),
		PERMITS(DPMBitmap)),
	
			
	Dataset_Doxie_Files__Key_BocaShell_Crim_FCRA(
		PersonOffenses(FILTER((UNSIGNED)did != 0),
			Subject = did,
			OffenderKey = offender_key),
		PersonOffender(
			Subject = did,
			OffenderKey = offender_key),
		CriminalOffense(
			OffenderKey = offender_key,
			CaseDate = date,
			CaseNumber = case_num,
			ConvictionFlag = fcra_conviction_flag,
			TrafficFlag = fcra_traffic_flag,
			OffenseScore = offense_score),
		PERMITS(DPMBitmap)),

	Dataset_Doxie_Files__Key_Offenders(
		CriminalOffender(
			OffenderKey = offender_key,
			SourceFile = source_file,
			SourceState = orig_state,
			Citizenship = citizenship,
			HairColor = hair_color_desc,
			EyeColor = eye_color_desc,
			SkinColor = skin_color_desc,
			Height = height,
			Weight = weight,
			Status = party_status_desc,
			CurrentIncarceratedFlag = curr_incar_flag,
			CurrentParoleFlag = curr_parole_flag,
			CurrentProbationFlag = curr_probation_flag,
			DataType = data_type,
			DataSource = datasource,
			DateFirstSeen = fcra_date,
			Source = src),
		CriminalOffense(
			OffenderKey = offender_key,
			CaseNumber = case_num,
			CourtDescription = case_court,
			CaseDate = case_date,
			CaseTypeDescription = case_type_desc,
			CountyOfSource = county_of_origin,
			DepartmentOfLawEnforcementNumber = dle_num,
			FederalBureauOfInvestigationsNumber = fbi_num,
			InmateNumber = doc_num,
			StateIdentificationNumberAssigned = id_num,
			OffenseScore = offense_score,
			FcraDate = fcra_date,
			FcraDateType = fcra_date_type,
			ConvictionFlag = fcra_conviction_flag,
			TrafficFlag = fcra_traffic_flag,
			ConvictionOverrideDate = conviction_override_date,
			ConvictionOverrideDateType = conviction_override_date_type,
			DateFirstSeen = fcra_date,
			Source = src),
		CriminalDetails(
			OffenderKey = offender_key,
			DateFirstSeen = fcra_date,
			Source = src),
		Person(
			UID = did,
			Race = race,
			RaceDescription = race_desc,
			DateOfBirth = dob,
			FirstName = fname,
			LastName = lname,
			MiddleName = mname,
			NameSuffix = name_suffix,
			DateFirstSeen = fcra_date,
			Source = src),
		Person(
			UID = did,
			DateOfBirth = dob_alias,
			DateFirstSeen = fcra_date,
			Source = src),
		PersonOffenses(
			Subject = did,
			OffenderKey = offender_key,
			DateFirstSeen = fcra_date,
			Source = src),
		PersonOffender(
			Subject = did,
			OffenderKey = offender_key,
			DateFirstSeen = fcra_date,
			Source = src),	
		OffenderAddress(
			OffenderKey = offender_key,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			ZIP5 = zip5,
			SecondaryRange = sec_range,
			DateFirstSeen = fcra_date,
			Source = src),
		SocialSecurityNumber(FILTER((UNSIGNED)ssn != 0),
			UID=ssn,
			DateFirstSeen = fcra_date,
			Source = src),		
		OffenderSSN(
			Social = ssn,
			OffenderKey = offender_key,
			DateFirstSeen = fcra_date,
			Source = src),
		PersonSSN(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)ssn != 0),
			Subject = did,
			Social = ssn,
			DateFirstSeen = fcra_date,
			Source = src),	
		PERMITS(DPMBitmap)),

	Dataset_Bankruptcy_Files__Key_Search(
		PersonBankruptcy(FILTER((UNSIGNED)did != 0 AND name_type = 'D'),
			TMSID = TMSID,
			Court_Code = Court_Code,
			Case_Number = Case_Number,
			DID = did,
			DateFirstSeen = date_first_seen, // Contains information for ASOF
			DateLastSeen = date_last_seen, // Contains information for ASOF
			Subject = did,
			Source = 'BA'),
		Bankruptcy(
			TMSID = TMSID,
			Court_Code = Court_Code,
			CourtCode = Court_Code,
			Case_Number = Case_Number,
			CaseNumber = Case_Number,
			DID = did,
			DateFirstSeen = date_first_seen, // Contains information for ASOF
			DateLastSeen = date_last_seen, // Contains information for ASOF
			OriginalCaseNumber = orig_case_number,
			SourceDescription = srcdesc,
			OriginalChapter = chapter,
			FilingType = filing_type,
			BusinessFlag = business_flag,
			CorporateFlag = corp_flag,
			DischargedDate = discharged,
			Disposition = disposition,
			DebtorType = debtor_type,
			DebtorSequence = debtor_seq,
			DispositionType = disptype,
			DispositionReason = dispreason,
			DispositionTypeDescription = disptypedesc,
			NameType = name_type,
			ScreenDescription = screendesc,
			DecodedDescription = dcodedesc,
			DateFiled = date_filed,
			RecordType = record_type,
			DateVendorFirstReported = date_vendor_first_reported,
			DateVendorLastReported = date_vendor_last_reported,
			CaseID = caseid,
			DefendantID = defendantid,
      LastStatusUpdate = statusdate,
			Source = 'BA'),
		PersonSSN(FILTER((UNSIGNED)ssn != 0 AND (UNSIGNED)did != 0),
			Subject = did,
			Social = ssn,	
			DateFirstSeen = date_first_seen,
			DateLastSeen = date_last_seen,
			Source = 'BA'),
		SocialSecurityNumber(FILTER((UNSIGNED)ssn != 0),
			UID=ssn,
			IssueState = st,
			DateFirstSeen = date_first_seen,
			DateLastSeen = date_last_seen,
			Source = 'BA'),
		PhoneSSN(FILTER((UNSIGNED)ssn != 0 AND (UNSIGNED)phone != 0),
			PhoneNumber = phone,
			Social = ssn,
			DateFirstSeen = date_first_seen,
			DateLastSeen = date_last_seen,
			Source = 'BA'),
		SSNBankruptcy(FILTER((UNSIGNED)ssn != 0),
			Social = ssn,
			TMSID = TMSID,
			Court_Code = Court_Code,
			Case_Number = Case_Number,
			DID = did,
			DateFirstSeen = date_first_seen,
			DateLastSeen = date_last_seen,
			Source = 'BA'),
		SSNAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)ssn != 0),
			Social = ssn,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			DateFirstSeen = date_first_seen,
			DateLastSeen = date_last_seen,
			Source = 'BA'),
		PERMITS(DPMBitmap)),
		
 	Dataset_Bankruptcy_Files__Linkids_Key_Search(
		Bankruptcy(
			TMSID = TMSID,
			Court_Code = Court_Code,
			CourtCode = Court_Code,
			Case_Number = Case_Number,
			CaseNumber = Case_Number,
			DID = did,
			DateFirstSeen = date_first_seen, // Contains information for ASOF
			DateLastSeen = date_last_seen, // Contains information for ASOF
			OriginalCaseNumber = orig_case_number,
			SourceDescription = srcdesc,
			OriginalChapter = chapter,
			FilingType = filing_type,
			BusinessFlag = business_flag,
			CorporateFlag = corp_flag,
			DischargedDate = discharged,
			Disposition = disposition,
			DebtorType = debtor_type,
			DebtorSequence = debtor_seq,
			DispositionType = disptype,
			DispositionReason = dispreason,
			DispositionTypeDescription = disptypedesc,
			NameType = name_type,
			ScreenDescription = screendesc,
			DecodedDescription = dcodedesc,
			DateFiled = date_filed,
			RecordType = record_type,
			DateVendorFirstReported = date_vendor_first_reported,
			DateVendorLastReported = date_vendor_last_reported,
			CaseID = caseid,
			DefendantID = defendantid,
      LastStatusUpdate = statusdate,
			Source = src),
		SeleBankruptcy(
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			TMSID = TMSID,
			Court_Code = Court_Code,
			Case_Number = Case_Number,
			Source = src),	
			PERMITS(DPMBitmap)),
			
	Dataset_BIPV2__Key_BH_Linking_kfetch2(
		BusinessUlt(
			UID=UltID,
			UltSegment = ult_seg,
			DateVendorFirstReported = dt_vendor_first_reported,
			DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = dt_first_seen,
			DateLastSeen = dt_last_seen,
			Source = source),
		BusinessOrg(
			UltID = ultid,   
			OrgID = orgid,
			NodesTotal = nodes_total,
			OrgSegment = org_seg,
			SourceGroupID = vl_id,
			DateVendorFirstReported = dt_vendor_first_reported,
			DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = dt_first_seen,
			DateLastSeen = dt_last_seen,
			Source = source),
		BusinessSele(
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid,
			SeleGold = sele_gold,
			IsSeleLevel = is_sele_level,
			IsOrgLevel = is_org_level,
			IsUltLevel = is_ult_level,
			SeleSegment = sele_seg,
			IsCorporation = iscorp,
			Name = company_name,
			NameType = company_name_type_derived,
			NameStatus = company_name_status_derived,
			CorporationLegalName = corp_legal_name,
			DoingBusinessAs = dba_name,
			Ticker = company_ticker,
			TickerExchange = company_ticker_exchange,
			URL = company_url,
			BusinessType = cnp_btype,
			CompanyStatus = company_status_derived,
			OrganizationStructure = company_org_structure_derived,
			EBRNumber = ebr_file_number,
			SICCode = company_sic_code1,
			SICCodeOrder = 1,
			NAICSCode = company_naics_code1,
			NAICSCodeOrder = 1,
			DateVendorFirstReported = dt_vendor_first_reported,
			DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = dt_first_seen,
			DateLastSeen = dt_last_seen,
			HeaderHitFlag = TRUE,
			Source = source),
		BusinessSele(FILTER((UNSIGNED)company_sic_code2 > 0 OR (UNSIGNED)company_naics_code2 > 0), // Pulling SIC and NAICS Codes 2 through 5 if populated
			SICCode = company_sic_code2,
			SICCodeOrder = 2,
			NAICSCode = company_naics_code2,
			NAICSCodeOrder = 2,
			DateVendorFirstReported = dt_vendor_first_reported,
			DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = dt_first_seen,
			DateLastSeen = dt_last_seen,
			HeaderHitFlag = TRUE,
			Source = source),
		BusinessSele(FILTER((UNSIGNED)company_sic_code3 > 0 OR (UNSIGNED)company_naics_code3 > 0),
			SICCode = company_sic_code3,
			SICCodeOrder = 3,
			NAICSCode = company_naics_code3,
			NAICSCodeOrder = 3,
			DateVendorFirstReported = dt_vendor_first_reported,
			DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = dt_first_seen,
			DateLastSeen = dt_last_seen,
			HeaderHitFlag = TRUE,
			Source = source),
		BusinessSele(FILTER((UNSIGNED)company_sic_code4 > 0 OR (UNSIGNED)company_naics_code4 > 0),
			SICCode = company_sic_code4,
			SICCodeOrder = 4,
			NAICSCode = company_naics_code4,
			NAICSCodeOrder = 4,
			DateVendorFirstReported = dt_vendor_first_reported,
			DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = dt_first_seen,
			DateLastSeen = dt_last_seen,
			HeaderHitFlag = TRUE,
			Source = source),
		BusinessSele(FILTER((UNSIGNED)company_sic_code5 > 0 OR (UNSIGNED)company_naics_code5 > 0),
			SICCode = company_sic_code5,
			SICCodeOrder = 5,
			NAICSCode = company_naics_code5,
			NAICSCodeOrder = 5,
			DateVendorFirstReported = dt_vendor_first_reported,
			DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = dt_first_seen,
			DateLastSeen = dt_last_seen,
			HeaderHitFlag = TRUE,
			Source = source),
		BusinessProx(FILTER((UNSIGNED)proxid<>0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			ParentProxID = parent_proxid,
			SeleProxID = sele_proxid,
			OrgProxID = org_proxid,
			UltProxID = ultimate_proxid,
			LevelsFromTop = levels_from_top,
			NodesBelow = nodes_below,
			ProxSegment = prox_seg,
			StoreNumber = cnp_store_number,
			ActiveDunsNumber = active_duns_number,
			HistDunsNumber = hist_duns_number,
			DeletedKey = deleted_key,
			DunsNumber = duns_number,
			DateVendorFirstReported = dt_vendor_first_reported,
			DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = dt_first_seen,
			DateLastSeen = dt_last_seen,
			HeaderHitFlag = TRUE,
			Source = source),
		BusinessPow(
			UltID = ultid,   
			OrgID = orgid,
			SeleID = seleid,
			ProxID = proxid,
			PowID = powid,
			PowSegment = pow_seg,
			DateVendorFirstReported = dt_vendor_first_reported,
			DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = dt_first_seen,
			DateLastSeen = dt_last_seen,
			Source = source),
		Address(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 ),
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			UnitDesignation = unit_desig,
			SecondaryRange = sec_range,
			PostalCity = p_city_name,
			VanityCity = v_city_name,
			State = st,
			ZIP5 = zip,
			ZIP4 = zip4,
			CompanyAddressTypeRaw = company_address_type_raw,
			CompanyAddressTypeDerived = company_address_type_derived,
			MetropolitanStatisticalArea = msa,
			AddressTypeDerived = address_type_derived,
			DateLastSeen = dt_first_seen_company_address,
			DateFirstSeen = dt_last_seen_company_address,
			Source = source),  
		//ProxAddress below is not a duplicate, this key has 5 SIC & 5 NAICS code fields each ProdAddress statement below is for a different pair.	
		ProxAddress(FILTER((STRING10)prim_range_derived != '' AND (STRING28)prim_name_derived != '' AND (UNSIGNED3)zip != 0  AND (UNSIGNED)proxid<>0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			PrimaryRange = prim_range_derived,
			Predirectional = predir,
			PrimaryName = prim_name_derived,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			SICCode = company_sic_code1,
			NAICSCode = company_naics_code1,
			DateFirstSeenCompanyAddress = dt_first_seen_company_address,
			DateLastSeenCompanyAddress = dt_last_seen_company_address,
			DateFirstSeen = dt_first_seen,
			DateLastSeen = dt_last_seen,
			Source = source),
		ProxAddress(FILTER((STRING10)prim_range_derived != '' AND (STRING28)prim_name_derived != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)proxid<>0 AND((UNSIGNED)company_sic_code2 > 0 OR (UNSIGNED)company_naics_code2 > 0)),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			PrimaryRange = prim_range_derived,
			Predirectional = predir,
			PrimaryName = prim_name_derived,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			SICCode = company_sic_code2,
			NAICSCode = company_naics_code2,
			DateFirstSeenCompanyAddress = dt_first_seen_company_address,
			DateLastSeenCompanyAddress = dt_last_seen_company_address,
			DateFirstSeen = dt_first_seen,
			DateLastSeen = dt_last_seen,
			Source = source),
		ProxAddress(FILTER((STRING10)prim_range_derived != '' AND (STRING28)prim_name_derived != '' AND (UNSIGNED3)zip != 0  AND (UNSIGNED)proxid<>0 AND((UNSIGNED)company_sic_code3 > 0 OR (UNSIGNED)company_naics_code3 > 0)),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			PrimaryRange = prim_range_derived,
			Predirectional = predir,
			PrimaryName = prim_name_derived,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			SICCode = company_sic_code3,
			NAICSCode = company_naics_code3,
			DateFirstSeenCompanyAddress = dt_first_seen_company_address,
			DateLastSeenCompanyAddress = dt_last_seen_company_address,
			DateFirstSeen = dt_first_seen,
			DateLastSeen = dt_last_seen,
			Source = source),	
		ProxAddress(FILTER((STRING10)prim_range_derived != '' AND (STRING28)prim_name_derived != '' AND (UNSIGNED3)zip != 0  AND (UNSIGNED)proxid<>0 AND((UNSIGNED)company_sic_code4 > 0 OR (UNSIGNED)company_naics_code4 > 0)),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			PrimaryRange = prim_range_derived,
			Predirectional = predir,
			PrimaryName = prim_name_derived,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			SICCode = company_sic_code4,
			NAICSCode = company_naics_code4,
			DateFirstSeenCompanyAddress = dt_first_seen_company_address,
			DateLastSeenCompanyAddress = dt_last_seen_company_address,
			DateFirstSeen = dt_first_seen,
			DateLastSeen = dt_last_seen,
			Source = source),		
		ProxAddress(FILTER((STRING10)prim_range_derived != '' AND (STRING28)prim_name_derived != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)proxid<>0 AND((UNSIGNED)company_sic_code5 > 0 OR (UNSIGNED)company_naics_code5 > 0)),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			PrimaryRange = prim_range_derived,
			Predirectional = predir,
			PrimaryName = prim_name_derived,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			SICCode = company_sic_code5,
			NAICSCode = company_naics_code5,
			DateFirstSeenCompanyAddress = dt_first_seen_company_address,
			DateLastSeenCompanyAddress = dt_last_seen_company_address,
			DateFirstSeen = dt_first_seen,
			DateLastSeen = dt_last_seen,
			Source = source),			
		//ProxPhoneNumber below is not a duplicate, this key has 5 SIC & 5 NAICS code fields each ProdPhone statement below is for a different pair.	
		ProxPhoneNumber(FILTER((UNSIGNED)company_phone != 0 AND (UNSIGNED)proxid<>0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			PhoneNumber = company_phone,
			SICCode = company_sic_code1,
			NAICSCode = company_naics_code1,
			DateFirstSeen = dt_first_seen,
			DateLastSeen = dt_last_seen,
			Source = source),
		ProxPhoneNumber(FILTER((UNSIGNED)company_phone != 0 AND (UNSIGNED)proxid<>0 AND ((UNSIGNED)company_sic_code2 > 0 OR (UNSIGNED)company_naics_code2 > 0 )),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			PhoneNumber = company_phone,
			SICCode = company_sic_code2,
			NAICSCode = company_naics_code2,
			DateFirstSeen = dt_first_seen,
			DateLastSeen = dt_last_seen,
			Source = source),
		ProxPhoneNumber(FILTER((UNSIGNED)company_phone != 0 AND (UNSIGNED)proxid<>0 AND ((UNSIGNED)company_sic_code3 > 0 OR (UNSIGNED)company_naics_code3 > 0)),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			PhoneNumber = company_phone,
			SICCode = company_sic_code3,
			NAICSCode = company_naics_code3,
			DateFirstSeen = dt_first_seen,
			DateLastSeen = dt_last_seen,
			Source = source),	
		ProxPhoneNumber(FILTER((UNSIGNED)company_phone != 0 AND (UNSIGNED)proxid<>0 AND ((UNSIGNED)company_sic_code4 > 0 OR (UNSIGNED)company_naics_code4 > 0)),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			PhoneNumber = company_phone,
			SICCode = company_sic_code4,
			NAICSCode = company_naics_code4,
			DateFirstSeen = dt_first_seen,
			DateLastSeen = dt_last_seen,
			Source = source),
		ProxPhoneNumber(FILTER((UNSIGNED)company_phone != 0 AND (UNSIGNED)proxid<>0 AND ((UNSIGNED)company_sic_code5 > 0 OR (UNSIGNED)company_naics_code5 > 0)),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			PhoneNumber = company_phone,
			SICCode = company_sic_code5,
			NAICSCode = company_naics_code5,
			DateFirstSeen = dt_first_seen,
			DateLastSeen = dt_last_seen,
			Source = source),
		TIN(FILTER((UNSIGNED)company_fein	!= 0),
			UID = company_fein,
			DateFirstSeen = dt_first_seen,
			DateLastSeen = dt_last_seen,
			DateVendorFirstReported = dt_vendor_first_reported,
			DateVendorLastReported = dt_vendor_last_reported,
			Source = source),	
		SeleTIN(FILTER((UNSIGNED)ultid<>0 AND (UNSIGNED)orgid<>0 AND (UNSIGNED)seleid<>0 AND (UNSIGNED)company_fein	!= 0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			TaxID = company_fein,
			DateFirstSeen = dt_first_seen,
			DateLastSeen = dt_last_seen,
			DateVendorFirstReported = dt_vendor_first_reported,
			DateVendorLastReported = dt_vendor_last_reported,
			Source = source),	
		TINAddress(FILTER((STRING10)prim_range_derived != '' AND (STRING28)prim_name_derived != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)company_fein	!= 0),
			TaxID = company_fein,	
			PrimaryRange = prim_range_derived,
			Predirectional = predir,
			PrimaryName = prim_name_derived,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			DateVendorFirstReported = dt_vendor_first_reported,
			DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = dt_last_seen,
			DateLastSeen = dt_first_seen,
			Source = source),	
		TINPhoneNumber(FILTER((UNSIGNED)company_phone != 0 AND (UNSIGNED)company_fein	!= 0),
			TaxID = company_fein,
			PhoneNumber = company_phone,
			IsContactPhone = FALSE,
			DateVendorFirstReported = dt_vendor_first_reported,
			DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = dt_first_seen,
			DateLastSeen = dt_last_seen,
			Source = source),	
		TINPhoneNumber(FILTER((UNSIGNED)contact_phone != 0 AND (UNSIGNED)company_fein	!= 0),
			TaxID = company_fein,
			PhoneNumber = contact_phone,
			IsContactPhone = TRUE,
			DateVendorFirstReported = dt_vendor_first_reported,
			DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = dt_first_seen,
			DateLastSeen = dt_last_seen,
			Source = source),	
		PERMITS(DPMBitmap)),

	Dataset_FAA__Key_Aircraft_IDs(
		Aircraft(
			NNumber = n_number,
			DateFirstSeen = date_first_seen, // Contains information for ASOF
			DateLastSeen = date_last_seen, // Contains information for ASOF
			SerialNumber = serial_number,
			ManufacturerModelCode = mfr_mdl_code,
			EngineManufacturerModelCode = eng_mfr_mdl,
			YearManufactured = year_mfr,
			LastActionDate = last_action_date,
			Type = type_aircraft,
			TypeEngine = type_engine,
			StatusCode = status_code,
			TransponderCode = mode_s_code,					
			FractionalOwner = fract_owner,
			ManufacturerName = aircraft_mfr_name,
			ModelName = model_name,
			Source = src),
		AircraftOwner(FILTER((UNSIGNED)did_out != 0),
			NNumber = n_number,
			DateFirstSeen = date_first_seen, // Contains information for ASOF
			DateLastSeen = date_last_seen, // Contains information for ASOF
			Owner = did_out,
			RegistrantType = type_registrant,
			CertificateIssueDate = cert_issue_date,
			Certification = certification,
			Source = src),	
		PERMITS(DPMBitmap)),
		
Dataset_FAA__key_aircraft_linkids(
	Aircraft(
		NNumber = n_number,
		DateFirstSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')date_first_seen, // Contains information for ASOF
		DateLastSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')date_last_seen, // Contains information for ASOF
		SerialNumber = serial_number,
		ManufacturerModelCode = mfr_mdl_code,
		EngineManufacturerModelCode = eng_mfr_mdl,
		YearManufactured = year_mfr,
		LastActionDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')last_action_date,
		Type = type_aircraft,
		TypeEngine = type_engine,
		StatusCode = status_code,
		TransponderCode = mode_s_code,					
		FractionalOwner = fract_owner,
		ManufacturerName = aircraft_mfr_name,
		ModelName = model_name,
		Source = src),	
	SeleAircraft(FILTER((UNSIGNED)ultid<>0 AND (UNSIGNED)orgid<>0 AND (UNSIGNED)seleid<>0),
		UltID = ultid,
		OrgID = orgid,
		SeleID = seleid,
		NNumber = n_number,
		RegistrantType = type_registrant,
		FractionalOwner = fract_owner,
		CertificateIssueDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')cert_issue_date,
		Certification = certification,
		DateFirstSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')date_first_seen,
		DateLastSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')date_last_seen,
		Source = Src),
	PERMITS(DPMBitmap)),

	Dataset_VehicleV2__Key_Vehicle_Main_Key(
		Vehicle(FILTER((STRING20)vehicle_key <> ''),
			VehicleKey = vehicle_key,
			StateOfOrigin = state_origin,
			OriginalVin = orig_vin,
			OriginalYearMake = orig_year,
			OriginalMake = orig_make_code,
			OriginalMakeDescription = orig_make_desc,
			OriginalSeries = orig_series_code,
			OriginalSeriesDescription = orig_series_desc,
			OriginalModel = orig_model_code,
			OriginalModelDescription = orig_model_desc,
			OriginalBody = orig_body_code,
			OriginalBodyDescription = orig_body_desc,
			OriginalNetWeight = orig_net_weight,
			OriginalGrossWeight = orig_gross_weight,
			OriginalNumberAxles = orig_number_of_axles,
			OriginalVehicleUse = orig_vehicle_use_code,
			OriginalVehicleUseDescription = orig_vehicle_use_desc,
			OriginalVehicleType = orig_vehicle_type_code,
			OriginalVehicleTypeDescription = orig_vehicle_type_desc,
			OriginalMajorColor = orig_major_color_code,
			OriginalMajorColorDescription = orig_major_color_desc,
			OriginalMinorColor = orig_minor_color_code,
			OriginalMinorColorDescription = orig_minor_color_desc,
			VinaVin = vina_vin,
			VinaVinPattern = vina_vin_pattern_indicator,
			VinaBypassCode = vina_bypass_code,
			VinaVehicleType = vina_veh_type,
			VinaNCICMake = vina_ncic_make,
			VinaModelYearYY = vina_model_year_yy,
			VinaRestraint = vina_vp_restraint,
			VinaMakeName = vina_vp_abbrev_make_name,
			VinaYear = vina_vp_year,
			VinaVpSeries = vina_vp_series,
			VinaVpModel = vina_vp_model,
			VinaAirConditioning = vina_vp_air_conditioning,
			VinaPowerSteering = vina_vp_power_steering,
			VinaPowerBrakes = vina_vp_power_brakes,
			VinaPowerWindows = vina_vp_power_windows,
			VinaTiltWheel = vina_vp_tilt_wheel,
			VinaRoof = vina_vp_roof,
			VinaOptionalRoof1 = vina_vp_optional_roof1,
			VinaOptionalRoof2 = vina_vp_optional_roof2,
			VinaRadio = vina_vp_radio,
			VinaOptionalRadio1 = vina_vp_optional_radio1,
			VinaOptionalRadio2 = vina_vp_optional_radio2,
			VinaTransmission = vina_vp_transmission,
			VinaOptionalTransmission1 = vina_vp_optional_transmission1,
			VinaOptionalTransmission2 = vina_vp_optional_transmission2,
			VinaALB = vina_vp_anti_lock_brakes,
			VinaFrontWD = vina_vp_front_wheel_drive,
			VinaFourWD = vina_vp_four_wheel_drive,
			VinaSecuritySystem = vina_vp_security_system,
			VinaDRL = vina_vp_daytime_running_lights,
			VinaSeriesName = vina_vp_series_name,
			VinaModelYear = vina_model_year,
			VinaSeries = vina_series,
			VinaModel = vina_model,
			VinaBodyStyle = vina_body_style,
			VinaMakeDescription = vina_make_desc,
			VinaModelDescription = vina_model_desc,
			VinaSeriesDescription = vina_series_desc,
			VinaBodyStyleDescription = vina_body_style_desc,
			VinaCylinders = vina_number_of_cylinders,
			VinaEngineSize = vina_engine_size,
			VinaFuelCode = vina_fuel_code,
			VinaPrice = vina_price,
			BestMakeCode = best_make_code,
			BestSeriesCode = best_series_code,
			BestModelCode = best_model_code,
			BestBodyCode = best_body_code,
			BestModelYear = best_model_year,
			BestMajorColor = best_major_color_code,
			BestMinorColor = best_minor_color_code,
			BrandedTitleFlag = branded_title_flag,
			BrandCode1 = brand_code_1,
			BrandDate1 = cleaned_brand_date_1,
			BrandState1 = brand_state_1,
			BrandCode2 = brand_code_2,
			BrandDate2 = cleaned_brand_date_2,
			BrandSate2 = brand_state_2,
			BrandCode3 = brand_code_3,
			BrandDate3 = cleaned_brand_date_3,
			BrandSate3 = brand_state_3,
			BrandCode4 = brand_code_4,
			BrandDate4 = cleaned_brand_date_4,
			BrandSate4 = brand_state_4,
			BrandCode5 = brand_code_5,
			BrandDate5 = cleaned_brand_date_5,
			BrandSate5 = brand_state_5,
			TodFlag = tod_flag,
			ModelClassCode = model_class_code,
			ModelClass = model_class,
			MinDoorCount = min_door_count,
			SafetyType = safety_type,
			AirbagDriver = airbag_driver,
			AirbagFrontDriverSide = airbag_front_driver_side,
			AirbagFrontHeadCurtain = airbag_front_head_curtain,
			AirbagFrontPassanger = airbag_front_pass,
			AirbagFrontPassangerSide = airbag_front_pass_side,
			Airbags = airbags,
			Source = source_code), 
		PERMITS(DPMBitmap)),

	Dataset_VehicleV2__Key_Vehicle_Party_Key(
		Vehicle(FILTER((STRING20)vehicle_key <> ''),
			DateLastSeen = FORMAT('YYYYMM01')date_last_seen, // Contains information for ASOF
			DateFirstSeen = FORMAT('YYYYMM01')date_first_seen, // Contains information for ASOF
			VehicleKey = vehicle_key,
			StateOfOrigin = state_origin,
			LatestVehicleFlag = latest_vehicle_flag,
			LatestVehicleIterationFlag = latest_vehicle_iteration_flag,
			DateVendorFirstReported = date_vendor_first_reported,
			DateVendorLastReported = date_vendor_last_reported,
			SourceFirstDate = src_first_date,
			SourceLastDate = src_last_date,
			StandardLienholderName = std_lienholder_name,
			Source = source_code),
		PersonVehicle(FILTER((STRING20)vehicle_key <> '' AND (UNSIGNED)append_did != 0),
			DateFirstSeen = FORMAT('YYYYMM01')date_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')date_last_seen, // Contains information for ASOF
			Subject = append_did,
			VehicleKey = vehicle_key,
			RegistrationFirstDate = reg_first_date,
			RegistrationEarliestEffectiveDate = reg_earliest_effective_date,
			RegistrationLatestEffectiveDate = reg_latest_effective_date,
			RegistrationLatestExpirationeDate = reg_latest_expiration_date,
			RegistrationRecordCount = reg_rollup_count,
			RegistrationDecalNumber = reg_decal_number,
			RegistratoinDecalYear = reg_decal_year,
			RegistrationStatusCode = reg_status_code,
			RegistrationStatusDescription = reg_status_desc,
			RegistrationTrueLicensePlate = reg_true_license_plate,
			RegistrationLicensePlate = reg_license_plate,
			RegistrationLicenseState = reg_license_state,
			RegistrationLicensePlateTypeCode = reg_license_plate_type_code,
			RegistrationLicensePlateTypeDescription = reg_license_plate_type_desc,
			RegistrationPreviousLicenseState = reg_previous_license_state,
			RegistrationPreviousLicensePlate = reg_previous_license_plate,
			TitleNumber = ttl_number,
			TitleEarliestIssueDate = ttl_earliest_issue_date,
			TitleLatestIssueDate = ttl_latest_issue_date,
			TitlePreviousIssueDate = ttl_previous_issue_date,
			TitleRecordCount = ttl_rollup_count,
			TitleStatusCode = ttl_status_code,
			TitleStatusDescription = ttl_status_desc,
			TitleOdometerMileage = ttl_odometer_mileage,
			TitleOdometerStatusCode = ttl_odometer_status_code,
			TitleOdometerStatusDescription = ttl_odometer_status_desc,
			TitleOdometerDate = ttl_odometer_date,
			SequenceKey = sequence_key,
			History = history,
			HistorySource = TRUE,
			Source = source_code),		
		SeleVehicle(FILTER((STRING20)vehicle_key <> '' AND (UNSIGNED)ultid<>0 AND (UNSIGNED)orgid<>0 AND (UNSIGNED)seleid<>0),
			UltID = ultid,
			OrgID = orgid,
			SeleID = seleid,
			VehicleKey = vehicle_key,
			SequenceKey = sequence_key,
			PartyType = orig_party_type,
			PartyNameType = orig_name_type,
			RegistrationFirstDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')reg_first_date,
			RegistrationEarliestEffectiveDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')reg_earliest_effective_date,
			RegistrationLatestEffectiveDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')reg_latest_effective_date,
			RegistrationLatestExpirationeDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')reg_latest_expiration_date,
			RegistrationRecordCount = reg_rollup_count,
			RegistrationDecalNumber = reg_decal_number,
			RegistratoinDecalYear = reg_decal_year,
			RegistrationStatusCode = reg_status_code,
			RegistrationStatusDescription = reg_status_desc,
			RegistrationTrueLicensePlate = reg_true_license_plate,
			RegistrationLicensePlate = reg_license_plate,
			RegistrationLicenseState = reg_license_state,
			RegistrationLicensePlateTypeCode = reg_license_plate_type_code,
			RegistrationLicensePlateTypeDescription = reg_license_plate_type_desc,
			RegistrationPreviousLicenseState = reg_previous_license_state,
			RegistrationPreviousLicensePlate = reg_previous_license_plate,
			TitleNumber = ttl_number,
			TitleEarliestIssueDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')ttl_earliest_issue_date,
			TitleLatestIssueDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')ttl_latest_issue_date,
			TitlePreviousIssueDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')ttl_previous_issue_date,
			TitleRecordCount = ttl_rollup_count,
			TitleStatusCode = ttl_status_code,
			TitleStatusDescription = ttl_status_desc,
			TitleOdometerMileage = ttl_odometer_mileage,
			TitleOdometerStatusCode = ttl_odometer_status_code,
			TitleOdometerStatusDescription = ttl_odometer_status_desc,
			TitleOdometerDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')ttl_odometer_date,
			History = history,
			DateFirstSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')date_first_seen, 
			DateLastSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')date_last_seen,
			DateVendorFirstReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')date_vendor_first_reported,
			DateVendorLastReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')date_vendor_last_reported,
			Source = source_code),
		PERMITS(DPMBitmap)),

Dataset_VehicleV2__Key_Vehicle_LinkID_Key(
	Vehicle(FILTER((STRING20)vehicle_key <> ''),
		DateLastSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')date_last_seen, // Contains information for ASOF
		DateFirstSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')date_first_seen, // Contains information for ASOF
		VehicleKey = vehicle_key,
		StateOfOrigin = state_origin,
		LatestVehicleFlag = latest_vehicle_flag,
		LatestVehicleIterationFlag = latest_vehicle_iteration_flag,
		DateVendorFirstReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')date_vendor_first_reported,
		DateVendorLastReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')date_vendor_last_reported,
		Source = source_code),
	SeleVehicle(FILTER((STRING20)vehicle_key <> '' AND (UNSIGNED)ultid<>0 AND (UNSIGNED)orgid<>0 AND (UNSIGNED)seleid<>0),
		UltID = ultid,
		OrgID = orgid,
		SeleID = seleid,
		VehicleKey = vehicle_key,
		SequenceKey = sequence_key,
		PartyType = orig_party_type,
		PartyNameType = orig_name_type,
		RegistrationFirstDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')reg_first_date,
		RegistrationEarliestEffectiveDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')reg_earliest_effective_date,
		RegistrationLatestEffectiveDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')reg_latest_effective_date,
		RegistrationLatestExpirationeDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')reg_latest_expiration_date,
		RegistrationRecordCount = reg_rollup_count,
		RegistrationDecalNumber = reg_decal_number,
		RegistratoinDecalYear = reg_decal_year,
		RegistrationStatusCode = reg_status_code,
		RegistrationStatusDescription = reg_status_desc,
		RegistrationTrueLicensePlate = reg_true_license_plate,
		RegistrationLicensePlate = reg_license_plate,
		RegistrationLicenseState = reg_license_state,
		RegistrationLicensePlateTypeCode = reg_license_plate_type_code,
		RegistrationLicensePlateTypeDescription = reg_license_plate_type_desc,
		RegistrationPreviousLicenseState = reg_previous_license_state,
		RegistrationPreviousLicensePlate = reg_previous_license_plate,
		TitleNumber = ttl_number,
		TitleEarliestIssueDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')ttl_earliest_issue_date,
		TitleLatestIssueDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')ttl_latest_issue_date,
		TitlePreviousIssueDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')ttl_previous_issue_date,
		TitleRecordCount = ttl_rollup_count,
		TitleStatusCode = ttl_status_code,
		TitleStatusDescription = ttl_status_desc,
		TitleOdometerMileage = ttl_odometer_mileage,
		TitleOdometerStatusCode = ttl_odometer_status_code,
		TitleOdometerStatusDescription = ttl_odometer_status_desc,
		TitleOdometerDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')ttl_odometer_date,
		History = history,
		DateFirstSeen =  FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')date_first_seen, 
		DateLastSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')date_last_seen,
		DateVendorFirstReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')date_vendor_first_reported,
		DateVendorLastReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')date_vendor_last_reported,
		Source = source_code),
	PERMITS(DPMBitmap)),

	Dataset_Watercraft__Key_Watercraft_SID(
		Watercraft(
			WatercraftKey = watercraft_key,
			SequenceKey = sequence_key,
			OriginState = state_origin,
			DateFirstSeen = date_first_seen, // Contains information for ASOF
			DateLastSeen = date_last_seen, // Contains information for ASOF
			DateVendorFirstReported = date_vendor_first_reported,
			DateVendorLastReported = date_vendor_last_reported,
			Source = src),
		WatercraftOwner(FILTER((UNSIGNED)did > 0),
			DateFirstSeen = date_first_seen, // Contains information for ASOF
			DateLastSeen = date_last_seen, // Contains information for ASOF
			WatercraftKey = watercraft_key,
			Owner = did,
			Source = src),
		PERMITS(DPMBitmap)),

	Dataset_Watercraft__Watercraft__Key_LinkIds(		
		Watercraft(
			WatercraftKey = watercraft_key,
			SequenceKey = sequence_key,
			OriginState = state_origin,
			DateFirstSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')date_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')date_last_seen, // Contains information for ASOF
			DateVendorFirstReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')date_vendor_first_reported,
			DateVendorLastReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')date_vendor_last_reported,
			Source = src),	
		SeleWatercraft(FILTER((UNSIGNED)ultid<>0 AND (UNSIGNED)orgid<>0 AND (UNSIGNED)seleid<>0),
			UltID = ultid,
			OrgID = orgid,
			SeleID = seleid,
			WatercraftKey = watercraft_key,
			DateFirstSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')date_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')date_last_seen,
			DateVendorFirstReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')date_vendor_first_reported,
			DateVendorLastReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')date_vendor_last_reported,		
			Source = Src),
		PERMITS(DPMBitmap)),

	Dataset_ADVO__Key_Addr1(
		Address(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0),
			DateFirstSeen = date_first_seen, // Contains information for ASOF
			DateLastSeen = date_last_seen, // Contains information for ASOF
			ADVODateFirstSeen = date_first_seen,
			ADVODateLastSeen = date_last_seen,
			ADVODateVendorFirstReported = date_vendor_first_reported,
			ADVODateVendorLastReported = date_vendor_last_reported,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			UnitDesignation = unit_desig,
			SecondaryRange = sec_range,
			PostalCity = p_city_name,
			VanityCity = v_city_name,
			State = st,
			ZIP5 = zip,
			ZIP4 = zip4,
			CarrierRouteNumber = cart,
			CarrierRouteSortationAtZIP = cr_sort_sz,
			LineOfTravel = lot,
			LineOfTravelOrder = lot_order,
			DeliveryPointBarcode = dbpc,
			DeliveryPointBarcodeCheckDigit = chk_digit,
			TypeCode = rec_type,
			AddressTypeCode = address_type,
			County = county,
			Latitude = geo_lat,
			Longitude = geo_long,
			MetropolitanStatisticalArea = msa,
			GeoBlock = geo_blk,
			GeoMatch = geo_match,
			ACECleanerErrorCode = err_stat,
			VacancyIndicator = address_vacancy_indicator,
			ThrowBackIndicator = throw_back_indicator,
			SeasonalDeliveryIndicator = seasonal_delivery_indicator,
			SeasonalStartSuppressionDate = seasonal_start_suppression_date,
			SeasonalEndSuppressionDate = seasonal_end_suppression_date,
			DoNotDeliverIndicator = dnd_indicator,
			CollegeIndicator = college_indicator,
			CollegeStartSuppressionDate = college_start_suppression_date,
			CollegeEndSuppressionDate = college_end_suppression_date,
			StyleCode = address_style_flag,
			SimplifyCount = simplify_address_count,
			DropIndicator = drop_indicator,
			ResidentialOrBusinessIndicator = residential_or_business_ind,
			OnlyWayToGetMailIndicator = owgm_indicator,
			RecordTypeCode = record_type_code,
			MixedUsageCode = mixed_address_usage,
			VacationBeginDate = vac_begdt,
			VacationEndDate = vac_enddt,
			NumberOfCurrentVacationMonths = months_vac_curr,
			MaxVacationMonths = months_vac_max,
			VacationPeriodsCount = vac_count,
			Source = src),
		PERMITS(DPMBitmap)),	

	Dataset_ADVO__Key_Addr1_History(
		Address(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0),
			DateFirstSeen = date_first_seen, // Contains information for ASOF
			DateLastSeen = date_last_seen, // Contains information for ASOF
			ADVODateFirstSeen = date_first_seen,
			ADVODateLastSeen = date_last_seen,
			ADVODateVendorFirstReported = date_vendor_first_reported,
			ADVODateVendorLastReported = date_vendor_last_reported,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			UnitDesignation = unit_desig,
			SecondaryRange = sec_range,
			PostalCity = p_city_name,
			VanityCity = v_city_name,
			State = st,
			ZIP5 = zip,
			ZIP4 = zip4,
			CarrierRouteNumber = cart,
			CarrierRouteSortationAtZIP = cr_sort_sz,
			LineOfTravel = lot,
			LineOfTravelOrder = lot_order,
			DeliveryPointBarcode = dbpc,
			DeliveryPointBarcodeCheckDigit = chk_digit,
			TypeCode = rec_type,
			AddressTypeCode = address_type,
			County = county,
			Latitude = geo_lat,
			Longitude = geo_long,
			MetropolitanStatisticalArea = msa,
			GeoBlock = geo_blk,
			GeoMatch = geo_match,
			ACECleanerErrorCode = err_stat,
			VacancyIndicator = address_vacancy_indicator,
			ThrowBackIndicator = throw_back_indicator,
			SeasonalDeliveryIndicator = seasonal_delivery_indicator,
			SeasonalStartSuppressionDate = seasonal_start_suppression_date,
			SeasonalEndSuppressionDate = seasonal_end_suppression_date,
			DoNotDeliverIndicator = dnd_indicator,
			CollegeIndicator = college_indicator,
			CollegeStartSuppressionDate = college_start_suppression_date,
			CollegeEndSuppressionDate = college_end_suppression_date,
			StyleCode = address_style_flag,
			SimplifyCount = simplify_address_count,
			DropIndicator = drop_indicator,
			ResidentialOrBusinessIndicator = residential_or_business_ind,
			OnlyWayToGetMailIndicator = owgm_indicator,
			RecordTypeCode = record_type_code,
			MixedUsageCode = mixed_address_usage,
			VacationBeginDate = vac_begdt,
			VacationEndDate = vac_enddt,
			NumberOfCurrentVacationMonths = months_vac_curr,
			MaxVacationMonths = months_vac_max,
			VacationPeriodsCount = vac_count/*,
			Source = src*/),
		PERMITS(DPMBitmap)),

	Dataset_DMA__Key_DNM_Name_Address( 
		Address(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0),
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			UnitDesignation = unit_desig,
			SecondaryRange = sec_range,
			PostalCity = p_city_name,
			VanityCity = v_city_name,
			DoNotMailIndicator = 'Y',
			State = st,
			ZIP5 = zip,
			ZIP4 = zip4), // This file doesn't contain a Source code
		PERMITS(DPMBitmap)), 

	// These fraudpoint3 keys might be a gateway.			
	Dataset_Fraudpoint3__Key_Address(
		Address(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0),
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			UnitDesignation = unit_desig,
			SecondaryRange = sec_range,
			PostalCity = p_city_name,
			VanityCity = v_city_name,
			State = st,
			ZIP5 = zip,
			ZIP4 = zip4,
			Longitude = geo_long,
			Latitude = geo_lat,
			GeoBlock = geo_blk/*,
			Source = Src*/),
		Phone(FILTER((UNSIGNED)phone_number != 0),
			UID = phone_number,
			Phone10 = phone_number,
			Source = Src),
		SocialSecurityNumber(FILTER((UNSIGNED)ssn != 0),
			UID=ssn/*,
			Source = Src*/),
		PERMITS(DPMBitmap)),

	Dataset_Header__Key_Addr_Hist(
		PersonAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED)zip != 0 AND (UNSIGNED)s_did != 0),
			Subject = s_did,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = suffix,
			Postdirectional = postdir,
			SecondaryRange = sec_range,
			ZIP5 = zip,
			AddressRank = address_history_seq,
			InsuranceSourceCount = Insurance_Source_Count,
			AddressType = AddressType,
			PropertySourceCount = Property_Source_Count,
			UtilitySourceCount = Utility_Source_Count,
			VehicleSourceCount = Vehicle_Source_Count,
			DLSourceCount = DL_Source_Count,
			VoterSourceCount = Voter_Source_Count,
			DateFirstSeen = FORMAT('YYYYMM01')date_first_seen,
			DateLastSeen = FORMAT('YYYYMM01')date_last_seen,
			Source = src),
		ZipCodePerson(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)s_did != 0),
			Subject = s_did,
			Zip = zip,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			DateFirstSeen = FORMAT('YYYYMM01')date_first_seen,
			DateLastSeen = FORMAT('YYYYMM01')date_last_seen,
			Source = src),
		PERMITS(DPMBitmap)),

	Dataset_Inquiry_AccLogs__Key_FCRA_DID(
		Inquiry(
			TransactionID = search_info.transaction_id,
			DateFirstSeen = dateofinquiry, // Contains information for ASOF
			DateLastSeen = dateofinquiry, // Contains information for ASOF
			DateOfInquiry = dateofinquiry,
			TimeOfInquiry = timeofinquiry,
			SequenceNumber = search_info.sequence_number,
			Method = search_info.method,
			ProductCode = search_info.product_code,
			FunctionDescription = search_info.function_description,
			GLBPurpose = permissions.glb_purpose,
			DPPAPurpose = permissions.dppa_purpose,
			FCRAPurpose = permissions.fcra_purpose,
			SubMarket = bus_intel.sub_market,
			Vertical = bus_intel.vertical,
			Use = bus_intel.use,
			Industry = bus_intel.industry,
			Source = Src),
		Person(FILTER((UNSIGNED)person_q.appended_adl > 0),
			UID = person_q.appended_adl,
			DateFirstSeen = dateofinquiry, // Contains information for ASOF
			DateLastSeen = dateofinquiry, // Contains information for ASOF
			FirstName = person_q.fname,
			MiddleName = person_q.mname,
			LastName = person_q.lname,
			NameSuffix = person_q.name_suffix,
			DateOfBirth = person_q.dob,
			Source = Src),
		Address(FILTER(person_q.prim_range <> '' OR person_q.predir <> '' OR person_q.prim_name <> '' OR person_q.addr_suffix <> '' OR person_q.postdir <> '' OR person_q.sec_range <> '' OR person_q.zip5 <> ''),
			DateFirstSeen = dateofinquiry, // Contains information for ASOF
			DateLastSeen = dateofinquiry, // Contains information for ASOF
			PrimaryRange = person_q.prim_range,
			Predirectional = person_q.predir,
			PrimaryName = person_q.prim_name,
			Suffix = person_q.addr_suffix,
			Postdirectional = person_q.postdir,
			UnitDesignation = person_q.unit_desig,
			SecondaryRange = person_q.sec_range,
			VanityCity = person_q.v_city_name,
			State = person_q.st,
			ZIP5 = person_q.zip5,
			ZIP4 = person_q.zip4,
			TypeCode = person_q.addr_rec_type,
			County = person_q.fips_county,
			Latitude = person_q.geo_lat,
			Longitude = person_q.geo_long,
			GeoBlock = person_q.geo_blk,
			GeoMatch = person_q.geo_match,
			ACECleanerErrorCode = person_q.err_stat,
			Source = Src),
		Phone(FILTER((UNSIGNED)person_q.personal_phone > 0),
			DateFirstSeen = dateofinquiry, // Contains information for ASOF
			DateLastSeen = dateofinquiry, // Contains information for ASOF
			UID = person_q.personal_phone,
			Phone10 = person_q.personal_phone,
			Source = Src),
		Phone(FILTER(person_q.work_phone <> ''),
			DateFirstSeen = dateofinquiry, // Contains information for ASOF
			DateLastSeen = dateofinquiry, // Contains information for ASOF
			UID = person_q.work_phone,
			Phone10 = person_q.work_phone,
			Source = Src),
		DriversLicense(FILTER(person_q.dl <> '' OR person_q.dl_st <> ''),
			DriversLicenseNumber = person_q.dl,
			IssuingState = person_q.dl_st,
			DateFirstSeen = dateofinquiry, // Contains information for ASOF
			DateLastSeen = dateofinquiry, // Contains information for ASOF
			Source = Src),
		SocialSecurityNumber(FILTER((UNSIGNED)person_q.appended_ssn > 0),
			UID = person_q.appended_ssn,
			SSN = person_q.appended_ssn,
			DateFirstSeen = dateofinquiry, // Contains information for ASOF
			DateLastSeen = dateofinquiry, // Contains information for ASOF
			Source = Src),
		PersonInquiry(FILTER(person_q.appended_adl <> 0),
			Subject = person_q.appended_adl,
			TransactionID = search_info.transaction_id,
			DateFirstSeen = dateofinquiry, // Contains information for ASOF
			DateLastSeen = dateofinquiry, // Contains information for ASOF
			Source = Src),
		AddressInquiry(FILTER(person_q.prim_range <> '' OR person_q.predir <> '' OR person_q.prim_name <> '' OR person_q.addr_suffix <> '' OR person_q.postdir <> '' OR person_q.sec_range <> '' OR person_q.zip5 <> ''),
			TransactionID = search_info.transaction_id,
			PrimaryRange = person_q.prim_range,
			Predirectional = person_q.predir,
			PrimaryName = person_q.prim_name,
			Suffix = person_q.addr_suffix,
			Postdirectional = person_q.postdir,
			SecondaryRange = person_q.sec_range,
			ZIP5 = person_q.zip5,
			DateFirstSeen = dateofinquiry, // Contains information for ASOF
			DateLastSeen = dateofinquiry, // Contains information for ASOF
			Source = Src),
		SSNInquiry(FILTER(person_q.appended_ssn <> ''),
			TransactionID = search_info.transaction_id,
			SSN = person_q.appended_ssn,
			DateFirstSeen = dateofinquiry, // Contains information for ASOF
			DateLastSeen = dateofinquiry, // Contains information for ASOF
			Source = Src),
		PhoneInquiry(FILTER(person_q.personal_phone <> ''),
			TransactionID = search_info.transaction_id,
			PhoneNumber = person_q.personal_phone,
			DateFirstSeen = dateofinquiry, // Contains information for ASOF
			DateLastSeen = dateofinquiry, // Contains information for ASOF
			Source = Src),
		PhoneInquiry(FILTER(person_q.work_phone <> ''),
			TransactionID = search_info.transaction_id,
			PhoneNumber = person_q.work_phone,
			DateFirstSeen = dateofinquiry, // Contains information for ASOF
			DateLastSeen = dateofinquiry, // Contains information for ASOF
			Source = Src),
		DriversLicenseInquiry(FILTER(person_q.dl <> '' OR person_q.dl_st <> ''),
			TransactionID = search_info.transaction_id,
			DriversLicenseNumber = person_q.dl,
			IssuingState = person_q.dl_st,
			DateFirstSeen = dateofinquiry, // Contains information for ASOF
			DateLastSeen = dateofinquiry, // Contains information for ASOF
			Source = Src),
		PERMITS(DPMBitmap)),

	Dataset_USPIS_HotList__key_addr_search_zip(
		Address(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0),
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			UnitDesignation = unit_desig,
			SecondaryRange = sec_range,
			PostalCity = p_city_name,
			VanityCity = v_city_name,
			State = st,
			ZIP5 = zip,
			ZIP4 = zip4,
			HotListIndicator = 'Y'/*, 
			Source = src*/),
		PERMITS(DPMBitmap)),

	Dataset_UtilFile__Key_Address(
		Utility(
			UID = id,
			UtilityID = id,
			DateAddedToExchange = date_added_to_exchange,
			ConnectDate = connect_date,
			UtilityType = util_type,
			RecordDate = record_date,
			DateFirstSeen = date_first_seen,
			Source = src),
		UtilityAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED)zip != 0),
			PrimaryRange = prim_range,
			PrimaryName = prim_name,
			Postdirectional = postdir,
			Predirectional = predir,
			Suffix = addr_suffix,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			Util = id,
			DateFirstSeen = date_first_seen,
			Source = src),
		Address(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED)address_zip != 0),
			PrimaryRange = prim_range,
			PrimaryName = prim_name,
			Postdirectional = postdir,
			Predirectional = predir,
			Suffix = addr_suffix,
			SecondaryRange = sec_range,
			CarrierRouteNumber = cart,
			CarrierRouteSortationAtZIP = cr_sort_sz,
			PostalCity = p_city_name,
			VanityCity = v_city_name,
			LineOfTravel = lot,
			LineOfTravelOrder = lot_order,
			ZIP5 = zip,
			ZIP4 = zip4,
			CarrierRouteNumber = cart,
			CarrierRouteSortationAtZIP = cr_sort_sz,
			LineOfTravel = lot,
			LineOfTravelOrder = lot_order,
			DeliveryPointBarcode = dbpc,
			DeliveryPointBarcodeCheckDigit = chk_digit,
			TypeCode = rec_type,
			County = county,
			Latitude = geo_lat,
			Longitude = geo_long,
			MetropolitanStatisticalArea = msa,
			GeoBlock = geo_blk,
			GeoMatch = geo_match,
			ACECleanerErrorCode = err_stat,
			DateFirstSeen = date_first_seen,
			Source = src),
		UtilityPhone(FILTER((UNSIGNED)phone != 0),
			Util = id,
			PhoneNumber = phone,
			DateFirstSeen = date_first_seen,
			Source = src),
		UtilityPerson(FILTER((UNSIGNED)did != 0),
			Util = id,
			Subject = did,
			DateFirstSeen = date_first_seen,
			Source = src),
		Phone(FILTER((UNSIGNED)phone != 0),
			UID = phone,
			Phone10 = phone,
			DateFirstSeen = date_first_seen,
			Source = src),
		PersonPhone(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)phone != 0),
			Subject = did,
			PhoneNumber = phone,
			DateFirstSeen = date_first_seen,
			Source = src),
		AddressPhone(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED)zip != 0),
			PrimaryRange = prim_range,
			PrimaryName = prim_name,
			Postdirectional = postdir,
			Predirectional = predir,
			Suffix = addr_suffix,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			PhoneNumber = phone,
			DateFirstSeen = date_first_seen,
			Source = src),		
		PERMITS(DPMBitmap)),

	Dataset_UtilFile__Key_DID(
		Utility(
			UID = id,
			UtilityID = id,
			DateAddedToExchange = date_added_to_exchange,
			ConnectDate = connect_date,
			UtilityType = util_type,
			RecordDate = record_date,
			DateFirstSeen = date_first_seen,
			Source = src),
		UtilityAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED)address_zip != 0),
			PrimaryRange = prim_range,
			PrimaryName = prim_name,
			Postdirectional = postdir,
			Predirectional = predir,
			Suffix = addr_suffix,
			ZIP5 = address_zip,
			SecondaryRange = sec_range,
			Util = id,
			DateFirstSeen = date_first_seen,
			Source = src),
		Address(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED)address_zip != 0),
			PrimaryRange = prim_range,
			PrimaryName = prim_name,
			Postdirectional = postdir,
			Predirectional = predir,
			Suffix = addr_suffix,
			SecondaryRange = sec_range,
			CarrierRouteNumber = cart,
			CarrierRouteSortationAtZIP = cr_sort_sz,
			PostalCity = p_city_name,
			VanityCity = v_city_name,
			ZIP5 = zip,
			ZIP4 = zip4,
			CarrierRouteNumber = cart,
			CarrierRouteSortationAtZIP = cr_sort_sz,
			LineOfTravel = lot,
			LineOfTravelOrder = lot_order,
			DeliveryPointBarcode = dbpc,
			DeliveryPointBarcodeCheckDigit = chk_digit,
			TypeCode = rec_type,
			County = county,
			Latitude = geo_lat,
			Longitude = geo_long,
			MetropolitanStatisticalArea = msa,
			GeoBlock = geo_blk,
			GeoMatch = geo_match,
			ACECleanerErrorCode = err_stat,
			DateFirstSeen = date_first_seen,
			Source = src),
		UtilityPhone(FILTER((UNSIGNED)phone != 0),
			Util = id,
			PhoneNumber = phone,
			DateFirstSeen = date_first_seen,
			Source = src),
		Phone(FILTER((UNSIGNED)phone != 0),
			UID = phone,
			Phone10 = phone,
			DateFirstSeen = date_first_seen,
			Source = src),
		UtilityPerson(FILTER((UNSIGNED)did != 0),
			Util = id,
			Subject = did,
			DateFirstSeen = date_first_seen,
			Source = src),
		PersonPhone(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)phone != 0),
			Subject = did,
			PhoneNumber = phone,
			DateFirstSeen = date_first_seen,
			Source = src),	
		AddressPhone(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED)zip != 0),
			PrimaryRange = prim_range,
			PrimaryName = prim_name,
			Postdirectional = postdir,
			Predirectional = predir,
			Suffix = addr_suffix,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			PhoneNumber = phone,
			DateFirstSeen = date_first_seen,
			Source = src),		
		PERMITS(DPMBitmap)),
	
	// ------------------------[ Business ]---------------------------

	Dataset_Cortera_Tradeline__Key_LinkIds(
		Tradeline(FILTER(status NOT IN ['D', 'R']),// excluding records 'D' (deleted record) and 'R' (replaced by newer record)
			UltID = ultid,    
			OrgID = orgid,   
			SeleID = seleid,
			AccountKey = account_key,
			ARDate = ar_date,
			Status = status,		 
			SegmentID = segment_id,
			TotalAR = total_ar, 
			CurrentAR = current_ar, 
			Aging1To30 = aging_1to30,
			Aging31To60 = aging_31to60,
			Aging61To90 = aging_61to90,
			Aging91Plus = aging_91plus,
			CreditLimit = credit_limit,
			FirstSaleDate = first_sale_date,
			LastSaleDate = last_sale_date,
			FileDate = filedate,
			DateFirstSeen = dt_first_seen,
			DateLastSeen = dt_last_seen,
			DtVendorFirstReported = dt_vendor_first_reported,
			DtVendorLastReported = dt_vendor_last_reported,
			Source = source), 
		SeleTradeline(FILTER(status NOT IN ['D', 'R']),//  excluding records 'D' (deleted record) and 'R' (replaced by newer record)
			UltID = ultid,    
			OrgID = orgid,   
			SeleID = seleid,   
			AccountKey = account_key, 
			DateFirstSeen = dt_first_seen,
			DateLastSeen = dt_last_seen,
			Source = source), 
		PERMITS(DPMBitmap)),

	Dataset_DX_Email__Key_Email_Payload(	
		Email(
			EmailAddress = clean_email,
			EmailRecKey = email_rec_key,
			UserName = append_email_username,
			DomainName = append_domain,
			DomainType = append_domain_type,
			DomainRoot = append_domain_root,
			DomainExtension = append_domain_ext,
			IsTopLevelDomainState = append_is_tld_state,
			IsTopLevelDomainGeneric = append_is_tld_generic,
			IsTopLevelDomainCountry = append_is_tld_country,
			IsValidDomainExtension = append_is_valid_domain_ext,
			OrigLoginDate = orig_login_date,
			OrigSite = orig_site,
			E360ID = orig_e360_id,
			TeramediaID = orig_teramedia_id,
			ProcessDate = process_date,
			ActiveCode = activecode,
			DateVendorFirstReported = date_vendor_first_reported,
			DateVendorLastReported = date_vendor_last_reported,
			CompanyName = cln_companyname,
			CompanyTitle = companytitle,
			DateFirstSeen = date_first_seen, // Contains information for ASOF
			DateLastSeen = date_last_seen, // Contains information for ASOF
			Source = Email_Src),
		Person(FILTER((UNSIGNED) did > 0),
			UID = did,  
			Title = clean_name.title,
			FirstName = clean_name.fname,
			MiddleName = clean_name.mname,
			LastName = clean_name.lname,
			NameSuffix = clean_name.name_suffix,
			DateFirstSeen = date_first_seen, // Contains information for ASOF
			DateLastSeen = date_last_seen, // Contains information for ASOF
			Source = Email_Src),
		Phone(FILTER((UNSIGNED)clean_phone > 0),
			UID = clean_phone,
			Phone10 = clean_phone,
			DateFirstSeen = date_first_seen, // Contains information for ASOF
			DateLastSeen = date_last_seen, // Contains information for ASOF
			Source = email_src),
		Address(FILTER(clean_address.prim_range <> '' OR clean_address.predir <> '' OR clean_address.prim_name <> '' OR clean_address.addr_suffix <> '' OR
									 clean_address.postdir <> '' OR clean_address.sec_range <> '' OR clean_address.zip <> ''),
			PrimaryRange = clean_address.prim_range,
			Predirectional = clean_address.predir,
			PrimaryName = clean_address.prim_name,
			Suffix = clean_address.addr_suffix,
			Postdirectional = clean_address.postdir,
			UnitDesignation = clean_address.unit_desig,
			SecondaryRange = clean_address.sec_range,
			PostalCity = clean_address.p_city_name,
			VanityCity = clean_address.v_city_name,
			State = clean_address.st,
			ZIP5 = clean_address.zip,
			ZIP4 = clean_address.zip4,
			AppendRawAID = append_rawaid,
			CarrierRouteNumber = clean_address.cart,
			CarrierRouteSortationAtZIP = clean_address.cr_sort_sz,
			LineOfTravel = clean_address.lot,
			LineOfTravelOrder = clean_address.lot_order,
			DeliveryPointBarcode = clean_address.dbpc,
			DeliveryPointBarcodeCheckDigit = clean_address.chk_digit,
			TypeCode = clean_address.rec_type,
			County = clean_address.county,
			Latitude = clean_address.geo_lat,
			Longitude = clean_address.geo_long,
			MetropolitanStatisticalArea = clean_address.msa,
			GeoBlock = clean_address.geo_blk,
			GeoMatch = clean_address.geo_match,
			ACECleanerErrorCode = clean_address.err_stat,
			DateFirstSeen = date_first_seen, // Contains information for ASOF
			DateLastSeen = date_last_seen, // Contains information for ASOF
			Source = email_src),
		Household(FILTER((UNSIGNED) hhid > 0),
			UID = hhid,
			Source = email_src),
		PersonEmail(
			Subject = did,
			EmailAddress = clean_email,
			DateFirstSeen = date_first_seen, // Contains information for ASOF
			DateLastSeen = date_last_seen, // Contains information for ASOF
			Source = email_src),
		PersonEmailPhoneAddress(
			Subject = did,
			EmailAddress = clean_email,
			PhoneNumber = clean_phone,
			PrimaryRange = clean_address.prim_range,
			Predirectional = clean_address.predir,
			PrimaryName = clean_address.prim_name,
			Suffix = clean_address.addr_suffix,
			Postdirectional = clean_address.postdir,
			SecondaryRange = clean_address.sec_range,
			ZIP5 = clean_address.zip,
			DateFirstSeen = date_first_seen, // Contains information for ASOF
			DateLastSeen = date_last_seen, // Contains information for ASOF
			Source = email_src),
		EmailHousehold(
			EmailAddress = clean_email,
			Household = hhid,
			DateFirstSeen = date_first_seen, // Contains information for ASOF; nonFCRA only
			DateLastSeen = date_last_seen, // Contains information for ASOF; nonFCRA only
			Source = email_src),
		PERMITS(DPMBitmap)),
		
	Dataset_Corp2__Kfetch_LinkIDs_Corp(
		BusinessSele(
			UltID = ultid,
			OrgID = orgid,
			SeleID = seleid,
			SOSKey = corp_key,
			SOSEntityDescription = corp_entity_desc,
			SOSNameTypeDescription = corp_ln_name_type_desc,
			SOSProcessDate = corp_process_date,
			SOSStatusCode = corp_status_cd,
			SOSStatusDescription = corp_status_desc,
			SOSStatusDate = corp_status_date,
			SOSIncorporationState = corp_inc_state,
			SOSIncorporationDate = corp_inc_date,
			SOSForeignStateCode = corp_forgn_state_cd,
			SOSForeignStateDate = corp_forgn_date,
			SOSForeignDomesticIndicator = corp_foreign_domestic_ind,
			ForProfitIndicator = corp_for_profit_ind,
			PublicOrPrivateIndicator = corp_public_or_private_ind,
			SOSOriginalBusinessTypeDescription = corp_orig_bus_type_desc,
			SOSOriginalOrgStructureDescription = corp_orig_org_structure_desc,
			SOSOriginalCharterNumber = corp_orig_sos_charter_nbr,
			SOSTermExistCode = corp_term_exist_cd,
			SOSRegisteredAgentName = corp_ra_name,
			SOSRegisteredAgentEffectiveDate = corp_ra_effective_date,
			SOSRegisteredAgentDateFirstSeen = corp_ra_dt_first_seen,
			SOSRegisteredAgentDateLastSeen = corp_ra_dt_last_seen,
			SICCode = corp_sic_code,
			SICCodeOrder = 1,
			NAICSCode = corp_naic_code,
			NAICSCodeOrder = 1,
			DateVendorFirstReported = dt_vendor_first_reported,
			DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = dt_first_seen,
			DateLastSeen = dt_last_seen,
			Source = src),
		Address(FILTER((STRING10)corp_addr1_prim_range != '' AND (STRING28)corp_addr1_prim_name != '' AND (UNSIGNED3)corp_addr1_zip5 != 0),
			PrimaryRange = corp_addr1_prim_range,
			Predirectional = corp_addr1_predir,
			PrimaryName = corp_addr1_prim_name,
			Suffix = corp_addr1_addr_suffix,
			Postdirectional = corp_addr1_postdir,
			UnitDesignation = corp_addr1_unit_desig,
			SecondaryRange = corp_addr1_sec_range,
			PostalCity = corp_addr1_p_city_name,
			VanityCity = corp_addr1_v_city_name,
			State = corp_addr1_state,
			ZIP5 = corp_addr1_zip5,
			ZIP4 = corp_addr1_zip4,
			Longitude = corp_addr1_geo_lat,
			Latitude = corp_addr1_geo_lat,
			GeoBlock = corp_addr1_geo_blk,
			Address_Type = Corp_Address1_Type_CD,
			Address_Desc = Corp_Address1_Type_Desc,
			DateFirstSeen = dt_last_seen,
			DateLastSeen = dt_first_seen,
			Source = src),	
		ProxAddress(FILTER((STRING10)corp_addr1_prim_range != '' AND (STRING28)corp_addr1_prim_name != '' AND (UNSIGNED3)corp_addr1_zip5 != 0 AND (UNSIGNED)proxid<>0  ),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			PrimaryRange = corp_addr1_prim_range,
			Predirectional = corp_addr1_predir,
			PrimaryName = corp_addr1_prim_name,
			Suffix = corp_addr1_addr_suffix,
			Postdirectional = corp_addr1_postdir,
			SecondaryRange = corp_addr1_sec_range,
			ZIP5 = corp_addr1_zip5,
			SICCode = corp_sic_code,
			NAICSCode = corp_naic_code,
			DateVendorFirstReported = dt_vendor_first_reported,
			DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = dt_last_seen,
			DateLastSeen = dt_first_seen,
			Source = src),
		Address(FILTER((STRING10)corp_addr2_prim_range != '' AND (STRING28)corp_addr2_prim_name != '' AND (UNSIGNED3)corp_addr2_zip5 != 0),
			PrimaryRange = corp_addr2_prim_range,
			Predirectional = corp_addr2_predir,
			PrimaryName = corp_addr2_prim_name,
			Suffix = corp_addr2_addr_suffix,
			Postdirectional = corp_addr2_postdir,
			UnitDesignation = corp_addr2_unit_desig,
			SecondaryRange = corp_addr2_sec_range,
			PostalCity = corp_addr2_p_city_name,
			VanityCity = corp_addr2_v_city_name,
			State = corp_addr2_state,
			ZIP5 = corp_addr2_zip5,
			ZIP4 = corp_addr2_zip4,
			Longitude = corp_addr2_geo_lat,
			Latitude = corp_addr2_geo_lat,
			GeoBlock = corp_addr2_geo_blk,
			Address_Type = Corp_Address2_Type_CD,
			Address_Desc = Corp_Address2_Type_Desc,
			DateFirstSeen = dt_last_seen,
			DateLastSeen = dt_first_seen,
			Source = src),	
		ProxAddress(FILTER((STRING10)corp_addr2_prim_range != '' AND (STRING28)corp_addr2_prim_name != '' AND (UNSIGNED3)corp_addr2_zip5 != 0 AND (UNSIGNED)proxid<>0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			PrimaryRange = corp_addr2_prim_range,
			Predirectional = corp_addr2_predir,
			PrimaryName = corp_addr2_prim_name,
			Suffix = corp_addr2_addr_suffix,
			Postdirectional = corp_addr2_postdir,
			SecondaryRange = corp_addr2_sec_range,
			ZIP5 = corp_addr2_zip5,
			SICCode = corp_sic_code,
			NAICSCode = corp_naic_code,
			DateVendorFirstReported = dt_vendor_first_reported,
			DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = dt_last_seen,
			DateLastSeen = dt_first_seen,
			Source = src),	
		Address(FILTER((STRING10)corp_ra_prim_range != '' AND (STRING28)corp_ra_prim_name != '' AND (UNSIGNED3)corp_ra_zip5 != 0),
			PrimaryRange = corp_ra_prim_range,
			Predirectional = corp_ra_predir,
			PrimaryName = corp_ra_prim_name,
			Suffix = corp_ra_addr_suffix,
			Postdirectional = corp_ra_postdir,
			UnitDesignation = corp_ra_unit_desig,
			SecondaryRange = corp_ra_sec_range,
			PostalCity = corp_ra_p_city_name,
			VanityCity = corp_ra_v_city_name,
			State = corp_ra_state,
			ZIP5 = corp_ra_zip5,
			ZIP4 = corp_ra_zip4,
			Longitude = corp_ra_geo_lat,
			Latitude = corp_ra_geo_lat,
			GeoBlock = corp_ra_geo_blk,
			Address_Type = corp_ra_address_Type_CD,
			Address_Desc = corp_ra_address_Type_Desc,
			DateFirstSeen = dt_last_seen,
			DateLastSeen = dt_first_seen,
			Source = src),	
		ProxAddress(FILTER((STRING10)corp_ra_prim_range != '' AND (STRING28)corp_ra_prim_name != '' AND (UNSIGNED3)corp_ra_zip5 != 0  AND (UNSIGNED)proxid<>0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			PrimaryRange = corp_ra_prim_range,
			Predirectional = corp_ra_predir,
			PrimaryName = corp_ra_prim_name,
			Suffix = corp_ra_addr_suffix,
			Postdirectional = corp_ra_postdir,
			SecondaryRange = corp_ra_sec_range,
			ZIP5 = corp_ra_zip5,
			SICCode = corp_sic_code,
			NAICSCode = corp_naic_code,
			DateVendorFirstReported = dt_vendor_first_reported,
			DateVendorLastReported = dt_vendor_last_reported,
			DateFirstSeen = dt_last_seen,
			DateLastSeen = dt_first_seen,
			Source = src),		
		BusinessProx(FILTER((UNSIGNED)proxid<>0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			ContactFirstName = corp_ra_fname1, 
			ContactMiddleName = corp_ra_mname1, 
			ContactLastName = corp_ra_lname1, 
			ContactNameSuffix = corp_ra_name_suffix1, 
			ContactPrimaryRange = corp_ra_prim_range,
			ContactPredirectional = corp_ra_predir,
			ContactPrimaryName = corp_ra_prim_name,
			ContactSuffix = corp_ra_addr_suffix,
			ContactPostdirectional = corp_ra_postdir,
			ContactSecondaryRange = corp_ra_sec_range,
			ContactState = corp_ra_state,
			ContactZIP5 = corp_ra_zip5,
			ContactPhoneNumber = corp_ra_phone10, 
			ContactJobTitle = corp_ra_title_desc, 
			DateRegusteredAgentResigned = corp_ra_resign_date,//there is a corp_ra_effective_date but all cases are the same as ra dt first seen
			DateFirstSeen = corp_ra_dt_first_seen, 
			DateLastSeen = corp_ra_dt_last_seen, 
			Source = src),
		PERMITS(DPMBitmap)),

	Dataset_InfoUSA__Key_DEADCO_LinkIds(
		Address(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip5 != 0),
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			UnitDesignation = unit_desig,
			SecondaryRange = sec_range,
			PostalCity = p_city_name,
			VanityCity = v_city_name,
			State = st,
			ZIP5 = zip5,
			ZIP4 = zip4,
			Longitude = geo_long,
			Latitude = geo_lat,
			GeoBlock = geo_blk,
			DeadCOIndicator = 'Y',
			DateFirstSeen = dt_first_seen,
			DateLastSeen = dt_last_seen,
			Source = src),
		// ProxAddress(
			// UltID = ultid,   
			// OrgID = orgid,    
			// SeleID = seleid, 
			// ProxID = proxid,
			// PrimaryRange = prim_range,
			// Predirectional = predir,
			// PrimaryName = prim_name,
			// Suffix = addr_suffix,
			// Postdirectional = postdir,
			// ZIP5 = zip5,
			// SecondaryRange = sec_range,
			// DateFirstSeen = dt_first_seen,
			// DateLastSeen = dt_last_seen,
			// Source = src),
		PERMITS(DPMBitmap)), 

	Dataset_UtilFile__Kfetch2_LinkIds(
	BusinessSele(
		UltID = ultid,
		OrgID = orgid,
		SeleID = seleid,
		DateVendorFirstReported = date_added_to_exchange,
		DateFirstSeen = date_first_seen,
		DateLastSeen = record_date,
		Source = src),
	ProxUtility(FILTER((UNSIGNED)proxid<>0),
		Util = id,
		UltID = ultid,   
		OrgID = orgid,    
		SeleID = seleid, 
		ProxID = proxid,
		UtilityType = util_type,
		DateVendorFirstReported = date_added_to_exchange,
		DateFirstSeen = date_first_seen,
		ConnectDate = connect_date,
		DateLastSeen = record_date,
		Source = src),
	Address(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0),
		PrimaryRange = prim_range,
		PrimaryName = prim_name,
		Postdirectional = postdir,
		Predirectional = predir,
		Suffix = addr_suffix,
		SecondaryRange = sec_range,
		CarrierRouteNumber = cart,
		CarrierRouteSortationAtZIP = cr_sort_sz,
		PostalCity = p_city_name,
		VanityCity = v_city_name,
		ZIP5 = zip,
		ZIP4 = zip4,
		CarrierRouteNumber = cart,
		CarrierRouteSortationAtZIP = cr_sort_sz,
		LineOfTravel = lot,
		LineOfTravelOrder = lot_order,
		DeliveryPointBarcode = dbpc,
		DeliveryPointBarcodeCheckDigit = chk_digit,
		TypeCode = rec_type,
		County = county,
		Latitude = geo_lat,
		Longitude = geo_long,
		MetropolitanStatisticalArea = msa,
		GeoBlock = geo_blk,
		GeoMatch = geo_match,
		ACECleanerErrorCode = err_stat,
		DateFirstSeen = date_first_seen,
		Source = src),
	Utility(		
		UID = id,
		UtilityID = id,
		DateAddedToExchange = date_added_to_exchange,
		ConnectDate = connect_date,
		UtilityType = util_type,
		RecordDate = record_date,
		DateFirstSeen = date_first_seen,
		Source = src),
	UtilityAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED)zip != 0),			
		Util = id,
		PrimaryRange = prim_range,
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = addr_suffix,
		Postdirectional = postdir,
		SecondaryRange = sec_range,
		ZIP5 = zip,
		DateFirstSeen = date_first_seen,
		Source = src),		
	UtilityPerson(FILTER((UNSIGNED)did != 0),
		Util = id,
		Subject = did,
		DateFirstSeen = date_first_seen,
		Source = src),
	UtilityPhone(	FILTER( (UNSIGNED)phone != 0),
		Util = id,
		PhoneNumber = phone,
		DateFirstSeen = date_first_seen,
		Source = src),
	ProxPhoneNumber(FILTER((UNSIGNED)phone != 0 AND (UNSIGNED)proxid<>0),
		UltID = ultid,   
		OrgID = orgid,    
		SeleID = seleid, 
		ProxID = proxid,
		PhoneNumber = phone,
		DateFirstSeen = date_first_seen,
		Source = src),
	PersonPhone(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)phone != 0),
		Subject = did,
		PhoneNumber = phone,
		DateFirstSeen = date_first_seen,
		Source = src),		
	AddressPhone(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED)zip != 0 AND (UNSIGNED)phone != 0),
		PrimaryRange = prim_range,
		PrimaryName = prim_name,
		Postdirectional = postdir,
		Predirectional = predir,
		Suffix = addr_suffix,
		ZIP5 = zip,
		SecondaryRange = sec_range,
		PhoneNumber = phone,
		DateFirstSeen = date_first_seen,
		Source = src),
	ProxAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED)zip != 0  AND (UNSIGNED)proxid<>0),
		UltID = ultid,   
		OrgID = orgid,    
		SeleID = seleid, 
		ProxID = proxid,
		PrimaryRange = prim_range,
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = addr_suffix,
		Postdirectional = postdir,
		ZIP5 = zip,
		SecondaryRange = sec_range,
		DateFirstSeen = date_first_seen,
		Source = src),
		PERMITS(DPMBitmap)),
		
	Dataset_Prof_LicenseV2__Key_Proflic_Did(
		ProfessionalLicense(FILTER(TRIM(cleaned_license_number) != '' AND TRIM(source_st) != ''),
			LicenseNumber = cleaned_license_number,
			LicenseState = source_st,
			LexID = did,
			SourceDescription  = vendor,
			LicenseDescription = license_type,
			LicenseBusinessFlag = business_flag,
			DateOfExpiration = expiration_date,
			DateOfLicenseRenewal = last_renewal_date,
			LicenseStatus = status,
			OriginalDateOfIssuance = issue_date,
			LicenseProfessionDescription  = profession_or_board,
			LicenseCategory = category,
			Occupation = occupation,
			DateFirstSeen = FORMAT('YYYYMMDD', 'YYYYMM01')date_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD', 'YYYYMM01')date_last_seen,
			Source = src),
		ProfessionalLicensePerson(FILTER(TRIM(cleaned_license_number) != '' AND TRIM(source_st) != '' AND did != 0),
			LicenseNumber = cleaned_license_number,
			LicenseState = source_st,
			LexID = did,
			Subject=did,
			DateFirstSeen = FORMAT('YYYYMMDD', 'YYYYMM01')date_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD', 'YYYYMM01')date_last_seen,
			Source = src),
		ProfessionalLicenseAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED) zip!= 0 AND TRIM(cleaned_license_number) != '' AND TRIM(source_st) != ''),
			LicenseNumber = cleaned_license_number,
			LicenseState = source_st,
			LexID = did,
			PrimaryRange = prim_range,
			PrimaryName = prim_name,
			Postdirectional = postdir,
			Predirectional = predir,
			Suffix = suffix,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			DateFirstSeen = FORMAT('YYYYMMDD', 'YYYYMM01')date_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD', 'YYYYMM01')date_last_seen,
			Source = src), 
		ProfessionalLicensePhone(FILTER(TRIM(phone) != '' AND TRIM(cleaned_license_number) != '' AND TRIM(source_st) != ''),
			LicenseNumber = cleaned_license_number,
			LicenseState = source_st,
			LexID = did,
			PhoneNumber = phone,
			DateFirstSeen = FORMAT('YYYYMMDD', 'YYYYMM01')date_first_seen,
			DateLastSeen = FORMAT('YYYYMMDD', 'YYYYMM01')date_last_seen,
			Source = src),
		PERMITS(DPMBitmap)),
	
	Dataset_Prof_License_Mari__Key_Did(
		ProfessionalLicense(FILTER(TRIM(cleaned_license_number) != '' AND TRIM(license_state) != ''),
			LicenseNumber = cleaned_license_number,
			LicenseState = license_state,
			LexID = did,
			DateCreated = create_dte,
			DateProcessed = process_date,
			LegacyResultCode = result_cd_1, // This indicates RecordStatusCode with the following values: C = Latest/Current Updating Source, S = Superceded Mari RID Updating Source, D = Dropped Mari RID Updating Source
			SourceDescription = std_source_desc,
			SourceCode = std_source_upd,
			DateFirstReported = date_vendor_first_reported,
			DateLastReported = date_vendor_last_reported,
			DateLastUpdated = last_upd_dte,
			LicenseBusinessFlag = type_cd,
			LicenseProfessionCode = std_prof_cd,
			LicenseProfessionDescription  = std_prof_desc,
			LicenseStatus = std_status_desc,
			LicenseDescription = std_license_desc,
			OriginalDateOfIssuance = orig_issue_dte,
			CurrentDateOfIssuance = curr_issue_dte,
			DateOfExpiration = expire_dte,
			StartDate = start_dte,
			DateOfLicenseRenewal = FORMAT('YYYYMMDD', 'YYYY0101')renewal_dte,
			AffiliatedTypeCode  = affil_type_cd,
			LicenseCategory = category,
			Occupation = occupation,
			DateFirstSeen = date_first_seen,
			DateLastSeen = date_last_seen,
			Source = src),   
		ProfessionalLicensePerson(FILTER(TRIM(cleaned_license_number) != '' AND TRIM(license_state) != '' AND did != 0),
			LicenseNumber = cleaned_license_number,
			LicenseState = license_state,
			LexID = did,
			Subject=did,
			DateFirstSeen = date_first_seen,
			DateLastSeen = date_last_seen,
			Source = src),
		ProfessionalLicenseAddress(FILTER((STRING10)mail_prim_range != '' AND (STRING28) mail_prim_name != '' AND (UNSIGNED)mail_zip5!= 0 AND TRIM(cleaned_license_number) != '' AND TRIM(license_state) != ''),
			LicenseNumber = cleaned_license_number,
			LicenseState = license_state,
			LexID = did,
			PrimaryRange = mail_prim_range,
			PrimaryName = mail_prim_name,
			Postdirectional = mail_postdir,
			Predirectional = mail_predir,
			Suffix = mail_addr_suffix,
			ZIP5 = mail_zip5,
			SecondaryRange = mail_sec_range,
			DateFirstSeen = date_first_seen,
			DateLastSeen = date_last_seen,
			Source = src),
		ProfessionalLicensePhone(FILTER(TRIM(cleaned_license_number) != '' AND TRIM(license_state) != '' AND TRIM(phn_mari_1) != ''),
			LicenseNumber = cleaned_license_number,
			LicenseState = license_state,
			LexID = did,
			PhoneNumber = phn_mari_1,
			DateFirstSeen = date_first_seen,
			DateLastSeen = date_last_seen,
			Source = src),
		PERMITS(DPMBitmap)),
		
	Dataset_UCC__Key_LinkIds_key(
		UCC(
			TMSID = tmsid,
			RMSID = rmsid,
			ForeignFlag = foreign_indc,
			ProcessDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')process_date,
			DateFirstSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_first_seen, 
			DateLastSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_last_seen,  
			DateVendorLastReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_vendor_last_reported,
			DateVendorFirstReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_vendor_first_reported,
			Source = src),
		PersonUCC(FILTER((UNSIGNED)did<>0),
			TMSID = tmsid,
			RMSID = rmsid,
			Subject = did,
			PartyType = party_type,
			DateFirstSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_first_seen, 
			DateLastSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_last_seen,  
			DateVendorLastReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_vendor_last_reported,
			DateVendorFirstReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_vendor_first_reported,
			Source = src),
		SeleUCC(FILTER((UNSIGNED)ultid<>0 AND (UNSIGNED)orgid<>0 AND (UNSIGNED)seleid<>0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			TMSID = tmsid,
			RMSID = rmsid,
			PartyType = party_type,
			DateFirstSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_first_seen, 
			DateLastSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_last_seen,  
			DateVendorLastReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_vendor_last_reported,
			DateVendorFirstReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_vendor_first_reported,
			Source = src),
		PERMITS(DPMBitmap)),
	
	Dataset_UCC__Key_RMSID_Main(
		UCC(
			TMSID = tmsid,
			RMSID = rmsid,
			ProcessDate = process_date,
			FilingJurisdiction = filing_jurisdiction,
			FilingNumber = filing_number,		
			FilingType = filing_type,
			FilingDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')filing_date,
			OriginalFilingDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')orig_filing_date,
			FilingTime = filing_time,
			FilingStatus = filing_status,
			FilingAgency = filing_agency,
			StatusType = status_type,
			ExpirationDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')expiration_date,
			ContractType = contract_type,
			StatementsFiled = statements_filed,
			CollateralDesc = collateral_desc,
			CollateralMachine = prim_machine,
			VendorEntryDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')vendor_entry_date, 
			VendorUpdateDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')vendor_upd_date, 
			Source = src),
		PERMITS(DPMBitmap)),
	
	Dataset_UCC__Key_RMSID_Party(
		UCC(
		TMSID = tmsid,
		RMSID = rmsid,
		ForeignFlag = foreign_indc,
		ProcessDate = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')process_date,
		DateFirstSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_first_seen, 
		DateLastSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_last_seen,  
		DateVendorLastReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_vendor_last_reported,
		DateVendorFirstReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_vendor_first_reported,
		Source = src),
	PersonUCC(FILTER((UNSIGNED)did<>0),
		TMSID = tmsid,
		RMSID = rmsid,
		Subject = did,
		PartyType = party_type,
		DateFirstSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_first_seen, 
		DateLastSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_last_seen,  
		DateVendorLastReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_vendor_last_reported,
		DateVendorFirstReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_vendor_first_reported,
		Source = src),
	SeleUCC(FILTER((UNSIGNED)ultid<>0 AND (UNSIGNED)orgid<>0 AND (UNSIGNED)seleid<>0),
		UltID = ultid,   
		OrgID = orgid,    
		SeleID = seleid, 
		TMSID = tmsid,
		RMSID = rmsid,
		PartyType = party_type,
		DateFirstSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_first_seen, 
		DateLastSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_last_seen,  
		DateVendorLastReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_vendor_last_reported,
		DateVendorFirstReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')dt_vendor_first_reported,
		Source = src),
	PERMITS(DPMBitmap)),
	
Dataset_Doxie__Key_Death_MasterV2_SSA_DID(
		Person(FILTER((UNSIGNED)l_did != 0),
			UID=l_did,
			FirstName = fname,
			MiddleName = mname,
			LastName = lname,
			NameSuffix = name_suffix,
			DateOfBirth = dob8,
			DateOfDeath = dod8,
			Source = src),
		SocialSecurityNumber(FILTER((UNSIGNED)ssn != 0),
			UID = ssn,
			DateOfDeath = dod8,
			Source = src),
		PersonSSN(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)ssn != 0),
			Subject = did,
			Social = ssn,
			Source = src),
		PERMITS(DPMBitmap)),

	Dataset_Risk_Indicators__Key_ADL_Risk_Table_v4_Combo( // This file doesn't contain Dates First/Last Seen, excluding those ASOF fields from the USE below
		Person(FILTER((UNSIGNED)did != 0),
			UID = did,
			DateOfBirth = reported_dob,
			Source = src),
		PERMITS(DPMBitmap)),

	Dataset_Risk_Indicators__Key_ADL_Risk_Table_v4_Experian( // This file doesn't contain Dates First/Last Seen, excluding those ASOF fields from the USE below
		Person(FILTER((UNSIGNED)did != 0),
			UID = did,
			DateOfBirth = reported_dob,
			Source = src),
		PERMITS(DPMBitmap)),

	Dataset_Risk_Indicators__Key_ADL_Risk_Table_v4_Equifax( // This file doesn't contain Dates First/Last Seen, excluding those ASOF fields from the USE below
		Person(FILTER((UNSIGNED)did != 0),
			UID = did,
			DateOfBirth = reported_dob,
			Source = src),
		PERMITS(DPMBitmap)),

	Dataset_Risk_Indicators__Key_ADL_Risk_Table_v4_TransUnion( // This file doesn't contain Dates First/Last Seen, excluding those ASOF fields from the USE below
		Person(FILTER((UNSIGNED)did != 0),
			UID = did,
			DateOfBirth = reported_dob,
			Source = src),
		PERMITS(DPMBitmap)),

	Dataset_DriversV2__Key_DL_DID(
		DriversLicense(FILTER(orig_state != ''),
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			DriversLicenseNumber = dl_number,
			IssuingState = orig_state,
			DriversLicenseSequence = dl_seq,
			LicenseClass = license_class,
			LicenseType = license_type,
			MoxieLicenseType = moxie_license_type,
			AttentionCode = attention_flag,
			Attention = attention_name,
			Restrictions = restrictions,
			RestrictionsDelimited = restrictions_delimited,
			OriginalExpirationDate = orig_expiration_date,
			OriginalIssueDate = orig_issue_date,
			IssueDate = lic_issue_date,
			ExpirationDate = expiration_date,
			ActiveDate = active_date,
			InactiveDate = inactive_date,
			Endorsement = lic_endorsement,
			MotorcycleCode = motorcycle_code,
			DriverEducationCode = driver_edu_code,
			DuplicateCount = dup_lic_count,
			RCDStat = rcd_stat_flag,
			Height = height,
			HairColor = hair_color,
			EyeColor = eye_color,
			Weight = weight,
			OOSPreviousDriversLicenseNumber = oos_previous_dl_number,
			PreviousState = oos_previous_st,
			Issuance = issuance,
			AddressChange = address_change,
			NameChange = name_change,
			DateOfBirthChange = dob_change,
			SexChange = sex_change,
			PreviousDriversLicenseNumber = old_dl_number,
			DriversLicenseKeyNumber = dl_key_number,
			CDLStatus = cdl_status,
			County = county_name,
			HistoryName = history_name,
			Race = race_name,
			RaceCode = race,
			Sex = sex_name,
			SexCode = sex_flag,
			HairColor = hair_color_name,
			EyeColor = eye_color_name,
			StateName = orig_state_name,
			History = history,
			Source = source_code),
		Person(UID = did,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Title = title,
			FirstName = fname,
			MiddleName = mname,
			LastName = lname,
			NameSuffix = name_suffix,
			DateOfBirth = dob,
			DateOfDeath = dod,
			Race = race,
			RaceDescription = race_name,
			Source = source_code),
		PersonDriversLicense(
			Subject=did,
			DriversLicenseNumber = dl_number,
			IssuingState = orig_state,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = source_code),
		AddressDriversLicense(
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = suffix,
			Postdirectional = postdir,
			SecondaryRange = sec_range,
			ZIP5 = zip5,
			DriversLicenseNumber = dl_number,
			IssuingState = orig_state,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = source_code),
		PERMITS(DPMBitmap)),

	Dataset_DriversV2__Key_DL_Number(
		DriversLicense(FILTER(orig_state != ''),
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			DriversLicenseNumber = dl_number,
			IssuingState = orig_state,
			DriversLicenseSequence = dl_seq,
			LicenseClass = license_class,
			LicenseType = license_type,
			MoxieLicenseType = moxie_license_type,
			AttentionCode = attention_flag,
			Attention = attention_name,
			Restrictions = restrictions,
			RestrictionsDelimited = restrictions_delimited,
			OriginalExpirationDate = orig_expiration_date,
			OriginalIssueDate = orig_issue_date,
			IssueDate = lic_issue_date,
			ExpirationDate = expiration_date,
			ActiveDate = active_date,
			InactiveDate = inactive_date,
			Endorsement = lic_endorsement,
			MotorcycleCode = motorcycle_code,
			DriverEducationCode = driver_edu_code,
			DuplicateCount = dup_lic_count,
			RCDStat = rcd_stat_flag,
			Height = height,
			HairColor = hair_color,
			EyeColor = eye_color,
			Weight = weight,
			OOSPreviousDriversLicenseNumber = oos_previous_dl_number,
			PreviousState = oos_previous_st,
			Issuance = issuance,
			AddressChange = address_change,
			NameChange = name_change,
			DateOfBirthChange = dob_change,
			SexChange = sex_change,
			PreviousDriversLicenseNumber = old_dl_number,
			DriversLicenseKeyNumber = dl_key_number,
			CDLStatus = cdl_status,
			County = county_name,
			HistoryName = history_name,
			Race = race_name,
			RaceCode = race,
			Sex = sex_name,
			SexCode = sex_flag,
			HairColor = hair_color_name,
			EyeColor = eye_color_name,
			StateName = orig_state_name,
			History = history,
			Source = source_code),
		Person(UID = did,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Title = title,
			FirstName = fname,
			MiddleName = mname,
			LastName = lname,
			NameSuffix = name_suffix,
			DateOfBirth = dob,
			DateOfDeath = dod,
			Race = race,
			// RaceDescription = race_desc1,
			Source = source_code),
		PersonDriversLicense(
			Subject=did,
			DriversLicenseNumber = dl_number,
			IssuingState = orig_state,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = source_code),
		AddressDriversLicense(
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = suffix,
			Postdirectional = postdir,
			SecondaryRange = sec_range,
			ZIP5 = zip5,
			DriversLicenseNumber = dl_number,
			IssuingState = orig_state,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = source_code),
		PERMITS(DPMBitmap)),

	Dataset_Doxie__Key_Header_Address(
		Address(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0),
			PrimaryName = prim_name,
			ZIP5 = zip,
			PrimaryRange = prim_range,
			SecondaryRange = sec_range,
			Predirectional = predir,
			Suffix = suffix,
			Postdirectional = postdir,
			UnitDesignation = unit_desig,
			PostalCity = city_name,
			State = st,
			County = county,
			GeoBlock = geo_blk,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen,
			HeaderHitFlag = TRUE,
			Source = src),
		SSNAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)ssn != 0),	
			PrimaryName = prim_name,
			ZIP5 = zip,
			PrimaryRange = prim_range,
			SecondaryRange = sec_range,
			Predirectional = predir,
			Suffix = suffix,
			Postdirectional = postdir,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen,
			Social = ssn,
			HeaderHitFlag = TRUE,
			Source = src),
		PersonAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)did != 0),
			Subject=did,
			PrimaryName = prim_name,
			ZIP5 = zip,
			PrimaryRange = prim_range,
			SecondaryRange = sec_range,
			Predirectional = predir,
			Suffix = suffix,
			Postdirectional = postdir,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen,
			HeaderHitFlag = TRUE,
			Source = src),
		SocialSecurityNumber(FILTER((UNSIGNED)ssn != 0),
			UID=ssn,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen,
			Source = src),
		Person(FILTER((UNSIGNED)did != 0),	
			UID=did,
			DateOfBirth = dob,
			FirstName = fname,
			LastName = lname,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen,
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen,
			Source = src),
		PERMITS(DPMBitmap)),

	Dataset_Risk_Indicators__Key_FCRA_ADL_Risk_Table_v4_Filtered_Combo( // This file doesn't contain Dates First/Last Seen, excluding those ASOF fields from the USE below
		Person(FILTER((UNSIGNED)did != 0),
			UID = did,
			DateOfBirth = reported_dob),
		PERMITS(DPMBitmap)),

	Dataset_Risk_Indicators__Key_FCRA_ADL_Risk_Table_v4_Filtered_Experian( // This file doesn't contain Dates First/Last Seen, excluding those ASOF fields from the USE below
		Person(FILTER((UNSIGNED)did != 0),
			UID = did,
			DateOfBirth = reported_dob,
			Source = src),
		PERMITS(DPMBitmap)),

	Dataset_Risk_Indicators__Key_FCRA_ADL_Risk_Table_v4_Filtered_Equifax( // This file doesn't contain Dates First/Last Seen, excluding those ASOF fields from the USE below
		Person(FILTER((UNSIGNED)did != 0),
			UID = did,
			DateOfBirth = reported_dob,
			Source = src),
		PERMITS(DPMBitmap)),
		
	Dataset_Relatives__Key_Relatives_V3( 
	FirstDegreeAssociations(
		DateFirstSeen = rel_dt_first_seen, // Contains information for ASOF
		DateLastSeen = rel_dt_last_seen, // Contains information for ASOF
		Subject = did1, 
		FirstDegreeAssociation = did2, 
		Title = title,
		RelationshipType = type,
		RelationshipConfidence = confidence,
		RelationshipScore = total_score,
		Generation = generation,
		RelationshipDateFirstSeen = rel_dt_first_seen,
		RelationshipDateLastSeen = rel_dt_last_seen),
	PERMITS(DPMBitmap)),
		
Dataset_BBB2__kfetch_BBB_LinkIds(
	BusinessSele(
		UltID = ultid,
		OrgID = orgid,
		SeleID = seleid,
		URL = http_link,
		BBBMemberSince = member_since_date,
		BBBCategory = member_category,
		DateVendorFirstReported = dt_vendor_first_reported,
		DateVendorLastReported = dt_vendor_last_reported,
		DateFirstSeen = date_first_seen,
		DateLastSeen = date_last_seen,
		Source = src),
	PERMITS(DPMBitmap)),	
	
Dataset_BBB2__kfetch_BBB_Non_Member_LinkIds(	
	BusinessSele(
		UltID = ultid,
		OrgID = orgid,
		SeleID = seleid,
		URL = http_link,
		BBBCategory = non_member_category,
		DateVendorFirstReported = dt_vendor_first_reported,
		DateVendorLastReported = dt_vendor_last_reported,
		DateFirstSeen = date_first_seen,
		DateLastSeen = date_last_seen,
		Source = src),
	PERMITS(DPMBitmap)),	
	
Dataset_BusReg__kfetch_busreg_company_linkids(	
	BusinessSele(
		UltID = ultid,
		OrgID = orgid,
		SeleID = seleid,
		TotalEmployees = rawfields.emp_size,
		SICCode = rawfields.sic,
		SICCodeOrder = 1,
		NAICSCode = rawfields.naics,
		NAICSCodeOrder = 1,
		DateVendorFirstReported = dt_vendor_first_reported,
		DateVendorLastReported = dt_vendor_last_reported,
		DateFirstSeen = dt_first_seen,
		DateLastSeen = dt_last_seen,
		Source = src),
	BusinessProx(FILTER((UNSIGNED)proxid<>0),
		UltID = ultid,
		OrgID = orgid,
		SeleID = seleid,
		ProxID = proxid,
		EmployeeCount = rawfields.emp_size,
		CorporationCode = rawfields.corpcode,
		DateVendorFirstReported = dt_vendor_first_reported,
		DateVendorLastReported = dt_vendor_last_reported,
		DateFirstSeen = dt_first_seen,
		DateLastSeen = dt_last_seen,
		Source = src),
	PERMITS(DPMBitmap)),	
	
Dataset_CalBus__kfetch_Calbus_LinkIDS(	
	BusinessSele(
			UltID = ultid,
			OrgID = orgid,
			SeleID = seleid,
			IndustryCode = industry_code,
			OwnershipType = ownership_code,
			NAICSCode = naics_code,
			NAICSCodeOrder = 1,
			DateFirstSeen = dt_first_seen,
			DateLastSeen = dt_last_seen,
			Source = src),
		PERMITS(DPMBitmap)),	
	
Dataset_Cortera__kfetch_LinkID(
	BusinessSele(
		UltID = ultid,
		OrgID = orgid,
		SeleID = seleid,
		TotalEmployees = total_employees,
		TotalSales = total_sales,
		SICCode = primary_sic,
		SICCodeOrder = 1,
		NAICSCode = primary_naics,
		NAICSCodeOrder = 1,
		DateVendorFirstReported = dt_vendor_first_reported,
		DateVendorLastReported = dt_vendor_last_reported,
		DateFirstSeen = dt_first_seen,
		DateLastSeen = dt_last_seen,
		Source = src),
	BusinessProx(FILTER((UNSIGNED)proxid<>0),
		UltID = ultid,
		OrgID = orgid,
		SeleID = seleid,
		ProxID = proxid,
		CorteraUltimateLinkID = ultimate_linkid,//9-digit unique number of the ultimate parent location.
		CorteraLinkID = link_id,//9-digit unique number assigned by Cortera to a company in its database.
		CompanyStatus = status,//Possible Values: 'A' - Active, 'D' - Dormant  (Dormant means we have not seen any activity within 30 months)
		IsClosed = is_closed,
		LocationCorpHierarchy = position_type, //Location in the corporate hierarchy.  Possible Values: 'S' - Single Location, 'B' - Branch, 'H' - Headquarters
		DateLastSeenLocation = loc_date_last_seen,
		DateClosed = closed_date,
		DateVendorFirstReported = dt_vendor_first_reported,
		DateVendorLastReported = dt_vendor_last_reported,
		DateFirstSeen = dt_first_seen,
		DateLastSeen = dt_last_seen,
		Source = src),		
	PERMITS(DPMBitmap)),

Dataset_DCAV2__kfetch_LinkIds(	
	BusinessSele(
		UltID = ultid,
		OrgID = orgid,
		SeleID = seleid,
		URL = rawfields.url,
		TotalSales = rawfields.sales,
		TotalEmployees = rawfields.emp_num,
		SICCode = rawfields.sic1,
		SICCodeOrder = 1,
		NAICSCode = rawfields.naics1,
		NAICSCodeOrder = 1,
		DateVendorFirstReported = date_vendor_first_reported,
		DateVendorLastReported = date_vendor_last_reported,
		DateFirstSeen = date_first_seen,
		DateLastSeen = date_last_seen,
		Source = src),
	BusinessSele(FILTER((UNSIGNED)rawfields.sic2 > 0 OR (UNSIGNED)rawfields.naics2 > 0), // Populating SIC/NAICS 2 through 10
		SICCode = rawfields.sic2,
		SICCodeOrder = 2,
		NAICSCode = rawfields.naics2,
		NAICSCodeOrder = 2,
		DateVendorFirstReported = date_vendor_first_reported,
		DateVendorLastReported = date_vendor_last_reported,
		DateFirstSeen = date_first_seen,
		DateLastSeen = date_last_seen,
		Source = src),
	BusinessSele(FILTER((UNSIGNED)rawfields.sic3 > 0 OR (UNSIGNED)rawfields.naics3 > 0),
		SICCode = rawfields.sic3,
		SICCodeOrder = 3,
		NAICSCode = rawfields.naics3,
		NAICSCodeOrder = 3,
		DateVendorFirstReported = date_vendor_first_reported,
		DateVendorLastReported = date_vendor_last_reported,
		DateFirstSeen = date_first_seen,
		DateLastSeen = date_last_seen,
		Source = src),
	BusinessSele(FILTER((UNSIGNED)rawfields.sic4 > 0 OR (UNSIGNED)rawfields.naics4 > 0),
		SICCode = rawfields.sic4,
		SICCodeOrder = 4,
		NAICSCode = rawfields.naics4,
		NAICSCodeOrder = 4,
		DateVendorFirstReported = date_vendor_first_reported,
		DateVendorLastReported = date_vendor_last_reported,
		DateFirstSeen = date_first_seen,
		DateLastSeen = date_last_seen,
		Source = src),
	BusinessSele(FILTER((UNSIGNED)rawfields.sic5 > 0 OR (UNSIGNED)rawfields.naics5 > 0),
		SICCode = rawfields.sic5,
		SICCodeOrder = 5,
		NAICSCode = rawfields.naics5,
		NAICSCodeOrder = 5,
		DateVendorFirstReported = date_vendor_first_reported,
		DateVendorLastReported = date_vendor_last_reported,
		DateFirstSeen = date_first_seen,
		DateLastSeen = date_last_seen,
		Source = src),
	BusinessSele(FILTER((UNSIGNED)rawfields.sic6 > 0 OR (UNSIGNED)rawfields.naics6 > 0),
		SICCode = rawfields.sic6,
		SICCodeOrder = 6,
		NAICSCode = rawfields.naics6,
		NAICSCodeOrder = 6,
		DateVendorFirstReported = date_vendor_first_reported,
		DateVendorLastReported = date_vendor_last_reported,
		DateFirstSeen = date_first_seen,
		DateLastSeen = date_last_seen,
		Source = src),
	BusinessSele(FILTER((UNSIGNED)rawfields.sic7 > 0 OR (UNSIGNED)rawfields.naics7 > 0),
		SICCode = rawfields.sic7,
		SICCodeOrder = 7,
		NAICSCode = rawfields.naics7,
		NAICSCodeOrder = 7,
		DateVendorFirstReported = date_vendor_first_reported,
		DateVendorLastReported = date_vendor_last_reported,
		DateFirstSeen = date_first_seen,
		DateLastSeen = date_last_seen,
		Source = src),
	BusinessSele(FILTER((UNSIGNED)rawfields.sic8 > 0 OR (UNSIGNED)rawfields.naics8 > 0),
		SICCode = rawfields.sic8,
		SICCodeOrder = 8,
		NAICSCode = rawfields.naics8,
		NAICSCodeOrder = 8,
		DateVendorFirstReported = date_vendor_first_reported,
		DateVendorLastReported = date_vendor_last_reported,
		DateFirstSeen = date_first_seen,
		DateLastSeen = date_last_seen,
		Source = src),
	BusinessSele(FILTER((UNSIGNED)rawfields.sic9 > 0 OR (UNSIGNED)rawfields.naics9 > 0),
		SICCode = rawfields.sic9,
		SICCodeOrder = 9,
		NAICSCode = rawfields.naics9,
		NAICSCodeOrder = 9,
		DateVendorFirstReported = date_vendor_first_reported,
		DateVendorLastReported = date_vendor_last_reported,
		DateFirstSeen = date_first_seen,
		DateLastSeen = date_last_seen,
		Source = src),
	BusinessSele(FILTER((UNSIGNED)rawfields.sic10 > 0 OR (UNSIGNED)rawfields.naics10 > 0),
		SICCode = rawfields.sic10,
		SICCodeOrder = 10,
		NAICSCode = rawfields.naics10,
		NAICSCodeOrder = 10,
		DateVendorFirstReported = date_vendor_first_reported,
		DateVendorLastReported = date_vendor_last_reported,
		DateFirstSeen = date_first_seen,
		DateLastSeen = date_last_seen,
		Source = src),
	PERMITS(DPMBitmap)),	
	
Dataset_EBR_kfetch_5600_Demographic_Data_linkids(	
	BusinessSele(
		UltID = ultid,
		OrgID = orgid,
		SeleID = seleid,
		OwnershipType = owner_type_code,
		EBRProcessDate = process_date,
		AgeEstablished = yrs_in_bus_actual,
		ReportedSales = sales_actual,
		EBREmployeeSizeCode = empl_size_code,
		TotalEmployees = empl_size_actual,
		BusinessType = bus_type_code,
		SICCode = SIC_1_Code,
		SICCodeOrder = 1,
		DateFirstSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')date_first_seen, // Only the Date First Seen appears to be "dirty"
		DateLastSeen = date_last_seen,
		Source = src),
	BusinessSele(FILTER((UNSIGNED)SIC_2_Code > 0), // Setting SIC Codes 2 through 4
		SICCode = SIC_2_Code,
		SICCodeOrder = 2,
		DateFirstSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')date_first_seen,
		DateLastSeen = date_last_seen,
		Source = src),
	BusinessSele(FILTER((UNSIGNED)SIC_3_Code > 0),
		SICCode = SIC_3_Code,
		SICCodeOrder = 3,
		DateFirstSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')date_first_seen,
		DateLastSeen = date_last_seen,
		Source = src),
	BusinessSele(FILTER((UNSIGNED)SIC_4_Code > 0),
		SICCode = SIC_4_Code,
		SICCodeOrder = 4,
		DateFirstSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')date_first_seen,
		DateLastSeen = date_last_seen,
		Source = src),
	BusinessProx(FILTER((UNSIGNED)proxid<>0),
		UltID = ultid,
		OrgID = orgid,
		SeleID = seleid,
		ProxID = proxid,
		LocationCorpHierarchy = location_code,//B= Branch, D = Department Store; F = Franchise; H = HQ; S = Single Entity; X = Multiple Name Occurrence; N = Division; U = Subsidiary; Blank = Not Available
		DateFirstSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')date_first_seen, // Only the Date First Seen appears to be "dirty"
		DateLastSeen = date_last_seen,
		Source = src),
	PERMITS(DPMBitmap)),
	
Dataset_FBNv2__kfetch_LinkIds(
	BusinessSele(
		UltID = ultid,
		OrgID = orgid,
		SeleID = seleid,
		SICCode = sic_code,
		SICCodeOrder = 1,
		DateVendorFirstReported = dt_vendor_first_reported,
		DateVendorLastReported = dt_vendor_last_reported,
		DateFirstSeen = dt_first_seen,
		DateLastSeen = dt_last_seen,
		Source = src),
	PERMITS(DPMBitmap)),	
	
Dataset_GovData__kfetch_IRS_NonProfit_linkIDs(
	BusinessSele(
		UltID = ultid,
		OrgID = orgid,
		SeleID = seleid,
		ReportedSales = Income_Amount,
		ReportedEarnings = Reported_Earnings, // Combination of Negative_Rev_Amount and Form_990_Revenue_Amount
		ReportedAssets = asset_amount,
		NonProfitClassificationCode = classification_code,
		NonProfitFoundationCode = foundation_code,
		NonProfitOrganizationCode = organization_code,
		DateFirstSeen = process_date,
		// DateLastSeen doesn't exist in this file
		Source = src),
	PERMITS(DPMBitmap)),	
	
Dataset_IRS5500__kfetch_LinkIDs(	
	BusinessSele(
		UltID = ultid,
		OrgID = orgid,
		SeleID = seleid,
		RetirementPlanBeginDate = form_plan_year_begin_date,
		RetirementPlanEffectiveDate = plan_eff_date,
		RetirementPlanEntityIndicator = type_plan_entity_ind,
		RetirementTotalParticipants = tot_partcp_boy_cnt,
		RetirementTotalActiveParticipants = tot_active_partcp_cnt,
		RetirementParticipantReceivingCount = rtd_sep_partcp_rcvg_cnt,
		RetirementParticipantFutureCount = rtd_sep_partcp_fut_cnt,
		RetirementReceivingBenefitCount = benef_rcvg_bnft_cnt,
		RetirementParticipantAccountBalanceCount = partcp_account_bal_cnt,
		RetirementParticipantPartiallyVestedCount = sep_partcp_partl_vstd_cnt,
		RetirementPlanPensionBenefitID = pension_benefit_plan_id,
		RetirementPlanWelfareBenefitIndicator = welfare_benefit_plan_ind,
		DateFirstSeen = form_plan_year_begin_date,
		// DateLastSeen doesn't exist in this file
		Source = src),
	PERMITS(DPMBitmap)),	
	
Dataset_OSHAIR__kfetch_OSHAIR_LinkIds(
	BusinessSele(
		UltID = ultid,
		OrgID = orgid,
		SeleID = seleid,
		OwnershipType = owner_type,
		SICCode = sic_code,
		SICCodeOrder = 1,
		NAICSCode = naics_code,
		NAICSCodeOrder = 1,
		DateFirstSeen = inspection_opening_date,
		DateLastSeen = inspection_close_date,
		Source = src),
	BusinessSele(FILTER((UNSIGNED)NAICs_Secondary_Code > 0), // Populating NAICs Code 2
		NAICSCode = NAICs_Secondary_Code,
		NAICSCodeOrder = 2,
		DateFirstSeen = inspection_opening_date,
		DateLastSeen = inspection_close_date,
		Source = src),
	BusinessProx(FILTER((UNSIGNED)proxid<>0),
		UltID = ultid,
		OrgID = orgid,
		SeleID = seleid,
		ProxID = proxid,
		OSHAPreviousActivityType = previous_activity_type,
		OSHAPreviousActivityTypeDescription = prev_activity_type_desc,
		OSHAAdvanceNoticeFlag = advance_notice_flag,
		OSHAInspectionOpeningDate = inspection_opening_date,
		OSHAInspectionCloseDate = inspection_close_date,
		OSHASafetyHealthFlag = safety_health_flag,
		OSHAInspectionType = inspection_type,
		OSHAInspectionScope = inspection_scope,
		OSHAWalkAroundFlag = walk_around_flag,
		OSHAEmployeesInterviewedFlag = employees_interviewed_flag,
		OSHAUnionFlag = union_flag,
		OSHACaseClosedFlag = closed_case_flag,
		OSHANoInspectionCode = why_no_inspection_code,
		OSHAInspectionTypeCode = inspection_type_code, // Derived from a series of fields: safety_pg_manufacturing_insp_flag, safety_pg_construction_insp_flag, safety_pg_maritime_insp_flag, health_pg_manufacturing_insp_flag, health_pg_construction_insp_flag, health_pg_maritime_insp_flag, migrant_farm_insp_flag
		OSHATotalViolations = total_violations,
		OSHATotalSeriousViolations = total_serious_violations,
		OSHANumberOfViolations = number_violations,
		OSHANumberOfEvents = number_event,
		OSHANumberOfHazardousSubstance = number_hazardous_substance,
		OSHANumberOfAccidents = number_accident,
		OSHAOwnerType = owner_type,
		OSHAOwnerTypeDescription = own_type_desc,
		OSHAEmployeeCount12Months = number_in_establishment,
		DunsNumber = duns_number,
		DateFirstSeen = inspection_opening_date,
		DateLastSeen = inspection_close_date,
		Source = src),
	PERMITS(DPMBitmap)),

Dataset_SAM__kfetch_linkID(
	BusinessSele(
		UltID = ultid,
		OrgID = orgid,
		SeleID = seleid,
		GovDebarredClassification = classification,
		GovDebarredExclusionProgram = exclusionprogram,
		GovDebarredExclusionType = exclusiontype,
		GovDebarredExcludingAgency = excludingagency,
		GovDebarredActiveDate = activedate,
		GovDebarredTerminationDate = TerminationDate,
		DateFirstSeen = ActiveDate,
		// DateLastSeen doesn't exist on this file
		Source = src),
	PERMITS(DPMBitmap)),

Dataset_YellowPages__kfetch_yellowpages_linkids(
	Phone(FILTER((UNSIGNED)phone10 <> 0),
		UID = phone10,
		Phone10 = phone10,
		RecordType = record_type,
		NoSolicitCode = nosolicitcode,
		DateFirstSeen = pub_date,
		Source = source),
	BusinessSele(
		UltID = ultid,
		OrgID = orgid,
		SeleID = seleid,
		IndustryClass = indstryclass,
		SICCode = sic_code,
		SICCodeOrder = 1,
		NAICSCode = naics_code,
		NAICSCodeOrder = 1,
		DateFirstSeen = pub_date,
		// DateLastSeen doesn't exist in this file
		Source = source),
	BusinessSele(FILTER((UNSIGNED)sic2 > 0), // Populating SIC Codes 2 through 4
		SICCode = sic2,
		SICCodeOrder = 2,
		DateFirstSeen = pub_date,
		Source = source),
	BusinessSele(FILTER((UNSIGNED)sic3 > 0),
		SICCode = sic3,
		SICCodeOrder = 3,
		DateFirstSeen = pub_date,
		Source = source),
	BusinessSele(FILTER((UNSIGNED)sic4 > 0),
		SICCode = sic4,
		SICCodeOrder = 4,
		DateFirstSeen = pub_date,
		Source = source),
	ProxPhoneNumber(FILTER((UNSIGNED)phone10 <> 0  AND (UNSIGNED)proxid<>0),
		UltID = ultid,   
		OrgID = orgid,    
		SeleID = seleid, 
		ProxID = proxid,
		PhoneNumber = phone10,
		SICCode = sic_code,
		NAICSCode = naics_code,
		DateFirstSeen = pub_date,
		Source = source),
	AddressPhone(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)phone10 != 0),
		DateFirstSeen = pub_date,
		PhoneNumber = phone10,
		PrimaryRange = prim_range,
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = suffix,
		Postdirectional = postdir,
		SecondaryRange = sec_range,
		ZIP5 = zip,
		Source = source),
	ProxAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0  AND (UNSIGNED)proxid<>0),
		UltID = ultid,   
		OrgID = orgid,    
		SeleID = seleid, 
		ProxID = proxid,
		PrimaryRange = prim_range,
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = suffix,
		Postdirectional = postdir,
		ZIP5 = zip,
		SecondaryRange = sec_range,
		SICCode = sic_code,
		NAICSCode = naics_code,
		DateFirstSeen = pub_date,
		Source = source),	
	PERMITS(DPMBitmap)),

Dataset_Layout_Infutor_NARB__kfetch_LinkIds(
	BusinessSele(
		UltID = ultid,
		OrgID = orgid,
		SeleID = seleid,
		URL = url,
		SICCode = sic1,
		SICCodeOrder = 1,
		BusinessType = business_type,
		BusinessSpecialty = business_specialty,
		NARBSalesCode = sales_code,
		NARBEmployeeCode = employee_code,
		Ticker = stock_symbol,
		TickerExchange = stock_exchange,
		DateVendorFirstReported = dt_vendor_first_reported,
		DateVendorLastReported = dt_vendor_last_reported,
		DateFirstSeen = dt_first_seen,
		DateLastSeen = dt_last_seen,
		Source = source),
	BusinessSele(FILTER((UNSIGNED)sic2 > 0), // Populating SIC Codes 2 through 5
		SICCode = sic2,
		SICCodeOrder = 2,
		DateVendorFirstReported = dt_vendor_first_reported,
		DateVendorLastReported = dt_vendor_last_reported,
		DateFirstSeen = dt_first_seen,
		DateLastSeen = dt_last_seen,
		Source = source),
	BusinessSele(FILTER((UNSIGNED)sic3 > 0),
		SICCode = sic3,
		SICCodeOrder = 3,
		DateVendorFirstReported = dt_vendor_first_reported,
		DateVendorLastReported = dt_vendor_last_reported,
		DateFirstSeen = dt_first_seen,
		DateLastSeen = dt_last_seen,
		Source = source),
	BusinessSele(FILTER((UNSIGNED)sic4 > 0),
		SICCode = sic4,
		SICCodeOrder = 4,
		DateVendorFirstReported = dt_vendor_first_reported,
		DateVendorLastReported = dt_vendor_last_reported,
		DateFirstSeen = dt_first_seen,
		DateLastSeen = dt_last_seen,
		Source = source),
	BusinessSele(FILTER((UNSIGNED)sic5 > 0),
		SICCode = sic5,
		SICCodeOrder = 5,
		DateVendorFirstReported = dt_vendor_first_reported,
		DateVendorLastReported = dt_vendor_last_reported,
		DateFirstSeen = dt_first_seen,
		DateLastSeen = dt_last_seen,
		Source = source),
	PERMITS(DPMBitmap)),	
	
Dataset_Equifax_Business__Data_kfetch_LinkIDs(
	BusinessSele(
		UltID = ultid,
		OrgID = orgid,
		SeleID = seleid,
		EFXNumber = efx_id,
		Ticker = efx_tcksym,
		TickerExchange = efx_stkexc,
		URL = efx_web,
		BusinessType = efx_busstat,
		TotalEmployees = efx_corpempcnt,
		TotalSales = efx_corpamount,
		TotalSalesPrecision = efx_corpamountprec,
		SICCode = efx_primsic,
		SICCodeOrder = 1,
		NAICSCode = efx_primnaicscode,
		NAICSCodeOrder = 1,
		DateVendorFirstReported = dt_vendor_first_reported,
		DateVendorLastReported = dt_vendor_last_reported,
		DateFirstSeen = dt_first_seen,
		DateLastSeen = dt_last_seen,
		Source = src),
	BusinessSele(FILTER((UNSIGNED)efx_secsic1 > 0 OR (UNSIGNED)efx_secnaics1 > 0), // Pulling SIC and NAICS Codes 2 through 5 if populated
		SICCode = efx_secsic1,
		SICCodeOrder = 2,
		NAICSCode = efx_secnaics1,
		NAICSCodeOrder = 2,
		DateVendorFirstReported = dt_vendor_first_reported,
		DateVendorLastReported = dt_vendor_last_reported,
		DateFirstSeen = dt_first_seen,
		DateLastSeen = dt_last_seen,
		Source = src),
	BusinessSele(FILTER((UNSIGNED)efx_secsic2 > 0 OR (UNSIGNED)efx_secnaics2 > 0),
		SICCode = efx_secsic2,
		SICCodeOrder = 3,
		NAICSCode = efx_secnaics2,
		NAICSCodeOrder = 3,
		DateVendorFirstReported = dt_vendor_first_reported,
		DateVendorLastReported = dt_vendor_last_reported,
		DateFirstSeen = dt_first_seen,
		DateLastSeen = dt_last_seen,
		Source = src),
	BusinessSele(FILTER((UNSIGNED)efx_secsic3 > 0 OR (UNSIGNED)efx_secnaics3 > 0),
		SICCode = efx_secsic3,
		SICCodeOrder = 4,
		NAICSCode = efx_secnaics3,
		NAICSCodeOrder = 4,
		DateVendorFirstReported = dt_vendor_first_reported,
		DateVendorLastReported = dt_vendor_last_reported,
		DateFirstSeen = dt_first_seen,
		DateLastSeen = dt_last_seen,
		Source = src),
	BusinessSele(FILTER((UNSIGNED)efx_secsic4 > 0 OR (UNSIGNED)efx_secnaics4 > 0),
		SICCode = efx_secsic4,
		SICCodeOrder = 5,
		NAICSCode = efx_secnaics4,
		NAICSCodeOrder = 5,
		DateVendorFirstReported = dt_vendor_first_reported,
		DateVendorLastReported = dt_vendor_last_reported,
		DateFirstSeen = dt_first_seen,
		DateLastSeen = dt_last_seen,
		Source = src),
	BusinessProx(FILTER((UNSIGNED)proxid<>0),
		UltID = ultid,   
		OrgID = orgid,    
		SeleID = seleid, 
		ProxID = proxid,
		DateFirstSeen = dt_first_seen,
		DateLastSeen = dt_last_seen,
		DateVendorFirstReported = dt_vendor_first_reported,
		DateVendorLastReported = dt_vendor_last_reported,
		ProcessDate = process_date,
		RecordStatus = record_type,
		EquifaxID = efx_id,
		IsSmallBusinessHomeOffice = efx_soho,
		URL = efx_web,
		EmployeeCount = efx_locempcnt,
		EmployeeCountCode = efx_locempcd,
		FinancialAmountFigure = efx_locamount,
		FinancialAmountCode = efx_locamountcd,
		FinancialAmountType = efx_locamounttp,
		FinancialAmountPrecision = efx_locamountprec,
		IsDead = efx_dead,
		DateDead = efx_deaddt,
		AssociatedAddrCommercial = EFX_BIZ,
		AssociatedAddrResidential = EFX_RES,
		GeneralMarketabilityScore = efx_mrkt_totalscore,
		GeneralMarketabilityIndicator = efx_mrkt_totalind,
		IsVacant = efx_mrkt_vacant,
		IsSeasonal = efx_mrkt_seasonal,
		IsMinorityOwned = efx_mbe,
		IsWomanOwned = efx_wbe,
		IsMinorityWomanOwned = efx_mwbe,
		IsSBADisadvantagedOwned = efx_sdb,
		IsSBAHUBZone = efx_hubzone,
		IsDisadvantageOwned = efx_dbe,
		IsVeteranOwned = efx_vet,
		IsDisabledVetOwned = efx_dvet,
		IsSBA8AOwned = efx_8a,
		SBA8AOwnedDate = efx_8aexpdt,
		IsDisabledOwned = efx_dis,
		IsSBE = efx_sbe,
		IsNotSBE = efx_lbe,
		IsGoverment = efx_gov,
		IsFederalGoverment = efx_fgov,
		MerchantType = efx_merctype,
		IsHistBlackCollege = efx_hbcu,
		IsGayLesbianOwned = efx_gaylesbian,
		IsWomanOwnedSBE = efx_wsbe,
		IsVeteranOwnedSBE = efx_vsbe,
		IsDisabledVetOwnedSBE = efx_dvsbe,
		YearEstablished = EFX_YREST,
		PublicPrivateIndicator = EFX_PUBLIC,
		BusinessSize = EFX_BUSSIZE,
		GovermentType = EFX_GOV1057,
		IsNonProfit = EFX_NONPROFIT,
		MinorityWomanStatus = EFX_MWBESTATUS,
		IsNMSDCCertified = EFX_NMSDC,
		IsWBENCCertified = EFX_WBENC,
		IsCaliforniaPUCCertified = EFX_CA_PUC,
		IsTexasHUBCertified = EFX_TX_HUB,
		IsCaliforniaCaltransCertified = EFX_CALTRANS,
		IsEducationalInstitution = EFX_EDU,
		IsMinorityInstitue = EFX_MI,
		IsAlaskaNativeCorporation = EFX_ANC,
		Source = src),
	ProxAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0  AND (UNSIGNED)proxid<>0),
		UltID = ultid,   
		OrgID = orgid,    
		SeleID = seleid, 
		ProxID = proxid,
		PrimaryRange = prim_range,
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = addr_suffix,
		Postdirectional = postdir,
		ZIP5 = zip,
		SecondaryRange = sec_range,
		SICCode = efx_primsic,
		NAICSCode = efx_primnaicscode,
		DateVendorFirstReported = dt_vendor_first_reported,
		DateVendorLastReported = dt_vendor_last_reported,
		DateFirstSeen = dt_first_seen,
		DateLastSeen = dt_last_seen,
		Source = source),	
	ProxAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)proxid<>0 AND ((UNSIGNED)efx_secsic1 > 0 OR (UNSIGNED)efx_secnaics1 > 0)),
		UltID = ultid,   
		OrgID = orgid,    
		SeleID = seleid, 
		ProxID = proxid,
		PrimaryRange = prim_range,
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = addr_suffix,
		Postdirectional = postdir,
		ZIP5 = zip,
		SecondaryRange = sec_range,
		SICCode = efx_secsic1,
		NAICSCode = efx_secnaics1,
		DateVendorFirstReported = dt_vendor_first_reported,
		DateVendorLastReported = dt_vendor_last_reported,
		DateFirstSeen = dt_first_seen,
		DateLastSeen = dt_last_seen,
		Source = source),				
	ProxAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)proxid<>0 AND ((UNSIGNED)efx_secsic2 > 0 OR (UNSIGNED)efx_secnaics2 > 0)),
		UltID = ultid,   
		OrgID = orgid,    
		SeleID = seleid, 
		ProxID = proxid,
		PrimaryRange = prim_range,
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = addr_suffix,
		Postdirectional = postdir,
		ZIP5 = zip,
		SecondaryRange = sec_range,
		SICCode = efx_secsic2,
		NAICSCode = efx_secnaics2,
		DateVendorFirstReported = dt_vendor_first_reported,
		DateVendorLastReported = dt_vendor_last_reported,
		DateFirstSeen = dt_first_seen,
		DateLastSeen = dt_last_seen,
		Source = source),				
	ProxAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)proxid<>0 AND ((UNSIGNED)efx_secsic3 > 0 OR (UNSIGNED)efx_secnaics3 > 0)),
		UltID = ultid,   
		OrgID = orgid,    
		SeleID = seleid, 
		ProxID = proxid,
		PrimaryRange = prim_range,
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = addr_suffix,
		Postdirectional = postdir,
		ZIP5 = zip,
		SecondaryRange = sec_range,
		SICCode = efx_secsic3,
		NAICSCode = efx_secnaics3,
		DateVendorFirstReported = dt_vendor_first_reported,
		DateVendorLastReported = dt_vendor_last_reported,
		DateFirstSeen = dt_first_seen,
		DateLastSeen = dt_last_seen,
		Source = source),		
	ProxAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)proxid<>0 AND ((UNSIGNED)efx_secsic4 > 0 OR (UNSIGNED)efx_secnaics4 > 0)),
		UltID = ultid,   
		OrgID = orgid,    
		SeleID = seleid, 
		ProxID = proxid,
		PrimaryRange = prim_range,
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = addr_suffix,
		Postdirectional = postdir,
		ZIP5 = zip,
		SecondaryRange = sec_range,
		SICCode = efx_secsic4,
		NAICSCode = efx_secnaics4,
		DateVendorFirstReported = dt_vendor_first_reported,
		DateVendorLastReported = dt_vendor_last_reported,
		DateFirstSeen = dt_first_seen,
		DateLastSeen = dt_last_seen,
		Source = source),	
	Phone(FILTER((UNSIGNED)efx_phone != 0),
		UID = efx_phone,
		Phone10 = efx_phone,
		IsPhoneMarketable = efx_mrkt_telever,
		PhoneMarketabilityScore = efx_mrkt_telescore,
		DateVendorFirstReported = dt_vendor_first_reported,
		DateVendorLastReported = dt_vendor_last_reported,
		DateFirstSeen = dt_first_seen,
		DateLastSeen = dt_last_seen,
		Source = source),	
	PERMITS(DPMBitmap)),	
	
Dataset_BIPV2_Build__kfetch_contact_linkids(
	BusinessProx(FILTER((UNSIGNED)contact_did = 0 AND (UNSIGNED)proxid<>0),
		UltID = ultid,   
		OrgID = orgid,    
		SeleID = seleid, 
		ProxID = proxid,
		ContactFirstName = contact_name.fname, 
		ContactMiddleName = contact_name.mname, 
		ContactLastName = contact_name.lname, 
		ContactNameSuffix = contact_name.name_suffix, 
		ContactSSN = contact_ssn, 
		ContactPhoneNumber = contact_phone, 
		ContactJobTitle = JobTitle, //use derived if its populated else use raw
		ContactStatus = Status, //use derived if its populated else use raw
		ContactIsExecutive = executive_ind, 
		IsContact = TRUE, //marking "contacts" from this key from other keys
		ContactExecutiveOrder = executive_ind_order, 
		HeaderHitFlag = TRUE, 
		DateVendorLastReported = dt_vendor_last_reported,
		DateVendorFirstReported = dt_vendor_first_reported,
		DateFirstSeen = dt_first_seen_contact, 
		DateLastSeen = dt_last_seen_contact, 
		Source = source),		
	ProxPerson(FILTER((UNSIGNED)contact_did > 0 AND (UNSIGNED)proxid<>0),
		UltID = ultid,   
		OrgID = orgid,    
		SeleID = seleid, 
		ProxID = proxid,
		Contact = contact_did,
		JobTitle = JobTitle, //use derived if its populated else use raw
		ContactStatus = Status, //use derived if its populated else use raw
		IsExecutive = executive_ind, 
		ExecutiveOrder = executive_ind_order, 
		HeaderHitFlag = TRUE, 
		DateVendorLastReported = dt_vendor_last_reported,
		DateVendorFirstReported = dt_vendor_first_reported,
		DateFirstSeen = dt_first_seen_contact, 
		DateLastSeen = dt_last_seen_contact, 
		Source = source),	
	PERMITS(DPMBitmap)),		

	// The BIP Best USE statement on roxie differs from the USE statement on Vault because on Roxie, we use the BIP Best interface to get the business best information.
	// On vault, we access the BIP Best key directly. The BIP Best key and interface returndifferent layouts, requiring modifications to the USE statements.
	Dataset_BIPV2_Best__Key_LinkIds(
		BusinessSele(FILTER(proxid = 0 AND seleid != 0 AND company_name != ''), // In the Best Key, Best information at the SeleID level is stored on records where ProxID = 0.
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			BestCompanyName = company_name,
			BestCompanyNameRank = 1,// BIP Best Rank will always be 1 on Roxie since only one best value is returned by the BIP Best Interface. On Vault, where we use the BIP Best key directly, we will need to choose the record with the lowest rank in our best attribute logic.
			Source = src), 		//need dummy source since Vault needs source for permissions but roxie does not have source avaiable
		BusinessProx(FILTER(proxid != 0 AND seleid != 0 AND company_name != ''),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			BestCompanyName = company_name,
			BestCompanyNameRank = 1, // BIP Best Rank will always be 1 on Roxie since only one best value is returned by the BIP Best Interface. On Vault, where we use the BIP Best key directly, we will need to choose the record with the lowest rank in our best attribute logic.
			Source = src), 		//need dummy source since Vault needs source for permissions but roxie does not have source avaiable
		BusinessSele(FILTER(proxid = 0 AND seleid != 0 AND company_sic_code1 <> ''), // In the Best Key, Best information at the SeleID level is stored on records where ProxID = 0.
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			BestSICCode = company_sic_code1,
			BestSICCodeRank = 1, // BIP Best Rank will always be 1 on Roxie since only one best value is returned by the BIP Best Interface. On Vault, where we use the BIP Best key directly, we will need to choose the record with the lowest rank in our best attribute logic.
			Source = src), 		//need dummy source since Vault needs source for permissions but roxie does not have source avaiable
		BusinessProx(FILTER(proxid != 0 AND seleid != 0 AND company_sic_code1 <> ''),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			BestSICCode = company_sic_code1,
			BestSICCodeRank = 1, // BIP Best Rank will always be 1 on Roxie since only one best value is returned by the BIP Best Interface. On Vault, where we use the BIP Best key directly, we will need to choose the record with the lowest rank in our best attribute logic.	
			Source = src), 		//need dummy source since Vault needs source for permissions but roxie does not have source avaiable
		BusinessSele(FILTER(proxid = 0 AND seleid != 0 AND company_naics_code1 <> ''), // In the Best Key, Best information at the SeleID level is stored on records where ProxID = 0.
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			BestNAICSCode = company_naics_code1,
			BestNAICSCodeRank = 1, // BIP Best Rank will always be 1 on Roxie since only one best value is returned by the BIP Best Interface. On Vault, where we use the BIP Best key directly, we will need to choose the record with the lowest rank in our best attribute logic.
			Source = src), 		//need dummy source since Vault needs source for permissions but roxie does not have source avaiable
		BusinessProx(FILTER(proxid != 0 AND seleid != 0 AND company_naics_code1 <> ''),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			BestNAICSCode = company_naics_code1,
			BestNAICSCodeRank = 1, // BIP Best Rank will always be 1 on Roxie since only one best value is returned by the BIP Best Interface. On Vault, where we use the BIP Best key directly, we will need to choose the record with the lowest rank in our best attribute logic.
			Source = src), 		//need dummy source since Vault needs source for permissions but roxie does not have source avaiable
		SelePhoneNumber(FILTER(proxid = 0 AND seleid != 0 AND company_phone <> ''), // In the Best Key, Best information at the SeleID level is stored on records where ProxID = 0.
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			PhoneNumber = company_phone,
			BestPhone = company_phone,
			BestPhoneRank = 1, // BIP Best Rank will always be 1 on Roxie since only one best value is returned by the BIP Best Interface. On Vault, where we use the BIP Best key directly, we will need to choose the record with the lowest rank in our best attribute logic.
			Source = src), 		//need dummy source since Vault needs source for permissions but roxie does not have source avaiable
		ProxPhoneNumber(FILTER(proxid != 0 AND seleid != 0 AND company_phone <> ''),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			PhoneNumber = company_phone,
			BestPhone = company_phone,
			BestPhoneRank = 1, // BIP Best Rank will always be 1 on Roxie since only one best value is returned by the BIP Best Interface. On Vault, where we use the BIP Best key directly, we will need to choose the record with the lowest rank in our best attribute logic.
			Source = src), 		//need dummy source since Vault needs source for permissions but roxie does not have source avaiable
		SeleTIN(FILTER(proxid = 0 AND seleid != 0 AND company_fein <> ''), // In the Best Key, Best information at the SeleID level is stored on records where ProxID = 0.
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			TaxID = company_fein,
			BestTIN = company_fein,
			BestTINRank = 1, // BIP Best Rank will always be 1 on Roxie since only one best value is returned by the BIP Best Interface. On Vault, where we use the BIP Best key directly, we will need to choose the record with the lowest rank in our best attribute logic.
			Source = src), 		//need dummy source since Vault needs source for permissions but roxie does not have source avaiable
		ProxTIN(FILTER(proxid != 0 AND seleid != 0 AND company_fein <> ''),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			TaxID = company_fein,
			BestTIN = company_fein,
			BestTINRank = 1, // BIP Best Rank will always be 1 on Roxie since only one best value is returned by the BIP Best Interface. On Vault, where we use the BIP Best key directly, we will need to choose the record with the lowest rank in our best attribute logic.
			Source = src), 		//need dummy source since Vault needs source for permissions but roxie does not have source avaiable
		SeleAddress(FILTER(proxid = 0 AND seleid != 0 AND (STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0), // In the Best Key, Best information at the SeleID level is stored on records where ProxID = 0.
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid,
			PrimaryRange = prim_range, 
			Predirectional = predir, 
			PrimaryName = prim_name, 
			Suffix = addr_suffix, 
			Postdirectional = postdir, 
			SecondaryRange = sec_range,
			ZIP5 = zip,
			BestPrimaryRange = prim_range, 
			BestPredirectional = predir, 
			BestPrimaryName = prim_name, 
			BestSuffix = addr_suffix, 
			BestPostdirectional = postdir, 
			BestUnitDesignation = unit_desig, 
			BestSecondaryRange = sec_range, 
			BestPostalCity = p_city_name, 
			BestVanityCity = v_city_name, 
			BestState = st,
			BestZip5 = zip, 
			BestZip4 = zip4,
			BestAddressRank = 1, // BIP Best Rank will always be 1 on Roxie since only one best value is returned by the BIP Best Interface. On Vault, where we use the BIP Best key directly, we will need to choose the record with the lowest rank in our best attribute logic.
			Source = src), 		//need dummy source since Vault needs source for permissions but roxie does not have source avaiable
		ProxAddress(FILTER(proxid != 0 AND seleid != 0 AND (STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			PrimaryRange = prim_range, 
			Predirectional = predir, 
			PrimaryName = prim_name, 
			Suffix = addr_suffix, 
			Postdirectional = postdir, 
			SecondaryRange = sec_range,
			ZIP5 = zip,
			BestPrimaryRange = prim_range, 
			BestPredirectional = predir, 
			BestPrimaryName = prim_name, 
			BestSuffix = addr_suffix, 
			BestPostdirectional = postdir, 
			BestUnitDesignation = unit_desig, 
			BestSecondaryRange = sec_range, 
			BestPostalCity = p_city_name, 
			BestVanityCity = v_city_name, 
			BestState = st,
			BestZip5 = zip, 
			BestZip4 = zip4,
			BestAddressRank = 1, // BIP Best Rank will always be 1 on Roxie since only one best value is returned by the BIP Best Interface. On Vault, where we use the BIP Best key directly, we will need to choose the record with the lowest rank in our best attribute logic.
			Source = src), 		//need dummy source since Vault needs source for permissions but roxie does not have source avaiable
		PERMITS(DPMBitmap)),

	Dataset_Gong__Key_History_DID(
		Phone(FILTER((UNSIGNED)phone10 != 0),
			UID = phone10,
			Phone10 = phone10,
			PriorAreaCode = prior_area_code,
			CurrentFlag = current_flag,
			BusinessFlag = business_flag,
			PublishCode = publish_code,
			ListingType = listing_type,
			IsActive = current_record_flag,
			DateFirstSeen = dt_first_seen, // Contains information for ASOF
			DateLastSeen = dt_last_seen, // Contains information for ASOF
			OmitIndicator = omit_phone,
			Source = src),
		PersonPhone(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)phone10 != 0),
			DateFirstSeen = dt_first_seen, // Contains information for ASOF
			DateLastSeen = dt_last_seen, // Contains information for ASOF
			Subject = did,
			PhoneNumber = phone10,
			Source = src),
		AddressPhone(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)z5 != 0 AND (UNSIGNED)phone10 != 0),
			DateFirstSeen = dt_first_seen, // Contains information for ASOF
			DateLastSeen = dt_last_seen, // Contains information for ASOF
			PhoneNumber = phone10,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = suffix,
			Postdirectional = postdir,
			SecondaryRange = sec_range,
			ZIP5 = z5,
			Source = src),
		HouseHoldPhone(FILTER((UNSIGNED)hhid != 0 AND (UNSIGNED)phone10 != 0),
			DateFirstSeen = dt_first_seen, // Contains information for ASOF
			DateLastSeen = dt_last_seen, // Contains information for ASOF
			Household = hhid,
			PhoneNumber = phone10,
			Source = src),
		PERMITS(DPMBitmap)),

	Dataset_Gong__Key_History_Address(
		Phone(FILTER((UNSIGNED)phone10 != 0),
			UID = phone10,
			Phone10 = phone10,
			PriorAreaCode = prior_area_code,
			CurrentFlag = current_flag,
			BusinessFlag = business_flag,
			PublishCode = publish_code,
			ListingType = listing_type,
			IsActive = current_record_flag,
			DateFirstSeen = dt_first_seen, // Contains information for ASOF
			DateLastSeen = dt_last_seen, // Contains information for ASOF
			OmitIndicator = omit_phone,
			Source = src),
		PersonPhone(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)phone10 != 0),
			DateFirstSeen = dt_first_seen, // Contains information for ASOF
			DateLastSeen = dt_last_seen, // Contains information for ASOF
			Subject = did,
			PhoneNumber = phone10,
			Source = src),
		AddressPhone(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)z5 != 0 AND (UNSIGNED)phone10 != 0),
			DateFirstSeen = dt_first_seen, // Contains information for ASOF
			DateLastSeen = dt_last_seen, // Contains information for ASOF
			PhoneNumber = phone10,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = suffix,
			Postdirectional = postdir,
			SecondaryRange = sec_range,
			ZIP5 = z5,
			Source = src),
		HouseHoldPhone(FILTER((UNSIGNED)hhid != 0 AND (UNSIGNED)phone10 != 0),
			DateFirstSeen = dt_first_seen, // Contains information for ASOF
			DateLastSeen = dt_last_seen, // Contains information for ASOF
			Household = hhid,
			PhoneNumber = phone10,
			Source = src),
		PERMITS(DPMBitmap)),

	Dataset_Gong__Key_History_Phone(
		Phone(FILTER((UNSIGNED)phone10 != 0),
			UID = phone10,
			Phone10 = phone10,
			PriorAreaCode = prior_area_code,
			CurrentFlag = current_flag,
			BusinessFlag = business_flag,
			PublishCode = publish_code,
			ListingType = listing_type,
			IsActive = current_record_flag,
			DateFirstSeen = dt_first_seen, // Contains information for ASOF
			DateLastSeen = dt_last_seen, // Contains information for ASOF
			OmitIndicator = omit_phone,
			Source = src),
		PersonPhone(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)phone10 != 0),
			DateFirstSeen = dt_first_seen, // Contains information for ASOF
			DateLastSeen = dt_last_seen, // Contains information for ASOF
			Subject = did,
			PhoneNumber = phone10,
			Source = src),
		AddressPhone(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)z5 != 0 AND (UNSIGNED)phone10 != 0),
			DateFirstSeen = dt_first_seen, // Contains information for ASOF
			DateLastSeen = dt_last_seen, // Contains information for ASOF
			PhoneNumber = phone10,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = suffix,
			Postdirectional = postdir,
			SecondaryRange = sec_range,
			ZIP5 = z5,
			Source = src),
		HouseHoldPhone(FILTER((UNSIGNED)hhid != 0 AND (UNSIGNED)phone10 != 0),
			DateFirstSeen = dt_first_seen, // Contains information for ASOF
			DateLastSeen = dt_last_seen, // Contains information for ASOF
			Household = hhid,
			PhoneNumber = phone10,
			Source = src),
		PERMITS(DPMBitmap)),
		
	Dataset_Gong__Key_History_LinkIds(
		Phone(FILTER((UNSIGNED)phone10 != 0),
			UID = phone10,
			Phone10 = phone10,
			PriorAreaCode = prior_area_code,
			CurrentFlag = current_record_flag,
			BusinessFlag = Listing_Type_Bus,
			PublishCode = publish_code,
			ListingType = listing_type,
			IsActive = current_record_flag,
			DateFirstSeen = dt_first_seen, // Contains information for ASOF
			DateLastSeen = dt_last_seen, // Contains information for ASOF
			OmitIndicator = omit_phone,
			Source = src),		
		ProxPhoneNumber(FILTER((UNSIGNED)phone10 != 0 AND (UNSIGNED)proxid<>0),
			UltID = ultid,   
			OrgID = orgid,    
			SeleID = seleid, 
			ProxID = proxid,
			PhoneNumber = phone10,
			DateFirstSeen = dt_first_seen,
			DateLastSeen = dt_last_seen,
			Source = src),
		AddressPhone(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)z5 != 0 AND (UNSIGNED)phone10 != 0),
			DateFirstSeen = dt_first_seen, // Contains information for ASOF
			DateLastSeen = dt_last_seen, // Contains information for ASOF
			PhoneNumber = phone10,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = suffix,
			Postdirectional = postdir,
			SecondaryRange = sec_range,
			ZIP5 = z5,
			Source = src),
		PERMITS(DPMBitmap)),

	Dataset_Targus__Key_Address(
		Phone(FILTER((UNSIGNED)phone_number != 0),
			UID = phone_number,
			Phone10 = phone_number,
			ValidationDate = validation_date,
			ValidationFlag = validation_flag,
			NoSolicitCode = no_solicitation_code,
			RecordType = record_type,
			PhoneType = phone_type,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = Src),
		HouseHoldPhone(FILTER((UNSIGNED)hhid != 0 AND (UNSIGNED)phone_number != 0),
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Household = hhid,
			PhoneNumber = phone_number,
			Source = src),		
		PersonPhone(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)phone_number != 0),
			Subject = did,
			PhoneNumber = phone_number,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = src),
		AddressPhone(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)phone_number != 0),
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			PhoneNumber = phone_number,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = suffix,
			Postdirectional = postdir,
			SecondaryRange = sec_range,
			ZIP5 = zip,
			Source = src),
		PERMITS(DPMBitmap)),
		
	Dataset_Targus__Key_Phone(
		Phone(FILTER((UNSIGNED)phone_number != 0),
			UID = phone_number,
			Phone10 = phone_number,
			NoSolicitCode = no_solicitation_code,
			RecordType = record_type,
			PhoneType = phone_type,
			ValidationDate = validation_date,
			ValidationFlag = validation_flag,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = Src),
		HouseHoldPhone(FILTER((UNSIGNED)hhid != 0 AND (UNSIGNED)phone_number != 0),
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Household = hhid,
			PhoneNumber = phone_number,
			Source = src),		
		PersonPhone(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)phone_number != 0),
			Subject = did,
			PhoneNumber = phone_number,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = src),
		AddressPhone(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)phone_number != 0),
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			PhoneNumber = phone_number,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = suffix,
			Postdirectional = postdir,
			SecondaryRange = sec_range,
			ZIP5 = zip,
			Source = src),
		PERMITS(DPMBitmap)),

	Dataset_InfutorCID__Key_Phone(
		Phone(FILTER((UNSIGNED)phone <> 0),
			UID = phone,
			Phone10 = phone,
			RecordType = rec_type,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = src),
		PersonPhone(FILTER((UNSIGNED)did<>0 AND (UNSIGNED)phone <> 0),
			Subject = did,
			PhoneNumber = phone,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = src),
		AddressPhone	(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)phone != 0),
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			PhoneNumber = phone,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			SecondaryRange = sec_range,
			ZIP5 = zip,
			Source = src),
		PERMITS(DPMBitmap)),
		
	Dataset_Phone__PhonesPlus_v2_Keys_Scoring_Phone(
	Phone(FILTER((UNSIGNED)cellphone != 0),
		UID = cellphone,
		Phone10 = cellphone,
		DateFirstSeen = FORMAT('YYYYMM01')datefirstseen, // Contains information for ASOF
		DateLastSeen = FORMAT('YYYYMM01')datelastseen, // Contains information for ASOF
		ListingType = listingtype,
		ConfidenceScore = confidencescore,
		Source = src),
	PersonPhone(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)cellphone != 0),
		Subject = did,
		PhoneNumber = cellphone,
		DateFirstSeen = FORMAT('YYYYMM01')datefirstseen, // Contains information for ASOF
		DateLastSeen = FORMAT('YYYYMM01')datelastseen, // Contains information for ASOF
		Source = src),
	AddressPhone(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip5 != 0 AND (UNSIGNED)cellphone != 0),
		DateFirstSeen = FORMAT('YYYYMM01')datefirstseen, // Contains information for ASOF
		DateLastSeen = FORMAT('YYYYMM01')datelastseen, // Contains information for ASOF
		PhoneNumber = cellphone,
		PrimaryRange = prim_range,
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = addr_suffix,
		Postdirectional = postdir,
		SecondaryRange = sec_range,
		ZIP5 = zip5,
		Source = src),
	HouseHoldPhone(FILTER((UNSIGNED)hhid != 0 AND (UNSIGNED)cellphone != 0),
		DateFirstSeen = FORMAT('YYYYMM01')datefirstseen, // Contains information for ASOF
		DateLastSeen = FORMAT('YYYYMM01')datelastseen, // Contains information for ASOF
		Household = hhid,
		PhoneNumber = cellphone,
		Source = src),
	PERMITS(DPMBitmap)),

	Dataset_Phone__PhonesPlus_v2_Keys_Scoring_Address(
	Phone(FILTER((UNSIGNED)cellphone != 0),
		UID = cellphone,
		Phone10 = cellphone,
		DateFirstSeen = FORMAT('YYYYMM01')datefirstseen, // Contains information for ASOF
		DateLastSeen = FORMAT('YYYYMM01')datelastseen, // Contains information for ASOF
		ListingType = listingtype,
		ConfidenceScore = confidencescore,
		Source = src),
	PersonPhone(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)cellphone != 0),
		Subject = did,
		PhoneNumber = cellphone,
		DateFirstSeen = FORMAT('YYYYMM01')datefirstseen, // Contains information for ASOF
		DateLastSeen = FORMAT('YYYYMM01')datelastseen, // Contains information for ASOF
		Source = src),
	AddressPhone(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip5 != 0 AND (UNSIGNED)cellphone != 0),
		DateFirstSeen = FORMAT('YYYYMM01')datefirstseen, // Contains information for ASOF
		DateLastSeen = FORMAT('YYYYMM01')datelastseen, // Contains information for ASOF
		PhoneNumber = cellphone,
		PrimaryRange = prim_range,
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = addr_suffix,
		Postdirectional = postdir,
		SecondaryRange = sec_range,
		ZIP5 = zip5,
		Source = src),
	HouseHoldPhone(FILTER((UNSIGNED)hhid != 0 AND (UNSIGNED)cellphone != 0),
		DateFirstSeen = FORMAT('YYYYMM01')datefirstseen, // Contains information for ASOF
		DateLastSeen = FORMAT('YYYYMM01')datelastseen, // Contains information for ASOF
		Household = hhid,
		PhoneNumber = cellphone,
		Source = src),
	PERMITS(DPMBitmap)),
		
	Dataset_Key_Iverification__Keys_Iverification_Phone(
	Phone(FILTER((UNSIGNED)phone != 0),
		UID = phone,
		Phone10 = phone,
		DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
		DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
		RecordType = rec_type,// 1 -individual, 2-spouse, 3-household
		CurrentFlag = current_rec,
		SourceFile = file_source,// 1 -gong, 2-pp above (interal estimated good phone), 3-pp below (interal estimated bad phone)
		IverIndicator = iver_indicator,// 1-did&phone match curr ins, 2-did&phone match hist ins, 3-hhid&phone match curr ins, 4-hhid&phone match hist ins
		Source = src),
	HouseHoldPhone(FILTER((UNSIGNED)hhid != 0 AND (UNSIGNED)phone != 0),
		DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
		DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
		Household = hhid,
		PhoneNumber = phone,
		Source = src),	
	PersonPhone(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)phone != 0),
		Subject = did,
		PhoneNumber = phone,
		DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
		DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
		Source = src),
	PERMITS(DPMBitmap)), 
	
	Dataset_Key_Iverification__Keys_Iverification_Did_Phone(
	Phone(FILTER((UNSIGNED)phone != 0),
		UID = phone,
		Phone10 = phone,
		DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
		DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
		CurrentFlag = current_rec,
		RecordType = rec_type,// 1 -individual, 2-spouse, 3-household
		SourceFile = file_source,// 1 -gong, 2-pp above (interal estimated good phone), 3-pp below (interal estimated bad phone)
		IverIndicator = iver_indicator,// 1-did&phone match curr ins, 2-did&phone match hist ins, 3-hhid&phone match curr ins, 4-hhid&phone match hist ins
		Source = src),
	HouseHoldPhone(FILTER((UNSIGNED)hhid != 0 AND (UNSIGNED)phone != 0),
		DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
		DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
		Household = hhid,
		PhoneNumber = phone,
		Source = src),	
	PersonPhone(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)phone != 0),
		Subject = did,
		PhoneNumber = phone,
		DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
		DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
		Source = src),
	PERMITS(DPMBitmap)), 

	Dataset_Key_CellPhone__Key_Neustar_Phone(
	Phone(FILTER((UNSIGNED)cellphone <> 0),
		UID = cellphone,
		Phone10 = cellphone,
		Source = Src),
	PERMITS(DPMBitmap)),

	Dataset_PhonesPlus_v2_Key_PhonePlus_Fdid_Records(
	Phone(FILTER((UNSIGNED)cellphone <> 0),
		UID = cellphone,
		Phone10 = cellphone,
		ConfidenceScore = confidencescore,
		COCType = append_coctype,
		SCC = append_scc,
		PhoneType = append_phone_type,//?
		NXXType = append_nxx_type,
		PortedMatch = append_ported_match,
		PortabilityIndicator = append_portability_indicator,
		ListingType = listingtype,
		PublishCode = orig_publish_code,
		PhoneUse  = append_phone_use,
		CarrierName = append_ocn,
		MaximumConfidenceScore = max_orig_conf_score,
		MinimumConfidenceScore = min_orig_conf_score,
		PhoneNumberCompanyType = append_company_type,
		RecordType = orig_rec_type,
		DateFirstSeen = FORMAT('YYYYMM01')datefirstseen, // Contains information for ASOF
		DateLastSeen = FORMAT('YYYYMM01')datelastseen, // Contains information for ASOF
		Source = Source,//set from mdr for phones plus
		OriginalSource = Src),//source from dataset
	PersonPhone(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)cellphone != 0),
		Subject = did,
		PhoneNumber = cellphone,
		OwnerFlag = append_latest_phone_owner_flag,
		DateFirstSeen = FORMAT('YYYYMM01')datefirstseen, // Contains information for ASOF
		DateLastSeen = FORMAT('YYYYMM01')datelastseen, // Contains information for ASOF
		Source = Source,//set from mdr for phones plus
		OriginalSource = Src),//source from dataset
	HouseHoldPhone(FILTER((UNSIGNED)HHID <> 0 and (UNSIGNED)cellphone != 0),
		DateFirstSeen = FORMAT('YYYYMM01')datefirstseen, // Contains information for ASOF
		DateLastSeen = FORMAT('YYYYMM01')datelastseen, // Contains information for ASOF
		Household = hhid,
		PhoneNumber = cellphone,
		Source = Source,//set from mdr for phones plus
		OriginalSource = Src),//source from dataset
	AddressPhone(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip5 != 0 AND (UNSIGNED)cellphone != 0),
		DateFirstSeen = FORMAT('YYYYMM01')datefirstseen, // Contains information for ASOF
		DateLastSeen = FORMAT('YYYYMM01')datelastseen, // Contains information for ASOF
		PhoneNumber = cellphone,
		PrimaryRange = prim_range,
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = addr_suffix,
		Postdirectional = postdir,
		SecondaryRange = sec_range,
		ZIP5 = zip5,
		Source = Source,//set from mdr for phones plus
		OriginalSource = Src),//source from dataset	
	PERMITS(DPMBitmap)),
	
		Accident,
		AccidentAddress,
		AccidentDriversLicense,
		AddressDriversLicense,
		AddressProperty,
		AddressPropertyEvent,
		Education,
		EducationSSN,
		EducationStudentAddress,
		Employment,
		EmploymentBusinessAddress,
		EmploymentPerson,
		EmploymentSSN,
		// Household,
		HouseholdMember,
		Neighborhood,
		PersonAccident,
		PersonEducation,
		PersonProperty,
		PersonPropertyEvent,
		Property,
		PropertyEvent,
		ProxPerson,
		SeleProperty,
		SelePropertyEvent,
		SeleWatercraft
    );    