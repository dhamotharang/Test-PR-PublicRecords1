IMPORT KnowledgeUniverse.PublicRecords_KEL.Entities;

USE PublicRecords_KEL.ECL_Functions.Dataset_FDC(FDC,
	Dataset_Doxie__Key_Header( 
		SSNAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)ssn != 0),
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			Social = ssn, 
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			Source = src),
		SocialSecurityNumber(FILTER((UNSIGNED)ssn != 0),
			UID=ssn,
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateOfDeath = dod,
			IssueState = st,
			HeaderFirstSeen = dt_first_seen,
			Source = src),
		Person(FILTER((UNSIGNED)did != 0),
			UID=did,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Title = title,
			FirstName = fname,
			MiddleName = mname,
			LastName = lname,
			NameSuffix = name_suffix,
			DateOfBirth = dob,
			DateOfDeath = dod,
			Source = src),
		Address(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0),
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = suffix,
			Postdirectional = postdir,
			UnitDesignation = unit_desig,
			SecondaryRange = sec_range,
			State = st,
			ZIP5 = zip,
			ZIP4 = zip4,
			County = county,
			GeoBlock = geo_blk,
			ADVODateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			ADVODateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			ADVODateVendorFirstReported = FORMAT('YYYYMM01')dt_vendor_first_reported,
			ADVODateVendorLastReported = FORMAT('YYYYMM01')dt_vendor_last_reported,
			RecordTypeCode = rec_type,
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			Source = src),
		Phone(FILTER((UNSIGNED)phone != 0),
			UID = phone,
			Phone10 = phone,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = src),
		PhoneSSN(FILTER((UNSIGNED)phone != 0 AND (UNSIGNED)ssn != 0),
			PhoneNumber = phone,
			Social = ssn,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = src),
		PersonSSN(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)ssn != 0),
			Subject = did,
			Social = ssn,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = src),
		PersonAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)did != 0),
			Subject = did,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = src),
		PersonPhone(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)phone != 0),
			Subject = did,
			PhoneNumber = phone,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = src),
		AddressPhone(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)phone != 0),
			PhoneNumber = phone,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = src),
		ZipCode(FILTER((UNSIGNED3)zip !=0), // Not sure we want this permanantly, but adding this for now until the 'correct' ZipCode files are added to the FDC bundle so that the Address ENTITY/ASSOCIATIONS will compile.
			UID = zip),
		ZipCodePerson(
			Zip = zip,
			Subject = did),
		PERMITS(DPMBitmap)), // leaving FCRA and nonFCRA the same for now, since on Vault side, Header use statement is only defined for FCRA. During FDC fetch, we are pointing to the correct version of the key (FCRA or NonFCRA)
		
	Dataset_Header_Quick__Key_Did(
		SocialSecurityNumber(FILTER((UNSIGNED)ssn != 0),	
			UID = ssn,
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen,     // Contains information for ASOF
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen,   // Contains information for ASOF
			IssueState = st,
			HeaderFirstSeen = dt_first_seen,
			Source = src),
		SSNAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)ssn != 0),
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen,   // Contains information for ASOF
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			Social = ssn,
			PrimaryRange = prim_range, 
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			Source = src),
		Person(FILTER((UNSIGNED)did != 0),
			UID = did,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen,   // Contains information for ASOF
			Title = title,
			FirstName = fname,
			MiddleName = mname,
			LastName = lname,
			NameSuffix = name_suffix,
			DateOfBirth = dob,
			Source = src),
		PersonSSN(FILTER((UNSIGNED)ssn != 0 AND (UNSIGNED)did != 0),
			Subject = did,
			Social = ssn,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = src),
		Address(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0),
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = suffix,
			Postdirectional = postdir,
			UnitDesignation = unit_desig,
			SecondaryRange = sec_range,
			State = st,
			ZIP5 = zip,
			ZIP4 = zip4,
			County = county,
			GeoBlock = geo_blk,
			ADVODateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			ADVODateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			ADVODateVendorFirstReported = FORMAT('YYYYMM01')dt_vendor_first_reported,
			ADVODateVendorLastReported = FORMAT('YYYYMM01')dt_vendor_last_reported,
			RecordTypeCode = rec_type,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = src),
		Phone(FILTER((UNSIGNED)phone != 0),
			UID = phone,
			Phone10 = phone,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = src),
		PhoneSSN(FILTER((UNSIGNED)ssn != 0 AND (UNSIGNED)phone != 0),
			PhoneNumber = phone,
			Social = ssn,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = src),
		PersonAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)did != 0),
			Subject = did,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = src),
		PersonPhone(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)phone != 0),
			Subject = did,
			PhoneNumber = phone,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = src),
		AddressPhone(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)phone != 0),
			PhoneNumber = phone,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
			Source = src),
		PERMITS(DPMBitmap)), // leaving FCRA and nonFCRA the same for now, since on Vault side, Header use statement is only defined for FCRA. During FDC fetch, we are pointing to the correct version of the key (FCRA or NonFCRA)

			
	Dataset_Doxie_Files__Key_Offenders_Risk(
		CriminalOffense(
			OffenderKey = offender_key,
			OffenseScore = offense_score,
			OffenderLevel = criminal_offender_level,
			DataType = data_type,
			CaseNumber = case_num,
			DateFirstSeen = earliest_offense_date,
			Source = src),
		PersonOffenses(FILTER((UNSIGNED)sdid != 0),
			Subject = sdid,
			OffenderKey = offender_key,
			DateFirstSeen = earliest_offense_date,
			Source = src),		
		SocialSecurityNumber(FILTER((UNSIGNED)ssn != 0),
			UID = ssn,
			IssueState = st,
			DateFirstSeen = earliest_offense_date,
			Source = src),
		PersonSSN(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)ssn != 0),
			Subject = did,
			Social = ssn,
			DateFirstSeen = earliest_offense_date,
			Source = src),	
		SSNAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip5 != 0 AND (UNSIGNED)ssn != 0),
			Social = ssn,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			ZIP5 = zip5,
			SecondaryRange = sec_range,
			DateFirstSeen = earliest_offense_date,
			Source = src),			
		DriversLicense(FILTER(dl_state != ''),
			DriversLicenseNumber = dl_num,
			IssuingState = dl_state,
			DateFirstSeen = earliest_offense_date,
			Source = src),
		ZipCodePerson(
			Zip = zip5,
			Subject = did,
			PrimaryRange = prim_range, 
			Predirectional = predir, 
			PrimaryName = prim_name, 
			Postdirectional = postdir, 
			Suffix = addr_suffix, 
			ZIP5 = zip5, 
			SecondaryRange = sec_range,
			DateFirstSeen = earliest_offense_date,
			Source = src),
		PERMITS(DPMBitmap)),


	Dataset_Doxie_Files__Key_Punishment(
		CriminalOffense(
			OffenderKey = offender_key,
			ConvictionOverrideDate = conviction_override_date,
			ConvictionOverrideDateType = conviction_override_date_type,
			DateFirstSeen = event_dt,
			DateLastSeen = process_date,
			Source = 'DC'),
		CriminalPunishment(
			OffenderKey = offender_key,
			SourceFile = source_file,
			PunishmentType = punishment_type, 
			SourceState = orig_state,
			PunishmentPersistentID = punishment_persistent_id,	
			DateOfSentence = sent_date,
			SentenceLength = sent_length,
			SentenceLengthDescription = sent_length_desc,
			CurrentKnownInmateStatus = cur_stat_inm_desc,
			CurrentLocationOfInmate = cur_loc_inm,
			CurrentLocationSecurity = cur_loc_sec,
			IncarcerationAdmissionDate = latest_adm_dt,
			ScheduledReleaseDate = sch_rel_dt,
			ActualReleaseDate = act_rel_dt,
			ControlReleaseDate = ctl_rel_dt,
			PresumptiveParoleReleaseDate = presump_par_rel_dt,
			ParoleCurrentStatus = par_cur_stat,
			ParoleCurrentStatusDescription = par_cur_stat_desc,
			ParoleStartDate = par_st_dt,
			ParoleScheduledReleaseDate = par_sch_end_dt,
			ParoleActualReleaseDate = par_act_end_dt,
			ParoleCounty = par_cty,
			DateFirstSeen = event_dt,
			DateLastSeen = process_date,
			Source = 'DC'),
		CriminalDetails(
			OffenderKey = offender_key,
			DateFirstSeen = event_dt,
			DateLastSeen = process_date,
			Source = 'DC'),
		PERMITS(DPMBitmap)),

		
	Dataset_Doxie_Files__Key_Offenses(
		CriminalOffender(
			OffenderKey = offender_key,
			NumberOfOffenseCounts = num_of_counts,
			Source = 'DC'),
		CriminalOffense(
			OffenderKey = offender_key,
			CaseNumber = case_num,
			PersistentOffenseKey = offense_key,
			DataType = data_type,
			StateOfSource = orig_state,
			DataSource = source_file,
			OffenseDate = off_date,
			DateOfArrest = arr_date,
			CourtOffenseCode = off_code,
			CourtOffenseDescription = off_desc_1,
			CourtOffenseAdditionalDescription = off_desc_2,
			OffenseType = off_typ,
			CourtOffenseLevel = off_lev,
			CourtDescription = court_desc,
			CourtDispositionDate = ct_disp_dt,
			CourtDispositionDescription = ct_disp_desc_1,
			CourtAdditionalDispositionDescription = ct_disp_desc_2,
			OffenseTown = offensetown,
			OffenseScore = offense_score,
			CourtCounty = court_county,
			TrafficFlag = fcra_traffic_flag,
			ConvictionFlag = fcra_conviction_flag,
			FcraOffenseKey = fcra_offense_key,
			PersistentOffenseKey = offense_persistent_id,
			FcraDate = fcra_date,
			FcraDateType = fcra_date_type,
			ConvictionOverrideDate = conviction_override_date,
			ConvictionOverrideDateType = conviction_override_date_type,
			Source = 'DC'),
		CriminalPunishment(
			OffenderKey = offender_key,
			DateOfSentence = stc_dt,
			SentenceCounty = cty_conv,		
			SentenceType = stc_desc_1,
			SentenceDescription = stc_desc_2,
			CommunityService = stc_desc_3,
			CurrentStatus = stc_desc_4,
			SentenceLength = stc_lgth,
			SentenceLengthDescription = stc_lgth_desc,
			IncarcerationAdmissionDate = inc_adm_dt,
			MinimumTerm = min_term,
			MinimumTermDescription = min_term_desc,
			MaximumTerm = max_term,
			MaximumTermDescription = max_term_desc,
			SourceFile = source_file,
			SourceState = orig_state,
			ParoleCurrentStatusDescription = parole,
			ProbationTimePeriod = probation,
			Source = 'DC'),
		CriminalDetails(
			OffenderKey = offender_key,
			Source = 'DC'),
		PERMITS(DPMBitmap)),
			
	Dataset_Doxie_Files__Key_Court_Offenses(
		CriminalOffender(
			OffenderKey = offender_key,
			NumberOfOffenseCounts = num_of_counts),
		CriminalOffense(
			OffenderKey = offender_key,
			CaseNumber = court_case_number,
			PersistentOffenseKey = offense_persistent_id,
			OffenseScore = offense_score,
			OffenseCategory = offense_category,
			CourtOffenseLevel = court_off_lev,
			OffenseDate = off_date,
			DataType = data_type,		 
			CourtCost = sent_court_cost,
			CourtFine = sent_court_fine,
			SuspendedCourtFine = sent_susp_court_fine,
			TrafficFlag = fcra_traffic_flag,
			ConvictionFlag = fcra_conviction_flag,
			StateOfSource = state_origin,
			DataSource = source_file,
			DateOfArrest = arr_date,
			AgencyName = le_agency_desc,
			AgencyCaseNumber = le_agency_case_number,
			TrafficTicketNumber = traffic_ticket_number,
			ArrestOffenseCode = arr_off_code,
			ArrestInitialChargeDescription = arr_off_desc_1,
			ArrestAmendedChargeDescription = arr_off_desc_2,
			ArrestOffenceTypeDescription = arr_off_type_desc,
			ArrestOffenseLevel = arr_off_lev,
			DateOfDispositionForInitialCharge = arr_disp_date,
			InitialChargeDispositionDescription = arr_disp_desc_1,
			AdditionalDispositionDescription = arr_disp_desc_2,
			CourtCode = court_cd,
			CourtDescription = court_desc,
			CourtFinalPlea = court_final_plea,
			CourtOffenseCode = court_off_code,
			CourtOffenseDescription = court_off_desc_1,
			CourtOffenseAdditionalDescription = court_off_desc_2,
			CourtStatute = court_statute,
			CourtDispositionDate = court_disp_date,
			CourtDispositionCode = court_disp_code,
			CourtDispositionDescription = court_disp_desc_1,
			CourtAdditionalDispositionDescription = court_disp_desc_2,
			DateOfAppeal = appeal_date,
			DateofVerdict = convict_dt,
			OffenseTown = offense_town,
			CourtDate = court_dt,
			CourtCounty = court_county,
			ArrestOffenseLevelMapped = arr_off_lev_mapped,
			CourtOffenseLevelMapped = court_off_lev_mapped,
			FcraOffenseKey = fcra_offense_key,
			FcraDate = fcra_date,
			FcraDateType = fcra_date_type,
			ConvictionOverrideDate = conviction_override_date,
			ConvictionOverrideDateType = conviction_override_date_type),
		CriminalPunishment(
			OffenderKey = offender_key,
			DateOfSentence = sent_date,
			CurrentStatus = sent_susp_time,
			SentenceLengthDescription = sent_jail,
			ProbationTimePeriod = sent_probation,
			AdditionalProvision1 = sent_addl_prov_desc_1,
			AdditionalProvision2 = sent_addl_prov_desc_2,
			ConsecutiveAndConcurrentInformation = sent_consec,
			InstituitonName = sent_agency_rec_cust,
			Restitution = restitution,
			SentenceCounty = cty_conv,
			CommunityService = community_service,
			AdditionalSentenceDates = addl_sent_dates,
			ProbationDescription = probation_desc2),
		CriminalDetails(
			OffenderKey = offender_key),
		PERMITS(DPMBitmap)),
	
			
	Dataset_Doxie_Files__Key_BocaShell_Crim_FCRA(
		PersonOffenses(FILTER((UNSIGNED)did != 0),
			Subject = did,
			OffenderKey = offender_key),
		PersonOffender(
			Subject = did,
			OffenderKey = offender_key),
		CriminalOffense(
			OffenderKey = offender_key,
			CaseDate = date,
			CaseNumber = case_num,
			ConvictionFlag = fcra_conviction_flag,
			TrafficFlag = fcra_traffic_flag,
			OffenseScore = offense_score),
		PERMITS(DPMBitmap)),

	Dataset_Doxie_Files__Key_Offenders(
		CriminalOffender(
			OffenderKey = offender_key,
			SourceFile = source_file,
			SourceState = orig_state,
			Citizenship = citizenship,
			HairColor = hair_color_desc,
			EyeColor = eye_color_desc,
			SkinColor = skin_color_desc,
			Height = height,
			Weight = weight,
			Status = party_status_desc,
			CurrentIncarceratedFlag = curr_incar_flag,
			CurrentParoleFlag = curr_parole_flag,
			CurrentProbationFlag = curr_probation_flag,
			DataType = data_type,
			DataSource = datasource,
			DateFirstSeen = fcra_date,
			Source = src),
		CriminalOffense(
			OffenderKey = offender_key,
			CaseNumber = case_num,
			CourtDescription = case_court,
			CaseDate = case_date,
			CaseTypeDescription = case_type_desc,
			CountyOfSource = county_of_origin,
			DepartmentOfLawEnforcementNumber = dle_num,
			FederalBureauOfInvestigationsNumber = fbi_num,
			InmateNumber = doc_num,
			StateIdentificationNumberAssigned = id_num,
			OffenseScore = offense_score,
			FcraDate = fcra_date,
			FcraDateType = fcra_date_type,
			ConvictionFlag = fcra_conviction_flag,
			TrafficFlag = fcra_traffic_flag,
			ConvictionOverrideDate = conviction_override_date,
			ConvictionOverrideDateType = conviction_override_date_type,
			DateFirstSeen = fcra_date,
			Source = src),
		CriminalDetails(
			OffenderKey = offender_key,
			DateFirstSeen = fcra_date,
			Source = src),
		Person(
			UID = did,
			Race = race,
			RaceDescription = race_desc,
			DateOfBirth = dob,
			FirstName = fname,
			LastName = lname,
			MiddleName = mname,
			NameSuffix = name_suffix,
			DateFirstSeen = fcra_date,
			Source = src),
		Person(
			UID = did,
			DateOfBirth = dob_alias,
			DateFirstSeen = fcra_date,
			Source = src),
		PersonOffenses(
			Subject = did,
			OffenderKey = offender_key,
			DateFirstSeen = fcra_date,
			Source = src),
		PersonOffender(
			Subject = did,
			OffenderKey = offender_key,
			DateFirstSeen = fcra_date,
			Source = src),	
		Address(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip5 != 0),
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			UnitDesignation = unit_desig,
			SecondaryRange = sec_range,
			PostalCity = p_city_name,
			VanityCity = v_city_name,
			State = st,
			ZIP5 = zip5,
			ZIP4 = zip4,
			CarrierRouteNumber = cart,
			CarrierRouteSortationAtZIP = cr_sort_sz,
			LineOfTravel = lot,
			LineOfTravelOrder = lot_order,
			DeliveryPointBarcode = dpbc,
			DeliveryPointBarcodeCheckDigit = chk_digit,
			TypeCode = rec_type,
			County = ace_fips_county,
			Latitude = geo_lat,
			Longitude = geo_long,
			MetropolitanStatisticalArea = msa,
			GeoBlock = geo_blk,
			GeoMatch = geo_match,
			ACECleanerErrorCode = err_stat,
			DateFirstSeen = fcra_date,
			Source = src),		
		OffenderAddress(
			OffenderKey = offender_key,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			ZIP5 = zip5,
			SecondaryRange = sec_range,
			DateFirstSeen = fcra_date,
			Source = src),
		SocialSecurityNumber(FILTER((UNSIGNED)ssn != 0),
			UID=ssn,
			DateFirstSeen = fcra_date,
			Source = src),		
		OffenderSSN(
			Social = ssn,
			OffenderKey = offender_key,
			DateFirstSeen = fcra_date,
			Source = src),
		PersonSSN(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)ssn != 0),
			Subject = did,
			Social = ssn,
			DateFirstSeen = fcra_date,
			Source = src),	
		PersonAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip5 != 0 AND (UNSIGNED)did != 0),
			Subject = did,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			ZIP5 = zip5,
			SecondaryRange = sec_range,
			DateFirstSeen = fcra_date,
			Source = src),
		PERMITS(DPMBitmap)),

	Dataset_Bankruptcy_Files__Key_Search(
		Person(
			UID = did,
			DateFirstSeen = date_first_seen, // Contains information for ASOF
			DateLastSeen = date_last_seen, // Contains information for ASOF
			Title = title,
			FirstName = fname,
			MiddleName = mname,  
			LastName = lname,
			NameSuffix = name_suffix,
			Source = 'BA'),
		PersonBankruptcy(FILTER((UNSIGNED)did != 0 AND name_type = 'D'),
			TMSID = TMSID,
			Court_Code = Court_Code,
			Case_Number = Case_Number,
			DID = did,
			DateFirstSeen = date_first_seen, // Contains information for ASOF
			DateLastSeen = date_last_seen, // Contains information for ASOF
			Subject = did,
			Source = 'BA'),
		Bankruptcy(
			TMSID = TMSID,
			CourtCode = Court_Code,
			CaseNumber = Case_Number,
			DID = did,
			DateFirstSeen = date_first_seen, // Contains information for ASOF
			DateLastSeen = date_last_seen, // Contains information for ASOF
			OriginalCaseNumber = orig_case_number,
			SourceDescription = srcdesc,
			OriginalChapter = chapter,
			FilingType = filing_type,
			BusinessFlag = business_flag,
			CorporateFlag = corp_flag,
			DischargedDate = discharged,
			Disposition = disposition,
			DebtorType = debtor_type,
			DebtorSequence = debtor_seq,
			DispositionType = disptype,
			DispositionReason = dispreason,
			DispositionTypeDescription = disptypedesc,
			NameType = name_type,
			ScreenDescription = screendesc,
			DecodedDescription = dcodedesc,
			DateFiled = date_filed,
			RecordType = record_type,
			DateVendorFirstReported = date_vendor_first_reported,
			DateVendorLastReported = date_vendor_last_reported,
			CaseID = caseid,
			DefendantID = defendantid,
      LastStatusUpdate = statusdate,
			Source = 'BA'),
		PersonSSN(FILTER((UNSIGNED)ssn != 0 AND (UNSIGNED)did != 0),
			Subject = did,
			Social = ssn,	
			DateFirstSeen = date_first_seen,
			DateLastSeen = date_last_seen,
			Source = 'BA'),
		SocialSecurityNumber(FILTER((UNSIGNED)ssn != 0),
			UID=ssn,
			IssueState = st,
			DateFirstSeen = date_first_seen,
			DateLastSeen = date_last_seen,
			Source = 'BA'),
		PhoneSSN(FILTER((UNSIGNED)ssn != 0 AND (UNSIGNED)phone != 0),
			PhoneNumber = phone,
			Social = ssn,
			DateFirstSeen = date_first_seen,
			DateLastSeen = date_last_seen,
			Source = 'BA'),
		SSNBankruptcy(FILTER((UNSIGNED)ssn != 0),
			Social = ssn,
			Bankrupt = tmsid,
			DateFirstSeen = date_first_seen,
			DateLastSeen = date_last_seen,
			Source = 'BA'),
		SSNAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)ssn != 0),
			Social = ssn,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			DateFirstSeen = date_first_seen,
			DateLastSeen = date_last_seen,
			Source = 'BA'),
		PersonAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)did != 0),
			Subject = did,
			PrimaryRange = prim_range,
			Predirectional = predir,
			PrimaryName = prim_name,
			Suffix = addr_suffix,
			Postdirectional = postdir,
			ZIP5 = zip,
			SecondaryRange = sec_range,
			DateFirstSeen = date_first_seen,
			DateLastSeen = date_last_seen,
			Source = 'BA'),
		ZipCodePerson(
			Zip = zip,
			Subject = did,
			PrimaryRange = prim_range, 
			Predirectional = predir, 
			PrimaryName = prim_name, 
			Postdirectional = postdir, 
			Suffix = addr_suffix, 
			ZIP5 = zip, 
			SecondaryRange = sec_range,
			DateFirstSeen = date_first_seen,
			DateLastSeen = date_last_seen,
			Source = 'BA'),
		PERMITS(DPMBitmap)),
 
Dataset_BIPV2__Key_BH_Linking_Ids(
	Business(
		UltID = ultid,   
		OrgID = orgid,    
		SeleID = seleid,   
		DateLastSeen = dt_last_seen,  
		DateFirstSeen = dt_first_seen,  
		CompanyName = company_name,  
		TaxID = company_fein,  
		Source = source),  
	Address(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 ),
		PrimaryRange = prim_range,
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = addr_suffix,
		Postdirectional = postdir,
		UnitDesignation = unit_desig,
		SecondaryRange = sec_range,
		PostalCity = p_city_name,
		VanityCity = v_city_name,
		State = st,
		ZIP5 = zip,
		ZIP4 = zip4,
		CompanyAddressTypeRaw = company_address_type_raw,
		CompanyAddressTypeDerived = company_address_type_derived,
		MetropolitanStatisticalArea = msa,
		AddressTypeDerived = address_type_derived,
		DateLastSeen = dt_first_seen_company_address,
		DateFirstSeen = dt_last_seen_company_address,
		Source = source),  
	BusinessProx(
		UltID = ultid,   
		OrgID = orgid,    
		SeleID = seleid, 
		ProxID = proxid,
		ParentProxID = parent_proxid,
		SeleProxID = sele_proxid,
		OrgProxID = org_proxid,
		UltProxID = ultimate_proxid,
		LevelsFromTop = levels_from_top,
		NodesBelow = nodes_below,
		ProxSegment = prox_seg,
		StoreNumber = cnp_store_number,
		ActiveDunsNumber = active_duns_number,
		HistDunsNumber = hist_duns_number,
		DeletedKey = deleted_key,
		DunsNumber = duns_number,
		DateVendorFirstReported = dt_vendor_first_reported,
		DateVendorLastReported = dt_vendor_last_reported,
		DateFirstSeen = dt_first_seen,
		DateLastSeen = dt_last_seen,
		Source = source),
	ProxAddress(
		UltID = ultid,   
		OrgID = orgid,    
		SeleID = seleid, 
		ProxID = proxid,
		PrimaryRange = prim_range_derived,
		Predirectional = predir,
		PrimaryName = prim_name_derived,
		Suffix = addr_suffix,
		Postdirectional = postdir,
		ZIP5 = zip,
		SecondaryRange = sec_range,
		DateFirstSeenCompanyAddress = dt_first_seen_company_address,
		DateLastSeenCompanyAddress = dt_last_seen_company_address,
		DateFirstSeen = dt_first_seen,
		DateLastSeen = dt_last_seen,
		Source = source),
	ProxPhoneNumber(
		UltID = ultid,   
		OrgID = orgid,    
		SeleID = seleid, 
		ProxID = proxid,
		PhoneNumber = company_phone,
		DateFirstSeen = dt_first_seen,
		DateLastSeen = dt_last_seen,
		Source = source),
	BusinessSele(
		UltID = ultid,   
		OrgID = orgid,    
		SeleID = seleid,
		SeleGold = sele_gold,
		IsSeleLevel = is_sele_level,
		IsOrgLevel = is_org_level,
		IsUltLevel = is_ult_level,
		SeleSegment = sele_seg,
		IsCorporation = iscorp,
		CompanyName = company_name,
		CompanyNameType = company_name_type_derived,
		CorporationNumber = cnp_number,
		BusinessType = cnp_btype,
		LowValueWorks = cnp_lowv,
		CorporationLegalName = corp_legal_name,
		DoingBusinessAs = dba_name,
		ActiveEnterpriseNumber = active_enterprise_number,
		HistEnterpriseNumber = hist_enterprise_number,
		EbrFileNumber = ebr_file_number,
		ActiveDomesticCorporationKey = active_domestic_corp_key,
		HistDomesticCorporationKey = hist_domestic_corp_key,
		ForeignCorporationKey = foreign_corp_key,
		UnknownCorporationKey = unk_corp_key,
		DateVendorFirstReported = dt_vendor_first_reported,
		DateVendorLastReported = dt_vendor_last_reported,
		DateFirstSeen = dt_first_seen,
		DateLastSeen = dt_last_seen,
		CompanyOrganizationStructure = company_org_structure_raw,
		CompanyIncorporationDate = company_incorporation_date,
		StandardIndustrialClassificationCode1 = company_sic_code1,
		StandardIndustrialClassificationCode2 = company_sic_code2,
		StandardIndustrialClassificationCode3 = company_sic_code3,
		StandardIndustrialClassificationCode4 = company_sic_code4,
		StandardIndustrialClassificationCode5 = company_sic_code5,
		NorthAmericanIndustryClassificationSystemCode1 = company_naics_code1,
		NorthAmericanIndustryClassificationSystemCode2 = company_naics_code2,
		NorthAmericanIndustryClassificationSystemCode3 = company_naics_code3,
		NorthAmericanIndustryClassificationSystemCode4 = company_naics_code4,
		NorthAmericanIndustryClassificationSystemCode5 = company_naics_code5,
		CompanyTicker = company_ticker,
		CompanyTickerExchange = company_ticker_exchange,
		CompanyForeignDomestic = company_foreign_domestic,
		CompanyURL = company_url,
		StateIncorporated = company_inc_state,
		CharterNumber = company_charter_number,
		CompanyFilingDate = company_filing_date,
		CompanyStatusDate = company_status_date,
		CompanyForeignDate = company_foreign_date,
		EventFilingDate = event_filing_date,
		CompanyNameStatus = company_name_status_raw,
		CompanyStatus = company_status_raw,
		DateFirstSeenCompanyName = dt_first_seen_company_name,
		DateLastSeenCompanyName = dt_last_seen_company_name,
		CurrentIndicator = current,
		Source = source),
	SelePerson(
		UltID = ultid,   
		OrgID = orgid,    
		SeleID = seleid,
		Contact = contact_did,
		DateFirstSeenContact = dt_first_seen_contact,
		DateLastSeenContact = dt_last_seen_contact,
		ContactType = contact_type_derived,
		JobTitle = contact_job_title_derived,
		ContactStatus = contact_status_derived,
		Source = source),
	BusinessPow(
		UltID = ultid,   
		OrgID = orgid,
		SeleID = seleid,
		ProxID = proxid,
		PowID = powid,
		PowSegment = pow_seg,
		DateVendorFirstReported = dt_vendor_first_reported,
		DateVendorLastReported = dt_vendor_last_reported,
		DateFirstSeen = dt_first_seen,
		DateLastSeen = dt_last_seen,
		Source = source),
	BusinessOrg(
		UltID = ultid,   
		OrgID = orgid,
		NodesTotal = nodes_total,
		OrgSegment = org_seg,
		SourceGroupID = vl_id,
		DateVendorFirstReported = dt_vendor_first_reported,
		DateVendorLastReported = dt_vendor_last_reported,
		DateFirstSeen = dt_first_seen,
		DateLastSeen = dt_last_seen,
		Source = source),
	SeleTaxID(
		UltID = ultid,   
		OrgID = orgid,    
		SeleID = seleid,
		TaxID = company_fein,
		BestTaxIndicator = best_fein_indicator,
		DeletedFEIN = deleted_fein,
		Source = source),
	BusinessUlt(
		UID=UltID,
		UltSegment = ult_seg,
		DateVendorFirstReported = dt_vendor_first_reported,
		DateVendorLastReported = dt_vendor_last_reported,
		DateFirstSeen = dt_first_seen,
		DateLastSeen = dt_last_seen,
		Source = source),
	BusinessTaxIDNumber(
		TaxID = best_fein_indicator,
		Source = source),
	//place holder
	//BusinessAddress
		// CompanyName = company_name,  
		// TaxID = company_fein,  
		// PrimRange = prim_range,
		// PrimRangeDerived = prim_range_derived,
		// Predir = predir,
		// PrimName = prim_name,
		// PrimNameDerived = prim_name_derived,
		// AddrSuffix = addr_suffix,
		// Postdir = postdir,
		// UnitDesig = unit_desig,
		// SecRange = sec_range,
		// PCityName = p_city_name,
		// VCityName = v_city_name,
		// St = st,
		// Zip = zip,
		// Zip4 = zip4,
		// DateLastSeen = dt_first_seen_company_address,
		// DateFirstSeen = dt_last_seen_company_address,
		// Source = source),
	//BusinessPhone
		// PhoneNumber = company_phone,
		// PhoneType = phone_type,
		// DateLastSeen = dt_last_seen,  
		// DateFirstSeen = dt_first_seen, 
		// Source = source),
	// BusinessPerson(
		// Subject = contact_did,
		// DtFirstSeen = dt_first_seen,
		// DtLastSeen = dt_last_seen,
		// DtFirstSeenContact = dt_first_seen_contact,
		// DtLastSeenContact = dt_last_seen_contact,
	//PersonEmail(	
	  // ContactEmail = contact_email,
		// Subject = contact_did,
		// DtFirstSeenContact = dt_first_seen_contact,
		// DtLastSeenContact = dt_last_seen_contact,
	//PersonPhone(	
		// ContactPhone = contact_phone,
		// Subject = contact_did,
		// DtFirstSeenContact = dt_first_seen_contact,
		// DtLastSeenContact = dt_last_seen_contact,
	PERMITS(DPMBitmap)),


	Dataset_FAA__Key_Aircraft_IDs(
		Aircraft(
			NNumber = n_number,
			DateFirstSeen = date_first_seen, // Contains information for ASOF
			DateLastSeen = date_last_seen, // Contains information for ASOF
			SerialNumber = serial_number,
			ManufacturerModelCode = mfr_mdl_code,
			EngineManufacturerModelCode = eng_mfr_mdl,
			YearManufactured = year_mfr,
			LastActionDate = last_action_date,
			Type = type_aircraft,
			TypeEngine = type_engine,
			StatusCode = status_code,
			TransponderCode = mode_s_code,					
			FractionalOwner = fract_owner,
			ManufacturerName = aircraft_mfr_name,
			ModelName = model_name,
			Source = src),
		AircraftOwner(FILTER((UNSIGNED)did_out != 0),
			NNumber = n_number,
			DateFirstSeen = date_first_seen, // Contains information for ASOF
			DateLastSeen = date_last_seen, // Contains information for ASOF
			Owner = did_out,
			RegistrantType = type_registrant,
			CertificateIssueDate = cert_issue_date,
			Certification = certification,
			Source = src), 
		PERMITS(DPMBitmap)),

	Dataset_VehicleV2__Key_Vehicle_Main_Key(
		Vehicle(FILTER((STRING20)vehicle_key <> ''),
			VehicleKey = vehicle_key,
			StateOfOrigin = state_origin,
			OriginalVin = orig_vin,
			OriginalYearMake = orig_year,
			OriginalMake = orig_make_code,
			OriginalMakeDescription = orig_make_desc,
			OriginalSeries = orig_series_code,
			OriginalSeriesDescription = orig_series_desc,
			OriginalModel = orig_model_code,
			OriginalModelDescription = orig_model_desc,
			OriginalBody = orig_body_code,
			OriginalBodyDescription = orig_body_desc,
			OriginalNetWeight = orig_net_weight,
			OriginalGrossWeight = orig_gross_weight,
			OriginalNumberAxles = orig_number_axles,
			OriginalVehicleUse = orig_vehicle_use_code,
			OriginalVehicleUseDescription = orig_vehicle_use_desc,
			OriginalVehicleType = orig_vehicle_type_code,
			OriginalVehicleTypeDescription = orig_vehicle_type_desc,
			OriginalMajorColor = orig_major_color_code,
			OriginalMajorColorDescription = orig_major_color_desc,
			OriginalMinorColor = orig_minor_color_code,
			OriginalMinorColorDescription = orig_minor_color_desc,
			VinaVin = vina_vin,
			VinaVinPattern = vina_vin_pattern_indicator,
			VinaBypassCode = vina_bypass_code,
			VinaVehicleType = vina_veh_type,
			VinaNCICMake = vina_ncic_make,
			VinaModelYearYY = vina_model_year_yy,
			VinaRestraint = vina_vp_restraint,
			VinaMakeName = vina_vp_abbrev_make_name,
			VinaYear = vina_vp_year,
			VinaVpSeries = vina_vp_series,
			VinaVpModel = vina_vp_model,
			VinaAirConditioning = vina_vp_air_conditioning,
			VinaPowerSteering = vina_vp_power_steering,
			VinaPowerBrakes = vina_vp_power_brakes,
			VinaPowerWindows = vina_vp_power_windows,
			VinaTiltWheel = vina_vp_tilt_wheel,
			VinaRoof = vina_vp_roof,
			VinaOptionalRoof1 = vina_vp_optional_roof1,
			VinaOptionalRoof2 = vina_vp_optional_roof2,
			VinaRadio = vina_vp_radio,
			VinaOptionalRadio1 = vina_vp_optional_radio1,
			VinaOptionalRadio2 = vina_vp_optional_radio2,
			VinaTransmission = vina_vp_transmission,
			VinaOptionalTransmission1 = vina_vp_optional_transmission1,
			VinaOptionalTransmission2 = vina_vp_optional_transmission2,
			VinaALB = vina_vp_anti_lock_brakes,
			VinaFrontWD = vina_vp_front_wheel_drive,
			VinaFourWD = vina_vp_four_wheel_drive,
			VinaSecuritySystem = vina_vp_security_system,
			VinaDRL = vina_vp_daytime_running_lights,
			VinaSeriesName = vina_vp_series_name,
			VinaModelYear = vina_model_year,
			VinaSeries = vina_series,
			VinaModel = vina_model,
			VinaBodyStyle = vina_body_style,
			VinaMakeDescription = vina_make_desc,
			VinaModelDescription = vina_model_desc,
			VinaSeriesDescription = vina_series_desc,
			VinaBodyStyleDescription = vina_body_style_desc,
			VinaCylinders = vina_number_of_cylinders,
			VinaEngineSize = vina_engine_size,
			VinaFuelCode = vina_vuel_code,
			VinaPrice = vina_price,
			BestMakeCode = best_make_code,
			BestSeriesCode = best_series_code,
			BestModelCode = best_model_code,
			BestBodyCode = best_body_code,
			BestModelYear = best_model_year,
			BestMajorColor = best_major_color_code,
			BestMinorColor = best_minor_color_code,
			BrandedTitleFlag = branded_title_flag,
			BrandCode1 = brand_code_1,
			BrandDate1 = cleaned_brand_date_1,
			BrandState1 = brand_state_1,
			BrandCode2 = brand_code_2,
			BrandDate2 = cleaned_brand_date_2,
			BrandSate2 = brand_state_2,
			BrandCode3 = brand_code_3,
			BrandDate3 = cleaned_brand_date_3,
			BrandSate3 = brand_state_3,
			BrandCode4 = brand_code_4,
			BrandDate4 = cleaned_brand_date_4,
			BrandSate4 = brand_state_4,
			BrandCode5 = brand_code_5,
			BrandDate5 = cleaned_brand_date_5,
			BrandSate5 = brand_state_5,
			TodFlag = tod_flag,
			ModelClassCode = model_class_code,
			ModelClass = model_class,
			MinDoorCount = min_door_count,
			SafteyType = saftey_type,
			AirbagDriver = airbag_driver,
			AirbagFrontDriverSide = airbag_front_driver_side,
			AirbagFrontHeadCurtain = airbag_front_head_curtain,
			AirbagFrontPassanger = airbag_front_pass,
			AirbagFrontPassangerSide = airbag_front_pass_side,
			Airbags = airbags,
			Source = src), 
		PERMITS(DPMBitmap)),

	Dataset_VehicleV2__Key_Vehicle_Party_Key(
		Vehicle(FILTER((STRING20)vehicle_key <> ''),
			DateLastSeen = FORMAT('YYYYMM01')date_last_seen, // Contains information for ASOF
			DateFirstSeen = FORMAT('YYYYMM01')date_first_seen, // Contains information for ASOF
			VehicleKey = vehicle_key,
			StateOfOrigin = state_origin,
			LatestVehicleFlag = latest_vehicle_flag,
			LatestVehicleIterationFlag = latest_vehicle_iteration_flag,
			DateVendorFirstReported = date_vendor_first_reported,
			DateVendorLastReported = date_vendor_last_reported,
			SourceFirstDate = src_first_date,
			SourceLastDate = src_last_date,
			StandardLienholderName = std_lienholder_name,
			Source = source_code),
			PersonVehicle(FILTER((STRING20)vehicle_key <> '' AND (UNSIGNED)append_did != 0),
			DateFirstSeen = FORMAT('YYYYMM01')date_first_seen, // Contains information for ASOF
			DateLastSeen = FORMAT('YYYYMM01')date_last_seen, // Contains information for ASOF
			Subject = append_did,
			VehicleKey = vehicle_key,
			RegistrationFirstDate = reg_first_date,
			RegistrationEarliestEffectiveDate = reg_earliest_effective_date,
			RegistrationLatestEffectiveDate = reg_latest_effective_date,
			RegistrationLatestExpirationeDate = reg_latest_expiration_date,
			RegistrationRecordCount = reg_rollup_count,
			RegistrationDecalNumber = reg_decal_number,
			RegistratoinDecalYear = reg_decal_year,
			RegistrationStatusCode = reg_status_code,
			RegistrationStatusDescription = reg_status_desc,
			RegistrationTrueLicensePlate = reg_true_license_plate,
			RegistrationLicensePlate = reg_license_plate,
			RegistrationLicenseState = reg_license_state,
			RegistrationLicensePlateTypeCode = reg_license_plate_type_code,
			RegistrationLicensePlateTypeDescription = reg_license_plate_type_desc,
			RegistrationPreviousLicenseState = reg_previous_license_state,
			RegistrationPreviousLicensePlate = reg_previous_license_plate,
			TitleNumber = ttl_number,
			TitleEarliestIssueDate = ttl_earliest_issue_date,
			TitleLatestIssueDate = ttl_latest_issue_date,
			TitlePreviousIssueDate = ttl_previous_issue_date,
			TitleRecordCount = ttl_rollup_count,
			TitleStatusCode = ttl_status_code,
			TitleStatusDescription = ttl_status_desc,
			TitleOdometerMileage = ttl_odometer_mileage,
			TitleOdometerStatusCode = ttl_odometer_status_code,
			TitleOdometerStatusDescription = ttl_odometer_status_desc,
			TitleOdometerDate = ttl_odometer_date,
			SequenceKey = sequence_key,
			History = history,
			HistorySource = TRUE,
			Source = src),		
			/* NOTE: VehicleBusiness may be uncommented in the future when we configure MAS to 
			 handle Business identifiers appropriately. Leave it here uncommented for now. */
			// VehicleBusiness(FILTER((STRING20)vehicle_key AND (UNSIGNED)append_bdid != 0),
			// DateFirstSeen = date_first_seen, // Contains information for ASOF
			// DateLastSeen = date_last_seen, // Contains information for ASOF
			// Business = append_bdid,
			// VehicleKey = vehicle_key),
		PERMITS(DPMBitmap)),

	Dataset_Watercraft__Key_Watercraft_SID(
		Watercraft(
			WatercraftKey = watercraft_key,
			SequenceKey = sequence_key,
			OriginState = state_origin,
			DateFirstSeen = date_first_seen, // Contains information for ASOF
			DateLastSeen = date_last_seen, // Contains information for ASOF
			DateVendorFirstReported = date_vendor_first_reported,
			DateVendorLastReported = date_vendor_last_reported,
			Source = src),
		WatercraftOwner(FILTER((UNSIGNED)did > 0),
			DateFirstSeen = date_first_seen, // Contains information for ASOF
			DateLastSeen = date_last_seen, // Contains information for ASOF
			WatercraftKey = watercraft_key,
			Owner = did,
			Source = src),
		PERMITS(DPMBitmap)),

	Dataset_Cortera_Tradeline__Key_LinkIds(
		Tradeline(FILTER(status NOT IN ['D', 'R']),// excluding records 'D' (deleted record) and 'R' (replaced by newer record)
			UltID = ultid,    
			OrgID = orgid,   
			SeleID = seleid,			
			AccountKey = account_key,
			ARDate = ar_date,
			Status = status,		 
			SegmentID = segment_id, 
			TotalAR = total_ar, 
			CurrentAR = current_ar, 
			Aging1To30 = aging_1to30,
			Aging31To60 = aging_31to60,
			Aging61To90 = aging_61to90,
			Aging91Plus = aging_91plus,
			CreditLimit = credit_limit,
			FirstSaleDate = first_sale_date,
			LastSaleDate = last_sale_date,
			FileDate = filedate,
			DateFirstSeen = dt_first_seen,
			DateLastSeen = dt_last_seen,
			DtVendorFirstReported = dt_vendor_first_reported,
			DtVendorLastReported = dt_vendor_last_reported,
			Source = source), 
		TradelineBusiness(FILTER(status NOT IN ['D', 'R']),//  excluding records 'D' (deleted record) and 'R' (replaced by newer record)
			UltID = ultid,   
			OrgID = orgid,   
			SeleID = seleid,   
			AccountKey = account_key, 
			DateFirstSeen = dt_first_seen,
			DateLastSeen = dt_last_seen,
			Source = source), 
		PERMITS(DPMBitmap)),

    Property,
		//Business(UID = BusInputUIDAppend),
    Inquiry, 
    Accident,
    AccidentAddress,
    AccidentDriversLicense,
    PersonAccident,
    Neighborhood,
    Email,
    Household,
    Education,
    Utility,
    ProfessionalLicense,
    // PersonBankruptcy,
    // SSNBankruptcy,
    PersonInquiry,
    AddressInquiry,
    PhoneInquiry,
    SSNInquiry,
    DriversLicenseInquiry,
    PersonDriversLicense,
    AddressDriversLicense,
    FirstDegreeAssociations,   
    SecondDegreeAssociations,
    FirstDegreeRelative,
    PersonEmail,
    HouseholdMember,
    PersonProperty,
    AddressProperty,
    // BusinessProperty,
    SSNProperty,
    PersonEducation,
    EducationSSN,
    EducationStudentAddress,
    // EmploymentBusiness,
    EmploymentPerson,
    EmploymentSSN,
    EmploymentBusinessAddress,
    UtilityAddress,
    UtilityPerson,
    UtilityPhone,
    ProfessionalLicenseAddress,
    ProfessionalLicensePhone,
    ProfessionalLicensePerson,
		Employment
    );    