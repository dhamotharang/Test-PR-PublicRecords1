/*--SOAP--
<message name="vehicle_registration_st_city_lfmname_search">
  <part name="st" type="xsd:string"/>
  <part name="city" type="xsd:string"/>
  <part name="lfmname" type="xsd:string"/>
  <part name="max_count" type="xsd:integer"/>
  <part name="return_count" type="xsd:integer"/>
  <part name="partial" type="xsd:boolean"/>
</message>
*/

// Generated by def2ecl.pl on Tue Feb 15 14:50:36 GMT 2005

export vehicle_registration_st_city_lfmname_search := MACRO

// beginning of fill in values
keyfilename := '~thor_data400::key::moxie.mv.st.city.lfmname.key';
payloadkey_filename := '~thor_data400::key::moxie.mv.fpos.data.key';
datasetlayout := RECORD
  VehLic.Layout_Vehreg_ToMike;
  unsigned integer8 fpos{virtual(fileposition)};
END;
// end of fill in values

STRING2 st_val := '' : STORED('st');
STRING25 city_val := '' : STORED('city');
STRING60 lfmname_val := '' : STORED('lfmname');
INTEGER max_count_value := 10000 : STORED('max_count');
INTEGER return_count_value := 1000 : STORED('return_count');
BOOLEAN partial := false : STORED('partial');

key := INDEX(dataset([],datasetlayout),{own_1_state_2,own_1_p_city_name,STRING60 lfmname := own_1_lname,fpos},keyfilename);
#uniquename(f)
payloadkey := INDEX(dataset([],datasetlayout),{unsigned8 %f% := fpos},{datasetlayout},payloadkey_filename);

res := key(
            keyed(own_1_state_2=st_val),
            keyed(own_1_p_city_name=city_val),
            keyed((partial AND lfmname[1..LENGTH(TRIM(lfmname_val))]=lfmname_val) OR lfmname=lfmname_val)
);

#uniquename(seq)
Layout_Sequence :=
RECORD
	UNSIGNED6 %seq%;
	res;
END;

Layout_Sequence sequence(res le, INTEGER c) :=
TRANSFORM
	SELF.%seq% := c;
	SELF := le;
END;
lim_res := LIMIT(res,max_count_value,FAIL(11, doxie.ErrorCodes(11)),keyed);
srt_res := SORT(lim_res,RECORD);
prj_res := PROJECT(srt_res, sequence(LEFT, COUNTER));

// data fetch
DatasetLayout_Sequence :=
RECORD
	UNSIGNED6 %seq%;
	datasetlayout;
END;

DatasetLayout_Sequence getPayload(Layout_Sequence le, payloadkey ri) :=
TRANSFORM
  SELF.%seq% := le.%seq%;
  SELF := ri;
END;

j := JOIN(prj_res,payloadkey,keyed(LEFT.fpos=RIGHT.%f%),getPayload(LEFT,RIGHT));
output(TOPN(j,return_count_value,%seq%))

ENDMACRO;