/*--SOAP--
<message name="vehicle_registration_zip_dph_lname_fname_mname_lname_key_fetch">
  <part name="zip" type="xsd:string"/>
  <part name="dph_lname" type="xsd:string"/>
  <part name="fname" type="xsd:string"/>
  <part name="mname" type="xsd:string"/>
  <part name="lname" type="xsd:string"/>
  <part name="max_count" type="xsd:integer"/>
  <part name="return_count" type="xsd:integer"/>
  <part name="partial" type="xsd:boolean"/>
</message>
*/

// Generated by def2ecl.pl on Tue Feb 15 14:50:37 GMT 2005

export vehicle_registration_zip_dph_lname_fname_mname_lname_key_fetch := MACRO

// beginning of fill in values
keyfilename := '~thor_data400::key::moxie.mv.zip.dph_lname.fname.mname.lname.key';
payloadkey_filename := '~thor_data400::key::moxie.mv.fpos.data.key';
datasetlayout := RECORD
  VehLic.Layout_Vehreg_ToMike;
  unsigned integer8 fpos{virtual(fileposition)};
END;
// end of fill in values

STRING5 zip_val := '' : STORED('zip');
STRING6 dph_lname_val := '' : STORED('dph_lname');
STRING20 fname_val := '' : STORED('fname');
STRING20 mname_val := '' : STORED('mname');
STRING20 lname_val := '' : STORED('lname');
INTEGER max_count_value := 10000 : STORED('max_count');
INTEGER return_count_value := 1000 : STORED('return_count');
BOOLEAN partial := false : STORED('partial');

key := INDEX(dataset([],datasetlayout),{own_1_zip5,string6 dph_lname := '',own_1_fname,own_1_mname,own_1_lname,fpos},keyfilename);
#uniquename(f)
payloadkey := INDEX(dataset([],datasetlayout),{unsigned8 %f% := fpos},{datasetlayout},payloadkey_filename);

res := key(
            keyed(own_1_zip5=zip_val),
            keyed(dph_lname=dph_lname_val),
            keyed(own_1_fname=fname_val),
            keyed(own_1_mname=mname_val),
            keyed((partial AND own_1_lname[1..LENGTH(TRIM(lname_val))]=lname_val) OR own_1_lname=lname_val)
);

lim_res := LIMIT(res,max_count_value,FAIL(11, doxie.ErrorCodes(11)),keyed);

output(TOPN(lim_res,return_count_value,RECORD))

ENDMACRO;
