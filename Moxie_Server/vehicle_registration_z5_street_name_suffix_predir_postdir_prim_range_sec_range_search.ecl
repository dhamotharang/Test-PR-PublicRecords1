/*--SOAP--
<message name="vehicle_registration_z5_street_name_suffix_predir_postdir_prim_range_sec_range_search">
  <part name="z5" type="xsd:string"/>
  <part name="street_name" type="xsd:string"/>
  <part name="suffix" type="xsd:string"/>
  <part name="predir" type="xsd:string"/>
  <part name="postdir" type="xsd:string"/>
  <part name="prim_range" type="xsd:string"/>
  <part name="sec_range" type="xsd:string"/>
  <part name="max_count" type="xsd:integer"/>
  <part name="return_count" type="xsd:integer"/>
  <part name="partial" type="xsd:boolean"/>
</message>
*/

// Generated by def2ecl.pl on Tue Feb 15 14:50:36 GMT 2005

export vehicle_registration_z5_street_name_suffix_predir_postdir_prim_range_sec_range_search := MACRO

// beginning of fill in values
keyfilename := '~thor_data400::key::moxie.mv.z5.street_name.suffix.predir.postdir.prim_range.sec_range.key';
payloadkey_filename := '~thor_data400::key::moxie.mv.fpos.data.key';
datasetlayout := RECORD
  VehLic.Layout_Vehreg_ToMike;
  unsigned integer8 fpos{virtual(fileposition)};
END;
// end of fill in values

STRING5 z5_val := '' : STORED('z5');
STRING28 street_name_val := '' : STORED('street_name');
STRING4 suffix_val := '' : STORED('suffix');
STRING2 predir_val := '' : STORED('predir');
STRING2 postdir_val := '' : STORED('postdir');
STRING10 prim_range_val := '' : STORED('prim_range');
STRING8 sec_range_val := '' : STORED('sec_range');
INTEGER max_count_value := 10000 : STORED('max_count');
INTEGER return_count_value := 1000 : STORED('return_count');
BOOLEAN partial := false : STORED('partial');

key := INDEX(dataset([],datasetlayout),{own_1_zip5,own_1_prim_name,own_1_suffix,own_1_predir,own_1_postdir,own_1_prim_range,own_1_sec_range,fpos},keyfilename);
#uniquename(f)
payloadkey := INDEX(dataset([],datasetlayout),{unsigned8 %f% := fpos},{datasetlayout},payloadkey_filename);

res := key(
            keyed(own_1_zip5=z5_val),
            keyed((partial AND own_1_prim_name=street_name_val) OR 
										own_1_prim_name[1..LENGTH(TRIM(street_name_val))]=street_name_val),
						keyed((partial AND own_1_suffix=suffix_val) OR 
										own_1_suffix[1..LENGTH(TRIM(suffix_val))]=suffix_val),
            keyed((partial AND own_1_predir=predir_val) OR 
										own_1_predir[1..LENGTH(TRIM(predir_val))]=predir_val),
            keyed((partial AND own_1_postdir=postdir_val) OR 
										own_1_postdir[1..LENGTH(TRIM(postdir_val))]=postdir_val),
            keyed((partial AND own_1_prim_range=prim_range_val) OR 
										own_1_prim_range[1..LENGTH(TRIM(prim_range_val))]=prim_range_val),
            keyed((partial AND own_1_sec_range[1..LENGTH(TRIM(sec_range_val))]=sec_range_val) OR 
										own_1_sec_range=sec_range_val)
);

#uniquename(seq)
Layout_Sequence :=
RECORD
	UNSIGNED6 %seq%;
	res;
END;

Layout_Sequence sequence(res le, INTEGER c) :=
TRANSFORM
	SELF.%seq% := c;
	SELF := le;
END;
lim_res := LIMIT(res,max_count_value,FAIL(11, doxie.ErrorCodes(11)),keyed);
srt_res := SORT(lim_res,RECORD);
prj_res := PROJECT(srt_res, sequence(LEFT, COUNTER));

// data fetch
DatasetLayout_Sequence :=
RECORD
	UNSIGNED6 %seq%;
	datasetlayout;
END;

DatasetLayout_Sequence getPayload(Layout_Sequence le, payloadkey ri) :=
TRANSFORM
  SELF.%seq% := le.%seq%;
  SELF := ri;
END;

j := JOIN(prj_res,payloadkey,keyed(LEFT.fpos=RIGHT.%f%),getPayload(LEFT,RIGHT));
output(TOPN(j,return_count_value,%seq%))

ENDMACRO;