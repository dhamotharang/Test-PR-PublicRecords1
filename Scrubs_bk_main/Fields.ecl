IMPORT ut,SALT30;
EXPORT Fields := MODULE
// Processing for each FieldType
EXPORT SALT30.StrType FieldTypeName(UNSIGNED2 i) := CHOOSE(i,'invalid_alpha','invalid_alnum','invalid_name','invalid_numeric','invalid_address','invalid_dir','invalid_state','invalid_date','invalid_ssn','invalid_source','invalid_blank');
EXPORT FieldTypeNum(SALT30.StrType fn) := CASE(fn,'invalid_alpha' => 1,'invalid_alnum' => 2,'invalid_name' => 3,'invalid_numeric' => 4,'invalid_address' => 5,'invalid_dir' => 6,'invalid_state' => 7,'invalid_date' => 8,'invalid_ssn' => 9,'invalid_source' => 10,'invalid_blank' => 11,0);
EXPORT MakeFT_invalid_alpha(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringfilter(s0,'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ -'); // Only allow valid symbols
  s2 := SALT30.stringcleanspaces( SALT30.stringsubstituteout(s1,' -',' ') ); // Insert spaces but avoid doubles
  RETURN  s2;
END;
EXPORT InValidFT_invalid_alpha(SALT30.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ -'))),~(LENGTH(TRIM(s)) >= 0));
EXPORT InValidMessageFT_invalid_alpha(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInChars('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ -'),SALT30.HygieneErrors.NotLength('0..'),SALT30.HygieneErrors.Good);
EXPORT MakeFT_invalid_alnum(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringfilter(s0,'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-#\' <>{}[]'); // Only allow valid symbols
  s2 := SALT30.stringcleanspaces( SALT30.stringsubstituteout(s1,' <>{}[]',' ') ); // Insert spaces but avoid doubles
  RETURN  s2;
END;
EXPORT InValidFT_invalid_alnum(SALT30.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-#\' <>{}[]'))),~(LENGTH(TRIM(s)) >= 0));
EXPORT InValidMessageFT_invalid_alnum(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInChars('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-#\' <>{}[]'),SALT30.HygieneErrors.NotLength('0..'),SALT30.HygieneErrors.Good);
EXPORT MakeFT_invalid_name(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringfilter(s0,'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\' -,&\\/.:;_+'); // Only allow valid symbols
  s2 := SALT30.stringcleanspaces( SALT30.stringsubstituteout(s1,' -,&\\/.:;_+',' ') ); // Insert spaces but avoid doubles
  RETURN  s2;
END;
EXPORT InValidFT_invalid_name(SALT30.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\' -,&\\/.:;_+'))),~(LENGTH(TRIM(s)) >= 0));
EXPORT InValidMessageFT_invalid_name(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInChars('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\' -,&\\/.:;_+'),SALT30.HygieneErrors.NotLength('0..'),SALT30.HygieneErrors.Good);
EXPORT MakeFT_invalid_numeric(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringfilter(s0,'0123456789 -'); // Only allow valid symbols
  s2 := SALT30.stringcleanspaces( SALT30.stringsubstituteout(s1,' -',' ') ); // Insert spaces but avoid doubles
  RETURN  s2;
END;
EXPORT InValidFT_invalid_numeric(SALT30.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'0123456789 -'))),~(LENGTH(TRIM(s)) >= 0));
EXPORT InValidMessageFT_invalid_numeric(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInChars('0123456789 -'),SALT30.HygieneErrors.NotLength('0..'),SALT30.HygieneErrors.Good);
EXPORT MakeFT_invalid_address(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringfilter(s0,'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\' -&/\\#.;,'); // Only allow valid symbols
  s2 := SALT30.stringcleanspaces( SALT30.stringsubstituteout(s1,' -&/\\#.;,',' ') ); // Insert spaces but avoid doubles
  RETURN  s2;
END;
EXPORT InValidFT_invalid_address(SALT30.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\' -&/\\#.;,'))),~(LENGTH(TRIM(s)) >= 0));
EXPORT InValidMessageFT_invalid_address(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInChars('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\' -&/\\#.;,'),SALT30.HygieneErrors.NotLength('0..'),SALT30.HygieneErrors.Good);
EXPORT MakeFT_invalid_dir(SALT30.StrType s0) := FUNCTION
  RETURN  s0;
END;
EXPORT InValidFT_invalid_dir(SALT30.StrType s) := WHICH(((SALT30.StrType) s) NOT IN ['N','NW','NE','S','SE','SW','E','W',' ']);
EXPORT InValidMessageFT_invalid_dir(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInEnum('N|NW|NE|S|SE|SW|E|W| '),SALT30.HygieneErrors.Good);
EXPORT MakeFT_invalid_state(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringfilter(s0,'ABCDEFGHIJKLMNOPQRSTUVWXYZ'); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_invalid_state(SALT30.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'ABCDEFGHIJKLMNOPQRSTUVWXYZ'))),~(LENGTH(TRIM(s)) = 2 OR LENGTH(TRIM(s)) = 0));
EXPORT InValidMessageFT_invalid_state(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInChars('ABCDEFGHIJKLMNOPQRSTUVWXYZ'),SALT30.HygieneErrors.NotLength('2,0'),SALT30.HygieneErrors.Good);
EXPORT MakeFT_invalid_date(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringfilter(s0,'0123456789 '); // Only allow valid symbols
  s2 := SALT30.stringcleanspaces( SALT30.stringsubstituteout(s1,' ',' ') ); // Insert spaces but avoid doubles
  RETURN  s2;
END;
EXPORT InValidFT_invalid_date(SALT30.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'0123456789 '))),~(LENGTH(TRIM(s)) = 8 OR LENGTH(TRIM(s)) = 0));
EXPORT InValidMessageFT_invalid_date(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInChars('0123456789 '),SALT30.HygieneErrors.NotLength('8,0'),SALT30.HygieneErrors.Good);
EXPORT MakeFT_invalid_ssn(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringfilter(s0,'0123456789'); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_invalid_ssn(SALT30.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'0123456789'))),~(LENGTH(TRIM(s)) = 9 OR LENGTH(TRIM(s)) = 0));
EXPORT InValidMessageFT_invalid_ssn(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInChars('0123456789'),SALT30.HygieneErrors.NotLength('9,0'),SALT30.HygieneErrors.Good);
EXPORT MakeFT_invalid_source(SALT30.StrType s0) := FUNCTION
  RETURN  s0;
END;
EXPORT InValidFT_invalid_source(SALT30.StrType s) := WHICH(((SALT30.StrType) s) NOT IN ['L','H','S']);
EXPORT InValidMessageFT_invalid_source(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInEnum('L|H|S'),SALT30.HygieneErrors.Good);
EXPORT MakeFT_invalid_blank(SALT30.StrType s0) := FUNCTION
  RETURN  s0;
END;
EXPORT InValidFT_invalid_blank(SALT30.StrType s) := WHICH(~(LENGTH(TRIM(s)) >= 1));
EXPORT InValidMessageFT_invalid_blank(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotLength('1..'),SALT30.HygieneErrors.Good);
EXPORT SALT30.StrType FieldName(UNSIGNED2 i) := CHOOSE(i,'process_date','tmsid','source','id','seq_number','date_created','date_modified','method_dismiss','case_status','court_code','court_name','court_location','case_number','orig_case_number','date_filed','filing_status','orig_chapter','orig_filing_date','assets_no_asset_indicator','filer_type','meeting_date','meeting_time','address_341','claims_deadline','complaint_deadline','judge_name','judges_identification','filing_jurisdiction','assets','liabilities','casetype','assoccode','splitcase','filedinerror','date_last_seen','date_first_seen','date_vendor_first_reported','date_vendor_last_reported','reopen_date','case_closing_date','datereclosed','trusteename','trusteeaddress','trusteecity','trusteestate','trusteezip','trusteezip4','trusteephone','trusteeid','caseid','bardate','transferin','trusteeemail','planconfdate','confheardate','title','fname','mname','lname','name_suffix','name_score','prim_range','predir','prim_name','addr_suffix','postdir','unit_desig','sec_range','p_city_name','v_city_name','st','zip','zip4','cart','cr_sort_sz','lot','lot_order','dbpc','chk_digit','rec_type','county','geo_lat','geo_long','msa','geo_blk','geo_match','err_stat','did','app_ssn','delete_flag','unique_id');
EXPORT FieldNum(SALT30.StrType fn) := CASE(fn,'process_date' => 1,'tmsid' => 2,'source' => 3,'id' => 4,'seq_number' => 5,'date_created' => 6,'date_modified' => 7,'method_dismiss' => 8,'case_status' => 9,'court_code' => 10,'court_name' => 11,'court_location' => 12,'case_number' => 13,'orig_case_number' => 14,'date_filed' => 15,'filing_status' => 16,'orig_chapter' => 17,'orig_filing_date' => 18,'assets_no_asset_indicator' => 19,'filer_type' => 20,'meeting_date' => 21,'meeting_time' => 22,'address_341' => 23,'claims_deadline' => 24,'complaint_deadline' => 25,'judge_name' => 26,'judges_identification' => 27,'filing_jurisdiction' => 28,'assets' => 29,'liabilities' => 30,'casetype' => 31,'assoccode' => 32,'splitcase' => 33,'filedinerror' => 34,'date_last_seen' => 35,'date_first_seen' => 36,'date_vendor_first_reported' => 37,'date_vendor_last_reported' => 38,'reopen_date' => 39,'case_closing_date' => 40,'datereclosed' => 41,'trusteename' => 42,'trusteeaddress' => 43,'trusteecity' => 44,'trusteestate' => 45,'trusteezip' => 46,'trusteezip4' => 47,'trusteephone' => 48,'trusteeid' => 49,'caseid' => 50,'bardate' => 51,'transferin' => 52,'trusteeemail' => 53,'planconfdate' => 54,'confheardate' => 55,'title' => 56,'fname' => 57,'mname' => 58,'lname' => 59,'name_suffix' => 60,'name_score' => 61,'prim_range' => 62,'predir' => 63,'prim_name' => 64,'addr_suffix' => 65,'postdir' => 66,'unit_desig' => 67,'sec_range' => 68,'p_city_name' => 69,'v_city_name' => 70,'st' => 71,'zip' => 72,'zip4' => 73,'cart' => 74,'cr_sort_sz' => 75,'lot' => 76,'lot_order' => 77,'dbpc' => 78,'chk_digit' => 79,'rec_type' => 80,'county' => 81,'geo_lat' => 82,'geo_long' => 83,'msa' => 84,'geo_blk' => 85,'geo_match' => 86,'err_stat' => 87,'did' => 88,'app_ssn' => 89,'delete_flag' => 90,'unique_id' => 91,0);
//Individual field level validation
EXPORT Make_process_date(SALT30.StrType s0) := s0;
EXPORT InValid_process_date(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_process_date(UNSIGNED1 wh) := '';
EXPORT Make_tmsid(SALT30.StrType s0) := s0;
EXPORT InValid_tmsid(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_tmsid(UNSIGNED1 wh) := '';
EXPORT Make_source(SALT30.StrType s0) := s0;
EXPORT InValid_source(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_source(UNSIGNED1 wh) := '';
EXPORT Make_id(SALT30.StrType s0) := s0;
EXPORT InValid_id(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_id(UNSIGNED1 wh) := '';
EXPORT Make_seq_number(SALT30.StrType s0) := s0;
EXPORT InValid_seq_number(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_seq_number(UNSIGNED1 wh) := '';
EXPORT Make_date_created(SALT30.StrType s0) := MakeFT_invalid_date(s0);
EXPORT InValid_date_created(SALT30.StrType s) := InValidFT_invalid_date(s);
EXPORT InValidMessage_date_created(UNSIGNED1 wh) := InValidMessageFT_invalid_date(wh);
EXPORT Make_date_modified(SALT30.StrType s0) := s0;
EXPORT InValid_date_modified(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_date_modified(UNSIGNED1 wh) := '';
EXPORT Make_method_dismiss(SALT30.StrType s0) := s0;
EXPORT InValid_method_dismiss(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_method_dismiss(UNSIGNED1 wh) := '';
EXPORT Make_case_status(SALT30.StrType s0) := s0;
EXPORT InValid_case_status(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_case_status(UNSIGNED1 wh) := '';
EXPORT Make_court_code(SALT30.StrType s0) := s0;
EXPORT InValid_court_code(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_court_code(UNSIGNED1 wh) := '';
EXPORT Make_court_name(SALT30.StrType s0) := s0;
EXPORT InValid_court_name(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_court_name(UNSIGNED1 wh) := '';
EXPORT Make_court_location(SALT30.StrType s0) := s0;
EXPORT InValid_court_location(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_court_location(UNSIGNED1 wh) := '';
EXPORT Make_case_number(SALT30.StrType s0) := MakeFT_invalid_alnum(s0);
EXPORT InValid_case_number(SALT30.StrType s) := InValidFT_invalid_alnum(s);
EXPORT InValidMessage_case_number(UNSIGNED1 wh) := InValidMessageFT_invalid_alnum(wh);
EXPORT Make_orig_case_number(SALT30.StrType s0) := MakeFT_invalid_alnum(s0);
EXPORT InValid_orig_case_number(SALT30.StrType s) := InValidFT_invalid_alnum(s);
EXPORT InValidMessage_orig_case_number(UNSIGNED1 wh) := InValidMessageFT_invalid_alnum(wh);
EXPORT Make_date_filed(SALT30.StrType s0) := MakeFT_invalid_date(s0);
EXPORT InValid_date_filed(SALT30.StrType s) := InValidFT_invalid_date(s);
EXPORT InValidMessage_date_filed(UNSIGNED1 wh) := InValidMessageFT_invalid_date(wh);
EXPORT Make_filing_status(SALT30.StrType s0) := s0;
EXPORT InValid_filing_status(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_filing_status(UNSIGNED1 wh) := '';
EXPORT Make_orig_chapter(SALT30.StrType s0) := s0;
EXPORT InValid_orig_chapter(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_orig_chapter(UNSIGNED1 wh) := '';
EXPORT Make_orig_filing_date(SALT30.StrType s0) := MakeFT_invalid_date(s0);
EXPORT InValid_orig_filing_date(SALT30.StrType s) := InValidFT_invalid_date(s);
EXPORT InValidMessage_orig_filing_date(UNSIGNED1 wh) := InValidMessageFT_invalid_date(wh);
EXPORT Make_assets_no_asset_indicator(SALT30.StrType s0) := s0;
EXPORT InValid_assets_no_asset_indicator(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_assets_no_asset_indicator(UNSIGNED1 wh) := '';
EXPORT Make_filer_type(SALT30.StrType s0) := s0;
EXPORT InValid_filer_type(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_filer_type(UNSIGNED1 wh) := '';
EXPORT Make_meeting_date(SALT30.StrType s0) := s0;
EXPORT InValid_meeting_date(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_meeting_date(UNSIGNED1 wh) := '';
EXPORT Make_meeting_time(SALT30.StrType s0) := s0;
EXPORT InValid_meeting_time(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_meeting_time(UNSIGNED1 wh) := '';
EXPORT Make_address_341(SALT30.StrType s0) := s0;
EXPORT InValid_address_341(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_address_341(UNSIGNED1 wh) := '';
EXPORT Make_claims_deadline(SALT30.StrType s0) := s0;
EXPORT InValid_claims_deadline(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_claims_deadline(UNSIGNED1 wh) := '';
EXPORT Make_complaint_deadline(SALT30.StrType s0) := s0;
EXPORT InValid_complaint_deadline(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_complaint_deadline(UNSIGNED1 wh) := '';
EXPORT Make_judge_name(SALT30.StrType s0) := s0;
EXPORT InValid_judge_name(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_judge_name(UNSIGNED1 wh) := '';
EXPORT Make_judges_identification(SALT30.StrType s0) := s0;
EXPORT InValid_judges_identification(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_judges_identification(UNSIGNED1 wh) := '';
EXPORT Make_filing_jurisdiction(SALT30.StrType s0) := s0;
EXPORT InValid_filing_jurisdiction(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_filing_jurisdiction(UNSIGNED1 wh) := '';
EXPORT Make_assets(SALT30.StrType s0) := s0;
EXPORT InValid_assets(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_assets(UNSIGNED1 wh) := '';
EXPORT Make_liabilities(SALT30.StrType s0) := s0;
EXPORT InValid_liabilities(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_liabilities(UNSIGNED1 wh) := '';
EXPORT Make_casetype(SALT30.StrType s0) := s0;
EXPORT InValid_casetype(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_casetype(UNSIGNED1 wh) := '';
EXPORT Make_assoccode(SALT30.StrType s0) := s0;
EXPORT InValid_assoccode(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_assoccode(UNSIGNED1 wh) := '';
EXPORT Make_splitcase(SALT30.StrType s0) := s0;
EXPORT InValid_splitcase(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_splitcase(UNSIGNED1 wh) := '';
EXPORT Make_filedinerror(SALT30.StrType s0) := s0;
EXPORT InValid_filedinerror(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_filedinerror(UNSIGNED1 wh) := '';
EXPORT Make_date_last_seen(SALT30.StrType s0) := s0;
EXPORT InValid_date_last_seen(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_date_last_seen(UNSIGNED1 wh) := '';
EXPORT Make_date_first_seen(SALT30.StrType s0) := s0;
EXPORT InValid_date_first_seen(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_date_first_seen(UNSIGNED1 wh) := '';
EXPORT Make_date_vendor_first_reported(SALT30.StrType s0) := s0;
EXPORT InValid_date_vendor_first_reported(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_date_vendor_first_reported(UNSIGNED1 wh) := '';
EXPORT Make_date_vendor_last_reported(SALT30.StrType s0) := s0;
EXPORT InValid_date_vendor_last_reported(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_date_vendor_last_reported(UNSIGNED1 wh) := '';
EXPORT Make_reopen_date(SALT30.StrType s0) := MakeFT_invalid_date(s0);
EXPORT InValid_reopen_date(SALT30.StrType s) := InValidFT_invalid_date(s);
EXPORT InValidMessage_reopen_date(UNSIGNED1 wh) := InValidMessageFT_invalid_date(wh);
EXPORT Make_case_closing_date(SALT30.StrType s0) := MakeFT_invalid_date(s0);
EXPORT InValid_case_closing_date(SALT30.StrType s) := InValidFT_invalid_date(s);
EXPORT InValidMessage_case_closing_date(UNSIGNED1 wh) := InValidMessageFT_invalid_date(wh);
EXPORT Make_datereclosed(SALT30.StrType s0) := s0;
EXPORT InValid_datereclosed(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_datereclosed(UNSIGNED1 wh) := '';
EXPORT Make_trusteename(SALT30.StrType s0) := s0;
EXPORT InValid_trusteename(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_trusteename(UNSIGNED1 wh) := '';
EXPORT Make_trusteeaddress(SALT30.StrType s0) := s0;
EXPORT InValid_trusteeaddress(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_trusteeaddress(UNSIGNED1 wh) := '';
EXPORT Make_trusteecity(SALT30.StrType s0) := s0;
EXPORT InValid_trusteecity(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_trusteecity(UNSIGNED1 wh) := '';
EXPORT Make_trusteestate(SALT30.StrType s0) := s0;
EXPORT InValid_trusteestate(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_trusteestate(UNSIGNED1 wh) := '';
EXPORT Make_trusteezip(SALT30.StrType s0) := s0;
EXPORT InValid_trusteezip(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_trusteezip(UNSIGNED1 wh) := '';
EXPORT Make_trusteezip4(SALT30.StrType s0) := s0;
EXPORT InValid_trusteezip4(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_trusteezip4(UNSIGNED1 wh) := '';
EXPORT Make_trusteephone(SALT30.StrType s0) := s0;
EXPORT InValid_trusteephone(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_trusteephone(UNSIGNED1 wh) := '';
EXPORT Make_trusteeid(SALT30.StrType s0) := s0;
EXPORT InValid_trusteeid(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_trusteeid(UNSIGNED1 wh) := '';
EXPORT Make_caseid(SALT30.StrType s0) := s0;
EXPORT InValid_caseid(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_caseid(UNSIGNED1 wh) := '';
EXPORT Make_bardate(SALT30.StrType s0) := s0;
EXPORT InValid_bardate(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_bardate(UNSIGNED1 wh) := '';
EXPORT Make_transferin(SALT30.StrType s0) := s0;
EXPORT InValid_transferin(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_transferin(UNSIGNED1 wh) := '';
EXPORT Make_trusteeemail(SALT30.StrType s0) := s0;
EXPORT InValid_trusteeemail(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_trusteeemail(UNSIGNED1 wh) := '';
EXPORT Make_planconfdate(SALT30.StrType s0) := s0;
EXPORT InValid_planconfdate(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_planconfdate(UNSIGNED1 wh) := '';
EXPORT Make_confheardate(SALT30.StrType s0) := s0;
EXPORT InValid_confheardate(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_confheardate(UNSIGNED1 wh) := '';
EXPORT Make_title(SALT30.StrType s0) := s0;
EXPORT InValid_title(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_title(UNSIGNED1 wh) := '';
EXPORT Make_fname(SALT30.StrType s0) := MakeFT_invalid_name(s0);
EXPORT InValid_fname(SALT30.StrType s) := InValidFT_invalid_name(s);
EXPORT InValidMessage_fname(UNSIGNED1 wh) := InValidMessageFT_invalid_name(wh);
EXPORT Make_mname(SALT30.StrType s0) := MakeFT_invalid_name(s0);
EXPORT InValid_mname(SALT30.StrType s) := InValidFT_invalid_name(s);
EXPORT InValidMessage_mname(UNSIGNED1 wh) := InValidMessageFT_invalid_name(wh);
EXPORT Make_lname(SALT30.StrType s0) := MakeFT_invalid_name(s0);
EXPORT InValid_lname(SALT30.StrType s) := InValidFT_invalid_name(s);
EXPORT InValidMessage_lname(UNSIGNED1 wh) := InValidMessageFT_invalid_name(wh);
EXPORT Make_name_suffix(SALT30.StrType s0) := s0;
EXPORT InValid_name_suffix(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_name_suffix(UNSIGNED1 wh) := '';
EXPORT Make_name_score(SALT30.StrType s0) := s0;
EXPORT InValid_name_score(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_name_score(UNSIGNED1 wh) := '';
EXPORT Make_prim_range(SALT30.StrType s0) := s0;
EXPORT InValid_prim_range(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_prim_range(UNSIGNED1 wh) := '';
EXPORT Make_predir(SALT30.StrType s0) := s0;
EXPORT InValid_predir(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_predir(UNSIGNED1 wh) := '';
EXPORT Make_prim_name(SALT30.StrType s0) := s0;
EXPORT InValid_prim_name(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_prim_name(UNSIGNED1 wh) := '';
EXPORT Make_addr_suffix(SALT30.StrType s0) := s0;
EXPORT InValid_addr_suffix(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_addr_suffix(UNSIGNED1 wh) := '';
EXPORT Make_postdir(SALT30.StrType s0) := s0;
EXPORT InValid_postdir(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_postdir(UNSIGNED1 wh) := '';
EXPORT Make_unit_desig(SALT30.StrType s0) := s0;
EXPORT InValid_unit_desig(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_unit_desig(UNSIGNED1 wh) := '';
EXPORT Make_sec_range(SALT30.StrType s0) := s0;
EXPORT InValid_sec_range(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_sec_range(UNSIGNED1 wh) := '';
EXPORT Make_p_city_name(SALT30.StrType s0) := s0;
EXPORT InValid_p_city_name(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_p_city_name(UNSIGNED1 wh) := '';
EXPORT Make_v_city_name(SALT30.StrType s0) := s0;
EXPORT InValid_v_city_name(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_v_city_name(UNSIGNED1 wh) := '';
EXPORT Make_st(SALT30.StrType s0) := s0;
EXPORT InValid_st(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_st(UNSIGNED1 wh) := '';
EXPORT Make_zip(SALT30.StrType s0) := s0;
EXPORT InValid_zip(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_zip(UNSIGNED1 wh) := '';
EXPORT Make_zip4(SALT30.StrType s0) := s0;
EXPORT InValid_zip4(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_zip4(UNSIGNED1 wh) := '';
EXPORT Make_cart(SALT30.StrType s0) := s0;
EXPORT InValid_cart(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_cart(UNSIGNED1 wh) := '';
EXPORT Make_cr_sort_sz(SALT30.StrType s0) := s0;
EXPORT InValid_cr_sort_sz(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_cr_sort_sz(UNSIGNED1 wh) := '';
EXPORT Make_lot(SALT30.StrType s0) := s0;
EXPORT InValid_lot(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_lot(UNSIGNED1 wh) := '';
EXPORT Make_lot_order(SALT30.StrType s0) := s0;
EXPORT InValid_lot_order(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_lot_order(UNSIGNED1 wh) := '';
EXPORT Make_dbpc(SALT30.StrType s0) := s0;
EXPORT InValid_dbpc(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_dbpc(UNSIGNED1 wh) := '';
EXPORT Make_chk_digit(SALT30.StrType s0) := s0;
EXPORT InValid_chk_digit(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_chk_digit(UNSIGNED1 wh) := '';
EXPORT Make_rec_type(SALT30.StrType s0) := s0;
EXPORT InValid_rec_type(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_rec_type(UNSIGNED1 wh) := '';
EXPORT Make_county(SALT30.StrType s0) := s0;
EXPORT InValid_county(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_county(UNSIGNED1 wh) := '';
EXPORT Make_geo_lat(SALT30.StrType s0) := s0;
EXPORT InValid_geo_lat(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_geo_lat(UNSIGNED1 wh) := '';
EXPORT Make_geo_long(SALT30.StrType s0) := s0;
EXPORT InValid_geo_long(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_geo_long(UNSIGNED1 wh) := '';
EXPORT Make_msa(SALT30.StrType s0) := s0;
EXPORT InValid_msa(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_msa(UNSIGNED1 wh) := '';
EXPORT Make_geo_blk(SALT30.StrType s0) := s0;
EXPORT InValid_geo_blk(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_geo_blk(UNSIGNED1 wh) := '';
EXPORT Make_geo_match(SALT30.StrType s0) := s0;
EXPORT InValid_geo_match(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_geo_match(UNSIGNED1 wh) := '';
EXPORT Make_err_stat(SALT30.StrType s0) := s0;
EXPORT InValid_err_stat(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_err_stat(UNSIGNED1 wh) := '';
EXPORT Make_did(SALT30.StrType s0) := s0;
EXPORT InValid_did(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_did(UNSIGNED1 wh) := '';
EXPORT Make_app_ssn(SALT30.StrType s0) := s0;
EXPORT InValid_app_ssn(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_app_ssn(UNSIGNED1 wh) := '';
EXPORT Make_delete_flag(SALT30.StrType s0) := s0;
EXPORT InValid_delete_flag(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_delete_flag(UNSIGNED1 wh) := '';
EXPORT Make_unique_id(SALT30.StrType s0) := s0;
EXPORT InValid_unique_id(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_unique_id(UNSIGNED1 wh) := '';
// This macro will compute and count field level differences based upon a pivot expression
export MAC_CountDifferencesByPivot(in_left,in_right,pivot_exp,bad_pivots,out_counts) := MACRO
  IMPORT SALT30,Scrubs_bk_main;
//Find those highly occuring pivot values to remove them from consideration
#uniquename(tr)
  %tr% := table(in_left+in_right,{ val := pivot_exp; });
#uniquename(r1)
  %r1% := record
    %tr%.val;    unsigned Cnt := COUNT(GROUP);
  end;
#uniquename(t1)
  %t1% := table(%tr%,%r1%,val,local); // Pre-aggregate before distribute
#uniquename(r2)
  %r2% := record
    %t1%.val;    unsigned Cnt := SUM(GROUP,%t1%.Cnt);
  end;
#uniquename(t2)
  %t2% := table(%t1%,%r2%,val); // Now do global aggregate
Bad_Pivots := %t2%(Cnt>100);
#uniquename(dl)
  %dl% := RECORD
    BOOLEAN Diff_process_date;
    BOOLEAN Diff_tmsid;
    BOOLEAN Diff_source;
    BOOLEAN Diff_id;
    BOOLEAN Diff_seq_number;
    BOOLEAN Diff_date_created;
    BOOLEAN Diff_date_modified;
    BOOLEAN Diff_method_dismiss;
    BOOLEAN Diff_case_status;
    BOOLEAN Diff_court_code;
    BOOLEAN Diff_court_name;
    BOOLEAN Diff_court_location;
    BOOLEAN Diff_case_number;
    BOOLEAN Diff_orig_case_number;
    BOOLEAN Diff_date_filed;
    BOOLEAN Diff_filing_status;
    BOOLEAN Diff_orig_chapter;
    BOOLEAN Diff_orig_filing_date;
    BOOLEAN Diff_assets_no_asset_indicator;
    BOOLEAN Diff_filer_type;
    BOOLEAN Diff_meeting_date;
    BOOLEAN Diff_meeting_time;
    BOOLEAN Diff_address_341;
    BOOLEAN Diff_claims_deadline;
    BOOLEAN Diff_complaint_deadline;
    BOOLEAN Diff_judge_name;
    BOOLEAN Diff_judges_identification;
    BOOLEAN Diff_filing_jurisdiction;
    BOOLEAN Diff_assets;
    BOOLEAN Diff_liabilities;
    BOOLEAN Diff_casetype;
    BOOLEAN Diff_assoccode;
    BOOLEAN Diff_splitcase;
    BOOLEAN Diff_filedinerror;
    BOOLEAN Diff_date_last_seen;
    BOOLEAN Diff_date_first_seen;
    BOOLEAN Diff_date_vendor_first_reported;
    BOOLEAN Diff_date_vendor_last_reported;
    BOOLEAN Diff_reopen_date;
    BOOLEAN Diff_case_closing_date;
    BOOLEAN Diff_datereclosed;
    BOOLEAN Diff_trusteename;
    BOOLEAN Diff_trusteeaddress;
    BOOLEAN Diff_trusteecity;
    BOOLEAN Diff_trusteestate;
    BOOLEAN Diff_trusteezip;
    BOOLEAN Diff_trusteezip4;
    BOOLEAN Diff_trusteephone;
    BOOLEAN Diff_trusteeid;
    BOOLEAN Diff_caseid;
    BOOLEAN Diff_bardate;
    BOOLEAN Diff_transferin;
    BOOLEAN Diff_trusteeemail;
    BOOLEAN Diff_planconfdate;
    BOOLEAN Diff_confheardate;
    BOOLEAN Diff_title;
    BOOLEAN Diff_fname;
    BOOLEAN Diff_mname;
    BOOLEAN Diff_lname;
    BOOLEAN Diff_name_suffix;
    BOOLEAN Diff_name_score;
    BOOLEAN Diff_prim_range;
    BOOLEAN Diff_predir;
    BOOLEAN Diff_prim_name;
    BOOLEAN Diff_addr_suffix;
    BOOLEAN Diff_postdir;
    BOOLEAN Diff_unit_desig;
    BOOLEAN Diff_sec_range;
    BOOLEAN Diff_p_city_name;
    BOOLEAN Diff_v_city_name;
    BOOLEAN Diff_st;
    BOOLEAN Diff_zip;
    BOOLEAN Diff_zip4;
    BOOLEAN Diff_cart;
    BOOLEAN Diff_cr_sort_sz;
    BOOLEAN Diff_lot;
    BOOLEAN Diff_lot_order;
    BOOLEAN Diff_dbpc;
    BOOLEAN Diff_chk_digit;
    BOOLEAN Diff_rec_type;
    BOOLEAN Diff_county;
    BOOLEAN Diff_geo_lat;
    BOOLEAN Diff_geo_long;
    BOOLEAN Diff_msa;
    BOOLEAN Diff_geo_blk;
    BOOLEAN Diff_geo_match;
    BOOLEAN Diff_err_stat;
    BOOLEAN Diff_did;
    BOOLEAN Diff_app_ssn;
    BOOLEAN Diff_delete_flag;
    BOOLEAN Diff_unique_id;
    SALT30.StrType SourceField {MAXLENGTH(30)};
    UNSIGNED Num_Diffs;
    SALT30.StrType Val {MAXLENGTH(1024)};
  END;
#uniquename(fd)
  %dl% %fd%(in_left le,in_right ri) := TRANSFORM
    SELF.Diff_process_date := le.process_date <> ri.process_date;
    SELF.Diff_tmsid := le.tmsid <> ri.tmsid;
    SELF.Diff_source := le.source <> ri.source;
    SELF.Diff_id := le.id <> ri.id;
    SELF.Diff_seq_number := le.seq_number <> ri.seq_number;
    SELF.Diff_date_created := le.date_created <> ri.date_created;
    SELF.Diff_date_modified := le.date_modified <> ri.date_modified;
    SELF.Diff_method_dismiss := le.method_dismiss <> ri.method_dismiss;
    SELF.Diff_case_status := le.case_status <> ri.case_status;
    SELF.Diff_court_code := le.court_code <> ri.court_code;
    SELF.Diff_court_name := le.court_name <> ri.court_name;
    SELF.Diff_court_location := le.court_location <> ri.court_location;
    SELF.Diff_case_number := le.case_number <> ri.case_number;
    SELF.Diff_orig_case_number := le.orig_case_number <> ri.orig_case_number;
    SELF.Diff_date_filed := le.date_filed <> ri.date_filed;
    SELF.Diff_filing_status := le.filing_status <> ri.filing_status;
    SELF.Diff_orig_chapter := le.orig_chapter <> ri.orig_chapter;
    SELF.Diff_orig_filing_date := le.orig_filing_date <> ri.orig_filing_date;
    SELF.Diff_assets_no_asset_indicator := le.assets_no_asset_indicator <> ri.assets_no_asset_indicator;
    SELF.Diff_filer_type := le.filer_type <> ri.filer_type;
    SELF.Diff_meeting_date := le.meeting_date <> ri.meeting_date;
    SELF.Diff_meeting_time := le.meeting_time <> ri.meeting_time;
    SELF.Diff_address_341 := le.address_341 <> ri.address_341;
    SELF.Diff_claims_deadline := le.claims_deadline <> ri.claims_deadline;
    SELF.Diff_complaint_deadline := le.complaint_deadline <> ri.complaint_deadline;
    SELF.Diff_judge_name := le.judge_name <> ri.judge_name;
    SELF.Diff_judges_identification := le.judges_identification <> ri.judges_identification;
    SELF.Diff_filing_jurisdiction := le.filing_jurisdiction <> ri.filing_jurisdiction;
    SELF.Diff_assets := le.assets <> ri.assets;
    SELF.Diff_liabilities := le.liabilities <> ri.liabilities;
    SELF.Diff_casetype := le.casetype <> ri.casetype;
    SELF.Diff_assoccode := le.assoccode <> ri.assoccode;
    SELF.Diff_splitcase := le.splitcase <> ri.splitcase;
    SELF.Diff_filedinerror := le.filedinerror <> ri.filedinerror;
    SELF.Diff_date_last_seen := le.date_last_seen <> ri.date_last_seen;
    SELF.Diff_date_first_seen := le.date_first_seen <> ri.date_first_seen;
    SELF.Diff_date_vendor_first_reported := le.date_vendor_first_reported <> ri.date_vendor_first_reported;
    SELF.Diff_date_vendor_last_reported := le.date_vendor_last_reported <> ri.date_vendor_last_reported;
    SELF.Diff_reopen_date := le.reopen_date <> ri.reopen_date;
    SELF.Diff_case_closing_date := le.case_closing_date <> ri.case_closing_date;
    SELF.Diff_datereclosed := le.datereclosed <> ri.datereclosed;
    SELF.Diff_trusteename := le.trusteename <> ri.trusteename;
    SELF.Diff_trusteeaddress := le.trusteeaddress <> ri.trusteeaddress;
    SELF.Diff_trusteecity := le.trusteecity <> ri.trusteecity;
    SELF.Diff_trusteestate := le.trusteestate <> ri.trusteestate;
    SELF.Diff_trusteezip := le.trusteezip <> ri.trusteezip;
    SELF.Diff_trusteezip4 := le.trusteezip4 <> ri.trusteezip4;
    SELF.Diff_trusteephone := le.trusteephone <> ri.trusteephone;
    SELF.Diff_trusteeid := le.trusteeid <> ri.trusteeid;
    SELF.Diff_caseid := le.caseid <> ri.caseid;
    SELF.Diff_bardate := le.bardate <> ri.bardate;
    SELF.Diff_transferin := le.transferin <> ri.transferin;
    SELF.Diff_trusteeemail := le.trusteeemail <> ri.trusteeemail;
    SELF.Diff_planconfdate := le.planconfdate <> ri.planconfdate;
    SELF.Diff_confheardate := le.confheardate <> ri.confheardate;
    SELF.Diff_title := le.title <> ri.title;
    SELF.Diff_fname := le.fname <> ri.fname;
    SELF.Diff_mname := le.mname <> ri.mname;
    SELF.Diff_lname := le.lname <> ri.lname;
    SELF.Diff_name_suffix := le.name_suffix <> ri.name_suffix;
    SELF.Diff_name_score := le.name_score <> ri.name_score;
    SELF.Diff_prim_range := le.prim_range <> ri.prim_range;
    SELF.Diff_predir := le.predir <> ri.predir;
    SELF.Diff_prim_name := le.prim_name <> ri.prim_name;
    SELF.Diff_addr_suffix := le.addr_suffix <> ri.addr_suffix;
    SELF.Diff_postdir := le.postdir <> ri.postdir;
    SELF.Diff_unit_desig := le.unit_desig <> ri.unit_desig;
    SELF.Diff_sec_range := le.sec_range <> ri.sec_range;
    SELF.Diff_p_city_name := le.p_city_name <> ri.p_city_name;
    SELF.Diff_v_city_name := le.v_city_name <> ri.v_city_name;
    SELF.Diff_st := le.st <> ri.st;
    SELF.Diff_zip := le.zip <> ri.zip;
    SELF.Diff_zip4 := le.zip4 <> ri.zip4;
    SELF.Diff_cart := le.cart <> ri.cart;
    SELF.Diff_cr_sort_sz := le.cr_sort_sz <> ri.cr_sort_sz;
    SELF.Diff_lot := le.lot <> ri.lot;
    SELF.Diff_lot_order := le.lot_order <> ri.lot_order;
    SELF.Diff_dbpc := le.dbpc <> ri.dbpc;
    SELF.Diff_chk_digit := le.chk_digit <> ri.chk_digit;
    SELF.Diff_rec_type := le.rec_type <> ri.rec_type;
    SELF.Diff_county := le.county <> ri.county;
    SELF.Diff_geo_lat := le.geo_lat <> ri.geo_lat;
    SELF.Diff_geo_long := le.geo_long <> ri.geo_long;
    SELF.Diff_msa := le.msa <> ri.msa;
    SELF.Diff_geo_blk := le.geo_blk <> ri.geo_blk;
    SELF.Diff_geo_match := le.geo_match <> ri.geo_match;
    SELF.Diff_err_stat := le.err_stat <> ri.err_stat;
    SELF.Diff_did := le.did <> ri.did;
    SELF.Diff_app_ssn := le.app_ssn <> ri.app_ssn;
    SELF.Diff_delete_flag := le.delete_flag <> ri.delete_flag;
    SELF.Diff_unique_id := le.unique_id <> ri.unique_id;
    SELF.Val := (SALT30.StrType)evaluate(le,pivot_exp);
    SELF.SourceField := le.source;
    SELF.Num_Diffs := 0+ IF( SELF.Diff_process_date,1,0)+ IF( SELF.Diff_tmsid,1,0)+ IF( SELF.Diff_source,1,0)+ IF( SELF.Diff_id,1,0)+ IF( SELF.Diff_seq_number,1,0)+ IF( SELF.Diff_date_created,1,0)+ IF( SELF.Diff_date_modified,1,0)+ IF( SELF.Diff_method_dismiss,1,0)+ IF( SELF.Diff_case_status,1,0)+ IF( SELF.Diff_court_code,1,0)+ IF( SELF.Diff_court_name,1,0)+ IF( SELF.Diff_court_location,1,0)+ IF( SELF.Diff_case_number,1,0)+ IF( SELF.Diff_orig_case_number,1,0)+ IF( SELF.Diff_date_filed,1,0)+ IF( SELF.Diff_filing_status,1,0)+ IF( SELF.Diff_orig_chapter,1,0)+ IF( SELF.Diff_orig_filing_date,1,0)+ IF( SELF.Diff_assets_no_asset_indicator,1,0)+ IF( SELF.Diff_filer_type,1,0)+ IF( SELF.Diff_meeting_date,1,0)+ IF( SELF.Diff_meeting_time,1,0)+ IF( SELF.Diff_address_341,1,0)+ IF( SELF.Diff_claims_deadline,1,0)+ IF( SELF.Diff_complaint_deadline,1,0)+ IF( SELF.Diff_judge_name,1,0)+ IF( SELF.Diff_judges_identification,1,0)+ IF( SELF.Diff_filing_jurisdiction,1,0)+ IF( SELF.Diff_assets,1,0)+ IF( SELF.Diff_liabilities,1,0)+ IF( SELF.Diff_casetype,1,0)+ IF( SELF.Diff_assoccode,1,0)+ IF( SELF.Diff_splitcase,1,0)+ IF( SELF.Diff_filedinerror,1,0)+ IF( SELF.Diff_date_last_seen,1,0)+ IF( SELF.Diff_date_first_seen,1,0)+ IF( SELF.Diff_date_vendor_first_reported,1,0)+ IF( SELF.Diff_date_vendor_last_reported,1,0)+ IF( SELF.Diff_reopen_date,1,0)+ IF( SELF.Diff_case_closing_date,1,0)+ IF( SELF.Diff_datereclosed,1,0)+ IF( SELF.Diff_trusteename,1,0)+ IF( SELF.Diff_trusteeaddress,1,0)+ IF( SELF.Diff_trusteecity,1,0)+ IF( SELF.Diff_trusteestate,1,0)+ IF( SELF.Diff_trusteezip,1,0)+ IF( SELF.Diff_trusteezip4,1,0)+ IF( SELF.Diff_trusteephone,1,0)+ IF( SELF.Diff_trusteeid,1,0)+ IF( SELF.Diff_caseid,1,0)+ IF( SELF.Diff_bardate,1,0)+ IF( SELF.Diff_transferin,1,0)+ IF( SELF.Diff_trusteeemail,1,0)+ IF( SELF.Diff_planconfdate,1,0)+ IF( SELF.Diff_confheardate,1,0)+ IF( SELF.Diff_title,1,0)+ IF( SELF.Diff_fname,1,0)+ IF( SELF.Diff_mname,1,0)+ IF( SELF.Diff_lname,1,0)+ IF( SELF.Diff_name_suffix,1,0)+ IF( SELF.Diff_name_score,1,0)+ IF( SELF.Diff_prim_range,1,0)+ IF( SELF.Diff_predir,1,0)+ IF( SELF.Diff_prim_name,1,0)+ IF( SELF.Diff_addr_suffix,1,0)+ IF( SELF.Diff_postdir,1,0)+ IF( SELF.Diff_unit_desig,1,0)+ IF( SELF.Diff_sec_range,1,0)+ IF( SELF.Diff_p_city_name,1,0)+ IF( SELF.Diff_v_city_name,1,0)+ IF( SELF.Diff_st,1,0)+ IF( SELF.Diff_zip,1,0)+ IF( SELF.Diff_zip4,1,0)+ IF( SELF.Diff_cart,1,0)+ IF( SELF.Diff_cr_sort_sz,1,0)+ IF( SELF.Diff_lot,1,0)+ IF( SELF.Diff_lot_order,1,0)+ IF( SELF.Diff_dbpc,1,0)+ IF( SELF.Diff_chk_digit,1,0)+ IF( SELF.Diff_rec_type,1,0)+ IF( SELF.Diff_county,1,0)+ IF( SELF.Diff_geo_lat,1,0)+ IF( SELF.Diff_geo_long,1,0)+ IF( SELF.Diff_msa,1,0)+ IF( SELF.Diff_geo_blk,1,0)+ IF( SELF.Diff_geo_match,1,0)+ IF( SELF.Diff_err_stat,1,0)+ IF( SELF.Diff_did,1,0)+ IF( SELF.Diff_app_ssn,1,0)+ IF( SELF.Diff_delete_flag,1,0)+ IF( SELF.Diff_unique_id,1,0);
  END;
// Now need to remove bad pivots from comparison
#uniquename(L)
  %L% := JOIN(in_left,bad_pivots,evaluate(LEFT,pivot_exp)=right.val,transform(left),left only,lookup);
#uniquename(R)
  %R% := JOIN(in_right,bad_pivots,evaluate(LEFT,pivot_exp)=right.val,transform(left),left only,lookup);
#uniquename(DiffL)
  %DiffL% := JOIN(%L%,%R%,evaluate(left,pivot_exp)=evaluate(right,pivot_exp),%fd%(left,right),hash);
#uniquename(Closest)
  %Closest% := DEDUP(SORT(%DiffL%,Val,Num_Diffs,local),Val,local); // Join will have distributed by pivot_exp
#uniquename(AggRec)
  %AggRec% := RECORD
    Count_Diff_process_date := COUNT(GROUP,%Closest%.Diff_process_date);
    Count_Diff_tmsid := COUNT(GROUP,%Closest%.Diff_tmsid);
    Count_Diff_source := COUNT(GROUP,%Closest%.Diff_source);
    Count_Diff_id := COUNT(GROUP,%Closest%.Diff_id);
    Count_Diff_seq_number := COUNT(GROUP,%Closest%.Diff_seq_number);
    Count_Diff_date_created := COUNT(GROUP,%Closest%.Diff_date_created);
    Count_Diff_date_modified := COUNT(GROUP,%Closest%.Diff_date_modified);
    Count_Diff_method_dismiss := COUNT(GROUP,%Closest%.Diff_method_dismiss);
    Count_Diff_case_status := COUNT(GROUP,%Closest%.Diff_case_status);
    Count_Diff_court_code := COUNT(GROUP,%Closest%.Diff_court_code);
    Count_Diff_court_name := COUNT(GROUP,%Closest%.Diff_court_name);
    Count_Diff_court_location := COUNT(GROUP,%Closest%.Diff_court_location);
    Count_Diff_case_number := COUNT(GROUP,%Closest%.Diff_case_number);
    Count_Diff_orig_case_number := COUNT(GROUP,%Closest%.Diff_orig_case_number);
    Count_Diff_date_filed := COUNT(GROUP,%Closest%.Diff_date_filed);
    Count_Diff_filing_status := COUNT(GROUP,%Closest%.Diff_filing_status);
    Count_Diff_orig_chapter := COUNT(GROUP,%Closest%.Diff_orig_chapter);
    Count_Diff_orig_filing_date := COUNT(GROUP,%Closest%.Diff_orig_filing_date);
    Count_Diff_assets_no_asset_indicator := COUNT(GROUP,%Closest%.Diff_assets_no_asset_indicator);
    Count_Diff_filer_type := COUNT(GROUP,%Closest%.Diff_filer_type);
    Count_Diff_meeting_date := COUNT(GROUP,%Closest%.Diff_meeting_date);
    Count_Diff_meeting_time := COUNT(GROUP,%Closest%.Diff_meeting_time);
    Count_Diff_address_341 := COUNT(GROUP,%Closest%.Diff_address_341);
    Count_Diff_claims_deadline := COUNT(GROUP,%Closest%.Diff_claims_deadline);
    Count_Diff_complaint_deadline := COUNT(GROUP,%Closest%.Diff_complaint_deadline);
    Count_Diff_judge_name := COUNT(GROUP,%Closest%.Diff_judge_name);
    Count_Diff_judges_identification := COUNT(GROUP,%Closest%.Diff_judges_identification);
    Count_Diff_filing_jurisdiction := COUNT(GROUP,%Closest%.Diff_filing_jurisdiction);
    Count_Diff_assets := COUNT(GROUP,%Closest%.Diff_assets);
    Count_Diff_liabilities := COUNT(GROUP,%Closest%.Diff_liabilities);
    Count_Diff_casetype := COUNT(GROUP,%Closest%.Diff_casetype);
    Count_Diff_assoccode := COUNT(GROUP,%Closest%.Diff_assoccode);
    Count_Diff_splitcase := COUNT(GROUP,%Closest%.Diff_splitcase);
    Count_Diff_filedinerror := COUNT(GROUP,%Closest%.Diff_filedinerror);
    Count_Diff_date_last_seen := COUNT(GROUP,%Closest%.Diff_date_last_seen);
    Count_Diff_date_first_seen := COUNT(GROUP,%Closest%.Diff_date_first_seen);
    Count_Diff_date_vendor_first_reported := COUNT(GROUP,%Closest%.Diff_date_vendor_first_reported);
    Count_Diff_date_vendor_last_reported := COUNT(GROUP,%Closest%.Diff_date_vendor_last_reported);
    Count_Diff_reopen_date := COUNT(GROUP,%Closest%.Diff_reopen_date);
    Count_Diff_case_closing_date := COUNT(GROUP,%Closest%.Diff_case_closing_date);
    Count_Diff_datereclosed := COUNT(GROUP,%Closest%.Diff_datereclosed);
    Count_Diff_trusteename := COUNT(GROUP,%Closest%.Diff_trusteename);
    Count_Diff_trusteeaddress := COUNT(GROUP,%Closest%.Diff_trusteeaddress);
    Count_Diff_trusteecity := COUNT(GROUP,%Closest%.Diff_trusteecity);
    Count_Diff_trusteestate := COUNT(GROUP,%Closest%.Diff_trusteestate);
    Count_Diff_trusteezip := COUNT(GROUP,%Closest%.Diff_trusteezip);
    Count_Diff_trusteezip4 := COUNT(GROUP,%Closest%.Diff_trusteezip4);
    Count_Diff_trusteephone := COUNT(GROUP,%Closest%.Diff_trusteephone);
    Count_Diff_trusteeid := COUNT(GROUP,%Closest%.Diff_trusteeid);
    Count_Diff_caseid := COUNT(GROUP,%Closest%.Diff_caseid);
    Count_Diff_bardate := COUNT(GROUP,%Closest%.Diff_bardate);
    Count_Diff_transferin := COUNT(GROUP,%Closest%.Diff_transferin);
    Count_Diff_trusteeemail := COUNT(GROUP,%Closest%.Diff_trusteeemail);
    Count_Diff_planconfdate := COUNT(GROUP,%Closest%.Diff_planconfdate);
    Count_Diff_confheardate := COUNT(GROUP,%Closest%.Diff_confheardate);
    Count_Diff_title := COUNT(GROUP,%Closest%.Diff_title);
    Count_Diff_fname := COUNT(GROUP,%Closest%.Diff_fname);
    Count_Diff_mname := COUNT(GROUP,%Closest%.Diff_mname);
    Count_Diff_lname := COUNT(GROUP,%Closest%.Diff_lname);
    Count_Diff_name_suffix := COUNT(GROUP,%Closest%.Diff_name_suffix);
    Count_Diff_name_score := COUNT(GROUP,%Closest%.Diff_name_score);
    Count_Diff_prim_range := COUNT(GROUP,%Closest%.Diff_prim_range);
    Count_Diff_predir := COUNT(GROUP,%Closest%.Diff_predir);
    Count_Diff_prim_name := COUNT(GROUP,%Closest%.Diff_prim_name);
    Count_Diff_addr_suffix := COUNT(GROUP,%Closest%.Diff_addr_suffix);
    Count_Diff_postdir := COUNT(GROUP,%Closest%.Diff_postdir);
    Count_Diff_unit_desig := COUNT(GROUP,%Closest%.Diff_unit_desig);
    Count_Diff_sec_range := COUNT(GROUP,%Closest%.Diff_sec_range);
    Count_Diff_p_city_name := COUNT(GROUP,%Closest%.Diff_p_city_name);
    Count_Diff_v_city_name := COUNT(GROUP,%Closest%.Diff_v_city_name);
    Count_Diff_st := COUNT(GROUP,%Closest%.Diff_st);
    Count_Diff_zip := COUNT(GROUP,%Closest%.Diff_zip);
    Count_Diff_zip4 := COUNT(GROUP,%Closest%.Diff_zip4);
    Count_Diff_cart := COUNT(GROUP,%Closest%.Diff_cart);
    Count_Diff_cr_sort_sz := COUNT(GROUP,%Closest%.Diff_cr_sort_sz);
    Count_Diff_lot := COUNT(GROUP,%Closest%.Diff_lot);
    Count_Diff_lot_order := COUNT(GROUP,%Closest%.Diff_lot_order);
    Count_Diff_dbpc := COUNT(GROUP,%Closest%.Diff_dbpc);
    Count_Diff_chk_digit := COUNT(GROUP,%Closest%.Diff_chk_digit);
    Count_Diff_rec_type := COUNT(GROUP,%Closest%.Diff_rec_type);
    Count_Diff_county := COUNT(GROUP,%Closest%.Diff_county);
    Count_Diff_geo_lat := COUNT(GROUP,%Closest%.Diff_geo_lat);
    Count_Diff_geo_long := COUNT(GROUP,%Closest%.Diff_geo_long);
    Count_Diff_msa := COUNT(GROUP,%Closest%.Diff_msa);
    Count_Diff_geo_blk := COUNT(GROUP,%Closest%.Diff_geo_blk);
    Count_Diff_geo_match := COUNT(GROUP,%Closest%.Diff_geo_match);
    Count_Diff_err_stat := COUNT(GROUP,%Closest%.Diff_err_stat);
    Count_Diff_did := COUNT(GROUP,%Closest%.Diff_did);
    Count_Diff_app_ssn := COUNT(GROUP,%Closest%.Diff_app_ssn);
    Count_Diff_delete_flag := COUNT(GROUP,%Closest%.Diff_delete_flag);
    Count_Diff_unique_id := COUNT(GROUP,%Closest%.Diff_unique_id);
    %Closest%.SourceField;
  END;
  out_counts := table(%Closest%,%AggRec%,SourceField,few);
ENDMACRO;
END;
