Import iesp,AutoStandardI;
EXPORT Transforms_HCO := Module
	Export iesp.healthcare_orgaccurint.t_HealthCareAccurintHCOSearchOption getOptions(Healthcare_Header_Services.Layouts.common_runtime_config cfg) := transform
		gm := AutoStandardI.GlobalModule();
		self.ThresholdLimit := cfg.penalty_threshold;
		self.ReturnCount := Healthcare_Header_Services.Constants.MAX_SEARCH_RESULTS;
		self.StartingRecord := if(cfg.isBatchService,0,1);
		self.MaxResults := cfg.MaxResults;
		self.PenaltyThreshold := cfg.penalty_threshold;
		self.TransactionId := gm.TransactionId;
		self.DataRestrictionMask := if(gm.DataRestrictionMask<>'',gm.DataRestrictionMask,cfg.DRM);
		self.DataPermissionMask := if(gm.DataPermissionMask<>'',gm.DataPermissionMask,cfg.DPM);
		self.CompanyId := (string)gm.GlobalCompanyId;
		self.GLBPurpose := (string)gm.GLBPurpose;
		self.DLPurpose := (string)gm.DPPAPurpose;
		self.isbatchservice := cfg.isbatchservice;
		self.IncludeSanctions := cfg.IncludeSanctions;
		self.IncludeGroupAffiliations := cfg.IncludeGroupAffiliations;
		self.IncludeHospitalAffiliations := cfg.IncludeHospitalAffiliations;
		self.IncludeSpecialties := cfg.IncludeSpecialties;
		self.IncludeLicenses := cfg.IncludeLicenses;
		self.IncludeNPI := True;
		self.IncludeDEA := True;
		self.IncludeTaxonomy := True;
		self.IncludeCLIA := cfg.IncludeCLIA;
		self.IncludeNCPDP := cfg.IncludeNCPDP;
		self.IncludeFein := True;
		self.IncludeFullNCPDPInfo := cfg.hasFullNCPDP;
		self:=[];
	end;
	Export iesp.healthcare_orgaccurint.t_HealthCareAccurintHCOSearchBy getSearchBy(Healthcare_Header_Services.Layouts.autokeyInput input) := transform
		self.CompanyName := input.comp_name;
		self.BoardCertifiedSpecialty1 := input.BoardCertifiedSpecialtyVerification;
		self.BoardCertifiedSubSpecialty1 := input.BoardCertifiedSubSpecialtyVerification;
		self.LicenseNumber := if(input.license_number<>'',input.license_number,input.StateLicense1Verification);
		self.LicenseState := if(input.license_state<>'',input.license_state,input.StateLicense1StateVerification);
		self.LicenseNumber2 := input.StateLicense2Verification;
		self.LicenseState2 := input.StateLicense2StateVerification;
		self.LicenseNumber3 := input.StateLicense3Verification;
		self.LicenseState3 := input.StateLicense3StateVerification;
		self.LicenseNumber4 := input.StateLicense4Verification;
		self.LicenseState4 := input.StateLicense4StateVerification;
		self.LicenseNumber5 := input.StateLicense5Verification;
		self.LicenseState5 := input.StateLicense5StateVerification;
		self.LicenseNumber6 := input.StateLicense6Verification;
		self.LicenseState6 := input.StateLicense6StateVerification;
		self.LicenseNumber7 := input.StateLicense7Verification;
		self.LicenseState7 := input.StateLicense7StateVerification;
		self.LicenseNumber8 := input.StateLicense8Verification;
		self.LicenseState8 := input.StateLicense8StateVerification;
		self.LicenseNumber9 := input.StateLicense9Verification;
		self.LicenseState9 := input.StateLicense9StateVerification;
		self.LicenseNumber10 := input.StateLicense10Verification;
		self.LicenseState10 := input.StateLicense10StateVerification;
		self.Phone10 := if(input.homephone<>'',input.homephone,input.workphone);
		self.NPINumber := input.NPI;
		self.DEANumber := input.DEA;
		self.DEANumber2 := input.DEA2;
		self.Taxonomy := input.Taxonomy1Verification;
		self.Taxonomy2 := input.Taxonomy2Verification;
		self.Taxonomy3 := input.Taxonomy3Verification;
		self.Taxonomy4 := input.Taxonomy4Verification;
		self.Taxonomy5 := input.Taxonomy5Verification;
		self.providerid := (String)input.providerid;
		self.bdid := (String)input.bdid;
		self:=input;
		self:=[];
	end;
	Export iesp.healthcare_orgaccurint.t_HealthCareAccurintHCOSearchRequestEx toSoapInput(dataset(Healthcare_Header_Services.Layouts.autokeyInput) input, dataset(Healthcare_Header_Services.Layouts.common_runtime_config) cfg) := function
		Options := project(cfg,getOptions(left))[1]; 
		SearchBy := Project(input,getSearchBy(left))[1];
		iesp.healthcare_orgaccurint.t_HealthCareAccurintHCOSearchRequestEx buildInput():=transform
			self.criteria.User.GLBPurpose := (string)cfg[1].glb;
			self.criteria.User.DLPurpose := (string)cfg[1].dppa;
			self.criteria.User.SSNMask := cfg[1].SSNMask;
			self.criteria.User.DOBMask := cfg[1].DOBMask;
			self.criteria.User.DataRestrictionMask := cfg[1].DRM;
			self.criteria.User.DataPermissionMask := cfg[1].DPM;
			self.criteria.Options := Options;
			self.criteria.SearchBy := SearchBy;
			self:=[];
		end;
		return dataset([buildInput()]);
	end;
	Export iesp.healthcare_orgaccurint.t_HealthCareAccurintHCOBatchRequestEx toSoapBatchInput(dataset(Healthcare_Header_Services.Layouts.autokeyInput) input, dataset(Healthcare_Header_Services.Layouts.common_runtime_config) cfg) := function
		Options := project(cfg,getOptions(left))[1]; 
		SearchBy := Project(input,getSearchBy(left));
		iesp.healthcare_orgaccurint.t_HealthCareAccurintHCOBatchRequestEx buildInput():=transform
			self.criteria.User.GLBPurpose := (string)cfg[1].glb;
			self.criteria.User.DLPurpose := (string)cfg[1].dppa;
			self.criteria.User.SSNMask := cfg[1].SSNMask;
			self.criteria.User.DOBMask := cfg[1].DOBMask;
			self.criteria.User.DataRestrictionMask := cfg[1].DRM;
			self.criteria.User.DataPermissionMask := cfg[1].DPM;
			self.criteria.Options := Options;
			self.criteria.SearchBy := SearchBy;
			self:=[];
		end;
		return dataset([buildInput()]);
	end;
	Shared Healthcare_Header_Services.Layouts.CombinedHeaderResults setInternalLayout(iesp.healthcare_orgaccurint.t_HealthCareAccurintHCOSearchOrganization outRec) := transform
		self.status := outRec.status[1];
		self.Names := project(outRec.Names,transform(Healthcare_Header_Services.Layouts.layout_nameinfo,self:=left;));
		self.Addresses := project(outRec.Addresses,transform(Healthcare_Header_Services.Layouts.layout_addressinfo,
																													self.Phones:=project(left.Phones,transform(Healthcare_Header_Services.Layouts.layout_addressphone,self:=left));
																													self:=left;));
		self.ssns :=[];
		self.dobs := [];
		self.phones := project(outRec.phones,transform(Healthcare_Header_Services.Layouts.layout_phone,self:=left;));
		self.dids := [];
		self.bdids := project(outRec.bdids,transform(Healthcare_Header_Services.Layouts.layout_bdid,self:=left;));
		self.bipkeys := project(outRec.bipkeys,transform(Healthcare_Header_Services.Layouts.layout_bipkeys,self:=left;));
		self.feins := project(outRec.feins,transform(Healthcare_Header_Services.Layouts.layout_fein,self:=left;));
		self.taxids := project(outRec.feins,transform(Healthcare_Header_Services.Layouts.layout_taxid,self.taxid:=left.fein;self:=left;));
		self.upins := [];
		self.npis := project(outRec.npis,transform(Healthcare_Header_Services.Layouts.layout_npi,self:=left;));
		self.deas := project(outRec.deas,transform(Healthcare_Header_Services.Layouts.layout_dea,self:=left;));
		self.clianumbers :=project(outRec.clianumbers,transform(Healthcare_Header_Services.Layouts.layout_clianumber,self:=left;));
		self.optouts := [];
		self.StateLicenses := project(outRec.StateLicenses,transform(Healthcare_Header_Services.Layouts.layout_licenseinfo,self:=left;));
		self.affiliates := project(outRec.affiliates,transform(Healthcare_Header_Services.Layouts.layout_affiliateHospital,self:=left;));
		self.hospitals := project(outRec.hospitals,transform(Healthcare_Header_Services.Layouts.layout_affiliateHospital,self:=left;));
		self.newaffiliations := project(outRec.newaffiliations,transform(Healthcare_Header_Services.Layouts.layout_newaffiliates,self:=left;));
		self.Languages := [];
		self.Degrees :=[];
		self.Specialties := project(outRec.Specialties,transform(Healthcare_Header_Services.Layouts.layout_specialty,self:=left;));
		self.Residencies :=[];
		self.MedSchools := [];
		self.Taxonomy := project(outRec.Taxonomy,transform(Healthcare_Header_Services.Layouts.layout_taxonomy,self:=left;));
		self.sources := project(outRec.sources,transform(Healthcare_Header_Services.Layouts.layout_SrcID,self:=left;));
		self.Sanctions := project(outRec.Sanctions,transform(Healthcare_Header_Services.Layouts.layout_sanctions,self:=left;));
		self.LegacySanctions := project(outRec.LegacySanctions,transform(Healthcare_Header_Services.Layouts.layout_LegacySanctions,self:=left;));
		self.SrcRecRaw :=[];
		self.NPIRaw := project(outRec.NPIRaw,transform(iesp.npireport.t_NPIReport,
																										self.EntityInformation := left.EntityInformation;
																										self.NPIInformation := left.NPIInformation;
																										self.ProviderMailingAddress := left.ProviderMailingAddress;
																										self.ProviderPracticeAddress := left.ProviderPracticeAddress;
																										self.ProviderTaxonomies := project(left.ProviderTaxonomies,transform(iesp.npireport.t_ProviderTaxonomies,self:=left));
																										self.OtherProviderIdentifiers := project(left.OtherProviderIdentifiers,transform(iesp.npireport.t_ProviderIdentifiers,self:=left));
																										self:=left;));
		self.DEARaw := project(outRec.DEARaw,transform(iesp.healthcare.t_DEAControlledSubstanceRecordEx,
																										self.address.StreetNumber := left.address.prim_range;
																										self.address.StreetPreDirection := left.address.predir;
																										self.address.StreetName := left.address.prim_name;
																										self.address.StreetSuffix := left.address.addr_suffix;
																										self.address.StreetPostDirection := left.address.postdir;
																										self.address.UnitDesignation := left.address.unit_desig;
																										self.address.UnitNumber := left.address.sec_range;
																										self.address.StreetAddress1 := left.address.Address1;
																										self.address.StreetAddress2 := left.address.Address2;
																										self.address.City := if(left.address.p_city_name<>'',left.address.p_city_name,left.address.v_city_name);
																										self.address.State := left.address.St;
																										self.address.Zip5 := left.address.Z5;
																										self.address.Zip4 := left.address.Zip4;
																										self.address.County := left.address.county;
																										self.address.PostalCode := left.address.postalcode;
																										self.address.StateCityZip := left.address.statecityzip;
																										self:=left;
																										self:=[];));
		self.ProfLicRaw := project(outRec.ProfLicRaw,transform(iesp.proflicense.t_ProfessionalLicenseRecord,
																										self.address.StreetNumber := left.address.prim_range;
																										self.address.StreetPreDirection := left.address.predir;
																										self.address.StreetName := left.address.prim_name;
																										self.address.StreetSuffix := left.address.addr_suffix;
																										self.address.StreetPostDirection := left.address.postdir;
																										self.address.UnitDesignation := left.address.unit_desig;
																										self.address.UnitNumber := left.address.sec_range;
																										self.address.StreetAddress1 := left.address.Address1;
																										self.address.StreetAddress2 := left.address.Address2;
																										self.address.City := if(left.address.p_city_name<>'',left.address.p_city_name,left.address.v_city_name);
																										self.address.State := left.address.St;
																										self.address.Zip5 := left.address.Z5;
																										self.address.Zip4 := left.address.Zip4;
																										self.address.County := left.address.county;
																										self.address.PostalCode := left.address.postalcode;
																										self.address.StateCityZip := left.address.statecityzip;
																										self:=left;
																										self:=[];));
		self.abmsRaw := [];
		self.CLIARaw := project(outRec.CLIARaw,transform(iesp.cliasearch.t_CLIARecord,
																										self.CLIAProviderAddress.StreetNumber := left.CLIAProviderAddress.prim_range;
																										self.CLIAProviderAddress.StreetPreDirection := left.CLIAProviderAddress.predir;
																										self.CLIAProviderAddress.StreetName := left.CLIAProviderAddress.prim_name;
																										self.CLIAProviderAddress.StreetSuffix := left.CLIAProviderAddress.addr_suffix;
																										self.CLIAProviderAddress.StreetPostDirection := left.CLIAProviderAddress.postdir;
																										self.CLIAProviderAddress.UnitDesignation := left.CLIAProviderAddress.unit_desig;
																										self.CLIAProviderAddress.UnitNumber := left.CLIAProviderAddress.sec_range;
																										self.CLIAProviderAddress.StreetAddress1 := left.CLIAProviderAddress.Address1;
																										self.CLIAProviderAddress.StreetAddress2 := left.CLIAProviderAddress.Address2;
																										self.CLIAProviderAddress.City := if(left.CLIAProviderAddress.p_city_name<>'',left.CLIAProviderAddress.p_city_name,left.CLIAProviderAddress.v_city_name);
																										self.CLIAProviderAddress.State := left.CLIAProviderAddress.St;
																										self.CLIAProviderAddress.Zip5 := left.CLIAProviderAddress.Z5;
																										self.CLIAProviderAddress.Zip4 := left.CLIAProviderAddress.Zip4;
																										self.CLIAProviderAddress.County := left.CLIAProviderAddress.county;
																										self.CLIAProviderAddress.PostalCode := left.CLIAProviderAddress.postalcode;
																										self.CLIAProviderAddress.StateCityZip := left.CLIAProviderAddress.statecityzip;
																										self:=left));
		self.NCPDPRaw := project(outRec.NCPDPRaw,transform(iesp.ncpdp.t_PharmacyReport,
																										self.PharmacyLocationAddress.StreetNumber := left.PharmacyLocationAddress.prim_range;
																										self.PharmacyLocationAddress.StreetPreDirection := left.PharmacyLocationAddress.predir;
																										self.PharmacyLocationAddress.StreetName := left.PharmacyLocationAddress.prim_name;
																										self.PharmacyLocationAddress.StreetSuffix := left.PharmacyLocationAddress.addr_suffix;
																										self.PharmacyLocationAddress.StreetPostDirection := left.PharmacyLocationAddress.postdir;
																										self.PharmacyLocationAddress.UnitDesignation := left.PharmacyLocationAddress.unit_desig;
																										self.PharmacyLocationAddress.UnitNumber := left.PharmacyLocationAddress.sec_range;
																										self.PharmacyLocationAddress.StreetAddress1 := left.PharmacyLocationAddress.Address1;
																										self.PharmacyLocationAddress.StreetAddress2 := left.PharmacyLocationAddress.Address2;
																										self.PharmacyLocationAddress.City := if(left.PharmacyLocationAddress.p_city_name<>'',left.PharmacyLocationAddress.p_city_name,left.PharmacyLocationAddress.v_city_name);
																										self.PharmacyLocationAddress.State := left.PharmacyLocationAddress.St;
																										self.PharmacyLocationAddress.Zip5 := left.PharmacyLocationAddress.Z5;
																										self.PharmacyLocationAddress.Zip4 := left.PharmacyLocationAddress.Zip4;
																										self.PharmacyLocationAddress.County := left.PharmacyLocationAddress.county;
																										self.PharmacyLocationAddress.PostalCode := left.PharmacyLocationAddress.postalcode;
																										self.PharmacyLocationAddress.StateCityZip := left.PharmacyLocationAddress.statecityzip;
																										self.PharmacyMailingAddress.StreetNumber := left.PharmacyMailingAddress.prim_range;
																										self.PharmacyMailingAddress.StreetPreDirection := left.PharmacyMailingAddress.predir;
																										self.PharmacyMailingAddress.StreetName := left.PharmacyMailingAddress.prim_name;
																										self.PharmacyMailingAddress.StreetSuffix := left.PharmacyMailingAddress.addr_suffix;
																										self.PharmacyMailingAddress.StreetPostDirection := left.PharmacyMailingAddress.postdir;
																										self.PharmacyMailingAddress.UnitDesignation := left.PharmacyMailingAddress.unit_desig;
																										self.PharmacyMailingAddress.UnitNumber := left.PharmacyMailingAddress.sec_range;
																										self.PharmacyMailingAddress.StreetAddress1 := left.PharmacyMailingAddress.Address1;
																										self.PharmacyMailingAddress.StreetAddress2 := left.PharmacyMailingAddress.Address2;
																										self.PharmacyMailingAddress.City := if(left.PharmacyMailingAddress.p_city_name<>'',left.PharmacyMailingAddress.p_city_name,left.PharmacyMailingAddress.v_city_name);
																										self.PharmacyMailingAddress.State := left.PharmacyMailingAddress.St;
																										self.PharmacyMailingAddress.Zip5 := left.PharmacyMailingAddress.Z5;
																										self.PharmacyMailingAddress.Zip4 := left.PharmacyMailingAddress.Zip4;
																										self.PharmacyMailingAddress.County := left.PharmacyMailingAddress.county;
																										self.PharmacyMailingAddress.PostalCode := left.PharmacyMailingAddress.postalcode;
																										self.PharmacyMailingAddress.StateCityZip := left.PharmacyMailingAddress.statecityzip;
																										self := left));
		self:=outRec;
		self:=[];
	end;
	Export toInternalLayout(iesp.healthcare_orgaccurint.t_HealthCareAccurintHCOSearchResponse outRec) := function
		searchResults := outRec.healthcareorganizations;
		recs:=project(searchResults,setInternalLayout(left));
		return recs;
	end;
End;