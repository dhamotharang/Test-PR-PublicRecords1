#Stored('DPPAPurpose',1);
#Stored('GLBPurpose',5);
#Stored('DataRestrictionMask','00000000000000000');
#WORKUNIT('name','HC MPRD Test');    //name it "MyJob"
import Healthcare_Shared;
rec_in := Healthcare_Shared.Layouts.autokeyInput;

rec_in setinput():=transform
        self.acctno:='1';
        self.name_first:='Edward';
        self.name_middle:='';
        self.name_last:='Hoffman';
        self.name_suffix:='';
        self.prim_range:='';
        self.predir:='';
        self.prim_name:='';
        self.addr_suffix:='';
        self.postdir:='';
        self.unit_desig:='';
        self.sec_range:='';
        self.p_city_name:='LAS VEGAS';
        self.st:='NV';
        self.z5:='';
        self.zip4:='';
        self.ssn:='';
        self.dob:='';
        self.workphone:='';
        self.DID:=0;
        self.FEIN:='';
        self.comp_name:='';
        self.bdid:=0;
        self.license_number:='';
        self.license_state:='';
        self.TaxID:='';
        self.UPIN:='';
        self.NPI:='';
        self.DEA:='';
        self.CLIANumber:='';
        self.NCPDPNumber:='';
        self.MedicareNumber:='';
        self.LNPID:=0;
        self.LNFID:=0;
        self.ProviderSrc:='';
				self.IsIndividualSearch := true;//Allow the user to force the search to be an individual
				self.IsBusinessSearch := false;//Allow the user to force the search to be a business
				self.IsUnknownSearchBoth := false;//Allow the user to force the search down both the Individual and Business paths
        self.DEA2:='';
        self.OneStepRule:='';
        self.MedicalSchoolNameVerification:='';
        self.GraduationYearVerification:=0;
        self.Taxonomy1Verification:='';
        self.Taxonomy2Verification:='';
        self.Taxonomy3Verification:='';
        self.Taxonomy4Verification:='';
        self.Taxonomy5Verification:='';
        self.StateLicense1Verification:='';
        self.StateLicense1StateVerification:='';
        self.StateLicense2Verification:='';
        self.StateLicense2StateVerification:='';
        self.StateLicense3Verification:='';
        self.StateLicense3StateVerification:='';
        self.StateLicense4Verification:='';
        self.StateLicense4StateVerification:='';
        self.StateLicense5Verification:='';
        self.StateLicense5StateVerification:='';
        self.StateLicense6Verification:='';
        self.StateLicense6StateVerification:='';
        self.StateLicense7Verification:='';
        self.StateLicense7StateVerification:='';
        self.StateLicense8Verification:='';
        self.StateLicense8StateVerification:='';
        self.StateLicense9Verification:='';
        self.StateLicense9StateVerification:='';
        self.StateLicense10Verification:='';
        self.StateLicense10StateVerification:='';
        self.BoardCertifiedSpecialtyVerification:='';
        self.BoardCertifiedSubSpecialtyVerification:='';
        self.BoardCertifiedSpecialty2Verification:='';
        self.BoardCertifiedSubSpecialty2Verification:='';
        self.BoardCertifiedSpecialty3Verification:='';
        self.BoardCertifiedSubSpecialty3Verification:='';
        self.BoardCertifiedSpecialty4Verification:='';
        self.BoardCertifiedSubSpecialty4Verification:='';
        self.BoardCertifiedSpecialty5Verification:='';
        self.BoardCertifiedSubSpecialty5Verification:='';
        self:=[];
end;
InputRecords:=dataset([setinput()]);
Healthcare_Shared.Layouts.common_runtime_config buildConfig():=transform
								DRMFlags := '11111111111111111111111111';
								DPMFlags := '11111111111111111111111111';
                self.BestOnly :=  Healthcare_Shared.Constants.CFG_False;
								self.DRM := DRMFlags;
								self.DPM := DPMFlags;
								self.Restrictions := Healthcare_Shared.Restrictions.setRestrictionFlags(DRMFlags,DPMFlags);
								self.glb_ok := true;
								self.dppa_ok := true;
								self.excludeSourceAMS := false;
								self.excludeSourceNPPES := false;
								self.excludeSourceDEA := false;
								self.excludeSourceProfLic := false;
								self.excludeSourceSelectFile := false;
								self.excludeSourceCLIA := false;
								self.excludeSourceNCPDP := false;
								self.ExcludeClaims := false;
								self.ExcludeOldCP := false;
								self.ExcludeRoster := false;
								self.ExcludeVSF := false;
								self.ExcludeFKA := false;
								self.ExcludeGSA := false;
								self.allowMergeAuthoritySrc := false;//Allow the user to specify they want the authority source elements included even if they exclude the src they will be filtered in transforms doFinalRollup
								self.excludeLegacySanctions := false;
								self.UseQATestRecs := false;
								self.IncludeAlsoFound := false;
								self.includeCustomerData := false;
								self.IncludeProvidersOnly := false;
								self.IncludeSanctionsOnly := false;
								self.IncludeSanctions := true;
								self.IncludeGroupAffiliations := true;
								self.IncludeHospitalAffiliations := true;
								self.IncludeSpecialties  := true;
								self.IncludeLicenses  := true;
								self.IncludeResidencies  := false;
								self.IncludeDOB  := true;
								self.IncludeDOD  := true;
								self.IncludeSSN  := true;
								self.IncludeFein  := true;
								self.IncludeTaxID  := true;
								self.IncludeUPIN  := true;
								self.IncludeNPI  := true;
								self.IncludeDEA  := true;
								self.IncludeCLIA  := true;
								self.IncludeNCPDP  := true;
								self.IncludeDegree  := true;
								self.IncludeTaxonomy  := true;
								self.IncludeMedSchool  := true;
								self.IncludeMedicare  := true;
								self.IncludeStateControlledSubstance  := false;
								self.IncludeEssentialCommunityResources  := false;
								self.IncludeFacilityContacts  := false;
								self.IncludeFacilityAttributes  := false;
								self.IncludeABMSBoardCertifiedSpecialty := false;
								self.IncludeABMSCareer := false;
								self.IncludeABMSEducation := false;
								self.IncludeABMSProfessionalAssociations := false;
								self.IncludeOfficeAttributes := true;
								self.IncludeAddrPhoneFax := true;
								self.IncludeClaimsAddr := true;
								self.IncludeNonAuthoritySources := true;
								self.MixedCaseOutput := true;
								self.ClientDataWeighting := false;
								self.SkipScoring := false;
								self.MatchScoreThreshold := 0;
								self.FacilityMatchScoreThreshold := 0;
								self.keepRawRecs := Healthcare_Shared.Constants.CFG_False;
								self.keepRawDEARecs := Healthcare_Shared.Constants.CFG_False;
								self.keepRawNPIRecs := Healthcare_Shared.Constants.CFG_False;
								self.keepRawProfLicRecs := Healthcare_Shared.Constants.CFG_False;
								self.keepRawCLIARecs := Healthcare_Shared.Constants.CFG_False;
								self.keepRawNCPDPRecs := Healthcare_Shared.Constants.CFG_False;
								self.keepRawABMSRecs := Healthcare_Shared.Constants.CFG_False;
								self.cliaGraceDays := Healthcare_Shared.Constants.CFG_CLIA_GRACE_DAYS;
								self.deaGraceDays := Healthcare_Shared.Constants.CFG_DEA_GRACE_DAYS;
								self.licenseGraceDays := Healthcare_Shared.Constants.CFG_LICENSE_GRACE_DAYS;
								self.licenseVerificationThreshold := Healthcare_Shared.Constants.CFG_LICENSE_VERIFICATION_THRESHOLD;
                // self:=[];Do not uncomment otherwise the default values will not get set.
end;
cfgData:=dataset([buildConfig()]);
// For Individual
output(InputRecords,named('InputRecords'));
output(cfgData,named('cfgData'));
getRecords := Healthcare_Shared.Raw.getRecordsRaw(InputRecords,cfgData);
output(getRecords);// getCommonInput := Healthcare_Shared.getCandidateRecords.getCommonizedRecords(InputRecords);
// getCandidates := Healthcare_Shared.getCandidateRecords.getCandidatesbyCommonized(getCommonInput,cfgData);
// getGoldenRecords := Healthcare_Shared.getGoldenRecord.getRecords(getCandidates,getCommonInput,cfgData);
// output(getCommonInput,named('getCommonInput'));
// output(getCandidates,named('getCandidates'));
// output(getGoldenRecords,named('getGoldenRecords'));
