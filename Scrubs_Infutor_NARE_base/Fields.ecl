IMPORT ut,SALT30;
EXPORT Fields := MODULE
// Processing for each FieldType
EXPORT SALT30.StrType FieldTypeName(UNSIGNED2 i) := CHOOSE(i,'invalid_alnum','invalid_name','invalid_numeric','invalid_address','invalid_state','invalid_zip','invalid_date','invalid_dob','invalid_gender','invalid_email','invalid_ip','invalid_phone','invalid_blank');
EXPORT FieldTypeNum(SALT30.StrType fn) := CASE(fn,'invalid_alnum' => 1,'invalid_name' => 2,'invalid_numeric' => 3,'invalid_address' => 4,'invalid_state' => 5,'invalid_zip' => 6,'invalid_date' => 7,'invalid_dob' => 8,'invalid_gender' => 9,'invalid_email' => 10,'invalid_ip' => 11,'invalid_phone' => 12,'invalid_blank' => 13,0);
EXPORT MakeFT_invalid_alnum(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringfilter(s0,'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\' -/'); // Only allow valid symbols
  s2 := SALT30.stringcleanspaces( SALT30.stringsubstituteout(s1,' -/',' ') ); // Insert spaces but avoid doubles
  RETURN  s2;
END;
EXPORT InValidFT_invalid_alnum(SALT30.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\' -/'))),~(LENGTH(TRIM(s)) >= 0));
EXPORT InValidMessageFT_invalid_alnum(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInChars('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\' -/'),SALT30.HygieneErrors.NotLength('0..'),SALT30.HygieneErrors.Good);
EXPORT MakeFT_invalid_name(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringfilter(s0,'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\' -,&\\/.:;_+'); // Only allow valid symbols
  s2 := SALT30.stringcleanspaces( SALT30.stringsubstituteout(s1,' -,&\\/.:;_+',' ') ); // Insert spaces but avoid doubles
  RETURN  s2;
END;
EXPORT InValidFT_invalid_name(SALT30.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\' -,&\\/.:;_+'))),~(LENGTH(TRIM(s)) >= 0));
EXPORT InValidMessageFT_invalid_name(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInChars('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\' -,&\\/.:;_+'),SALT30.HygieneErrors.NotLength('0..'),SALT30.HygieneErrors.Good);
EXPORT MakeFT_invalid_numeric(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringfilter(s0,'0123456789'); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_invalid_numeric(SALT30.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'0123456789'))),~(LENGTH(TRIM(s)) >= 0));
EXPORT InValidMessageFT_invalid_numeric(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInChars('0123456789'),SALT30.HygieneErrors.NotLength('0..'),SALT30.HygieneErrors.Good);
EXPORT MakeFT_invalid_address(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringfilter(s0,'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\' -&/\\#.;,'); // Only allow valid symbols
  s2 := SALT30.stringcleanspaces( SALT30.stringsubstituteout(s1,' -&/\\#.;,',' ') ); // Insert spaces but avoid doubles
  RETURN  s2;
END;
EXPORT InValidFT_invalid_address(SALT30.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\' -&/\\#.;,'))),~(LENGTH(TRIM(s)) >= 0));
EXPORT InValidMessageFT_invalid_address(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInChars('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\' -&/\\#.;,'),SALT30.HygieneErrors.NotLength('0..'),SALT30.HygieneErrors.Good);
EXPORT MakeFT_invalid_state(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringfilter(s0,'ABCDEFGHIJKLMNOPQRSTUVWXYZ'); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_invalid_state(SALT30.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'ABCDEFGHIJKLMNOPQRSTUVWXYZ'))),~(LENGTH(TRIM(s)) = 2 OR LENGTH(TRIM(s)) = 0));
EXPORT InValidMessageFT_invalid_state(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInChars('ABCDEFGHIJKLMNOPQRSTUVWXYZ'),SALT30.HygieneErrors.NotLength('2,0'),SALT30.HygieneErrors.Good);
EXPORT MakeFT_invalid_zip(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringfilter(s0,'0123456789 -'); // Only allow valid symbols
  s2 := SALT30.stringcleanspaces( SALT30.stringsubstituteout(s1,' -',' ') ); // Insert spaces but avoid doubles
  RETURN  s2;
END;
EXPORT InValidFT_invalid_zip(SALT30.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'0123456789 -'))),~(LENGTH(TRIM(s)) = 10 OR LENGTH(TRIM(s)) = 9 OR LENGTH(TRIM(s)) = 5 OR LENGTH(TRIM(s)) = 0));
EXPORT InValidMessageFT_invalid_zip(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInChars('0123456789 -'),SALT30.HygieneErrors.NotLength('10,9,5,0'),SALT30.HygieneErrors.Good);
EXPORT MakeFT_invalid_date(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringfilter(s0,'0123456789 '); // Only allow valid symbols
  s2 := SALT30.stringcleanspaces( SALT30.stringsubstituteout(s1,' ',' ') ); // Insert spaces but avoid doubles
  RETURN  s2;
END;
EXPORT InValidFT_invalid_date(SALT30.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'0123456789 '))),~(LENGTH(TRIM(s)) = 8 OR LENGTH(TRIM(s)) = 1 OR LENGTH(TRIM(s)) = 0));
EXPORT InValidMessageFT_invalid_date(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInChars('0123456789 '),SALT30.HygieneErrors.NotLength('8,1,0'),SALT30.HygieneErrors.Good);
EXPORT MakeFT_invalid_dob(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringfilter(s0,'0123456789 '); // Only allow valid symbols
  s2 := SALT30.stringcleanspaces( SALT30.stringsubstituteout(s1,' ',' ') ); // Insert spaces but avoid doubles
  RETURN  s2;
END;
EXPORT InValidFT_invalid_dob(SALT30.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'0123456789 '))),~(LENGTH(TRIM(s)) = 8 OR LENGTH(TRIM(s)) = 4 OR LENGTH(TRIM(s)) = 6 OR LENGTH(TRIM(s)) = 0));
EXPORT InValidMessageFT_invalid_dob(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInChars('0123456789 '),SALT30.HygieneErrors.NotLength('8,4,6,0'),SALT30.HygieneErrors.Good);
EXPORT MakeFT_invalid_gender(SALT30.StrType s0) := FUNCTION
  RETURN  s0;
END;
EXPORT InValidFT_invalid_gender(SALT30.StrType s) := WHICH(((SALT30.StrType) s) NOT IN ['M','F','U',' '],~(LENGTH(TRIM(s)) = 1 OR LENGTH(TRIM(s)) = 0));
EXPORT InValidMessageFT_invalid_gender(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInEnum('M|F|U| '),SALT30.HygieneErrors.NotLength('1,0'),SALT30.HygieneErrors.Good);
EXPORT MakeFT_invalid_email(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringfilter(s0,'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\' -@&._!?/'); // Only allow valid symbols
  s2 := SALT30.stringcleanspaces( SALT30.stringsubstituteout(s1,' -@&._!?/',' ') ); // Insert spaces but avoid doubles
  RETURN  s2;
END;
EXPORT InValidFT_invalid_email(SALT30.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\' -@&._!?/'))),~(LENGTH(TRIM(s)) >= 1));
EXPORT InValidMessageFT_invalid_email(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInChars('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\' -@&._!?/'),SALT30.HygieneErrors.NotLength('1..'),SALT30.HygieneErrors.Good);
EXPORT MakeFT_invalid_ip(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringfilter(s0,'0123456789 .'); // Only allow valid symbols
  s2 := SALT30.stringcleanspaces( SALT30.stringsubstituteout(s1,' .',' ') ); // Insert spaces but avoid doubles
  RETURN  s2;
END;
EXPORT InValidFT_invalid_ip(SALT30.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'0123456789 .'))),~(LENGTH(TRIM(s)) >= 0));
EXPORT InValidMessageFT_invalid_ip(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInChars('0123456789 .'),SALT30.HygieneErrors.NotLength('0..'),SALT30.HygieneErrors.Good);
EXPORT MakeFT_invalid_phone(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringfilter(s0,'0123456789 '); // Only allow valid symbols
  s2 := SALT30.stringcleanspaces( SALT30.stringsubstituteout(s1,' ',' ') ); // Insert spaces but avoid doubles
  RETURN  s2;
END;
EXPORT InValidFT_invalid_phone(SALT30.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'0123456789 '))),~(LENGTH(TRIM(s)) = 10 OR LENGTH(TRIM(s)) = 0));
EXPORT InValidMessageFT_invalid_phone(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInChars('0123456789 '),SALT30.HygieneErrors.NotLength('10,0'),SALT30.HygieneErrors.Good);
EXPORT MakeFT_invalid_blank(SALT30.StrType s0) := FUNCTION
  RETURN  s0;
END;
EXPORT InValidFT_invalid_blank(SALT30.StrType s) := WHICH(~(LENGTH(TRIM(s)) >= 1));
EXPORT InValidMessageFT_invalid_blank(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotLength('1..'),SALT30.HygieneErrors.Good);
EXPORT SALT30.StrType FieldName(UNSIGNED2 i) := CHOOSE(i,'idnum','firstname','middlename','lastname','suffix','rectype','gender','dob','addrline1','streetnum','streetpredir','streetname','streetsuffix','streetpostdir','apttype','aptnum','city','state','zipcode','zipplus4','dpc','z4type','crte','fipscounty','dpv','vacantflag','phone','phone2','email','url','ipaddr','wesitetype','datefirstseen','datelastseen','filedate','confidencescore','occurance','persistid','emailsuppressioncd','age','persistent_record_id','did','did_score','clean_title','clean_fname','clean_mname','clean_lname','clean_name_suffix','clean_name_score','rawaid','append_prep_address_situs','append_prep_address_last_situs','clean_prim_range','clean_predir','clean_prim_name','clean_addr_suffix','clean_postdir','clean_unit_desig','clean_sec_range','clean_p_city_name','clean_v_city_name','clean_st','clean_zip','clean_zip4','clean_cart','clean_cr_sort_sz','clean_lot','clean_lot_order','clean_dbpc','clean_chk_digit','clean_rec_type','clean_county','clean_geo_lat','clean_geo_long','clean_msa','clean_geo_blk','clean_geo_match','clean_err_stat','process_date','date_first_seen','date_last_seen','date_vendor_first_reported','date_vendor_last_reported','current_rec_flag');
EXPORT FieldNum(SALT30.StrType fn) := CASE(fn,'idnum' => 1,'firstname' => 2,'middlename' => 3,'lastname' => 4,'suffix' => 5,'rectype' => 6,'gender' => 7,'dob' => 8,'addrline1' => 9,'streetnum' => 10,'streetpredir' => 11,'streetname' => 12,'streetsuffix' => 13,'streetpostdir' => 14,'apttype' => 15,'aptnum' => 16,'city' => 17,'state' => 18,'zipcode' => 19,'zipplus4' => 20,'dpc' => 21,'z4type' => 22,'crte' => 23,'fipscounty' => 24,'dpv' => 25,'vacantflag' => 26,'phone' => 27,'phone2' => 28,'email' => 29,'url' => 30,'ipaddr' => 31,'wesitetype' => 32,'datefirstseen' => 33,'datelastseen' => 34,'filedate' => 35,'confidencescore' => 36,'occurance' => 37,'persistid' => 38,'emailsuppressioncd' => 39,'age' => 40,'persistent_record_id' => 41,'did' => 42,'did_score' => 43,'clean_title' => 44,'clean_fname' => 45,'clean_mname' => 46,'clean_lname' => 47,'clean_name_suffix' => 48,'clean_name_score' => 49,'rawaid' => 50,'append_prep_address_situs' => 51,'append_prep_address_last_situs' => 52,'clean_prim_range' => 53,'clean_predir' => 54,'clean_prim_name' => 55,'clean_addr_suffix' => 56,'clean_postdir' => 57,'clean_unit_desig' => 58,'clean_sec_range' => 59,'clean_p_city_name' => 60,'clean_v_city_name' => 61,'clean_st' => 62,'clean_zip' => 63,'clean_zip4' => 64,'clean_cart' => 65,'clean_cr_sort_sz' => 66,'clean_lot' => 67,'clean_lot_order' => 68,'clean_dbpc' => 69,'clean_chk_digit' => 70,'clean_rec_type' => 71,'clean_county' => 72,'clean_geo_lat' => 73,'clean_geo_long' => 74,'clean_msa' => 75,'clean_geo_blk' => 76,'clean_geo_match' => 77,'clean_err_stat' => 78,'process_date' => 79,'date_first_seen' => 80,'date_last_seen' => 81,'date_vendor_first_reported' => 82,'date_vendor_last_reported' => 83,'current_rec_flag' => 84,0);
//Individual field level validation
EXPORT Make_idnum(SALT30.StrType s0) := MakeFT_invalid_numeric(s0);
EXPORT InValid_idnum(SALT30.StrType s) := InValidFT_invalid_numeric(s);
EXPORT InValidMessage_idnum(UNSIGNED1 wh) := InValidMessageFT_invalid_numeric(wh);
EXPORT Make_firstname(SALT30.StrType s0) := MakeFT_invalid_name(s0);
EXPORT InValid_firstname(SALT30.StrType s) := InValidFT_invalid_name(s);
EXPORT InValidMessage_firstname(UNSIGNED1 wh) := InValidMessageFT_invalid_name(wh);
EXPORT Make_middlename(SALT30.StrType s0) := MakeFT_invalid_name(s0);
EXPORT InValid_middlename(SALT30.StrType s) := InValidFT_invalid_name(s);
EXPORT InValidMessage_middlename(UNSIGNED1 wh) := InValidMessageFT_invalid_name(wh);
EXPORT Make_lastname(SALT30.StrType s0) := MakeFT_invalid_name(s0);
EXPORT InValid_lastname(SALT30.StrType s) := InValidFT_invalid_name(s);
EXPORT InValidMessage_lastname(UNSIGNED1 wh) := InValidMessageFT_invalid_name(wh);
EXPORT Make_suffix(SALT30.StrType s0) := MakeFT_invalid_name(s0);
EXPORT InValid_suffix(SALT30.StrType s) := InValidFT_invalid_name(s);
EXPORT InValidMessage_suffix(UNSIGNED1 wh) := InValidMessageFT_invalid_name(wh);
EXPORT Make_rectype(SALT30.StrType s0) := s0;
EXPORT InValid_rectype(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_rectype(UNSIGNED1 wh) := '';
EXPORT Make_gender(SALT30.StrType s0) := MakeFT_invalid_gender(s0);
EXPORT InValid_gender(SALT30.StrType s) := InValidFT_invalid_gender(s);
EXPORT InValidMessage_gender(UNSIGNED1 wh) := InValidMessageFT_invalid_gender(wh);
EXPORT Make_dob(SALT30.StrType s0) := MakeFT_invalid_dob(s0);
EXPORT InValid_dob(SALT30.StrType s) := InValidFT_invalid_dob(s);
EXPORT InValidMessage_dob(UNSIGNED1 wh) := InValidMessageFT_invalid_dob(wh);
EXPORT Make_addrline1(SALT30.StrType s0) := s0;
EXPORT InValid_addrline1(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_addrline1(UNSIGNED1 wh) := '';
EXPORT Make_streetnum(SALT30.StrType s0) := s0;
EXPORT InValid_streetnum(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_streetnum(UNSIGNED1 wh) := '';
EXPORT Make_streetpredir(SALT30.StrType s0) := s0;
EXPORT InValid_streetpredir(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_streetpredir(UNSIGNED1 wh) := '';
EXPORT Make_streetname(SALT30.StrType s0) := s0;
EXPORT InValid_streetname(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_streetname(UNSIGNED1 wh) := '';
EXPORT Make_streetsuffix(SALT30.StrType s0) := s0;
EXPORT InValid_streetsuffix(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_streetsuffix(UNSIGNED1 wh) := '';
EXPORT Make_streetpostdir(SALT30.StrType s0) := s0;
EXPORT InValid_streetpostdir(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_streetpostdir(UNSIGNED1 wh) := '';
EXPORT Make_apttype(SALT30.StrType s0) := s0;
EXPORT InValid_apttype(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_apttype(UNSIGNED1 wh) := '';
EXPORT Make_aptnum(SALT30.StrType s0) := s0;
EXPORT InValid_aptnum(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_aptnum(UNSIGNED1 wh) := '';
EXPORT Make_city(SALT30.StrType s0) := s0;
EXPORT InValid_city(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_city(UNSIGNED1 wh) := '';
EXPORT Make_state(SALT30.StrType s0) := s0;
EXPORT InValid_state(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_state(UNSIGNED1 wh) := '';
EXPORT Make_zipcode(SALT30.StrType s0) := MakeFT_invalid_zip(s0);
EXPORT InValid_zipcode(SALT30.StrType s) := InValidFT_invalid_zip(s);
EXPORT InValidMessage_zipcode(UNSIGNED1 wh) := InValidMessageFT_invalid_zip(wh);
EXPORT Make_zipplus4(SALT30.StrType s0) := MakeFT_invalid_numeric(s0);
EXPORT InValid_zipplus4(SALT30.StrType s) := InValidFT_invalid_numeric(s);
EXPORT InValidMessage_zipplus4(UNSIGNED1 wh) := InValidMessageFT_invalid_numeric(wh);
EXPORT Make_dpc(SALT30.StrType s0) := s0;
EXPORT InValid_dpc(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_dpc(UNSIGNED1 wh) := '';
EXPORT Make_z4type(SALT30.StrType s0) := s0;
EXPORT InValid_z4type(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_z4type(UNSIGNED1 wh) := '';
EXPORT Make_crte(SALT30.StrType s0) := s0;
EXPORT InValid_crte(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_crte(UNSIGNED1 wh) := '';
EXPORT Make_fipscounty(SALT30.StrType s0) := s0;
EXPORT InValid_fipscounty(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_fipscounty(UNSIGNED1 wh) := '';
EXPORT Make_dpv(SALT30.StrType s0) := s0;
EXPORT InValid_dpv(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_dpv(UNSIGNED1 wh) := '';
EXPORT Make_vacantflag(SALT30.StrType s0) := s0;
EXPORT InValid_vacantflag(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_vacantflag(UNSIGNED1 wh) := '';
EXPORT Make_phone(SALT30.StrType s0) := MakeFT_invalid_phone(s0);
EXPORT InValid_phone(SALT30.StrType s) := InValidFT_invalid_phone(s);
EXPORT InValidMessage_phone(UNSIGNED1 wh) := InValidMessageFT_invalid_phone(wh);
EXPORT Make_phone2(SALT30.StrType s0) := MakeFT_invalid_phone(s0);
EXPORT InValid_phone2(SALT30.StrType s) := InValidFT_invalid_phone(s);
EXPORT InValidMessage_phone2(UNSIGNED1 wh) := InValidMessageFT_invalid_phone(wh);
EXPORT Make_email(SALT30.StrType s0) := s0;
EXPORT InValid_email(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_email(UNSIGNED1 wh) := '';
EXPORT Make_url(SALT30.StrType s0) := s0;
EXPORT InValid_url(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_url(UNSIGNED1 wh) := '';
EXPORT Make_ipaddr(SALT30.StrType s0) := s0;
EXPORT InValid_ipaddr(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_ipaddr(UNSIGNED1 wh) := '';
EXPORT Make_wesitetype(SALT30.StrType s0) := s0;
EXPORT InValid_wesitetype(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_wesitetype(UNSIGNED1 wh) := '';
EXPORT Make_datefirstseen(SALT30.StrType s0) := MakeFT_invalid_date(s0);
EXPORT InValid_datefirstseen(SALT30.StrType s) := InValidFT_invalid_date(s);
EXPORT InValidMessage_datefirstseen(UNSIGNED1 wh) := InValidMessageFT_invalid_date(wh);
EXPORT Make_datelastseen(SALT30.StrType s0) := MakeFT_invalid_date(s0);
EXPORT InValid_datelastseen(SALT30.StrType s) := InValidFT_invalid_date(s);
EXPORT InValidMessage_datelastseen(UNSIGNED1 wh) := InValidMessageFT_invalid_date(wh);
EXPORT Make_filedate(SALT30.StrType s0) := MakeFT_invalid_date(s0);
EXPORT InValid_filedate(SALT30.StrType s) := InValidFT_invalid_date(s);
EXPORT InValidMessage_filedate(UNSIGNED1 wh) := InValidMessageFT_invalid_date(wh);
EXPORT Make_confidencescore(SALT30.StrType s0) := s0;
EXPORT InValid_confidencescore(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_confidencescore(UNSIGNED1 wh) := '';
EXPORT Make_occurance(SALT30.StrType s0) := s0;
EXPORT InValid_occurance(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_occurance(UNSIGNED1 wh) := '';
EXPORT Make_persistid(SALT30.StrType s0) := s0;
EXPORT InValid_persistid(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_persistid(UNSIGNED1 wh) := '';
EXPORT Make_emailsuppressioncd(SALT30.StrType s0) := s0;
EXPORT InValid_emailsuppressioncd(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_emailsuppressioncd(UNSIGNED1 wh) := '';
EXPORT Make_age(SALT30.StrType s0) := MakeFT_invalid_numeric(s0);
EXPORT InValid_age(SALT30.StrType s) := InValidFT_invalid_numeric(s);
EXPORT InValidMessage_age(UNSIGNED1 wh) := InValidMessageFT_invalid_numeric(wh);
EXPORT Make_persistent_record_id(SALT30.StrType s0) := s0;
EXPORT InValid_persistent_record_id(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_persistent_record_id(UNSIGNED1 wh) := '';
EXPORT Make_did(SALT30.StrType s0) := s0;
EXPORT InValid_did(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_did(UNSIGNED1 wh) := '';
EXPORT Make_did_score(SALT30.StrType s0) := s0;
EXPORT InValid_did_score(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_did_score(UNSIGNED1 wh) := '';
EXPORT Make_clean_title(SALT30.StrType s0) := MakeFT_invalid_alnum(s0);
EXPORT InValid_clean_title(SALT30.StrType s) := InValidFT_invalid_alnum(s);
EXPORT InValidMessage_clean_title(UNSIGNED1 wh) := InValidMessageFT_invalid_alnum(wh);
EXPORT Make_clean_fname(SALT30.StrType s0) := MakeFT_invalid_alnum(s0);
EXPORT InValid_clean_fname(SALT30.StrType s) := InValidFT_invalid_alnum(s);
EXPORT InValidMessage_clean_fname(UNSIGNED1 wh) := InValidMessageFT_invalid_alnum(wh);
EXPORT Make_clean_mname(SALT30.StrType s0) := MakeFT_invalid_alnum(s0);
EXPORT InValid_clean_mname(SALT30.StrType s) := InValidFT_invalid_alnum(s);
EXPORT InValidMessage_clean_mname(UNSIGNED1 wh) := InValidMessageFT_invalid_alnum(wh);
EXPORT Make_clean_lname(SALT30.StrType s0) := MakeFT_invalid_alnum(s0);
EXPORT InValid_clean_lname(SALT30.StrType s) := InValidFT_invalid_alnum(s);
EXPORT InValidMessage_clean_lname(UNSIGNED1 wh) := InValidMessageFT_invalid_alnum(wh);
EXPORT Make_clean_name_suffix(SALT30.StrType s0) := MakeFT_invalid_alnum(s0);
EXPORT InValid_clean_name_suffix(SALT30.StrType s) := InValidFT_invalid_alnum(s);
EXPORT InValidMessage_clean_name_suffix(UNSIGNED1 wh) := InValidMessageFT_invalid_alnum(wh);
EXPORT Make_clean_name_score(SALT30.StrType s0) := s0;
EXPORT InValid_clean_name_score(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_clean_name_score(UNSIGNED1 wh) := '';
EXPORT Make_rawaid(SALT30.StrType s0) := s0;
EXPORT InValid_rawaid(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_rawaid(UNSIGNED1 wh) := '';
EXPORT Make_append_prep_address_situs(SALT30.StrType s0) := s0;
EXPORT InValid_append_prep_address_situs(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_append_prep_address_situs(UNSIGNED1 wh) := '';
EXPORT Make_append_prep_address_last_situs(SALT30.StrType s0) := s0;
EXPORT InValid_append_prep_address_last_situs(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_append_prep_address_last_situs(UNSIGNED1 wh) := '';
EXPORT Make_clean_prim_range(SALT30.StrType s0) := MakeFT_invalid_alnum(s0);
EXPORT InValid_clean_prim_range(SALT30.StrType s) := InValidFT_invalid_alnum(s);
EXPORT InValidMessage_clean_prim_range(UNSIGNED1 wh) := InValidMessageFT_invalid_alnum(wh);
EXPORT Make_clean_predir(SALT30.StrType s0) := MakeFT_invalid_alnum(s0);
EXPORT InValid_clean_predir(SALT30.StrType s) := InValidFT_invalid_alnum(s);
EXPORT InValidMessage_clean_predir(UNSIGNED1 wh) := InValidMessageFT_invalid_alnum(wh);
EXPORT Make_clean_prim_name(SALT30.StrType s0) := MakeFT_invalid_alnum(s0);
EXPORT InValid_clean_prim_name(SALT30.StrType s) := InValidFT_invalid_alnum(s);
EXPORT InValidMessage_clean_prim_name(UNSIGNED1 wh) := InValidMessageFT_invalid_alnum(wh);
EXPORT Make_clean_addr_suffix(SALT30.StrType s0) := MakeFT_invalid_alnum(s0);
EXPORT InValid_clean_addr_suffix(SALT30.StrType s) := InValidFT_invalid_alnum(s);
EXPORT InValidMessage_clean_addr_suffix(UNSIGNED1 wh) := InValidMessageFT_invalid_alnum(wh);
EXPORT Make_clean_postdir(SALT30.StrType s0) := MakeFT_invalid_alnum(s0);
EXPORT InValid_clean_postdir(SALT30.StrType s) := InValidFT_invalid_alnum(s);
EXPORT InValidMessage_clean_postdir(UNSIGNED1 wh) := InValidMessageFT_invalid_alnum(wh);
EXPORT Make_clean_unit_desig(SALT30.StrType s0) := s0;
EXPORT InValid_clean_unit_desig(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_clean_unit_desig(UNSIGNED1 wh) := '';
EXPORT Make_clean_sec_range(SALT30.StrType s0) := s0;
EXPORT InValid_clean_sec_range(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_clean_sec_range(UNSIGNED1 wh) := '';
EXPORT Make_clean_p_city_name(SALT30.StrType s0) := MakeFT_invalid_alnum(s0);
EXPORT InValid_clean_p_city_name(SALT30.StrType s) := InValidFT_invalid_alnum(s);
EXPORT InValidMessage_clean_p_city_name(UNSIGNED1 wh) := InValidMessageFT_invalid_alnum(wh);
EXPORT Make_clean_v_city_name(SALT30.StrType s0) := MakeFT_invalid_alnum(s0);
EXPORT InValid_clean_v_city_name(SALT30.StrType s) := InValidFT_invalid_alnum(s);
EXPORT InValidMessage_clean_v_city_name(UNSIGNED1 wh) := InValidMessageFT_invalid_alnum(wh);
EXPORT Make_clean_st(SALT30.StrType s0) := MakeFT_invalid_state(s0);
EXPORT InValid_clean_st(SALT30.StrType s) := InValidFT_invalid_state(s);
EXPORT InValidMessage_clean_st(UNSIGNED1 wh) := InValidMessageFT_invalid_state(wh);
EXPORT Make_clean_zip(SALT30.StrType s0) := MakeFT_invalid_zip(s0);
EXPORT InValid_clean_zip(SALT30.StrType s) := InValidFT_invalid_zip(s);
EXPORT InValidMessage_clean_zip(UNSIGNED1 wh) := InValidMessageFT_invalid_zip(wh);
EXPORT Make_clean_zip4(SALT30.StrType s0) := MakeFT_invalid_numeric(s0);
EXPORT InValid_clean_zip4(SALT30.StrType s) := InValidFT_invalid_numeric(s);
EXPORT InValidMessage_clean_zip4(UNSIGNED1 wh) := InValidMessageFT_invalid_numeric(wh);
EXPORT Make_clean_cart(SALT30.StrType s0) := s0;
EXPORT InValid_clean_cart(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_clean_cart(UNSIGNED1 wh) := '';
EXPORT Make_clean_cr_sort_sz(SALT30.StrType s0) := s0;
EXPORT InValid_clean_cr_sort_sz(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_clean_cr_sort_sz(UNSIGNED1 wh) := '';
EXPORT Make_clean_lot(SALT30.StrType s0) := s0;
EXPORT InValid_clean_lot(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_clean_lot(UNSIGNED1 wh) := '';
EXPORT Make_clean_lot_order(SALT30.StrType s0) := s0;
EXPORT InValid_clean_lot_order(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_clean_lot_order(UNSIGNED1 wh) := '';
EXPORT Make_clean_dbpc(SALT30.StrType s0) := s0;
EXPORT InValid_clean_dbpc(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_clean_dbpc(UNSIGNED1 wh) := '';
EXPORT Make_clean_chk_digit(SALT30.StrType s0) := s0;
EXPORT InValid_clean_chk_digit(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_clean_chk_digit(UNSIGNED1 wh) := '';
EXPORT Make_clean_rec_type(SALT30.StrType s0) := s0;
EXPORT InValid_clean_rec_type(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_clean_rec_type(UNSIGNED1 wh) := '';
EXPORT Make_clean_county(SALT30.StrType s0) := s0;
EXPORT InValid_clean_county(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_clean_county(UNSIGNED1 wh) := '';
EXPORT Make_clean_geo_lat(SALT30.StrType s0) := s0;
EXPORT InValid_clean_geo_lat(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_clean_geo_lat(UNSIGNED1 wh) := '';
EXPORT Make_clean_geo_long(SALT30.StrType s0) := s0;
EXPORT InValid_clean_geo_long(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_clean_geo_long(UNSIGNED1 wh) := '';
EXPORT Make_clean_msa(SALT30.StrType s0) := s0;
EXPORT InValid_clean_msa(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_clean_msa(UNSIGNED1 wh) := '';
EXPORT Make_clean_geo_blk(SALT30.StrType s0) := s0;
EXPORT InValid_clean_geo_blk(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_clean_geo_blk(UNSIGNED1 wh) := '';
EXPORT Make_clean_geo_match(SALT30.StrType s0) := s0;
EXPORT InValid_clean_geo_match(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_clean_geo_match(UNSIGNED1 wh) := '';
EXPORT Make_clean_err_stat(SALT30.StrType s0) := s0;
EXPORT InValid_clean_err_stat(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_clean_err_stat(UNSIGNED1 wh) := '';
EXPORT Make_process_date(SALT30.StrType s0) := MakeFT_invalid_date(s0);
EXPORT InValid_process_date(SALT30.StrType s) := InValidFT_invalid_date(s);
EXPORT InValidMessage_process_date(UNSIGNED1 wh) := InValidMessageFT_invalid_date(wh);
EXPORT Make_date_first_seen(SALT30.StrType s0) := MakeFT_invalid_date(s0);
EXPORT InValid_date_first_seen(SALT30.StrType s) := InValidFT_invalid_date(s);
EXPORT InValidMessage_date_first_seen(UNSIGNED1 wh) := InValidMessageFT_invalid_date(wh);
EXPORT Make_date_last_seen(SALT30.StrType s0) := MakeFT_invalid_date(s0);
EXPORT InValid_date_last_seen(SALT30.StrType s) := InValidFT_invalid_date(s);
EXPORT InValidMessage_date_last_seen(UNSIGNED1 wh) := InValidMessageFT_invalid_date(wh);
EXPORT Make_date_vendor_first_reported(SALT30.StrType s0) := MakeFT_invalid_date(s0);
EXPORT InValid_date_vendor_first_reported(SALT30.StrType s) := InValidFT_invalid_date(s);
EXPORT InValidMessage_date_vendor_first_reported(UNSIGNED1 wh) := InValidMessageFT_invalid_date(wh);
EXPORT Make_date_vendor_last_reported(SALT30.StrType s0) := MakeFT_invalid_date(s0);
EXPORT InValid_date_vendor_last_reported(SALT30.StrType s) := InValidFT_invalid_date(s);
EXPORT InValidMessage_date_vendor_last_reported(UNSIGNED1 wh) := InValidMessageFT_invalid_date(wh);
EXPORT Make_current_rec_flag(SALT30.StrType s0) := s0;
EXPORT InValid_current_rec_flag(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_current_rec_flag(UNSIGNED1 wh) := '';
// This macro will compute and count field level differences based upon a pivot expression
export MAC_CountDifferencesByPivot(in_left,in_right,pivot_exp,bad_pivots,out_counts) := MACRO
  IMPORT SALT30,Scrubs_Infutor_NARE_base;
//Find those highly occuring pivot values to remove them from consideration
#uniquename(tr)
  %tr% := table(in_left+in_right,{ val := pivot_exp; });
#uniquename(r1)
  %r1% := record
    %tr%.val;    unsigned Cnt := COUNT(GROUP);
  end;
#uniquename(t1)
  %t1% := table(%tr%,%r1%,val,local); // Pre-aggregate before distribute
#uniquename(r2)
  %r2% := record
    %t1%.val;    unsigned Cnt := SUM(GROUP,%t1%.Cnt);
  end;
#uniquename(t2)
  %t2% := table(%t1%,%r2%,val); // Now do global aggregate
Bad_Pivots := %t2%(Cnt>100);
#uniquename(dl)
  %dl% := RECORD
    BOOLEAN Diff_idnum;
    BOOLEAN Diff_firstname;
    BOOLEAN Diff_middlename;
    BOOLEAN Diff_lastname;
    BOOLEAN Diff_suffix;
    BOOLEAN Diff_rectype;
    BOOLEAN Diff_gender;
    BOOLEAN Diff_dob;
    BOOLEAN Diff_addrline1;
    BOOLEAN Diff_streetnum;
    BOOLEAN Diff_streetpredir;
    BOOLEAN Diff_streetname;
    BOOLEAN Diff_streetsuffix;
    BOOLEAN Diff_streetpostdir;
    BOOLEAN Diff_apttype;
    BOOLEAN Diff_aptnum;
    BOOLEAN Diff_city;
    BOOLEAN Diff_state;
    BOOLEAN Diff_zipcode;
    BOOLEAN Diff_zipplus4;
    BOOLEAN Diff_dpc;
    BOOLEAN Diff_z4type;
    BOOLEAN Diff_crte;
    BOOLEAN Diff_fipscounty;
    BOOLEAN Diff_dpv;
    BOOLEAN Diff_vacantflag;
    BOOLEAN Diff_phone;
    BOOLEAN Diff_phone2;
    BOOLEAN Diff_email;
    BOOLEAN Diff_url;
    BOOLEAN Diff_ipaddr;
    BOOLEAN Diff_wesitetype;
    BOOLEAN Diff_datefirstseen;
    BOOLEAN Diff_datelastseen;
    BOOLEAN Diff_filedate;
    BOOLEAN Diff_confidencescore;
    BOOLEAN Diff_occurance;
    BOOLEAN Diff_persistid;
    BOOLEAN Diff_emailsuppressioncd;
    BOOLEAN Diff_age;
    BOOLEAN Diff_persistent_record_id;
    BOOLEAN Diff_did;
    BOOLEAN Diff_did_score;
    BOOLEAN Diff_clean_title;
    BOOLEAN Diff_clean_fname;
    BOOLEAN Diff_clean_mname;
    BOOLEAN Diff_clean_lname;
    BOOLEAN Diff_clean_name_suffix;
    BOOLEAN Diff_clean_name_score;
    BOOLEAN Diff_rawaid;
    BOOLEAN Diff_append_prep_address_situs;
    BOOLEAN Diff_append_prep_address_last_situs;
    BOOLEAN Diff_clean_prim_range;
    BOOLEAN Diff_clean_predir;
    BOOLEAN Diff_clean_prim_name;
    BOOLEAN Diff_clean_addr_suffix;
    BOOLEAN Diff_clean_postdir;
    BOOLEAN Diff_clean_unit_desig;
    BOOLEAN Diff_clean_sec_range;
    BOOLEAN Diff_clean_p_city_name;
    BOOLEAN Diff_clean_v_city_name;
    BOOLEAN Diff_clean_st;
    BOOLEAN Diff_clean_zip;
    BOOLEAN Diff_clean_zip4;
    BOOLEAN Diff_clean_cart;
    BOOLEAN Diff_clean_cr_sort_sz;
    BOOLEAN Diff_clean_lot;
    BOOLEAN Diff_clean_lot_order;
    BOOLEAN Diff_clean_dbpc;
    BOOLEAN Diff_clean_chk_digit;
    BOOLEAN Diff_clean_rec_type;
    BOOLEAN Diff_clean_county;
    BOOLEAN Diff_clean_geo_lat;
    BOOLEAN Diff_clean_geo_long;
    BOOLEAN Diff_clean_msa;
    BOOLEAN Diff_clean_geo_blk;
    BOOLEAN Diff_clean_geo_match;
    BOOLEAN Diff_clean_err_stat;
    BOOLEAN Diff_process_date;
    BOOLEAN Diff_date_first_seen;
    BOOLEAN Diff_date_last_seen;
    BOOLEAN Diff_date_vendor_first_reported;
    BOOLEAN Diff_date_vendor_last_reported;
    BOOLEAN Diff_current_rec_flag;
    UNSIGNED Num_Diffs;
    SALT30.StrType Val {MAXLENGTH(1024)};
  END;
#uniquename(fd)
  %dl% %fd%(in_left le,in_right ri) := TRANSFORM
    SELF.Diff_idnum := le.idnum <> ri.idnum;
    SELF.Diff_firstname := le.firstname <> ri.firstname;
    SELF.Diff_middlename := le.middlename <> ri.middlename;
    SELF.Diff_lastname := le.lastname <> ri.lastname;
    SELF.Diff_suffix := le.suffix <> ri.suffix;
    SELF.Diff_rectype := le.rectype <> ri.rectype;
    SELF.Diff_gender := le.gender <> ri.gender;
    SELF.Diff_dob := le.dob <> ri.dob;
    SELF.Diff_addrline1 := le.addrline1 <> ri.addrline1;
    SELF.Diff_streetnum := le.streetnum <> ri.streetnum;
    SELF.Diff_streetpredir := le.streetpredir <> ri.streetpredir;
    SELF.Diff_streetname := le.streetname <> ri.streetname;
    SELF.Diff_streetsuffix := le.streetsuffix <> ri.streetsuffix;
    SELF.Diff_streetpostdir := le.streetpostdir <> ri.streetpostdir;
    SELF.Diff_apttype := le.apttype <> ri.apttype;
    SELF.Diff_aptnum := le.aptnum <> ri.aptnum;
    SELF.Diff_city := le.city <> ri.city;
    SELF.Diff_state := le.state <> ri.state;
    SELF.Diff_zipcode := le.zipcode <> ri.zipcode;
    SELF.Diff_zipplus4 := le.zipplus4 <> ri.zipplus4;
    SELF.Diff_dpc := le.dpc <> ri.dpc;
    SELF.Diff_z4type := le.z4type <> ri.z4type;
    SELF.Diff_crte := le.crte <> ri.crte;
    SELF.Diff_fipscounty := le.fipscounty <> ri.fipscounty;
    SELF.Diff_dpv := le.dpv <> ri.dpv;
    SELF.Diff_vacantflag := le.vacantflag <> ri.vacantflag;
    SELF.Diff_phone := le.phone <> ri.phone;
    SELF.Diff_phone2 := le.phone2 <> ri.phone2;
    SELF.Diff_email := le.email <> ri.email;
    SELF.Diff_url := le.url <> ri.url;
    SELF.Diff_ipaddr := le.ipaddr <> ri.ipaddr;
    SELF.Diff_wesitetype := le.wesitetype <> ri.wesitetype;
    SELF.Diff_datefirstseen := le.datefirstseen <> ri.datefirstseen;
    SELF.Diff_datelastseen := le.datelastseen <> ri.datelastseen;
    SELF.Diff_filedate := le.filedate <> ri.filedate;
    SELF.Diff_confidencescore := le.confidencescore <> ri.confidencescore;
    SELF.Diff_occurance := le.occurance <> ri.occurance;
    SELF.Diff_persistid := le.persistid <> ri.persistid;
    SELF.Diff_emailsuppressioncd := le.emailsuppressioncd <> ri.emailsuppressioncd;
    SELF.Diff_age := le.age <> ri.age;
    SELF.Diff_persistent_record_id := le.persistent_record_id <> ri.persistent_record_id;
    SELF.Diff_did := le.did <> ri.did;
    SELF.Diff_did_score := le.did_score <> ri.did_score;
    SELF.Diff_clean_title := le.clean_title <> ri.clean_title;
    SELF.Diff_clean_fname := le.clean_fname <> ri.clean_fname;
    SELF.Diff_clean_mname := le.clean_mname <> ri.clean_mname;
    SELF.Diff_clean_lname := le.clean_lname <> ri.clean_lname;
    SELF.Diff_clean_name_suffix := le.clean_name_suffix <> ri.clean_name_suffix;
    SELF.Diff_clean_name_score := le.clean_name_score <> ri.clean_name_score;
    SELF.Diff_rawaid := le.rawaid <> ri.rawaid;
    SELF.Diff_append_prep_address_situs := le.append_prep_address_situs <> ri.append_prep_address_situs;
    SELF.Diff_append_prep_address_last_situs := le.append_prep_address_last_situs <> ri.append_prep_address_last_situs;
    SELF.Diff_clean_prim_range := le.clean_prim_range <> ri.clean_prim_range;
    SELF.Diff_clean_predir := le.clean_predir <> ri.clean_predir;
    SELF.Diff_clean_prim_name := le.clean_prim_name <> ri.clean_prim_name;
    SELF.Diff_clean_addr_suffix := le.clean_addr_suffix <> ri.clean_addr_suffix;
    SELF.Diff_clean_postdir := le.clean_postdir <> ri.clean_postdir;
    SELF.Diff_clean_unit_desig := le.clean_unit_desig <> ri.clean_unit_desig;
    SELF.Diff_clean_sec_range := le.clean_sec_range <> ri.clean_sec_range;
    SELF.Diff_clean_p_city_name := le.clean_p_city_name <> ri.clean_p_city_name;
    SELF.Diff_clean_v_city_name := le.clean_v_city_name <> ri.clean_v_city_name;
    SELF.Diff_clean_st := le.clean_st <> ri.clean_st;
    SELF.Diff_clean_zip := le.clean_zip <> ri.clean_zip;
    SELF.Diff_clean_zip4 := le.clean_zip4 <> ri.clean_zip4;
    SELF.Diff_clean_cart := le.clean_cart <> ri.clean_cart;
    SELF.Diff_clean_cr_sort_sz := le.clean_cr_sort_sz <> ri.clean_cr_sort_sz;
    SELF.Diff_clean_lot := le.clean_lot <> ri.clean_lot;
    SELF.Diff_clean_lot_order := le.clean_lot_order <> ri.clean_lot_order;
    SELF.Diff_clean_dbpc := le.clean_dbpc <> ri.clean_dbpc;
    SELF.Diff_clean_chk_digit := le.clean_chk_digit <> ri.clean_chk_digit;
    SELF.Diff_clean_rec_type := le.clean_rec_type <> ri.clean_rec_type;
    SELF.Diff_clean_county := le.clean_county <> ri.clean_county;
    SELF.Diff_clean_geo_lat := le.clean_geo_lat <> ri.clean_geo_lat;
    SELF.Diff_clean_geo_long := le.clean_geo_long <> ri.clean_geo_long;
    SELF.Diff_clean_msa := le.clean_msa <> ri.clean_msa;
    SELF.Diff_clean_geo_blk := le.clean_geo_blk <> ri.clean_geo_blk;
    SELF.Diff_clean_geo_match := le.clean_geo_match <> ri.clean_geo_match;
    SELF.Diff_clean_err_stat := le.clean_err_stat <> ri.clean_err_stat;
    SELF.Diff_process_date := le.process_date <> ri.process_date;
    SELF.Diff_date_first_seen := le.date_first_seen <> ri.date_first_seen;
    SELF.Diff_date_last_seen := le.date_last_seen <> ri.date_last_seen;
    SELF.Diff_date_vendor_first_reported := le.date_vendor_first_reported <> ri.date_vendor_first_reported;
    SELF.Diff_date_vendor_last_reported := le.date_vendor_last_reported <> ri.date_vendor_last_reported;
    SELF.Diff_current_rec_flag := le.current_rec_flag <> ri.current_rec_flag;
    SELF.Val := (SALT30.StrType)evaluate(le,pivot_exp);
    SELF.Num_Diffs := 0+ IF( SELF.Diff_idnum,1,0)+ IF( SELF.Diff_firstname,1,0)+ IF( SELF.Diff_middlename,1,0)+ IF( SELF.Diff_lastname,1,0)+ IF( SELF.Diff_suffix,1,0)+ IF( SELF.Diff_rectype,1,0)+ IF( SELF.Diff_gender,1,0)+ IF( SELF.Diff_dob,1,0)+ IF( SELF.Diff_addrline1,1,0)+ IF( SELF.Diff_streetnum,1,0)+ IF( SELF.Diff_streetpredir,1,0)+ IF( SELF.Diff_streetname,1,0)+ IF( SELF.Diff_streetsuffix,1,0)+ IF( SELF.Diff_streetpostdir,1,0)+ IF( SELF.Diff_apttype,1,0)+ IF( SELF.Diff_aptnum,1,0)+ IF( SELF.Diff_city,1,0)+ IF( SELF.Diff_state,1,0)+ IF( SELF.Diff_zipcode,1,0)+ IF( SELF.Diff_zipplus4,1,0)+ IF( SELF.Diff_dpc,1,0)+ IF( SELF.Diff_z4type,1,0)+ IF( SELF.Diff_crte,1,0)+ IF( SELF.Diff_fipscounty,1,0)+ IF( SELF.Diff_dpv,1,0)+ IF( SELF.Diff_vacantflag,1,0)+ IF( SELF.Diff_phone,1,0)+ IF( SELF.Diff_phone2,1,0)+ IF( SELF.Diff_email,1,0)+ IF( SELF.Diff_url,1,0)+ IF( SELF.Diff_ipaddr,1,0)+ IF( SELF.Diff_wesitetype,1,0)+ IF( SELF.Diff_datefirstseen,1,0)+ IF( SELF.Diff_datelastseen,1,0)+ IF( SELF.Diff_filedate,1,0)+ IF( SELF.Diff_confidencescore,1,0)+ IF( SELF.Diff_occurance,1,0)+ IF( SELF.Diff_persistid,1,0)+ IF( SELF.Diff_emailsuppressioncd,1,0)+ IF( SELF.Diff_age,1,0)+ IF( SELF.Diff_persistent_record_id,1,0)+ IF( SELF.Diff_did,1,0)+ IF( SELF.Diff_did_score,1,0)+ IF( SELF.Diff_clean_title,1,0)+ IF( SELF.Diff_clean_fname,1,0)+ IF( SELF.Diff_clean_mname,1,0)+ IF( SELF.Diff_clean_lname,1,0)+ IF( SELF.Diff_clean_name_suffix,1,0)+ IF( SELF.Diff_clean_name_score,1,0)+ IF( SELF.Diff_rawaid,1,0)+ IF( SELF.Diff_append_prep_address_situs,1,0)+ IF( SELF.Diff_append_prep_address_last_situs,1,0)+ IF( SELF.Diff_clean_prim_range,1,0)+ IF( SELF.Diff_clean_predir,1,0)+ IF( SELF.Diff_clean_prim_name,1,0)+ IF( SELF.Diff_clean_addr_suffix,1,0)+ IF( SELF.Diff_clean_postdir,1,0)+ IF( SELF.Diff_clean_unit_desig,1,0)+ IF( SELF.Diff_clean_sec_range,1,0)+ IF( SELF.Diff_clean_p_city_name,1,0)+ IF( SELF.Diff_clean_v_city_name,1,0)+ IF( SELF.Diff_clean_st,1,0)+ IF( SELF.Diff_clean_zip,1,0)+ IF( SELF.Diff_clean_zip4,1,0)+ IF( SELF.Diff_clean_cart,1,0)+ IF( SELF.Diff_clean_cr_sort_sz,1,0)+ IF( SELF.Diff_clean_lot,1,0)+ IF( SELF.Diff_clean_lot_order,1,0)+ IF( SELF.Diff_clean_dbpc,1,0)+ IF( SELF.Diff_clean_chk_digit,1,0)+ IF( SELF.Diff_clean_rec_type,1,0)+ IF( SELF.Diff_clean_county,1,0)+ IF( SELF.Diff_clean_geo_lat,1,0)+ IF( SELF.Diff_clean_geo_long,1,0)+ IF( SELF.Diff_clean_msa,1,0)+ IF( SELF.Diff_clean_geo_blk,1,0)+ IF( SELF.Diff_clean_geo_match,1,0)+ IF( SELF.Diff_clean_err_stat,1,0)+ IF( SELF.Diff_process_date,1,0)+ IF( SELF.Diff_date_first_seen,1,0)+ IF( SELF.Diff_date_last_seen,1,0)+ IF( SELF.Diff_date_vendor_first_reported,1,0)+ IF( SELF.Diff_date_vendor_last_reported,1,0)+ IF( SELF.Diff_current_rec_flag,1,0);
  END;
// Now need to remove bad pivots from comparison
#uniquename(L)
  %L% := JOIN(in_left,bad_pivots,evaluate(LEFT,pivot_exp)=right.val,transform(left),left only,lookup);
#uniquename(R)
  %R% := JOIN(in_right,bad_pivots,evaluate(LEFT,pivot_exp)=right.val,transform(left),left only,lookup);
#uniquename(DiffL)
  %DiffL% := JOIN(%L%,%R%,evaluate(left,pivot_exp)=evaluate(right,pivot_exp),%fd%(left,right),hash);
#uniquename(Closest)
  %Closest% := DEDUP(SORT(%DiffL%,Val,Num_Diffs,local),Val,local); // Join will have distributed by pivot_exp
#uniquename(AggRec)
  %AggRec% := RECORD
    Count_Diff_idnum := COUNT(GROUP,%Closest%.Diff_idnum);
    Count_Diff_firstname := COUNT(GROUP,%Closest%.Diff_firstname);
    Count_Diff_middlename := COUNT(GROUP,%Closest%.Diff_middlename);
    Count_Diff_lastname := COUNT(GROUP,%Closest%.Diff_lastname);
    Count_Diff_suffix := COUNT(GROUP,%Closest%.Diff_suffix);
    Count_Diff_rectype := COUNT(GROUP,%Closest%.Diff_rectype);
    Count_Diff_gender := COUNT(GROUP,%Closest%.Diff_gender);
    Count_Diff_dob := COUNT(GROUP,%Closest%.Diff_dob);
    Count_Diff_addrline1 := COUNT(GROUP,%Closest%.Diff_addrline1);
    Count_Diff_streetnum := COUNT(GROUP,%Closest%.Diff_streetnum);
    Count_Diff_streetpredir := COUNT(GROUP,%Closest%.Diff_streetpredir);
    Count_Diff_streetname := COUNT(GROUP,%Closest%.Diff_streetname);
    Count_Diff_streetsuffix := COUNT(GROUP,%Closest%.Diff_streetsuffix);
    Count_Diff_streetpostdir := COUNT(GROUP,%Closest%.Diff_streetpostdir);
    Count_Diff_apttype := COUNT(GROUP,%Closest%.Diff_apttype);
    Count_Diff_aptnum := COUNT(GROUP,%Closest%.Diff_aptnum);
    Count_Diff_city := COUNT(GROUP,%Closest%.Diff_city);
    Count_Diff_state := COUNT(GROUP,%Closest%.Diff_state);
    Count_Diff_zipcode := COUNT(GROUP,%Closest%.Diff_zipcode);
    Count_Diff_zipplus4 := COUNT(GROUP,%Closest%.Diff_zipplus4);
    Count_Diff_dpc := COUNT(GROUP,%Closest%.Diff_dpc);
    Count_Diff_z4type := COUNT(GROUP,%Closest%.Diff_z4type);
    Count_Diff_crte := COUNT(GROUP,%Closest%.Diff_crte);
    Count_Diff_fipscounty := COUNT(GROUP,%Closest%.Diff_fipscounty);
    Count_Diff_dpv := COUNT(GROUP,%Closest%.Diff_dpv);
    Count_Diff_vacantflag := COUNT(GROUP,%Closest%.Diff_vacantflag);
    Count_Diff_phone := COUNT(GROUP,%Closest%.Diff_phone);
    Count_Diff_phone2 := COUNT(GROUP,%Closest%.Diff_phone2);
    Count_Diff_email := COUNT(GROUP,%Closest%.Diff_email);
    Count_Diff_url := COUNT(GROUP,%Closest%.Diff_url);
    Count_Diff_ipaddr := COUNT(GROUP,%Closest%.Diff_ipaddr);
    Count_Diff_wesitetype := COUNT(GROUP,%Closest%.Diff_wesitetype);
    Count_Diff_datefirstseen := COUNT(GROUP,%Closest%.Diff_datefirstseen);
    Count_Diff_datelastseen := COUNT(GROUP,%Closest%.Diff_datelastseen);
    Count_Diff_filedate := COUNT(GROUP,%Closest%.Diff_filedate);
    Count_Diff_confidencescore := COUNT(GROUP,%Closest%.Diff_confidencescore);
    Count_Diff_occurance := COUNT(GROUP,%Closest%.Diff_occurance);
    Count_Diff_persistid := COUNT(GROUP,%Closest%.Diff_persistid);
    Count_Diff_emailsuppressioncd := COUNT(GROUP,%Closest%.Diff_emailsuppressioncd);
    Count_Diff_age := COUNT(GROUP,%Closest%.Diff_age);
    Count_Diff_persistent_record_id := COUNT(GROUP,%Closest%.Diff_persistent_record_id);
    Count_Diff_did := COUNT(GROUP,%Closest%.Diff_did);
    Count_Diff_did_score := COUNT(GROUP,%Closest%.Diff_did_score);
    Count_Diff_clean_title := COUNT(GROUP,%Closest%.Diff_clean_title);
    Count_Diff_clean_fname := COUNT(GROUP,%Closest%.Diff_clean_fname);
    Count_Diff_clean_mname := COUNT(GROUP,%Closest%.Diff_clean_mname);
    Count_Diff_clean_lname := COUNT(GROUP,%Closest%.Diff_clean_lname);
    Count_Diff_clean_name_suffix := COUNT(GROUP,%Closest%.Diff_clean_name_suffix);
    Count_Diff_clean_name_score := COUNT(GROUP,%Closest%.Diff_clean_name_score);
    Count_Diff_rawaid := COUNT(GROUP,%Closest%.Diff_rawaid);
    Count_Diff_append_prep_address_situs := COUNT(GROUP,%Closest%.Diff_append_prep_address_situs);
    Count_Diff_append_prep_address_last_situs := COUNT(GROUP,%Closest%.Diff_append_prep_address_last_situs);
    Count_Diff_clean_prim_range := COUNT(GROUP,%Closest%.Diff_clean_prim_range);
    Count_Diff_clean_predir := COUNT(GROUP,%Closest%.Diff_clean_predir);
    Count_Diff_clean_prim_name := COUNT(GROUP,%Closest%.Diff_clean_prim_name);
    Count_Diff_clean_addr_suffix := COUNT(GROUP,%Closest%.Diff_clean_addr_suffix);
    Count_Diff_clean_postdir := COUNT(GROUP,%Closest%.Diff_clean_postdir);
    Count_Diff_clean_unit_desig := COUNT(GROUP,%Closest%.Diff_clean_unit_desig);
    Count_Diff_clean_sec_range := COUNT(GROUP,%Closest%.Diff_clean_sec_range);
    Count_Diff_clean_p_city_name := COUNT(GROUP,%Closest%.Diff_clean_p_city_name);
    Count_Diff_clean_v_city_name := COUNT(GROUP,%Closest%.Diff_clean_v_city_name);
    Count_Diff_clean_st := COUNT(GROUP,%Closest%.Diff_clean_st);
    Count_Diff_clean_zip := COUNT(GROUP,%Closest%.Diff_clean_zip);
    Count_Diff_clean_zip4 := COUNT(GROUP,%Closest%.Diff_clean_zip4);
    Count_Diff_clean_cart := COUNT(GROUP,%Closest%.Diff_clean_cart);
    Count_Diff_clean_cr_sort_sz := COUNT(GROUP,%Closest%.Diff_clean_cr_sort_sz);
    Count_Diff_clean_lot := COUNT(GROUP,%Closest%.Diff_clean_lot);
    Count_Diff_clean_lot_order := COUNT(GROUP,%Closest%.Diff_clean_lot_order);
    Count_Diff_clean_dbpc := COUNT(GROUP,%Closest%.Diff_clean_dbpc);
    Count_Diff_clean_chk_digit := COUNT(GROUP,%Closest%.Diff_clean_chk_digit);
    Count_Diff_clean_rec_type := COUNT(GROUP,%Closest%.Diff_clean_rec_type);
    Count_Diff_clean_county := COUNT(GROUP,%Closest%.Diff_clean_county);
    Count_Diff_clean_geo_lat := COUNT(GROUP,%Closest%.Diff_clean_geo_lat);
    Count_Diff_clean_geo_long := COUNT(GROUP,%Closest%.Diff_clean_geo_long);
    Count_Diff_clean_msa := COUNT(GROUP,%Closest%.Diff_clean_msa);
    Count_Diff_clean_geo_blk := COUNT(GROUP,%Closest%.Diff_clean_geo_blk);
    Count_Diff_clean_geo_match := COUNT(GROUP,%Closest%.Diff_clean_geo_match);
    Count_Diff_clean_err_stat := COUNT(GROUP,%Closest%.Diff_clean_err_stat);
    Count_Diff_process_date := COUNT(GROUP,%Closest%.Diff_process_date);
    Count_Diff_date_first_seen := COUNT(GROUP,%Closest%.Diff_date_first_seen);
    Count_Diff_date_last_seen := COUNT(GROUP,%Closest%.Diff_date_last_seen);
    Count_Diff_date_vendor_first_reported := COUNT(GROUP,%Closest%.Diff_date_vendor_first_reported);
    Count_Diff_date_vendor_last_reported := COUNT(GROUP,%Closest%.Diff_date_vendor_last_reported);
    Count_Diff_current_rec_flag := COUNT(GROUP,%Closest%.Diff_current_rec_flag);
  END;
  out_counts := table(%Closest%,%AggRec%,true);
ENDMACRO;
END;
