IMPORT SALT311;
EXPORT BasicMatch(DATASET(layout_Hdr) ih) := MODULE// An extremely tight pre-match designed to quickly eliminate high volume duplicates

SHARED  h00 := Watchdog_best.Specificities(ih).input_file;
  SHARED s := Specificities(ih).specificities[1];
  SHARED h00_match := h00( 
      0 + IF( (pflag1  IN SET(s.nulls_pflag1,pflag1) OR pflag1 = (TYPEOF(pflag1))''), 0, 44 ) + IF( (pflag2  IN SET(s.nulls_pflag2,pflag2) OR pflag2 = (TYPEOF(pflag2))''), 0, 43 ) + IF( (pflag3  IN SET(s.nulls_pflag3,pflag3) OR pflag3 = (TYPEOF(pflag3))''), 0, 7 ) + IF( (src  IN SET(s.nulls_src,src) OR src = (TYPEOF(src))''), 0, 311 ) + IF( (dt_first_seen  IN SET(s.nulls_dt_first_seen,dt_first_seen) OR dt_first_seen = (TYPEOF(dt_first_seen))''), 0, 61 ) + IF( (dt_last_seen  IN SET(s.nulls_dt_last_seen,dt_last_seen) OR dt_last_seen = (TYPEOF(dt_last_seen))''), 0, 56 ) + IF( (dt_vendor_last_reported  IN SET(s.nulls_dt_vendor_last_reported,dt_vendor_last_reported) OR dt_vendor_last_reported = (TYPEOF(dt_vendor_last_reported))''), 0, 48 ) + IF( (dt_vendor_first_reported  IN SET(s.nulls_dt_vendor_first_reported,dt_vendor_first_reported) OR dt_vendor_first_reported = (TYPEOF(dt_vendor_first_reported))''), 0, 50 ) + IF( (dt_nonglb_last_seen  IN SET(s.nulls_dt_nonglb_last_seen,dt_nonglb_last_seen) OR dt_nonglb_last_seen = (TYPEOF(dt_nonglb_last_seen))''), 0, 64 ) + IF( (rec_type  IN SET(s.nulls_rec_type,rec_type) OR rec_type = (TYPEOF(rec_type))''), 0, 12 ) + IF( (phone  IN SET(s.nulls_phone,phone) OR phone = (TYPEOF(phone))''), 0, 17 ) + IF( (ssn  IN SET(s.nulls_ssn,ssn) OR ssn = (TYPEOF(ssn))''), 0, 17 ) + IF( (dob  IN SET(s.nulls_dob,dob) OR dob = (TYPEOF(dob))''), 0, 13 ) + IF( (title  IN SET(s.nulls_title,title) OR title = (TYPEOF(title))''), 0, 1 ) + IF( (fname  IN SET(s.nulls_fname,fname) OR fname = (TYPEOF(fname))''), 0, 1 ) + IF( (mname  IN SET(s.nulls_mname,mname) OR mname = (TYPEOF(mname))''), 0, 1 ) + IF( (lname  IN SET(s.nulls_lname,lname) OR lname = (TYPEOF(lname))''), 0, 1 ) + IF( (name_suffix  IN SET(s.nulls_name_suffix,name_suffix) OR name_suffix = (TYPEOF(name_suffix))''), 0, 70 ) + IF( (prim_range  IN SET(s.nulls_prim_range,prim_range) OR prim_range = (TYPEOF(prim_range))''), 0, 115 ) + IF( (predir  IN SET(s.nulls_predir,predir) OR predir = (TYPEOF(predir))''), 0, 38 ) + IF( (prim_name  IN SET(s.nulls_prim_name,prim_name) OR prim_name = (TYPEOF(prim_name))''), 0, 131 ) + IF( (suffix  IN SET(s.nulls_suffix,suffix) OR suffix = (TYPEOF(suffix))''), 0, 29 ) + IF( (postdir  IN SET(s.nulls_postdir,postdir) OR postdir = (TYPEOF(postdir))''), 0, 61 ) + IF( (unit_desig  IN SET(s.nulls_unit_desig,unit_desig) OR unit_desig = (TYPEOF(unit_desig))''), 0, 29 ) + IF( (sec_range  IN SET(s.nulls_sec_range,sec_range) OR sec_range = (TYPEOF(sec_range))''), 0, 103 ) + IF( (city_name  IN SET(s.nulls_city_name,city_name) OR city_name = (TYPEOF(city_name))''), 0, 109 ) + IF( (st  IN SET(s.nulls_st,st) OR st = (TYPEOF(st))''), 0, 48 ) + IF( (zip  IN SET(s.nulls_zip,zip) OR zip = (TYPEOF(zip))''), 0, 129 ) + IF( (zip4  IN SET(s.nulls_zip4,zip4) OR zip4 = (TYPEOF(zip4))''), 0, 116 ) + IF( (tnt  IN SET(s.nulls_tnt,tnt) OR tnt = (TYPEOF(tnt))''), 0, 93 ) + IF( (valid_ssn  IN SET(s.nulls_valid_ssn,valid_ssn) OR valid_ssn = (TYPEOF(valid_ssn))''), 0, 21 ) + IF( (jflag1  IN SET(s.nulls_jflag1,jflag1) OR jflag1 = (TYPEOF(jflag1))''), 0, 24 ) + IF( (jflag2  IN SET(s.nulls_jflag2,jflag2) OR jflag2 = (TYPEOF(jflag2))''), 0, 37 ) + IF( (jflag3  IN SET(s.nulls_jflag3,jflag3) OR jflag3 = (TYPEOF(jflag3))''), 0, 25 ) + IF( (rawaid  IN SET(s.nulls_rawaid,rawaid) OR rawaid = (TYPEOF(rawaid))''), 0, 169 ) + IF( (dodgy_tracking  IN SET(s.nulls_dodgy_tracking,dodgy_tracking) OR dodgy_tracking = (TYPEOF(dodgy_tracking))''), 0, 53 ) + IF( (address_ind  IN SET(s.nulls_address_ind,address_ind) OR address_ind = (TYPEOF(address_ind))''), 0, 1 ) + IF( (name_ind  IN SET(s.nulls_name_ind,name_ind) OR name_ind = (TYPEOF(name_ind))''), 0, 1 ) + IF( (persistent_record_id  IN SET(s.nulls_persistent_record_id,persistent_record_id) OR persistent_record_id = (TYPEOF(persistent_record_id))''), 0, 1 ) >= Config.BasicMatchThreshold); // Potentially remove anything that would violate FORCE(+) constraints
  MatchCands := JOIN(h00_match,Specificities(ih).ClusterSizes(InCluster=1),LEFT.did=RIGHT.did,TRANSFORM(LEFT),LOCAL); // Singletons only may match
  Rec := RECORD
    SALT311.UIDType did1;
    SALT311.UIDType did2;
  END;
// It is important that this is an EQUIVALENCE relationship - it allows us to form an implicit transitive closure
  h01 := SORT(h00_match,pflag1,pflag2,pflag3,src,dt_first_seen,dt_last_seen,dt_vendor_last_reported,dt_vendor_first_reported,dt_nonglb_last_seen,rec_type,phone,ssn,dob,title,fname,mname,lname,name_suffix,prim_range,predir,prim_name,suffix,postdir,unit_desig,sec_range,city_name,st,zip,zip4,tnt,valid_ssn,jflag1,jflag2,jflag3,rawaid,dodgy_tracking,address_ind,name_ind,persistent_record_id,did);
  h02 := DEDUP(h01,pflag1,pflag2,pflag3,src,dt_first_seen,dt_last_seen,dt_vendor_last_reported,dt_vendor_first_reported,dt_nonglb_last_seen,rec_type,phone,ssn,dob,title,fname,mname,lname,name_suffix,prim_range,predir,prim_name,suffix,postdir,unit_desig,sec_range,city_name,st,zip,zip4,tnt,valid_ssn,jflag1,jflag2,jflag3,rawaid,dodgy_tracking,address_ind,name_ind,persistent_record_id,LOCAL); // ,LOCAL ok - we don't need a perfect dedup - this is an optimization
  Match := JOIN(h02,MatchCands,LEFT.pflag1 = RIGHT.pflag1 AND LEFT.pflag2 = RIGHT.pflag2 AND LEFT.pflag3 = RIGHT.pflag3 AND LEFT.src = RIGHT.src AND LEFT.dt_first_seen = RIGHT.dt_first_seen
       AND LEFT.dt_last_seen = RIGHT.dt_last_seen AND LEFT.dt_vendor_last_reported = RIGHT.dt_vendor_last_reported AND LEFT.dt_vendor_first_reported = RIGHT.dt_vendor_first_reported AND LEFT.dt_nonglb_last_seen = RIGHT.dt_nonglb_last_seen AND LEFT.rec_type = RIGHT.rec_type
       AND LEFT.phone = RIGHT.phone AND LEFT.ssn = RIGHT.ssn AND LEFT.dob = RIGHT.dob AND LEFT.title = RIGHT.title AND LEFT.fname = RIGHT.fname
       AND LEFT.mname = RIGHT.mname AND LEFT.lname = RIGHT.lname AND LEFT.name_suffix = RIGHT.name_suffix AND LEFT.prim_range = RIGHT.prim_range AND LEFT.predir = RIGHT.predir
       AND LEFT.prim_name = RIGHT.prim_name AND LEFT.suffix = RIGHT.suffix AND LEFT.postdir = RIGHT.postdir AND LEFT.unit_desig = RIGHT.unit_desig AND LEFT.sec_range = RIGHT.sec_range
       AND LEFT.city_name = RIGHT.city_name AND LEFT.st = RIGHT.st AND LEFT.zip = RIGHT.zip AND LEFT.zip4 = RIGHT.zip4 AND LEFT.tnt = RIGHT.tnt
       AND LEFT.valid_ssn = RIGHT.valid_ssn AND LEFT.jflag1 = RIGHT.jflag1 AND LEFT.jflag2 = RIGHT.jflag2 AND LEFT.jflag3 = RIGHT.jflag3 AND LEFT.rawaid = RIGHT.rawaid
       AND LEFT.dodgy_tracking = RIGHT.dodgy_tracking AND LEFT.address_ind = RIGHT.address_ind AND LEFT.name_ind = RIGHT.name_ind AND LEFT.persistent_record_id = RIGHT.persistent_record_id AND LEFT.lastname = RIGHT.lastname
       AND LEFT.ssnum = RIGHT.ssnum AND LEFT.address = RIGHT.address AND LEFT.did < RIGHT.did,TRANSFORM(Rec,SELF.did2 := LEFT.did,SELF.did1 := RIGHT.did), HASH);
SHARED PickOne := DEDUP( SORT( DISTRIBUTE( Match,HASH(did1) ), did1, did2, LOCAL), did1, LOCAL); // Lowest collector ID for each singleton
EXPORT patch_file := PickOne;
  SALT311.utMAC_Patch_Id(h00,did,PickOne,did1,did2,o1); // Patch the input file
EXPORT input_file := o1 : INDEPENDENT;
EXPORT basic_match_count := COUNT(PickOne);
EXPORT id_delta := COUNT(DEDUP(h00,did,ALL))-COUNT(DEDUP(input_file,did,ALL)); // Should equal basic_match_count
END;
