IMPORT ProfileBooster.ProfileBoosterV2_KEL.Entities;
// Public Record NonFCRA Files

USE ProfileBooster.ProfileBoosterV2_KEL.Files.NonFCRA.VehicleV2__Key_Vehicle_Main_Key(FLAT,
   	Vehicle(FILTER((STRING20)vehicle_key <> ''),
   		VehicleKey = vehicle_key,
   		StateOfOrigin = state_origin,
   		OriginalVin = orig_vin,
   		OriginalYearMake = orig_year,
   		OriginalMake = orig_make_code,
   		OriginalMakeDescription = orig_make_desc,
   		OriginalSeries = orig_series_code,
   		OriginalSeriesDescription = orig_series_desc,
   		OriginalModel = orig_model_code,
   		OriginalModelDescription = orig_model_desc,
   		OriginalBody = orig_body_code,
   		OriginalBodyDescription = orig_body_desc,
   		OriginalNetWeight = orig_net_weight,
   		OriginalGrossWeight = orig_gross_weight,
   		OriginalNumberAxles = orig_number_of_axles,
   		OriginalVehicleUse = orig_vehicle_use_code,
   		OriginalVehicleUseDescription = orig_vehicle_use_desc,
   		OriginalVehicleType = orig_vehicle_type_code,
   		OriginalVehicleTypeDescription = orig_vehicle_type_desc,
   		OriginalMajorColor = orig_major_color_code,
   		OriginalMajorColorDescription = orig_major_color_desc,
   		OriginalMinorColor = orig_minor_color_code,
   		OriginalMinorColorDescription = orig_minor_color_desc,
   		VinaVin = vina_vin,
   		VinaVinPattern = vina_vin_pattern_indicator,
   		VinaBypassCode = vina_bypass_code,
   		VinaVehicleType = vina_veh_type,
   		VinaNCICMake = vina_ncic_make,
   		VinaModelYearYY = vina_model_year_yy,
   		VinaRestraint = vina_vp_restraint,
   		VinaMakeName = vina_vp_abbrev_make_name,
   		VinaYear = vina_vp_year,
   		VinaVpSeries = vina_vp_series,
   		VinaVpModel = vina_vp_model,
   		VinaAirConditioning = vina_vp_air_conditioning,
   		VinaPowerSteering = vina_vp_power_steering,
   		VinaPowerBrakes = vina_vp_power_brakes,
   		VinaPowerWindows = vina_vp_power_windows,
   		VinaTiltWheel = vina_vp_tilt_wheel,
   		VinaRoof = vina_vp_roof,
   		VinaOptionalRoof1 = vina_vp_optional_roof1,
   		VinaOptionalRoof2 = vina_vp_optional_roof2,
   		VinaRadio = vina_vp_radio,
   		VinaOptionalRadio1 = vina_vp_optional_radio1,
   		VinaOptionalRadio2 = vina_vp_optional_radio2,
   		VinaTransmission = vina_vp_transmission,
   		VinaOptionalTransmission1 = vina_vp_optional_transmission1,
   		VinaOptionalTransmission2 = vina_vp_optional_transmission2,
   		VinaALB = vina_vp_anti_lock_brakes,
   		VinaFrontWD = vina_vp_front_wheel_drive,
   		VinaFourWD = vina_vp_four_wheel_drive,
   		VinaSecuritySystem = vina_vp_security_system,
   		VinaDRL = vina_vp_daytime_running_lights,
   		VinaSeriesName = vina_vp_series_name,
   		VinaModelYear = vina_model_year,
   		VinaSeries = vina_series,
   		VinaModel = vina_model,
   		VinaBodyStyle = vina_body_style,
   		VinaMakeDescription = vina_make_desc,
   		VinaModelDescription = vina_model_desc,
   		VinaSeriesDescription = vina_series_desc,
   		VinaBodyStyleDescription = vina_body_style_desc,
   		VinaCylinders = vina_number_of_cylinders,
   		VinaEngineSize = vina_engine_size,
   		VinaFuelCode = vina_fuel_code,
   		VinaPrice = vina_price,
   		BestMakeCode = best_make_code,
   		BestSeriesCode = best_series_code,
   		BestModelCode = best_model_code,
   		BestBodyCode = best_body_code,
   		BestModelYear = best_model_year,
   		BestMajorColor = best_major_color_code,
   		BestMinorColor = best_minor_color_code,
   		BrandedTitleFlag = branded_title_flag,
   		BrandCode1 = brand_code_1,
   		BrandDate1 = cleaned_brand_date_1,
   		BrandState1 = brand_state_1,
   		BrandCode2 = brand_code_2,
   		BrandDate2 = cleaned_brand_date_2,
   		BrandSate2 = brand_state_2,
   		BrandCode3 = brand_code_3,
   		BrandDate3 = cleaned_brand_date_3,
   		BrandSate3 = brand_state_3,
   		BrandCode4 = brand_code_4,
   		BrandDate4 = cleaned_brand_date_4,
   		BrandSate4 = brand_state_4,
   		BrandCode5 = brand_code_5,
   		BrandDate5 = cleaned_brand_date_5,
   		BrandSate5 = brand_state_5,
   		TodFlag = tod_flag,
   		ModelClassCode = model_class_code,
   		ModelClass = model_class,
   		MinDoorCount = min_door_count,
   		SafetyType = safety_type,
   		AirbagDriver = airbag_driver,
   		AirbagFrontDriverSide = airbag_front_driver_side,
   		AirbagFrontHeadCurtain = airbag_front_head_curtain,
   		AirbagFrontPassanger = airbag_front_pass,
   		AirbagFrontPassangerSide = airbag_front_pass_side,
   		Airbags = airbags,
		Source = source_code), 
	PERMITS(DPMBitmap));

USE ProfileBooster.ProfileBoosterV2_KEL.Files.NonFCRA.VehicleV2__Key_Vehicle_Party_Key(FLAT,
	Vehicle(FILTER((STRING20)vehicle_key <> ''),
		DateLastSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')src_last_date, // Contains information for ASOF
		DateFirstSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')src_first_date, // Contains information for ASOF
		VehicleKey = vehicle_key,
		StateOfOrigin = state_origin,
		LatestVehicleFlag = latest_vehicle_flag,
		LatestVehicleIterationFlag = latest_vehicle_iteration_flag,
		DateVendorFirstReported = date_vendor_first_reported,
		DateVendorLastReported = date_vendor_last_reported,
		SourceFirstDate = src_first_date,
		SourceLastDate = src_last_date,
		StandardLienholderName = std_lienholder_name,
		Source = source_code),
	PersonVehicle(FILTER((STRING20)vehicle_key <> '' AND (UNSIGNED)append_did != 0),
		DateFirstSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')src_first_date, // Contains information for ASOF
		DateLastSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')src_last_date, // Contains information for ASOF
		Subject = append_did,
		VehicleKey = vehicle_key,
		RegistrationFirstDate = reg_first_date,
		RegistrationEarliestEffectiveDate = reg_earliest_effective_date,
		RegistrationLatestEffectiveDate = reg_latest_effective_date,
		RegistrationLatestExpirationeDate = reg_latest_expiration_date,
		RegistrationRecordCount = reg_rollup_count,
		RegistrationDecalNumber = reg_decal_number,
		RegistratoinDecalYear = reg_decal_year,
		RegistrationStatusCode = reg_status_code,
		RegistrationStatusDescription = reg_status_desc,
		RegistrationTrueLicensePlate = reg_true_license_plate,
		RegistrationLicensePlate = reg_license_plate,
		RegistrationLicenseState = reg_license_state,
		RegistrationLicensePlateTypeCode = reg_license_plate_type_code,
		RegistrationLicensePlateTypeDescription = reg_license_plate_type_desc,
		RegistrationPreviousLicenseState = reg_previous_license_state,
		RegistrationPreviousLicensePlate = reg_previous_license_plate,
		TitleNumber = ttl_number,
		TitleEarliestIssueDate = ttl_earliest_issue_date,
		TitleLatestIssueDate = ttl_latest_issue_date,
		TitlePreviousIssueDate = ttl_previous_issue_date,
		TitleRecordCount = ttl_rollup_count,
		TitleStatusCode = ttl_status_code,
		TitleStatusDescription = ttl_status_desc,
		TitleOdometerMileage = ttl_odometer_mileage,
		TitleOdometerStatusCode = ttl_odometer_status_code,
		TitleOdometerStatusDescription = ttl_odometer_status_desc,
		TitleOdometerDate = ttl_odometer_date,
		SequenceKey = sequence_key,
		History = history,
		HistorySource = TRUE,
		Source = source_code),		
	PERMITS(DPMBitmap));

USE ProfileBooster.ProfileBoosterV2_KEL.Files.NonFCRA.VehicleV2__Key_Vehicle_linkids(FLAT,
	Vehicle(FILTER((STRING20)vehicle_key <> ''),
		DateLastSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')date_last_seen, // Contains information for ASOF
		DateFirstSeen = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')date_first_seen, // Contains information for ASOF
		VehicleKey = vehicle_key,
		StateOfOrigin = state_origin,
		LatestVehicleFlag = latest_vehicle_flag,
		LatestVehicleIterationFlag = latest_vehicle_iteration_flag,
		DateVendorFirstReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')date_vendor_first_reported,
		DateVendorLastReported = FORMAT('YYYYMMDD', 'YYYYMM01', 'YYYY0101')date_vendor_last_reported,
		Source = source_code),
	PERMITS(DPMBitmap));


USE ProfileBooster.ProfileBoosterV2_KEL.Files.NonFCRA.Watchdog__Key_Watchdog(FLAT,
	Person(FILTER((UNSIGNED)did != 0),
		UID=did,
		DateFirstSeen = FORMAT('YYYYMM01')addr_dt_first_seen, // Contains information for ASOF
		DateLastSeen = FORMAT('YYYYMM01')run_date, // Contains information for ASOF
		Title = title,
		FirstName = fname,
		MiddleName = mname,
		LastName = lname,
		NameSuffix = name_suffix,
		DateOfBirth = dob,
		DateOfDeath = dod,
		HeaderHitFlag = TRUE,
		Source = src),
	// PhoneSSN(FILTER((UNSIGNED)phone != 0 AND (UNSIGNED)ssn != 0),
		// PhoneNumber = phone,
		// Social = ssn,
		// DateFirstSeen = FORMAT('YYYYMM01')addr_dt_first_seen, // Contains information for ASOF
		// DateLastSeen = FORMAT('YYYYMM01')run_date, // Contains information for ASOF
		// Source = src),
	// PersonSSN(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)ssn != 0),
		// Subject = did,
		// Social = ssn,
		// DateFirstSeen = FORMAT('YYYYMM01')addr_dt_first_seen, // Contains information for ASOF
		// DateLastSeen = FORMAT('YYYYMM01')run_date, // Contains information for ASOF
		// HeaderHitFlag = TRUE,
		// Source = src),
	// ZipCodePerson(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)did != 0),
		// Subject = did,
		// Zip = zip,
		// PrimaryRange = prim_range,
		// Predirectional = predir,
		// PrimaryName = prim_name,
		// Suffix = suffix,
		// Postdirectional = postdir,
		// ZIP5 = zip,
		// SecondaryRange = sec_range,
		// DateFirstSeen = FORMAT('YYYYMM01')addr_dt_first_seen, // Contains information for ASOF
		// DateLastSeen = FORMAT('YYYYMM01')run_date, // Contains information for ASOF
		// HeaderHitFlag = TRUE,
		// Source = src),
	// PersonPhone(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)phone != 0),
		// Subject = did,
		// PhoneNumber = phone,
		// DateFirstSeen = FORMAT('YYYYMM01')addr_dt_first_seen, // Contains information for ASOF
		// DateLastSeen = FORMAT('YYYYMM01')run_date, // Contains information for ASOF
		// HeaderHitFlag = TRUE,
		// Source = src),
	// AddressPhone(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)phone != 0),
		// PhoneNumber = phone,
		// PrimaryRange = prim_range,
		// Predirectional = predir,
		// PrimaryName = prim_name,
		// Suffix = suffix,
		// Postdirectional = postdir,
		// ZIP5 = zip,
		// SecondaryRange = sec_range,
		// DateFirstSeen = FORMAT('YYYYMM01')addr_dt_first_seen, // Contains information for ASOF
		// DateLastSeen = FORMAT('YYYYMM01')run_date, // Contains information for ASOF
		// Source = src),
	PERMITS(DPMBitmap));
	
	
	USE ProfileBooster.ProfileBoosterV2_KEL.Files.NonFCRA.DunnData_Consumer__Key_Did(FLAT,
	Person(FILTER((UNSIGNED)did != 0),
		UID = did,
		DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
		DateLastSeen = FORMAT('YYYYMM01')dt_last_seen,   // Contains information for ASOF
		PurchProcessDate = process_date,
		PurchHistoryFlag = history_flag,
		PurchNewAmt = cpi_lastdlr,
		PurchTotal = cpi_totdlr,
		PurchCount = cpi_totords,
		PurchNewAgeMonths = lmos,
		PurchOldAgeMonths = omos,
		PurchItemCount = ms_totitems,
		PurchAmtAvg = ms_avgdlrs,
    PurchAge = age,
    PurchDOB = dob,
    PurchMaritalStatus = marital_status,
    PurchGender = gen,
		HeaderHitFlag = TRUE,
		Source = src),
	PERMITS(DPMBitmap));