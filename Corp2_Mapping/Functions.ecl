IMPORT  Address, corp2,_validate,AK_Comm_Fish_Vessels;

EXPORT FUNCTIONs := Module
    EXPORT Decode_Stock(string code) 
	:= case(code,
	        '1'=>'99 SEE CERT',
			'2'=>'COMMON',
			'3'=>'COMMON CLASS A NON VOTING',
			'4'=>'COMMON CLASS A VOTING',
			'5'=>'COMMON CLASS B NON VOTING',
			'6'=>'COMMON CLASS B VOTING',
			'7'=>'COMMON CLASS C',
			'8'=>'COMMON CLASS C VOTING',
			'9'=>'COMMON NON VOTING',
			'10'=>'COMMON VOTING',
			'11'=>'PREFERRED',
			'');
    EXPORT Decode_Bus_type(string code) 
	:= case(code,
	        'AG'=>'AGRICULTURAL COOPERATIVE',
			'CR'=>'CREDIT UNION',
			'MU'=>'MUTUAL BENEFIT',
			'OC'=>'OTHER COOPERATIVE',
			'PB'=>'PUBLIC BENEFIT',
			'RE'=>'RELIGIOUS',
			'SL'=>'SOLE CORPORATION',
			'UN'=>'UNCLASSIFIED',
			'');
	EXPORT Decode_filing_type(string code) 
	:= case(code,
	        'ARTS'=>'ARTICLES OF INCORPORATION',
			'S&DC'=>'STATEMENT & DESIGNATION BY FOREIGN CORPORATION',
			'S&DA'=>'STATEMENT & DESIGNATION BY FOREIGN ASSOCIATION',
			'FNRE'=>'FOREIGN NAME REGISTRATION',
			'');
	EXPORT Decode_Party(string code) 
	:= case(code,				
		    '1000'=>'Assistant Secretary',
			'1001'=>'ASSISTANT TREASURER',
			'1002'=>'TAX RESPONSIBLE PARTY',
			'1007'=>'DIRECTOR ONLY',
			'1021'=>'GENERAL PARTNER',
			'1022'=>'PRESIDENT',
			'1023'=>'SECRETARY',
			'1024'=>'TREASURER',
			'1025'=>'VICE PRESIDENT',
			'1027'=>'OTHER',
			'1030'=>'REGISTERED AGENT WITH POWER OF ATTORNEY',
			'2000'=>'MEMBER NAME',
			'2001'=>'DIRECTOR NAME',
			'2002'=>'INCORPORATOR NAME',
			'2003'=>'PARTNER NAME',
			'2004'=>'MANAGER NAME',
			'2011'=>'OWNER',
			'');
	EXPORT Decode_StatusCA(string code) 
	:= case(code,
	        '1'=>'ACTIVE',
			'2'=>'SUSPENDED',
			'3'=>'CANCELLED',
			'4'=>'SURRENDERED',
			'5'=>'TERM EXPIRED',
			'6'=>'DISSOLVED',
			'7'=>'FORFEITED',
			'8'=>'DELETED',
			'9'=>'INACTIVE',
			'C'=>'MERGED OUT',
			'E'=>'STATE TO FEDERAL BANK CONVERSION',
			'F'=>'CONDITIONALLY DISSOLVED (NO TAX CLEARANCE)',
             '');
    EXPORT Decode_StatusPA(string code) 
	:= case(code,
	        '1'=>'RESERVED NAME',
			'2'=>'ACTIVE-NAME IS AVAILABLE',
			'3'=>'ACTIVE',
			'5'=>'RECEIVED',
			'8'=>'CANCELLED',
			'9'=>'COUNTY ORPHAN',
			'30'=>'REVOKED',
			'31'=>'INACTIVE',
			'32'=>'NAMERESERVATIONEXPIRATION',
			'33'=>'MERGED',
			'34'=>'WITHDRAWN',
			'35'=>'RESERVED NAME (BANK)',
			'36'=>'REJECTED',
			'37'=>'NON QUALIFIED',
			'39'=>'MERGE',
			'40'=>'WITHDRAWN',
			'41'=>'EXPIRED',
			'');
	EXPORT Decode_corpTypePA(string code) 
	:= case(code,
			'73'=>'Business Corporation',
			'86'=>'Name Registration',
			'92'=>'PA Close Corporation',
			'93'=>'PA Cooperative Business Corporation',
			'94'=>'PA Educational Business Corporation',
			'95'=>'PA Insurance Business Corporation',
			'96'=>'PA Management Corp',
			'97'=>'PA Non Stock Corporation',
			'98'=>'PA Miscellaneous Business Corporation',
			'100'=>'PA Non-Profit Cooperative Corporation',
			'101'=>'Business Trust',
			'102'=>'PA Non-Profit Corporation (Financial Institution)',
			'103'=>'Limited Liability Company',
			'104'=>'Professional Limited Liability Company',
			'105'=>'Limited Liability General Partnership',
			'106'=>'Limited Liability Limited Partnership',
			'108'=>'Limited Partnership',
			'109'=>'Professional Corporation',
			'110'=>'PA Professional Corporation (Close)',
			'111'=>'PA Professional Corporation (Cooperative)',
			'112'=>'PA Professional Corporation (Insurance)',
			'113'=>'PA Professional Corporation (Management)',
			'114'=>'PA Professional Corporation (Non-Stock)',
			'115'=>'Non-Profit Corporation (Educational)',
			'116'=>'PA Non-Profit Corporation (Stock)',
			'117'=>'PA Miscellaneous Cooperative Corporation',
			'118'=>'PA Municipal Authority',
			'119'=>'Unincorporated Association',
			'120'=>'Non-Profit (Non Stock)',
			'121'=>'Fictitious Names',
			'122'=>'Old Trademark - DO NOT USE',
			'123'=>'Parking Authority',
			'124'=>'Economic Development Financing Authority ',
			'125'=>'Redevelopment Authority',
			'126'=>'Housing Authority',
			'128'=>'PA Financial Institution',
			'130'=>'Insignia',
			'131'=>'Marked Container',
			'132'=>'Name Reservation',
			'133'=>'Bank Name Reservation',
			'134'=>'County Orphan',
			'137'=>'Not QualIFied in PA',
			'');
	EXPORT Decode_Trans(string code) 
	:= case(code,
	        '1505'=>'1505 AGENT DESIGNATION',
			'1DSS'=>'DISSOLVED (FOR SINGLE DOCUMENT)',
			'AGTR'=>'AGENT RESIGNED',
			'AMDT'=>'CERTIFICATE OF AMENDMENT',
			'ASDA'=>'AMENDED STATEMENT AND DESIGNATION BY FOREIGN ASSOCIATION',
			'ASDC'=>'AMENDED STATEMENT AND DESIGNATION BY FOREIGN CORPORATION',
			'CANC'=>'CANCELLATION',
			'CANN'=>'CANCELLATION NOTICE',
			'CASA'=>'CHANGE OF ADDRESS OF SURRENDERED ASSOCIATION',
			'CASC'=>'CHANGE OF ADDRESS OF SURRENDERED CORPORATION',
			'CONS'=>'CONSOLIDAITON',
			'CONV'=>'CONVERSION',
			'CORR'=>'CERTIFICATE OF CORRECTION',
			'COV1'=>'CONVERSION 1',
			'COV2'=>'CONVERSION 2',
			'DISS'=>'CERTIFICATE OF DISSOLUTION',
			'ELEC'=>'CERTIFICATE OF ELECTION TO DISSOLVE',
			'FTFT'=>'FRANCHISE TAX BOARD FORFEITURE',
			'FTRS'=>'FRANCHISE TAX BOARD RESTORATION',
			'FTRV'=>'FRANCHISE TAX BOARD REVIVER',
			'FTSU'=>'FRANCHISE TAX BOARD SUSPENSION',
			'MERG'=>'MERGER',
			'OWNS'=>'OWNERSHIP',
			'REST'=>'RESTATED ARTICLES',
			'REVO'=>'CERTIFICATE OF REVOCATION OF ELECTION TO DISSOLVE',
			'SLAF'=>'SAVINGS & LOAN CERTIFICATE OF APPROVAL FORFEITED',
			'SOFT'=>'SECRETARY OF STATE FORFEITURE',
			'SORV'=>'SECRETARY OF STATE REVIVER',
			'SOSU'=>'SECRETARY OF STATE SUSPENSION',
			'SURA'=>'CERTIFICATE OF SURRENDER BY FOREIGN ASSOCIATION',
			'SURC'=>'CERTIFICATE OF SURRENDER BY FOREIGN CORPORATION',
			'TREX'=>'TERM EXPIRED',
			'TRMP'=>'TERM PERPETUAL',
			'TXCL'=>'DISSOLVE A CONDITIONALLY DISSOLVED CORPORATION',
			'WRIT'=>'WRIT OF MANDATE',
			'');


	EXPORT reformatDate(STRING inDate) 
	:= FUNCTION
			STRING  clean_inDate := trim(regexreplace('00:00:00',inDate,''),LEFT, RIGHT);
			STRING8 newDate 	 := trim(regexreplace('-',clean_inDate,''),LEFT, RIGHT);	
			RETURN  newDate;	
		END;
		
	EXPORT	reformatDate2(STRING inDate) 
	:= FUNCTION
			clean_inDate         := trim(inDate,all);
			Position1            := StringLib.StringFind(clean_inDate,'/',1);
	        position2            := StringLib.StringFind(clean_inDate,'/',2);
		    STRING8 newDate 	 := clean_inDate[position2+1..position2+4]+IF(position1=2, '0'+ clean_inDate[1],clean_inDate[1..2])+
			                          IF(position2-position1=3,clean_inDate[position1+1..position1+2], '0'+clean_inDate[position1+1..position2]);
			RETURN  newDate;	
			 
		END;		
		
	EXPORT	trimUpper(STRING s) 
	:= FUNCTION
			RETURN trim(STRINGlib.STRINGToUppercase(s),LEFT, RIGHT);
		END;
	
	EXPORT Decode_titleType(string code) 
	:= case(code,
	            'P'=>'PRESIDENT',
				'V'=>'VICE PRESIDENT',
				'S'=>'SECRETARY',
				'T'=>'TREASURER',
				'D'=>'DIRECTOR',
				'M'=>'MEMBER',
				'N'=>'MANAGER',
				'L'=>'SOLE OFFICER',
				'C'=>'CHAIRMAN',
				'H'=>'SHAREHOLDER',
				'E'=>'CHIEF EXECUTIVE OFFICER',
				'@'=>'OFFICER',
				'U'=>'UNKNOWN',
				'I'=>'INCORPORATOR',
				'O'=>'ORGANIZER',
				'G'=>'GENERAL PARTNER',
				'X'=>'ARP SIGNATURE',
				'A'=>'ACCOUNTANT',
				'R'=>'ASSISTANT SECRETARY',
				'B'=>'ASSISTANT TREASURER',
				'F'=>'CFO',
				'Y'=>'CERTIFIED PUBLIC ACCOUNTANT',
				'J'=>'CHIEF OPERATIONS OFFICER',
				'K'=>'CLERK',
				'Q'=>'CHIEF INFORMATION OFFICER',
				'W'=>'EXECUTIVE',
				'Z'=>'GENERAL MANAGER',
				'1'=>'LIMITED PARTNER',
				'2'=>'MANAGING MEMBER',
				'3'=>'MANAGING PARTNER',
				'4'=>'MANAGING AGENT',
				'5'=>'PARTNER',
				'6'=>'NO TITLE',
				'7'=>'INITIAL DIRECTOR',
				'8'=>'REGISTERED AGENT','');

	EXPORT Decode_apptitle(string code) 
			:= case(code,
	            'AGENT'=>'AGENT',
				'ANYTHING'=>'ANYTHING',
				'APPLICANT'=>'APPLICANT',
				'APPLLICANT'=>'APPLLICANT',
				'AS'=>'ASSISTANT SECRETARY',
				'ASISTANT SECRETARY'=>'ASSISTANT SECRETARY',
				'ASS SEC'=>'ASSISTANT SECRETARY',
				'ASS. SEC'=>'ASSISTANT SECRETARY',
				'ASS. SEC.'=>'ASSISTANT SECRETARY',
				'ASS?T SEC?Y'=>'ASSISTANT SECRETARY',
				'ASSIST VICE PRES'=>'ASSISTANT VICE PRESIDENT',
				'ASSIST. SEC'=>'ASSISTANT SECRETARY',
				'ASSIST. SEC.'=>'ASSISTANT SECRETARY',
				'ASSIST. SECRETARY'=>'ASSISTANT SECRETARY',
				'ASSISTANCE VICE-PRES'=>'ASSISTANT VICE PRESIDENT',
				'ASSISTANT CORP SECRETARY'=>'ASSISTANT CORPORATE SECRETARY',
				'ASSISTANT SEC'=>'ASSISTANT SECRETARY',
				'ASSISTANT SEC.'=>'ASSISTANT SECRETARY',
				'ASSISTANT SECRETARY'=>'ASSISTANT SECRETARY',
				'ASSISTANT TREASURER'=>'ASSISTANT TREASURER',
				'ASSISTANT VICE PRESIDENT'=>'ASSISTANT VICE PRESIDENT',
				'ASSISTANT VP'=>'ASSISTANT VICE PRESIDENT',
				'ASSIT SEC'=>'ASSISTANT SECRETARY',
				'ASSIT. SEC'=>'ASSISTANT SECRETARY',
				'ASST SEC'=>'ASSISTANT SECRETARY',
				'ASST SEC?Y'=>'ASSISTANT SECRETARY',
				'ASST SECRETARY'=>'ASSISTANT SECRETARY',
				'ASST SECY'=>'ASSISTANT SECRETARY',
				'ASST VICE PRES'=>'ASSISTANT VICE PRESIDENT',
				'ASST VICE-PRES'=>'ASSISTANT VICE PRESIDENT',
				'ASST VP'=>'ASSISTANT VICE PRESIDENT',
				'ASST V-P'=>'ASSISTANT VICE PRESIDENT',
				'ASST, SEC'=>'ASSISTANT SECRETARY',
				'ASST. DEPUTY ATTORNEY GENERAL'=>'ASSISTANT DEPUTY ATTORNEY GENERAL',
				'ASST. SEC.'=>'ASSISTANT SECRETARY',
				'ASST. SEC./TREAS.'=>'ASSISTANT SECRETARY;TREASURER',
				'ASST. SECRETARY'=>'ASSISTANT SECRETARY',
				'ASST. V.PRES'=>'ASSISTANT VICE PRESIDENT',
				'ASST. VICE PRES.'=>'ASSISTANT VICE PRESIDENT',
				'ASST. VICE PRESIDENT'=>'ASSISTANT VICE PRESIDENT',
				'ASST. VICE-PRES'=>'ASSISTANT VICE PRESIDENT',
				'ASST. VT'=>'ASSISTANT VICE PRESIDENT',
				'ASST.SEC'=>'ASSISTANT SECRETARY',
				'ATTORNEY & AGENT'=>'ATTORNEY;AGENT',
				'ATTORNEY AT LAW'=>'ATTORNEY',
				'ATTORNEY-IN-FACT'=>'ATTORNEY',
				'ATTY'=>'ATTORNEY',
				'ATTY.'=>'ATTORNEY',
				'AUTHORIZED AGENT'=>'AUTHORIZED AGENT ',
				'AUTHORIZED REPRESENTATIVE'=>'AUTHORIZED REPRESENTATIVE',
				'BOARD PRESIDENT'=>'BOARD PRESIDENT',
				'CEO'=>'CHIEF EXECUTIVE OFFICER',
				'CEO & CHAIRMAN'=>'CHIEF EXECUTIVE OFFICER;CHAIRMAN',
				'CEO/FINANCIAL CONSULTANT'=>'CHIEF EXECUTIVE OFFICER;FINANCIAL CONSULTANT',
				'CEO/PRESIDENT'=>'CHIEF EXECUTIVE OFFICER;PRESIDENT',
				'CFO'=>'CHIEF FINANCIAL OFFICER',
				'CFO & TREASURER'=>'CHIEF FINANCIAL OFFICER;TREASURER',
				'CHAIRMAN'=>'CHAIRMAN',
				'CHAIRPERSON, BOARD OF DIRECTORS'=>'CHAIRPERSON;BOARD OF DIRECTORS',
				'CHARIMAN OF THE BOARD'=>'CHAIRMAN OF THE BOARD',
				'CHIEF FINANCIAL OFF'=>'CHIEF FINANCIAL OFFICER',
				'CHIEF FINANCIAL OFFICER'=>'CHIEF FINANCIAL OFFICER',
				'CHIEF FINANCIAL OFFICER, SENIOR VP, TREASURER'=>'CHIEF FINANCIAL OFFICER;SENIOR VICE PRESIDENT',
				'CHIEF MANAGER'=>'CHIEF MANAGER',
				'CHIEF OPERATING OFFICER'=>'CHIEF OPERATING OFFICER',
				'CICE PRESIDENT'=>'VICE PRESIDENT',
				'CLIENT SPECIALIST'=>'CLIENT SPECIALIST',
				'CO/OWNER'=>'CO-OWNER',
				'CO-CHAIRMAN'=>'CO-CHAIRMAN',
				'CO-CHAIRMAN & ASSIST. SEC.'=>'CO-CHAIRMAN;ASSISTANT SECRETARY',
				'CO-CHAIRMAN & SEC.'=>'CO-CHAIRMAN;SECRETARY',
				'CONTROLLER'=>'CONTROLLER',
				'COO'=>'CHIEF OPERATING OFFICER',
				'CO-OWNER'=>'CO-OWNER',
				'CO-PRES'=>'CO-PRESIDENT',
				'CORP SEC'=>'CORPORATE SECRETARY',
				'CORP. SEC.'=>'CORPORATE SECRETARY',
				'CORPORATE SEC.'=>'CORPORATE SECRETARY',
				'CORPORATE SECRETARY'=>'CORPORATE SECRETARY',
				'COUNSEL FOR CORPORATION'=>'COUNSEL FOR CORPORATION',
				'CPA, OWNER'=>'CERTIFIED PUBLIC ACCOUNTANT;OWNER',
				'CRMS PRESIDENT'=>'CRMS PRESIDENT',
				'DIRECTOR'=>'DIRECTOR',
				'DIRECTOR OF OPERATIONS'=>'DIRECTOR OF OPERATIONS',
				'EVP & CAO'=>'EXECUTIVE VICE PRESIDENT;CHIEF ADMINISTRATIVE OFFICER',
				'EXE VP'=>'EXECUTIVE VICE PRESIDENT',
				'EXEC VICE-PRES'=>'EXECUTIVE VICE PRESIDENT',
				'EXEC. VICE-PRES.'=>'EXECUTIVE VICE PRESIDENT',
				'EXECTOR'=>'EXECTOR',
				'EXECUTIVE DIRECTOR'=>'EXECUTIVE DIRECTOR',
				'EXECUTIVE VICE PRES'=>'EXECUTIVE VICE PRESIDENT',
				'EXECUTIVE VICE PRESIDENT'=>'EXECUTIVE VICE PRESIDENT',
				'EXECUTIVE VICE PRESIDENT AND CHIEF FINANCIAL OFFIC'=>'EXECUTIVE VICE PRESIDENT;CHIEF FINANCIAL OFFICER',
				'EXECUTIVE VP'=>'EXECUTIVE VICE PRESIDENT',
				'FINANCIAL OFFICER'=>'FINANCIAL OFFICER',
				'FOUNDER'=>'FOUNDER',
				'GM'=>'GENERAL MANAGER',
				'INCORPORATER'=>'INCORPORATOR',
				'INCORPORATOR'=>'INCORPORATOR',
				'INDIVIDUAL'=>'INDIVIDUAL',
				'INITIAL DIRECTOR'=>'INITIAL DIRECTOR',
				'LEGAL DEPT'=>'LEGAL DEPT',
				'LEGAL DEPT.'=>'LEGAL DEPT',
				'MANAGER'=>'MANAGER',
				'MANAGER/MENBER'=>'MANAGER;MEMBER',
				'MANAGING MEMBER'=>'MANAGING MEMBER',
				'MANAGING PARTNER'=>'MANAGING PARTNER',
				'MEMBER'=>'MEMBER',
				'MEMBER & AGENT'=>'MEMBER;AGENT',
				'MGR.'=>'MANAGER',
				'OFFICER'=>'OFFICER',
				'OP. MNGR.'=>'OPERATING MANAGER',
				'ORGANIZER'=>'ORGANIZER',
				'OWNER'=>'OWNER',
				'OWNER / SENIOR INSPECTOR'=>'OWNER;SR INSPECTOR',
				'OWNER MANAGER'=>'OWNER;MANAGER',
				'OWNER/MANAGER'=>'OWNER;MANAGER',
				'OWNER/MEMBER'=>'OWNER;MEMBER',
				'OWNER/MGR'=>'OWNER;MANAGER',
				'OWNER/OPERATOR'=>'OWNER;OPERATOR',
				'OWNER/PRESIDENT'=>'OWNER;PRESIDENT',
				'OWNERS'=>'OWNER',
				'P'=>'P',
				'PARALEGAL'=>'PARALEGAL',
				'PARTNER'=>'PARTNER',
				'Partner'=>'PARTNER',
				'PASTOR'=>'PASTOR',
				'PASTOR/PRESIDENT'=>'PASTOR;PRESIDENT',
				'PRES'=>'PRESIDENT',
				'PRES & CEO'=>'PRESIDENT;CHIEF EXECUTIVE OFFICER',
				'PRES & SEC'=>'PRESIDENT;SECRETARY',
				'PRES.'=>'PRESIDENT',
				'PRESIDENT'=>'PRESIDENT',
				'President'=>'PRESIDENT',
				'PRESIDENT & CEO'=>'PRESIDENT;CHIEF EXECUTIVE OFFICER',
				'PRESIDENT / CEO'=>'PRESIDENT;CHIEF EXECUTIVE OFFICER',
				'PRESIDENT AND CEO'=>'PRESIDENT;CHIEF EXECUTIVE OFFICER',
				'PRESIDENT CEO'=>'PRESIDENT;CHIEF EXECUTIVE OFFICER',
				'PRESIDENT OF BOARD'=>'PRESIDENT OF BOARD',
				'PRESIDENT/CEO'=>'PRESIDENT;CHIEF EXECUTIVE OFFICER',
				'PRESIDENT/CHAIRMAN'=>'PRESIDENT;CHAIRMAN',
				'PRINCIPAL'=>'PRINCIPAL',
				'PRINCIPAL CFO'=>'PRICIPAL CHIEF FINANCIAL OFFICER',
				'REAL ESTATE AGENT'=>'REAL ESTATE AGENT',
				'REP.'=>'REPRENSENTATIVE',
				'REPRESENTATIVE'=>'REPRESENTATIVE',
				'SALES & USE TAX SENIOR'=>'SALE & USE TAX SENIOR',
				'SALES & USE TAX SR'=>'SALE & USE TAX SENIOR',
				'SEC'=>'SECRETARY',
				'SEC  & TREAS'=>'SECRETARY;TREASURER',
				'SEC & TREASURER'=>'SECRETARY;TREASURER',
				'SEC.'=>'SECRETARY',
				'SEC/RES'=>'SECRETARY;TREASURER',
				'SEC/TREA'=>'SECRETARY;TREASURER',
				'SEC/TREAS'=>'SECRETARY;TREASURER',
				'SEC/TREAS/COO'=>'SECRETARY;TREASURER;CHIEF OPERATING OFFICER',
				'SEC/TREASURER'=>'SECRETARY;TREASURER',
				'SECRECTARY'=>'SECRETARY',
				'SECRERTARY'=>'SECRETARY',
				'SECRETARY'=>'SECRETARY',
				'SECRETARY-TREASURER'=>'SECRETARY;TREASURER',
				'SECRRETARY'=>'SECRETARY',
				'SENIOR VICE PRES'=>'SR VICE PRESIDENT',
				'SENIOR VICE PRESIDENT'=>'SR VICE PRESIDENT',
				'SENIOR VICE-PRES'=>'SR VICE PRESIDENT',
				'SENIOR VP'=>'SR VICE PRESIDENT',
				'SENIOR V-PRES'=>'SR VICE PRESIDENT',
				'SENOIR V.P.'=>'SR VICE PRESIDENT',
				'SOLE INCORPORATOR'=>'SOLE INCORPORATOR',
				'SPEC ASST SEC'=>'SPECIAL ASSISTANT SECRETARY',
				'SPEC. ASST SEC'=>'SPECIAL ASSISTANT SECRETARY',
				'SPECIAL ASS?T. SECRETARY'=>'SPECIAL ASSISTANT SECRETARY',
				'SPECIAL ASST. SECRETARY'=>'SPECIAL ASSISTANT SECRETARY',
				'SR CHAIRMAN'=>'SR CHAIRMAN',
				'SR VICE PRES'=>'SR VICE PRESIDENT',
				'SR VICE PRES & CFO'=>'SR VICE PRESIDENT;CHIEF FINANCIAL OFFICER',
				'SR VICE-PRES'=>'SR VICE PRESIDENT',
				'SR VICE-PRES & SEC'=>'SR VICE PRESIDENT;SECRETARY',
				'SR VP'=>'SR VICE PRESIDENT',
				'SR. VICE PRESIDENT'=>'SR VICE PRESIDENT',
				'SR. VP & GENERAL COUNSEL'=>'SR VICE PRESIDENT;GENERAL COUNSEL',
				'SVP AND CONTROLLER'=>'SR VICE PRESIDENT;CONTROLLER',
				'TAX SENIOR'=>'TAX SENIOR',
				'TREA'=>'TREASURER',
				'TREAS.'=>'TREASURER',
				'TREASURER'=>'TREASURER',
				'TRUSTEE'=>'TRUSTEE',
				'TTORNEY'=>'ATTORNEY',
				'V PRES'=>'VICE PRESIDENT',
				'V PRES, SECR'=>'VICE PRESIDENT;SECRETARY',
				'V PRES, SECRE'=>'VICE PRESIDENT;SECRETARY',
				'V.P. & SEC'=>'VICE PRESIDENT;SECRETARY',
				'VICE'=>'VICE PRESIDENT',
				'VICE CHAIRMAN'=>'VICE CHAIRMAN',
				'VICE PRES'=>'VICE PRESIDENT',
				'VICE PRES & ASST GENERAL COUNSEL'=>'VICE PRESIDENT;ASSISTANT GENERAL COUNSEL',
				'VICE PRES & ASST SEC'=>'VICE PRESIDENT;ASSISTANT SECRETARY',
				'VICE PRES & GEN COUNSEL'=>'VICE PRESIDENT;GENERAL COUNSEL',
				'VICE PRES & SEC'=>'VICE PRESIDENT;ASSISTANT SECRETARY',
				'VICE PRES * CORP SEC'=>'VICE PRESIDENT;CORPORATE SECRETARY',
				'VICE PRES / SEC'=>'VICE PRESIDENT;SECRETARY',
				'VICE PRES.'=>'VICE PRESIDENT',
				'VICE PRES. & SEC'=>'VICE PRESIDENT;ASSISTANT SECRETARY',
				'VICE PRES. OF FIFNANCE'=>'VICE PRESIDENT OF FINANCE',
				'VICE PRESIDENT'=>'VICE PRESIDENT',
				'VICE PRESIDENT & GEN. COUNSEL'=>'VICE PRESIDENT;GENERAL COUNSEL',
				'VICE PRESIDENT & SECRETARY'=>'VICE PRESIDENT;SECRETARY',
				'VICE PRESIDENT ? LEGAL'=>'VICE PRESIDENT OF LEGAL',
				'Vice President and Ass. Sec.'=>'VICE PRESIDENT;ASSISTANT SECRETARY',
				'VICE PRESIDENT LEGAL'=>'VICE PRESIDENT OF LEGAL',
				'VICE PRESIDENT OF FINANCIAL OPERATIONS'=>'VICE PRESIDENT OF FINANCIAL OPERATIONS',
				'VICE PRESIDENT-OPERATIONS'=>'VICE PRESIDENT OF OPERATIONS',
				'VICE-PRES'=>'VICE PRESIDENT',
				'VICE-PRES & TREASURER'=>'VICE PRESIDENT;TREASURER',
				'VICE-PRES.'=>'VICE PRESIDENT',
				'VICE-PRESIDENT'=>'VICE PRESIDENT',
				'VP'=>'VICE PRESIDENT',
				'VP & ASS SECT'=>'VICE PRESIDENT;ASSISTANT SECRETARY',
				'VP & ASSISTANT SECRETARY'=>'VICE PRESIDENT;ASSISTANT SECRETARY',
				'VP & ASST SEC'=>'VICE PRESIDENT;ASSISTANT SECRETARY',
				'VP & CFO'=>'VICE PRESIDENT;CHIEF FINANCIAL OFFICER',
				'VP & GENERAL COUNSEL'=>'VICE PRESIDENT;GENERAL COUNSEL',
				'VP & SEC'=>'VICE PRESIDENT;SECRETARY',
				'VP & SECRETARY'=>'VICE PRESIDENT;SECRETARY',
				'VP & TREASURER'=>'VICE PRESIDENT;TREASURER',
				'VP FINANCE'=>'VICE PRESIDENT OF FINANCE',
				'VP OF FINANCE'=>'VICE PRESIDENT OF FINANCE',
				'VP OF SALES'=>'VICE PRESIDENT OF SALES',
				'VP, ASST, SEC.'=>'VICE PRESIDENT;ASSISTANT SECRETARY',
				'VP, SEC'=>'VICE PRESIDENT;SECRETARY',
				'VP/ASSISTANT SECRETARY'=>'VICE PRESIDENT;ASSISTANT SECRETARY',
				'VP/ASSIT SEC'=>'VICE PRESIDENT;ASSISTANT SECRETARY',
				'VP/CONTROLLER'=>'VICE PRESIDENT;CONTROLLER',
				'VP/FINANCE'=>'VICE PRESIDENT;FINANCE',
				'VP/GEN CSL'=>'VICE PRESIDENT;GENERAL COUNSEL','');

	EXPORT Decode_Corp_STRUCTURE(string3 code) 
	:= case(code,
			    'ASC'=>'ASSUMED NAME CORPORATION',
				'ASP'=>'ASSUMED NAME PARTNERSHIP',
				'BDC'=>'BUSINESS DEVELOPMENT CORPORATION',
				'BTR'=>'BUSINESS TRUST',
				'COP'=>'COOPERATIVE CORPORATION',
				'FCC'=>'FEDERALLY CHARTERED COMPANY',
				'FCO'=>'FOREIGN CORPORATION',
				'FLL'=>'FOREIGN LIMITED LIABILITY PARTNERSHIP',
				'FNL'=>'FOREIGN LIMITED LIABILITY PARTNERSHIP RUPA',
				'FLP'=>'FOREIGN LIMITED PARTNERSHIP',
				'FNP'=>'FOREIGN LIMITED PARTNERSHIP UNDER RULPA',
				'GPA'=>'GENERAL PARTNERSHIP ASSUMED NAME',
				'KNG'=>'GENERAL PARTNERSHIP RUPA',
				'KCO'=>'KENTUCKY CORPORATION',
				'KLL'=>'KENTUCKY LIMITED LIABILITY PARTNERSHIP',
				'KNL'=>'KENTUCKY LIMITED LIABILITY PARTNERSHIP RUPA',
				'KLP'=>'KENTUCKY LIMITED PARTNERSHIP',
				'KNP'=>'KENTUCKY LIMITED PARTNERSHIP UNDER RULPA',
				'KRR'=>'KENTUCKY RETENTION ACT',
				'PSC'=>'PROFESSIONAL SERVICES CORPORATION',
				'REG'=>'NAME REGISTRATION',
				'RES'=>'NAME RESERVATION',
				'KLC'=>'KENTUCKY LIMITED LIABILITY COMPANY',
				'FLC'=>'FOREIGN LIMITED LIABILITY COMPANY',
				'KBT'=>'KENTUCKY BUSINESS TRUST',
				'FBT'=>'FOREIGN BUSINESS TRUST',
				'FNB'=>'FOREIGN NATIONAL BANK',
				'ANN'=>'ASSUMED NAME NATIONAL BANK',
				'FPS'=>'FOREIGN PROFESSIONAL SERVICES CORPORATION',
				'KPS'=>'KENTUCKY PROFESSIONAL SERVICES CORPORATION',
				'KCP'=>'KENTUCKY COOPERATIVE CORPORATION',
				'FCP'=>'FOREIGN COOPERATIVE CORPORATION',
				'NCR'=>'NAME CROSS REFERENCE',
				'ALC'=>'ASSUMED NAME FOR LLC',
				'ALL'=>'ASSUMED NAME FOR LLP',
				'KMI'=>'KENTUCKY MUTUAL INSURANCE COMPANY',
				'FMI'=>'FOREIGN MUTUAL INSURANCE COMPANY',
				'KLA'=>'KENTUCKY LEGISLATIVE ACT',
				'AKL'=>'ASSUMED NAME FOR KLA',
				'LPA'=>'LP FROM ASSUMED NAME',
				'CRU'=>'CREDIT UNION'
				,'');
	EXPORT Decode_county(string2 code) 
	:= case(trim(code,left,right),
					'2'=>'ALPINE',
				'3'=>'AMADOR',
				'4'=>'BUTTE',
				'5'=>'CALAVERAS',
				'6'=>'COLUSA',
				'7'=>'CONTRA COSTA',
				'8'=>'DEL NORTE',
				'9'=>'EL DORADO',
				'10'=>'FRESNO',
				'11'=>'GLEN',
				'12'=>'HUMBOLDT',
				'13'=>'IMPERIAL',
				'14'=>'INYO',
				'15'=>'KERN',
				'16'=>'KINGS',
				'17'=>'LAKE',
				'18'=>'LASSEN',
				'19'=>'LOS ANGELES',
				'20'=>'MADERA',
				'21'=>'MARIN',
				'22'=>'MARIPOSA',
				'23'=>'MENDOCINO',
				'24'=>'MERCED',
				'25'=>'MODOC',
				'26'=>'MONO',
				'27'=>'MONTEREY',
				'28'=>'NAPA',
				'29'=>'NEVADA',
				'30'=>'ORANGE',
				'31'=>'PLACER',
				'32'=>'PLUMAS',
				'33'=>'RIVERSIDE',
				'34'=>'SACRAMENTO',
				'35'=>'SAN BENITO',
				'36'=>'SAN BERNARDINO',
				'37'=>'SAN DIEGO',
				'38'=>'SAN FRANCISCO',
				'39'=>'SAN JOAQUIN',
				'40'=>'SAN LUIS OBISPO',
				'41'=>'SAN MATEO',
				'42'=>'SANTA BARBARA',
				'43'=>'SANTA CLARA',
				'44'=>'SANTA CRUZ',
				'45'=>'SHASTA',
				'46'=>'SIERRA',
				'47'=>'SISKIYOU',
				'48'=>'SOLANO',
				'49'=>'SONOMA',
				'50'=>'STANISLAUS',
				'51'=>'SUTTER',
				'52'=>'TEHAMA',
				'53'=>'TRINITY',
				'54'=>'TULARE',
				'55'=>'TUOLUMNE',
				'56'=>'VENTURA',
				'57'=>'YOLO',
				'58'=>'YUBA',
				'ALL OUT OF STATE');

    EXPORT Decode_state(string2 code) 
	:= case(trim(code,left,right),
			    'AL'=>'ALABAMA',
				'AK'=>'ALASKA',
				'AS'=>'AMERICAN SAMOA',
				'AZ'=>'ARIZONA',
				'AR'=>'ARKANSAS',
				'CA'=>'CALIFORNIA',
				'CO'=>'COLORADO',
				'CT'=>'CONNECTICUT',
				'DE'=>'DELAWARE',
				'DC'=>'DISTRICT OF COLUMBIA',
				'FM'=>'FEDERATED STATES OF MICRONESIA',
				'FL'=>'FLORIDA',
				'GA'=>'GEORGIA',
				'GU'=>'GUAM',
				'HI'=>'HAWAII',
				'ID'=>'IDAHO',
				'IL'=>'ILLINOIS',
				'IN'=>'INDIANA',
				'IA'=>'IOWA',
				'KS'=>'KANSAS',
				'KY'=>'KENTUCKY',
				'LA'=>'LOUISIANA',
				'ME'=>'MAINE',
				'MH'=>'MARSHALL ISLANDS',
				'MD'=>'MARYLAND',
				'MA'=>'MASSACHUSETTS',
				'MI'=>'MICHIGAN',
				'MN'=>'MINNESOTA',
				'MS'=>'MISSISSIPPI',
				'MO'=>'MISSOURI',
				'MT'=>'MONTANA',
				'NE'=>'NEBRASKA',
				'NV'=>'NEVADA',
				'NH'=>'NEW HAMPSHIRE',
				'NJ'=>'NEW JERSEY',
				'NM'=>'NEW MEXICO',
				'NY'=>'NEW YORK',
				'NC'=>'NORTH CAROLINA ',
				'ND'=>'NORTH DAKOTA ',
				'MP'=>'NORTHERN MARIANA ISLANDS ',
				'OH'=>'OHIO ',
				'OK'=>'OKLAHOMA ',
				'OR'=>'OREGON ',
				'PW'=>'PALAU ',
				'PA'=>'PENNSYLVANIA ',
				'PR'=>'PUERTO RICO ',
				'RI'=>'RHODE ISLAND ',
				'SC'=>'SOUTH CAROLINA ',
				'SD'=>'SOUTH DAKOTA ',
				'TN'=>'TENNESSEE ',
				'TX'=>'TEXAS ',
				'UT'=>'UTAH ',
				'VT'=>'VERMONT ',
				'VI'=>'VIRGIN ISLANDS ',
				'VA'=>'VIRGINIA ',
				'WA'=>'WASHINGTON ',
				'WV'=>'WEST VIRGINIA ',
				'WI'=>'WISCONSIN ',
				'WY'=>'WYOMING ',
				'AE'=>'ARMED FORCES EUROPE, THE MIDDLE EAST AND CANADA',
				'AP'=>'ARMED FORCES PACIFIC ',
				'AA'=>'ARMED FORCES AMERICAS EXCEPT CANADA','');
				
	EXPORT Decode_country(string code) 
	:= case(trim(code,left,right),
			    'AD'=>'ARUBA',
				'AL'=>'AL',
				'AU'=>'AUSTRALIA',
				'AUSTRALIA'=>'AUSTRALIA',
				'BAHAMA ISLAND'=>'BAHAMAS',
				'BAHAMA ISLANDS'=>'BAHAMAS',
				'BARBADOS'=>'BARBADOS',
				'BC'=>'BRITISH COLUMBIA, CANADA',
				'BELGIUM'=>'BELGUID',
				'BI'=>'BAHAMAS',
				'BRITISH COLUMBI'=>'BRIGISH COLUMBIA, CANADA',
				'BRITISH VIRGIN'=>'BRITISH VIRGIN ISLANDS',
				'BV'=>'BRITISH VIRGIN ISLANDS',
				'BVI'=>'BRITISH VIRGIN ISLANDS',
				'CAN'=>'CANADA',
				'CANADA'=>'CANADA',
				'CANDA'=>'CANADA',
				'CHINA'=>'CHINA',
				'GUERNSEY'=>'BAILIWICK OF GUERNSEY', 
				'DE'=>'DE',
				'EC'=>'ECUADOR',
				'EN'=>'ENGLAND',
				'ENGLAND'=>'ENGLAND',
				'FA'=>'FA',
				'FC'=>'FEDERATED CHARTERED',
				'FE'=>'FEDERATED CHARTERED',
				'FED. CHARTERED'=>'FEDERATED CHARTERED',
				'FL'=>'FL',
				'FR'=>'FRANCE',
				'GE'=>'GERMANY',
				'GERMANY'=>'GERMANY',
				'GREAT BRITAIN'=>'GREAT BRITAIN',
				'GUERNSEY'=>'GUERNSEY',
				'HK'=>'HONG KONG',
				'HONG KONG'=>'HONG KONG',
				'II'=>'INDIA',
				'IN'=>'IN',
				'INDIA'=>'INDIA',
				'IRELAND'=>'IRELAND',
				'IT'=>'ITALY',
				'JA'=>'JAPAN',
				'JAPAN'=>'JAPAN',
				'KO'=>'KOREA',
				'KOREA'=>'KOREA',
				'LB'=>'LUXEMBOURG',
				'LI'=>'LIECHTENSTEIN',
				'LU'=>'LUXEMBOURG',
				'LUXEMBOURG'=>'LUXEMBOURG',
				'REPUBLIC OF KOREA'=>'REPUBLIC OF KOREA',
				'MEXICO'=>'MEXICO',
				'MV'=>'MV',
				'NA'=>'NETHERLANDS ANTILLES',
				'NC'=>'CANADA',
				'NB'=>'NB',
				'NETH. ANTILLES'=>'NETHERLANDS ANTILLES',
				'NETHERLANDS'=>'NETHERLANDS',
				'NO'=>'NO',
				'NOVA SCOTIA'=>'NOVA SCOTIA, CANADA',
				'OH'=>'OH',
				'ON'=>'ONTARIO, CANADA',
				'ONTARIO'=>'ONTARIO, CANADA',
				'PARAGUAY'=>'PARAGUAY',
				'PG'=>'PARAGUAY',
				'QUEBEC'=>'QUEBEC, CANADA',
				'RN'=>'RN',
				'RP'=>'PANAMA',
				'SL'=>'SCOTLAND',
				'SW'=>'SWITZERLAND',
				'SWITZERLAND'=>'SWITZERLAND',
				'TAIWAN'=>'TAIWAN',
				'TC'=>'TURKS AND CAICOS ISLANDS',
				'TL'=>'TL',
				'UK'=>'UNITED KINGDON',
				'UNITED STATES'=>'',
				'UR'=>'URAGUAY',
				'US'=>'',
				'USA'=>'',
				'VI'=>'VIRGIN ISLANDS',
				'VIRGIN ISLANDS'=>'VIRGIN ISLANDS',
				'WEST INDIA'=>'WEST INDIA',
				'WEST INDIES'=>'WEST INDIES',
				'WG'=>'GERMANY',
				'WN'=>'BRITISH WEST INDIES','');
				
EXPORT decode_cd(string CODE ) 
	:= case(trim(code,left,right),
	            'ALABAMA'=>'AL',
				'ALASKA'=>'AK',
				'AMERICAN SAMOA'=>'AS',
				'ARIZONA'=>'AZ',
				'ARKANSAS'=>'AR',
				'CALIFORNIA'=>'CA',
				'COLORADO'=>'CO',
				'CONNECTICUT'=>'CT',
				'DELAWARE'=>'DE',
				'DISTRICT OF COLUMBIA'=>'DC',
				'FEDERATED STATES OF MICRONESIA'=>'FM',
				'FLORIDA'=>'FL',
				'GEORGIA'=>'GA',
				'GUAM'=>'GU',
				'HAWAII'=>'HI',
				'IDAHO'=>'ID',
				'ILLINOIS'=>'IL',
				'INDIANA'=>'IN',
				'IOWA'=>'IA',
				'KANSAS'=>'KS',
				'KENTUCKY'=>'KY',
				'LOUISIANA'=>'LA',
				'MAINE'=>'ME',
				'MARSHALL ISLANDS'=>'MH',
				'MARYLAND'=>'MD',
				'MASSACHUSETTS'=>'MA',
				'MICHIGAN'=>'MI',
				'MINNESOTA'=>'MN',
				'MISSISSIPPI'=>'MS',
				'MISSOURI'=>'MO',
				'MONTANA'=>'MT',
				'NEBRASKA'=>'NE',
				'NEVADA'=>'NV',
				'NEW HAMPSHIRE'=>'NH',
				'NEW JERSEY'=>'NJ',
				'NEW MEXICO'=>'NM',
				'REPUBLIC OF KOREA'=>'KO',
				'NEW YORK'=>'NY',
				'NORTH CAROLINA'=>'NC',
				'NORTH DAKOTA'=>'ND',
				'NORTHERN MARIANA ISLANDS'=>'MP',
				'OHIO'=>'OH',
				'OKLAHOMA'=>'OK',
				'OREGON'=>'OR',
				'PALAU'=>'PW',
				'PENNSYLVANIA'=>'PA',
				'PUERTO RICO'=>'PR',
				'RHODE ISLAND'=>'RI',
				'SOUTH CAROLINA'=>'SC',
				'SOUTH DAKOTA'=>'SD',
				'TENNESSEE'=>'TN',
				'TEXAS'=>'TX',
				'UTAH'=>'UT',
				'VERMONT'=>'VT',
				'VIRGIN ISLANDS'=>'VI',
				'VIRGINIA'=>'VA',
				'WASHINGTON'=>'WA',
				'WEST VIRGINIA'=>'WV',
				'WISCONSIN'=>'WI',
				'WYOMING'=>'WY',
				'ARMED FORCES EUROPE, THE MIDDLE EAST AND CANADA'=>'AE',
				'ARMED FORCES PACIFIC'=>'AP',
				'ARMED FORCES AMERICAS EXCEPT CANADA'=>'AA',
			    'ARUBA'=>'AD',
				'AUSTRALIA'=>'AU',
				'BRITISH COLUMBIA'=>'BC',
				'BELGUID'=>'BELGIUM',
				'BAHAMAS'=>'BI',
				'ECUADOR'=>'EC',
				'ENGLAND'=>'EN',
				'FEDERATED CHARTERED'=>'FC',
				'FRANCE'=>'FR',
				'GERMANY'=>'GE',
				'GUERNSEY'=>'GG',
				'ONTARIO, CANADA'=>'ON',
				'HONG KONG'=>'HK',
				'INDIA'=>'IN',
				'ITALY'=>'IT',
				'JAPAN'=>'JA',
				'KOREA'=>'KO',
				'LUXEMBOURG'=>'LB',
				'LIECHTENSTEIN'=>'LI',
				'LUXEMBOURG'=>'LU',
				'NETHERLANDS ANTILLES'=>'NA',
				'CANADA'=>'NC',
				'PARAGUAY'=>'PG',
				'PANAMA'=>'RP',
				'SCOTLAND'=>'SL',
				'SWITZERLAND'=>'SW',
				'TURKS AND CAICOS ISLANDS'=>'TC',
				'UNITED KINGDON'=>'UK',
				'UNITED STATES'=>'',
				'URAGUAY'=>'UR',
				'US'=>'',
				'USA'=>'',
				'VIRGIN ISLANDS'=>'VI',
				'GERMANY'=>'WG',
				'BRITISH WEST INDIES'=>'WN',
				'BRITISH COLUMBIA'=>'BC',
				'AL'=>'AL',
				'AK'=>'AK',
				'AS'=>'AS',
				'AZ'=>'AZ',
				'AR'=>'AR',
				'CA'=>'CA',
				'CO'=>'CO',
				'CT'=>'CT',
				'DE'=>'DE',
				'DC'=>'DC',
				'FM'=>'FM',
				'FL'=>'FL',
				'GA'=>'GA',
				'GU'=>'GU',
				'HI'=>'HI',
				'ID'=>'ID',
				'IL'=>'IL',
				'IN'=>'IN',
				'IA'=>'IA',
				'KS'=>'KS',
				'KY'=>'KY',
				'LA'=>'LA',
				'ME'=>'ME',
				'MH'=>'MH',
				'MD'=>'MD',
				'MA'=>'MA',
				'MI'=>'MI',
				'MN'=>'MN',
				'MS'=>'MS',
				'MO'=>'MO',
				'MT'=>'MT',
				'NE'=>'NE',
				'NV'=>'NV',
				'NH'=>'NH',
				'NJ'=>'NJ',
				'NM'=>'NM',
				'NY'=>'NY',
				'NC'=>'NC',
				'ND'=>'ND',
				'MP'=>'MP',
				'OH'=>'OH',
				'OK'=>'OK',
				'OR'=>'OR',
				'PW'=>'PW',
				'PA'=>'PA',
				'PR'=>'PR',
				'RI'=>'RI',
				'SC'=>'SC',
				'SD'=>'SD',
				'TN'=>'TN',
				'TX'=>'TX',
				'UT'=>'UT',
				'VT'=>'VT',
				'VI'=>'VI',
				'VA'=>'VA',
				'WA'=>'WA',
				'WV'=>'WV',
				'WI'=>'WI',
				'WY'=>'WY',
				'AE'=>'AE',
				'AP'=>'AP',
				'AA'=>'AA',
			    'AD'=>'AD',
				'AL'=>'AL',
				'AU'=>'AU',
				'BC'=>'BC',
				'BI'=>'BI',
				'BV'=>'BV',
				'DE'=>'DE',
				'EC'=>'EC',
				'EN'=>'EN',
				'FA'=>'FA',
				'FC'=>'FC',
				'FL'=>'FL',
				'FR'=>'FR',
				'GE'=>'GE',
				'HK'=>'HK',
				'IN'=>'IN',
				'IT'=>'IT',
				'JA'=>'JA',
				'KO'=>'KO',
				'LB'=>'LB',
				'LI'=>'LI',
				'LU'=>'LU',
				'MV'=>'MV',
				'NA'=>'NA',
				'NC'=>'NC',
				'NB'=>'NB',
				'NO'=>'NO',
				'OH'=>'OH',
				'ON'=>'ON',
				'PG'=>'PG',
				'RN'=>'RN',
				'RP'=>'RP',
				'SL'=>'SL',
				'SW'=>'SW',
				'TC'=>'TC',
				'TL'=>'TL',
				'UK'=>'UK',
				'UR'=>'UR',
				'VI'=>'VI',
				'WG'=>'WG',
				'WN'=>'WN','');
	
	EXPORT decode_desc(string CODE ) 
	:= case(trim(code,left,right),
			    'AL'=>'ALABAMA',
				'AK'=>'ALASKA',
				'AS'=>'AMERICAN SAMOA',
				'AZ'=>'ARIZONA',
				'AR'=>'ARKANSAS',
				'CA'=>'CALIFORNIA',
				'CO'=>'COLORADO',
				'CT'=>'CONNECTICUT',
				'DE'=>'DELAWARE',
				'DC'=>'DISTRICT OF COLUMBIA',
				'FM'=>'FEDERATED STATES OF MICRONESIA',
				'FL'=>'FLORIDA',
				'GA'=>'GEORGIA',
				'GU'=>'GUAM',
				'GG'=>'GUERNSEY',
				'HI'=>'HAWAII',
				'ID'=>'IDAHO',
				'IL'=>'ILLINOIS',
				'IN'=>'INDIANA',
				'IA'=>'IOWA',
				'KS'=>'KANSAS',
				'KY'=>'KENTUCKY',
				'LA'=>'LOUISIANA',
				'ME'=>'MAINE',
				'MH'=>'MARSHALL ISLANDS',
				'MD'=>'MARYLAND',
				'MA'=>'MASSACHUSETTS',
				'MI'=>'MICHIGAN',
				'MN'=>'MINNESOTA',
				'MS'=>'MISSISSIPPI',
				'MO'=>'MISSOURI',
				'MT'=>'MONTANA',
				'NE'=>'NEBRASKA',
				'NV'=>'NEVADA',
				'NH'=>'NEW HAMPSHIRE',
				'NJ'=>'NEW JERSEY',
				'NM'=>'NEW MEXICO',
				'NY'=>'NEW YORK',
				'NC'=>'NORTH CAROLINA ',
				'ND'=>'NORTH DAKOTA ',
				'MP'=>'NORTHERN MARIANA ISLANDS ',
				'OH'=>'OHIO ',
				'OK'=>'OKLAHOMA ',
				'OR'=>'OREGON ',
				'PW'=>'PALAU ',
				'PA'=>'PENNSYLVANIA ',
				'PR'=>'PUERTO RICO ',
				'RI'=>'RHODE ISLAND ',
				'SC'=>'SOUTH CAROLINA ',
				'SD'=>'SOUTH DAKOTA ',
				'TN'=>'TENNESSEE ',
				'TX'=>'TEXAS ',
				'UT'=>'UTAH ',
				'VT'=>'VERMONT ',
				'VI'=>'VIRGIN ISLANDS ',
				'VA'=>'VIRGINIA ',
				'WA'=>'WASHINGTON ',
				'WV'=>'WEST VIRGINIA ',
				'WI'=>'WISCONSIN ',
				'WY'=>'WYOMING ',
				'AE'=>'ARMED FORCES EUROPE, THE MIDDLE EAST AND CANADA',
				'AP'=>'ARMED FORCES PACIFIC ',
				'AA'=>'ARMED FORCES AMERICAS EXCEPT CANADA',
				'KO'=>'REPUBLIC OF KOREA',
			    'AD'=>'ARUBA',
				'AL'=>'AL',
				'AU'=>'AUSTRALIA',
				'BC'=>'BRITISH COLUMBIA, CANADA',
				'BI'=>'BAHAMAS',
				'BV'=>'BRITISH VIRGIN ISLANDS',
				'DE'=>'DE',
				'EC'=>'ECUADOR',
				'EN'=>'ENGLAND',
				'FA'=>'FA',
				'FC'=>'FEDERATED CHARTERED',
				'FE'=>'FEDERATED CHARTERED',
				'FR'=>'FRANCE',
				'GE'=>'GERMANY',
				'HK'=>'HONG KONG',
				'II'=>'INDIA',
				'IN'=>'IN',
				'IT'=>'ITALY',
				'JA'=>'JAPAN',
				'KO'=>'KOREA',
				'LB'=>'LUXEMBOURG',
				'LI'=>'LIECHTENSTEIN',
				'LU'=>'LUXEMBOURG',
				'MV'=>'MV',
				'NA'=>'NETHERLANDS ANTILLES',
				'NC'=>'CANADA',
				'NB'=>'NB',
				'NO'=>'NO',
				'ON'=>'ONTARIO, CANADA',
				'PG'=>'PARAGUAY',
				'RN'=>'RN',
				'RP'=>'PANAMA',
				'SL'=>'SCOTLAND',
				'SW'=>'SWITZERLAND',
				'TC'=>'TURKS AND CAICOS ISLANDS',
				'TL'=>'TL',
				'UK'=>'UNITED KINGDON',
				'UNITED STATES'=>'',
				'UR'=>'URAGUAY',
				'VI'=>'VIRGIN ISLANDS',
				'WG'=>'GERMANY',
				'WN'=>'BRITISH WEST INDIES','');
	
	
	
    		
	EXPORT  CleanCorp(dataset(Corp2.Layout_Corporate_Direct_Corp_in) inputFile)
	:= FUNCTION
     //output file
	corp2.Layout_Corporate_Direct_Corp_in CleanCorpAddrName(corp2.Layout_Corporate_Direct_Corp_in Input) 
	:= TRANSFORM		
			
			pname			    := IF((integer)Address.CleanPersonFML73(input.corp_ra_name)[71..73]>87, Address.CleanPersonFML73(input.corp_ra_name),Address.CleanPersonLFM73(input.corp_ra_name));
			cname 						:= IF(AK_Comm_Fish_Vessels.fIsCompany(input.corp_ra_name) and ~Regexfind('FISH', pname),trimUpper(input.corp_ra_name),'');
			
			address1 	:= Address.CleanAddress182(input.corp_address1_line1+
																regexreplace('[ ]+',input.corp_address1_line2 +' '
																+input.corp_address1_line3+ ' '
																+input.corp_address1_line4,' '),input.corp_address1_line5);	
			ra_address 	:= Address.CleanAddress182(input.corp_ra_address_line1+
																regexreplace('[ ]+',input.corp_ra_address_line2+ ' '
																   +input.corp_ra_address_line3 + ' ' 
																   +input.corp_ra_address_line4,' '),input.corp_ra_address_line5);
		    
			clean_ra_address            := IF(ra_address[179..182]='E420',Address.CleanAddress182(regexreplace('[ ]+',input.corp_ra_address_line2+ ' '
															   +input.corp_ra_address_line3 + ' '+input.corp_ra_address_line4,' '),input.corp_ra_address_line5), ra_address);
			clean_address               := IF(Address1[179..182]='E420',Address.CleanAddress182(regexreplace('[ ]+',input.corp_address1_line2 +' '
			  												   +input.corp_address1_line3+ ' '+input.corp_address1_line4,' '),input.corp_address1_line5), address1);
	
			SELF.corp_ra_cname1 		:= IF((integer)pname[71..73]>85  ,'',
										     IF(regexfind('[0~9]|[a-z]|[A-Z]',cname),cname,
										     IF(Cname='',trimUpper(input.corp_ra_name),'')));
			SELF.corp_ra_cname1_score 	:= IF(SELF.corp_ra_cname1='','',pName[71..73]);
			SELF.corp_ra_title1		    := IF(SELF.corp_ra_cname1='', pname[1..5], '');
			SELF.corp_ra_fname1 		:= IF(SELF.corp_ra_cname1='', pname[6..25], '');
			SELF.corp_ra_mname1 		:= IF(SELF.corp_ra_cname1='', pname[26..45], '');
			SELF.corp_ra_lname1 		:= IF(SELF.corp_ra_cname1='', pname[46..65], '');
			SELF.corp_ra_name_suffix1 	:= IF(SELF.corp_ra_cname1='', pname[66..70], '');
			SELF.corp_ra_score1 		:= IF(SELF.corp_ra_cname1='', pname[71..73], '');
			SELF.CORP_RA_RESIGN_DATE    := IF(_validate.date.fIsValid(input.CORP_RA_RESIGN_DATE),input.CORP_RA_RESIGN_DATE,'');
			SELF.corp_inc_date          := IF(_validate.date.fIsValid(input.corp_inc_date),input.corp_inc_date,'');
			SELF.corp_forgn_date 		:= IF(_validate.date.fIsValid(input.corp_forgn_date),input.corp_forgn_date,'');
			SELF.CORP_TERM_EXIST_EXP    := IF(_validate.date.fIsValid(input.CORP_TERM_EXIST_EXP),input.CORP_TERM_EXIST_EXP,'');
			SELF.CORP_forgn_TERM_EXIST_EXP := IF(_validate.date.fIsValid(input.CORP_forgn_TERM_EXIST_EXP),input.CORP_forgn_TERM_EXIST_EXP,'');
			SELF.CORP_TERM_EXIST_CD     :=IF(SELF.CORP_TERM_EXIST_EXP<>'',input.CORP_TERM_EXIST_CD,'');
		    SELF.CORP_TERM_EXIST_DESC   :=IF(SELF.CORP_TERM_EXIST_EXP<>'',input.CORP_TERM_EXIST_DESC,'');
            SELF.CORP_forgn_TERM_EXIST_CD:=IF(SELF.CORP_forgn_TERM_EXIST_EXP<>'',input.CORP_forgn_TERM_EXIST_CD,'');
			SELF.CORP_forgn_TERM_EXIST_desc:=IF(SELF.CORP_forgn_TERM_EXIST_EXP<>'',input.CORP_forgn_TERM_EXIST_DESC,'');
			SELF.corp_ra_prim_range    	:= clean_ra_address[1..10];
			SELF.corp_ra_predir 	    := clean_ra_address[11..12];
			SELF.corp_ra_prim_name 	  	:= clean_ra_address[13..40];
			SELF.corp_ra_addr_suffix   	:= clean_ra_address[41..44];
			SELF.corp_ra_postdir 	    := clean_ra_address[45..46];
			SELF.corp_ra_unit_desig 	:= clean_ra_address[47..56];
			SELF.corp_ra_sec_range 	  	:= clean_ra_address[57..64];
			SELF.corp_ra_p_city_name	:= clean_ra_address[65..89];
			SELF.corp_ra_v_city_name	:= clean_ra_address[90..114];
			SELF.corp_ra_state		    := clean_ra_address[115..116];
			SELF.corp_ra_zip5 		    := clean_ra_address[117..121];
			SELF.corp_ra_zip4 		    := clean_ra_address[122..125];
			SELF.corp_ra_cart 		    := clean_ra_address[126..129];
			SELF.corp_ra_cr_sort_sz 	:= clean_ra_address[130];
			SELF.corp_ra_lot 		    := clean_ra_address[131..134];
			SELF.corp_ra_lot_order 	  	:= clean_ra_address[135];
			SELF.corp_ra_dpbc 		    := clean_ra_address[136..137];
			SELF.corp_ra_chk_digit 	  	:= clean_ra_address[138];
			SELF.corp_ra_rec_type		:= clean_ra_address[139..140];
			SELF.corp_ra_ace_fips_st	:= clean_ra_address[141..142];
			SELF.corp_ra_county 	  	:= clean_ra_address[143..145];
			SELF.corp_ra_geo_lat 	    := clean_ra_address[146..155];
			SELF.corp_ra_geo_long 	    := clean_ra_address[156..166];
			SELF.corp_ra_msa 		    := clean_ra_address[167..170];
			SELF.corp_ra_geo_blk		:= clean_ra_address[171..177];
			SELF.corp_ra_geo_match 	  	:= clean_ra_address[178];
			SELF.corp_ra_err_stat 	    := clean_ra_address[179..182];													
			SELF.corp_addr1_prim_range  := clean_address[1..10];
			SELF.corp_addr1_predir 	    := clean_address[11..12];
			SELF.corp_addr1_prim_name 	:= clean_address[13..40];
			SELF.corp_addr1_addr_suffix := clean_address[41..44];
			SELF.corp_addr1_postdir 	:= clean_address[45..46];
			SELF.corp_addr1_unit_desig 	:= clean_address[47..56];
			SELF.corp_addr1_sec_range 	:= clean_address[57..64];
			SELF.corp_addr1_p_city_name	:= clean_address[65..89];
			SELF.corp_addr1_v_city_name	:= clean_address[90..114];
			SELF.corp_addr1_state 		:= clean_address[115..116];
			SELF.corp_addr1_zip5 		:= clean_address[117..121];
			SELF.corp_addr1_zip4 		:= clean_address[122..125];
			SELF.corp_addr1_cart 		:= clean_address[126..129];
			SELF.corp_addr1_cr_sort_sz 	:= clean_address[130];
			SELF.corp_addr1_lot 		:= clean_address[131..134];
			SELF.corp_addr1_lot_order 	:= clean_address[135];
			SELF.corp_addr1_dpbc 		:= clean_address[136..137];
			SELF.corp_addr1_chk_digit 	:= clean_address[138];
			SELF.corp_addr1_rec_type	:= clean_address[139..140];
			SELF.corp_addr1_ace_fips_st	:= clean_address[141..142];
			SELF.corp_addr1_county 	  	:= clean_address[143..145];
			SELF.corp_addr1_geo_lat 	:= clean_address[146..155];
			SELF.corp_addr1_geo_long 	:= clean_address[156..166];
			SELF.corp_addr1_msa 		:= clean_address[167..170];
			SELF.corp_addr1_geo_blk		:= clean_address[171..177];
			SELF.corp_addr1_geo_match 	:= clean_address[178];
			SELF.corp_addr1_err_stat 	:= clean_address[179..182]; 
			SELF 						:= Input;
			SELF						:= [];
		END;
	dFILE:=PROJECT(Inputfile,CleanCorpAddrName(left));
	return dFile;
	END;

    EXPORT  CleanCont(dataset(Corp2.Layout_Corporate_Direct_Cont_IN) inputFile)
	:= FUNCTION
	Corp2.Layout_Corporate_Direct_Cont_In CleanContAddrName(Corp2.Layout_Corporate_Direct_Cont_In input) 
	:= transform		
			string73 pname			:= IF((integer)Address.CleanPersonFML73(input.cont_name)[71..73]>84, Address.CleanPersonFML73(input.cont_name),Address.CleanPersonLFM73(input.cont_name));
			 cname 					:= IF(AK_Comm_Fish_Vessels.fIsCompany(input.cont_name) and ~Regexfind('FISH', pname),trimUpper(input.cont_name),'');
			string182 clean_address := Address.CleanAddress182(input.cont_address_line1+
																input.cont_address_line2 +' '
																+input.cont_address_line3+ ' '
																+input.cont_address_line4,input.cont_address_line5);
																
																
			SELF.cont_cname1 		:= IF((integer)pname[71..73]>84  ,'',
										  IF(regexfind('[0~9]|[a-z]|[A-Z]',cname),cname,
										  IF(Cname='',trimUpper(input.cont_name),'')));
			SELF.CONT_TYPE_CD		:= 'F';
			SELF.CONT_TYPE_DESC		:= 'OFFICER';	
			SELF.cont_cname1_score 	:= IF(SELF.cont_cname1='','',pName[71..73]);
			SELF.Cont_title1		:= IF(SELF.cont_cname1='', pname[1..5], '');
			SELF.Cont_fname1 		:= IF(SELF.cont_cname1='', pname[6..25], '');
			SELF.Cont_mname1 		:= IF(SELF.cont_cname1='', pname[26..45], '');
			SELF.Cont_lname1 		:= IF(SELF.cont_cname1='', pname[46..65], '');
			SELF.Cont_name_suffix1 	:= IF(SELF.cont_cname1='', pname[66..70], '');
			SELF.Cont_score1 		:= IF(SELF.cont_cname1='', pname[71..73], '');
			SELF.cont_prim_range    := clean_address[1..10];
			SELF.cont_predir 	    := clean_address[11..12];
			SELF.cont_prim_name 	:= clean_address[13..40];
			SELF.cont_addr_suffix   := clean_address[41..44];
			SELF.cont_postdir 	  	:= clean_address[45..46];
			SELF.cont_unit_desig 	:= clean_address[47..56];
			SELF.cont_sec_range 	:= clean_address[57..64];
			SELF.cont_p_city_name	:= clean_address[65..89];
			SELF.cont_v_city_name	:= clean_address[90..114];
			SELF.cont_state 		:= clean_address[115..116];
			SELF.cont_zip5 		    := clean_address[117..121];
			SELF.cont_zip4 		 	:= clean_address[122..125];
			SELF.cont_cart 		    := clean_address[126..129];
			SELF.cont_cr_sort_sz 	:= clean_address[130];
			SELF.cont_lot 		    := clean_address[131..134];
			SELF.cont_lot_order 	:= clean_address[135];
			SELF.cont_dpbc 		   	:= clean_address[136..137];
			SELF.cont_chk_digit 	:= clean_address[138];
			SELF.cont_rec_type		:= clean_address[139..140];
			SELF.cont_ace_fips_st	:= clean_address[141..142];
			SELF.cont_county 	 	:= clean_address[143..145];
			SELF.cont_geo_lat 	    := clean_address[146..155];
			SELF.cont_geo_long 	    := clean_address[156..166];
			SELF.cont_msa 		    := clean_address[167..170];
			SELF.cont_geo_blk		:= clean_address[171..177];
			SELF.cont_geo_match 	:= clean_address[178];
			SELF.cont_err_stat 	    := clean_address[179..182];
			SELF					:= input;
			SELF 					:= [];
		END;		
		
		dFILE:=PROJECT(Inputfile,CleanContAddrName(left));
	    return dFile;
       END;
END;