IMPORT  Address, corp2,_validate,AK_Comm_Fish_Vessels, lib_stringLib, ut;

EXPORT FUNCTIONS := Module

		//****************************************************************************
		//valid_forgn_us_state_cd: returns true or false based upon the incoming code.
		//****************************************************************************
		EXPORT valid_us_state_cd(STRING s) := FUNCTION

			uc_s 		:= corp2.t2u(s);
					 
			RETURN map(uc_s in ['AL','AK','AR','AS','AZ'] 								=> true,
								 uc_s in ['CA','CO','CT','CZ']											=> true,
								 uc_s in ['DC','DE']																=> true,
								 uc_s in ['FL']																			=> true,
								 uc_s in ['GA','GU']																=> true,
								 uc_s in ['HI']																			=> true,
								 uc_s in ['IA','ID','IL','IN']			 								=> true,
								 uc_s in ['KS','KY']																=> true, 
								 uc_s in ['LA']																			=> true,
								 uc_s in ['MA','MD','ME','MI','MN','MO','MS','MT'] 	=> true,
								 uc_s in ['NC','ND','NE','NH','NJ','NM','NV','NY'] 	=> true,
								 uc_s in ['OH','OK','OR']														=> true,
								 uc_s in ['PA','PR']																=> true,
								 uc_s in ['RI']																	 		=> true,
								 uc_s in ['SC','SD']																=> true,
								 uc_s in ['TN','TX']															  => true,
								 uc_s in ['US','UT']																=> true,
								 uc_s in ['VA','VI','VT']														=> true,
								 uc_s in ['WA','WI','WV','WY']											=> true,
								 uc_s in ['']  																			=> true,
								 false
								);

		END;
		
		//****************************************************************************
		//valid_forgn_us_state_desc: returns true or false based upon the incoming
		//													 code.
		//****************************************************************************
		EXPORT valid_us_state_desc(STRING s) := FUNCTION

			uc_s 				:= corp2.t2u(s);
					 
			RETURN map(uc_s in ['ALABAMA','ALASKA','ARKANSAS','AMERICAN SAMOA','ARIZONA',
													'CALIFORNIA','CANAL ZONE','CAYMAN ISLANDS','COLORADO','CONNECTICUT',
													'DELAWARE','DISTRICT OF COLUMBIA','FLORIDA','GEORGIA','GUAM','HAWAII',
													'IDAHO','ILLINOIS','INDIANA','IOWA','KANSAS','KENTUCKY' ,'LOUISIANA',
													'MAINE','MARYLAND','MASSACHUSETTS','MICHIGAN','MINNESOTA','MISSISSIPPI',
													'MISSOURI','MONTANA','NEBRASKA','NEVADA','NORTH CAROLINA','NORTH DAKOTA',
													'NEW HAMPSHIRE','NEW JERSEY','NEW MEXICO','NEW YORK','OHIO','OKLAHOMA',
													'OREGON','PENNSYLVANIA','PUERTO RICO','RHODE ISLAND','SOUTH CAROLINA',
													'SOUTH DAKOTA','TENNESSEE','TEXAS','UNITED STATES','UTAH','VERMONT',
													'VIRGIN ISLANDS','VIRGINIA','WASHINGTON','WEST VIRGINIA','WISCONSIN',
													'WYOMING',''] => true,false);
			 
		END;

		//****************************************************************************
		//USStateDesc2Code: returns the us state code.
		//****************************************************************************
		EXPORT USStateDesc2Code(string s) := FUNCTION

					 uc_s := corp2.t2u(s);
					 
	         RETURN map(uc_s = 'ALABAMA' 													=> 'AL',
											uc_s = 'ALASKA' 													=> 'AK', 
											uc_s = 'ARKANSAS'													=> 'AR', 
											uc_s = 'AMERICAN SAMOA' 									=> 'AS',
											uc_s = 'ARIZONA' 													=> 'AZ', 
											uc_s = 'CALIFORNIA' 											=> 'CA',
											uc_s = 'CAYMAN ISLANDS'										=> 'KY',											
											uc_s = 'COLORADO' 												=> 'CO',
											uc_s = 'CONNECTICUT' 											=> 'CT',
											uc_s = 'CANAL ZONE' 											=> 'CZ',							
											uc_s = 'DISTRICT OF COLUMBIA' 						=> 'DC',
											uc_s = 'DELAWARE' 												=> 'DE',
											uc_s = 'FLORIDA' 													=> 'FL',
											uc_s = 'GEORGIA' 													=> 'GA',
											uc_s = 'GUAM' 														=> 'GU',
											uc_s = 'HAWAII' 													=> 'HI',
											uc_s = 'IOWA' 														=> 'IA',
											uc_s = 'IDAHO' 														=> 'ID',
											uc_s = 'ILLINOIS' 												=> 'IL',
											uc_s = 'INDIANA' 													=> 'IN',
											uc_s = 'KANSAS' 													=> 'KS',
											uc_s = 'KENTUCKY' 												=> 'KY',
											uc_s = 'LOUISIANA' 												=> 'LA',
											uc_s = 'MASSACHUSETTS' 										=> 'MA',
											uc_s = 'MARYLAND' 												=> 'MD',
											uc_s = 'MAINE'														=> 'ME',
											uc_s = 'MICHIGAN'													=> 'MI', 
											uc_s = 'MINNESOTA'												=> 'MN',
											uc_s = 'MISSOURI'													=> 'MO',
											uc_s = 'MISSISSIPPI'											=> 'MS',
											uc_s = 'MONTANA'													=> 'MT',
											uc_s = 'NORTH CAROLINA'										=> 'NC',
											uc_s = 'NORTH DAKOTA'											=> 'ND',
											uc_s = 'NEBRASKA'													=> 'NE',
											uc_s = 'NEW HAMPSHIRE'										=> 'NH',
											uc_s = 'NEW HAMSHIRE'											=> 'NH',
											uc_s = 'NEW JERSEY'												=> 'NJ',
											uc_s = 'NEW MEXICO'												=> 'NM',
											uc_s = 'NEVADA'														=> 'NV',
											uc_s = 'NEW YORK'													=> 'NY',
											uc_s = 'OHIO'															=> 'OH',
											uc_s = 'OKLAHOMA'													=> 'OK',
											uc_s = 'OREGON'														=> 'OR',
											uc_s = 'PENNSYLVANIA'											=> 'PA',
											uc_s = 'PUERTO RICO'											=> 'PR',
											uc_s = 'RHODE ISLAND'											=> 'RI',
											uc_s = 'SOUTH CAROLINA'										=> 'SC',
											uc_s = 'SOUTH DAKOTA'											=> 'SD',
											uc_s = 'TENNESSEE'												=> 'TN',
											uc_s = 'TEXAS'														=> 'TX',
											uc_s = 'UNITED STATES'										=> 'US',
											uc_s = 'UTAH'														 	=> 'UT',
											uc_s = 'VIRGINIA'													=> 'VA',
											uc_s = 'VIRGIN ISLANDS'										=> 'VI',
											uc_s = 'VERMONT'													=> 'VT',
											uc_s = 'WASHINGTON'												=> 'WA',
											uc_s = 'WISCONSIN'												=> 'WI',
											uc_s = 'WEST VIRGINIA'										=> 'WV',
											uc_s = 'WYOMING'													=> 'WY',
											'**|'+uc_s
										 );
		END;
		
			EXPORT Decode_ForgnCountryCode(string code) 
	:= case(code,
					'AFG'=>'AF',
					'ALB'=>'AB',
					'DZA'=>'DZ',
					'ASM'=>'AS',
					'AND'=>'AD',
					'AGO'=>'AO',
					'AIA'=>'AI',
					'ATA'=>'AQ',
					'ATG'=>'AG',
					'ARG'=>'AR',
					'ARM'=>'AM',
					'ABW'=>'AW',
					'AUS'=>'AU',
					'AUT'=>'AT',
					'AZE'=>'AZ',
					'BHS'=>'BS',
					'BHR'=>'BH',
					'BGD'=>'BD',
					'BRB'=>'BB',
					'BLR'=>'BY',
					'BEL'=>'BE',
					'BLZ'=>'BZ',
					'BEN'=>'BJ',
					'BMU'=>'BM',
					'BTN'=>'BT',
					'BOL'=>'BO',
					'BIH'=>'BA',
					'BWA'=>'BW',
					'BVT'=>'BV',
					'BRA'=>'BR',
					'IOT'=>'IO',
					'BRN'=>'BN',
					'BGR'=>'BG',
					'BFA'=>'BF',
					'BDI'=>'BI',
					'KHM'=>'KH',
					'CMR'=>'CM',
					'CAN'=>'CA',
					'CPV'=>'CV',
					'CYM'=>'KY',
					'CAF'=>'CF',
					'TCD'=>'TD',
					'CHL'=>'CL',
					'CHN'=>'CN',
					'CXR'=>'CX',
					'CCK'=>'CC',
					'COL'=>'CO',
					'COM'=>'KM',
					'COG'=>'CG',
					'COD'=>'CD',
					'COK'=>'CK',
					'CRI'=>'CR',
					'CIV'=>'CI',
					'HRV'=>'HR',
					'CUB'=>'CU',
					'CYP'=>'CY',
					'CZE'=>'CZ',
					'DNK'=>'DK',
					'DJI'=>'DJ',
					'DMA'=>'DM',
					'DOM'=>'DO',
					'TMP'=>'TP',
					'ECU'=>'EC',
					'EGY'=>'EG',
					'SLV'=>'SV',
					'GNQ'=>'GQ',
					'ERI'=>'ER',
					'EST'=>'EE',
					'ETH'=>'ET',
					'FLK'=>'FK',
					'FRO'=>'FO',
					'FJI'=>'FJ',
					'FIN'=>'FI',
					'FRA'=>'FR',
					'FXX'=>'FX',
					'GUF'=>'GF',
					'PYF'=>'PF',
					'ATF'=>'TF',
					'GAB'=>'GA',
					'GMB'=>'GM',
					'GEO'=>'GE',
					'DEU'=>'DE',
					'GHA'=>'GH',
					'GIB'=>'GI',
					'GRC'=>'GR',
					'GRL'=>'GL',
					'GRD'=>'GD',
					'GLP'=>'GP',
					'GUM'=>'GU',
					'GTM'=>'GT',
					'GIN'=>'GN',
					'GNB'=>'GW',
					'GUY'=>'GY',
					'HTI'=>'HT',
					'HMD'=>'HM',
					'VAT'=>'VA',
					'HND'=>'HN',
					'HKG'=>'HK',
					'HUN'=>'HU',
					'ISL'=>'IS',
					'IND'=>'IN',
					'IDN'=>'ID',
					'IRN'=>'IR',
					'IRQ'=>'IQ',
					'IRL'=>'IE',
					'ISR'=>'IL',
					'ITA'=>'IT',
					'JAM'=>'JM',
					'JPN'=>'JP',
					'JOR'=>'JO',
					'KAZ'=>'KZ',
					'KEN'=>'KE',
					'KIR'=>'KI',
					'PRK'=>'KP',
					'KOR'=>'KR',
					'KWT'=>'KW',
					'KGZ'=>'KG',
					'LAO'=>'LA',
					'LVA'=>'LV',
					'LBN'=>'LB',
					'LSO'=>'LS',
					'LBR'=>'LR',
					'LBY'=>'LY',
					'LIE'=>'LI',
					'LTU'=>'LT',
					'LUX'=>'LU',
					'MAC'=>'MO',
					'MKD'=>'MK',
					'MDG'=>'MG',
					'MWI'=>'MW',
					'MYS'=>'MY',
					'MDV'=>'MV',
					'MLI'=>'ML',
					'MLT'=>'MT',
					'MHL'=>'MH',
					'MTQ'=>'MQ',
					'MRT'=>'MR',
					'MUS'=>'MU',
					'MYT'=>'YT',
					'MEX'=>'MX',
					'FSM'=>'FM',
					'MDA'=>'MD',
					'MCO'=>'MC',
					'MNG'=>'MN',
					'MNE'=>'ME',
					'MSR'=>'MS',
					'MAR'=>'MA',
					'MOZ'=>'MZ',
					'MMR'=>'MM',
					'NAM'=>'NA',
					'NRU'=>'NR',
					'NPL'=>'NP',
					'NLD'=>'NL',
					'ANT'=>'AN',
					'NCL'=>'NC',
					'NZL'=>'NZ',
					'NIC'=>'NI',
					'NER'=>'NE',
					'NGA'=>'NG',
					'NIU'=>'NU',
					'NFK'=>'NF',
					'MNP'=>'MP',
					'NOR'=>'NO',
					'OMN'=>'OM',
					'PAK'=>'PK',
					'PLW'=>'PW',
					'PAN'=>'PA',
					'PNG'=>'PG',
					'PRY'=>'PY',
					'PER'=>'PE',
					'PHL'=>'PH',
					'PCN'=>'PN',
					'POL'=>'PL',
					'PRT'=>'PT',
					'PRI'=>'PR',
					'QAT'=>'QA',
					'REU'=>'RE',
					'ROM'=>'RO',
					'RUS'=>'RU',
					'RWA'=>'RW',
					'KNA'=>'KN',
					'LCA'=>'LC',
					'VCT'=>'VC',
					'WSM'=>'WS',
					'SMR'=>'SM',
					'STP'=>'ST',
					'SAU'=>'SA',
					'SEN'=>'SN',
					'SRB'=>'RS',
					'SYC'=>'SC',
					'SLE'=>'SL',
					'SGP'=>'SG',
					'SVK'=>'SK',
					'SVN'=>'SI',
					'SLB'=>'SB',
					'SOM'=>'SO',
					'ZAF'=>'ZA',
					'SSD'=>'SS',
					'SGS'=>'GS',
					'ESP'=>'ES',
					'LKA'=>'LK',
					'SHN'=>'SH',
					'SPM'=>'PM',
					'SDN'=>'SD',
					'SUR'=>'SR',
					'SJM'=>'SJ',
					'SWZ'=>'SZ',
					'SWE'=>'SE',
					'CHE'=>'CH',
					'SYR'=>'SY',
					'TWN'=>'TW',
					'TJK'=>'TJ',
					'TZA'=>'TZ',
					'THA'=>'TH',
					'TGO'=>'TG',
					'TKL'=>'TK',
					'TON'=>'TO',
					'TTO'=>'TT',
					'TUN'=>'TN',
					'TUR'=>'TR',
					'TKM'=>'TM',
					'TCA'=>'TC',
					'TUV'=>'TV',
					'UGA'=>'UG',
					'UKR'=>'UA',
					'ARE'=>'AE',
					'GBR'=>'GB',
					'UMI'=>'UM',
					'URY'=>'UY',
					'UZB'=>'UZ',
					'VUT'=>'VU',
					'VEN'=>'VE',
					'VNM'=>'VN',
					'VGB'=>'VG',
					'VIR'=>'VI',
					'WLF'=>'WF',
					'ESH'=>'EH',
					'YEM'=>'YE',
					'ZMB'=>'ZM',
					'ZWE'=>'ZW','');

	EXPORT Decode_ForgnCountryDesc(string code) 
	:= case(code,
					'AFG'=>'AFGHANISTAN',
					'ALB'=>'ALBANIA',
					'ALA'=>'ALAND ISLANDS',
					'DZA'=>'ALGERIA',
					'ASM'=>'AMERICAN SAMOA',
					'AND'=>'ANDORRA',
					'AGO'=>'ANGOLA',
					'AIA'=>'ANGUILLA',
					'ATA'=>'ANTARCTICA',
					'ATG'=>'ANTIGUA AND BARBUDA',
					'ARG'=>'ARGENTINA',
					'ARM'=>'ARMENIA',
					'ABW'=>'ARUBA',
					'AUS'=>'AUSTRALIA',
					'AUT'=>'AUSTRIA',
					'AZE'=>'AZERBAIJAN',
					'BHS'=>'BAHAMAS',
					'BHR'=>'BAHRAIN',
					'BGD'=>'BANGLADESH',
					'BRB'=>'BARBADOS',
					'BLR'=>'BELARUS',
					'BEL'=>'BELGIUM',
					'BLZ'=>'BELIZE',
					'BEN'=>'BENIN',
					'BMU'=>'BERMUDA',
					'BTN'=>'BHUTAN',
					'BOL'=>'BOLIVIA',
					'BIH'=>'BOSNIA AND HERZEGOWINA',
					'BWA'=>'BOTSWANA',
					'BVT'=>'BOUVET ISLAND',
					'BRA'=>'BRAZIL',
					'IOT'=>'BRITISH INDIAN OCEAN TERRITORY',
					'BRN'=>'BRUNEI DARUSSALAM',
					'BGR'=>'BULGARIA',
					'BFA'=>'BURKINA FASO',
					'BDI'=>'BURUNDI',
					'KHM'=>'CAMBODIA',
					'CMR'=>'CAMEROON',
					'CAN'=>'CANADA',
					'CPV'=>'CAPE VERDE',
					'CYM'=>'CAYMAN ISLANDS',
					'CAF'=>'CENTRAL AFRICAN REPUBLIC',
					'TCD'=>'CHAD',
					'CHL'=>'CHILE',
					'CHN'=>'CHINA',
					'CXR'=>'CHRISTMAS ISLAND',
					'CCK'=>'COCOS (KEELING) ISLANDS',
					'COL'=>'COLOMBIA',
					'COM'=>'COMOROS',
					'COG'=>'CONGO',
					'COD'=>'CONGO, THE DRC',
					'COK'=>'COOK ISLANDS',
					'CRI'=>'COSTA RICA',
					'CIV'=>'COTE DIVOIRE',
					'HRV'=>'CROATIA',
					'CUB'=>'CUBA',
					'CYP'=>'CYPRUS',
					'CZE'=>'CZECH REPUBLIC',
					'DNK'=>'DENMARK',
					'DJI'=>'DJIBOUTI',
					'DMA'=>'DOMINICA',
					'DOM'=>'DOMINICAN REPUBLIC',
					'TMP'=>'EAST TIMOR',
					'ECU'=>'ECUADOR',
					'EGY'=>'EGYPT',
					'SLV'=>'EL SALVADOR',
					'ENG'=>'ENGLAND',
					'GNQ'=>'EQUATORIAL GUINEA',
					'ERI'=>'ERITREA',
					'EST'=>'ESTONIA',
					'ETH'=>'ETHIOPIA',
					'FLK'=>'FALKLAND ISLANDS (MALVINAS)',
					'FRO'=>'FAROE ISLANDS',
					'FJI'=>'FIJI',
					'FIN'=>'FINLAND',
					'FRA'=>'FRANCE',
					'FXX'=>'FRANCE, METROPOLITAN',
					'GUF'=>'FRENCH GUIANA',
					'PYF'=>'FRENCH POLYNESIA',
					'ATF'=>'FRENCH SOUTHERN TERRITORIES',
					'GAB'=>'GABON',
					'GMB'=>'GAMBIA',
					'GEO'=>'GEORGIA',
					'DEU'=>'GERMANY',
					'GHA'=>'GHANA',
					'GIB'=>'GIBRALTAR',
					'GRC'=>'GREECE',
					'GRL'=>'GREENLAND',
					'GRD'=>'GRENADA',
					'GLP'=>'GUADELOUPE',
					'GUM'=>'GUAM',
					'GTM'=>'GUATEMALA',
					'GIN'=>'GUINEA',
					'GNB'=>'GUINEA-BISSAU',
					'GUY'=>'GUYANA',
					'HTI'=>'HAITI',
					'HMD'=>'HEARD AND MC DONALD ISLANDS',
					'VAT'=>'HOLY SEE (VATICAN CITY STATE)',
					'HND'=>'HONDURAS',
					'HKG'=>'HONG KONG',
					'HUN'=>'HUNGARY',
					'ISL'=>'ICELAND',
					'IND'=>'INDIA',
					'IDN'=>'INDONESIA',
					'IRN'=>'IRAN (ISLAMIC REPUBLIC OF)',
					'IRQ'=>'IRAQ',
					'IRL'=>'IRELAND',
					'IMN'=>'ISLE OF MAN',
					'ISR'=>'ISRAEL',
					'ITA'=>'ITALY',
					'JAM'=>'JAMAICA',
					'JPN'=>'JAPAN',
					'JEY'=>'JERSEY',
					'JOR'=>'JORDAN',
					'KAZ'=>'KAZAKHSTAN',
					'KEN'=>'KENYA',
					'KIR'=>'KIRIBATI',
					'PRK'=>'KOREA, D.P.R.O.',
					'KOR'=>'KOREA, REPUBLIC OF',
					'KWT'=>'KUWAIT',
					'KGZ'=>'KYRGYZSTAN',
					'LAO'=>'LAOS',
					'LVA'=>'LATVIA',
					'LBN'=>'LEBANON',
					'LSO'=>'LESOTHO',
					'LBR'=>'LIBERIA',
					'LBY'=>'LIBYAN ARAB JAMAHIRIYA',
					'LIE'=>'LIECHTENSTEIN',
					'LTU'=>'LITHUANIA',
					'LUX'=>'LUXEMBOURG',
					'MAC'=>'MACAU',
					'MKD'=>'MACEDONIA',
					'MDG'=>'MADAGASCAR',
					'MWI'=>'MALAWI',
					'MYS'=>'MALAYSIA',
					'MDV'=>'MALDIVES',
					'MLI'=>'MALI',
					'MLT'=>'MALTA',
					'MHL'=>'MARSHALL ISLANDS',
					'MTQ'=>'MARTINIQUE',
					'MRT'=>'MAURITANIA',
					'MUS'=>'MAURITIUS',
					'MYT'=>'MAYOTTE',
					'MEX'=>'MEXICO',
					'FSM'=>'MICRONESIA, FEDERATED STATES OF',
					'MDA'=>'MOLDOVA, REPUBLIC OF',
					'MCO'=>'MONACO',
					'MNG'=>'MONGOLIA',
					'MNE'=>'MONTENEGRO',
					'MSR'=>'MONTSERRAT',
					'MAR'=>'MOROCCO',
					'MOZ'=>'MOZAMBIQUE',
					'MMR'=>'MYANMAR (Burma)',
					'NAM'=>'NAMIBIA',
					'NRU'=>'NAURU',
					'NPL'=>'NEPAL',
					'NLD'=>'NETHERLANDS',
					'ANT'=>'NETHERLANDS ANTILLES',
					'NCL'=>'NEW CALEDONIA',
					'NZL'=>'NEW ZEALAND',
					'NIC'=>'NICARAGUA',
					'NER'=>'NIGER',
					'NGA'=>'NIGERIA',
					'NIU'=>'NIUE',
					'NFK'=>'NORFOLK ISLAND',
					'MNP'=>'NORTHERN MARIANA ISLANDS',
					'NOR'=>'NORWAY',
					'OMN'=>'OMAN',
					'PAK'=>'PAKISTAN',
					'PLW'=>'PALAU',
					'PSE'=>'PALESTINIAN TERRITORY, OCCUPIED',
					'PAN'=>'PANAMA',
					'PNG'=>'PAPUA NEW GUINEA',
					'PRY'=>'PARAGUAY',
					'PER'=>'PERU',
					'PHL'=>'PHILIPPINES',
					'PCN'=>'PITCAIRN',
					'POL'=>'POLAND',
					'PRT'=>'PORTUGAL',
					'PRI'=>'PUERTO RICO',
					'QAT'=>'QATAR',
					'REU'=>'REUNION',
					'ROM'=>'ROMANIA',
					'ROU'=>'ROMANIA',
					'RUS'=>'RUSSIAN FEDERATION',
					'RWA'=>'RWANDA',
					'BLM'=>'SAINT-BARTHELEMY',
					'MAF'=>'SAINT-MARTIN (FRENCH PART)',
					'KNA'=>'SAINT KITTS AND NEVIS',
					'LCA'=>'SAINT LUCIA',
					'VCT'=>'SAINT VINCENT AND THE GRENADINES',
					'WSM'=>'SAMOA',
					'SMR'=>'SAN MARINO',
					'STP'=>'SAO TOME AND PRINCIPE',
					'SAU'=>'SAUDI ARABIA',
					'SEN'=>'SENEGAL',
					'SRB'=>'SERBIA',
					'SYC'=>'SEYCHELLES',
					'SLE'=>'SIERRA LEONE',
					'SGP'=>'SINGAPORE',
					'SVK'=>'SLOVAKIA (Slovak Republic)',
					'SVN'=>'SLOVENIA',
					'SLB'=>'SOLOMON ISLANDS',
					'SOM'=>'SOMALIA',
					'ZAF'=>'SOUTH AFRICA',
					'SSD'=>'SOUTH SUDAN',
					'SGS'=>'SOUTH GEORGIA AND SOUTH S.S.',
					'ESP'=>'SPAIN',
					'LKA'=>'SRI LANKA',
					'SHN'=>'ST. HELENA',
					'SPM'=>'ST. PIERRE AND MIQUELON',
					'SDN'=>'SUDAN',
					'SUR'=>'SURINAME',
					'SJM'=>'SVALBARD AND JAN MAYEN ISLANDS',
					'SWZ'=>'SWAZILAND',
					'SWE'=>'SWEDEN',
					'CHE'=>'SWITZERLAND',
					'SYR'=>'SYRIAN ARAB REPUBLIC',
					'TWN'=>'TAIWAN, PROVINCE OF CHINA',
					'TJK'=>'TAJIKISTAN',
					'TZA'=>'TANZANIA, UNITED REPUBLIC OF',
					'THA'=>'THAILAND',
					'TGO'=>'TOGO',
					'TKL'=>'TOKELAU',
					'TON'=>'TONGA',
					'TTO'=>'TRINIDAD AND TOBAGO',
					'TUN'=>'TUNISIA',
					'TUR'=>'TURKEY',
					'TKM'=>'TURKMENISTAN',
					'TCA'=>'TURKS AND CAICOS ISLANDS',
					'TUV'=>'TUVALU',
					'UGA'=>'UGANDA',
					'UKR'=>'UKRAINE',
					'ARE'=>'UNITED ARAB EMIRATES',
					'GBR'=>'UNITED KINGDOM',
					'GRB'=>'UNITED KINGDOM',
					'UMI'=>'U.S. MINOR ISLANDS',
					'URY'=>'URUGUAY',
					'UZB'=>'UZBEKISTAN',
					'VUT'=>'VANUATU',
					'VEN'=>'VENEZUELA',
					'VNM'=>'VIET NAM',
					'VGB'=>'VIRGIN ISLANDS (BRITISH)',
					'VIR'=>'VIRGIN ISLANDS (U.S.)',
					'WLF'=>'WALLIS AND FUTUNA ISLANDS',
					'ESH'=>'WESTERN SAHARA',
					'YEM'=>'YEMEN',
					'ZMB'=>'ZAMBIA',
					'ZWE'=>'ZIMBABWE',
					'');


	EXPORT reformatDate(STRING inDate) 
	:= FUNCTION
			STRING  clean_inDate := trim(regexreplace('00:00:00',inDate,''),LEFT, RIGHT);
			STRING8 newDate 	 := trim(regexreplace('-',clean_inDate,''),LEFT, RIGHT);	
			RETURN  newDate;	
		END;
		
	EXPORT	reformatDate2(STRING inDate) 
	:= FUNCTION
			clean_inDate         := trim(inDate,all);
			Position1            := StringLib.StringFind(clean_inDate,'/',1);
	        position2            := StringLib.StringFind(clean_inDate,'/',2);
		    STRING8 newDate 	 := clean_inDate[position2+1..position2+4]+IF(position1=2, '0'+ clean_inDate[1],clean_inDate[1..2])+
			                          IF(position2-position1=3,clean_inDate[position1+1..position1+2], '0'+clean_inDate[position1+1..position2]);
			RETURN  newDate;	
			 
		END;		
		
	EXPORT	trimUpper(STRING s) 
	:= FUNCTION
			RETURN trim(STRINGlib.STRINGToUppercase(s),LEFT, RIGHT);
		END;
	
	EXPORT Decode_titleType(string code) 
	:= case(code,
	      'P'=>'PRESIDENT',
				'V'=>'VICE PRESIDENT',
				'S'=>'SECRETARY',
				'T'=>'TREASURER',
				'D'=>'DIRECTOR',
				'M'=>'MEMBER',
				'N'=>'MANAGER',
				'L'=>'SOLE OFFICER',
				'C'=>'CHAIRMAN',
				'H'=>'SHAREHOLDER',
				'E'=>'CHIEF EXECUTIVE OFFICER',
				'@'=>'OFFICER',
				'U'=>'UNKNOWN',
				'I'=>'INCORPORATOR',
				'O'=>'ORGANIZER',
				'G'=>'GENERAL PARTNER',
				'X'=>'ARP SIGNATURE',
				'A'=>'ACCOUNTANT',
				'R'=>'ASSISTANT SECRETARY',
				'B'=>'ASSISTANT TREASURER',
				'F'=>'CFO',
				'Y'=>'CERTIFIED PUBLIC ACCOUNTANT',
				'J'=>'CHIEF OPERATIONS OFFICER',
				'K'=>'CLERK',
				'Q'=>'CHIEF INFORMATION OFFICER',
				'W'=>'EXECUTIVE',
				'Z'=>'GENERAL MANAGER',
				'1'=>'LIMITED PARTNER',
				'2'=>'MANAGING MEMBER',
				'3'=>'MANAGING PARTNER',
				'4'=>'MANAGING AGENT',
				'5'=>'PARTNER',
				'6'=>'NO TITLE',
				'7'=>'INITIAL DIRECTOR',
				'8'=>'REGISTERED AGENT','');

	EXPORT Decode_apptitle(string code) 
			:= case(code,
	      'AGENT'=>'AGENT',
				'ANYTHING'=>'ANYTHING',
				'APPLICANT'=>'APPLICANT',
				'APPLLICANT'=>'APPLLICANT',
				'AS'=>'ASSISTANT SECRETARY',
				'ASISTANT SECRETARY'=>'ASSISTANT SECRETARY',
				'ASS SEC'=>'ASSISTANT SECRETARY',
				'ASS. SEC'=>'ASSISTANT SECRETARY',
				'ASS. SEC.'=>'ASSISTANT SECRETARY',
				'ASS?T SEC?Y'=>'ASSISTANT SECRETARY',
				'ASSIST VICE PRES'=>'ASSISTANT VICE PRESIDENT',
				'ASSIST. SEC'=>'ASSISTANT SECRETARY',
				'ASSIST. SEC.'=>'ASSISTANT SECRETARY',
				'ASSIST. SECRETARY'=>'ASSISTANT SECRETARY',
				'ASSISTANCE VICE-PRES'=>'ASSISTANT VICE PRESIDENT',
				'ASSISTANT CORP SECRETARY'=>'ASSISTANT CORPORATE SECRETARY',
				'ASSISTANT SEC'=>'ASSISTANT SECRETARY',
				'ASSISTANT SEC.'=>'ASSISTANT SECRETARY',
				'ASSISTANT SECRETARY'=>'ASSISTANT SECRETARY',
				'ASSISTANT TREASURER'=>'ASSISTANT TREASURER',
				'ASSISTANT VICE PRESIDENT'=>'ASSISTANT VICE PRESIDENT',
				'ASSISTANT VP'=>'ASSISTANT VICE PRESIDENT',
				'ASSIT SEC'=>'ASSISTANT SECRETARY',
				'ASSIT. SEC'=>'ASSISTANT SECRETARY',
				'ASST SEC'=>'ASSISTANT SECRETARY',
				'ASST SEC?Y'=>'ASSISTANT SECRETARY',
				'ASST SECRETARY'=>'ASSISTANT SECRETARY',
				'ASST SECY'=>'ASSISTANT SECRETARY',
				'ASST VICE PRES'=>'ASSISTANT VICE PRESIDENT',
				'ASST VICE-PRES'=>'ASSISTANT VICE PRESIDENT',
				'ASST VP'=>'ASSISTANT VICE PRESIDENT',
				'ASST V-P'=>'ASSISTANT VICE PRESIDENT',
				'ASST, SEC'=>'ASSISTANT SECRETARY',
				'ASST. DEPUTY ATTORNEY GENERAL'=>'ASSISTANT DEPUTY ATTORNEY GENERAL',
				'ASST. SEC.'=>'ASSISTANT SECRETARY',
				'ASST. SEC./TREAS.'=>'ASSISTANT SECRETARY;TREASURER',
				'ASST. SECRETARY'=>'ASSISTANT SECRETARY',
				'ASST. V.PRES'=>'ASSISTANT VICE PRESIDENT',
				'ASST. VICE PRES.'=>'ASSISTANT VICE PRESIDENT',
				'ASST. VICE PRESIDENT'=>'ASSISTANT VICE PRESIDENT',
				'ASST. VICE-PRES'=>'ASSISTANT VICE PRESIDENT',
				'ASST. VT'=>'ASSISTANT VICE PRESIDENT',
				'ASST.SEC'=>'ASSISTANT SECRETARY',
				'ATTORNEY & AGENT'=>'ATTORNEY;AGENT',
				'ATTORNEY AT LAW'=>'ATTORNEY',
				'ATTORNEY-IN-FACT'=>'ATTORNEY',
				'ATTY'=>'ATTORNEY',
				'ATTY.'=>'ATTORNEY',
				'AUTHORIZED AGENT'=>'AUTHORIZED AGENT ',
				'AUTHORIZED REPRESENTATIVE'=>'AUTHORIZED REPRESENTATIVE',
				'BOARD PRESIDENT'=>'BOARD PRESIDENT',
				'CEO'=>'CHIEF EXECUTIVE OFFICER',
				'CEO & CHAIRMAN'=>'CHIEF EXECUTIVE OFFICER;CHAIRMAN',
				'CEO/FINANCIAL CONSULTANT'=>'CHIEF EXECUTIVE OFFICER;FINANCIAL CONSULTANT',
				'CEO/PRESIDENT'=>'CHIEF EXECUTIVE OFFICER;PRESIDENT',
				'CFO'=>'CHIEF FINANCIAL OFFICER',
				'CFO & TREASURER'=>'CHIEF FINANCIAL OFFICER;TREASURER',
				'CHAIRMAN'=>'CHAIRMAN',
				'CHAIRPERSON, BOARD OF DIRECTORS'=>'CHAIRPERSON;BOARD OF DIRECTORS',
				'CHARIMAN OF THE BOARD'=>'CHAIRMAN OF THE BOARD',
				'CHIEF FINANCIAL OFF'=>'CHIEF FINANCIAL OFFICER',
				'CHIEF FINANCIAL OFFICER'=>'CHIEF FINANCIAL OFFICER',
				'CHIEF FINANCIAL OFFICER, SENIOR VP, TREASURER'=>'CHIEF FINANCIAL OFFICER;SENIOR VICE PRESIDENT',
				'CHIEF MANAGER'=>'CHIEF MANAGER',
				'CHIEF OPERATING OFFICER'=>'CHIEF OPERATING OFFICER',
				'CICE PRESIDENT'=>'VICE PRESIDENT',
				'CLIENT SPECIALIST'=>'CLIENT SPECIALIST',
				'CO/OWNER'=>'CO-OWNER',
				'CO-CHAIRMAN'=>'CO-CHAIRMAN',
				'CO-CHAIRMAN & ASSIST. SEC.'=>'CO-CHAIRMAN;ASSISTANT SECRETARY',
				'CO-CHAIRMAN & SEC.'=>'CO-CHAIRMAN;SECRETARY',
				'CONTROLLER'=>'CONTROLLER',
				'COO'=>'CHIEF OPERATING OFFICER',
				'CO-OWNER'=>'CO-OWNER',
				'CO-PRES'=>'CO-PRESIDENT',
				'CORP SEC'=>'CORPORATE SECRETARY',
				'CORP. SEC.'=>'CORPORATE SECRETARY',
				'CORPORATE SEC.'=>'CORPORATE SECRETARY',
				'CORPORATE SECRETARY'=>'CORPORATE SECRETARY',
				'COUNSEL FOR CORPORATION'=>'COUNSEL FOR CORPORATION',
				'CPA, OWNER'=>'CERTIFIED PUBLIC ACCOUNTANT;OWNER',
				'CRMS PRESIDENT'=>'CRMS PRESIDENT',
				'DIRECTOR'=>'DIRECTOR',
				'DIRECTOR OF OPERATIONS'=>'DIRECTOR OF OPERATIONS',
				'EVP & CAO'=>'EXECUTIVE VICE PRESIDENT;CHIEF ADMINISTRATIVE OFFICER',
				'EXE VP'=>'EXECUTIVE VICE PRESIDENT',
				'EXEC VICE-PRES'=>'EXECUTIVE VICE PRESIDENT',
				'EXEC. VICE-PRES.'=>'EXECUTIVE VICE PRESIDENT',
				'EXECTOR'=>'EXECTOR',
				'EXECUTIVE DIRECTOR'=>'EXECUTIVE DIRECTOR',
				'EXECUTIVE VICE PRES'=>'EXECUTIVE VICE PRESIDENT',
				'EXECUTIVE VICE PRESIDENT'=>'EXECUTIVE VICE PRESIDENT',
				'EXECUTIVE VICE PRESIDENT AND CHIEF FINANCIAL OFFIC'=>'EXECUTIVE VICE PRESIDENT;CHIEF FINANCIAL OFFICER',
				'EXECUTIVE VP'=>'EXECUTIVE VICE PRESIDENT',
				'FINANCIAL OFFICER'=>'FINANCIAL OFFICER',
				'FOUNDER'=>'FOUNDER',
				'GM'=>'GENERAL MANAGER',
				'INCORPORATER'=>'INCORPORATOR',
				'INCORPORATOR'=>'INCORPORATOR',
				'INDIVIDUAL'=>'INDIVIDUAL',
				'INITIAL DIRECTOR'=>'INITIAL DIRECTOR',
				'LEGAL DEPT'=>'LEGAL DEPT',
				'LEGAL DEPT.'=>'LEGAL DEPT',
				'MANAGER'=>'MANAGER',
				'MANAGER/MENBER'=>'MANAGER;MEMBER',
				'MANAGING MEMBER'=>'MANAGING MEMBER',
				'MANAGING PARTNER'=>'MANAGING PARTNER',
				'MEMBER'=>'MEMBER',
				'MEMBER & AGENT'=>'MEMBER;AGENT',
				'MGR.'=>'MANAGER',
				'OFFICER'=>'OFFICER',
				'OP. MNGR.'=>'OPERATING MANAGER',
				'ORGANIZER'=>'ORGANIZER',
				'OWNER'=>'OWNER',
				'OWNER / SENIOR INSPECTOR'=>'OWNER;SR INSPECTOR',
				'OWNER MANAGER'=>'OWNER;MANAGER',
				'OWNER/MANAGER'=>'OWNER;MANAGER',
				'OWNER/MEMBER'=>'OWNER;MEMBER',
				'OWNER/MGR'=>'OWNER;MANAGER',
				'OWNER/OPERATOR'=>'OWNER;OPERATOR',
				'OWNER/PRESIDENT'=>'OWNER;PRESIDENT',
				'OWNERS'=>'OWNER',
				'P'=>'P',
				'PARALEGAL'=>'PARALEGAL',
				'PARTNER'=>'PARTNER',
				'Partner'=>'PARTNER',
				'PASTOR'=>'PASTOR',
				'PASTOR/PRESIDENT'=>'PASTOR;PRESIDENT',
				'PRES'=>'PRESIDENT',
				'PRES & CEO'=>'PRESIDENT;CHIEF EXECUTIVE OFFICER',
				'PRES & SEC'=>'PRESIDENT;SECRETARY',
				'PRES.'=>'PRESIDENT',
				'PRESIDENT'=>'PRESIDENT',
				'President'=>'PRESIDENT',
				'PRESIDENT & CEO'=>'PRESIDENT;CHIEF EXECUTIVE OFFICER',
				'PRESIDENT / CEO'=>'PRESIDENT;CHIEF EXECUTIVE OFFICER',
				'PRESIDENT AND CEO'=>'PRESIDENT;CHIEF EXECUTIVE OFFICER',
				'PRESIDENT CEO'=>'PRESIDENT;CHIEF EXECUTIVE OFFICER',
				'PRESIDENT OF BOARD'=>'PRESIDENT OF BOARD',
				'PRESIDENT/CEO'=>'PRESIDENT;CHIEF EXECUTIVE OFFICER',
				'PRESIDENT/CHAIRMAN'=>'PRESIDENT;CHAIRMAN',
				'PRINCIPAL'=>'PRINCIPAL',
				'PRINCIPAL CFO'=>'PRICIPAL CHIEF FINANCIAL OFFICER',
				'REAL ESTATE AGENT'=>'REAL ESTATE AGENT',
				'REP.'=>'REPRENSENTATIVE',
				'REPRESENTATIVE'=>'REPRESENTATIVE',
				'SALES & USE TAX SENIOR'=>'SALE & USE TAX SENIOR',
				'SALES & USE TAX SR'=>'SALE & USE TAX SENIOR',
				'SEC'=>'SECRETARY',
				'SEC  & TREAS'=>'SECRETARY;TREASURER',
				'SEC & TREASURER'=>'SECRETARY;TREASURER',
				'SEC.'=>'SECRETARY',
				'SEC/RES'=>'SECRETARY;TREASURER',
				'SEC/TREA'=>'SECRETARY;TREASURER',
				'SEC/TREAS'=>'SECRETARY;TREASURER',
				'SEC/TREAS/COO'=>'SECRETARY;TREASURER;CHIEF OPERATING OFFICER',
				'SEC/TREASURER'=>'SECRETARY;TREASURER',
				'SECRECTARY'=>'SECRETARY',
				'SECRERTARY'=>'SECRETARY',
				'SECRETARY'=>'SECRETARY',
				'SECRETARY-TREASURER'=>'SECRETARY;TREASURER',
				'SECRRETARY'=>'SECRETARY',
				'SENIOR VICE PRES'=>'SR VICE PRESIDENT',
				'SENIOR VICE PRESIDENT'=>'SR VICE PRESIDENT',
				'SENIOR VICE-PRES'=>'SR VICE PRESIDENT',
				'SENIOR VP'=>'SR VICE PRESIDENT',
				'SENIOR V-PRES'=>'SR VICE PRESIDENT',
				'SENOIR V.P.'=>'SR VICE PRESIDENT',
				'SOLE INCORPORATOR'=>'SOLE INCORPORATOR',
				'SPEC ASST SEC'=>'SPECIAL ASSISTANT SECRETARY',
				'SPEC. ASST SEC'=>'SPECIAL ASSISTANT SECRETARY',
				'SPECIAL ASS?T. SECRETARY'=>'SPECIAL ASSISTANT SECRETARY',
				'SPECIAL ASST. SECRETARY'=>'SPECIAL ASSISTANT SECRETARY',
				'SR CHAIRMAN'=>'SR CHAIRMAN',
				'SR VICE PRES'=>'SR VICE PRESIDENT',
				'SR VICE PRES & CFO'=>'SR VICE PRESIDENT;CHIEF FINANCIAL OFFICER',
				'SR VICE-PRES'=>'SR VICE PRESIDENT',
				'SR VICE-PRES & SEC'=>'SR VICE PRESIDENT;SECRETARY',
				'SR VP'=>'SR VICE PRESIDENT',
				'SR. VICE PRESIDENT'=>'SR VICE PRESIDENT',
				'SR. VP & GENERAL COUNSEL'=>'SR VICE PRESIDENT;GENERAL COUNSEL',
				'SVP AND CONTROLLER'=>'SR VICE PRESIDENT;CONTROLLER',
				'TAX SENIOR'=>'TAX SENIOR',
				'TREA'=>'TREASURER',
				'TREAS.'=>'TREASURER',
				'TREASURER'=>'TREASURER',
				'TRUSTEE'=>'TRUSTEE',
				'TTORNEY'=>'ATTORNEY',
				'V PRES'=>'VICE PRESIDENT',
				'V PRES, SECR'=>'VICE PRESIDENT;SECRETARY',
				'V PRES, SECRE'=>'VICE PRESIDENT;SECRETARY',
				'V.P. & SEC'=>'VICE PRESIDENT;SECRETARY',
				'VICE'=>'VICE PRESIDENT',
				'VICE CHAIRMAN'=>'VICE CHAIRMAN',
				'VICE PRES'=>'VICE PRESIDENT',
				'VICE PRES & ASST GENERAL COUNSEL'=>'VICE PRESIDENT;ASSISTANT GENERAL COUNSEL',
				'VICE PRES & ASST SEC'=>'VICE PRESIDENT;ASSISTANT SECRETARY',
				'VICE PRES & GEN COUNSEL'=>'VICE PRESIDENT;GENERAL COUNSEL',
				'VICE PRES & SEC'=>'VICE PRESIDENT;ASSISTANT SECRETARY',
				'VICE PRES * CORP SEC'=>'VICE PRESIDENT;CORPORATE SECRETARY',
				'VICE PRES / SEC'=>'VICE PRESIDENT;SECRETARY',
				'VICE PRES.'=>'VICE PRESIDENT',
				'VICE PRES. & SEC'=>'VICE PRESIDENT;ASSISTANT SECRETARY',
				'VICE PRES. OF FIFNANCE'=>'VICE PRESIDENT OF FINANCE',
				'VICE PRESIDENT'=>'VICE PRESIDENT',
				'VICE PRESIDENT & GEN. COUNSEL'=>'VICE PRESIDENT;GENERAL COUNSEL',
				'VICE PRESIDENT & SECRETARY'=>'VICE PRESIDENT;SECRETARY',
				'VICE PRESIDENT ? LEGAL'=>'VICE PRESIDENT OF LEGAL',
				'Vice President and Ass. Sec.'=>'VICE PRESIDENT;ASSISTANT SECRETARY',
				'VICE PRESIDENT LEGAL'=>'VICE PRESIDENT OF LEGAL',
				'VICE PRESIDENT OF FINANCIAL OPERATIONS'=>'VICE PRESIDENT OF FINANCIAL OPERATIONS',
				'VICE PRESIDENT-OPERATIONS'=>'VICE PRESIDENT OF OPERATIONS',
				'VICE-PRES'=>'VICE PRESIDENT',
				'VICE-PRES & TREASURER'=>'VICE PRESIDENT;TREASURER',
				'VICE-PRES.'=>'VICE PRESIDENT',
				'VICE-PRESIDENT'=>'VICE PRESIDENT',
				'VP'=>'VICE PRESIDENT',
				'VP & ASS SECT'=>'VICE PRESIDENT;ASSISTANT SECRETARY',
				'VP & ASSISTANT SECRETARY'=>'VICE PRESIDENT;ASSISTANT SECRETARY',
				'VP & ASST SEC'=>'VICE PRESIDENT;ASSISTANT SECRETARY',
				'VP & CFO'=>'VICE PRESIDENT;CHIEF FINANCIAL OFFICER',
				'VP & GENERAL COUNSEL'=>'VICE PRESIDENT;GENERAL COUNSEL',
				'VP & SEC'=>'VICE PRESIDENT;SECRETARY',
				'VP & SECRETARY'=>'VICE PRESIDENT;SECRETARY',
				'VP & TREASURER'=>'VICE PRESIDENT;TREASURER',
				'VP FINANCE'=>'VICE PRESIDENT OF FINANCE',
				'VP OF FINANCE'=>'VICE PRESIDENT OF FINANCE',
				'VP OF SALES'=>'VICE PRESIDENT OF SALES',
				'VP, ASST, SEC.'=>'VICE PRESIDENT;ASSISTANT SECRETARY',
				'VP, SEC'=>'VICE PRESIDENT;SECRETARY',
				'VP/ASSISTANT SECRETARY'=>'VICE PRESIDENT;ASSISTANT SECRETARY',
				'VP/ASSIT SEC'=>'VICE PRESIDENT;ASSISTANT SECRETARY',
				'VP/CONTROLLER'=>'VICE PRESIDENT;CONTROLLER',
				'VP/FINANCE'=>'VICE PRESIDENT;FINANCE',
				'VP/GEN CSL'=>'VICE PRESIDENT;GENERAL COUNSEL','');

	EXPORT Decode_Corp_STRUCTURE(string3 code) 
	:= case(code,
			  'ASC'=>'ASSUMED NAME CORPORATION',
				'ASP'=>'ASSUMED NAME PARTNERSHIP',
				'BDC'=>'BUSINESS DEVELOPMENT CORPORATION',
				'BTR'=>'BUSINESS TRUST',
				'COP'=>'COOPERATIVE CORPORATION',
				'FCC'=>'FEDERALLY CHARTERED COMPANY',
				'FCO'=>'FOREIGN CORPORATION',
				'FLL'=>'FOREIGN LIMITED LIABILITY PARTNERSHIP',
				'FNL'=>'FOREIGN LIMITED LIABILITY PARTNERSHIP RUPA',
				'FLP'=>'FOREIGN LIMITED PARTNERSHIP',
				'FNP'=>'FOREIGN LIMITED PARTNERSHIP UNDER RULPA',
				'GPA'=>'GENERAL PARTNERSHIP ASSUMED NAME',
				'KNG'=>'GENERAL PARTNERSHIP RUPA',
				'KCO'=>'KENTUCKY CORPORATION',
				'KLL'=>'KENTUCKY LIMITED LIABILITY PARTNERSHIP',
				'KNL'=>'KENTUCKY LIMITED LIABILITY PARTNERSHIP RUPA',
				'KLP'=>'KENTUCKY LIMITED PARTNERSHIP',
				'KNP'=>'KENTUCKY LIMITED PARTNERSHIP UNDER RULPA',
				'KRR'=>'KENTUCKY RETENTION ACT',
				'PSC'=>'PROFESSIONAL SERVICES CORPORATION',
				'REG'=>'NAME REGISTRATION',
				'RES'=>'NAME RESERVATION',
				'KLC'=>'KENTUCKY LIMITED LIABILITY COMPANY',
				'FLC'=>'FOREIGN LIMITED LIABILITY COMPANY',
				'KBT'=>'KENTUCKY BUSINESS TRUST',
				'FBT'=>'FOREIGN BUSINESS TRUST',
				'FNB'=>'FOREIGN NATIONAL BANK',
				'ANN'=>'ASSUMED NAME NATIONAL BANK',
				'FPS'=>'FOREIGN PROFESSIONAL SERVICES CORPORATION',
				'KPS'=>'KENTUCKY PROFESSIONAL SERVICES CORPORATION',
				'KCP'=>'KENTUCKY COOPERATIVE CORPORATION',
				'FCP'=>'FOREIGN COOPERATIVE CORPORATION',
				'NCR'=>'NAME CROSS REFERENCE',
				'ALC'=>'ASSUMED NAME FOR LLC',
				'ALL'=>'ASSUMED NAME FOR LLP',
				'KMI'=>'KENTUCKY MUTUAL INSURANCE COMPANY',
				'FMI'=>'FOREIGN MUTUAL INSURANCE COMPANY',
				'KLA'=>'KENTUCKY LEGISLATIVE ACT',
				'AKL'=>'ASSUMED NAME FOR KLA',
				'LPA'=>'LP FROM ASSUMED NAME',
				'CRU'=>'CREDIT UNION'
				,'');

    EXPORT Decode_state(string2 code) 
	:= case(trim(code,left,right),
			  'AL'=>'ALABAMA',
				'AK'=>'ALASKA',
				'AS'=>'AMERICAN SAMOA',
				'AZ'=>'ARIZONA',
				'AR'=>'ARKANSAS',
				'CA'=>'CALIFORNIA',
				'CO'=>'COLORADO',
				'CT'=>'CONNECTICUT',
				'DE'=>'DELAWARE',
				'DC'=>'DISTRICT OF COLUMBIA',
				'FM'=>'FEDERATED STATES OF MICRONESIA',
				'FL'=>'FLORIDA',
				'GA'=>'GEORGIA',
				'GU'=>'GUAM',
				'HI'=>'HAWAII',
				'ID'=>'IDAHO',
				'IL'=>'ILLINOIS',
				'IN'=>'INDIANA',
				'IA'=>'IOWA',
				'KS'=>'KANSAS',
				'KY'=>'KENTUCKY',
				'LA'=>'LOUISIANA',
				'ME'=>'MAINE',
				'MH'=>'MARSHALL ISLANDS',
				'MD'=>'MARYLAND',
				'MA'=>'MASSACHUSETTS',
				'MI'=>'MICHIGAN',
				'MN'=>'MINNESOTA',
				'MS'=>'MISSISSIPPI',
				'MO'=>'MISSOURI',
				'MT'=>'MONTANA',
				'NE'=>'NEBRASKA',
				'NV'=>'NEVADA',
				'NH'=>'NEW HAMPSHIRE',
				'NJ'=>'NEW JERSEY',
				'NM'=>'NEW MEXICO',
				'NY'=>'NEW YORK',
				'NC'=>'NORTH CAROLINA ',
				'ND'=>'NORTH DAKOTA ',
				'MP'=>'NORTHERN MARIANA ISLANDS ',
				'OH'=>'OHIO ',
				'OK'=>'OKLAHOMA ',
				'OR'=>'OREGON ',
				'PW'=>'PALAU ',
				'PA'=>'PENNSYLVANIA ',
				'PR'=>'PUERTO RICO ',
				'RI'=>'RHODE ISLAND ',
				'SC'=>'SOUTH CAROLINA ',
				'SD'=>'SOUTH DAKOTA ',
				'TN'=>'TENNESSEE ',
				'TX'=>'TEXAS ',
				'UT'=>'UTAH ',
				'VT'=>'VERMONT ',
				'VI'=>'VIRGIN ISLANDS ',
				'VA'=>'VIRGINIA ',
				'WA'=>'WASHINGTON ',
				'WV'=>'WEST VIRGINIA ',
				'WI'=>'WISCONSIN ',
				'WY'=>'WYOMING ',
				'AE'=>'ARMED FORCES EUROPE, THE MIDDLE EAST AND CANADA',
				'AP'=>'ARMED FORCES PACIFIC ',
				'AA'=>'ARMED FORCES AMERICAS EXCEPT CANADA',
        'CZ'=>'CANAL ZONE','');
				
	EXPORT Decode_country(string code) 
	:= case(trim(code,left,right),
			  'AD'=>'ARUBA',
				'AL'=>'AL',
				'AU'=>'AUSTRALIA',
				'AUSTRALIA'=>'AUSTRALIA',
				'BAHAMA ISLAND'=>'BAHAMAS',
				'BAHAMA ISLANDS'=>'BAHAMAS',
				'BARBADOS'=>'BARBADOS',
				'BC'=>'BRITISH COLUMBIA, CANADA',
				'BELGIUM'=>'BELGUID',
				'BI'=>'BAHAMAS',
				'BRITISH COLUMBI'=>'BRIGISH COLUMBIA, CANADA',
				'BRITISH VIRGIN'=>'BRITISH VIRGIN ISLANDS',
				'BV'=>'BRITISH VIRGIN ISLANDS',
				'BVI'=>'BRITISH VIRGIN ISLANDS',
				'CAN'=>'CANADA',
				'CANADA'=>'CANADA',
				'CANDA'=>'CANADA',
				'CHINA'=>'CHINA',
				'GUERNSEY'=>'BAILIWICK OF GUERNSEY', 
				'DE'=>'DE',
				'EC'=>'ECUADOR',
				'EN'=>'ENGLAND',
				'ENGLAND'=>'ENGLAND',
				'FA'=>'FA',
				'FC'=>'FEDERATED CHARTERED',
				'FE'=>'FEDERATED CHARTERED',
				'FED. CHARTERED'=>'FEDERATED CHARTERED',
				'FL'=>'FL',
				'FR'=>'FRANCE',
				'GE'=>'GERMANY',
				'GERMANY'=>'GERMANY',
				'GREAT BRITAIN'=>'GREAT BRITAIN',
				//'GUERNSEY'=>'GUERNSEY',
				'HK'=>'HONG KONG',
				'HONG KONG'=>'HONG KONG',
				'II'=>'INDIA',
				'IN'=>'IN',
				'INDIA'=>'INDIA',
				'IRELAND'=>'IRELAND',
				'IT'=>'ITALY',
				'JA'=>'JAPAN',
				'JAPAN'=>'JAPAN',
				'KO'=>'KOREA',
				'KOREA'=>'KOREA',
				'LB'=>'LUXEMBOURG',
				'LI'=>'LIECHTENSTEIN',
				'LU'=>'LUXEMBOURG',
				'LUXEMBOURG'=>'LUXEMBOURG',
				'REPUBLIC OF KOREA'=>'REPUBLIC OF KOREA',
				'MEXICO'=>'MEXICO',
				'MV'=>'MV',
				'NA'=>'NETHERLANDS ANTILLES',
				'NC'=>'CANADA',
				'NB'=>'NB',
				'NETH. ANTILLES'=>'NETHERLANDS ANTILLES',
				'NETHERLANDS'=>'NETHERLANDS',
				'NO'=>'NO',
				'NOVA SCOTIA'=>'NOVA SCOTIA, CANADA',
				'OH'=>'OH',
				'ON'=>'ONTARIO, CANADA',
				'ONTARIO'=>'ONTARIO, CANADA',
				'PARAGUAY'=>'PARAGUAY',
				'PG'=>'PARAGUAY',
				'QUEBEC'=>'QUEBEC, CANADA',
				'RN'=>'RN',
				'RP'=>'PANAMA',
				'SL'=>'SCOTLAND',
				'SW'=>'SWITZERLAND',
				'SWITZERLAND'=>'SWITZERLAND',
				'TAIWAN'=>'TAIWAN',
				'TC'=>'TURKS AND CAICOS ISLANDS',
				'TL'=>'TL',
				'UK'=>'UNITED KINGDON',
				'UNITED STATES'=>'',
				'UR'=>'URAGUAY',
				'US'=>'',
				'USA'=>'',
				'VI'=>'VIRGIN ISLANDS',
				'VIRGIN ISLANDS'=>'VIRGIN ISLANDS',
				'WEST INDIA'=>'WEST INDIA',
				'WEST INDIES'=>'WEST INDIES',
				'WG'=>'GERMANY',
				'WN'=>'BRITISH WEST INDIES','');
				
EXPORT decode_cd(string CODE ) 
	:= case(trim(code,left,right),
	      'ALABAMA'=>'AL',
				'ALASKA'=>'AK',
				'AMERICAN SAMOA'=>'AS',
				'ARIZONA'=>'AZ',
				'ARKANSAS'=>'AR',
				'CALIFORNIA'=>'CA',
				'COLORADO'=>'CO',
				'CONNECTICUT'=>'CT',
				'DELAWARE'=>'DE',
				'DISTRICT OF COLUMBIA'=>'DC',
				'FEDERATED STATES OF MICRONESIA'=>'FM',
				'FLORIDA'=>'FL',
				'GEORGIA'=>'GA',
				'GUAM'=>'GU',
				'HAWAII'=>'HI',
				'IDAHO'=>'ID',
				'ILLINOIS'=>'IL',
				'INDIANA'=>'IN',
				'IOWA'=>'IA',
				'KANSAS'=>'KS',
				'KENTUCKY'=>'KY',
				'LOUISIANA'=>'LA',
				'MAINE'=>'ME',
				'MARSHALL ISLANDS'=>'MH',
				'MARYLAND'=>'MD',
				'MASSACHUSETTS'=>'MA',
				'MICHIGAN'=>'MI',
				'MINNESOTA'=>'MN',
				'MISSISSIPPI'=>'MS',
				'MISSOURI'=>'MO',
				'MONTANA'=>'MT',
				'NEBRASKA'=>'NE',
				'NEVADA'=>'NV',
				'NEW HAMPSHIRE'=>'NH',
				'NEW JERSEY'=>'NJ',
				'NEW MEXICO'=>'NM',
				'REPUBLIC OF KOREA'=>'KO',
				'NEW YORK'=>'NY',
				'NORTH CAROLINA'=>'NC',
				'NORTH DAKOTA'=>'ND',
				'NORTHERN MARIANA ISLANDS'=>'MP',
				'OHIO'=>'OH',
				'OKLAHOMA'=>'OK',
				'OREGON'=>'OR',
				'PALAU'=>'PW',
				'PENNSYLVANIA'=>'PA',
				'PUERTO RICO'=>'PR',
				'PUERTO RICO, COMMWEALTH'=>'PR',				
				'RHODE ISLAND'=>'RI',
				'SOUTH CAROLINA'=>'SC',
				'SOUTH DAKOTA'=>'SD',
				'TENNESSEE'=>'TN',
				'TEXAS'=>'TX',
				'UTAH'=>'UT',
				'VERMONT'=>'VT',
				'VIRGIN ISLANDS'=>'VI',
				'VIRGINIA'=>'VA',
				'WASHINGTON'=>'WA',
				'WEST VIRGINIA'=>'WV',
				'WISCONSIN'=>'WI',
				'WYOMING'=>'WY',
				'ARMED FORCES EUROPE, THE MIDDLE EAST AND CANADA'=>'AE',
				'ARMED FORCES PACIFIC'=>'AP',
				'ARMED FORCES AMERICAS EXCEPT CANADA'=>'AA',
			  'ARUBA'=>'AD',
				'AUSTRALIA'=>'AU',
				'BRITISH COLUMBIA'=>'BC',
				'BELGUID'=>'BELGIUM',
				'BAHAMAS'=>'BI',
				'ECUADOR'=>'EC',
				'ENGLAND'=>'EN',
				'FEDERATED CHARTERED'=>'FC',
				'FRANCE'=>'FR',
				'GERMANY'=>'GE',
				'GUERNSEY'=>'GG',
				'ONTARIO, CANADA'=>'ON',
				'HONG KONG'=>'HK',
				'INDIA'=>'IN',
				'ITALY'=>'IT',
				'JAPAN'=>'JA',
				'KOREA'=>'KO',
				//'LUXEMBOURG'=>'LB',
				'LIECHTENSTEIN'=>'LI',
				'LUXEMBOURG'=>'LU',
				'NETHERLANDS ANTILLES'=>'NA',
				'CANADA'=>'NC',
				'PARAGUAY'=>'PG',
				'PANAMA'=>'RP',
				'SCOTLAND'=>'SL',
				'SWITZERLAND'=>'SW',
				'TURKS AND CAICOS ISLANDS'=>'TC',
				'UNITED KINGDON'=>'UK',
				'UNITED STATES'=>'',
				'URAGUAY'=>'UR',
				'US'=>'',
				'USA'=>'',
				//'VIRGIN ISLANDS'=>'VI',
				//'GERMANY'=>'WG',
				'BRITISH WEST INDIES'=>'WN',
				//'BRITISH COLUMBIA'=>'BC',
				'AL'=>'AL',
				'AK'=>'AK',
				'AS'=>'AS',
				'AZ'=>'AZ',
				'AR'=>'AR',
				'CA'=>'CA',
				'CO'=>'CO',
				'CT'=>'CT',
				'DE'=>'DE',
				'DC'=>'DC',
				'FM'=>'FM',
				'FL'=>'FL',
				'GA'=>'GA',
				'GU'=>'GU',
				'HI'=>'HI',
				'ID'=>'ID',
				'IL'=>'IL',
				'IN'=>'IN',
				'IA'=>'IA',
				'KS'=>'KS',
				'KY'=>'KY',
				'LA'=>'LA',
				'ME'=>'ME',
				'MH'=>'MH',
				'MD'=>'MD',
				'MA'=>'MA',
				'MI'=>'MI',
				'MN'=>'MN',
				'MS'=>'MS',
				'MO'=>'MO',
				'MT'=>'MT',
				'NE'=>'NE',
				'NV'=>'NV',
				'NH'=>'NH',
				'NJ'=>'NJ',
				'NM'=>'NM',
				'NY'=>'NY',
				'NC'=>'NC',
				'ND'=>'ND',
				'MP'=>'MP',
				'OH'=>'OH',
				'OK'=>'OK',
				'OR'=>'OR',
				'PW'=>'PW',
				'PA'=>'PA',
				'PR'=>'PR',
				'RI'=>'RI',
				'SC'=>'SC',
				'SD'=>'SD',
				'TN'=>'TN',
				'TX'=>'TX',
				'UT'=>'UT',
				'VT'=>'VT',
				'VI'=>'VI',
				'VA'=>'VA',
				'WA'=>'WA',
				'WV'=>'WV',
				'WI'=>'WI',
				'WY'=>'WY',
				'AE'=>'AE',
				'AP'=>'AP',
				'AA'=>'AA',
			  'AD'=>'AD',
				//'AL'=>'AL',
				'AU'=>'AU',
				'BC'=>'BC',
				'BI'=>'BI',
				'BV'=>'BV',
				//'DE'=>'DE',
				'EC'=>'EC',
				'EN'=>'EN',
				'FA'=>'FA',
				'FC'=>'FC',
				//'FL'=>'FL',
				'FR'=>'FR',
				'GE'=>'GE',
				'HK'=>'HK',
			//	'IN'=>'IN',
				'IT'=>'IT',
				'JA'=>'JA',
				'KO'=>'KO',
				'LB'=>'LB',
				'LI'=>'LI',
				'LU'=>'LU',
				'MV'=>'MV',
				'NA'=>'NA',
				//'NC'=>'NC',
				'NB'=>'NB',
				'NO'=>'NO',
				//'OH'=>'OH',
				'ON'=>'ON',
				'PG'=>'PG',
				'RN'=>'RN',
				'RP'=>'RP',
				'SL'=>'SL',
				'SW'=>'SW',
				'TC'=>'TC',
				'TL'=>'TL',
				'UK'=>'UK',
				'UR'=>'UR',
			//	'VI'=>'VI',
				'WG'=>'WG',
				'WN'=>'WN','');
	
	EXPORT decode_desc(string CODE ) 
	:= case(trim(code,left,right),
			  'AL'=>'ALABAMA',
				'AK'=>'ALASKA',
				'AS'=>'AMERICAN SAMOA',
				'AZ'=>'ARIZONA',
				'AR'=>'ARKANSAS',
				'CA'=>'CALIFORNIA',
				'CO'=>'COLORADO',
				'CT'=>'CONNECTICUT',
				'DE'=>'DELAWARE',
				'DC'=>'DISTRICT OF COLUMBIA',
				'FM'=>'FEDERATED STATES OF MICRONESIA',
				'FL'=>'FLORIDA',
				'GA'=>'GEORGIA',
				'GU'=>'GUAM',
				'GG'=>'GUERNSEY',
				'HI'=>'HAWAII',
				'ID'=>'IDAHO',
				'IL'=>'ILLINOIS',
				'IN'=>'INDIANA',
				'IA'=>'IOWA',
				'KS'=>'KANSAS',
				'KY'=>'KENTUCKY',
				'LA'=>'LOUISIANA',
				'ME'=>'MAINE',
				'MH'=>'MARSHALL ISLANDS',
				'MD'=>'MARYLAND',
				'MA'=>'MASSACHUSETTS',
				'MI'=>'MICHIGAN',
				'MN'=>'MINNESOTA',
				'MS'=>'MISSISSIPPI',
				'MO'=>'MISSOURI',
				'MT'=>'MONTANA',
				'NE'=>'NEBRASKA',
				'NV'=>'NEVADA',
				'NH'=>'NEW HAMPSHIRE',
				'NJ'=>'NEW JERSEY',
				'NM'=>'NEW MEXICO',
				'NY'=>'NEW YORK',
				'NC'=>'NORTH CAROLINA ',
				'ND'=>'NORTH DAKOTA ',
				'MP'=>'NORTHERN MARIANA ISLANDS ',
				'OH'=>'OHIO ',
				'OK'=>'OKLAHOMA ',
				'OR'=>'OREGON ',
				'PW'=>'PALAU ',
				'PA'=>'PENNSYLVANIA ',
				'PR'=>'PUERTO RICO ',
				'RI'=>'RHODE ISLAND ',
				'SC'=>'SOUTH CAROLINA ',
				'SD'=>'SOUTH DAKOTA ',
				'TN'=>'TENNESSEE ',
				'TX'=>'TEXAS ',
				'UT'=>'UTAH ',
				'VT'=>'VERMONT ',
				'VI'=>'VIRGIN ISLANDS ',
				'VA'=>'VIRGINIA ',
				'WA'=>'WASHINGTON ',
				'WV'=>'WEST VIRGINIA ',
				'WI'=>'WISCONSIN ',
				'WY'=>'WYOMING ',
				'AE'=>'ARMED FORCES EUROPE, THE MIDDLE EAST AND CANADA',
				'AP'=>'ARMED FORCES PACIFIC ',
				'AA'=>'ARMED FORCES AMERICAS EXCEPT CANADA',
				'KO'=>'REPUBLIC OF KOREA',
			  'AD'=>'ARUBA',
				//'AL'=>'AL',
				'AU'=>'AUSTRALIA',
				'BC'=>'BRITISH COLUMBIA, CANADA',
				'BI'=>'BAHAMAS',
				'BV'=>'BRITISH VIRGIN ISLANDS',
				//'DE'=>'DE',
				'EC'=>'ECUADOR',
				'EN'=>'ENGLAND',
				'FA'=>'FA',
				'FC'=>'FEDERATED CHARTERED',
				'FE'=>'FEDERATED CHARTERED',
				'FR'=>'FRANCE',
				'GE'=>'GERMANY',
				'HK'=>'HONG KONG',
				'II'=>'INDIA',
				//'IN'=>'IN',
				'IT'=>'ITALY',
				'JA'=>'JAPAN',
				//'KO'=>'KOREA',
				'LB'=>'LUXEMBOURG',
				'LI'=>'LIECHTENSTEIN',
				'LU'=>'LUXEMBOURG',
				'MV'=>'MV',
				'NA'=>'NETHERLANDS ANTILLES',
				//'NC'=>'CANADA',
				'NB'=>'NB',
				'NO'=>'NO',
				'ON'=>'ONTARIO, CANADA',
				'PG'=>'PARAGUAY',
				'RN'=>'RN',
				'RP'=>'PANAMA',
				'SL'=>'SCOTLAND',
				'SW'=>'SWITZERLAND',
				'TC'=>'TURKS AND CAICOS ISLANDS',
				'TL'=>'TL',
				'UK'=>'UNITED KINGDON',
				'UNITED STATES'=>'',
				'UR'=>'URAGUAY',
			//	'VI'=>'VIRGIN ISLANDS',
				'WG'=>'GERMANY',
				'WN'=>'BRITISH WEST INDIES','');

	//COUNTRY CODES (ISO 3166-1 ALPHA-2 CODES)
	EXPORT decode_country_code_desc(string CODE ) := CASE(ut.fnTrim2Upper(code),
				'AF'	=> 'AFGHANISTAN',
				'AX'	=> 'Ã…LAND ISLANDS',
				'AL'	=> 'ALBANIA',
				'DZ'	=> 'ALGERIA',
				'AS'	=> 'AMERICAN SAMOA',
				'AD'	=> 'ANDORRA',
				'AO'	=> 'ANGOLA',
				'AI'	=> 'ANGUILLA',
				'AQ'	=> 'ANTARCTICA',
				'AG'	=> 'ANTIGUA AND BARBUDA',
				'AR'	=> 'ARGENTINA',
				'AM'	=> 'ARMENIA',
				'AW'	=> 'ARUBA',
				'AU'	=> 'AUSTRALIA',
				'AT'	=> 'AUSTRIA',
				'AZ'	=> 'AZERBAIJAN',
				'BS'	=> 'BAHAMAS',
				'BH'	=> 'BAHRAIN',
				'BD'	=> 'BANGLADESH',
				'BB'	=> 'BARBADOS',
				'BY'	=> 'BELARUS',
				'BE'	=> 'BELGIUM',
				'BZ'	=> 'BELIZE',
				'BJ'	=> 'BENIN',
				'BM'	=> 'BERMUDA',
				'BT'	=> 'BHUTAN',
				'BO'	=> 'BOLIVIA, PLURINATIONAL STATE OF',
				'BQ'	=> 'BONAIRE, SAINT EUSTATIUS AND SABA',
				'BA'	=> 'BOSNIA AND HERZEGOVINA',
				'BW'	=> 'BOTSWANA',
				'BV'	=> 'BOUVET ISLAND',
				'BR'	=> 'BRAZIL',
				'IO'	=> 'BRITISH INDIAN OCEAN TERRITORY',
				'BN'	=> 'BRUNEI DARUSSALEM',
				'BG'	=> 'BULGARIA',
				'BF'	=> 'BURKINA FASO',
				'BI'	=> 'BURUNDI',
				'CV'	=> 'CABO VERDE',
				'KH'	=> 'CAMBODIA',
				'CM'	=> 'CAMEROON',
				'CA'	=> 'CANADA',
				'KY'	=> 'CAYMAN ISLANDS',
				'CF'	=> 'CENTRAL AFRICAN REPUBLIC',
				'TD'	=> 'CHAD',
				'CL'	=> 'CHILE',
				'CN'	=> 'CHINA',
				'CX'	=> 'CHRISTMAS ISLAND',
				'CC'	=> 'COCOS (KEELING) ISLANDS',
				'CO'	=> 'COLOMBIA',
				'KM'	=> 'COMOROS',
				'CG'	=> 'CONGO',
				'CD'	=> 'CONGO, THE DEMOCRATIC REPUBLIC OF THE',
				'CK'	=> 'COOK ISLANDS',
				'CR'	=> 'COSTA RICA',
				'CI'	=> 'CÃ”TE D`IVOIRE',
				'HR'	=> 'CROATIA',
				'CU'	=> 'CUBA',
				'CW'	=> 'CURAÃ‡AO',
				'CY'	=> 'CYPRUS',
				'CZ'	=> 'CZECH REPUBLIC',
				'DK'	=> 'DENMARK',
				'DJ'	=> 'DJIBOUTI',
				'DM'	=> 'DOMINICA',
				'DO'	=> 'DOMINICAN REPUBLIC',
				'TP'	=> 'EAST TIMOR',				
				'EC'	=> 'ECUADOR',
				'EG'	=> 'EGYPT',
				'SV'	=> 'EL SALVADOR',
				'GQ'	=> 'EQUATORIAL GUINEA',
				'ER'	=> 'ERITREA',
				'EE'	=> 'ESTONIA',
				'ET'	=> 'ETHIOPIA',
				'FK'	=> 'FALKLAND ISLANDS (MALVINAS)',
				'FO'	=> 'FAROE ISLANDS',
				'FJ'	=> 'FIJI',
				'FI'	=> 'FINLAND',
				'FR'	=> 'FRANCE',
				'GF'	=> 'FRENCH GUIANA',
				'PF'	=> 'FRENCH POLYNESIA',
				'TF'	=> 'FRENCH SOUTHERN TERRITORIES',
				'GA'	=> 'GABON',
				'GM'	=> 'GAMBIA',
				'GE'	=> 'GEORGIA',
				'DE'	=> 'GERMANY',
				'GH'	=> 'GHANA',
				'GI'	=> 'GIBRALTAR',
				'GR'	=> 'GREECE',
				'GL'	=> 'GREENLAND',
				'GD'	=> 'GRENADA',
				'GP'	=> 'GUADELOUPE',
				'GU'	=> 'GUAM',
				'GT'	=> 'GUATEMALA',
				'GG'	=> 'GUERNSEY',
				'GN'	=> 'GUINEA',
				'GW'	=> 'GUINEA-BISSAU',
				'GY'	=> 'GUYANA',
				'HT'	=> 'HAITI',
				'HM'	=> 'HEARD ISLAND AND MCDONALD ISLANDS',
				'VA'	=> 'HOLY SEE (VATICAN CITY STATE)',
				'HN'	=> 'HONDURAS',
				'HK'	=> 'HONG KONG',
				'HU'	=> 'HUNGARY',
				'IS'	=> 'ICELAND',
				'IN'	=> 'INDIA',
				'ID'	=> 'INDONESIA',
				'IR'	=> 'IRAN, ISLAMIC REPUBLIC OF',
				'IQ'	=> 'IRAQ',
				'IE'	=> 'IRELAND',
				'IM'	=> 'ISLE OF MAN',
				'IL'	=> 'ISRAEL',
				'IT'	=> 'ITALY',
				'JM'	=> 'JAMAICA',
				'JP'	=> 'JAPAN',
				'JE'	=> 'JERSEY',
				'JO'	=> 'JORDAN',
				'KZ'	=> 'KAZAKHSTAN',
				'KE'	=> 'KENYA',
				'KI'	=> 'KIRIBATI',
				'KP'	=> 'KOREA, DEMOCRATIC PEOPLE`S REPUBLIC OF',
				'KR'	=> 'KOREA, REPUBLIC OF',
				'KW'	=> 'KUWAIT',
				'KG'	=> 'KYRGYZSTAN',
				'LA'	=> 'LAO PEOPLE`S DEMOCRATIC REPUBLIC',
				'LV'	=> 'LATVIA',
				'LB'	=> 'LEBANON',
				'LS'	=> 'LESOTHO',
				'LR'	=> 'LIBERIA',
				'LY'	=> 'LIBYA',
				'LI'	=> 'LIECHTENSTEIN',
				'LT'	=> 'LITHUANIA',
				'LU'	=> 'LUXEMBOURG',
				'MO'	=> 'MACAO',
				'MK'	=> 'MACEDONIA, THE FORMER YUGOSLAV REPUBLIC OF',
				'MG'	=> 'MADAGASCAR',
				'MW'	=> 'MALAWI',
				'MY'	=> 'MALAYSIA',
				'MV'	=> 'MALDIVES',
				'ML'	=> 'MALI',
				'MT'	=> 'MALTA',
				'MH'	=> 'MARSHALL ISLANDS',
				'MQ'	=> 'MARTINIQUE',
				'MR'	=> 'MAURITANIA',
				'MU'	=> 'MAURITIUS',
				'YT'	=> 'MAYOTTE',
				'MX'	=> 'MEXICO',
				'FM'	=> 'MICRONESIA, FEDERATED STATES OF',
				'MD'	=> 'MOLDOVA, REPUBLIC OF',
				'MC'	=> 'MONACO',
				'MN'	=> 'MONGOLIA',
				'ME'	=> 'MONTENEGRO',
				'MS'	=> 'MONTSERRAT',
				'MA'	=> 'MOROCCO',
				'MZ'	=> 'MOZAMBIQUE',
				'MM'	=> 'MYANMAR',
				'NA'	=> 'NAMIBIA',
				'NR'	=> 'NAURU',
				'NP'	=> 'NEPAL',
				'NL'	=> 'NETHERLANDS',
				'AN'	=> 'NETHERLANDS ANTILLES',	
				'NC'	=> 'NEW CALEDONIA',
				'NZ'	=> 'NEW ZEALAND',
				'NI'	=> 'NICARAGUA',
				'NE'	=> 'NIGER',
				'NG'	=> 'NIGERIA',
				'NU'	=> 'NIUE',
				'NF'	=> 'NORFOLK ISLAND',
				'MP'	=> 'NORTHERN MARIANA ISLANDS',
				'NO'	=> 'NORWAY',
				'OM'	=> 'OMAN',
				'PK'	=> 'PAKISTAN',
				'PW'	=> 'PALAU',
				'PS'	=> 'PALESTINE, STATE OF',
				'PA'	=> 'PANAMA',
				'PG'	=> 'PAPUA NEW GUINEA',
				'PY'	=> 'PARAGUAY',
				'PE'	=> 'PERU',
				'PH'	=> 'PHILIPPINES',
				'PN'	=> 'PITCAIRN',
				'PL'	=> 'POLAND',
				'PT'	=> 'PORTUGAL',
				'PR'	=> 'PUERTO RICO',
				'QA'	=> 'QATAR',
				'RE'	=> 'RÃ‰UNION',
				'RO'	=> 'ROMANIA',
				'RU'	=> 'RUSSIAN FEDERATION',
				'RW'	=> 'RWANDA',
				'BL'	=> 'SAINT BARTHÃ‰LEMY',
				'SH'	=> 'SAINT HELENA, ASCENSION AND TRISTAN DA CUNHA',
				'KN'	=> 'SAINT KITTS AND NEVIS',
				'LC'	=> 'SAINT LUCIA',
				'MF'	=> 'SAINT MARTIN (FRENCH PART)',
				'PM'	=> 'SAINT PIERRE AND MIQUELON',
				'VC'	=> 'SAINT VINCENT AND THE GRENADINES',
				'WS'	=> 'SAMOA',
				'SM'	=> 'SAN MARINO',
				'ST'	=> 'SAO TOME AND PRINCIPE',				
				'SA'	=> 'SAUDI ARABIA',
				'SN'	=> 'SENEGAL',
				'RS'	=> 'SERBIA',
				'SC'	=> 'SEYCHELLES',
				'SL'	=> 'SIERRA LEONE',
				'SG'	=> 'SINGAPORE',
				'SX'	=> 'SINT MAARTEN (DUTCH PART)',
				'SK'	=> 'SLOVAKIA',
				'SI'	=> 'SLOVENIA',
				'SB'	=> 'SOLOMON ISLANDS',
				'SO'	=> 'SOMALIA',
				'ZA'	=> 'SOUTH AFRICA',
				'GS'	=> 'SOUTH GEORGIA AND THE SOUTH SANDWICH ISLANDS',
				'SS'	=> 'SOUTH SUDAN',
				'ES'	=> 'SPAIN',
				'LK'	=> 'SRI LANKA',
				'SD'	=> 'SUDAN',
				'SR'	=> 'SURINAME',
				'SJ'	=> 'SVALBARD AND JAN MAYEN',
				'SZ'	=> 'SWAZILAND',
				'SE'	=> 'SWEDEN',
				'CH'	=> 'SWITZERLAND',
				'SY'	=> 'SYRIAN ARAB REPUBLIC',
				'TJ'	=> 'TAJIKISTAN',
				'TZ'	=> 'TANZANIA, UNITED REPUBLIC OF',
				'TH'	=> 'THAILAND',
				'TL'	=> 'TIMOR-LESTE',
				'TG'	=> 'TOGO',
				'TK'	=> 'TOKELAU',
				'TO'	=> 'TONGA',
				'TT'	=> 'TRINIDAD AND TOBAGO',
				'TN'	=> 'TUNISIA',
				'TR'	=> 'TURKEY',
				'TM'	=> 'TURKMENISTAN',
				'TC'	=> 'TURKS AND CAICOS ISLANDS',
				'TV'	=> 'TUVALU',
				'UG'	=> 'UGANDA',
				'UA'	=> 'UKRAINE',
				'AE'	=> 'UNITED ARAB EMIRATES',
				'GB'	=> 'UNITED KINGDOM',
				'UM'	=> 'UNITED STATES MINOR OUTLYING ISLANDS',
				'US'	=> 'UNITED STATES',
				'UY'	=> 'URUGUAY',
				'UZ'	=> 'UZBEKISTAN',
				'VU'	=> 'VANUATU',
				'VE'	=> 'VENEZUELA, BOLIVARIAN REPUBLIC OF',
				'VG'	=> 'VIRGIN ISLANDS, BRITISH',
				'VI'	=> 'VIRGIN ISLANDS, U.S.',
				'WF'	=> 'WALLIS AND FUTUNA',
				'EH'	=> 'WESTERN SAHARA',
				'YE'	=> 'YEMEN',
				'ZM'	=> 'ZAMBIA',
				'ZW'	=> 'ZIMBABWE',
				'');

	
  //** This function is only used in the Corp KY mapper.  		
	EXPORT  CleanCorp(dataset(Corp2.Layout_Corporate_Direct_Corp_in) inputFile)
	:= FUNCTION
     //output file
	corp2.Layout_Corporate_Direct_Corp_in CleanCorpAddrName(corp2.Layout_Corporate_Direct_Corp_in Input) 
	:= TRANSFORM		
			
			pname			    := IF((integer)Address.CleanPersonFML73(input.corp_ra_name)[71..73]>87, Address.CleanPersonFML73(input.corp_ra_name),Address.CleanPersonLFM73(input.corp_ra_name));
			cname 						:= IF(AK_Comm_Fish_Vessels.fIsCompany(input.corp_ra_name) and ~Regexfind('FISH', pname),trimUpper(input.corp_ra_name),'');
			/* Removed for AID process
			address1 	:= Address.CleanAddress182(input.corp_address1_line1+
																regexreplace('[ ]+',input.corp_address1_line2 +' '
																+input.corp_address1_line3+ ' '
																+input.corp_address1_line4,' '),input.corp_address1_line5);	
			ra_address 	:= Address.CleanAddress182(input.corp_ra_address_line1+
																regexreplace('[ ]+',input.corp_ra_address_line2+ ' '
																   +input.corp_ra_address_line3 + ' ' 
																   +input.corp_ra_address_line4,' '),input.corp_ra_address_line5);
		    
			clean_ra_address            := IF(ra_address[179..182]='E420',Address.CleanAddress182(regexreplace('[ ]+',input.corp_ra_address_line2+ ' '
															   +input.corp_ra_address_line3 + ' '+input.corp_ra_address_line4,' '),input.corp_ra_address_line5), ra_address);
			clean_address               := IF(Address1[179..182]='E420',Address.CleanAddress182(regexreplace('[ ]+',input.corp_address1_line2 +' '
			  												   +input.corp_address1_line3+ ' '+input.corp_address1_line4,' '),input.corp_address1_line5), address1);
			*/
			SELF.corp_ra_cname1 		:= IF((integer)pname[71..73]>85  ,'',
										     IF(regexfind('[0~9]|[a-z]|[A-Z]',cname),cname,
										     IF(Cname='',trimUpper(input.corp_ra_name),'')));
			SELF.corp_ra_cname1_score 	:= IF(SELF.corp_ra_cname1='','',pName[71..73]);
			SELF.corp_ra_title1		    := IF(SELF.corp_ra_cname1='', pname[1..5], '');
			SELF.corp_ra_fname1 		:= IF(SELF.corp_ra_cname1='', pname[6..25], '');
			SELF.corp_ra_mname1 		:= IF(SELF.corp_ra_cname1='', pname[26..45], '');
			SELF.corp_ra_lname1 		:= IF(SELF.corp_ra_cname1='', pname[46..65], '');
			SELF.corp_ra_name_suffix1 	:= IF(SELF.corp_ra_cname1='', pname[66..70], '');
			SELF.corp_ra_score1 		:= IF(SELF.corp_ra_cname1='', pname[71..73], '');
			SELF.CORP_RA_RESIGN_DATE    := IF(_validate.date.fIsValid(input.CORP_RA_RESIGN_DATE),input.CORP_RA_RESIGN_DATE,'');
			SELF.corp_inc_date          := IF(_validate.date.fIsValid(input.corp_inc_date),input.corp_inc_date,'');
			SELF.corp_forgn_date 		:= IF(_validate.date.fIsValid(input.corp_forgn_date),input.corp_forgn_date,'');
			SELF.CORP_TERM_EXIST_EXP    := IF(_validate.date.fIsValid(input.CORP_TERM_EXIST_EXP),input.CORP_TERM_EXIST_EXP,'');
			SELF.CORP_forgn_TERM_EXIST_EXP := IF(_validate.date.fIsValid(input.CORP_forgn_TERM_EXIST_EXP),input.CORP_forgn_TERM_EXIST_EXP,'');
			SELF.CORP_TERM_EXIST_CD     :=IF(SELF.CORP_TERM_EXIST_EXP<>'',input.CORP_TERM_EXIST_CD,'');
		    SELF.CORP_TERM_EXIST_DESC   :=IF(SELF.CORP_TERM_EXIST_EXP<>'',input.CORP_TERM_EXIST_DESC,'');
            SELF.CORP_forgn_TERM_EXIST_CD:=IF(SELF.CORP_forgn_TERM_EXIST_EXP<>'',input.CORP_forgn_TERM_EXIST_CD,'');
			SELF.CORP_forgn_TERM_EXIST_desc:=IF(SELF.CORP_forgn_TERM_EXIST_EXP<>'',input.CORP_forgn_TERM_EXIST_DESC,'');
			/* Removed for AID process
			SELF.corp_ra_prim_range    	:= clean_ra_address[1..10];
			SELF.corp_ra_predir 	    := clean_ra_address[11..12];
			SELF.corp_ra_prim_name 	  	:= clean_ra_address[13..40];
			SELF.corp_ra_addr_suffix   	:= clean_ra_address[41..44];
			SELF.corp_ra_postdir 	    := clean_ra_address[45..46];
			SELF.corp_ra_unit_desig 	:= clean_ra_address[47..56];
			SELF.corp_ra_sec_range 	  	:= clean_ra_address[57..64];
			SELF.corp_ra_p_city_name	:= clean_ra_address[65..89];
			SELF.corp_ra_v_city_name	:= clean_ra_address[90..114];
			SELF.corp_ra_state		    := clean_ra_address[115..116];
			SELF.corp_ra_zip5 		    := clean_ra_address[117..121];
			SELF.corp_ra_zip4 		    := clean_ra_address[122..125];
			SELF.corp_ra_cart 		    := clean_ra_address[126..129];
			SELF.corp_ra_cr_sort_sz 	:= clean_ra_address[130];
			SELF.corp_ra_lot 		    := clean_ra_address[131..134];
			SELF.corp_ra_lot_order 	  	:= clean_ra_address[135];
			SELF.corp_ra_dpbc 		    := clean_ra_address[136..137];
			SELF.corp_ra_chk_digit 	  	:= clean_ra_address[138];
			SELF.corp_ra_rec_type		:= clean_ra_address[139..140];
			SELF.corp_ra_ace_fips_st	:= clean_ra_address[141..142];
			SELF.corp_ra_county 	  	:= clean_ra_address[143..145];
			SELF.corp_ra_geo_lat 	    := clean_ra_address[146..155];
			SELF.corp_ra_geo_long 	    := clean_ra_address[156..166];
			SELF.corp_ra_msa 		    := clean_ra_address[167..170];
			SELF.corp_ra_geo_blk		:= clean_ra_address[171..177];
			SELF.corp_ra_geo_match 	  	:= clean_ra_address[178];
			SELF.corp_ra_err_stat 	    := clean_ra_address[179..182];													
			SELF.corp_addr1_prim_range  := clean_address[1..10];
			SELF.corp_addr1_predir 	    := clean_address[11..12];
			SELF.corp_addr1_prim_name 	:= clean_address[13..40];
			SELF.corp_addr1_addr_suffix := clean_address[41..44];
			SELF.corp_addr1_postdir 	:= clean_address[45..46];
			SELF.corp_addr1_unit_desig 	:= clean_address[47..56];
			SELF.corp_addr1_sec_range 	:= clean_address[57..64];
			SELF.corp_addr1_p_city_name	:= clean_address[65..89];
			SELF.corp_addr1_v_city_name	:= clean_address[90..114];
			SELF.corp_addr1_state 		:= clean_address[115..116];
			SELF.corp_addr1_zip5 		:= clean_address[117..121];
			SELF.corp_addr1_zip4 		:= clean_address[122..125];
			SELF.corp_addr1_cart 		:= clean_address[126..129];
			SELF.corp_addr1_cr_sort_sz 	:= clean_address[130];
			SELF.corp_addr1_lot 		:= clean_address[131..134];
			SELF.corp_addr1_lot_order 	:= clean_address[135];
			SELF.corp_addr1_dpbc 		:= clean_address[136..137];
			SELF.corp_addr1_chk_digit 	:= clean_address[138];
			SELF.corp_addr1_rec_type	:= clean_address[139..140];
			SELF.corp_addr1_ace_fips_st	:= clean_address[141..142];
			SELF.corp_addr1_county 	  	:= clean_address[143..145];
			SELF.corp_addr1_geo_lat 	:= clean_address[146..155];
			SELF.corp_addr1_geo_long 	:= clean_address[156..166];
			SELF.corp_addr1_msa 		:= clean_address[167..170];
			SELF.corp_addr1_geo_blk		:= clean_address[171..177];
			SELF.corp_addr1_geo_match 	:= clean_address[178];
			SELF.corp_addr1_err_stat 	:= clean_address[179..182]; 
			*/
			SELF 						:= Input;
			SELF						:= [];
		END;
	dFILE:=PROJECT(Inputfile,CleanCorpAddrName(left));
	return dFile;
	END;

	//** This function is only used in the KY mapper.
  EXPORT  CleanCont(dataset(Corp2.Layout_Corporate_Direct_Cont_IN) inputFile)
	:= FUNCTION
	Corp2.Layout_Corporate_Direct_Cont_In CleanContAddrName(Corp2.Layout_Corporate_Direct_Cont_In input) 
	:= transform		
			string73 pname			:= IF((integer)Address.CleanPersonFML73(input.cont_name)[71..73]>84, Address.CleanPersonFML73(input.cont_name),Address.CleanPersonLFM73(input.cont_name));
			 cname 					:= IF(AK_Comm_Fish_Vessels.fIsCompany(input.cont_name) and ~Regexfind('FISH', pname),trimUpper(input.cont_name),'');
			/* Removed for AID process
			string182 clean_address := Address.CleanAddress182(input.cont_address_line1+
																input.cont_address_line2 +' '
																+input.cont_address_line3+ ' '
																+input.cont_address_line4,input.cont_address_line5);
			*/													
																
			SELF.cont_cname1 		:= IF((integer)pname[71..73]>84  ,'',
										  IF(regexfind('[0~9]|[a-z]|[A-Z]',cname),cname,
										  IF(Cname='',trimUpper(input.cont_name),'')));
			SELF.CONT_TYPE_CD		:= 'F';
			SELF.CONT_TYPE_DESC		:= 'OFFICER';	
			SELF.cont_cname1_score 	:= IF(SELF.cont_cname1='','',pName[71..73]);
			SELF.Cont_title1		:= IF(SELF.cont_cname1='', pname[1..5], '');
			SELF.Cont_fname1 		:= IF(SELF.cont_cname1='', pname[6..25], '');
			SELF.Cont_mname1 		:= IF(SELF.cont_cname1='', pname[26..45], '');
			SELF.Cont_lname1 		:= IF(SELF.cont_cname1='', pname[46..65], '');
			SELF.Cont_name_suffix1 	:= IF(SELF.cont_cname1='', pname[66..70], '');
			SELF.Cont_score1 		:= IF(SELF.cont_cname1='', pname[71..73], '');
			/* Removed for AID process
			SELF.cont_prim_range    := clean_address[1..10];
			SELF.cont_predir 	    := clean_address[11..12];
			SELF.cont_prim_name 	:= clean_address[13..40];
			SELF.cont_addr_suffix   := clean_address[41..44];
			SELF.cont_postdir 	  	:= clean_address[45..46];
			SELF.cont_unit_desig 	:= clean_address[47..56];
			SELF.cont_sec_range 	:= clean_address[57..64];
			SELF.cont_p_city_name	:= clean_address[65..89];
			SELF.cont_v_city_name	:= clean_address[90..114];
			SELF.cont_state 		:= clean_address[115..116];
			SELF.cont_zip5 		    := clean_address[117..121];
			SELF.cont_zip4 		 	:= clean_address[122..125];
			SELF.cont_cart 		    := clean_address[126..129];
			SELF.cont_cr_sort_sz 	:= clean_address[130];
			SELF.cont_lot 		    := clean_address[131..134];
			SELF.cont_lot_order 	:= clean_address[135];
			SELF.cont_dpbc 		   	:= clean_address[136..137];
			SELF.cont_chk_digit 	:= clean_address[138];
			SELF.cont_rec_type		:= clean_address[139..140];
			SELF.cont_ace_fips_st	:= clean_address[141..142];
			SELF.cont_county 	 	:= clean_address[143..145];
			SELF.cont_geo_lat 	    := clean_address[146..155];
			SELF.cont_geo_long 	    := clean_address[156..166];
			SELF.cont_msa 		    := clean_address[167..170];
			SELF.cont_geo_blk		:= clean_address[171..177];
			SELF.cont_geo_match 	:= clean_address[178];
			SELF.cont_err_stat 	    := clean_address[179..182];
			*/

			SELF					:= input;
			SELF 					:= [];
		END;		
		
		dFILE:=PROJECT(Inputfile,CleanContAddrName(left));
	    return dFile;
       END;
		
		//********************************************************************************************
		// Function that a parses the given one line addresses that are either space or comma separated.
		// Used in AR and WY state mappers only.
		//********************************************************************************************
		export fParseAddr (string instr) := MODULE
			shared instring := lib_stringLib.StringLib.StringFindReplace(
														lib_stringLib.StringLib.StringFindReplace(
																lib_stringLib.StringLib.StringFindReplace(trim(instr, left,right),'(',' ')
																	,')',' ')
																		,'*','');
			shared streetAbbr := ' AVE | AVE. | AVE.,| RD | RD. | RD, | ROAD | ROAD, | ST | ST. | CIR | CIRCLE | CT | CT. | DR | DR. | PL | PL. | BLVD | BLVD. | LN | LN. | HWY | HWY. ';
			
			shared comma_sep_cnt := lib_stringLib.StringLib.stringfindcount(instring,',');
			
			shared scnt := lib_stringLib.StringLib.stringfindcount(instring,' ');

			shared pos  := lib_stringLib.StringLib.stringfind(instring,' ',scnt);

			shared token_first  := trim(instring[1..pos-1]);
			
			shared token_last   := trim(instring[pos+1..]);
			
			shared token_first_sep := regexreplace(streetAbbr, token_first, '|');
			
			shared token_first_sep_cnt   := lib_stringLib.StringLib.stringfindcount(token_first_sep, '|');
			
			shared token_first_num := if (token_first_sep_cnt > 1,
																		regexreplace('[[:digit:]]',token_first,'@'),token_first);
														 
			shared token_sep_cnt := if (token_first_sep_cnt > 1,
																	lib_stringLib.StringLib.stringfindcount(token_first_num,'@'),0);
													 
			shared token_first_last_digit_pos := if (token_first_sep_cnt > 1,
																							lib_stringLib.StringLib.stringfind(token_first_num,'@',token_sep_cnt),0);
																
			shared token_first_new := if (token_first_sep_cnt > 1,
																		token_first[token_first_last_digit_pos+1..],token_first_sep);
														 
			shared zip :=	if (comma_sep_cnt =3,
												StringLib.StringFilter(instring[lib_stringLib.StringLib.stringfind(instring,',',comma_sep_cnt)+1..], '1234567890'),
												if (comma_sep_cnt =2,
													 StringLib.StringFilter(instring[lib_stringLib.StringLib.stringfind(instring,',',comma_sep_cnt)+1..], '1234567890'),
													 if((integer)token_last > 0 and length(token_last) >=5, StringLib.StringFilter(token_last,'1234567890'),'')));
									 
			shared st  := if (comma_sep_cnt =3,
												if (regexfind('[[:alpha:]]',instring[lib_stringLib.StringLib.stringfind(instring,',',comma_sep_cnt)+1..]),
														StringLib.StringFilter(instring[lib_stringLib.StringLib.stringfind(instring,',',comma_sep_cnt)+1..], 'ABCDEFGHIJKLMNOPQRSTUVWXYZ '),
														StringLib.StringFilter(instring[lib_stringLib.StringLib.stringfind(instring,',',comma_sep_cnt-1)+1..lib_stringLib.StringLib.stringfind(instring,',',comma_sep_cnt)-1], 'ABCDEFGHIJKLMNOPQRSTUVWXYZ ')),
												if (comma_sep_cnt =2,
														StringLib.StringFilter(instring[lib_stringLib.StringLib.stringfind(instring,',',comma_sep_cnt)+1..], 'ABCDEFGHIJKLMNOPQRSTUVWXYZ '),
														if (trim(zip) = '',
															 if(regexfind('[[:alpha:]]',token_last) and length(trim(token_last)) = 2, trim(token_last),''),
															 if (length(trim(token_first[lib_stringLib.StringLib.stringfind(instring,' ',scnt-1)+1..])) = 2, 
																			trim(token_first[lib_stringLib.StringLib.stringfind(instring,' ',scnt-1)+1..]),'')
															))
												);
				
			shared temp_city := if (comma_sep_cnt =3,
															if (regexfind('[[:alpha:]]',instring[lib_stringLib.StringLib.stringfind(instring,',',comma_sep_cnt)+1..]),
																	instring[lib_stringLib.StringLib.stringfind(instring,',',comma_sep_cnt-1)+1..lib_stringLib.StringLib.stringfind(instring,',',comma_sep_cnt)-1],
																	instring[lib_stringLib.StringLib.stringfind(instring,',',comma_sep_cnt-2)+1..lib_stringLib.StringLib.stringfind(instring,',',comma_sep_cnt-1)-1]),
															if (comma_sep_cnt =2,
																	instring[lib_stringLib.StringLib.stringfind(instring,',',comma_sep_cnt-1)+1..lib_stringLib.StringLib.stringfind(instring,',',comma_sep_cnt)-1],
																	map (token_first_sep_cnt = 0 =>  if (trim(zip) <> '', 
																																				if (trim(st) <>'',regexreplace(' '+trim(st),token_first_sep[lib_stringLib.StringLib.stringfind(token_first_sep,' ',scnt-2)+1..],''),
																																						token_first_sep[lib_stringLib.StringLib.stringfind(token_first_sep,' ',scnt-1)+1..]),
																																				token_first_sep[lib_stringLib.StringLib.stringfind(token_first_sep,' ',scnt-1)+1..]),
																			 token_first_sep_cnt = 1 =>  if ((integer)token_last = 0 and length(token_last) > 2, 
																																			 trim(token_first_sep[lib_stringLib.StringLib.stringfind(token_first_sep,'|',1)+1..]) + ' ' +token_last,
																																			 regexreplace(' '+trim(st),trim(token_first_sep[lib_stringLib.StringLib.stringfind(token_first_sep,'|',1)+1..]),'')),
																			 token_first_sep_cnt > 1 =>  token_first_new,
																			 token_first																		
																			))
															);
															
			shared city_with_nums    := regexreplace('[[:digit:]]',temp_city,'@');
			
			shared city_with_num_cnt := lib_stringLib.StringLib.stringfindcount(city_with_nums,'@');
				
			shared city_last_num_pos := if (city_with_num_cnt > 0,
																			lib_stringLib.StringLib.stringfind(city_with_nums,'@',city_with_num_cnt),0);
				
			shared city_new := if (city_with_num_cnt > 0,
															temp_city[city_last_num_pos+1..],temp_city);
															
			shared city := if (city_with_num_cnt > 0,
												 if (lib_stringLib.StringLib.stringfind(city_new, ' ',1) > 1,
														 city_new[lib_stringLib.StringLib.stringfind(city_new, ' ',1)+1..],
														 city_new),
												 city_new);				

			shared street := if (comma_sep_cnt =3,
														if (regexfind('[[:alpha:]]',instring[lib_stringLib.StringLib.stringfind(instring,',',comma_sep_cnt)+1..]),
																instring[1..lib_stringLib.StringLib.stringfind(instring,',',2)-1],
																instring[1..lib_stringLib.StringLib.stringfind(instring,',',1)-1]),								
														if (comma_sep_cnt =2,
																instring[1..lib_stringLib.StringLib.stringfind(instring,',',1)-1],
																if ((integer)token_last = 0 and length(token_last) > 2,
																		instring[1..lib_stringLib.StringLib.stringfind(instring,City,1)-1]
																		,token_first[1..lib_stringLib.StringLib.stringfind(token_first,City,1)-1]
																	 )
																)
													 );
	
			export Var_Street := trim(lib_stringLib.StringLib.StringFindReplace(Street,',',''),left,right);
			export Var_City 	:= trim(lib_stringLib.StringLib.StringFindReplace(City,',',''),left,right);
			export Var_st 		:= trim(St,left,right);
			export Var_Zip 		:= trim(zip,left,right);
		end;
END;