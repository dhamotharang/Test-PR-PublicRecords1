export macro_compare_rva_2_0_pre(olddate, newdate, old_adate, new_adate) := macro
#workunit('name','RVA 2.0 Prescreen Comparison for Tracking');
#option ('hthorMemoryLimit', 1000);

IMPORT Risk_Indicators, RiskProcessing;

//===================  input-output files  ======================
infile_original :=  '~nmontpetit::out::rva_20_pre_tracking_'+(string)olddate+'_'+(string)old_adate;
infile_compare :=   '~nmontpetit::out::rva_20_pre_tracking_'+(string)newdate+'_'+(string)new_adate;

layout_rva_2_0 := RECORD
	string12 DID;
	string30 AccountNumber;

	string8 SSNFirstSeen;
	string8 DateLastSeen;
	string1 isRecentUpdate;
	string2 NumSources;
	string1 isPhoneFullNameMatch;
	string1 isPhoneLastNameMatch;
	string1 isSSNInvalid;
	string1 isPhoneInvalid;
	string1 isAddrInvalid;
	string1 isDLInvalid;
	string1 isNoVer;
	
	string1 isDeceased;
	string8 DeceasedDate;
	string1 isSSNValid;
	string1 isRecentIssue;
	string8 LowIssueDate;
	string8 HighIssueDate;
	string2 IssueState;
	string1 isNonUS;
	string1 isIssued3;
	string1 isIssuedAge5;

	string6 IADateFirstReported;
	string6 IADateLastReported;
	string4 IALenOfRes;
	string1 IADwellType;
	string1 IALandUseCode;
	string10 IAAssessedValue;
	string1 IAisOwnedBySubject;
	string1 IAisFamilyOwned;
	string1 IAisOccupantOwned;
	string8 IALastSaleDate;
	string10 IALastSaleAmount;
	string1 IAisNotPrimaryRes;
	string1 IAPhoneListed;
	string10 IAPhoneNumber;

	string6 CADateFirstReported;
	string6 CADateLastReported;
	string4 CALenOfRes;
	string1 CADwellType;
	string1 CALandUseCode;
	string10 CAAssessedValue;
	string1 CAisOwnedBySubject;
	string1 CAisFamilyOwned;
	string1 CAisOccupantOwned;
	string8 CALastSaleDate;
	string10 CALastSaleAmount;
	string1 CAisNotPrimaryRes;
	string1 CAPhoneListed;
	string10 CAPhoneNumber;
	
	string6 PADateFirstReported;
	string6 PADateLastReported;
	string4 PALenOfRes;
	string1 PADwellType;
	string1 PALandUseCode;
	string10 PAAssessedValue;
	string1 PAisOwnedBySubject;
	string1 PAisFamilyOwned;
	string1 PAisOccupantOwned;
	string8 PALastSaleDate;
	string10 PALastSaleAmount;
	string1 PAisNotPrimaryRes;
	string1 PAPhoneListed;
	string10 PAPhoneNumber;
	
	string1 isInputCurrMatch;
	string4 DistInputCurr;
	string1 isDiffState;
	string10 AssessedDiff;
	string2 EcoTrajectory;
	
	string1 isInputPrevMatch;
	string4 DistCurrPrev;
	string1 isDiffState2;
	string10 AssessedDiff2;
	string2 EcoTrajectory2;
	
	string1 mobility_indicator;
	string1 statusAddr;
	string1 statusAddr2;
	string1 statusAddr3;
	string6 PADateFirstReported2;
	string6 NPADateFirstReported;
	string3 addrChanges30;
	string3 addrChanges90;
	string3 addrChanges180;
	string3 addrChanges12;
	string3 addrChanges24;
	string3 addrChanges36;
	string3 addrChanges60;
	
	string3 property_owned_total;
	string13 property_owned_assessed_total;
	string3 property_historically_owned;
	string8 date_first_purchase;
	string8 date_most_recent_purchase;
	string8 date_most_recent_sale;
	
	string3 numPurchase30;
	string3 numPurchase90;
	string3 numPurchase180;
	string3 numPurchase12;
	string3 numPurchase24;
	string3 numPurchase36;
	string3 numPurchase60;
	
	string3 numSold30;
	string3 numSold90;
	string3 numSold180;
	string3 numSold12;
	string3 numSold24;
	string3 numSold36;
	string3 numSold60;
	
	string3 numWatercraft;
	string3 numWatercraft30;
	string3 numWatercraft90;
	string3 numWatercraft180;
	string3 numWatercraft12;
	string3 numWatercraft24;
	string3 numWatercraft36;
	string3 numWatercraft60;
	
	string3 numAircraft;
	string3 numAircraft30;
	string3 numAircraft90;
	string3 numAircraft180;
	string3 numAircraft12;
	string3 numAircraft24;
	string3 numAircraft36;
	string3 numAircraft60;
	
	string1 wealth_indicator;

	string3 total_number_derogs;
	string8 date_last_derog;
	
	string3 felonies;
	string8 date_last_conviction;
	string3 felonies30;
	string3 felonies90;
	string3 felonies180;
	string3 felonies12;
	string3 felonies24;
	string3 felonies36;
	string3 felonies60;
	
	string3 num_liens;
	string3 num_unreleased_liens;
	string8 date_last_unreleased;
	string3 num_unreleased_liens30;
	string3 num_unreleased_liens90;
	string3 num_unreleased_liens180;
	string3 num_unreleased_liens12;
	string3 num_unreleased_liens24;
	string3 num_unreleased_liens36;
	string3 num_unreleased_liens60;
	
	string3 num_released_liens;
	string8 date_last_released;
	string3 num_released_liens30;
	string3 num_released_liens90;
	string3 num_released_liens180;
	string3 num_released_liens12;
	string3 num_released_liens24;
	string3 num_released_liens36;
	string3 num_released_liens60;
	
	string3 bankruptcy_count;
	string8 date_last_bankruptcy;
	STRING1 filing_type;
	STRING35 disposition;
	string3 bankruptcy_count30;
	string3 bankruptcy_count90;
	string3 bankruptcy_count180;
	string3 bankruptcy_count12;
	string3 bankruptcy_count24;
	string3 bankruptcy_count36;
	string3 bankruptcy_count60;
	
	string3 eviction_count;
	string8 date_last_eviction;
	string3 eviction_count30;
	string3 eviction_count90;
	string3 eviction_count180;
	string3 eviction_count12;
	string3 eviction_count24;
	string3 eviction_count36;
	string3 eviction_count60;

	string3 num_nonderogs;
	string3 num_nonderogs30;
	string3 num_nonderogs90;
	string3 num_nonderogs180;
	string3 num_nonderogs12;
	string3 num_nonderogs24;
	string3 num_nonderogs36;
	string3 num_nonderogs60;
	
	string3 num_proflic;
	string8 date_last_proflic;
	string60 proflic_type;
	string8 expire_date_last_proflic;
	
	string3 num_proflic30;
	string3 num_proflic90;
	string3 num_proflic180;
	string3 num_proflic12;
	string3 num_proflic24;
	string3 num_proflic36;
	string3 num_proflic60;
	
	string3 num_proflic_exp30;
	string3 num_proflic_exp90;
	string3 num_proflic_exp180;
	string3 num_proflic_exp12;
	string3 num_proflic_exp24;
	string3 num_proflic_exp36;
	string3 num_proflic_exp60;
	
	string1 isAddrHighRisk;
	string1 isPhoneHighRisk;
	string1 isAddrPrison;
	string1 isZipPOBox;
	string1 isZipCorpMil;
	string1 phoneStatus;
	string1 isPhonePager;
	string1 isPhoneMobile;
	string1 isPhoneZipMismatch;
	string4 phoneAddrDist;
	
	string1 correctedFlag;
	string1 disputeFlag;
	string1 securityFreeze;
	string1 securityAlert;
	string1 negativeAlert;
	string1 idTheftFlag;
		
	string6 history_date;
	
	string200 errorcode;
END;

ds_original := 	dataset(infile_original, 	layout_rva_2_0, csv(heading(1), quote('"'), maxlength(32000)));
ds_compare := 	dataset(infile_compare, 	layout_rva_2_0, csv(heading(1), quote('"'), maxlength(32000)));

//output(ds_original);
//output(ds_compare);

layout_res := RECORD
	integer DID;
	integer AccountNumber;
	integer SSNFirstSeen;
	integer DateLastSeen;
	integer isRecentUpdate;
	integer NumSources;
	integer isPhoneFullNameMatch;
	integer isPhoneLastNameMatch;
	integer isSSNInvalid;
	integer isPhoneInvalid;
	integer isAddrInvalid;
	integer isDLInvalid;
	integer isNoVer;
	integer isDeceased;
	integer DeceasedDate;
	integer isSSNValid;
	integer isRecentIssue;
	integer LowIssueDate;
	integer HighIssueDate;
	integer IssueState;
	integer isNonUS;
	integer isIssued3;
	integer isIssuedAge5;
	integer IADateFirstReported;
	integer IADateLastReported;
	integer IALenOfRes;
	integer IADwellType;
	integer IALandUseCode;
	integer IAAssessedValue;
	integer IAisOwnedBySubject;
	integer IAisFamilyOwned;
	integer IAisOccupantOwned;
	integer IALastSaleDate;
	integer IALastSaleAmount;
	integer IAisNotPrimaryRes;
	integer IAPhoneListed;
	integer IAPhoneNumber;
	integer CADateFirstReported;
	integer CADateLastReported;
	integer CALenOfRes;
	integer CADwellType;
	integer CALandUseCode;
	integer CAAssessedValue;
	integer CAisOwnedBySubject;
	integer CAisFamilyOwned;
	integer CAisOccupantOwned;
	integer CALastSaleDate;
	integer CALastSaleAmount;
	integer CAisNotPrimaryRes;
	integer CAPhoneListed;
	integer CAPhoneNumber;
	integer PADateFirstReported;
	integer PADateLastReported;
	integer PALenOfRes;
	integer PADwellType;
	integer PALandUseCode;
	integer PAAssessedValue;
	integer PAisOwnedBySubject;
	integer PAisFamilyOwned;
	integer PAisOccupantOwned;
	integer PALastSaleDate;
	integer PALastSaleAmount;
	integer PAisNotPrimaryRes;
	integer PAPhoneListed;
	integer PAPhoneNumber;
	integer isInputCurrMatch;
	integer DistInputCurr;
	integer isDiffState;
	integer AssessedDiff;
	integer EcoTrajectory;
	integer isInputPrevMatch;
	integer DistCurrPrev;
	integer isDiffState2;
	integer AssessedDiff2;
	integer EcoTrajectory2;
	integer mobility_indicator;
	integer statusAddr;
	integer statusAddr2;
	integer statusAddr3;
	integer PADateFirstReported2;
	integer NPADateFirstReported;
	integer addrChanges30;
	integer addrChanges90;
	integer addrChanges180;
	integer addrChanges12;
	integer addrChanges24;
	integer addrChanges36;
	integer addrChanges60;
	integer property_owned_total;
	integer property_owned_assessed_total;
	integer property_historically_owned;
	integer date_first_purchase;
	integer date_most_recent_purchase;
	integer date_most_recent_sale;
	integer numPurchase30;
	integer numPurchase90;
	integer numPurchase180;
	integer numPurchase12;
	integer numPurchase24;
	integer numPurchase36;
	integer numPurchase60;
	integer numSold30;
	integer numSold90;
	integer numSold180;
	integer numSold12;
	integer numSold24;
	integer numSold36;
	integer numSold60;
	integer numWatercraft;
	integer numWatercraft30;
	integer numWatercraft90;
	integer numWatercraft180;
	integer numWatercraft12;
	integer numWatercraft24;
	integer numWatercraft36;
	integer numWatercraft60;
	integer numAircraft;
	integer numAircraft30;
	integer numAircraft90;
	integer numAircraft180;
	integer numAircraft12;
	integer numAircraft24;
	integer numAircraft36;
	integer numAircraft60;
	integer wealth_indicator;
	integer total_number_derogs;
	integer date_last_derog;
	integer felonies;
	integer date_last_conviction;
	integer felonies30;
	integer felonies90;
	integer felonies180;
	integer felonies12;
	integer felonies24;
	integer felonies36;
	integer felonies60;
	integer num_liens;
	integer num_unreleased_liens;
	integer date_last_unreleased;
	integer num_unreleased_liens30;
	integer num_unreleased_liens90;
	integer num_unreleased_liens180;
	integer num_unreleased_liens12;
	integer num_unreleased_liens24;
	integer num_unreleased_liens36;
	integer num_unreleased_liens60;
	integer num_released_liens;
	integer date_last_released;
	integer num_released_liens30;
	integer num_released_liens90;
	integer num_released_liens180;
	integer num_released_liens12;
	integer num_released_liens24;
	integer num_released_liens36;
	integer num_released_liens60;
	integer bankruptcy_count;
	integer date_last_bankruptcy;
	integer filing_type;
	integer disposition;
	integer bankruptcy_count30;
	integer bankruptcy_count90;
	integer bankruptcy_count180;
	integer bankruptcy_count12;
	integer bankruptcy_count24;
	integer bankruptcy_count36;
	integer bankruptcy_count60;
	integer eviction_count;
	integer date_last_eviction;
	integer eviction_count30;
	integer eviction_count90;
	integer eviction_count180;
	integer eviction_count12;
	integer eviction_count24;
	integer eviction_count36;
	integer eviction_count60;
	integer num_nonderogs;
	integer num_nonderogs30;
	integer num_nonderogs90;
	integer num_nonderogs180;
	integer num_nonderogs12;
	integer num_nonderogs24;
	integer num_nonderogs36;
	integer num_nonderogs60;
	integer num_proflic;
	integer date_last_proflic;
	integer proflic_type;
	integer expire_date_last_proflic;
	integer num_proflic30;
	integer num_proflic90;
	integer num_proflic180;
	integer num_proflic12;
	integer num_proflic24;
	integer num_proflic36;
	integer num_proflic60;
	integer num_proflic_exp30;
	integer num_proflic_exp90;
	integer num_proflic_exp180;
	integer num_proflic_exp12;
	integer num_proflic_exp24;
	integer num_proflic_exp36;
	integer num_proflic_exp60;
	integer isAddrHighRisk;
	integer isPhoneHighRisk;
	integer isAddrPrison;
	integer isZipPOBox;
	integer isZipCorpMil;
	integer phoneStatus;
	integer isPhonePager;
	integer isPhoneMobile;
	integer isPhoneZipMismatch;
	integer phoneAddrDist;
	integer correctedFlag;
	integer disputeFlag;
	integer securityFreeze;
	integer securityAlert;
	integer negativeAlert;
	integer idTheftFlag;
	integer history_date;
	integer errorcode;
END;

layout_res mk_matches(layout_rva_2_0 le, layout_rva_2_0 ri) := TRANSFORM
	self.DID                             :=(integer)(le.DID                              != ri.DID);
	self.AccountNumber                   :=(integer)(le.AccountNumber                    != ri.AccountNumber);
	self.SSNFirstSeen                    :=(integer)(le.SSNFirstSeen                     != ri.SSNFirstSeen);
	self.DateLastSeen                    :=(integer)(le.DateLastSeen                     != ri.DateLastSeen);
	self.isRecentUpdate                  :=(integer)(le.isRecentUpdate                   != ri.isRecentUpdate);
	self.NumSources                      :=(integer)(le.NumSources                       != ri.NumSources);
	self.isPhoneFullNameMatch            :=(integer)(le.isPhoneFullNameMatch             != ri.isPhoneFullNameMatch);
	self.isPhoneLastNameMatch            :=(integer)(le.isPhoneLastNameMatch             != ri.isPhoneLastNameMatch);
	self.isSSNInvalid                    :=(integer)(le.isSSNInvalid                     != ri.isSSNInvalid);
	self.isPhoneInvalid                  :=(integer)(le.isPhoneInvalid                   != ri.isPhoneInvalid);
	self.isAddrInvalid                   :=(integer)(le.isAddrInvalid                    != ri.isAddrInvalid);
	self.isDLInvalid                     :=(integer)(le.isDLInvalid                      != ri.isDLInvalid);
	self.isNoVer                         :=(integer)(le.isNoVer                          != ri.isNoVer);
	self.isDeceased                      :=(integer)(le.isDeceased                       != ri.isDeceased);
	self.DeceasedDate                    :=(integer)(le.DeceasedDate                     != ri.DeceasedDate);
	self.isSSNValid                      :=(integer)(le.isSSNValid                       != ri.isSSNValid);
	self.isRecentIssue                   :=(integer)(le.isRecentIssue                    != ri.isRecentIssue);
	self.LowIssueDate                    :=(integer)(le.LowIssueDate                     != ri.LowIssueDate);
	self.HighIssueDate                   :=(integer)(le.HighIssueDate                    != ri.HighIssueDate);
	self.IssueState                      :=(integer)(le.IssueState                       != ri.IssueState);
	self.isNonUS                         :=(integer)(le.isNonUS                          != ri.isNonUS);
	self.isIssued3                       :=(integer)(le.isIssued3                        != ri.isIssued3);
	self.isIssuedAge5                    :=(integer)(le.isIssuedAge5                     != ri.isIssuedAge5);
	self.IADateFirstReported             :=(integer)(le.IADateFirstReported              != ri.IADateFirstReported);
	self.IADateLastReported              :=(integer)(le.IADateLastReported               != ri.IADateLastReported);
	self.IALenOfRes                      :=(integer)(le.IALenOfRes                       != ri.IALenOfRes);
	self.IADwellType                     :=(integer)(le.IADwellType                      != ri.IADwellType);
	self.IALandUseCode                   :=(integer)(le.IALandUseCode                    != ri.IALandUseCode);
	self.IAAssessedValue                 :=(integer)(le.IAAssessedValue                  != ri.IAAssessedValue);
	self.IAisOwnedBySubject              :=(integer)(le.IAisOwnedBySubject               != ri.IAisOwnedBySubject);
	self.IAisFamilyOwned                 :=(integer)(le.IAisFamilyOwned                  != ri.IAisFamilyOwned);
	self.IAisOccupantOwned               :=(integer)(le.IAisOccupantOwned                != ri.IAisOccupantOwned);
	self.IALastSaleDate                  :=(integer)(le.IALastSaleDate                   != ri.IALastSaleDate);
	self.IALastSaleAmount                :=(integer)(le.IALastSaleAmount                 != ri.IALastSaleAmount);
	self.IAisNotPrimaryRes               :=(integer)(le.IAisNotPrimaryRes                != ri.IAisNotPrimaryRes);
	self.IAPhoneListed                   :=(integer)(le.IAPhoneListed                    != ri.IAPhoneListed);
	self.IAPhoneNumber                   :=(integer)(le.IAPhoneNumber                    != ri.IAPhoneNumber);
	self.CADateFirstReported             :=(integer)(le.CADateFirstReported              != ri.CADateFirstReported);
	self.CADateLastReported              :=(integer)(le.CADateLastReported               != ri.CADateLastReported);
	self.CALenOfRes                      :=(integer)(le.CALenOfRes                       != ri.CALenOfRes);
	self.CADwellType                     :=(integer)(le.CADwellType                      != ri.CADwellType);
	self.CALandUseCode                   :=(integer)(le.CALandUseCode                    != ri.CALandUseCode);
	self.CAAssessedValue                 :=(integer)(le.CAAssessedValue                  != ri.CAAssessedValue);
	self.CAisOwnedBySubject              :=(integer)(le.CAisOwnedBySubject               != ri.CAisOwnedBySubject);
	self.CAisFamilyOwned                 :=(integer)(le.CAisFamilyOwned                  != ri.CAisFamilyOwned);
	self.CAisOccupantOwned               :=(integer)(le.CAisOccupantOwned                != ri.CAisOccupantOwned);
	self.CALastSaleDate                  :=(integer)(le.CALastSaleDate                   != ri.CALastSaleDate);
	self.CALastSaleAmount                :=(integer)(le.CALastSaleAmount                 != ri.CALastSaleAmount);
	self.CAisNotPrimaryRes               :=(integer)(le.CAisNotPrimaryRes                != ri.CAisNotPrimaryRes);
	self.CAPhoneListed                   :=(integer)(le.CAPhoneListed                    != ri.CAPhoneListed);
	self.CAPhoneNumber                   :=(integer)(le.CAPhoneNumber                    != ri.CAPhoneNumber);
	self.PADateFirstReported             :=(integer)(le.PADateFirstReported              != ri.PADateFirstReported);
	self.PADateLastReported              :=(integer)(le.PADateLastReported               != ri.PADateLastReported);
	self.PALenOfRes                      :=(integer)(le.PALenOfRes                       != ri.PALenOfRes);
	self.PADwellType                     :=(integer)(le.PADwellType                      != ri.PADwellType);
	self.PALandUseCode                   :=(integer)(le.PALandUseCode                    != ri.PALandUseCode);
	self.PAAssessedValue                 :=(integer)(le.PAAssessedValue                  != ri.PAAssessedValue);
	self.PAisOwnedBySubject              :=(integer)(le.PAisOwnedBySubject               != ri.PAisOwnedBySubject);
	self.PAisFamilyOwned                 :=(integer)(le.PAisFamilyOwned                  != ri.PAisFamilyOwned);
	self.PAisOccupantOwned               :=(integer)(le.PAisOccupantOwned                != ri.PAisOccupantOwned);
	self.PALastSaleDate                  :=(integer)(le.PALastSaleDate                   != ri.PALastSaleDate);
	self.PALastSaleAmount                :=(integer)(le.PALastSaleAmount                 != ri.PALastSaleAmount);
	self.PAisNotPrimaryRes               :=(integer)(le.PAisNotPrimaryRes                != ri.PAisNotPrimaryRes);
	self.PAPhoneListed                   :=(integer)(le.PAPhoneListed                    != ri.PAPhoneListed);
	self.PAPhoneNumber                   :=(integer)(le.PAPhoneNumber                    != ri.PAPhoneNumber);
	self.isInputCurrMatch                :=(integer)(le.isInputCurrMatch                 != ri.isInputCurrMatch);
	self.DistInputCurr                   :=(integer)(le.DistInputCurr                    != ri.DistInputCurr);
	self.isDiffState                     :=(integer)(le.isDiffState                      != ri.isDiffState);
	self.AssessedDiff                    :=(integer)(le.AssessedDiff                     != ri.AssessedDiff);
	self.EcoTrajectory                   :=(integer)(le.EcoTrajectory                    != ri.EcoTrajectory);
	self.isInputPrevMatch                :=(integer)(le.isInputPrevMatch                 != ri.isInputPrevMatch);
	self.DistCurrPrev                    :=(integer)(le.DistCurrPrev                     != ri.DistCurrPrev);
	self.isDiffState2                    :=(integer)(le.isDiffState2                     != ri.isDiffState2);
	self.AssessedDiff2                   :=(integer)(le.AssessedDiff2                    != ri.AssessedDiff2);
	self.EcoTrajectory2                  :=(integer)(le.EcoTrajectory2                   != ri.EcoTrajectory2);
	self.mobility_indicator              :=(integer)(le.mobility_indicator               != ri.mobility_indicator);
	self.statusAddr                      :=(integer)(le.statusAddr                       != ri.statusAddr);
	self.statusAddr2                     :=(integer)(le.statusAddr2                      != ri.statusAddr2);
	self.statusAddr3                     :=(integer)(le.statusAddr3                      != ri.statusAddr3);
	self.PADateFirstReported2            :=(integer)(le.PADateFirstReported2             != ri.PADateFirstReported2);
	self.NPADateFirstReported            :=(integer)(le.NPADateFirstReported             != ri.NPADateFirstReported);
	self.addrChanges30                   :=(integer)(le.addrChanges30                    != ri.addrChanges30);
	self.addrChanges90                   :=(integer)(le.addrChanges90                    != ri.addrChanges90);
	self.addrChanges180                  :=(integer)(le.addrChanges180                   != ri.addrChanges180);
	self.addrChanges12                   :=(integer)(le.addrChanges12                    != ri.addrChanges12);
	self.addrChanges24                   :=(integer)(le.addrChanges24                    != ri.addrChanges24);
	self.addrChanges36                   :=(integer)(le.addrChanges36                    != ri.addrChanges36);
	self.addrChanges60                   :=(integer)(le.addrChanges60                    != ri.addrChanges60);
	self.property_owned_total            :=(integer)(le.property_owned_total             != ri.property_owned_total);
	self.property_owned_assessed_total   :=(integer)(le.property_owned_assessed_total    != ri.property_owned_assessed_total);
	self.property_historically_owned     :=(integer)(le.property_historically_owned      != ri.property_historically_owned);
	self.date_first_purchase             :=(integer)(le.date_first_purchase              != ri.date_first_purchase);
	self.date_most_recent_purchase       :=(integer)(le.date_most_recent_purchase        != ri.date_most_recent_purchase);
	self.date_most_recent_sale           :=(integer)(le.date_most_recent_sale            != ri.date_most_recent_sale);
	self.numPurchase30                   :=(integer)(le.numPurchase30                    != ri.numPurchase30);
	self.numPurchase90                   :=(integer)(le.numPurchase90                    != ri.numPurchase90);
	self.numPurchase180                  :=(integer)(le.numPurchase180                   != ri.numPurchase180);
	self.numPurchase12                   :=(integer)(le.numPurchase12                    != ri.numPurchase12);
	self.numPurchase24                   :=(integer)(le.numPurchase24                    != ri.numPurchase24);
	self.numPurchase36                   :=(integer)(le.numPurchase36                    != ri.numPurchase36);
	self.numPurchase60                   :=(integer)(le.numPurchase60                    != ri.numPurchase60);
	self.numSold30                       :=(integer)(le.numSold30                        != ri.numSold30);
	self.numSold90                       :=(integer)(le.numSold90                        != ri.numSold90);
	self.numSold180                      :=(integer)(le.numSold180                       != ri.numSold180);
	self.numSold12                       :=(integer)(le.numSold12                        != ri.numSold12);
	self.numSold24                       :=(integer)(le.numSold24                        != ri.numSold24);
	self.numSold36                       :=(integer)(le.numSold36                        != ri.numSold36);
	self.numSold60                       :=(integer)(le.numSold60                        != ri.numSold60);
	self.numWatercraft                   :=(integer)(le.numWatercraft                    != ri.numWatercraft);
	self.numWatercraft30                 :=(integer)(le.numWatercraft30                  != ri.numWatercraft30);
	self.numWatercraft90                 :=(integer)(le.numWatercraft90                  != ri.numWatercraft90);
	self.numWatercraft180                :=(integer)(le.numWatercraft180                 != ri.numWatercraft180);
	self.numWatercraft12                 :=(integer)(le.numWatercraft12                  != ri.numWatercraft12);
	self.numWatercraft24                 :=(integer)(le.numWatercraft24                  != ri.numWatercraft24);
	self.numWatercraft36                 :=(integer)(le.numWatercraft36                  != ri.numWatercraft36);
	self.numWatercraft60                 :=(integer)(le.numWatercraft60                  != ri.numWatercraft60);
	self.numAircraft                     :=(integer)(le.numAircraft                      != ri.numAircraft);
	self.numAircraft30                   :=(integer)(le.numAircraft30                    != ri.numAircraft30);
	self.numAircraft90                   :=(integer)(le.numAircraft90                    != ri.numAircraft90);
	self.numAircraft180                  :=(integer)(le.numAircraft180                   != ri.numAircraft180);
	self.numAircraft12                   :=(integer)(le.numAircraft12                    != ri.numAircraft12);
	self.numAircraft24                   :=(integer)(le.numAircraft24                    != ri.numAircraft24);
	self.numAircraft36                   :=(integer)(le.numAircraft36                    != ri.numAircraft36);
	self.numAircraft60                   :=(integer)(le.numAircraft60                    != ri.numAircraft60);
	self.wealth_indicator                :=(integer)(le.wealth_indicator                 != ri.wealth_indicator);
	self.total_number_derogs             :=(integer)(le.total_number_derogs              != ri.total_number_derogs);
	self.date_last_derog                 :=(integer)(le.date_last_derog                  != ri.date_last_derog);
	self.felonies                        :=(integer)(le.felonies                         != ri.felonies);
	self.date_last_conviction            :=(integer)(le.date_last_conviction             != ri.date_last_conviction);
	self.felonies30                      :=(integer)(le.felonies30                       != ri.felonies30);
	self.felonies90                      :=(integer)(le.felonies90                       != ri.felonies90);
	self.felonies180                     :=(integer)(le.felonies180                      != ri.felonies180);
	self.felonies12                      :=(integer)(le.felonies12                       != ri.felonies12);
	self.felonies24                      :=(integer)(le.felonies24                       != ri.felonies24);
	self.felonies36                      :=(integer)(le.felonies36                       != ri.felonies36);
	self.felonies60                      :=(integer)(le.felonies60                       != ri.felonies60);
	self.num_liens                       :=(integer)(le.num_liens                        != ri.num_liens);
	self.num_unreleased_liens            :=(integer)(le.num_unreleased_liens             != ri.num_unreleased_liens);
	self.date_last_unreleased            :=(integer)(le.date_last_unreleased             != ri.date_last_unreleased);
	self.num_unreleased_liens30          :=(integer)(le.num_unreleased_liens30           != ri.num_unreleased_liens30);
	self.num_unreleased_liens90          :=(integer)(le.num_unreleased_liens90           != ri.num_unreleased_liens90);
	self.num_unreleased_liens180         :=(integer)(le.num_unreleased_liens180          != ri.num_unreleased_liens180);
	self.num_unreleased_liens12          :=(integer)(le.num_unreleased_liens12           != ri.num_unreleased_liens12);
	self.num_unreleased_liens24          :=(integer)(le.num_unreleased_liens24           != ri.num_unreleased_liens24);
	self.num_unreleased_liens36          :=(integer)(le.num_unreleased_liens36           != ri.num_unreleased_liens36);
	self.num_unreleased_liens60          :=(integer)(le.num_unreleased_liens60           != ri.num_unreleased_liens60);
	self.num_released_liens              :=(integer)(le.num_released_liens               != ri.num_released_liens);
	self.date_last_released              :=(integer)(le.date_last_released               != ri.date_last_released);
	self.num_released_liens30            :=(integer)(le.num_released_liens30             != ri.num_released_liens30);
	self.num_released_liens90            :=(integer)(le.num_released_liens90             != ri.num_released_liens90);
	self.num_released_liens180           :=(integer)(le.num_released_liens180            != ri.num_released_liens180);
	self.num_released_liens12            :=(integer)(le.num_released_liens12             != ri.num_released_liens12);
	self.num_released_liens24            :=(integer)(le.num_released_liens24             != ri.num_released_liens24);
	self.num_released_liens36            :=(integer)(le.num_released_liens36             != ri.num_released_liens36);
	self.num_released_liens60            :=(integer)(le.num_released_liens60             != ri.num_released_liens60);
	self.bankruptcy_count                :=(integer)(le.bankruptcy_count                 != ri.bankruptcy_count);
	self.date_last_bankruptcy            :=(integer)(le.date_last_bankruptcy             != ri.date_last_bankruptcy);
	self.filing_type                     :=(integer)(le.filing_type                      != ri.filing_type);
	self.disposition                     :=(integer)(le.disposition                      != ri.disposition);
	self.bankruptcy_count30              :=(integer)(le.bankruptcy_count30               != ri.bankruptcy_count30);
	self.bankruptcy_count90              :=(integer)(le.bankruptcy_count90               != ri.bankruptcy_count90);
	self.bankruptcy_count180             :=(integer)(le.bankruptcy_count180              != ri.bankruptcy_count180);
	self.bankruptcy_count12              :=(integer)(le.bankruptcy_count12               != ri.bankruptcy_count12);
	self.bankruptcy_count24              :=(integer)(le.bankruptcy_count24               != ri.bankruptcy_count24);
	self.bankruptcy_count36              :=(integer)(le.bankruptcy_count36               != ri.bankruptcy_count36);
	self.bankruptcy_count60              :=(integer)(le.bankruptcy_count60               != ri.bankruptcy_count60);
	self.eviction_count                  :=(integer)(le.eviction_count                   != ri.eviction_count);
	self.date_last_eviction              :=(integer)(le.date_last_eviction               != ri.date_last_eviction);
	self.eviction_count30                :=(integer)(le.eviction_count30                 != ri.eviction_count30);
	self.eviction_count90                :=(integer)(le.eviction_count90                 != ri.eviction_count90);
	self.eviction_count180               :=(integer)(le.eviction_count180                != ri.eviction_count180);
	self.eviction_count12                :=(integer)(le.eviction_count12                 != ri.eviction_count12);
	self.eviction_count24                :=(integer)(le.eviction_count24                 != ri.eviction_count24);
	self.eviction_count36                :=(integer)(le.eviction_count36                 != ri.eviction_count36);
	self.eviction_count60                :=(integer)(le.eviction_count60                 != ri.eviction_count60);
	self.num_nonderogs                   :=(integer)(le.num_nonderogs                    != ri.num_nonderogs);
	self.num_nonderogs30                 :=(integer)(le.num_nonderogs30                  != ri.num_nonderogs30);
	self.num_nonderogs90                 :=(integer)(le.num_nonderogs90                  != ri.num_nonderogs90);
	self.num_nonderogs180                :=(integer)(le.num_nonderogs180                 != ri.num_nonderogs180);
	self.num_nonderogs12                 :=(integer)(le.num_nonderogs12                  != ri.num_nonderogs12);
	self.num_nonderogs24                 :=(integer)(le.num_nonderogs24                  != ri.num_nonderogs24);
	self.num_nonderogs36                 :=(integer)(le.num_nonderogs36                  != ri.num_nonderogs36);
	self.num_nonderogs60                 :=(integer)(le.num_nonderogs60                  != ri.num_nonderogs60);
	self.num_proflic                     :=(integer)(le.num_proflic                      != ri.num_proflic);
	self.date_last_proflic               :=(integer)(le.date_last_proflic                != ri.date_last_proflic);
	self.proflic_type                    :=(integer)(le.proflic_type                     != ri.proflic_type);
	self.expire_date_last_proflic        :=(integer)(le.expire_date_last_proflic         != ri.expire_date_last_proflic);
	self.num_proflic30                   :=(integer)(le.num_proflic30                    != ri.num_proflic30);
	self.num_proflic90                   :=(integer)(le.num_proflic90                    != ri.num_proflic90);
	self.num_proflic180                  :=(integer)(le.num_proflic180                   != ri.num_proflic180);
	self.num_proflic12                   :=(integer)(le.num_proflic12                    != ri.num_proflic12);
	self.num_proflic24                   :=(integer)(le.num_proflic24                    != ri.num_proflic24);
	self.num_proflic36                   :=(integer)(le.num_proflic36                    != ri.num_proflic36);
	self.num_proflic60                   :=(integer)(le.num_proflic60                    != ri.num_proflic60);
	self.num_proflic_exp30               :=(integer)(le.num_proflic_exp30                != ri.num_proflic_exp30);
	self.num_proflic_exp90               :=(integer)(le.num_proflic_exp90                != ri.num_proflic_exp90);
	self.num_proflic_exp180              :=(integer)(le.num_proflic_exp180               != ri.num_proflic_exp180);
	self.num_proflic_exp12               :=(integer)(le.num_proflic_exp12                != ri.num_proflic_exp12);
	self.num_proflic_exp24               :=(integer)(le.num_proflic_exp24                != ri.num_proflic_exp24);
	self.num_proflic_exp36               :=(integer)(le.num_proflic_exp36                != ri.num_proflic_exp36);
	self.num_proflic_exp60               :=(integer)(le.num_proflic_exp60                != ri.num_proflic_exp60);
	self.isAddrHighRisk                  :=(integer)(le.isAddrHighRisk                   != ri.isAddrHighRisk);
	self.isPhoneHighRisk                 :=(integer)(le.isPhoneHighRisk                  != ri.isPhoneHighRisk);
	self.isAddrPrison                    :=(integer)(le.isAddrPrison                     != ri.isAddrPrison);
	self.isZipPOBox                      :=(integer)(le.isZipPOBox                       != ri.isZipPOBox);
	self.isZipCorpMil                    :=(integer)(le.isZipCorpMil                     != ri.isZipCorpMil);
	self.phoneStatus                     :=(integer)(le.phoneStatus                      != ri.phoneStatus);
	self.isPhonePager                    :=(integer)(le.isPhonePager                     != ri.isPhonePager);
	self.isPhoneMobile                   :=(integer)(le.isPhoneMobile                    != ri.isPhoneMobile);
	self.isPhoneZipMismatch              :=(integer)(le.isPhoneZipMismatch               != ri.isPhoneZipMismatch);
	self.phoneAddrDist                   :=(integer)(le.phoneAddrDist                    != ri.phoneAddrDist);
	self.correctedFlag                   :=(integer)(le.correctedFlag                    != ri.correctedFlag);
	self.disputeFlag                     :=(integer)(le.disputeFlag                      != ri.disputeFlag);
	self.securityFreeze                  :=(integer)(le.securityFreeze                   != ri.securityFreeze);
	self.securityAlert                   :=(integer)(le.securityAlert                    != ri.securityAlert);
	self.negativeAlert                   :=(integer)(le.negativeAlert                    != ri.negativeAlert);
	self.idTheftFlag                     :=(integer)(le.idTheftFlag                      != ri.idTheftFlag);
	self.history_date                    :=(integer)(le.history_date                     != ri.history_date);
	self.errorcode                       :=(integer)(le.errorcode                        != ri.errorcode);
END;

res := JOIN (ds_original, ds_compare, LEFT.accountnumber=RIGHT.accountnumber, mk_matches(LEFT,RIGHT));
//output(res);

total := count(res);
DID                              := count(res(DID                              = 1));
AccountNumber                    := count(res(AccountNumber                    = 1));
SSNFirstSeen                     := count(res(SSNFirstSeen                     = 1));
DateLastSeen                     := count(res(DateLastSeen                     = 1));
isRecentUpdate                   := count(res(isRecentUpdate                   = 1));
NumSources                       := count(res(NumSources                       = 1));
isPhoneFullNameMatch             := count(res(isPhoneFullNameMatch             = 1));
isPhoneLastNameMatch             := count(res(isPhoneLastNameMatch             = 1));
isSSNInvalid                     := count(res(isSSNInvalid                     = 1));
isPhoneInvalid                   := count(res(isPhoneInvalid                   = 1));
isAddrInvalid                    := count(res(isAddrInvalid                    = 1));
isDLInvalid                      := count(res(isDLInvalid                      = 1));
isNoVer                          := count(res(isNoVer                          = 1));
isDeceased                       := count(res(isDeceased                       = 1));
DeceasedDate                     := count(res(DeceasedDate                     = 1));
isSSNValid                       := count(res(isSSNValid                       = 1));
isRecentIssue                    := count(res(isRecentIssue                    = 1));
LowIssueDate                     := count(res(LowIssueDate                     = 1));
HighIssueDate                    := count(res(HighIssueDate                    = 1));
IssueState                       := count(res(IssueState                       = 1));
isNonUS                          := count(res(isNonUS                          = 1));
isIssued3                        := count(res(isIssued3                        = 1));
isIssuedAge5                     := count(res(isIssuedAge5                     = 1));
IADateFirstReported              := count(res(IADateFirstReported              = 1));
IADateLastReported               := count(res(IADateLastReported               = 1));
IALenOfRes                       := count(res(IALenOfRes                       = 1));
IADwellType                      := count(res(IADwellType                      = 1));
IALandUseCode                    := count(res(IALandUseCode                    = 1));
IAAssessedValue                  := count(res(IAAssessedValue                  = 1));
IAisOwnedBySubject               := count(res(IAisOwnedBySubject               = 1));
IAisFamilyOwned                  := count(res(IAisFamilyOwned                  = 1));
IAisOccupantOwned                := count(res(IAisOccupantOwned                = 1));
IALastSaleDate                   := count(res(IALastSaleDate                   = 1));
IALastSaleAmount                 := count(res(IALastSaleAmount                 = 1));
IAisNotPrimaryRes                := count(res(IAisNotPrimaryRes                = 1));
IAPhoneListed                    := count(res(IAPhoneListed                    = 1));
IAPhoneNumber                    := count(res(IAPhoneNumber                    = 1));
CADateFirstReported              := count(res(CADateFirstReported              = 1));
CADateLastReported               := count(res(CADateLastReported               = 1));
CALenOfRes                       := count(res(CALenOfRes                       = 1));
CADwellType                      := count(res(CADwellType                      = 1));
CALandUseCode                    := count(res(CALandUseCode                    = 1));
CAAssessedValue                  := count(res(CAAssessedValue                  = 1));
CAisOwnedBySubject               := count(res(CAisOwnedBySubject               = 1));
CAisFamilyOwned                  := count(res(CAisFamilyOwned                  = 1));
CAisOccupantOwned                := count(res(CAisOccupantOwned                = 1));
CALastSaleDate                   := count(res(CALastSaleDate                   = 1));
CALastSaleAmount                 := count(res(CALastSaleAmount                 = 1));
CAisNotPrimaryRes                := count(res(CAisNotPrimaryRes                = 1));
CAPhoneListed                    := count(res(CAPhoneListed                    = 1));
CAPhoneNumber                    := count(res(CAPhoneNumber                    = 1));
PADateFirstReported              := count(res(PADateFirstReported              = 1));
PADateLastReported               := count(res(PADateLastReported               = 1));
PALenOfRes                       := count(res(PALenOfRes                       = 1));
PADwellType                      := count(res(PADwellType                      = 1));
PALandUseCode                    := count(res(PALandUseCode                    = 1));
PAAssessedValue                  := count(res(PAAssessedValue                  = 1));
PAisOwnedBySubject               := count(res(PAisOwnedBySubject               = 1));
PAisFamilyOwned                  := count(res(PAisFamilyOwned                  = 1));
PAisOccupantOwned                := count(res(PAisOccupantOwned                = 1));
PALastSaleDate                   := count(res(PALastSaleDate                   = 1));
PALastSaleAmount                 := count(res(PALastSaleAmount                 = 1));
PAisNotPrimaryRes                := count(res(PAisNotPrimaryRes                = 1));
PAPhoneListed                    := count(res(PAPhoneListed                    = 1));
PAPhoneNumber                    := count(res(PAPhoneNumber                    = 1));
isInputCurrMatch                 := count(res(isInputCurrMatch                 = 1));
DistInputCurr                    := count(res(DistInputCurr                    = 1));
isDiffState                      := count(res(isDiffState                      = 1));
AssessedDiff                     := count(res(AssessedDiff                     = 1));
EcoTrajectory                    := count(res(EcoTrajectory                    = 1));
isInputPrevMatch                 := count(res(isInputPrevMatch                 = 1));
DistCurrPrev                     := count(res(DistCurrPrev                     = 1));
isDiffState2                     := count(res(isDiffState2                     = 1));
AssessedDiff2                    := count(res(AssessedDiff2                    = 1));
EcoTrajectory2                   := count(res(EcoTrajectory2                   = 1));
mobility_indicator               := count(res(mobility_indicator               = 1));
statusAddr                       := count(res(statusAddr                       = 1));
statusAddr2                      := count(res(statusAddr2                      = 1));
statusAddr3                      := count(res(statusAddr3                      = 1));
PADateFirstReported2             := count(res(PADateFirstReported2             = 1));
NPADateFirstReported             := count(res(NPADateFirstReported             = 1));
addrChanges30                    := count(res(addrChanges30                    = 1));
addrChanges90                    := count(res(addrChanges90                    = 1));
addrChanges180                   := count(res(addrChanges180                   = 1));
addrChanges12                    := count(res(addrChanges12                    = 1));
addrChanges24                    := count(res(addrChanges24                    = 1));
addrChanges36                    := count(res(addrChanges36                    = 1));
addrChanges60                    := count(res(addrChanges60                    = 1));
property_owned_total             := count(res(property_owned_total             = 1));
property_owned_assessed_total    := count(res(property_owned_assessed_total    = 1));
property_historically_owned      := count(res(property_historically_owned      = 1));
date_first_purchase              := count(res(date_first_purchase              = 1));
date_most_recent_purchase        := count(res(date_most_recent_purchase        = 1));
date_most_recent_sale            := count(res(date_most_recent_sale            = 1));
numPurchase30                    := count(res(numPurchase30                    = 1));
numPurchase90                    := count(res(numPurchase90                    = 1));
numPurchase180                   := count(res(numPurchase180                   = 1));
numPurchase12                    := count(res(numPurchase12                    = 1));
numPurchase24                    := count(res(numPurchase24                    = 1));
numPurchase36                    := count(res(numPurchase36                    = 1));
numPurchase60                    := count(res(numPurchase60                    = 1));
numSold30                        := count(res(numSold30                        = 1));
numSold90                        := count(res(numSold90                        = 1));
numSold180                       := count(res(numSold180                       = 1));
numSold12                        := count(res(numSold12                        = 1));
numSold24                        := count(res(numSold24                        = 1));
numSold36                        := count(res(numSold36                        = 1));
numSold60                        := count(res(numSold60                        = 1));
numWatercraft                    := count(res(numWatercraft                    = 1));
numWatercraft30                  := count(res(numWatercraft30                  = 1));
numWatercraft90                  := count(res(numWatercraft90                  = 1));
numWatercraft180                 := count(res(numWatercraft180                 = 1));
numWatercraft12                  := count(res(numWatercraft12                  = 1));
numWatercraft24                  := count(res(numWatercraft24                  = 1));
numWatercraft36                  := count(res(numWatercraft36                  = 1));
numWatercraft60                  := count(res(numWatercraft60                  = 1));
numAircraft                      := count(res(numAircraft                      = 1));
numAircraft30                    := count(res(numAircraft30                    = 1));
numAircraft90                    := count(res(numAircraft90                    = 1));
numAircraft180                   := count(res(numAircraft180                   = 1));
numAircraft12                    := count(res(numAircraft12                    = 1));
numAircraft24                    := count(res(numAircraft24                    = 1));
numAircraft36                    := count(res(numAircraft36                    = 1));
numAircraft60                    := count(res(numAircraft60                    = 1));
wealth_indicator                 := count(res(wealth_indicator                 = 1));
total_number_derogs              := count(res(total_number_derogs              = 1));
date_last_derog                  := count(res(date_last_derog                  = 1));
felonies                         := count(res(felonies                         = 1));
date_last_conviction             := count(res(date_last_conviction             = 1));
felonies30                       := count(res(felonies30                       = 1));
felonies90                       := count(res(felonies90                       = 1));
felonies180                      := count(res(felonies180                      = 1));
felonies12                       := count(res(felonies12                       = 1));
felonies24                       := count(res(felonies24                       = 1));
felonies36                       := count(res(felonies36                       = 1));
felonies60                       := count(res(felonies60                       = 1));
num_liens                        := count(res(num_liens                        = 1));
num_unreleased_liens             := count(res(num_unreleased_liens             = 1));
date_last_unreleased             := count(res(date_last_unreleased             = 1));
num_unreleased_liens30           := count(res(num_unreleased_liens30           = 1));
num_unreleased_liens90           := count(res(num_unreleased_liens90           = 1));
num_unreleased_liens180          := count(res(num_unreleased_liens180          = 1));
num_unreleased_liens12           := count(res(num_unreleased_liens12           = 1));
num_unreleased_liens24           := count(res(num_unreleased_liens24           = 1));
num_unreleased_liens36           := count(res(num_unreleased_liens36           = 1));
num_unreleased_liens60           := count(res(num_unreleased_liens60           = 1));
num_released_liens               := count(res(num_released_liens               = 1));
date_last_released               := count(res(date_last_released               = 1));
num_released_liens30             := count(res(num_released_liens30             = 1));
num_released_liens90             := count(res(num_released_liens90             = 1));
num_released_liens180            := count(res(num_released_liens180            = 1));
num_released_liens12             := count(res(num_released_liens12             = 1));
num_released_liens24             := count(res(num_released_liens24             = 1));
num_released_liens36             := count(res(num_released_liens36             = 1));
num_released_liens60             := count(res(num_released_liens60             = 1));
bankruptcy_count                 := count(res(bankruptcy_count                 = 1));
date_last_bankruptcy             := count(res(date_last_bankruptcy             = 1));
filing_type                      := count(res(filing_type                      = 1));
disposition                      := count(res(disposition                      = 1));
bankruptcy_count30               := count(res(bankruptcy_count30               = 1));
bankruptcy_count90               := count(res(bankruptcy_count90               = 1));
bankruptcy_count180              := count(res(bankruptcy_count180              = 1));
bankruptcy_count12               := count(res(bankruptcy_count12               = 1));
bankruptcy_count24               := count(res(bankruptcy_count24               = 1));
bankruptcy_count36               := count(res(bankruptcy_count36               = 1));
bankruptcy_count60               := count(res(bankruptcy_count60               = 1));
eviction_count                   := count(res(eviction_count                   = 1));
date_last_eviction               := count(res(date_last_eviction               = 1));
eviction_count30                 := count(res(eviction_count30                 = 1));
eviction_count90                 := count(res(eviction_count90                 = 1));
eviction_count180                := count(res(eviction_count180                = 1));
eviction_count12                 := count(res(eviction_count12                 = 1));
eviction_count24                 := count(res(eviction_count24                 = 1));
eviction_count36                 := count(res(eviction_count36                 = 1));
eviction_count60                 := count(res(eviction_count60                 = 1));
num_nonderogs                    := count(res(num_nonderogs                    = 1));
num_nonderogs30                  := count(res(num_nonderogs30                  = 1));
num_nonderogs90                  := count(res(num_nonderogs90                  = 1));
num_nonderogs180                 := count(res(num_nonderogs180                 = 1));
num_nonderogs12                  := count(res(num_nonderogs12                  = 1));
num_nonderogs24                  := count(res(num_nonderogs24                  = 1));
num_nonderogs36                  := count(res(num_nonderogs36                  = 1));
num_nonderogs60                  := count(res(num_nonderogs60                  = 1));
num_proflic                      := count(res(num_proflic                      = 1));
date_last_proflic                := count(res(date_last_proflic                = 1));
proflic_type                     := count(res(proflic_type                     = 1));
expire_date_last_proflic         := count(res(expire_date_last_proflic         = 1));
num_proflic30                    := count(res(num_proflic30                    = 1));
num_proflic90                    := count(res(num_proflic90                    = 1));
num_proflic180                   := count(res(num_proflic180                   = 1));
num_proflic12                    := count(res(num_proflic12                    = 1));
num_proflic24                    := count(res(num_proflic24                    = 1));
num_proflic36                    := count(res(num_proflic36                    = 1));
num_proflic60                    := count(res(num_proflic60                    = 1));
num_proflic_exp30                := count(res(num_proflic_exp30                = 1));
num_proflic_exp90                := count(res(num_proflic_exp90                = 1));
num_proflic_exp180               := count(res(num_proflic_exp180               = 1));
num_proflic_exp12                := count(res(num_proflic_exp12                = 1));
num_proflic_exp24                := count(res(num_proflic_exp24                = 1));
num_proflic_exp36                := count(res(num_proflic_exp36                = 1));
num_proflic_exp60                := count(res(num_proflic_exp60                = 1));
isAddrHighRisk                   := count(res(isAddrHighRisk                   = 1));
isPhoneHighRisk                  := count(res(isPhoneHighRisk                  = 1));
isAddrPrison                     := count(res(isAddrPrison                     = 1));
isZipPOBox                       := count(res(isZipPOBox                       = 1));
isZipCorpMil                     := count(res(isZipCorpMil                     = 1));
phoneStatus                      := count(res(phoneStatus                      = 1));
isPhonePager                     := count(res(isPhonePager                     = 1));
isPhoneMobile                    := count(res(isPhoneMobile                    = 1));
isPhoneZipMismatch               := count(res(isPhoneZipMismatch               = 1));
phoneAddrDist                    := count(res(phoneAddrDist                    = 1));
correctedFlag                    := count(res(correctedFlag                    = 1));
disputeFlag                      := count(res(disputeFlag                      = 1));
securityFreeze                   := count(res(securityFreeze                   = 1));
securityAlert                    := count(res(securityAlert                    = 1));
negativeAlert                    := count(res(negativeAlert                    = 1));
idTheftFlag                      := count(res(idTheftFlag                      = 1));
history_date                     := count(res(history_date                     = 1));
errorcode                        := count(res(errorcode                        = 1));

summary_format := record
	total;
	DID;
	AccountNumber;
	SSNFirstSeen;
	DateLastSeen;
	isRecentUpdate;
	NumSources;
	isPhoneFullNameMatch;
	isPhoneLastNameMatch;
	isSSNInvalid;
	isPhoneInvalid;
	isAddrInvalid;
	isDLInvalid;
	isNoVer;
	isDeceased;
	DeceasedDate;
	isSSNValid;
	isRecentIssue;
	LowIssueDate;
	HighIssueDate;
	IssueState;
	isNonUS;
	isIssued3;
	isIssuedAge5;
	IADateFirstReported;
	IADateLastReported;
	IALenOfRes;
	IADwellType;
	IALandUseCode;
	IAAssessedValue;
	IAisOwnedBySubject;
	IAisFamilyOwned;
	IAisOccupantOwned;
	IALastSaleDate;
	IALastSaleAmount;
	IAisNotPrimaryRes;
	IAPhoneListed;
	IAPhoneNumber;
	CADateFirstReported;
	CADateLastReported;
	CALenOfRes;
	CADwellType;
	CALandUseCode;
	CAAssessedValue;
	CAisOwnedBySubject;
	CAisFamilyOwned;
	CAisOccupantOwned;
	CALastSaleDate;
	CALastSaleAmount;
	CAisNotPrimaryRes;
	CAPhoneListed;
	CAPhoneNumber;
	PADateFirstReported;
	PADateLastReported;
	PALenOfRes;
	PADwellType;
	PALandUseCode;
	PAAssessedValue;
	PAisOwnedBySubject;
	PAisFamilyOwned;
	PAisOccupantOwned;
	PALastSaleDate;
	PALastSaleAmount;
	PAisNotPrimaryRes;
	PAPhoneListed;
	PAPhoneNumber;
	isInputCurrMatch;
	DistInputCurr;
	isDiffState;
	AssessedDiff;
	EcoTrajectory;
	isInputPrevMatch;
	DistCurrPrev;
	isDiffState2;
	AssessedDiff2;
	EcoTrajectory2;
	mobility_indicator;
	statusAddr;
	statusAddr2;
	statusAddr3;
	PADateFirstReported2;
	NPADateFirstReported;
	addrChanges30;
	addrChanges90;
	addrChanges180;
	addrChanges12;
	addrChanges24;
	addrChanges36;
	addrChanges60;
	property_owned_total;
	property_owned_assessed_total;
	property_historically_owned;
	date_first_purchase;
	date_most_recent_purchase;
	date_most_recent_sale;
	numPurchase30;
	numPurchase90;
	numPurchase180;
	numPurchase12;
	numPurchase24;
	numPurchase36;
	numPurchase60;
	numSold30;
	numSold90;
	numSold180;
	numSold12;
	numSold24;
	numSold36;
	numSold60;
	numWatercraft;
	numWatercraft30;
	numWatercraft90;
	numWatercraft180;
	numWatercraft12;
	numWatercraft24;
	numWatercraft36;
	numWatercraft60;
	numAircraft;
	numAircraft30;
	numAircraft90;
	numAircraft180;
	numAircraft12;
	numAircraft24;
	numAircraft36;
	numAircraft60;
	wealth_indicator;
	total_number_derogs;
	date_last_derog;
	felonies;
	date_last_conviction;
	felonies30;
	felonies90;
	felonies180;
	felonies12;
	felonies24;
	felonies36;
	felonies60;
	num_liens;
	num_unreleased_liens;
	date_last_unreleased;
	num_unreleased_liens30;
	num_unreleased_liens90;
	num_unreleased_liens180;
	num_unreleased_liens12;
	num_unreleased_liens24;
	num_unreleased_liens36;
	num_unreleased_liens60;
	num_released_liens;
	date_last_released;
	num_released_liens30;
	num_released_liens90;
	num_released_liens180;
	num_released_liens12;
	num_released_liens24;
	num_released_liens36;
	num_released_liens60;
	bankruptcy_count;
	date_last_bankruptcy;
	filing_type;
	disposition;
	bankruptcy_count30;
	bankruptcy_count90;
	bankruptcy_count180;
	bankruptcy_count12;
	bankruptcy_count24;
	bankruptcy_count36;
	bankruptcy_count60;
	eviction_count;
	date_last_eviction;
	eviction_count30;
	eviction_count90;
	eviction_count180;
	eviction_count12;
	eviction_count24;
	eviction_count36;
	eviction_count60;
	num_nonderogs;
	num_nonderogs30;
	num_nonderogs90;
	num_nonderogs180;
	num_nonderogs12;
	num_nonderogs24;
	num_nonderogs36;
	num_nonderogs60;
	num_proflic;
	date_last_proflic;
	proflic_type;
	expire_date_last_proflic;
	num_proflic30;
	num_proflic90;
	num_proflic180;
	num_proflic12;
	num_proflic24;
	num_proflic36;
	num_proflic60;
	num_proflic_exp30;
	num_proflic_exp90;
	num_proflic_exp180;
	num_proflic_exp12;
	num_proflic_exp24;
	num_proflic_exp36;
	num_proflic_exp60;
	isAddrHighRisk;
	isPhoneHighRisk;
	isAddrPrison;
	isZipPOBox;
	isZipCorpMil;
	phoneStatus;
	isPhonePager;
	isPhoneMobile;
	isPhoneZipMismatch;
	phoneAddrDist;
	correctedFlag;
	disputeFlag;
	securityFreeze;
	securityAlert;
	negativeAlert;
	idTheftFlag;
	history_date;
	errorcode;
END;

summary_res := table(res, summary_format, total);	
output(summary_res);

endmacro;