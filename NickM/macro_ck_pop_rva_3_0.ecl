export macro_ck_pop_rva_3_0(date, adate) := macro
#workunit('name','RVA 3.0 Tracking Populated Fields');
#option ('hthorMemoryLimit', 1000)

IMPORT Risk_Indicators;

//===================  input file  ======================
infile :=  '~nmontpetit::out::rva_30_tracking_'+(string)date+'_'+(string)adate;

layout_rva_30 := RECORD
	string30 AccountNumber;
	string4 AgeOldestRecord; 
	string4 AgeNewestRecord; 
	string1 isRecentUpdate;
	string3 NumSources;
	string1 InvalidSSN; 
	string1 InvalidAddr; 
	string1 InvalidDL; 
	string1 InvalidPhone; 
	string1 isNoVer;
	string1 SSNNotFound;
	string3 VerifiedName;
	string3 VerifiedSSN;
	string3 VerifiedPhone;
	string1 VerifiedPhoneFullName;
	string1 VerifiedPhoneLastName;
	string3 VerifiedAddress;
	string3 VerifiedDOB;
	string3 InferredMinimumAge;
	string3 BestReportedAge;
	string3 SubjectSSNCount;
	string3 SubjectAddrCount;
	string3 SubjectPhoneCount;
	string3 SubjectSSNRecentCount;
	string3 SubjectAddrRecentCount;
	string3 SubjectPhoneRecentCount;
	string3 SSNIdentitiesCount;
	string3 SSNAddrCount;
	string3 SSNIdentitiesRecentCount;
	string3 SSNAddrRecentCount;
	string3 InputAddrIdentitiesCount;
	string3 InputAddrSSNCount;
	string3 InputAddrPhoneCount;
	string3 InputAddrIdentitiesRecentCount;
	string3 InputAddrSSNRecentCount;
	string3 InputAddrPhoneRecentCount;
	string3 PhoneIdentitiesCount;
	string3 PhoneIdentitiesRecentCount;	
	string1 SSNDeceased;
	string8 DeceasedDate;
	string1 SSNValid;
	string1 RecentIssue;
	string8 LowIssueDate;
	string8 HighIssueDate;
	string2 IssueState;
	string1 NonUS;
	string1 SSNIssuedPriorDOB;
	string1 Issued3;
	string1 IssuedAge5;

	string4 IAAgeOldestRecord;
	string4 IAAgeNewestRecord;
	string4 IALenOfRes;
	string1 IADwellType;
	string1 IALandUseCode;
	string1 IAOwnedBySubject;
	string1 IAFamilyOwned;
	string1 IAOccupantOwned;
	string4 IAAgeLastSale;
	string IALastSaleAmount;
	string1 IANotPrimaryRes;
	string1 IAPhoneListed;
	string10 IAPhoneNumber;
	string IAAssessedValue;
	string4 InputAddrTaxYr;
	string14 InputAddrTaxMarketValue;
	string14 InputAddrAVMTax;
	string14 InputAddrAVMSalesPrice;
	string14 InputAddrAVMHedonic;
	string14 InputAddrAVMValue;
	string3 InputAddrAVMConfidence;
	string8 InputAddrCountyIndex;
	string8 InputAddrTractIndex;
	string8 InputAddrBlockIndex;
	
	string4 CAAgeOldestRecord;
	string4 CAAgeNewestRecord;
	string4 CALenOfRes;
	string1 CADwellType;
	string1 CALandUseCode;
	string1 CAOwnedBySubject;
	string1 CAFamilyOwned;
	string1 CAOccupantOwned;
	string4 CAAgeLastSale;
	string CALastSaleAmount;
	string1 CANotPrimaryRes;
	string1 CAPhoneListed;
	string10 CAPhoneNumber;
	string CAAssessedValue;
	string4 CurrAddrTaxYr;
	string14 CurrAddrTaxMarketValue;
	string14 CurrAddrAVMTax;
	string14 CurrAddrAVMSalesPrice;
	string14 CurrAddrAVMHedonic;
	string14 CurrAddrAVMValue;
	string3 CurrAddrAVMConfidence;
	string8 CurrAddrCountyIndex;
	string8 CurrAddrTractIndex;
	string8 CurrAddrBlockIndex;
	
	string4 PAAgeOldestRecord;
	string4 PAAgeNewestRecord;
	string4 PALenOfRes;
	string1 PADwellType;
	string1 PALandUseCode;
	string1 PAOwnedBySubject;
	string1 PAFamilyOwned;
	string1 PAOccupantOwned;
	string4 PAAgeLastSale;
	string PALastSaleAmount;
	string1 PAPhoneListed;
	string10 PAPhoneNumber;
	string PAAssessedValue;
	string4 PrevAddrTaxYr;
	string14 PrevAddrTaxMarketValue;
	string14 PrevAddrAVMTax;
	string14 PrevAddrAVMSalesPrice;
	string14 PrevAddrAVMHedonic;
	string14 PrevAddrAVMValue;
	string3 PrevAddrAVMConfidence;
	string8 PrevAddrCountyIndex;
	string8 PrevAddrTractIndex;
	string8 PrevAddrBlockIndex;
	
	string1 InputCurrMatch;
	string DistInputCurr;
	string1 DiffState;
	string AssessedDiff;
	string2 EcoTrajectory;
	
	string1 InputPrevMatch;
	string DistCurrPrev;
	string1 DiffState2;
	string AssessedDiff2;
	string2 EcoTrajectory2;
	
	string1 EducationAttendedCollege;
	string1 EducationProgram2Yr;
	string1 EducationProgram4Yr;
	string1 EducationProgramGraduate;
	string1 EducationInstitutionPrivate;
	string1 EducationInstitutionRating;
	
	string1 mobility_indicator;
	string1 statusAddr;
	string1 statusAddr2;
	string1 statusAddr3;
	string3 addrChanges30;
	string3 addrChanges90;
	string3 addrChanges180;
	string3 addrChanges12;
	string3 addrChanges24;
	string3 addrChanges36;
	string3 addrChanges60;

	string PredictedAnnualIncome;
	
	string3 property_owned_total;
	string14 property_owned_assessed_total;
	string3 property_historically_owned;
	string4 PropAgeOldestPurchase;
	string4 PropAgeNewestPurchase;
	string4 PropAgeNewestSale;
	string14 PropNewestSalePrice;
	string8 PropNewestSalePurchaseIndex;
	
	string3 numPurchase30;
	string3 numPurchase90;
	string3 numPurchase180;
	string3 numPurchase12;
	string3 numPurchase24;
	string3 numPurchase36;
	string3 numPurchase60;
	
	string3 numSold30;
	string3 numSold90;
	string3 numSold180;
	string3 numSold12;
	string3 numSold24;
	string3 numSold36;
	string3 numSold60;
	
	string3 numWatercraft;
	string3 numWatercraft30;
	string3 numWatercraft90;
	string3 numWatercraft180;
	string3 numWatercraft12;
	string3 numWatercraft24;
	string3 numWatercraft36;
	string3 numWatercraft60;
	
	string3 numAircraft;
	string3 numAircraft30;
	string3 numAircraft90;
	string3 numAircraft180;
	string3 numAircraft12;
	string3 numAircraft24;
	string3 numAircraft36;
	string3 numAircraft60;
	
	string1 wealth_indicator;

	string3 SubPrimeSolicitedCount;
	string3 SubPrimeSolicitedCount01;
	string3 SubprimeSolicitedCount03;
	string3 SubprimeSolicitedCount06;
	string3 SubPrimeSolicitedCount12;
	string3 SubPrimeSolicitedCount24;
	string3 SubPrimeSolicitedCount36;
	string3 SubPrimeSolicitedCount60;
	

	string3 total_number_derogs;
	string4 DerogAge;
	
	string3 felonies;
	string4 FelonyAge;
	string3 felonies30;
	string3 felonies90;
	string3 felonies180;
	string3 felonies12;
	string3 felonies24;
	string3 felonies36;
	string3 felonies60;
	
	string3 num_liens;
	string3 num_unreleased_liens;
	string4 LienFiledAge;
	string3 num_unreleased_liens30;
	string3 num_unreleased_liens90;
	string3 num_unreleased_liens180;
	string3 num_unreleased_liens12;
	string3 num_unreleased_liens24;
	string3 num_unreleased_liens36;
	string3 num_unreleased_liens60;
	
	string3 num_released_liens;
	string4 LienReleasedAge;
	string3 num_released_liens30;
	string3 num_released_liens90;
	string3 num_released_liens180;
	string3 num_released_liens12;
	string3 num_released_liens24;
	string3 num_released_liens36;
	string3 num_released_liens60;
	
	string14 LienFederalTaxFiledTotal;
	string14 LienTaxOtherFiledTotal;
	string14 LienForeclosureFiledTotal;
	string14 LienPreforeclosureFiledTotal;
	string14 LienLandlordTenantFiledTotal;
	string14 LienJudgmentFiledTotal;
	string14 LienSmallClaimsFiledTotal;
	string14 LienOtherFiledTotal;
	string14 LienFederalTaxReleasedTotal;
	string14 LienTaxOtherReleasedTotal;
	string14 LienForeclosureReleasedTotal;
	string14 LienPreforeclosureReleasedTotal;
	string14 LienLandlordTenantReleasedTotal;
	string14 LienJudgmentReleasedTotal;
	string14 LienSmallClaimsReleasedTotal;
	string14 LienOtherReleasedTotal;
	
	string3 LienFederalTaxFiledCount;
	string3 LienTaxOtherFiledCount;
	string3 LienForeclosureFiledCount;
	string3 LienPreforeclosureFiledCount;
	string3 LienLandlordTenantFiledCount;
	string3 LienJudgmentFiledCount;
	string3 LienSmallClaimsFiledCount;
	string3 LienOtherFiledCount;
	string3 LienFederalTaxReleasedCount;
	string3 LienTaxOtherReleasedCount;
	string3 LienForeclosureReleasedCount;
	string3 LienPreforeclosureReleasedCount;
	string3 LienLandlordTenantReleasedCount;
	string3 LienJudgmentReleasedCount;
	string3 LienSmallClaimsReleasedCount;
	string3 LienOtherReleasedCount;
	
	string3 bankruptcy_count;
	string4 BankruptcyAge;
	STRING1 filing_type;
	STRING35 disposition;
	string3 bankruptcy_count30;
	string3 bankruptcy_count90;
	string3 bankruptcy_count180;
	string3 bankruptcy_count12;
	string3 bankruptcy_count24;
	string3 bankruptcy_count36;
	string3 bankruptcy_count60;
	
	string3 eviction_count;
	string4 EvictionAge;
	string3 eviction_count30;
	string3 eviction_count90;
	string3 eviction_count180;
	string3 eviction_count12;
	string3 eviction_count24;
	string3 eviction_count36;
	string3 eviction_count60;

	string3 num_nonderogs;
	string3 num_nonderogs30;
	string3 num_nonderogs90;
	string3 num_nonderogs180;
	string3 num_nonderogs12;
	string3 num_nonderogs24;
	string3 num_nonderogs36;
	string3 num_nonderogs60;
	
	string3 num_proflic;
	string4 ProfLicAge;
	string60 proflic_type;
	string1 ProfLicTypeCategory;
	string8 expire_date_last_proflic;
	string3 num_proflic30;
	string3 num_proflic90;
	string3 num_proflic180;
	string3 num_proflic12;
	string3 num_proflic24;
	string3 num_proflic36;
	string3 num_proflic60;
	
	string3 num_proflic_exp30;
	string3 num_proflic_exp90;
	string3 num_proflic_exp180;
	string3 num_proflic_exp12;
	string3 num_proflic_exp24;
	string3 num_proflic_exp36;
	string3 num_proflic_exp60;
	
	string1 phoneStatus;
	string1 PhonePager;
	string1 PhoneMobile;
	string4 PhoneEDAAgeOldestRecord;
	string4 PhoneEDAAgeNewestRecord;
	string4 PhoneOtherAgeOldestRecord;
	string4 PhoneOtherAgeNewestRecord;
	string1 PhoneZipMismatch;
	string4 phoneAddrDist;
	string1 AddrHighRisk;
	string1 PhoneHighRisk;
	string1 AddrPrison;
	string1 ZipPOBox;
	string1 ZipCorpMil;
	string1 correctedFlag;
	string1 securityFreeze;
	string1 securityAlert;
	string1 idTheftFlag;
	string1 PrescreenOptOut;
	string6 history_date;
	string200  errorcode;
end;

ds_infile := dataset(infile, layout_rva_30, csv(quote('"'), maxlength(32000)));

layout_res := RECORD
	integer AgeOldestRecord;
	integer AgeNewestRecord;
	integer isRecentUpdate;
	integer NumSources;
	integer InvalidSSN;
	integer InvalidAddr;
	integer InvalidDL;
	integer InvalidPhone;
	integer isNoVer;
	integer SSNNotFound;
	integer VerifiedName;
	integer VerifiedSSN;
	integer VerifiedPhone;
	integer VerifiedPhoneFullName;
	integer VerifiedPhoneLastName;
	integer VerifiedAddress;
	integer VerifiedDOB;
	integer InferredMinimumAge;
	integer BestReportedAge;
	integer SubjectSSNCount;
	integer SubjectAddrCount;
	integer SubjectPhoneCount;
	integer SubjectSSNRecentCount;
	integer SubjectAddrRecentCount;
	integer SubjectPhoneRecentCount;
	integer SSNIdentitiesCount;
	integer SSNAddrCount;
	integer SSNIdentitiesRecentCount;
	integer SSNAddrRecentCount;
	integer InputAddrIdentitiesCount;
	integer InputAddrSSNCount;
	integer InputAddrPhoneCount;
	integer InputAddrIdentitiesRecentCount;
	integer InputAddrSSNRecentCount;
	integer InputAddrPhoneRecentCount;
	integer PhoneIdentitiesCount;
	integer PhoneIdentitiesRecentCount;
	integer SSNDeceased;
	integer DeceasedDate;
	integer SSNValid;
	integer RecentIssue;
	integer LowIssueDate;
	integer HighIssueDate;
	integer IssueState;
	integer NonUS;
	integer SSNIssuedPriorDOB;
	integer Issued3;
	integer IssuedAge5;
	integer IAAgeOldestRecord;
	integer IAAgeNewestRecord;
	integer IALenOfRes;
	integer IADwellType;
	integer IALandUseCode;
	integer IAOwnedBySubject;
	integer IAFamilyOwned;
	integer IAOccupantOwned;
	integer IAAgeLastSale;
	integer IALastSaleAmount;
	integer IANotPrimaryRes;
	integer IAPhoneListed;
	integer IAPhoneNumber;
	integer IAAssessedValue;
	integer InputAddrTaxYr;
	integer InputAddrTaxMarketValue;
	integer InputAddrAVMTax;
	integer InputAddrAVMSalesPrice;
	integer InputAddrAVMHedonic;
	integer InputAddrAVMValue;
	integer InputAddrAVMConfidence;
	integer InputAddrCountyIndex;
	integer InputAddrTractIndex;
	integer InputAddrBlockIndex;
	integer CAAgeOldestRecord;
	integer CAAgeNewestRecord;
	integer CALenOfRes;
	integer CADwellType;
	integer CALandUseCode;
	integer CAOwnedBySubject;
	integer CAFamilyOwned;
	integer CAOccupantOwned;
	integer CAAgeLastSale;
	integer CALastSaleAmount;
	integer CANotPrimaryRes;
	integer CAPhoneListed;
	integer CAPhoneNumber;
	integer CAAssessedValue;
	integer CurrAddrTaxYr;
	integer CurrAddrTaxMarketValue;
	integer CurrAddrAVMTax;
	integer CurrAddrAVMSalesPrice;
	integer CurrAddrAVMHedonic;
	integer CurrAddrAVMValue;
	integer CurrAddrAVMConfidence;
	integer CurrAddrCountyIndex;
	integer CurrAddrTractIndex;
	integer CurrAddrBlockIndex;
	integer PAAgeOldestRecord;
	integer PAAgeNewestRecord;
	integer PALenOfRes;
	integer PADwellType;
	integer PALandUseCode;
	integer PAOwnedBySubject;
	integer PAFamilyOwned;
	integer PAOccupantOwned;
	integer PAAgeLastSale;
	integer PALastSaleAmount;
	integer PAPhoneListed;
	integer PAPhoneNumber;
	integer PAAssessedValue;
	integer PrevAddrTaxYr;
	integer PrevAddrTaxMarketValue;
	integer PrevAddrAVMTax;
	integer PrevAddrAVMSalesPrice;
	integer PrevAddrAVMHedonic;
	integer PrevAddrAVMValue;
	integer PrevAddrAVMConfidence;
	integer PrevAddrCountyIndex;
	integer PrevAddrTractIndex;
	integer PrevAddrBlockIndex;
	integer InputCurrMatch;
	integer DistInputCurr;
	integer DiffState;
	integer AssessedDiff;
	integer EcoTrajectory;
	integer InputPrevMatch;
	integer DistCurrPrev;
	integer DiffState2;
	integer AssessedDiff2;
	integer EcoTrajectory2;
	integer EducationAttendedCollege;
	integer EducationProgram2Yr;
	integer EducationProgram4Yr;
	integer EducationProgramGraduate;
	integer EducationInstitutionPrivate;
	integer EducationInstitutionRating;
	integer mobility_indicator;
	integer statusAddr;
	integer statusAddr2;
	integer statusAddr3;
	integer addrChanges30;
	integer addrChanges90;
	integer addrChanges180;
	integer addrChanges12;
	integer addrChanges24;
	integer addrChanges36;
	integer addrChanges60;
	integer PredictedAnnualIncome;
	integer property_owned_total;
	integer property_owned_assessed_total;
	integer property_historically_owned;
	integer PropAgeOldestPurchase;
	integer PropAgeNewestPurchase;
	integer PropAgeNewestSale;
	integer PropNewestSalePrice;
	integer PropNewestSalePurchaseIndex;
	integer numPurchase30;
	integer numPurchase90;
	integer numPurchase180;
	integer numPurchase12;
	integer numPurchase24;
	integer numPurchase36;
	integer numPurchase60;
	integer numSold30;
	integer numSold90;
	integer numSold180;
	integer numSold12;
	integer numSold24;
	integer numSold36;
	integer numSold60;
	integer numWatercraft;
	integer numWatercraft30;
	integer numWatercraft90;
	integer numWatercraft180;
	integer numWatercraft12;
	integer numWatercraft24;
	integer numWatercraft36;
	integer numWatercraft60;
	integer numAircraft;
	integer numAircraft30;
	integer numAircraft90;
	integer numAircraft180;
	integer numAircraft12;
	integer numAircraft24;
	integer numAircraft36;
	integer numAircraft60;
	integer wealth_indicator;
	integer SubPrimeSolicitedCount;
	integer SubPrimeSolicitedCount01;
	integer SubprimeSolicitedCount03;
	integer SubprimeSolicitedCount06;
	integer SubPrimeSolicitedCount12;
	integer SubPrimeSolicitedCount24;
	integer SubPrimeSolicitedCount36;
	integer SubPrimeSolicitedCount60;
	integer total_number_derogs;
	integer DerogAge;
	integer felonies;
	integer FelonyAge;
	integer felonies30;
	integer felonies90;
	integer felonies180;
	integer felonies12;
	integer felonies24;
	integer felonies36;
	integer felonies60;
	integer num_liens;
	integer num_unreleased_liens;
	integer LienFiledAge;
	integer num_unreleased_liens30;
	integer num_unreleased_liens90;
	integer num_unreleased_liens180;
	integer num_unreleased_liens12;
	integer num_unreleased_liens24;
	integer num_unreleased_liens36;
	integer num_unreleased_liens60;
	integer num_released_liens;
	integer LienReleasedAge;
	integer num_released_liens30;
	integer num_released_liens90;
	integer num_released_liens180;
	integer num_released_liens12;
	integer num_released_liens24;
	integer num_released_liens36;
	integer num_released_liens60;
	integer LienFederalTaxFiledTotal;
	integer LienTaxOtherFiledTotal;
	integer LienForeclosureFiledTotal;
	integer LienPreforeclosureFiledTotal;
	integer LienLandlordTenantFiledTotal;
	integer LienJudgmentFiledTotal;
	integer LienSmallClaimsFiledTotal;
	integer LienOtherFiledTotal;
	integer LienFederalTaxReleasedTotal;
	integer LienTaxOtherReleasedTotal;
	integer LienForeclosureReleasedTotal;
	integer LienPreforeclosureReleasedTotal;
	integer LienLandlordTenantReleasedTotal;
	integer LienJudgmentReleasedTotal;
	integer LienSmallClaimsReleasedTotal;
	integer LienOtherReleasedTotal;
	integer LienFederalTaxFiledCount;
	integer LienTaxOtherFiledCount;
	integer LienForeclosureFiledCount;
	integer LienPreforeclosureFiledCount;
	integer LienLandlordTenantFiledCount;
	integer LienJudgmentFiledCount;
	integer LienSmallClaimsFiledCount;
	integer LienOtherFiledCount;
	integer LienFederalTaxReleasedCount;
	integer LienTaxOtherReleasedCount;
	integer LienForeclosureReleasedCount;
	integer LienPreforeclosureReleasedCount;
	integer LienLandlordTenantReleasedCount;
	integer LienJudgmentReleasedCount;
	integer LienSmallClaimsReleasedCount;
	integer LienOtherReleasedCount;
	integer bankruptcy_count;
	integer BankruptcyAge;
	integer filing_type;
	integer disposition;
	integer bankruptcy_count30;
	integer bankruptcy_count90;
	integer bankruptcy_count180;
	integer bankruptcy_count12;
	integer bankruptcy_count24;
	integer bankruptcy_count36;
	integer bankruptcy_count60;
	integer eviction_count;
	integer EvictionAge;
	integer eviction_count30;
	integer eviction_count90;
	integer eviction_count180;
	integer eviction_count12;
	integer eviction_count24;
	integer eviction_count36;
	integer eviction_count60;
	integer num_nonderogs;
	integer num_nonderogs30;
	integer num_nonderogs90;
	integer num_nonderogs180;
	integer num_nonderogs12;
	integer num_nonderogs24;
	integer num_nonderogs36;
	integer num_nonderogs60;
	integer num_proflic;
	integer ProfLicAge;
	integer proflic_type;
	integer ProfLicTypeCategory;
	integer expire_date_last_proflic;
	integer num_proflic30;
	integer num_proflic90;
	integer num_proflic180;
	integer num_proflic12;
	integer num_proflic24;
	integer num_proflic36;
	integer num_proflic60;
	integer num_proflic_exp30;
	integer num_proflic_exp90;
	integer num_proflic_exp180;
	integer num_proflic_exp12;
	integer num_proflic_exp24;
	integer num_proflic_exp36;
	integer num_proflic_exp60;
	integer phoneStatus;
	integer PhonePager;
	integer PhoneMobile;
	integer PhoneEDAAgeOldestRecord;
	integer PhoneEDAAgeNewestRecord;
	integer PhoneOtherAgeOldestRecord;
	integer PhoneOtherAgeNewestRecord;
	integer PhoneZipMismatch;
	integer phoneAddrDist;
	integer AddrHighRisk;
	integer PhoneHighRisk;
	integer AddrPrison;
	integer ZipPOBox;
	integer ZipCorpMil;
	integer correctedFlag;
	integer securityFreeze;
	integer securityAlert;
	integer idTheftFlag;
	integer PrescreenOptOut;
end;	
 
layout_res ck_pop(ds_infile le) := TRANSFORM
	self.AgeOldestRecord                  := (integer)((integer)le.AgeOldestRecord > 0);
	self.AgeNewestRecord                  := (integer)((integer)le.AgeNewestRecord > 0);
	self.isRecentUpdate                   := (integer)((integer)le.isRecentUpdate > 0);
	self.NumSources                       := (integer)((integer)le.NumSources > 0);
	self.InvalidSSN                       := (integer)((integer)le.InvalidSSN > 0);
	self.InvalidAddr                      := (integer)((integer)le.InvalidAddr > 0);
	self.InvalidDL                        := (integer)((integer)le.InvalidDL > 0);
	self.InvalidPhone                     := (integer)((integer)le.InvalidPhone > 0);
	self.isNoVer                          := (integer)((integer)le.isNoVer > 0);
	self.SSNNotFound                      := (integer)((integer)le.SSNNotFound > 0);
	self.VerifiedName                     := (integer)((integer)le.VerifiedName > 0);
	self.VerifiedSSN                      := (integer)((integer)le.VerifiedSSN > 0);
	self.VerifiedPhone                    := (integer)((integer)le.VerifiedPhone > 0);
	self.VerifiedPhoneFullName            := (integer)((integer)le.VerifiedPhoneFullName > 0);
	self.VerifiedPhoneLastName            := (integer)((integer)le.VerifiedPhoneLastName > 0);
	self.VerifiedAddress                  := (integer)((integer)le.VerifiedAddress > 0);
	self.VerifiedDOB                      := (integer)((integer)le.VerifiedDOB > 0);
	self.InferredMinimumAge               := (integer)((integer)le.InferredMinimumAge > 0);
	self.BestReportedAge                  := (integer)((integer)le.BestReportedAge > 0);
	self.SubjectSSNCount                  := (integer)((integer)le.SubjectSSNCount > 0);
	self.SubjectAddrCount                 := (integer)((integer)le.SubjectAddrCount > 0);
	self.SubjectPhoneCount                := (integer)((integer)le.SubjectPhoneCount > 0);
	self.SubjectSSNRecentCount            := (integer)((integer)le.SubjectSSNRecentCount > 0);
	self.SubjectAddrRecentCount           := (integer)((integer)le.SubjectAddrRecentCount > 0);
	self.SubjectPhoneRecentCount          := (integer)((integer)le.SubjectPhoneRecentCount > 0);
	self.SSNIdentitiesCount               := (integer)((integer)le.SSNIdentitiesCount > 0);
	self.SSNAddrCount                     := (integer)((integer)le.SSNAddrCount > 0);
	self.SSNIdentitiesRecentCount         := (integer)((integer)le.SSNIdentitiesRecentCount > 0);
	self.SSNAddrRecentCount               := (integer)((integer)le.SSNAddrRecentCount > 0);
	self.InputAddrIdentitiesCount         := (integer)((integer)le.InputAddrIdentitiesCount > 0);
	self.InputAddrSSNCount                := (integer)((integer)le.InputAddrSSNCount > 0);
	self.InputAddrPhoneCount              := (integer)((integer)le.InputAddrPhoneCount > 0);
	self.InputAddrIdentitiesRecentCount   := (integer)((integer)le.InputAddrIdentitiesRecentCount > 0);
	self.InputAddrSSNRecentCount          := (integer)((integer)le.InputAddrSSNRecentCount > 0);
	self.InputAddrPhoneRecentCount        := (integer)((integer)le.InputAddrPhoneRecentCount > 0);
	self.PhoneIdentitiesCount             := (integer)((integer)le.PhoneIdentitiesCount > 0);
	self.PhoneIdentitiesRecentCount       := (integer)((integer)le.PhoneIdentitiesRecentCount > 0);
	self.SSNDeceased                      := (integer)((integer)le.SSNDeceased > 0);
	self.DeceasedDate                     := (integer)(le.DeceasedDate != ' ');
	self.SSNValid                         := (integer)((integer)le.SSNValid > 0);
	self.RecentIssue                      := (integer)((integer)le.RecentIssue > 0);
	self.LowIssueDate                     := (integer)((integer)le.LowIssueDate > 0);
	self.HighIssueDate                    := (integer)((integer)le.HighIssueDate > 0);
	self.IssueState                       := (integer)(le.IssueState != ' ');
	self.NonUS                            := (integer)((integer)le.NonUS > 0);
	self.SSNIssuedPriorDOB                := (integer)((integer)le.SSNIssuedPriorDOB > 0);
	self.Issued3                          := (integer)((integer)le.Issued3 > 0);
	self.IssuedAge5                       := (integer)((integer)le.IssuedAge5 > 0);
	self.IAAgeOldestRecord                := (integer)((integer)le.IAAgeOldestRecord > 0);
	self.IAAgeNewestRecord                := (integer)((integer)le.IAAgeNewestRecord > 0);
	self.IALenOfRes                       := (integer)((integer)le.IALenOfRes > 0);
	self.IADwellType                      := (integer)(le.IADwellType != ' ');
	self.IALandUseCode                    := (integer)(le.IALandUseCode != ' ');
	self.IAOwnedBySubject                 := (integer)((integer)le.IAOwnedBySubject > 0);
	self.IAFamilyOwned                    := (integer)((integer)le.IAFamilyOwned > 0);
	self.IAOccupantOwned                  := (integer)((integer)le.IAOccupantOwned > 0);
	self.IAAgeLastSale                    := (integer)((integer)le.IAAgeLastSale > 0);
	self.IALastSaleAmount                 := (integer)((integer)le.IALastSaleAmount > 0);
	self.IANotPrimaryRes                  := (integer)((integer)le.IANotPrimaryRes > 0);
	self.IAPhoneListed                    := (integer)((integer)le.IAPhoneListed > 0);
	self.IAPhoneNumber                    := (integer)(le.IAPhoneNumber != ' ');
	self.IAAssessedValue                  := (integer)((integer)le.IAAssessedValue > 0);
	self.InputAddrTaxYr                   := (integer)(le.InputAddrTaxYr != ' ');
	self.InputAddrTaxMarketValue          := (integer)((integer)le.InputAddrTaxMarketValue > 0);
	self.InputAddrAVMTax                  := (integer)((integer)le.InputAddrAVMTax > 0);
	self.InputAddrAVMSalesPrice           := (integer)((integer)le.InputAddrAVMSalesPrice > 0);
	self.InputAddrAVMHedonic              := (integer)((integer)le.InputAddrAVMHedonic > 0);
	self.InputAddrAVMValue                := (integer)((integer)le.InputAddrAVMValue > 0);
	self.InputAddrAVMConfidence           := (integer)((integer)le.InputAddrAVMConfidence > 0);
	self.InputAddrCountyIndex             := (integer)((integer)le.InputAddrCountyIndex > 0);
	self.InputAddrTractIndex              := (integer)((integer)le.InputAddrTractIndex > 0);
	self.InputAddrBlockIndex              := (integer)((integer)le.InputAddrBlockIndex > 0);
	self.CAAgeOldestRecord                := (integer)((integer)le.CAAgeOldestRecord > 0);
	self.CAAgeNewestRecord                := (integer)((integer)le.CAAgeNewestRecord > 0);
	self.CALenOfRes                       := (integer)((integer)le.CALenOfRes > 0);
	self.CADwellType                      := (integer)(le.CADwellType != ' ');
	self.CALandUseCode                    := (integer)(le.CALandUseCode != ' ');
	self.CAOwnedBySubject                 := (integer)((integer)le.CAOwnedBySubject > 0);
	self.CAFamilyOwned                    := (integer)((integer)le.CAFamilyOwned > 0);
	self.CAOccupantOwned                  := (integer)((integer)le.CAOccupantOwned > 0);
	self.CAAgeLastSale                    := (integer)((integer)le.CAAgeLastSale > 0);
	self.CALastSaleAmount                 := (integer)((integer)le.CALastSaleAmount > 0);
	self.CANotPrimaryRes                  := (integer)((integer)le.CANotPrimaryRes > 0);
	self.CAPhoneListed                    := (integer)((integer)le.CAPhoneListed > 0);
	self.CAPhoneNumber                    := (integer)(le.CAPhoneNumber != ' ');
	self.CAAssessedValue                  := (integer)((integer)le.CAAssessedValue > 0);
	self.CurrAddrTaxYr                    := (integer)(le.CurrAddrTaxYr != ' ');
	self.CurrAddrTaxMarketValue           := (integer)((integer)le.CurrAddrTaxMarketValue > 0);
	self.CurrAddrAVMTax                   := (integer)((integer)le.CurrAddrAVMTax > 0);
	self.CurrAddrAVMSalesPrice            := (integer)((integer)le.CurrAddrAVMSalesPrice > 0);
	self.CurrAddrAVMHedonic               := (integer)((integer)le.CurrAddrAVMHedonic > 0);
	self.CurrAddrAVMValue                 := (integer)((integer)le.CurrAddrAVMValue > 0);
	self.CurrAddrAVMConfidence            := (integer)((integer)le.CurrAddrAVMConfidence > 0);
	self.CurrAddrCountyIndex              := (integer)((integer)le.CurrAddrCountyIndex > 0);
	self.CurrAddrTractIndex               := (integer)((integer)le.CurrAddrTractIndex > 0);
	self.CurrAddrBlockIndex               := (integer)((integer)le.CurrAddrBlockIndex > 0);
	self.PAAgeOldestRecord                := (integer)((integer)le.PAAgeOldestRecord > 0);
	self.PAAgeNewestRecord                := (integer)((integer)le.PAAgeNewestRecord > 0);
	self.PALenOfRes                       := (integer)((integer)le.PALenOfRes > 0);
	self.PADwellType                      := (integer)(le.PADwellType != ' ');
	self.PALandUseCode                    := (integer)(le.PALandUseCode != ' ');
	self.PAOwnedBySubject                 := (integer)((integer)le.PAOwnedBySubject > 0);
	self.PAFamilyOwned                    := (integer)((integer)le.PAFamilyOwned > 0);
	self.PAOccupantOwned                  := (integer)((integer)le.PAOccupantOwned > 0);
	self.PAAgeLastSale                    := (integer)((integer)le.PAAgeLastSale > 0);
	self.PALastSaleAmount                 := (integer)((integer)le.PALastSaleAmount > 0);
	self.PAPhoneListed                    := (integer)((integer)le.PAPhoneListed > 0);
	self.PAPhoneNumber                    := (integer)(le.PAPhoneNumber != ' ');
	self.PAAssessedValue                  := (integer)((integer)le.PAAssessedValue > 0);
	self.PrevAddrTaxYr                    := (integer)(le.PrevAddrTaxYr != ' ');
	self.PrevAddrTaxMarketValue           := (integer)((integer)le.PrevAddrTaxMarketValue > 0);
	self.PrevAddrAVMTax                   := (integer)((integer)le.PrevAddrAVMTax > 0);
	self.PrevAddrAVMSalesPrice            := (integer)((integer)le.PrevAddrAVMSalesPrice > 0);
	self.PrevAddrAVMHedonic               := (integer)((integer)le.PrevAddrAVMHedonic > 0);
	self.PrevAddrAVMValue                 := (integer)((integer)le.PrevAddrAVMValue > 0);
	self.PrevAddrAVMConfidence            := (integer)((integer)le.PrevAddrAVMConfidence > 0);
	self.PrevAddrCountyIndex              := (integer)((integer)le.PrevAddrCountyIndex > 0);
	self.PrevAddrTractIndex               := (integer)((integer)le.PrevAddrTractIndex > 0);
	self.PrevAddrBlockIndex               := (integer)((integer)le.PrevAddrBlockIndex > 0);
	self.InputCurrMatch                   := (integer)((integer)le.InputCurrMatch > 0);
	self.DistInputCurr                    := (integer)((integer)le.DistInputCurr > 0);
	self.DiffState                        := (integer)((integer)le.DiffState > 0);
	self.AssessedDiff                     := (integer)(le.AssessedDiff != ' ');
	self.EcoTrajectory                    := (integer)(le.EcoTrajectory != ' ');
	self.InputPrevMatch                   := (integer)((integer)le.InputPrevMatch > 0);
	self.DistCurrPrev                     := (integer)((integer)le.DistCurrPrev > 0);
	self.DiffState2                       := (integer)((integer)le.DiffState2 > 0);
	self.AssessedDiff2                    := (integer)(le.AssessedDiff2 != ' ');
	self.EcoTrajectory2                   := (integer)(le.EcoTrajectory2 != ' ');
	self.EducationAttendedCollege         := (integer)((integer)le.EducationAttendedCollege > 0);
	self.EducationProgram2Yr              := (integer)((integer)le.EducationProgram2Yr > 0);
	self.EducationProgram4Yr              := (integer)((integer)le.EducationProgram4Yr > 0);
	self.EducationProgramGraduate         := (integer)((integer)le.EducationProgramGraduate > 0);
	self.EducationInstitutionPrivate      := (integer)((integer)le.EducationInstitutionPrivate > 0);
	self.EducationInstitutionRating       := (integer)((integer)le.EducationInstitutionRating > 0);
	self.mobility_indicator               := (integer)((integer)le.mobility_indicator > 0);
	self.statusAddr                       := (integer)(le.statusAddr != ' ');
	self.statusAddr2                      := (integer)(le.statusAddr2 != ' ');
	self.statusAddr3                      := (integer)(le.statusAddr3 != ' ');
	self.addrChanges30                    := (integer)((integer)le.addrChanges30 > 0);
	self.addrChanges90                    := (integer)((integer)le.addrChanges90 > 0);
	self.addrChanges180                   := (integer)((integer)le.addrChanges180 > 0);
	self.addrChanges12                    := (integer)((integer)le.addrChanges12 > 0);
	self.addrChanges24                    := (integer)((integer)le.addrChanges24 > 0);
	self.addrChanges36                    := (integer)((integer)le.addrChanges36 > 0);
	self.addrChanges60                    := (integer)((integer)le.addrChanges60 > 0);
	self.PredictedAnnualIncome            := (integer)((integer)le.PredictedAnnualIncome > 0);
	self.property_owned_total             := (integer)((integer)le.property_owned_total > 0);
	self.property_owned_assessed_total    := (integer)((integer)le.property_owned_assessed_total > 0);
	self.property_historically_owned      := (integer)((integer)le.property_historically_owned > 0);
	self.PropAgeOldestPurchase            := (integer)((integer)le.PropAgeOldestPurchase > 0);
	self.PropAgeNewestPurchase            := (integer)((integer)le.PropAgeNewestPurchase > 0);
	self.PropAgeNewestSale                := (integer)((integer)le.PropAgeNewestSale > 0);
	self.PropNewestSalePrice              := (integer)((integer)le.PropNewestSalePrice > 0);
	self.PropNewestSalePurchaseIndex      := (integer)((integer)le.PropNewestSalePurchaseIndex > 0);
	self.numPurchase30                    := (integer)((integer)le.numPurchase30 > 0);
	self.numPurchase90                    := (integer)((integer)le.numPurchase90 > 0);
	self.numPurchase180                   := (integer)((integer)le.numPurchase180 > 0);
	self.numPurchase12                    := (integer)((integer)le.numPurchase12 > 0);
	self.numPurchase24                    := (integer)((integer)le.numPurchase24 > 0);
	self.numPurchase36                    := (integer)((integer)le.numPurchase36 > 0);
	self.numPurchase60                    := (integer)((integer)le.numPurchase60 > 0);
	self.numSold30                        := (integer)((integer)le.numSold30 > 0);
	self.numSold90                        := (integer)((integer)le.numSold90 > 0);
	self.numSold180                       := (integer)((integer)le.numSold180 > 0);
	self.numSold12                        := (integer)((integer)le.numSold12 > 0);
	self.numSold24                        := (integer)((integer)le.numSold24 > 0);
	self.numSold36                        := (integer)((integer)le.numSold36 > 0);
	self.numSold60                        := (integer)((integer)le.numSold60 > 0);
	self.numWatercraft                    := (integer)((integer)le.numWatercraft > 0);
	self.numWatercraft30                  := (integer)((integer)le.numWatercraft30 > 0);
	self.numWatercraft90                  := (integer)((integer)le.numWatercraft90 > 0);
	self.numWatercraft180                 := (integer)((integer)le.numWatercraft180 > 0);
	self.numWatercraft12                  := (integer)((integer)le.numWatercraft12 > 0);
	self.numWatercraft24                  := (integer)((integer)le.numWatercraft24 > 0);
	self.numWatercraft36                  := (integer)((integer)le.numWatercraft36 > 0);
	self.numWatercraft60                  := (integer)((integer)le.numWatercraft60 > 0);
	self.numAircraft                      := (integer)((integer)le.numAircraft > 0);
	self.numAircraft30                    := (integer)((integer)le.numAircraft30 > 0);
	self.numAircraft90                    := (integer)((integer)le.numAircraft90 > 0);
	self.numAircraft180                   := (integer)((integer)le.numAircraft180 > 0);
	self.numAircraft12                    := (integer)((integer)le.numAircraft12 > 0);
	self.numAircraft24                    := (integer)((integer)le.numAircraft24 > 0);
	self.numAircraft36                    := (integer)((integer)le.numAircraft36 > 0);
	self.numAircraft60                    := (integer)((integer)le.numAircraft60 > 0);
	self.wealth_indicator                 := (integer)((integer)le.wealth_indicator > 0);
	self.SubPrimeSolicitedCount           := (integer)((integer)le.SubPrimeSolicitedCount > 0);
	self.SubPrimeSolicitedCount01         := (integer)((integer)le.SubPrimeSolicitedCount01 > 0);
	self.SubprimeSolicitedCount03         := (integer)((integer)le.SubprimeSolicitedCount03 > 0);
	self.SubprimeSolicitedCount06         := (integer)((integer)le.SubprimeSolicitedCount06 > 0);
	self.SubPrimeSolicitedCount12         := (integer)((integer)le.SubPrimeSolicitedCount12 > 0);
	self.SubPrimeSolicitedCount24         := (integer)((integer)le.SubPrimeSolicitedCount24 > 0);
	self.SubPrimeSolicitedCount36         := (integer)((integer)le.SubPrimeSolicitedCount36 > 0);
	self.SubPrimeSolicitedCount60         := (integer)((integer)le.SubPrimeSolicitedCount60 > 0);
	self.total_number_derogs              := (integer)((integer)le.total_number_derogs > 0);
	self.DerogAge                         := (integer)((integer)le.DerogAge > 0);
	self.felonies                         := (integer)((integer)le.felonies > 0);
	self.FelonyAge                        := (integer)((integer)le.FelonyAge > 0);
	self.felonies30                       := (integer)((integer)le.felonies30 > 0);
	self.felonies90                       := (integer)((integer)le.felonies90 > 0);
	self.felonies180                      := (integer)((integer)le.felonies180 > 0);
	self.felonies12                       := (integer)((integer)le.felonies12 > 0);
	self.felonies24                       := (integer)((integer)le.felonies24 > 0);
	self.felonies36                       := (integer)((integer)le.felonies36 > 0);
	self.felonies60                       := (integer)((integer)le.felonies60 > 0);
	self.num_liens                        := (integer)((integer)le.num_liens > 0);
	self.num_unreleased_liens             := (integer)((integer)le.num_unreleased_liens > 0);
	self.LienFiledAge                     := (integer)((integer)le.LienFiledAge > 0);
	self.num_unreleased_liens30           := (integer)((integer)le.num_unreleased_liens30 > 0);
	self.num_unreleased_liens90           := (integer)((integer)le.num_unreleased_liens90 > 0);
	self.num_unreleased_liens180          := (integer)((integer)le.num_unreleased_liens180 > 0);
	self.num_unreleased_liens12           := (integer)((integer)le.num_unreleased_liens12 > 0);
	self.num_unreleased_liens24           := (integer)((integer)le.num_unreleased_liens24 > 0);
	self.num_unreleased_liens36           := (integer)((integer)le.num_unreleased_liens36 > 0);
	self.num_unreleased_liens60           := (integer)((integer)le.num_unreleased_liens60 > 0);
	self.num_released_liens               := (integer)((integer)le.num_released_liens > 0);
	self.LienReleasedAge                  := (integer)((integer)le.LienReleasedAge > 0);
	self.num_released_liens30             := (integer)((integer)le.num_released_liens30 > 0);
	self.num_released_liens90             := (integer)((integer)le.num_released_liens90 > 0);
	self.num_released_liens180            := (integer)((integer)le.num_released_liens180 > 0);
	self.num_released_liens12             := (integer)((integer)le.num_released_liens12 > 0);
	self.num_released_liens24             := (integer)((integer)le.num_released_liens24 > 0);
	self.num_released_liens36             := (integer)((integer)le.num_released_liens36 > 0);
	self.num_released_liens60             := (integer)((integer)le.num_released_liens60 > 0);
	self.LienFederalTaxFiledTotal         := (integer)((integer)le.LienFederalTaxFiledTotal > 0);
	self.LienTaxOtherFiledTotal           := (integer)((integer)le.LienTaxOtherFiledTotal > 0);
	self.LienForeclosureFiledTotal        := (integer)((integer)le.LienForeclosureFiledTotal > 0);
	self.LienPreforeclosureFiledTotal     := (integer)((integer)le.LienPreforeclosureFiledTotal > 0);
	self.LienLandlordTenantFiledTotal     := (integer)((integer)le.LienLandlordTenantFiledTotal > 0);
	self.LienJudgmentFiledTotal           := (integer)((integer)le.LienJudgmentFiledTotal > 0);
	self.LienSmallClaimsFiledTotal        := (integer)((integer)le.LienSmallClaimsFiledTotal > 0);
	self.LienOtherFiledTotal              := (integer)((integer)le.LienOtherFiledTotal > 0);
	self.LienFederalTaxReleasedTotal      := (integer)((integer)le.LienFederalTaxReleasedTotal > 0);
	self.LienTaxOtherReleasedTotal        := (integer)((integer)le.LienTaxOtherReleasedTotal > 0);
	self.LienForeclosureReleasedTotal     := (integer)((integer)le.LienForeclosureReleasedTotal > 0);
	self.LienPreforeclosureReleasedTotal  := (integer)((integer)le.LienPreforeclosureReleasedTotal > 0);
	self.LienLandlordTenantReleasedTotal  := (integer)((integer)le.LienLandlordTenantReleasedTotal > 0);
	self.LienJudgmentReleasedTotal        := (integer)((integer)le.LienJudgmentReleasedTotal > 0);
	self.LienSmallClaimsReleasedTotal     := (integer)((integer)le.LienSmallClaimsReleasedTotal > 0);
	self.LienOtherReleasedTotal           := (integer)((integer)le.LienOtherReleasedTotal > 0);
	self.LienFederalTaxFiledCount         := (integer)((integer)le.LienFederalTaxFiledCount > 0);
	self.LienTaxOtherFiledCount           := (integer)((integer)le.LienTaxOtherFiledCount > 0);
	self.LienForeclosureFiledCount        := (integer)((integer)le.LienForeclosureFiledCount > 0);
	self.LienPreforeclosureFiledCount     := (integer)((integer)le.LienPreforeclosureFiledCount > 0);
	self.LienLandlordTenantFiledCount     := (integer)((integer)le.LienLandlordTenantFiledCount > 0);
	self.LienJudgmentFiledCount           := (integer)((integer)le.LienJudgmentFiledCount > 0);
	self.LienSmallClaimsFiledCount        := (integer)((integer)le.LienSmallClaimsFiledCount > 0);
	self.LienOtherFiledCount              := (integer)((integer)le.LienOtherFiledCount > 0);
	self.LienFederalTaxReleasedCount      := (integer)((integer)le.LienFederalTaxReleasedCount > 0);
	self.LienTaxOtherReleasedCount        := (integer)((integer)le.LienTaxOtherReleasedCount > 0);
	self.LienForeclosureReleasedCount     := (integer)((integer)le.LienForeclosureReleasedCount > 0);
	self.LienPreforeclosureReleasedCount  := (integer)((integer)le.LienPreforeclosureReleasedCount > 0);
	self.LienLandlordTenantReleasedCount  := (integer)((integer)le.LienLandlordTenantReleasedCount > 0);
	self.LienJudgmentReleasedCount        := (integer)((integer)le.LienJudgmentReleasedCount > 0);
	self.LienSmallClaimsReleasedCount     := (integer)((integer)le.LienSmallClaimsReleasedCount > 0);
	self.LienOtherReleasedCount           := (integer)((integer)le.LienOtherReleasedCount > 0);
	self.bankruptcy_count                 := (integer)((integer)le.bankruptcy_count > 0);
	self.BankruptcyAge                    := (integer)((integer)le.BankruptcyAge > 0);
	self.filing_type                      := (integer)(le.filing_type != ' ');
	self.disposition                      := (integer)(le.disposition != ' ');
	self.bankruptcy_count30               := (integer)((integer)le.bankruptcy_count30 > 0);
	self.bankruptcy_count90               := (integer)((integer)le.bankruptcy_count90 > 0);
	self.bankruptcy_count180              := (integer)((integer)le.bankruptcy_count180 > 0);
	self.bankruptcy_count12               := (integer)((integer)le.bankruptcy_count12 > 0);
	self.bankruptcy_count24               := (integer)((integer)le.bankruptcy_count24 > 0);
	self.bankruptcy_count36               := (integer)((integer)le.bankruptcy_count36 > 0);
	self.bankruptcy_count60               := (integer)((integer)le.bankruptcy_count60 > 0);
	self.eviction_count                   := (integer)((integer)le.eviction_count > 0);
	self.EvictionAge                      := (integer)((integer)le.EvictionAge > 0);
	self.eviction_count30                 := (integer)((integer)le.eviction_count30 > 0);
	self.eviction_count90                 := (integer)((integer)le.eviction_count90 > 0);
	self.eviction_count180                := (integer)((integer)le.eviction_count180 > 0);
	self.eviction_count12                 := (integer)((integer)le.eviction_count12 > 0);
	self.eviction_count24                 := (integer)((integer)le.eviction_count24 > 0);
	self.eviction_count36                 := (integer)((integer)le.eviction_count36 > 0);
	self.eviction_count60                 := (integer)((integer)le.eviction_count60 > 0);
	self.num_nonderogs                    := (integer)((integer)le.num_nonderogs > 0);
	self.num_nonderogs30                  := (integer)((integer)le.num_nonderogs30 > 0);
	self.num_nonderogs90                  := (integer)((integer)le.num_nonderogs90 > 0);
	self.num_nonderogs180                 := (integer)((integer)le.num_nonderogs180 > 0);
	self.num_nonderogs12                  := (integer)((integer)le.num_nonderogs12 > 0);
	self.num_nonderogs24                  := (integer)((integer)le.num_nonderogs24 > 0);
	self.num_nonderogs36                  := (integer)((integer)le.num_nonderogs36 > 0);
	self.num_nonderogs60                  := (integer)((integer)le.num_nonderogs60 > 0);
	self.num_proflic                      := (integer)((integer)le.num_proflic > 0);
	self.ProfLicAge                       := (integer)((integer)le.ProfLicAge > 0);
	self.proflic_type                     := (integer)(le.proflic_type != ' ');
	self.ProfLicTypeCategory              := (integer)(le.ProfLicTypeCategory != ' ');
	self.expire_date_last_proflic         := (integer)(le.expire_date_last_proflic != ' ');
	self.num_proflic30                    := (integer)((integer)le.num_proflic30 > 0);
	self.num_proflic90                    := (integer)((integer)le.num_proflic90 > 0);
	self.num_proflic180                   := (integer)((integer)le.num_proflic180 > 0);
	self.num_proflic12                    := (integer)((integer)le.num_proflic12 > 0);
	self.num_proflic24                    := (integer)((integer)le.num_proflic24 > 0);
	self.num_proflic36                    := (integer)((integer)le.num_proflic36 > 0);
	self.num_proflic60                    := (integer)((integer)le.num_proflic60 > 0);
	self.num_proflic_exp30                := (integer)((integer)le.num_proflic_exp30 > 0);
	self.num_proflic_exp90                := (integer)((integer)le.num_proflic_exp90 > 0);
	self.num_proflic_exp180               := (integer)((integer)le.num_proflic_exp180 > 0);
	self.num_proflic_exp12                := (integer)((integer)le.num_proflic_exp12 > 0);
	self.num_proflic_exp24                := (integer)((integer)le.num_proflic_exp24 > 0);
	self.num_proflic_exp36                := (integer)((integer)le.num_proflic_exp36 > 0);
	self.num_proflic_exp60                := (integer)((integer)le.num_proflic_exp60 > 0);
	self.phoneStatus                      := (integer)(le.phoneStatus != ' ');
	self.PhonePager                       := (integer)((integer)le.PhonePager > 0);
	self.PhoneMobile                      := (integer)((integer)le.PhoneMobile > 0);
	self.PhoneEDAAgeOldestRecord          := (integer)((integer)le.PhoneEDAAgeOldestRecord > 0);
	self.PhoneEDAAgeNewestRecord          := (integer)((integer)le.PhoneEDAAgeNewestRecord > 0);
	self.PhoneOtherAgeOldestRecord        := (integer)((integer)le.PhoneOtherAgeOldestRecord > 0);
	self.PhoneOtherAgeNewestRecord        := (integer)((integer)le.PhoneOtherAgeNewestRecord > 0);
	self.PhoneZipMismatch                 := (integer)((integer)le.PhoneZipMismatch > 0);
	self.phoneAddrDist                    := (integer)((integer)le.phoneAddrDist > 0);
	self.AddrHighRisk                     := (integer)((integer)le.AddrHighRisk > 0);
	self.PhoneHighRisk                    := (integer)((integer)le.PhoneHighRisk > 0);
	self.AddrPrison                       := (integer)((integer)le.AddrPrison > 0);
	self.ZipPOBox                         := (integer)((integer)le.ZipPOBox > 0);
	self.ZipCorpMil                       := (integer)((integer)le.ZipCorpMil > 0);
	self.correctedFlag                    := (integer)((integer)le.correctedFlag > 0);
	self.securityFreeze                   := (integer)((integer)le.securityFreeze > 0);
	self.securityAlert                    := (integer)((integer)le.securityAlert > 0);
	self.idTheftFlag                      := (integer)((integer)le.idTheftFlag > 0);
	self.PrescreenOptOut                  := (integer)((integer)le.PrescreenOptOut > 0);
end;

ds_flags := project(ds_infile, ck_pop(LEFT));

total := 											count(ds_flags);
AgeOldestRecord                  := count(ds_flags(AgeOldestRecord = 1));
AgeNewestRecord                  := count(ds_flags(AgeNewestRecord = 1));
isRecentUpdate                   := count(ds_flags(isRecentUpdate = 1));
NumSources                       := count(ds_flags(NumSources = 1));
InvalidSSN                       := count(ds_flags(InvalidSSN = 1));
InvalidAddr                      := count(ds_flags(InvalidAddr = 1));
InvalidDL                        := count(ds_flags(InvalidDL = 1));
InvalidPhone                     := count(ds_flags(InvalidPhone = 1));
isNoVer                          := count(ds_flags(isNoVer = 1));
SSNNotFound                      := count(ds_flags(SSNNotFound = 1));
VerifiedName                     := count(ds_flags(VerifiedName = 1));
VerifiedSSN                      := count(ds_flags(VerifiedSSN = 1));
VerifiedPhone                    := count(ds_flags(VerifiedPhone = 1));
VerifiedPhoneFullName            := count(ds_flags(VerifiedPhoneFullName = 1));
VerifiedPhoneLastName            := count(ds_flags(VerifiedPhoneLastName = 1));
VerifiedAddress                  := count(ds_flags(VerifiedAddress = 1));
VerifiedDOB                      := count(ds_flags(VerifiedDOB = 1));
InferredMinimumAge               := count(ds_flags(InferredMinimumAge = 1));
BestReportedAge                  := count(ds_flags(BestReportedAge = 1));
SubjectSSNCount                  := count(ds_flags(SubjectSSNCount = 1));
SubjectAddrCount                 := count(ds_flags(SubjectAddrCount = 1));
SubjectPhoneCount                := count(ds_flags(SubjectPhoneCount = 1));
SubjectSSNRecentCount            := count(ds_flags(SubjectSSNRecentCount = 1));
SubjectAddrRecentCount           := count(ds_flags(SubjectAddrRecentCount = 1));
SubjectPhoneRecentCount          := count(ds_flags(SubjectPhoneRecentCount = 1));
SSNIdentitiesCount               := count(ds_flags(SSNIdentitiesCount = 1));
SSNAddrCount                     := count(ds_flags(SSNAddrCount = 1));
SSNIdentitiesRecentCount         := count(ds_flags(SSNIdentitiesRecentCount = 1));
SSNAddrRecentCount               := count(ds_flags(SSNAddrRecentCount = 1));
InputAddrIdentitiesCount         := count(ds_flags(InputAddrIdentitiesCount = 1));
InputAddrSSNCount                := count(ds_flags(InputAddrSSNCount = 1));
InputAddrPhoneCount              := count(ds_flags(InputAddrPhoneCount = 1));
InputAddrIdentitiesRecentCount   := count(ds_flags(InputAddrIdentitiesRecentCount = 1));
InputAddrSSNRecentCount          := count(ds_flags(InputAddrSSNRecentCount = 1));
InputAddrPhoneRecentCount        := count(ds_flags(InputAddrPhoneRecentCount = 1));
PhoneIdentitiesCount             := count(ds_flags(PhoneIdentitiesCount = 1));
PhoneIdentitiesRecentCount       := count(ds_flags(PhoneIdentitiesRecentCount = 1));
SSNDeceased                      := count(ds_flags(SSNDeceased = 1));
DeceasedDate                     := count(ds_flags(DeceasedDate = 1));
SSNValid                         := count(ds_flags(SSNValid = 1));
RecentIssue                      := count(ds_flags(RecentIssue = 1));
LowIssueDate                     := count(ds_flags(LowIssueDate = 1));
HighIssueDate                    := count(ds_flags(HighIssueDate = 1));
IssueState                       := count(ds_flags(IssueState = 1));
NonUS                            := count(ds_flags(NonUS = 1));
SSNIssuedPriorDOB                := count(ds_flags(SSNIssuedPriorDOB = 1));
Issued3                          := count(ds_flags(Issued3 = 1));
IssuedAge5                       := count(ds_flags(IssuedAge5 = 1));
IAAgeOldestRecord                := count(ds_flags(IAAgeOldestRecord = 1));
IAAgeNewestRecord                := count(ds_flags(IAAgeNewestRecord = 1));
IALenOfRes                       := count(ds_flags(IALenOfRes = 1));
IADwellType                      := count(ds_flags(IADwellType = 1));
IALandUseCode                    := count(ds_flags(IALandUseCode = 1));
IAOwnedBySubject                 := count(ds_flags(IAOwnedBySubject = 1));
IAFamilyOwned                    := count(ds_flags(IAFamilyOwned = 1));
IAOccupantOwned                  := count(ds_flags(IAOccupantOwned = 1));
IAAgeLastSale                    := count(ds_flags(IAAgeLastSale = 1));
IALastSaleAmount                 := count(ds_flags(IALastSaleAmount = 1));
IANotPrimaryRes                  := count(ds_flags(IANotPrimaryRes = 1));
IAPhoneListed                    := count(ds_flags(IAPhoneListed = 1));
IAPhoneNumber                    := count(ds_flags(IAPhoneNumber = 1));
IAAssessedValue                  := count(ds_flags(IAAssessedValue = 1));
InputAddrTaxYr                   := count(ds_flags(InputAddrTaxYr = 1));
InputAddrTaxMarketValue          := count(ds_flags(InputAddrTaxMarketValue = 1));
InputAddrAVMTax                  := count(ds_flags(InputAddrAVMTax = 1));
InputAddrAVMSalesPrice           := count(ds_flags(InputAddrAVMSalesPrice = 1));
InputAddrAVMHedonic              := count(ds_flags(InputAddrAVMHedonic = 1));
InputAddrAVMValue                := count(ds_flags(InputAddrAVMValue = 1));
InputAddrAVMConfidence           := count(ds_flags(InputAddrAVMConfidence = 1));
InputAddrCountyIndex             := count(ds_flags(InputAddrCountyIndex = 1));
InputAddrTractIndex              := count(ds_flags(InputAddrTractIndex = 1));
InputAddrBlockIndex              := count(ds_flags(InputAddrBlockIndex = 1));
CAAgeOldestRecord                := count(ds_flags(CAAgeOldestRecord = 1));
CAAgeNewestRecord                := count(ds_flags(CAAgeNewestRecord = 1));
CALenOfRes                       := count(ds_flags(CALenOfRes = 1));
CADwellType                      := count(ds_flags(CADwellType = 1));
CALandUseCode                    := count(ds_flags(CALandUseCode = 1));
CAOwnedBySubject                 := count(ds_flags(CAOwnedBySubject = 1));
CAFamilyOwned                    := count(ds_flags(CAFamilyOwned = 1));
CAOccupantOwned                  := count(ds_flags(CAOccupantOwned = 1));
CAAgeLastSale                    := count(ds_flags(CAAgeLastSale = 1));
CALastSaleAmount                 := count(ds_flags(CALastSaleAmount = 1));
CANotPrimaryRes                  := count(ds_flags(CANotPrimaryRes = 1));
CAPhoneListed                    := count(ds_flags(CAPhoneListed = 1));
CAPhoneNumber                    := count(ds_flags(CAPhoneNumber = 1));
CAAssessedValue                  := count(ds_flags(CAAssessedValue = 1));
CurrAddrTaxYr                    := count(ds_flags(CurrAddrTaxYr = 1));
CurrAddrTaxMarketValue           := count(ds_flags(CurrAddrTaxMarketValue = 1));
CurrAddrAVMTax                   := count(ds_flags(CurrAddrAVMTax = 1));
CurrAddrAVMSalesPrice            := count(ds_flags(CurrAddrAVMSalesPrice = 1));
CurrAddrAVMHedonic               := count(ds_flags(CurrAddrAVMHedonic = 1));
CurrAddrAVMValue                 := count(ds_flags(CurrAddrAVMValue = 1));
CurrAddrAVMConfidence            := count(ds_flags(CurrAddrAVMConfidence = 1));
CurrAddrCountyIndex              := count(ds_flags(CurrAddrCountyIndex = 1));
CurrAddrTractIndex               := count(ds_flags(CurrAddrTractIndex = 1));
CurrAddrBlockIndex               := count(ds_flags(CurrAddrBlockIndex = 1));
PAAgeOldestRecord                := count(ds_flags(PAAgeOldestRecord = 1));
PAAgeNewestRecord                := count(ds_flags(PAAgeNewestRecord = 1));
PALenOfRes                       := count(ds_flags(PALenOfRes = 1));
PADwellType                      := count(ds_flags(PADwellType = 1));
PALandUseCode                    := count(ds_flags(PALandUseCode = 1));
PAOwnedBySubject                 := count(ds_flags(PAOwnedBySubject = 1));
PAFamilyOwned                    := count(ds_flags(PAFamilyOwned = 1));
PAOccupantOwned                  := count(ds_flags(PAOccupantOwned = 1));
PAAgeLastSale                    := count(ds_flags(PAAgeLastSale = 1));
PALastSaleAmount                 := count(ds_flags(PALastSaleAmount = 1));
PAPhoneListed                    := count(ds_flags(PAPhoneListed = 1));
PAPhoneNumber                    := count(ds_flags(PAPhoneNumber = 1));
PAAssessedValue                  := count(ds_flags(PAAssessedValue = 1));
PrevAddrTaxYr                    := count(ds_flags(PrevAddrTaxYr = 1));
PrevAddrTaxMarketValue           := count(ds_flags(PrevAddrTaxMarketValue = 1));
PrevAddrAVMTax                   := count(ds_flags(PrevAddrAVMTax = 1));
PrevAddrAVMSalesPrice            := count(ds_flags(PrevAddrAVMSalesPrice = 1));
PrevAddrAVMHedonic               := count(ds_flags(PrevAddrAVMHedonic = 1));
PrevAddrAVMValue                 := count(ds_flags(PrevAddrAVMValue = 1));
PrevAddrAVMConfidence            := count(ds_flags(PrevAddrAVMConfidence = 1));
PrevAddrCountyIndex              := count(ds_flags(PrevAddrCountyIndex = 1));
PrevAddrTractIndex               := count(ds_flags(PrevAddrTractIndex = 1));
PrevAddrBlockIndex               := count(ds_flags(PrevAddrBlockIndex = 1));
InputCurrMatch                   := count(ds_flags(InputCurrMatch = 1));
DistInputCurr                    := count(ds_flags(DistInputCurr = 1));
DiffState                        := count(ds_flags(DiffState = 1));
AssessedDiff                     := count(ds_flags(AssessedDiff = 1));
EcoTrajectory                    := count(ds_flags(EcoTrajectory = 1));
InputPrevMatch                   := count(ds_flags(InputPrevMatch = 1));
DistCurrPrev                     := count(ds_flags(DistCurrPrev = 1));
DiffState2                       := count(ds_flags(DiffState2 = 1));
AssessedDiff2                    := count(ds_flags(AssessedDiff2 = 1));
EcoTrajectory2                   := count(ds_flags(EcoTrajectory2 = 1));
EducationAttendedCollege         := count(ds_flags(EducationAttendedCollege = 1));
EducationProgram2Yr              := count(ds_flags(EducationProgram2Yr = 1));
EducationProgram4Yr              := count(ds_flags(EducationProgram4Yr = 1));
EducationProgramGraduate         := count(ds_flags(EducationProgramGraduate = 1));
EducationInstitutionPrivate      := count(ds_flags(EducationInstitutionPrivate = 1));
EducationInstitutionRating       := count(ds_flags(EducationInstitutionRating = 1));
mobility_indicator               := count(ds_flags(mobility_indicator = 1));
statusAddr                       := count(ds_flags(statusAddr = 1));
statusAddr2                      := count(ds_flags(statusAddr2 = 1));
statusAddr3                      := count(ds_flags(statusAddr3 = 1));
addrChanges30                    := count(ds_flags(addrChanges30 = 1));
addrChanges90                    := count(ds_flags(addrChanges90 = 1));
addrChanges180                   := count(ds_flags(addrChanges180 = 1));
addrChanges12                    := count(ds_flags(addrChanges12 = 1));
addrChanges24                    := count(ds_flags(addrChanges24 = 1));
addrChanges36                    := count(ds_flags(addrChanges36 = 1));
addrChanges60                    := count(ds_flags(addrChanges60 = 1));
PredictedAnnualIncome            := count(ds_flags(PredictedAnnualIncome = 1));
property_owned_total             := count(ds_flags(property_owned_total = 1));
property_owned_assessed_total    := count(ds_flags(property_owned_assessed_total = 1));
property_historically_owned      := count(ds_flags(property_historically_owned = 1));
PropAgeOldestPurchase            := count(ds_flags(PropAgeOldestPurchase = 1));
PropAgeNewestPurchase            := count(ds_flags(PropAgeNewestPurchase = 1));
PropAgeNewestSale                := count(ds_flags(PropAgeNewestSale = 1));
PropNewestSalePrice              := count(ds_flags(PropNewestSalePrice = 1));
PropNewestSalePurchaseIndex      := count(ds_flags(PropNewestSalePurchaseIndex = 1));
numPurchase30                    := count(ds_flags(numPurchase30 = 1));
numPurchase90                    := count(ds_flags(numPurchase90 = 1));
numPurchase180                   := count(ds_flags(numPurchase180 = 1));
numPurchase12                    := count(ds_flags(numPurchase12 = 1));
numPurchase24                    := count(ds_flags(numPurchase24 = 1));
numPurchase36                    := count(ds_flags(numPurchase36 = 1));
numPurchase60                    := count(ds_flags(numPurchase60 = 1));
numSold30                        := count(ds_flags(numSold30 = 1));
numSold90                        := count(ds_flags(numSold90 = 1));
numSold180                       := count(ds_flags(numSold180 = 1));
numSold12                        := count(ds_flags(numSold12 = 1));
numSold24                        := count(ds_flags(numSold24 = 1));
numSold36                        := count(ds_flags(numSold36 = 1));
numSold60                        := count(ds_flags(numSold60 = 1));
numWatercraft                    := count(ds_flags(numWatercraft = 1));
numWatercraft30                  := count(ds_flags(numWatercraft30 = 1));
numWatercraft90                  := count(ds_flags(numWatercraft90 = 1));
numWatercraft180                 := count(ds_flags(numWatercraft180 = 1));
numWatercraft12                  := count(ds_flags(numWatercraft12 = 1));
numWatercraft24                  := count(ds_flags(numWatercraft24 = 1));
numWatercraft36                  := count(ds_flags(numWatercraft36 = 1));
numWatercraft60                  := count(ds_flags(numWatercraft60 = 1));
numAircraft                      := count(ds_flags(numAircraft = 1));
numAircraft30                    := count(ds_flags(numAircraft30 = 1));
numAircraft90                    := count(ds_flags(numAircraft90 = 1));
numAircraft180                   := count(ds_flags(numAircraft180 = 1));
numAircraft12                    := count(ds_flags(numAircraft12 = 1));
numAircraft24                    := count(ds_flags(numAircraft24 = 1));
numAircraft36                    := count(ds_flags(numAircraft36 = 1));
numAircraft60                    := count(ds_flags(numAircraft60 = 1));
wealth_indicator                 := count(ds_flags(wealth_indicator = 1));
SubPrimeSolicitedCount           := count(ds_flags(SubPrimeSolicitedCount = 1));
SubPrimeSolicitedCount01         := count(ds_flags(SubPrimeSolicitedCount01 = 1));
SubprimeSolicitedCount03         := count(ds_flags(SubprimeSolicitedCount03 = 1));
SubprimeSolicitedCount06         := count(ds_flags(SubprimeSolicitedCount06 = 1));
SubPrimeSolicitedCount12         := count(ds_flags(SubPrimeSolicitedCount12 = 1));
SubPrimeSolicitedCount24         := count(ds_flags(SubPrimeSolicitedCount24 = 1));
SubPrimeSolicitedCount36         := count(ds_flags(SubPrimeSolicitedCount36 = 1));
SubPrimeSolicitedCount60         := count(ds_flags(SubPrimeSolicitedCount60 = 1));
total_number_derogs              := count(ds_flags(total_number_derogs = 1));
DerogAge                         := count(ds_flags(DerogAge = 1));
felonies                         := count(ds_flags(felonies = 1));
FelonyAge                        := count(ds_flags(FelonyAge = 1));
felonies30                       := count(ds_flags(felonies30 = 1));
felonies90                       := count(ds_flags(felonies90 = 1));
felonies180                      := count(ds_flags(felonies180 = 1));
felonies12                       := count(ds_flags(felonies12 = 1));
felonies24                       := count(ds_flags(felonies24 = 1));
felonies36                       := count(ds_flags(felonies36 = 1));
felonies60                       := count(ds_flags(felonies60 = 1));
num_liens                        := count(ds_flags(num_liens = 1));
num_unreleased_liens             := count(ds_flags(num_unreleased_liens = 1));
LienFiledAge                     := count(ds_flags(LienFiledAge = 1));
num_unreleased_liens30           := count(ds_flags(num_unreleased_liens30 = 1));
num_unreleased_liens90           := count(ds_flags(num_unreleased_liens90 = 1));
num_unreleased_liens180          := count(ds_flags(num_unreleased_liens180 = 1));
num_unreleased_liens12           := count(ds_flags(num_unreleased_liens12 = 1));
num_unreleased_liens24           := count(ds_flags(num_unreleased_liens24 = 1));
num_unreleased_liens36           := count(ds_flags(num_unreleased_liens36 = 1));
num_unreleased_liens60           := count(ds_flags(num_unreleased_liens60 = 1));
num_released_liens               := count(ds_flags(num_released_liens = 1));
LienReleasedAge                  := count(ds_flags(LienReleasedAge = 1));
num_released_liens30             := count(ds_flags(num_released_liens30 = 1));
num_released_liens90             := count(ds_flags(num_released_liens90 = 1));
num_released_liens180            := count(ds_flags(num_released_liens180 = 1));
num_released_liens12             := count(ds_flags(num_released_liens12 = 1));
num_released_liens24             := count(ds_flags(num_released_liens24 = 1));
num_released_liens36             := count(ds_flags(num_released_liens36 = 1));
num_released_liens60             := count(ds_flags(num_released_liens60 = 1));
LienFederalTaxFiledTotal         := count(ds_flags(LienFederalTaxFiledTotal = 1));
LienTaxOtherFiledTotal           := count(ds_flags(LienTaxOtherFiledTotal = 1));
LienForeclosureFiledTotal        := count(ds_flags(LienForeclosureFiledTotal = 1));
LienPreforeclosureFiledTotal     := count(ds_flags(LienPreforeclosureFiledTotal = 1));
LienLandlordTenantFiledTotal     := count(ds_flags(LienLandlordTenantFiledTotal = 1));
LienJudgmentFiledTotal           := count(ds_flags(LienJudgmentFiledTotal = 1));
LienSmallClaimsFiledTotal        := count(ds_flags(LienSmallClaimsFiledTotal = 1));
LienOtherFiledTotal              := count(ds_flags(LienOtherFiledTotal = 1));
LienFederalTaxReleasedTotal      := count(ds_flags(LienFederalTaxReleasedTotal = 1));
LienTaxOtherReleasedTotal        := count(ds_flags(LienTaxOtherReleasedTotal = 1));
LienForeclosureReleasedTotal     := count(ds_flags(LienForeclosureReleasedTotal = 1));
LienPreforeclosureReleasedTotal  := count(ds_flags(LienPreforeclosureReleasedTotal = 1));
LienLandlordTenantReleasedTotal  := count(ds_flags(LienLandlordTenantReleasedTotal = 1));
LienJudgmentReleasedTotal        := count(ds_flags(LienJudgmentReleasedTotal = 1));
LienSmallClaimsReleasedTotal     := count(ds_flags(LienSmallClaimsReleasedTotal = 1));
LienOtherReleasedTotal           := count(ds_flags(LienOtherReleasedTotal = 1));
LienFederalTaxFiledCount         := count(ds_flags(LienFederalTaxFiledCount = 1));
LienTaxOtherFiledCount           := count(ds_flags(LienTaxOtherFiledCount = 1));
LienForeclosureFiledCount        := count(ds_flags(LienForeclosureFiledCount = 1));
LienPreforeclosureFiledCount     := count(ds_flags(LienPreforeclosureFiledCount = 1));
LienLandlordTenantFiledCount     := count(ds_flags(LienLandlordTenantFiledCount = 1));
LienJudgmentFiledCount           := count(ds_flags(LienJudgmentFiledCount = 1));
LienSmallClaimsFiledCount        := count(ds_flags(LienSmallClaimsFiledCount = 1));
LienOtherFiledCount              := count(ds_flags(LienOtherFiledCount = 1));
LienFederalTaxReleasedCount      := count(ds_flags(LienFederalTaxReleasedCount = 1));
LienTaxOtherReleasedCount        := count(ds_flags(LienTaxOtherReleasedCount = 1));
LienForeclosureReleasedCount     := count(ds_flags(LienForeclosureReleasedCount = 1));
LienPreforeclosureReleasedCount  := count(ds_flags(LienPreforeclosureReleasedCount = 1));
LienLandlordTenantReleasedCount  := count(ds_flags(LienLandlordTenantReleasedCount = 1));
LienJudgmentReleasedCount        := count(ds_flags(LienJudgmentReleasedCount = 1));
LienSmallClaimsReleasedCount     := count(ds_flags(LienSmallClaimsReleasedCount = 1));
LienOtherReleasedCount           := count(ds_flags(LienOtherReleasedCount = 1));
bankruptcy_count                 := count(ds_flags(bankruptcy_count = 1));
BankruptcyAge                    := count(ds_flags(BankruptcyAge = 1));
filing_type                      := count(ds_flags(filing_type = 1));
disposition                      := count(ds_flags(disposition = 1));
bankruptcy_count30               := count(ds_flags(bankruptcy_count30 = 1));
bankruptcy_count90               := count(ds_flags(bankruptcy_count90 = 1));
bankruptcy_count180              := count(ds_flags(bankruptcy_count180 = 1));
bankruptcy_count12               := count(ds_flags(bankruptcy_count12 = 1));
bankruptcy_count24               := count(ds_flags(bankruptcy_count24 = 1));
bankruptcy_count36               := count(ds_flags(bankruptcy_count36 = 1));
bankruptcy_count60               := count(ds_flags(bankruptcy_count60 = 1));
eviction_count                   := count(ds_flags(eviction_count = 1));
EvictionAge                      := count(ds_flags(EvictionAge = 1));
eviction_count30                 := count(ds_flags(eviction_count30 = 1));
eviction_count90                 := count(ds_flags(eviction_count90 = 1));
eviction_count180                := count(ds_flags(eviction_count180 = 1));
eviction_count12                 := count(ds_flags(eviction_count12 = 1));
eviction_count24                 := count(ds_flags(eviction_count24 = 1));
eviction_count36                 := count(ds_flags(eviction_count36 = 1));
eviction_count60                 := count(ds_flags(eviction_count60 = 1));
num_nonderogs                    := count(ds_flags(num_nonderogs = 1));
num_nonderogs30                  := count(ds_flags(num_nonderogs30 = 1));
num_nonderogs90                  := count(ds_flags(num_nonderogs90 = 1));
num_nonderogs180                 := count(ds_flags(num_nonderogs180 = 1));
num_nonderogs12                  := count(ds_flags(num_nonderogs12 = 1));
num_nonderogs24                  := count(ds_flags(num_nonderogs24 = 1));
num_nonderogs36                  := count(ds_flags(num_nonderogs36 = 1));
num_nonderogs60                  := count(ds_flags(num_nonderogs60 = 1));
num_proflic                      := count(ds_flags(num_proflic = 1));
ProfLicAge                       := count(ds_flags(ProfLicAge = 1));
proflic_type                     := count(ds_flags(proflic_type = 1));
ProfLicTypeCategory              := count(ds_flags(ProfLicTypeCategory = 1));
expire_date_last_proflic         := count(ds_flags(expire_date_last_proflic = 1));
num_proflic30                    := count(ds_flags(num_proflic30 = 1));
num_proflic90                    := count(ds_flags(num_proflic90 = 1));
num_proflic180                   := count(ds_flags(num_proflic180 = 1));
num_proflic12                    := count(ds_flags(num_proflic12 = 1));
num_proflic24                    := count(ds_flags(num_proflic24 = 1));
num_proflic36                    := count(ds_flags(num_proflic36 = 1));
num_proflic60                    := count(ds_flags(num_proflic60 = 1));
num_proflic_exp30                := count(ds_flags(num_proflic_exp30 = 1));
num_proflic_exp90                := count(ds_flags(num_proflic_exp90 = 1));
num_proflic_exp180               := count(ds_flags(num_proflic_exp180 = 1));
num_proflic_exp12                := count(ds_flags(num_proflic_exp12 = 1));
num_proflic_exp24                := count(ds_flags(num_proflic_exp24 = 1));
num_proflic_exp36                := count(ds_flags(num_proflic_exp36 = 1));
num_proflic_exp60                := count(ds_flags(num_proflic_exp60 = 1));
phoneStatus                      := count(ds_flags(phoneStatus = 1));
PhonePager                       := count(ds_flags(PhonePager = 1));
PhoneMobile                      := count(ds_flags(PhoneMobile = 1));
PhoneEDAAgeOldestRecord          := count(ds_flags(PhoneEDAAgeOldestRecord = 1));
PhoneEDAAgeNewestRecord          := count(ds_flags(PhoneEDAAgeNewestRecord = 1));
PhoneOtherAgeOldestRecord        := count(ds_flags(PhoneOtherAgeOldestRecord = 1));
PhoneOtherAgeNewestRecord        := count(ds_flags(PhoneOtherAgeNewestRecord = 1));
PhoneZipMismatch                 := count(ds_flags(PhoneZipMismatch = 1));
phoneAddrDist                    := count(ds_flags(phoneAddrDist = 1));
AddrHighRisk                     := count(ds_flags(AddrHighRisk = 1));
PhoneHighRisk                    := count(ds_flags(PhoneHighRisk = 1));
AddrPrison                       := count(ds_flags(AddrPrison = 1));
ZipPOBox                         := count(ds_flags(ZipPOBox = 1));
ZipCorpMil                       := count(ds_flags(ZipCorpMil = 1));
correctedFlag                    := count(ds_flags(correctedFlag = 1));
securityFreeze                   := count(ds_flags(securityFreeze = 1));
securityAlert                    := count(ds_flags(securityAlert = 1));
idTheftFlag                      := count(ds_flags(idTheftFlag = 1));
PrescreenOptOut                  := count(ds_flags(PrescreenOptOut = 1));

summary_format := record
	total;
	AgeOldestRecord;
	AgeNewestRecord;
	isRecentUpdate;
	NumSources;
	InvalidSSN;
	InvalidAddr;
	InvalidDL;
	InvalidPhone;
	isNoVer;
	SSNNotFound;
	VerifiedName;
	VerifiedSSN;
	VerifiedPhone;
	VerifiedPhoneFullName;
	VerifiedPhoneLastName;
	VerifiedAddress;
	VerifiedDOB;
	InferredMinimumAge;
	BestReportedAge;
	SubjectSSNCount;
	SubjectAddrCount;
	SubjectPhoneCount;
	SubjectSSNRecentCount;
	SubjectAddrRecentCount;
	SubjectPhoneRecentCount;
	SSNIdentitiesCount;
	SSNAddrCount;
	SSNIdentitiesRecentCount;
	SSNAddrRecentCount;
	InputAddrIdentitiesCount;
	InputAddrSSNCount;
	InputAddrPhoneCount;
	InputAddrIdentitiesRecentCount;
	InputAddrSSNRecentCount;
	InputAddrPhoneRecentCount;
	PhoneIdentitiesCount;
	PhoneIdentitiesRecentCount;
	SSNDeceased;
	DeceasedDate;
	SSNValid;
	RecentIssue;
	LowIssueDate;
	HighIssueDate;
	IssueState;
	NonUS;
	SSNIssuedPriorDOB;
	Issued3;
	IssuedAge5;
	IAAgeOldestRecord;
	IAAgeNewestRecord;
	IALenOfRes;
	IADwellType;
	IALandUseCode;
	IAOwnedBySubject;
	IAFamilyOwned;
	IAOccupantOwned;
	IAAgeLastSale;
	IALastSaleAmount;
	IANotPrimaryRes;
	IAPhoneListed;
	IAPhoneNumber;
	IAAssessedValue;
	InputAddrTaxYr;
	InputAddrTaxMarketValue;
	InputAddrAVMTax;
	InputAddrAVMSalesPrice;
	InputAddrAVMHedonic;
	InputAddrAVMValue;
	InputAddrAVMConfidence;
	InputAddrCountyIndex;
	InputAddrTractIndex;
	InputAddrBlockIndex;
	CAAgeOldestRecord;
	CAAgeNewestRecord;
	CALenOfRes;
	CADwellType;
	CALandUseCode;
	CAOwnedBySubject;
	CAFamilyOwned;
	CAOccupantOwned;
	CAAgeLastSale;
	CALastSaleAmount;
	CANotPrimaryRes;
	CAPhoneListed;
	CAPhoneNumber;
	CAAssessedValue;
	CurrAddrTaxYr;
	CurrAddrTaxMarketValue;
	CurrAddrAVMTax;
	CurrAddrAVMSalesPrice;
	CurrAddrAVMHedonic;
	CurrAddrAVMValue;
	CurrAddrAVMConfidence;
	CurrAddrCountyIndex;
	CurrAddrTractIndex;
	CurrAddrBlockIndex;
	PAAgeOldestRecord;
	PAAgeNewestRecord;
	PALenOfRes;
	PADwellType;
	PALandUseCode;
	PAOwnedBySubject;
	PAFamilyOwned;
	PAOccupantOwned;
	PAAgeLastSale;
	PALastSaleAmount;
	PAPhoneListed;
	PAPhoneNumber;
	PAAssessedValue;
	PrevAddrTaxYr;
	PrevAddrTaxMarketValue;
	PrevAddrAVMTax;
	PrevAddrAVMSalesPrice;
	PrevAddrAVMHedonic;
	PrevAddrAVMValue;
	PrevAddrAVMConfidence;
	PrevAddrCountyIndex;
	PrevAddrTractIndex;
	PrevAddrBlockIndex;
	InputCurrMatch;
	DistInputCurr;
	DiffState;
	AssessedDiff;
	EcoTrajectory;
	InputPrevMatch;
	DistCurrPrev;
	DiffState2;
	AssessedDiff2;
	EcoTrajectory2;
	EducationAttendedCollege;
	EducationProgram2Yr;
	EducationProgram4Yr;
	EducationProgramGraduate;
	EducationInstitutionPrivate;
	EducationInstitutionRating;
	mobility_indicator;
	statusAddr;
	statusAddr2;
	statusAddr3;
	addrChanges30;
	addrChanges90;
	addrChanges180;
	addrChanges12;
	addrChanges24;
	addrChanges36;
	addrChanges60;
	PredictedAnnualIncome;
	property_owned_total;
	property_owned_assessed_total;
	property_historically_owned;
	PropAgeOldestPurchase;
	PropAgeNewestPurchase;
	PropAgeNewestSale;
	PropNewestSalePrice;
	PropNewestSalePurchaseIndex;
	numPurchase30;
	numPurchase90;
	numPurchase180;
	numPurchase12;
	numPurchase24;
	numPurchase36;
	numPurchase60;
	numSold30;
	numSold90;
	numSold180;
	numSold12;
	numSold24;
	numSold36;
	numSold60;
	numWatercraft;
	numWatercraft30;
	numWatercraft90;
	numWatercraft180;
	numWatercraft12;
	numWatercraft24;
	numWatercraft36;
	numWatercraft60;
	numAircraft;
	numAircraft30;
	numAircraft90;
	numAircraft180;
	numAircraft12;
	numAircraft24;
	numAircraft36;
	numAircraft60;
	wealth_indicator;
	SubPrimeSolicitedCount;
	SubPrimeSolicitedCount01;
	SubprimeSolicitedCount03;
	SubprimeSolicitedCount06;
	SubPrimeSolicitedCount12;
	SubPrimeSolicitedCount24;
	SubPrimeSolicitedCount36;
	SubPrimeSolicitedCount60;
	total_number_derogs;
	DerogAge;
	felonies;
	FelonyAge;
	felonies30;
	felonies90;
	felonies180;
	felonies12;
	felonies24;
	felonies36;
	felonies60;
	num_liens;
	num_unreleased_liens;
	LienFiledAge;
	num_unreleased_liens30;
	num_unreleased_liens90;
	num_unreleased_liens180;
	num_unreleased_liens12;
	num_unreleased_liens24;
	num_unreleased_liens36;
	num_unreleased_liens60;
	num_released_liens;
	LienReleasedAge;
	num_released_liens30;
	num_released_liens90;
	num_released_liens180;
	num_released_liens12;
	num_released_liens24;
	num_released_liens36;
	num_released_liens60;
	LienFederalTaxFiledTotal;
	LienTaxOtherFiledTotal;
	LienForeclosureFiledTotal;
	LienPreforeclosureFiledTotal;
	LienLandlordTenantFiledTotal;
	LienJudgmentFiledTotal;
	LienSmallClaimsFiledTotal;
	LienOtherFiledTotal;
	LienFederalTaxReleasedTotal;
	LienTaxOtherReleasedTotal;
	LienForeclosureReleasedTotal;
	LienPreforeclosureReleasedTotal;
	LienLandlordTenantReleasedTotal;
	LienJudgmentReleasedTotal;
	LienSmallClaimsReleasedTotal;
	LienOtherReleasedTotal;
	LienFederalTaxFiledCount;
	LienTaxOtherFiledCount;
	LienForeclosureFiledCount;
	LienPreforeclosureFiledCount;
	LienLandlordTenantFiledCount;
	LienJudgmentFiledCount;
	LienSmallClaimsFiledCount;
	LienOtherFiledCount;
	LienFederalTaxReleasedCount;
	LienTaxOtherReleasedCount;
	LienForeclosureReleasedCount;
	LienPreforeclosureReleasedCount;
	LienLandlordTenantReleasedCount;
	LienJudgmentReleasedCount;
	LienSmallClaimsReleasedCount;
	LienOtherReleasedCount;
	bankruptcy_count;
	BankruptcyAge;
	filing_type;
	disposition;
	bankruptcy_count30;
	bankruptcy_count90;
	bankruptcy_count180;
	bankruptcy_count12;
	bankruptcy_count24;
	bankruptcy_count36;
	bankruptcy_count60;
	eviction_count;
	EvictionAge;
	eviction_count30;
	eviction_count90;
	eviction_count180;
	eviction_count12;
	eviction_count24;
	eviction_count36;
	eviction_count60;
	num_nonderogs;
	num_nonderogs30;
	num_nonderogs90;
	num_nonderogs180;
	num_nonderogs12;
	num_nonderogs24;
	num_nonderogs36;
	num_nonderogs60;
	num_proflic;
	ProfLicAge;
	proflic_type;
	ProfLicTypeCategory;
	expire_date_last_proflic;
	num_proflic30;
	num_proflic90;
	num_proflic180;
	num_proflic12;
	num_proflic24;
	num_proflic36;
	num_proflic60;
	num_proflic_exp30;
	num_proflic_exp90;
	num_proflic_exp180;
	num_proflic_exp12;
	num_proflic_exp24;
	num_proflic_exp36;
	num_proflic_exp60;
	phoneStatus;
	PhonePager;
	PhoneMobile;
	PhoneEDAAgeOldestRecord;
	PhoneEDAAgeNewestRecord;
	PhoneOtherAgeOldestRecord;
	PhoneOtherAgeNewestRecord;
	PhoneZipMismatch;
	phoneAddrDist;
	AddrHighRisk;
	PhoneHighRisk;
	AddrPrison;
	ZipPOBox;
	ZipCorpMil;
	correctedFlag;
	securityFreeze;
	securityAlert;
	idTheftFlag;
	PrescreenOptOut;
end;

summary_res := table(ds_flags, summary_format, total);	
output(summary_res);

endmacro;