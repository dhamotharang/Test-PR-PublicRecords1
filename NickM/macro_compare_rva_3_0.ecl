export macro_compare_rva_3_0(olddate, newdate, old_adate, new_adate) := macro
#workunit('name','RVA 3.0 Comparison for Tracking');
#option ('hthorMemoryLimit', 1000)


IMPORT Risk_Indicators;

//===================  input-output files  ======================
infile_original :=  '~nmontpetit::out::rva_30_tracking_'+(string)olddate+'_'+(string)old_adate;
infile_compare :=   '~nmontpetit::out::rva_30_tracking_'+(string)newdate+'_'+(string)new_adate;

layout_rva_30 := RECORD
	string30 AccountNumber;
	string4 AgeOldestRecord; 
	string4 AgeNewestRecord; 
	string1 isRecentUpdate;
	string3 NumSources;
	string1 InvalidSSN; 
	string1 InvalidAddr; 
	string1 InvalidDL; 
	string1 InvalidPhone; 
	string1 isNoVer;
	string1 SSNNotFound;
	string3 VerifiedName;
	string3 VerifiedSSN;
	string3 VerifiedPhone;
	string1 VerifiedPhoneFullName;
	string1 VerifiedPhoneLastName;
	string3 VerifiedAddress;
	string3 VerifiedDOB;
	string3 InferredMinimumAge;
	string3 BestReportedAge;
	string3 SubjectSSNCount;
	string3 SubjectAddrCount;
	string3 SubjectPhoneCount;
	string3 SubjectSSNRecentCount;
	string3 SubjectAddrRecentCount;
	string3 SubjectPhoneRecentCount;
	string3 SSNIdentitiesCount;
	string3 SSNAddrCount;
	string3 SSNIdentitiesRecentCount;
	string3 SSNAddrRecentCount;
	string3 InputAddrIdentitiesCount;
	string3 InputAddrSSNCount;
	string3 InputAddrPhoneCount;
	string3 InputAddrIdentitiesRecentCount;
	string3 InputAddrSSNRecentCount;
	string3 InputAddrPhoneRecentCount;
	string3 PhoneIdentitiesCount;
	string3 PhoneIdentitiesRecentCount;	
	string1 SSNDeceased;
	string8 DeceasedDate;
	string1 SSNValid;
	string1 RecentIssue;
	string8 LowIssueDate;
	string8 HighIssueDate;
	string2 IssueState;
	string1 NonUS;
	string1 SSNIssuedPriorDOB;
	string1 Issued3;
	string1 IssuedAge5;

	string4 IAAgeOldestRecord;
	string4 IAAgeNewestRecord;
	string4 IALenOfRes;
	string1 IADwellType;
	string1 IALandUseCode;
	string1 IAOwnedBySubject;
	string1 IAFamilyOwned;
	string1 IAOccupantOwned;
	string4 IAAgeLastSale;
	string IALastSaleAmount;
	string1 IANotPrimaryRes;
	string1 IAPhoneListed;
	string10 IAPhoneNumber;
	string IAAssessedValue;
	string4 InputAddrTaxYr;
	string14 InputAddrTaxMarketValue;
	string14 InputAddrAVMTax;
	string14 InputAddrAVMSalesPrice;
	string14 InputAddrAVMHedonic;
	string14 InputAddrAVMValue;
	string3 InputAddrAVMConfidence;
	string8 InputAddrCountyIndex;
	string8 InputAddrTractIndex;
	string8 InputAddrBlockIndex;
	
	string4 CAAgeOldestRecord;
	string4 CAAgeNewestRecord;
	string4 CALenOfRes;
	string1 CADwellType;
	string1 CALandUseCode;
	string1 CAOwnedBySubject;
	string1 CAFamilyOwned;
	string1 CAOccupantOwned;
	string4 CAAgeLastSale;
	string CALastSaleAmount;
	string1 CANotPrimaryRes;
	string1 CAPhoneListed;
	string10 CAPhoneNumber;
	string CAAssessedValue;
	string4 CurrAddrTaxYr;
	string14 CurrAddrTaxMarketValue;
	string14 CurrAddrAVMTax;
	string14 CurrAddrAVMSalesPrice;
	string14 CurrAddrAVMHedonic;
	string14 CurrAddrAVMValue;
	string3 CurrAddrAVMConfidence;
	string8 CurrAddrCountyIndex;
	string8 CurrAddrTractIndex;
	string8 CurrAddrBlockIndex;
	
	string4 PAAgeOldestRecord;
	string4 PAAgeNewestRecord;
	string4 PALenOfRes;
	string1 PADwellType;
	string1 PALandUseCode;
	string1 PAOwnedBySubject;
	string1 PAFamilyOwned;
	string1 PAOccupantOwned;
	string4 PAAgeLastSale;
	string PALastSaleAmount;
	string1 PAPhoneListed;
	string10 PAPhoneNumber;
	string PAAssessedValue;
	string4 PrevAddrTaxYr;
	string14 PrevAddrTaxMarketValue;
	string14 PrevAddrAVMTax;
	string14 PrevAddrAVMSalesPrice;
	string14 PrevAddrAVMHedonic;
	string14 PrevAddrAVMValue;
	string3 PrevAddrAVMConfidence;
	string8 PrevAddrCountyIndex;
	string8 PrevAddrTractIndex;
	string8 PrevAddrBlockIndex;
	
	string1 InputCurrMatch;
	string DistInputCurr;
	string1 DiffState;
	string AssessedDiff;
	string2 EcoTrajectory;
	
	string1 InputPrevMatch;
	string DistCurrPrev;
	string1 DiffState2;
	string AssessedDiff2;
	string2 EcoTrajectory2;
	
	string1 EducationAttendedCollege;
	string1 EducationProgram2Yr;
	string1 EducationProgram4Yr;
	string1 EducationProgramGraduate;
	string1 EducationInstitutionPrivate;
	string1 EducationInstitutionRating;
	
	string1 mobility_indicator;
	string1 statusAddr;
	string1 statusAddr2;
	string1 statusAddr3;
	string3 addrChanges30;
	string3 addrChanges90;
	string3 addrChanges180;
	string3 addrChanges12;
	string3 addrChanges24;
	string3 addrChanges36;
	string3 addrChanges60;

	string PredictedAnnualIncome;
	
	string3 property_owned_total;
	string14 property_owned_assessed_total;
	string3 property_historically_owned;
	string4 PropAgeOldestPurchase;
	string4 PropAgeNewestPurchase;
	string4 PropAgeNewestSale;
	string14 PropNewestSalePrice;
	string8 PropNewestSalePurchaseIndex;
	
	string3 numPurchase30;
	string3 numPurchase90;
	string3 numPurchase180;
	string3 numPurchase12;
	string3 numPurchase24;
	string3 numPurchase36;
	string3 numPurchase60;
	
	string3 numSold30;
	string3 numSold90;
	string3 numSold180;
	string3 numSold12;
	string3 numSold24;
	string3 numSold36;
	string3 numSold60;
	
	string3 numWatercraft;
	string3 numWatercraft30;
	string3 numWatercraft90;
	string3 numWatercraft180;
	string3 numWatercraft12;
	string3 numWatercraft24;
	string3 numWatercraft36;
	string3 numWatercraft60;
	
	string3 numAircraft;
	string3 numAircraft30;
	string3 numAircraft90;
	string3 numAircraft180;
	string3 numAircraft12;
	string3 numAircraft24;
	string3 numAircraft36;
	string3 numAircraft60;
	
	string1 wealth_indicator;

	string3 SubPrimeSolicitedCount;
	string3 SubPrimeSolicitedCount01;
	string3 SubprimeSolicitedCount03;
	string3 SubprimeSolicitedCount06;
	string3 SubPrimeSolicitedCount12;
	string3 SubPrimeSolicitedCount24;
	string3 SubPrimeSolicitedCount36;
	string3 SubPrimeSolicitedCount60;
	

	string3 total_number_derogs;
	string4 DerogAge;
	
	string3 felonies;
	string4 FelonyAge;
	string3 felonies30;
	string3 felonies90;
	string3 felonies180;
	string3 felonies12;
	string3 felonies24;
	string3 felonies36;
	string3 felonies60;
	
	string3 num_liens;
	string3 num_unreleased_liens;
	string4 LienFiledAge;
	string3 num_unreleased_liens30;
	string3 num_unreleased_liens90;
	string3 num_unreleased_liens180;
	string3 num_unreleased_liens12;
	string3 num_unreleased_liens24;
	string3 num_unreleased_liens36;
	string3 num_unreleased_liens60;
	
	string3 num_released_liens;
	string4 LienReleasedAge;
	string3 num_released_liens30;
	string3 num_released_liens90;
	string3 num_released_liens180;
	string3 num_released_liens12;
	string3 num_released_liens24;
	string3 num_released_liens36;
	string3 num_released_liens60;
	
	string14 LienFederalTaxFiledTotal;
	string14 LienTaxOtherFiledTotal;
	string14 LienForeclosureFiledTotal;
	string14 LienPreforeclosureFiledTotal;
	string14 LienLandlordTenantFiledTotal;
	string14 LienJudgmentFiledTotal;
	string14 LienSmallClaimsFiledTotal;
	string14 LienOtherFiledTotal;
	string14 LienFederalTaxReleasedTotal;
	string14 LienTaxOtherReleasedTotal;
	string14 LienForeclosureReleasedTotal;
	string14 LienPreforeclosureReleasedTotal;
	string14 LienLandlordTenantReleasedTotal;
	string14 LienJudgmentReleasedTotal;
	string14 LienSmallClaimsReleasedTotal;
	string14 LienOtherReleasedTotal;
	
	string3 LienFederalTaxFiledCount;
	string3 LienTaxOtherFiledCount;
	string3 LienForeclosureFiledCount;
	string3 LienPreforeclosureFiledCount;
	string3 LienLandlordTenantFiledCount;
	string3 LienJudgmentFiledCount;
	string3 LienSmallClaimsFiledCount;
	string3 LienOtherFiledCount;
	string3 LienFederalTaxReleasedCount;
	string3 LienTaxOtherReleasedCount;
	string3 LienForeclosureReleasedCount;
	string3 LienPreforeclosureReleasedCount;
	string3 LienLandlordTenantReleasedCount;
	string3 LienJudgmentReleasedCount;
	string3 LienSmallClaimsReleasedCount;
	string3 LienOtherReleasedCount;
	
	string3 bankruptcy_count;
	string4 BankruptcyAge;
	STRING1 filing_type;
	STRING35 disposition;
	string3 bankruptcy_count30;
	string3 bankruptcy_count90;
	string3 bankruptcy_count180;
	string3 bankruptcy_count12;
	string3 bankruptcy_count24;
	string3 bankruptcy_count36;
	string3 bankruptcy_count60;
	
	string3 eviction_count;
	string4 EvictionAge;
	string3 eviction_count30;
	string3 eviction_count90;
	string3 eviction_count180;
	string3 eviction_count12;
	string3 eviction_count24;
	string3 eviction_count36;
	string3 eviction_count60;

	string3 num_nonderogs;
	string3 num_nonderogs30;
	string3 num_nonderogs90;
	string3 num_nonderogs180;
	string3 num_nonderogs12;
	string3 num_nonderogs24;
	string3 num_nonderogs36;
	string3 num_nonderogs60;
	
	string3 num_proflic;
	string4 ProfLicAge;
	string60 proflic_type;
	string1 ProfLicTypeCategory;
	string8 expire_date_last_proflic;
	string3 num_proflic30;
	string3 num_proflic90;
	string3 num_proflic180;
	string3 num_proflic12;
	string3 num_proflic24;
	string3 num_proflic36;
	string3 num_proflic60;
	
	string3 num_proflic_exp30;
	string3 num_proflic_exp90;
	string3 num_proflic_exp180;
	string3 num_proflic_exp12;
	string3 num_proflic_exp24;
	string3 num_proflic_exp36;
	string3 num_proflic_exp60;
	
	string1 phoneStatus;
	string1 PhonePager;
	string1 PhoneMobile;
	string4 PhoneEDAAgeOldestRecord;
	string4 PhoneEDAAgeNewestRecord;
	string4 PhoneOtherAgeOldestRecord;
	string4 PhoneOtherAgeNewestRecord;
	string1 PhoneZipMismatch;
	string4 phoneAddrDist;
	string1 AddrHighRisk;
	string1 PhoneHighRisk;
	string1 AddrPrison;
	string1 ZipPOBox;
	string1 ZipCorpMil;
	string1 correctedFlag;
	string1 securityFreeze;
	string1 securityAlert;
	string1 idTheftFlag;
	string1 PrescreenOptOut;
	string6 history_date;
	string200  errorcode;
end;

ds_original := 	dataset(infile_original, 	layout_rva_30, csv(quote('"'), maxlength(32000)));
ds_compare := 	dataset(infile_compare, 	layout_rva_30, csv(quote('"'), maxlength(32000)));

//output(ds_original);
//output(ds_compare);

layout_res := RECORD
	integer AgeOldestRecord;
	integer AgeNewestRecord;
	integer isRecentUpdate;
	integer NumSources;
	integer InvalidSSN;
	integer InvalidAddr;
	integer InvalidDL;
	integer InvalidPhone;
	integer isNoVer;
	integer SSNNotFound;
	integer VerifiedName;
	integer VerifiedSSN;
	integer VerifiedPhone;
	integer VerifiedPhoneFullName;
	integer VerifiedPhoneLastName;
	integer VerifiedAddress;
	integer VerifiedDOB;
	integer InferredMinimumAge;
	integer BestReportedAge;
	integer SubjectSSNCount;
	integer SubjectAddrCount;
	integer SubjectPhoneCount;
	integer SubjectSSNRecentCount;
	integer SubjectAddrRecentCount;
	integer SubjectPhoneRecentCount;
	integer SSNIdentitiesCount;
	integer SSNAddrCount;
	integer SSNIdentitiesRecentCount;
	integer SSNAddrRecentCount;
	integer InputAddrIdentitiesCount;
	integer InputAddrSSNCount;
	integer InputAddrPhoneCount;
	integer InputAddrIdentitiesRecentCount;
	integer InputAddrSSNRecentCount;
	integer InputAddrPhoneRecentCount;
	integer PhoneIdentitiesCount;
	integer PhoneIdentitiesRecentCount;
	integer SSNDeceased;
	integer DeceasedDate;
	integer SSNValid;
	integer RecentIssue;
	integer LowIssueDate;
	integer HighIssueDate;
	integer IssueState;
	integer NonUS;
	integer SSNIssuedPriorDOB;
	integer Issued3;
	integer IssuedAge5;
	integer IAAgeOldestRecord;
	integer IAAgeNewestRecord;
	integer IALenOfRes;
	integer IADwellType;
	integer IALandUseCode;
	integer IAOwnedBySubject;
	integer IAFamilyOwned;
	integer IAOccupantOwned;
	integer IAAgeLastSale;
	integer IALastSaleAmount;
	integer IANotPrimaryRes;
	integer IAPhoneListed;
	integer IAPhoneNumber;
	integer IAAssessedValue;
	integer InputAddrTaxYr;
	integer InputAddrTaxMarketValue;
	integer InputAddrAVMTax;
	integer InputAddrAVMSalesPrice;
	integer InputAddrAVMHedonic;
	integer InputAddrAVMValue;
	integer InputAddrAVMConfidence;
	integer InputAddrCountyIndex;
	integer InputAddrTractIndex;
	integer InputAddrBlockIndex;
	integer CAAgeOldestRecord;
	integer CAAgeNewestRecord;
	integer CALenOfRes;
	integer CADwellType;
	integer CALandUseCode;
	integer CAOwnedBySubject;
	integer CAFamilyOwned;
	integer CAOccupantOwned;
	integer CAAgeLastSale;
	integer CALastSaleAmount;
	integer CANotPrimaryRes;
	integer CAPhoneListed;
	integer CAPhoneNumber;
	integer CAAssessedValue;
	integer CurrAddrTaxYr;
	integer CurrAddrTaxMarketValue;
	integer CurrAddrAVMTax;
	integer CurrAddrAVMSalesPrice;
	integer CurrAddrAVMHedonic;
	integer CurrAddrAVMValue;
	integer CurrAddrAVMConfidence;
	integer CurrAddrCountyIndex;
	integer CurrAddrTractIndex;
	integer CurrAddrBlockIndex;
	integer PAAgeOldestRecord;
	integer PAAgeNewestRecord;
	integer PALenOfRes;
	integer PADwellType;
	integer PALandUseCode;
	integer PAOwnedBySubject;
	integer PAFamilyOwned;
	integer PAOccupantOwned;
	integer PAAgeLastSale;
	integer PALastSaleAmount;
	integer PAPhoneListed;
	integer PAPhoneNumber;
	integer PAAssessedValue;
	integer PrevAddrTaxYr;
	integer PrevAddrTaxMarketValue;
	integer PrevAddrAVMTax;
	integer PrevAddrAVMSalesPrice;
	integer PrevAddrAVMHedonic;
	integer PrevAddrAVMValue;
	integer PrevAddrAVMConfidence;
	integer PrevAddrCountyIndex;
	integer PrevAddrTractIndex;
	integer PrevAddrBlockIndex;
	integer InputCurrMatch;
	integer DistInputCurr;
	integer DiffState;
	integer AssessedDiff;
	integer EcoTrajectory;
	integer InputPrevMatch;
	integer DistCurrPrev;
	integer DiffState2;
	integer AssessedDiff2;
	integer EcoTrajectory2;
	integer EducationAttendedCollege;
	integer EducationProgram2Yr;
	integer EducationProgram4Yr;
	integer EducationProgramGraduate;
	integer EducationInstitutionPrivate;
	integer EducationInstitutionRating;
	integer mobility_indicator;
	integer statusAddr;
	integer statusAddr2;
	integer statusAddr3;
	integer addrChanges30;
	integer addrChanges90;
	integer addrChanges180;
	integer addrChanges12;
	integer addrChanges24;
	integer addrChanges36;
	integer addrChanges60;
	integer PredictedAnnualIncome;
	integer property_owned_total;
	integer property_owned_assessed_total;
	integer property_historically_owned;
	integer PropAgeOldestPurchase;
	integer PropAgeNewestPurchase;
	integer PropAgeNewestSale;
	integer PropNewestSalePrice;
	integer PropNewestSalePurchaseIndex;
	integer numPurchase30;
	integer numPurchase90;
	integer numPurchase180;
	integer numPurchase12;
	integer numPurchase24;
	integer numPurchase36;
	integer numPurchase60;
	integer numSold30;
	integer numSold90;
	integer numSold180;
	integer numSold12;
	integer numSold24;
	integer numSold36;
	integer numSold60;
	integer numWatercraft;
	integer numWatercraft30;
	integer numWatercraft90;
	integer numWatercraft180;
	integer numWatercraft12;
	integer numWatercraft24;
	integer numWatercraft36;
	integer numWatercraft60;
	integer numAircraft;
	integer numAircraft30;
	integer numAircraft90;
	integer numAircraft180;
	integer numAircraft12;
	integer numAircraft24;
	integer numAircraft36;
	integer numAircraft60;
	integer wealth_indicator;
	integer SubPrimeSolicitedCount;
	integer SubPrimeSolicitedCount01;
	integer SubprimeSolicitedCount03;
	integer SubprimeSolicitedCount06;
	integer SubPrimeSolicitedCount12;
	integer SubPrimeSolicitedCount24;
	integer SubPrimeSolicitedCount36;
	integer SubPrimeSolicitedCount60;
	integer total_number_derogs;
	integer DerogAge;
	integer felonies;
	integer FelonyAge;
	integer felonies30;
	integer felonies90;
	integer felonies180;
	integer felonies12;
	integer felonies24;
	integer felonies36;
	integer felonies60;
	integer num_liens;
	integer num_unreleased_liens;
	integer LienFiledAge;
	integer num_unreleased_liens30;
	integer num_unreleased_liens90;
	integer num_unreleased_liens180;
	integer num_unreleased_liens12;
	integer num_unreleased_liens24;
	integer num_unreleased_liens36;
	integer num_unreleased_liens60;
	integer num_released_liens;
	integer LienReleasedAge;
	integer num_released_liens30;
	integer num_released_liens90;
	integer num_released_liens180;
	integer num_released_liens12;
	integer num_released_liens24;
	integer num_released_liens36;
	integer num_released_liens60;
	integer LienFederalTaxFiledTotal;
	integer LienTaxOtherFiledTotal;
	integer LienForeclosureFiledTotal;
	integer LienPreforeclosureFiledTotal;
	integer LienLandlordTenantFiledTotal;
	integer LienJudgmentFiledTotal;
	integer LienSmallClaimsFiledTotal;
	integer LienOtherFiledTotal;
	integer LienFederalTaxReleasedTotal;
	integer LienTaxOtherReleasedTotal;
	integer LienForeclosureReleasedTotal;
	integer LienPreforeclosureReleasedTotal;
	integer LienLandlordTenantReleasedTotal;
	integer LienJudgmentReleasedTotal;
	integer LienSmallClaimsReleasedTotal;
	integer LienOtherReleasedTotal;
	integer LienFederalTaxFiledCount;
	integer LienTaxOtherFiledCount;
	integer LienForeclosureFiledCount;
	integer LienPreforeclosureFiledCount;
	integer LienLandlordTenantFiledCount;
	integer LienJudgmentFiledCount;
	integer LienSmallClaimsFiledCount;
	integer LienOtherFiledCount;
	integer LienFederalTaxReleasedCount;
	integer LienTaxOtherReleasedCount;
	integer LienForeclosureReleasedCount;
	integer LienPreforeclosureReleasedCount;
	integer LienLandlordTenantReleasedCount;
	integer LienJudgmentReleasedCount;
	integer LienSmallClaimsReleasedCount;
	integer LienOtherReleasedCount;
	integer bankruptcy_count;
	integer BankruptcyAge;
	integer filing_type;
	integer disposition;
	integer bankruptcy_count30;
	integer bankruptcy_count90;
	integer bankruptcy_count180;
	integer bankruptcy_count12;
	integer bankruptcy_count24;
	integer bankruptcy_count36;
	integer bankruptcy_count60;
	integer eviction_count;
	integer EvictionAge;
	integer eviction_count30;
	integer eviction_count90;
	integer eviction_count180;
	integer eviction_count12;
	integer eviction_count24;
	integer eviction_count36;
	integer eviction_count60;
	integer num_nonderogs;
	integer num_nonderogs30;
	integer num_nonderogs90;
	integer num_nonderogs180;
	integer num_nonderogs12;
	integer num_nonderogs24;
	integer num_nonderogs36;
	integer num_nonderogs60;
	integer num_proflic;
	integer ProfLicAge;
	integer proflic_type;
	integer ProfLicTypeCategory;
	integer expire_date_last_proflic;
	integer num_proflic30;
	integer num_proflic90;
	integer num_proflic180;
	integer num_proflic12;
	integer num_proflic24;
	integer num_proflic36;
	integer num_proflic60;
	integer num_proflic_exp30;
	integer num_proflic_exp90;
	integer num_proflic_exp180;
	integer num_proflic_exp12;
	integer num_proflic_exp24;
	integer num_proflic_exp36;
	integer num_proflic_exp60;
	integer phoneStatus;
	integer PhonePager;
	integer PhoneMobile;
	integer PhoneEDAAgeOldestRecord;
	integer PhoneEDAAgeNewestRecord;
	integer PhoneOtherAgeOldestRecord;
	integer PhoneOtherAgeNewestRecord;
	integer PhoneZipMismatch;
	integer phoneAddrDist;
	integer AddrHighRisk;
	integer PhoneHighRisk;
	integer AddrPrison;
	integer ZipPOBox;
	integer ZipCorpMil;
	integer correctedFlag;
	integer securityFreeze;
	integer securityAlert;
	integer idTheftFlag;
	integer PrescreenOptOut;
	integer history_date;
	integer errorcode;
END;
 
layout_res mk_matches(layout_rva_30 le, layout_rva_30 ri) := TRANSFORM
	self.AgeOldestRecord                  := (integer)(le.AgeOldestRecord != ri.AgeOldestRecord);
	self.AgeNewestRecord                  := (integer)(le.AgeNewestRecord != ri.AgeNewestRecord);
	self.isRecentUpdate                   := (integer)(le.isRecentUpdate != ri.isRecentUpdate);
	self.NumSources                       := (integer)(le.NumSources != ri.NumSources);
	self.InvalidSSN                       := (integer)(le.InvalidSSN != ri.InvalidSSN);
	self.InvalidAddr                      := (integer)(le.InvalidAddr != ri.InvalidAddr);
	self.InvalidDL                        := (integer)(le.InvalidDL != ri.InvalidDL);
	self.InvalidPhone                     := (integer)(le.InvalidPhone != ri.InvalidPhone);
	self.isNoVer                          := (integer)(le.isNoVer != ri.isNoVer);
	self.SSNNotFound                      := (integer)(le.SSNNotFound != ri.SSNNotFound);
	self.VerifiedName                     := (integer)(le.VerifiedName != ri.VerifiedName);
	self.VerifiedSSN                      := (integer)(le.VerifiedSSN != ri.VerifiedSSN);
	self.VerifiedPhone                    := (integer)(le.VerifiedPhone != ri.VerifiedPhone);
	self.VerifiedPhoneFullName            := (integer)(le.VerifiedPhoneFullName != ri.VerifiedPhoneFullName);
	self.VerifiedPhoneLastName            := (integer)(le.VerifiedPhoneLastName != ri.VerifiedPhoneLastName);
	self.VerifiedAddress                  := (integer)(le.VerifiedAddress != ri.VerifiedAddress);
	self.VerifiedDOB                      := (integer)(le.VerifiedDOB != ri.VerifiedDOB);
	self.InferredMinimumAge               := (integer)(le.InferredMinimumAge != ri.InferredMinimumAge);
	self.BestReportedAge                  := (integer)(le.BestReportedAge != ri.BestReportedAge);
	self.SubjectSSNCount                  := (integer)(le.SubjectSSNCount != ri.SubjectSSNCount);
	self.SubjectAddrCount                 := (integer)(le.SubjectAddrCount != ri.SubjectAddrCount);
	self.SubjectPhoneCount                := (integer)(le.SubjectPhoneCount != ri.SubjectPhoneCount);
	self.SubjectSSNRecentCount            := (integer)(le.SubjectSSNRecentCount != ri.SubjectSSNRecentCount);
	self.SubjectAddrRecentCount           := (integer)(le.SubjectAddrRecentCount != ri.SubjectAddrRecentCount);
	self.SubjectPhoneRecentCount          := (integer)(le.SubjectPhoneRecentCount != ri.SubjectPhoneRecentCount);
	self.SSNIdentitiesCount               := (integer)(le.SSNIdentitiesCount != ri.SSNIdentitiesCount);
	self.SSNAddrCount                     := (integer)(le.SSNAddrCount != ri.SSNAddrCount);
	self.SSNIdentitiesRecentCount         := (integer)(le.SSNIdentitiesRecentCount != ri.SSNIdentitiesRecentCount);
	self.SSNAddrRecentCount               := (integer)(le.SSNAddrRecentCount != ri.SSNAddrRecentCount);
	self.InputAddrIdentitiesCount         := (integer)(le.InputAddrIdentitiesCount != ri.InputAddrIdentitiesCount);
	self.InputAddrSSNCount                := (integer)(le.InputAddrSSNCount != ri.InputAddrSSNCount);
	self.InputAddrPhoneCount              := (integer)(le.InputAddrPhoneCount != ri.InputAddrPhoneCount);
	self.InputAddrIdentitiesRecentCount   := (integer)(le.InputAddrIdentitiesRecentCount != ri.InputAddrIdentitiesRecentCount);
	self.InputAddrSSNRecentCount          := (integer)(le.InputAddrSSNRecentCount != ri.InputAddrSSNRecentCount);
	self.InputAddrPhoneRecentCount        := (integer)(le.InputAddrPhoneRecentCount != ri.InputAddrPhoneRecentCount);
	self.PhoneIdentitiesCount             := (integer)(le.PhoneIdentitiesCount != ri.PhoneIdentitiesCount);
	self.PhoneIdentitiesRecentCount       := (integer)(le.PhoneIdentitiesRecentCount != ri.PhoneIdentitiesRecentCount);
	self.SSNDeceased                      := (integer)(le.SSNDeceased != ri.SSNDeceased);
	self.DeceasedDate                     := (integer)(le.DeceasedDate != ri.DeceasedDate);
	self.SSNValid                         := (integer)(le.SSNValid != ri.SSNValid);
	self.RecentIssue                      := (integer)(le.RecentIssue != ri.RecentIssue);
	self.LowIssueDate                     := (integer)(le.LowIssueDate != ri.LowIssueDate);
	self.HighIssueDate                    := (integer)(le.HighIssueDate != ri.HighIssueDate);
	self.IssueState                       := (integer)(le.IssueState != ri.IssueState);
	self.NonUS                            := (integer)(le.NonUS != ri.NonUS);
	self.SSNIssuedPriorDOB                := (integer)(le.SSNIssuedPriorDOB != ri.SSNIssuedPriorDOB);
	self.Issued3                          := (integer)(le.Issued3 != ri.Issued3);
	self.IssuedAge5                       := (integer)(le.IssuedAge5 != ri.IssuedAge5);
	self.IAAgeOldestRecord                := (integer)(le.IAAgeOldestRecord != ri.IAAgeOldestRecord);
	self.IAAgeNewestRecord                := (integer)(le.IAAgeNewestRecord != ri.IAAgeNewestRecord);
	self.IALenOfRes                       := (integer)(le.IALenOfRes != ri.IALenOfRes);
	self.IADwellType                      := (integer)(le.IADwellType != ri.IADwellType);
	self.IALandUseCode                    := (integer)(le.IALandUseCode != ri.IALandUseCode);
	self.IAOwnedBySubject                 := (integer)(le.IAOwnedBySubject != ri.IAOwnedBySubject);
	self.IAFamilyOwned                    := (integer)(le.IAFamilyOwned != ri.IAFamilyOwned);
	self.IAOccupantOwned                  := (integer)(le.IAOccupantOwned != ri.IAOccupantOwned);
	self.IAAgeLastSale                    := (integer)(le.IAAgeLastSale != ri.IAAgeLastSale);
	self.IALastSaleAmount                 := (integer)(le.IALastSaleAmount != ri.IALastSaleAmount);
	self.IANotPrimaryRes                  := (integer)(le.IANotPrimaryRes != ri.IANotPrimaryRes);
	self.IAPhoneListed                    := (integer)(le.IAPhoneListed != ri.IAPhoneListed);
	self.IAPhoneNumber                    := (integer)(le.IAPhoneNumber != ri.IAPhoneNumber);
	self.IAAssessedValue                  := (integer)(le.IAAssessedValue != ri.IAAssessedValue);
	self.InputAddrTaxYr                   := (integer)(le.InputAddrTaxYr != ri.InputAddrTaxYr);
	self.InputAddrTaxMarketValue          := (integer)(le.InputAddrTaxMarketValue != ri.InputAddrTaxMarketValue);
	self.InputAddrAVMTax                  := (integer)(le.InputAddrAVMTax != ri.InputAddrAVMTax);
	self.InputAddrAVMSalesPrice           := (integer)(le.InputAddrAVMSalesPrice != ri.InputAddrAVMSalesPrice);
	self.InputAddrAVMHedonic              := (integer)(le.InputAddrAVMHedonic != ri.InputAddrAVMHedonic);
	self.InputAddrAVMValue                := (integer)(le.InputAddrAVMValue != ri.InputAddrAVMValue);
	self.InputAddrAVMConfidence           := (integer)(le.InputAddrAVMConfidence != ri.InputAddrAVMConfidence);
	self.InputAddrCountyIndex             := (integer)(le.InputAddrCountyIndex != ri.InputAddrCountyIndex);
	self.InputAddrTractIndex              := (integer)(le.InputAddrTractIndex != ri.InputAddrTractIndex);
	self.InputAddrBlockIndex              := (integer)(le.InputAddrBlockIndex != ri.InputAddrBlockIndex);
	self.CAAgeOldestRecord                := (integer)(le.CAAgeOldestRecord != ri.CAAgeOldestRecord);
	self.CAAgeNewestRecord                := (integer)(le.CAAgeNewestRecord != ri.CAAgeNewestRecord);
	self.CALenOfRes                       := (integer)(le.CALenOfRes != ri.CALenOfRes);
	self.CADwellType                      := (integer)(le.CADwellType != ri.CADwellType);
	self.CALandUseCode                    := (integer)(le.CALandUseCode != ri.CALandUseCode);
	self.CAOwnedBySubject                 := (integer)(le.CAOwnedBySubject != ri.CAOwnedBySubject);
	self.CAFamilyOwned                    := (integer)(le.CAFamilyOwned != ri.CAFamilyOwned);
	self.CAOccupantOwned                  := (integer)(le.CAOccupantOwned != ri.CAOccupantOwned);
	self.CAAgeLastSale                    := (integer)(le.CAAgeLastSale != ri.CAAgeLastSale);
	self.CALastSaleAmount                 := (integer)(le.CALastSaleAmount != ri.CALastSaleAmount);
	self.CANotPrimaryRes                  := (integer)(le.CANotPrimaryRes != ri.CANotPrimaryRes);
	self.CAPhoneListed                    := (integer)(le.CAPhoneListed != ri.CAPhoneListed);
	self.CAPhoneNumber                    := (integer)(le.CAPhoneNumber != ri.CAPhoneNumber);
	self.CAAssessedValue                  := (integer)(le.CAAssessedValue != ri.CAAssessedValue);
	self.CurrAddrTaxYr                    := (integer)(le.CurrAddrTaxYr != ri.CurrAddrTaxYr);
	self.CurrAddrTaxMarketValue           := (integer)(le.CurrAddrTaxMarketValue != ri.CurrAddrTaxMarketValue);
	self.CurrAddrAVMTax                   := (integer)(le.CurrAddrAVMTax != ri.CurrAddrAVMTax);
	self.CurrAddrAVMSalesPrice            := (integer)(le.CurrAddrAVMSalesPrice != ri.CurrAddrAVMSalesPrice);
	self.CurrAddrAVMHedonic               := (integer)(le.CurrAddrAVMHedonic != ri.CurrAddrAVMHedonic);
	self.CurrAddrAVMValue                 := (integer)(le.CurrAddrAVMValue != ri.CurrAddrAVMValue);
	self.CurrAddrAVMConfidence            := (integer)(le.CurrAddrAVMConfidence != ri.CurrAddrAVMConfidence);
	self.CurrAddrCountyIndex              := (integer)(le.CurrAddrCountyIndex != ri.CurrAddrCountyIndex);
	self.CurrAddrTractIndex               := (integer)(le.CurrAddrTractIndex != ri.CurrAddrTractIndex);
	self.CurrAddrBlockIndex               := (integer)(le.CurrAddrBlockIndex != ri.CurrAddrBlockIndex);
	self.PAAgeOldestRecord                := (integer)(le.PAAgeOldestRecord != ri.PAAgeOldestRecord);
	self.PAAgeNewestRecord                := (integer)(le.PAAgeNewestRecord != ri.PAAgeNewestRecord);
	self.PALenOfRes                       := (integer)(le.PALenOfRes != ri.PALenOfRes);
	self.PADwellType                      := (integer)(le.PADwellType != ri.PADwellType);
	self.PALandUseCode                    := (integer)(le.PALandUseCode != ri.PALandUseCode);
	self.PAOwnedBySubject                 := (integer)(le.PAOwnedBySubject != ri.PAOwnedBySubject);
	self.PAFamilyOwned                    := (integer)(le.PAFamilyOwned != ri.PAFamilyOwned);
	self.PAOccupantOwned                  := (integer)(le.PAOccupantOwned != ri.PAOccupantOwned);
	self.PAAgeLastSale                    := (integer)(le.PAAgeLastSale != ri.PAAgeLastSale);
	self.PALastSaleAmount                 := (integer)(le.PALastSaleAmount != ri.PALastSaleAmount);
	self.PAPhoneListed                    := (integer)(le.PAPhoneListed != ri.PAPhoneListed);
	self.PAPhoneNumber                    := (integer)(le.PAPhoneNumber != ri.PAPhoneNumber);
	self.PAAssessedValue                  := (integer)(le.PAAssessedValue != ri.PAAssessedValue);
	self.PrevAddrTaxYr                    := (integer)(le.PrevAddrTaxYr != ri.PrevAddrTaxYr);
	self.PrevAddrTaxMarketValue           := (integer)(le.PrevAddrTaxMarketValue != ri.PrevAddrTaxMarketValue);
	self.PrevAddrAVMTax                   := (integer)(le.PrevAddrAVMTax != ri.PrevAddrAVMTax);
	self.PrevAddrAVMSalesPrice            := (integer)(le.PrevAddrAVMSalesPrice != ri.PrevAddrAVMSalesPrice);
	self.PrevAddrAVMHedonic               := (integer)(le.PrevAddrAVMHedonic != ri.PrevAddrAVMHedonic);
	self.PrevAddrAVMValue                 := (integer)(le.PrevAddrAVMValue != ri.PrevAddrAVMValue);
	self.PrevAddrAVMConfidence            := (integer)(le.PrevAddrAVMConfidence != ri.PrevAddrAVMConfidence);
	self.PrevAddrCountyIndex              := (integer)(le.PrevAddrCountyIndex != ri.PrevAddrCountyIndex);
	self.PrevAddrTractIndex               := (integer)(le.PrevAddrTractIndex != ri.PrevAddrTractIndex);
	self.PrevAddrBlockIndex               := (integer)(le.PrevAddrBlockIndex != ri.PrevAddrBlockIndex);
	self.InputCurrMatch                   := (integer)(le.InputCurrMatch != ri.InputCurrMatch);
	self.DistInputCurr                    := (integer)(le.DistInputCurr != ri.DistInputCurr);
	self.DiffState                        := (integer)(le.DiffState != ri.DiffState);
	self.AssessedDiff                     := (integer)(le.AssessedDiff != ri.AssessedDiff);
	self.EcoTrajectory                    := (integer)(le.EcoTrajectory != ri.EcoTrajectory);
	self.InputPrevMatch                   := (integer)(le.InputPrevMatch != ri.InputPrevMatch);
	self.DistCurrPrev                     := (integer)(le.DistCurrPrev != ri.DistCurrPrev);
	self.DiffState2                       := (integer)(le.DiffState2 != ri.DiffState2);
	self.AssessedDiff2                    := (integer)(le.AssessedDiff2 != ri.AssessedDiff2);
	self.EcoTrajectory2                   := (integer)(le.EcoTrajectory2 != ri.EcoTrajectory2);
	self.EducationAttendedCollege         := (integer)(le.EducationAttendedCollege != ri.EducationAttendedCollege);
	self.EducationProgram2Yr              := (integer)(le.EducationProgram2Yr != ri.EducationProgram2Yr);
	self.EducationProgram4Yr              := (integer)(le.EducationProgram4Yr != ri.EducationProgram4Yr);
	self.EducationProgramGraduate         := (integer)(le.EducationProgramGraduate != ri.EducationProgramGraduate);
	self.EducationInstitutionPrivate      := (integer)(le.EducationInstitutionPrivate != ri.EducationInstitutionPrivate);
	self.EducationInstitutionRating       := (integer)(le.EducationInstitutionRating != ri.EducationInstitutionRating);
	self.mobility_indicator               := (integer)(le.mobility_indicator != ri.mobility_indicator);
	self.statusAddr                       := (integer)(le.statusAddr != ri.statusAddr);
	self.statusAddr2                      := (integer)(le.statusAddr2 != ri.statusAddr2);
	self.statusAddr3                      := (integer)(le.statusAddr3 != ri.statusAddr3);
	self.addrChanges30                    := (integer)(le.addrChanges30 != ri.addrChanges30);
	self.addrChanges90                    := (integer)(le.addrChanges90 != ri.addrChanges90);
	self.addrChanges180                   := (integer)(le.addrChanges180 != ri.addrChanges180);
	self.addrChanges12                    := (integer)(le.addrChanges12 != ri.addrChanges12);
	self.addrChanges24                    := (integer)(le.addrChanges24 != ri.addrChanges24);
	self.addrChanges36                    := (integer)(le.addrChanges36 != ri.addrChanges36);
	self.addrChanges60                    := (integer)(le.addrChanges60 != ri.addrChanges60);
	self.PredictedAnnualIncome            := (integer)(le.PredictedAnnualIncome != ri.PredictedAnnualIncome);
	self.property_owned_total             := (integer)(le.property_owned_total != ri.property_owned_total);
	self.property_owned_assessed_total    := (integer)(le.property_owned_assessed_total != ri.property_owned_assessed_total);
	self.property_historically_owned      := (integer)(le.property_historically_owned != ri.property_historically_owned);
	self.PropAgeOldestPurchase            := (integer)(le.PropAgeOldestPurchase != ri.PropAgeOldestPurchase);
	self.PropAgeNewestPurchase            := (integer)(le.PropAgeNewestPurchase != ri.PropAgeNewestPurchase);
	self.PropAgeNewestSale                := (integer)(le.PropAgeNewestSale != ri.PropAgeNewestSale);
	self.PropNewestSalePrice              := (integer)(le.PropNewestSalePrice != ri.PropNewestSalePrice);
	self.PropNewestSalePurchaseIndex      := (integer)(le.PropNewestSalePurchaseIndex != ri.PropNewestSalePurchaseIndex);
	self.numPurchase30                    := (integer)(le.numPurchase30 != ri.numPurchase30);
	self.numPurchase90                    := (integer)(le.numPurchase90 != ri.numPurchase90);
	self.numPurchase180                   := (integer)(le.numPurchase180 != ri.numPurchase180);
	self.numPurchase12                    := (integer)(le.numPurchase12 != ri.numPurchase12);
	self.numPurchase24                    := (integer)(le.numPurchase24 != ri.numPurchase24);
	self.numPurchase36                    := (integer)(le.numPurchase36 != ri.numPurchase36);
	self.numPurchase60                    := (integer)(le.numPurchase60 != ri.numPurchase60);
	self.numSold30                        := (integer)(le.numSold30 != ri.numSold30);
	self.numSold90                        := (integer)(le.numSold90 != ri.numSold90);
	self.numSold180                       := (integer)(le.numSold180 != ri.numSold180);
	self.numSold12                        := (integer)(le.numSold12 != ri.numSold12);
	self.numSold24                        := (integer)(le.numSold24 != ri.numSold24);
	self.numSold36                        := (integer)(le.numSold36 != ri.numSold36);
	self.numSold60                        := (integer)(le.numSold60 != ri.numSold60);
	self.numWatercraft                    := (integer)(le.numWatercraft != ri.numWatercraft);
	self.numWatercraft30                  := (integer)(le.numWatercraft30 != ri.numWatercraft30);
	self.numWatercraft90                  := (integer)(le.numWatercraft90 != ri.numWatercraft90);
	self.numWatercraft180                 := (integer)(le.numWatercraft180 != ri.numWatercraft180);
	self.numWatercraft12                  := (integer)(le.numWatercraft12 != ri.numWatercraft12);
	self.numWatercraft24                  := (integer)(le.numWatercraft24 != ri.numWatercraft24);
	self.numWatercraft36                  := (integer)(le.numWatercraft36 != ri.numWatercraft36);
	self.numWatercraft60                  := (integer)(le.numWatercraft60 != ri.numWatercraft60);
	self.numAircraft                      := (integer)(le.numAircraft != ri.numAircraft);
	self.numAircraft30                    := (integer)(le.numAircraft30 != ri.numAircraft30);
	self.numAircraft90                    := (integer)(le.numAircraft90 != ri.numAircraft90);
	self.numAircraft180                   := (integer)(le.numAircraft180 != ri.numAircraft180);
	self.numAircraft12                    := (integer)(le.numAircraft12 != ri.numAircraft12);
	self.numAircraft24                    := (integer)(le.numAircraft24 != ri.numAircraft24);
	self.numAircraft36                    := (integer)(le.numAircraft36 != ri.numAircraft36);
	self.numAircraft60                    := (integer)(le.numAircraft60 != ri.numAircraft60);
	self.wealth_indicator                 := (integer)(le.wealth_indicator != ri.wealth_indicator);
	self.SubPrimeSolicitedCount           := (integer)(le.SubPrimeSolicitedCount != ri.SubPrimeSolicitedCount);
	self.SubPrimeSolicitedCount01         := (integer)(le.SubPrimeSolicitedCount01 != ri.SubPrimeSolicitedCount01);
	self.SubprimeSolicitedCount03         := (integer)(le.SubprimeSolicitedCount03 != ri.SubprimeSolicitedCount03);
	self.SubprimeSolicitedCount06         := (integer)(le.SubprimeSolicitedCount06 != ri.SubprimeSolicitedCount06);
	self.SubPrimeSolicitedCount12         := (integer)(le.SubPrimeSolicitedCount12 != ri.SubPrimeSolicitedCount12);
	self.SubPrimeSolicitedCount24         := (integer)(le.SubPrimeSolicitedCount24 != ri.SubPrimeSolicitedCount24);
	self.SubPrimeSolicitedCount36         := (integer)(le.SubPrimeSolicitedCount36 != ri.SubPrimeSolicitedCount36);
	self.SubPrimeSolicitedCount60         := (integer)(le.SubPrimeSolicitedCount60 != ri.SubPrimeSolicitedCount60);
	self.total_number_derogs              := (integer)(le.total_number_derogs != ri.total_number_derogs);
	self.DerogAge                         := (integer)(le.DerogAge != ri.DerogAge);
	self.felonies                         := (integer)(le.felonies != ri.felonies);
	self.FelonyAge                        := (integer)(le.FelonyAge != ri.FelonyAge);
	self.felonies30                       := (integer)(le.felonies30 != ri.felonies30);
	self.felonies90                       := (integer)(le.felonies90 != ri.felonies90);
	self.felonies180                      := (integer)(le.felonies180 != ri.felonies180);
	self.felonies12                       := (integer)(le.felonies12 != ri.felonies12);
	self.felonies24                       := (integer)(le.felonies24 != ri.felonies24);
	self.felonies36                       := (integer)(le.felonies36 != ri.felonies36);
	self.felonies60                       := (integer)(le.felonies60 != ri.felonies60);
	self.num_liens                        := (integer)(le.num_liens != ri.num_liens);
	self.num_unreleased_liens             := (integer)(le.num_unreleased_liens != ri.num_unreleased_liens);
	self.LienFiledAge                     := (integer)(le.LienFiledAge != ri.LienFiledAge);
	self.num_unreleased_liens30           := (integer)(le.num_unreleased_liens30 != ri.num_unreleased_liens30);
	self.num_unreleased_liens90           := (integer)(le.num_unreleased_liens90 != ri.num_unreleased_liens90);
	self.num_unreleased_liens180          := (integer)(le.num_unreleased_liens180 != ri.num_unreleased_liens180);
	self.num_unreleased_liens12           := (integer)(le.num_unreleased_liens12 != ri.num_unreleased_liens12);
	self.num_unreleased_liens24           := (integer)(le.num_unreleased_liens24 != ri.num_unreleased_liens24);
	self.num_unreleased_liens36           := (integer)(le.num_unreleased_liens36 != ri.num_unreleased_liens36);
	self.num_unreleased_liens60           := (integer)(le.num_unreleased_liens60 != ri.num_unreleased_liens60);
	self.num_released_liens               := (integer)(le.num_released_liens != ri.num_released_liens);
	self.LienReleasedAge                  := (integer)(le.LienReleasedAge != ri.LienReleasedAge);
	self.num_released_liens30             := (integer)(le.num_released_liens30 != ri.num_released_liens30);
	self.num_released_liens90             := (integer)(le.num_released_liens90 != ri.num_released_liens90);
	self.num_released_liens180            := (integer)(le.num_released_liens180 != ri.num_released_liens180);
	self.num_released_liens12             := (integer)(le.num_released_liens12 != ri.num_released_liens12);
	self.num_released_liens24             := (integer)(le.num_released_liens24 != ri.num_released_liens24);
	self.num_released_liens36             := (integer)(le.num_released_liens36 != ri.num_released_liens36);
	self.num_released_liens60             := (integer)(le.num_released_liens60 != ri.num_released_liens60);
	self.LienFederalTaxFiledTotal         := (integer)(le.LienFederalTaxFiledTotal != ri.LienFederalTaxFiledTotal);
	self.LienTaxOtherFiledTotal           := (integer)(le.LienTaxOtherFiledTotal != ri.LienTaxOtherFiledTotal);
	self.LienForeclosureFiledTotal        := (integer)(le.LienForeclosureFiledTotal != ri.LienForeclosureFiledTotal);
	self.LienPreforeclosureFiledTotal     := (integer)(le.LienPreforeclosureFiledTotal != ri.LienPreforeclosureFiledTotal);
	self.LienLandlordTenantFiledTotal     := (integer)(le.LienLandlordTenantFiledTotal != ri.LienLandlordTenantFiledTotal);
	self.LienJudgmentFiledTotal           := (integer)(le.LienJudgmentFiledTotal != ri.LienJudgmentFiledTotal);
	self.LienSmallClaimsFiledTotal        := (integer)(le.LienSmallClaimsFiledTotal != ri.LienSmallClaimsFiledTotal);
	self.LienOtherFiledTotal              := (integer)(le.LienOtherFiledTotal != ri.LienOtherFiledTotal);
	self.LienFederalTaxReleasedTotal      := (integer)(le.LienFederalTaxReleasedTotal != ri.LienFederalTaxReleasedTotal);
	self.LienTaxOtherReleasedTotal        := (integer)(le.LienTaxOtherReleasedTotal != ri.LienTaxOtherReleasedTotal);
	self.LienForeclosureReleasedTotal     := (integer)(le.LienForeclosureReleasedTotal != ri.LienForeclosureReleasedTotal);
	self.LienPreforeclosureReleasedTotal  := (integer)(le.LienPreforeclosureReleasedTotal != ri.LienPreforeclosureReleasedTotal);
	self.LienLandlordTenantReleasedTotal  := (integer)(le.LienLandlordTenantReleasedTotal != ri.LienLandlordTenantReleasedTotal);
	self.LienJudgmentReleasedTotal        := (integer)(le.LienJudgmentReleasedTotal != ri.LienJudgmentReleasedTotal);
	self.LienSmallClaimsReleasedTotal     := (integer)(le.LienSmallClaimsReleasedTotal != ri.LienSmallClaimsReleasedTotal);
	self.LienOtherReleasedTotal           := (integer)(le.LienOtherReleasedTotal != ri.LienOtherReleasedTotal);
	self.LienFederalTaxFiledCount         := (integer)(le.LienFederalTaxFiledCount != ri.LienFederalTaxFiledCount);
	self.LienTaxOtherFiledCount           := (integer)(le.LienTaxOtherFiledCount != ri.LienTaxOtherFiledCount);
	self.LienForeclosureFiledCount        := (integer)(le.LienForeclosureFiledCount != ri.LienForeclosureFiledCount);
	self.LienPreforeclosureFiledCount     := (integer)(le.LienPreforeclosureFiledCount != ri.LienPreforeclosureFiledCount);
	self.LienLandlordTenantFiledCount     := (integer)(le.LienLandlordTenantFiledCount != ri.LienLandlordTenantFiledCount);
	self.LienJudgmentFiledCount           := (integer)(le.LienJudgmentFiledCount != ri.LienJudgmentFiledCount);
	self.LienSmallClaimsFiledCount        := (integer)(le.LienSmallClaimsFiledCount != ri.LienSmallClaimsFiledCount);
	self.LienOtherFiledCount              := (integer)(le.LienOtherFiledCount != ri.LienOtherFiledCount);
	self.LienFederalTaxReleasedCount      := (integer)(le.LienFederalTaxReleasedCount != ri.LienFederalTaxReleasedCount);
	self.LienTaxOtherReleasedCount        := (integer)(le.LienTaxOtherReleasedCount != ri.LienTaxOtherReleasedCount);
	self.LienForeclosureReleasedCount     := (integer)(le.LienForeclosureReleasedCount != ri.LienForeclosureReleasedCount);
	self.LienPreforeclosureReleasedCount  := (integer)(le.LienPreforeclosureReleasedCount != ri.LienPreforeclosureReleasedCount);
	self.LienLandlordTenantReleasedCount  := (integer)(le.LienLandlordTenantReleasedCount != ri.LienLandlordTenantReleasedCount);
	self.LienJudgmentReleasedCount        := (integer)(le.LienJudgmentReleasedCount != ri.LienJudgmentReleasedCount);
	self.LienSmallClaimsReleasedCount     := (integer)(le.LienSmallClaimsReleasedCount != ri.LienSmallClaimsReleasedCount);
	self.LienOtherReleasedCount           := (integer)(le.LienOtherReleasedCount != ri.LienOtherReleasedCount);
	self.bankruptcy_count                 := (integer)(le.bankruptcy_count != ri.bankruptcy_count);
	self.BankruptcyAge                    := (integer)(le.BankruptcyAge != ri.BankruptcyAge);
	self.filing_type                      := (integer)(le.filing_type != ri.filing_type);
	self.disposition                      := (integer)(le.disposition != ri.disposition);
	self.bankruptcy_count30               := (integer)(le.bankruptcy_count30 != ri.bankruptcy_count30);
	self.bankruptcy_count90               := (integer)(le.bankruptcy_count90 != ri.bankruptcy_count90);
	self.bankruptcy_count180              := (integer)(le.bankruptcy_count180 != ri.bankruptcy_count180);
	self.bankruptcy_count12               := (integer)(le.bankruptcy_count12 != ri.bankruptcy_count12);
	self.bankruptcy_count24               := (integer)(le.bankruptcy_count24 != ri.bankruptcy_count24);
	self.bankruptcy_count36               := (integer)(le.bankruptcy_count36 != ri.bankruptcy_count36);
	self.bankruptcy_count60               := (integer)(le.bankruptcy_count60 != ri.bankruptcy_count60);
	self.eviction_count                   := (integer)(le.eviction_count != ri.eviction_count);
	self.EvictionAge                      := (integer)(le.EvictionAge != ri.EvictionAge);
	self.eviction_count30                 := (integer)(le.eviction_count30 != ri.eviction_count30);
	self.eviction_count90                 := (integer)(le.eviction_count90 != ri.eviction_count90);
	self.eviction_count180                := (integer)(le.eviction_count180 != ri.eviction_count180);
	self.eviction_count12                 := (integer)(le.eviction_count12 != ri.eviction_count12);
	self.eviction_count24                 := (integer)(le.eviction_count24 != ri.eviction_count24);
	self.eviction_count36                 := (integer)(le.eviction_count36 != ri.eviction_count36);
	self.eviction_count60                 := (integer)(le.eviction_count60 != ri.eviction_count60);
	self.num_nonderogs                    := (integer)(le.num_nonderogs != ri.num_nonderogs);
	self.num_nonderogs30                  := (integer)(le.num_nonderogs30 != ri.num_nonderogs30);
	self.num_nonderogs90                  := (integer)(le.num_nonderogs90 != ri.num_nonderogs90);
	self.num_nonderogs180                 := (integer)(le.num_nonderogs180 != ri.num_nonderogs180);
	self.num_nonderogs12                  := (integer)(le.num_nonderogs12 != ri.num_nonderogs12);
	self.num_nonderogs24                  := (integer)(le.num_nonderogs24 != ri.num_nonderogs24);
	self.num_nonderogs36                  := (integer)(le.num_nonderogs36 != ri.num_nonderogs36);
	self.num_nonderogs60                  := (integer)(le.num_nonderogs60 != ri.num_nonderogs60);
	self.num_proflic                      := (integer)(le.num_proflic != ri.num_proflic);
	self.ProfLicAge                       := (integer)(le.ProfLicAge != ri.ProfLicAge);
	self.proflic_type                     := (integer)(le.proflic_type != ri.proflic_type);
	self.ProfLicTypeCategory              := (integer)(le.ProfLicTypeCategory != ri.ProfLicTypeCategory);
	self.expire_date_last_proflic         := (integer)(le.expire_date_last_proflic != ri.expire_date_last_proflic);
	self.num_proflic30                    := (integer)(le.num_proflic30 != ri.num_proflic30);
	self.num_proflic90                    := (integer)(le.num_proflic90 != ri.num_proflic90);
	self.num_proflic180                   := (integer)(le.num_proflic180 != ri.num_proflic180);
	self.num_proflic12                    := (integer)(le.num_proflic12 != ri.num_proflic12);
	self.num_proflic24                    := (integer)(le.num_proflic24 != ri.num_proflic24);
	self.num_proflic36                    := (integer)(le.num_proflic36 != ri.num_proflic36);
	self.num_proflic60                    := (integer)(le.num_proflic60 != ri.num_proflic60);
	self.num_proflic_exp30                := (integer)(le.num_proflic_exp30 != ri.num_proflic_exp30);
	self.num_proflic_exp90                := (integer)(le.num_proflic_exp90 != ri.num_proflic_exp90);
	self.num_proflic_exp180               := (integer)(le.num_proflic_exp180 != ri.num_proflic_exp180);
	self.num_proflic_exp12                := (integer)(le.num_proflic_exp12 != ri.num_proflic_exp12);
	self.num_proflic_exp24                := (integer)(le.num_proflic_exp24 != ri.num_proflic_exp24);
	self.num_proflic_exp36                := (integer)(le.num_proflic_exp36 != ri.num_proflic_exp36);
	self.num_proflic_exp60                := (integer)(le.num_proflic_exp60 != ri.num_proflic_exp60);
	self.phoneStatus                      := (integer)(le.phoneStatus != ri.phoneStatus);
	self.PhonePager                       := (integer)(le.PhonePager != ri.PhonePager);
	self.PhoneMobile                      := (integer)(le.PhoneMobile != ri.PhoneMobile);
	self.PhoneEDAAgeOldestRecord          := (integer)(le.PhoneEDAAgeOldestRecord != ri.PhoneEDAAgeOldestRecord);
	self.PhoneEDAAgeNewestRecord          := (integer)(le.PhoneEDAAgeNewestRecord != ri.PhoneEDAAgeNewestRecord);
	self.PhoneOtherAgeOldestRecord        := (integer)(le.PhoneOtherAgeOldestRecord != ri.PhoneOtherAgeOldestRecord);
	self.PhoneOtherAgeNewestRecord        := (integer)(le.PhoneOtherAgeNewestRecord != ri.PhoneOtherAgeNewestRecord);
	self.PhoneZipMismatch                 := (integer)(le.PhoneZipMismatch != ri.PhoneZipMismatch);
	self.phoneAddrDist                    := (integer)(le.phoneAddrDist != ri.phoneAddrDist);
	self.AddrHighRisk                     := (integer)(le.AddrHighRisk != ri.AddrHighRisk);
	self.PhoneHighRisk                    := (integer)(le.PhoneHighRisk != ri.PhoneHighRisk);
	self.AddrPrison                       := (integer)(le.AddrPrison != ri.AddrPrison);
	self.ZipPOBox                         := (integer)(le.ZipPOBox != ri.ZipPOBox);
	self.ZipCorpMil                       := (integer)(le.ZipCorpMil != ri.ZipCorpMil);
	self.correctedFlag                    := (integer)(le.correctedFlag != ri.correctedFlag);
	self.securityFreeze                   := (integer)(le.securityFreeze != ri.securityFreeze);
	self.securityAlert                    := (integer)(le.securityAlert != ri.securityAlert);
	self.idTheftFlag                      := (integer)(le.idTheftFlag != ri.idTheftFlag);
	self.PrescreenOptOut                  := (integer)(le.PrescreenOptOut != ri.PrescreenOptOut);
	self.history_date                     := (integer)(le.history_date != ri.history_date);
	self.errorcode                        := (integer)(le.errorcode != ri.errorcode);
END;
	
res := JOIN (ds_original, ds_compare, LEFT.accountnumber=RIGHT.accountnumber, mk_matches(LEFT,RIGHT));
//output(res);

total := count(res);
AgeOldestRecord                  := count(res(AgeOldestRecord = 1));
AgeNewestRecord                  := count(res(AgeNewestRecord = 1));
isRecentUpdate                   := count(res(isRecentUpdate = 1));
NumSources                       := count(res(NumSources = 1));
InvalidSSN                       := count(res(InvalidSSN = 1));
InvalidAddr                      := count(res(InvalidAddr = 1));
InvalidDL                        := count(res(InvalidDL = 1));
InvalidPhone                     := count(res(InvalidPhone = 1));
isNoVer                          := count(res(isNoVer = 1));
SSNNotFound                      := count(res(SSNNotFound = 1));
VerifiedName                     := count(res(VerifiedName = 1));
VerifiedSSN                      := count(res(VerifiedSSN = 1));
VerifiedPhone                    := count(res(VerifiedPhone = 1));
VerifiedPhoneFullName            := count(res(VerifiedPhoneFullName = 1));
VerifiedPhoneLastName            := count(res(VerifiedPhoneLastName = 1));
VerifiedAddress                  := count(res(VerifiedAddress = 1));
VerifiedDOB                      := count(res(VerifiedDOB = 1));
InferredMinimumAge               := count(res(InferredMinimumAge = 1));
BestReportedAge                  := count(res(BestReportedAge = 1));
SubjectSSNCount                  := count(res(SubjectSSNCount = 1));
SubjectAddrCount                 := count(res(SubjectAddrCount = 1));
SubjectPhoneCount                := count(res(SubjectPhoneCount = 1));
SubjectSSNRecentCount            := count(res(SubjectSSNRecentCount = 1));
SubjectAddrRecentCount           := count(res(SubjectAddrRecentCount = 1));
SubjectPhoneRecentCount          := count(res(SubjectPhoneRecentCount = 1));
SSNIdentitiesCount               := count(res(SSNIdentitiesCount = 1));
SSNAddrCount                     := count(res(SSNAddrCount = 1));
SSNIdentitiesRecentCount         := count(res(SSNIdentitiesRecentCount = 1));
SSNAddrRecentCount               := count(res(SSNAddrRecentCount = 1));
InputAddrIdentitiesCount         := count(res(InputAddrIdentitiesCount = 1));
InputAddrSSNCount                := count(res(InputAddrSSNCount = 1));
InputAddrPhoneCount              := count(res(InputAddrPhoneCount = 1));
InputAddrIdentitiesRecentCount   := count(res(InputAddrIdentitiesRecentCount = 1));
InputAddrSSNRecentCount          := count(res(InputAddrSSNRecentCount = 1));
InputAddrPhoneRecentCount        := count(res(InputAddrPhoneRecentCount = 1));
PhoneIdentitiesCount             := count(res(PhoneIdentitiesCount = 1));
PhoneIdentitiesRecentCount       := count(res(PhoneIdentitiesRecentCount = 1));
SSNDeceased                      := count(res(SSNDeceased = 1));
DeceasedDate                     := count(res(DeceasedDate = 1));
SSNValid                         := count(res(SSNValid = 1));
RecentIssue                      := count(res(RecentIssue = 1));
LowIssueDate                     := count(res(LowIssueDate = 1));
HighIssueDate                    := count(res(HighIssueDate = 1));
IssueState                       := count(res(IssueState = 1));
NonUS                            := count(res(NonUS = 1));
SSNIssuedPriorDOB                := count(res(SSNIssuedPriorDOB = 1));
Issued3                          := count(res(Issued3 = 1));
IssuedAge5                       := count(res(IssuedAge5 = 1));
IAAgeOldestRecord                := count(res(IAAgeOldestRecord = 1));
IAAgeNewestRecord                := count(res(IAAgeNewestRecord = 1));
IALenOfRes                       := count(res(IALenOfRes = 1));
IADwellType                      := count(res(IADwellType = 1));
IALandUseCode                    := count(res(IALandUseCode = 1));
IAOwnedBySubject                 := count(res(IAOwnedBySubject = 1));
IAFamilyOwned                    := count(res(IAFamilyOwned = 1));
IAOccupantOwned                  := count(res(IAOccupantOwned = 1));
IAAgeLastSale                    := count(res(IAAgeLastSale = 1));
IALastSaleAmount                 := count(res(IALastSaleAmount = 1));
IANotPrimaryRes                  := count(res(IANotPrimaryRes = 1));
IAPhoneListed                    := count(res(IAPhoneListed = 1));
IAPhoneNumber                    := count(res(IAPhoneNumber = 1));
IAAssessedValue                  := count(res(IAAssessedValue = 1));
InputAddrTaxYr                   := count(res(InputAddrTaxYr = 1));
InputAddrTaxMarketValue          := count(res(InputAddrTaxMarketValue = 1));
InputAddrAVMTax                  := count(res(InputAddrAVMTax = 1));
InputAddrAVMSalesPrice           := count(res(InputAddrAVMSalesPrice = 1));
InputAddrAVMHedonic              := count(res(InputAddrAVMHedonic = 1));
InputAddrAVMValue                := count(res(InputAddrAVMValue = 1));
InputAddrAVMConfidence           := count(res(InputAddrAVMConfidence = 1));
InputAddrCountyIndex             := count(res(InputAddrCountyIndex = 1));
InputAddrTractIndex              := count(res(InputAddrTractIndex = 1));
InputAddrBlockIndex              := count(res(InputAddrBlockIndex = 1));
CAAgeOldestRecord                := count(res(CAAgeOldestRecord = 1));
CAAgeNewestRecord                := count(res(CAAgeNewestRecord = 1));
CALenOfRes                       := count(res(CALenOfRes = 1));
CADwellType                      := count(res(CADwellType = 1));
CALandUseCode                    := count(res(CALandUseCode = 1));
CAOwnedBySubject                 := count(res(CAOwnedBySubject = 1));
CAFamilyOwned                    := count(res(CAFamilyOwned = 1));
CAOccupantOwned                  := count(res(CAOccupantOwned = 1));
CAAgeLastSale                    := count(res(CAAgeLastSale = 1));
CALastSaleAmount                 := count(res(CALastSaleAmount = 1));
CANotPrimaryRes                  := count(res(CANotPrimaryRes = 1));
CAPhoneListed                    := count(res(CAPhoneListed = 1));
CAPhoneNumber                    := count(res(CAPhoneNumber = 1));
CAAssessedValue                  := count(res(CAAssessedValue = 1));
CurrAddrTaxYr                    := count(res(CurrAddrTaxYr = 1));
CurrAddrTaxMarketValue           := count(res(CurrAddrTaxMarketValue = 1));
CurrAddrAVMTax                   := count(res(CurrAddrAVMTax = 1));
CurrAddrAVMSalesPrice            := count(res(CurrAddrAVMSalesPrice = 1));
CurrAddrAVMHedonic               := count(res(CurrAddrAVMHedonic = 1));
CurrAddrAVMValue                 := count(res(CurrAddrAVMValue = 1));
CurrAddrAVMConfidence            := count(res(CurrAddrAVMConfidence = 1));
CurrAddrCountyIndex              := count(res(CurrAddrCountyIndex = 1));
CurrAddrTractIndex               := count(res(CurrAddrTractIndex = 1));
CurrAddrBlockIndex               := count(res(CurrAddrBlockIndex = 1));
PAAgeOldestRecord                := count(res(PAAgeOldestRecord = 1));
PAAgeNewestRecord                := count(res(PAAgeNewestRecord = 1));
PALenOfRes                       := count(res(PALenOfRes = 1));
PADwellType                      := count(res(PADwellType = 1));
PALandUseCode                    := count(res(PALandUseCode = 1));
PAOwnedBySubject                 := count(res(PAOwnedBySubject = 1));
PAFamilyOwned                    := count(res(PAFamilyOwned = 1));
PAOccupantOwned                  := count(res(PAOccupantOwned = 1));
PAAgeLastSale                    := count(res(PAAgeLastSale = 1));
PALastSaleAmount                 := count(res(PALastSaleAmount = 1));
PAPhoneListed                    := count(res(PAPhoneListed = 1));
PAPhoneNumber                    := count(res(PAPhoneNumber = 1));
PAAssessedValue                  := count(res(PAAssessedValue = 1));
PrevAddrTaxYr                    := count(res(PrevAddrTaxYr = 1));
PrevAddrTaxMarketValue           := count(res(PrevAddrTaxMarketValue = 1));
PrevAddrAVMTax                   := count(res(PrevAddrAVMTax = 1));
PrevAddrAVMSalesPrice            := count(res(PrevAddrAVMSalesPrice = 1));
PrevAddrAVMHedonic               := count(res(PrevAddrAVMHedonic = 1));
PrevAddrAVMValue                 := count(res(PrevAddrAVMValue = 1));
PrevAddrAVMConfidence            := count(res(PrevAddrAVMConfidence = 1));
PrevAddrCountyIndex              := count(res(PrevAddrCountyIndex = 1));
PrevAddrTractIndex               := count(res(PrevAddrTractIndex = 1));
PrevAddrBlockIndex               := count(res(PrevAddrBlockIndex = 1));
InputCurrMatch                   := count(res(InputCurrMatch = 1));
DistInputCurr                    := count(res(DistInputCurr = 1));
DiffState                        := count(res(DiffState = 1));
AssessedDiff                     := count(res(AssessedDiff = 1));
EcoTrajectory                    := count(res(EcoTrajectory = 1));
InputPrevMatch                   := count(res(InputPrevMatch = 1));
DistCurrPrev                     := count(res(DistCurrPrev = 1));
DiffState2                       := count(res(DiffState2 = 1));
AssessedDiff2                    := count(res(AssessedDiff2 = 1));
EcoTrajectory2                   := count(res(EcoTrajectory2 = 1));
EducationAttendedCollege         := count(res(EducationAttendedCollege = 1));
EducationProgram2Yr              := count(res(EducationProgram2Yr = 1));
EducationProgram4Yr              := count(res(EducationProgram4Yr = 1));
EducationProgramGraduate         := count(res(EducationProgramGraduate = 1));
EducationInstitutionPrivate      := count(res(EducationInstitutionPrivate = 1));
EducationInstitutionRating       := count(res(EducationInstitutionRating = 1));
mobility_indicator               := count(res(mobility_indicator = 1));
statusAddr                       := count(res(statusAddr = 1));
statusAddr2                      := count(res(statusAddr2 = 1));
statusAddr3                      := count(res(statusAddr3 = 1));
addrChanges30                    := count(res(addrChanges30 = 1));
addrChanges90                    := count(res(addrChanges90 = 1));
addrChanges180                   := count(res(addrChanges180 = 1));
addrChanges12                    := count(res(addrChanges12 = 1));
addrChanges24                    := count(res(addrChanges24 = 1));
addrChanges36                    := count(res(addrChanges36 = 1));
addrChanges60                    := count(res(addrChanges60 = 1));
PredictedAnnualIncome            := count(res(PredictedAnnualIncome = 1));
property_owned_total             := count(res(property_owned_total = 1));
property_owned_assessed_total    := count(res(property_owned_assessed_total = 1));
property_historically_owned      := count(res(property_historically_owned = 1));
PropAgeOldestPurchase            := count(res(PropAgeOldestPurchase = 1));
PropAgeNewestPurchase            := count(res(PropAgeNewestPurchase = 1));
PropAgeNewestSale                := count(res(PropAgeNewestSale = 1));
PropNewestSalePrice              := count(res(PropNewestSalePrice = 1));
PropNewestSalePurchaseIndex      := count(res(PropNewestSalePurchaseIndex = 1));
numPurchase30                    := count(res(numPurchase30 = 1));
numPurchase90                    := count(res(numPurchase90 = 1));
numPurchase180                   := count(res(numPurchase180 = 1));
numPurchase12                    := count(res(numPurchase12 = 1));
numPurchase24                    := count(res(numPurchase24 = 1));
numPurchase36                    := count(res(numPurchase36 = 1));
numPurchase60                    := count(res(numPurchase60 = 1));
numSold30                        := count(res(numSold30 = 1));
numSold90                        := count(res(numSold90 = 1));
numSold180                       := count(res(numSold180 = 1));
numSold12                        := count(res(numSold12 = 1));
numSold24                        := count(res(numSold24 = 1));
numSold36                        := count(res(numSold36 = 1));
numSold60                        := count(res(numSold60 = 1));
numWatercraft                    := count(res(numWatercraft = 1));
numWatercraft30                  := count(res(numWatercraft30 = 1));
numWatercraft90                  := count(res(numWatercraft90 = 1));
numWatercraft180                 := count(res(numWatercraft180 = 1));
numWatercraft12                  := count(res(numWatercraft12 = 1));
numWatercraft24                  := count(res(numWatercraft24 = 1));
numWatercraft36                  := count(res(numWatercraft36 = 1));
numWatercraft60                  := count(res(numWatercraft60 = 1));
numAircraft                      := count(res(numAircraft = 1));
numAircraft30                    := count(res(numAircraft30 = 1));
numAircraft90                    := count(res(numAircraft90 = 1));
numAircraft180                   := count(res(numAircraft180 = 1));
numAircraft12                    := count(res(numAircraft12 = 1));
numAircraft24                    := count(res(numAircraft24 = 1));
numAircraft36                    := count(res(numAircraft36 = 1));
numAircraft60                    := count(res(numAircraft60 = 1));
wealth_indicator                 := count(res(wealth_indicator = 1));
SubPrimeSolicitedCount           := count(res(SubPrimeSolicitedCount = 1));
SubPrimeSolicitedCount01         := count(res(SubPrimeSolicitedCount01 = 1));
SubprimeSolicitedCount03         := count(res(SubprimeSolicitedCount03 = 1));
SubprimeSolicitedCount06         := count(res(SubprimeSolicitedCount06 = 1));
SubPrimeSolicitedCount12         := count(res(SubPrimeSolicitedCount12 = 1));
SubPrimeSolicitedCount24         := count(res(SubPrimeSolicitedCount24 = 1));
SubPrimeSolicitedCount36         := count(res(SubPrimeSolicitedCount36 = 1));
SubPrimeSolicitedCount60         := count(res(SubPrimeSolicitedCount60 = 1));
total_number_derogs              := count(res(total_number_derogs = 1));
DerogAge                         := count(res(DerogAge = 1));
felonies                         := count(res(felonies = 1));
FelonyAge                        := count(res(FelonyAge = 1));
felonies30                       := count(res(felonies30 = 1));
felonies90                       := count(res(felonies90 = 1));
felonies180                      := count(res(felonies180 = 1));
felonies12                       := count(res(felonies12 = 1));
felonies24                       := count(res(felonies24 = 1));
felonies36                       := count(res(felonies36 = 1));
felonies60                       := count(res(felonies60 = 1));
num_liens                        := count(res(num_liens = 1));
num_unreleased_liens             := count(res(num_unreleased_liens = 1));
LienFiledAge                     := count(res(LienFiledAge = 1));
num_unreleased_liens30           := count(res(num_unreleased_liens30 = 1));
num_unreleased_liens90           := count(res(num_unreleased_liens90 = 1));
num_unreleased_liens180          := count(res(num_unreleased_liens180 = 1));
num_unreleased_liens12           := count(res(num_unreleased_liens12 = 1));
num_unreleased_liens24           := count(res(num_unreleased_liens24 = 1));
num_unreleased_liens36           := count(res(num_unreleased_liens36 = 1));
num_unreleased_liens60           := count(res(num_unreleased_liens60 = 1));
num_released_liens               := count(res(num_released_liens = 1));
LienReleasedAge                  := count(res(LienReleasedAge = 1));
num_released_liens30             := count(res(num_released_liens30 = 1));
num_released_liens90             := count(res(num_released_liens90 = 1));
num_released_liens180            := count(res(num_released_liens180 = 1));
num_released_liens12             := count(res(num_released_liens12 = 1));
num_released_liens24             := count(res(num_released_liens24 = 1));
num_released_liens36             := count(res(num_released_liens36 = 1));
num_released_liens60             := count(res(num_released_liens60 = 1));
LienFederalTaxFiledTotal         := count(res(LienFederalTaxFiledTotal = 1));
LienTaxOtherFiledTotal           := count(res(LienTaxOtherFiledTotal = 1));
LienForeclosureFiledTotal        := count(res(LienForeclosureFiledTotal = 1));
LienPreforeclosureFiledTotal     := count(res(LienPreforeclosureFiledTotal = 1));
LienLandlordTenantFiledTotal     := count(res(LienLandlordTenantFiledTotal = 1));
LienJudgmentFiledTotal           := count(res(LienJudgmentFiledTotal = 1));
LienSmallClaimsFiledTotal        := count(res(LienSmallClaimsFiledTotal = 1));
LienOtherFiledTotal              := count(res(LienOtherFiledTotal = 1));
LienFederalTaxReleasedTotal      := count(res(LienFederalTaxReleasedTotal = 1));
LienTaxOtherReleasedTotal        := count(res(LienTaxOtherReleasedTotal = 1));
LienForeclosureReleasedTotal     := count(res(LienForeclosureReleasedTotal = 1));
LienPreforeclosureReleasedTotal  := count(res(LienPreforeclosureReleasedTotal = 1));
LienLandlordTenantReleasedTotal  := count(res(LienLandlordTenantReleasedTotal = 1));
LienJudgmentReleasedTotal        := count(res(LienJudgmentReleasedTotal = 1));
LienSmallClaimsReleasedTotal     := count(res(LienSmallClaimsReleasedTotal = 1));
LienOtherReleasedTotal           := count(res(LienOtherReleasedTotal = 1));
LienFederalTaxFiledCount         := count(res(LienFederalTaxFiledCount = 1));
LienTaxOtherFiledCount           := count(res(LienTaxOtherFiledCount = 1));
LienForeclosureFiledCount        := count(res(LienForeclosureFiledCount = 1));
LienPreforeclosureFiledCount     := count(res(LienPreforeclosureFiledCount = 1));
LienLandlordTenantFiledCount     := count(res(LienLandlordTenantFiledCount = 1));
LienJudgmentFiledCount           := count(res(LienJudgmentFiledCount = 1));
LienSmallClaimsFiledCount        := count(res(LienSmallClaimsFiledCount = 1));
LienOtherFiledCount              := count(res(LienOtherFiledCount = 1));
LienFederalTaxReleasedCount      := count(res(LienFederalTaxReleasedCount = 1));
LienTaxOtherReleasedCount        := count(res(LienTaxOtherReleasedCount = 1));
LienForeclosureReleasedCount     := count(res(LienForeclosureReleasedCount = 1));
LienPreforeclosureReleasedCount  := count(res(LienPreforeclosureReleasedCount = 1));
LienLandlordTenantReleasedCount  := count(res(LienLandlordTenantReleasedCount = 1));
LienJudgmentReleasedCount        := count(res(LienJudgmentReleasedCount = 1));
LienSmallClaimsReleasedCount     := count(res(LienSmallClaimsReleasedCount = 1));
LienOtherReleasedCount           := count(res(LienOtherReleasedCount = 1));
bankruptcy_count                 := count(res(bankruptcy_count = 1));
BankruptcyAge                    := count(res(BankruptcyAge = 1));
filing_type                      := count(res(filing_type = 1));
disposition                      := count(res(disposition = 1));
bankruptcy_count30               := count(res(bankruptcy_count30 = 1));
bankruptcy_count90               := count(res(bankruptcy_count90 = 1));
bankruptcy_count180              := count(res(bankruptcy_count180 = 1));
bankruptcy_count12               := count(res(bankruptcy_count12 = 1));
bankruptcy_count24               := count(res(bankruptcy_count24 = 1));
bankruptcy_count36               := count(res(bankruptcy_count36 = 1));
bankruptcy_count60               := count(res(bankruptcy_count60 = 1));
eviction_count                   := count(res(eviction_count = 1));
EvictionAge                      := count(res(EvictionAge = 1));
eviction_count30                 := count(res(eviction_count30 = 1));
eviction_count90                 := count(res(eviction_count90 = 1));
eviction_count180                := count(res(eviction_count180 = 1));
eviction_count12                 := count(res(eviction_count12 = 1));
eviction_count24                 := count(res(eviction_count24 = 1));
eviction_count36                 := count(res(eviction_count36 = 1));
eviction_count60                 := count(res(eviction_count60 = 1));
num_nonderogs                    := count(res(num_nonderogs = 1));
num_nonderogs30                  := count(res(num_nonderogs30 = 1));
num_nonderogs90                  := count(res(num_nonderogs90 = 1));
num_nonderogs180                 := count(res(num_nonderogs180 = 1));
num_nonderogs12                  := count(res(num_nonderogs12 = 1));
num_nonderogs24                  := count(res(num_nonderogs24 = 1));
num_nonderogs36                  := count(res(num_nonderogs36 = 1));
num_nonderogs60                  := count(res(num_nonderogs60 = 1));
num_proflic                      := count(res(num_proflic = 1));
ProfLicAge                       := count(res(ProfLicAge = 1));
proflic_type                     := count(res(proflic_type = 1));
ProfLicTypeCategory              := count(res(ProfLicTypeCategory = 1));
expire_date_last_proflic         := count(res(expire_date_last_proflic = 1));
num_proflic30                    := count(res(num_proflic30 = 1));
num_proflic90                    := count(res(num_proflic90 = 1));
num_proflic180                   := count(res(num_proflic180 = 1));
num_proflic12                    := count(res(num_proflic12 = 1));
num_proflic24                    := count(res(num_proflic24 = 1));
num_proflic36                    := count(res(num_proflic36 = 1));
num_proflic60                    := count(res(num_proflic60 = 1));
num_proflic_exp30                := count(res(num_proflic_exp30 = 1));
num_proflic_exp90                := count(res(num_proflic_exp90 = 1));
num_proflic_exp180               := count(res(num_proflic_exp180 = 1));
num_proflic_exp12                := count(res(num_proflic_exp12 = 1));
num_proflic_exp24                := count(res(num_proflic_exp24 = 1));
num_proflic_exp36                := count(res(num_proflic_exp36 = 1));
num_proflic_exp60                := count(res(num_proflic_exp60 = 1));
phoneStatus                      := count(res(phoneStatus = 1));
PhonePager                       := count(res(PhonePager = 1));
PhoneMobile                      := count(res(PhoneMobile = 1));
PhoneEDAAgeOldestRecord          := count(res(PhoneEDAAgeOldestRecord = 1));
PhoneEDAAgeNewestRecord          := count(res(PhoneEDAAgeNewestRecord = 1));
PhoneOtherAgeOldestRecord        := count(res(PhoneOtherAgeOldestRecord = 1));
PhoneOtherAgeNewestRecord        := count(res(PhoneOtherAgeNewestRecord = 1));
PhoneZipMismatch                 := count(res(PhoneZipMismatch = 1));
phoneAddrDist                    := count(res(phoneAddrDist = 1));
AddrHighRisk                     := count(res(AddrHighRisk = 1));
PhoneHighRisk                    := count(res(PhoneHighRisk = 1));
AddrPrison                       := count(res(AddrPrison = 1));
ZipPOBox                         := count(res(ZipPOBox = 1));
ZipCorpMil                       := count(res(ZipCorpMil = 1));
correctedFlag                    := count(res(correctedFlag = 1));
securityFreeze                   := count(res(securityFreeze = 1));
securityAlert                    := count(res(securityAlert = 1));
idTheftFlag                      := count(res(idTheftFlag = 1));
PrescreenOptOut                  := count(res(PrescreenOptOut = 1));
history_date                     := count(res(history_date = 1));
errorcode                        := count(res(errorcode = 1));

summary_format := record
	total;
	AgeOldestRecord;
	AgeNewestRecord;
	isRecentUpdate;
	NumSources;
	InvalidSSN;
	InvalidAddr;
	InvalidDL;
	InvalidPhone;
	isNoVer;
	SSNNotFound;
	VerifiedName;
	VerifiedSSN;
	VerifiedPhone;
	VerifiedPhoneFullName;
	VerifiedPhoneLastName;
	VerifiedAddress;
	VerifiedDOB;
	InferredMinimumAge;
	BestReportedAge;
	SubjectSSNCount;
	SubjectAddrCount;
	SubjectPhoneCount;
	SubjectSSNRecentCount;
	SubjectAddrRecentCount;
	SubjectPhoneRecentCount;
	SSNIdentitiesCount;
	SSNAddrCount;
	SSNIdentitiesRecentCount;
	SSNAddrRecentCount;
	InputAddrIdentitiesCount;
	InputAddrSSNCount;
	InputAddrPhoneCount;
	InputAddrIdentitiesRecentCount;
	InputAddrSSNRecentCount;
	InputAddrPhoneRecentCount;
	PhoneIdentitiesCount;
	PhoneIdentitiesRecentCount;
	SSNDeceased;
	DeceasedDate;
	SSNValid;
	RecentIssue;
	LowIssueDate;
	HighIssueDate;
	IssueState;
	NonUS;
	SSNIssuedPriorDOB;
	Issued3;
	IssuedAge5;
	IAAgeOldestRecord;
	IAAgeNewestRecord;
	IALenOfRes;
	IADwellType;
	IALandUseCode;
	IAOwnedBySubject;
	IAFamilyOwned;
	IAOccupantOwned;
	IAAgeLastSale;
	IALastSaleAmount;
	IANotPrimaryRes;
	IAPhoneListed;
	IAPhoneNumber;
	IAAssessedValue;
	InputAddrTaxYr;
	InputAddrTaxMarketValue;
	InputAddrAVMTax;
	InputAddrAVMSalesPrice;
	InputAddrAVMHedonic;
	InputAddrAVMValue;
	InputAddrAVMConfidence;
	InputAddrCountyIndex;
	InputAddrTractIndex;
	InputAddrBlockIndex;
	CAAgeOldestRecord;
	CAAgeNewestRecord;
	CALenOfRes;
	CADwellType;
	CALandUseCode;
	CAOwnedBySubject;
	CAFamilyOwned;
	CAOccupantOwned;
	CAAgeLastSale;
	CALastSaleAmount;
	CANotPrimaryRes;
	CAPhoneListed;
	CAPhoneNumber;
	CAAssessedValue;
	CurrAddrTaxYr;
	CurrAddrTaxMarketValue;
	CurrAddrAVMTax;
	CurrAddrAVMSalesPrice;
	CurrAddrAVMHedonic;
	CurrAddrAVMValue;
	CurrAddrAVMConfidence;
	CurrAddrCountyIndex;
	CurrAddrTractIndex;
	CurrAddrBlockIndex;
	PAAgeOldestRecord;
	PAAgeNewestRecord;
	PALenOfRes;
	PADwellType;
	PALandUseCode;
	PAOwnedBySubject;
	PAFamilyOwned;
	PAOccupantOwned;
	PAAgeLastSale;
	PALastSaleAmount;
	PAPhoneListed;
	PAPhoneNumber;
	PAAssessedValue;
	PrevAddrTaxYr;
	PrevAddrTaxMarketValue;
	PrevAddrAVMTax;
	PrevAddrAVMSalesPrice;
	PrevAddrAVMHedonic;
	PrevAddrAVMValue;
	PrevAddrAVMConfidence;
	PrevAddrCountyIndex;
	PrevAddrTractIndex;
	PrevAddrBlockIndex;
	InputCurrMatch;
	DistInputCurr;
	DiffState;
	AssessedDiff;
	EcoTrajectory;
	InputPrevMatch;
	DistCurrPrev;
	DiffState2;
	AssessedDiff2;
	EcoTrajectory2;
	EducationAttendedCollege;
	EducationProgram2Yr;
	EducationProgram4Yr;
	EducationProgramGraduate;
	EducationInstitutionPrivate;
	EducationInstitutionRating;
	mobility_indicator;
	statusAddr;
	statusAddr2;
	statusAddr3;
	addrChanges30;
	addrChanges90;
	addrChanges180;
	addrChanges12;
	addrChanges24;
	addrChanges36;
	addrChanges60;
	PredictedAnnualIncome;
	property_owned_total;
	property_owned_assessed_total;
	property_historically_owned;
	PropAgeOldestPurchase;
	PropAgeNewestPurchase;
	PropAgeNewestSale;
	PropNewestSalePrice;
	PropNewestSalePurchaseIndex;
	numPurchase30;
	numPurchase90;
	numPurchase180;
	numPurchase12;
	numPurchase24;
	numPurchase36;
	numPurchase60;
	numSold30;
	numSold90;
	numSold180;
	numSold12;
	numSold24;
	numSold36;
	numSold60;
	numWatercraft;
	numWatercraft30;
	numWatercraft90;
	numWatercraft180;
	numWatercraft12;
	numWatercraft24;
	numWatercraft36;
	numWatercraft60;
	numAircraft;
	numAircraft30;
	numAircraft90;
	numAircraft180;
	numAircraft12;
	numAircraft24;
	numAircraft36;
	numAircraft60;
	wealth_indicator;
	SubPrimeSolicitedCount;
	SubPrimeSolicitedCount01;
	SubprimeSolicitedCount03;
	SubprimeSolicitedCount06;
	SubPrimeSolicitedCount12;
	SubPrimeSolicitedCount24;
	SubPrimeSolicitedCount36;
	SubPrimeSolicitedCount60;
	total_number_derogs;
	DerogAge;
	felonies;
	FelonyAge;
	felonies30;
	felonies90;
	felonies180;
	felonies12;
	felonies24;
	felonies36;
	felonies60;
	num_liens;
	num_unreleased_liens;
	LienFiledAge;
	num_unreleased_liens30;
	num_unreleased_liens90;
	num_unreleased_liens180;
	num_unreleased_liens12;
	num_unreleased_liens24;
	num_unreleased_liens36;
	num_unreleased_liens60;
	num_released_liens;
	LienReleasedAge;
	num_released_liens30;
	num_released_liens90;
	num_released_liens180;
	num_released_liens12;
	num_released_liens24;
	num_released_liens36;
	num_released_liens60;
	LienFederalTaxFiledTotal;
	LienTaxOtherFiledTotal;
	LienForeclosureFiledTotal;
	LienPreforeclosureFiledTotal;
	LienLandlordTenantFiledTotal;
	LienJudgmentFiledTotal;
	LienSmallClaimsFiledTotal;
	LienOtherFiledTotal;
	LienFederalTaxReleasedTotal;
	LienTaxOtherReleasedTotal;
	LienForeclosureReleasedTotal;
	LienPreforeclosureReleasedTotal;
	LienLandlordTenantReleasedTotal;
	LienJudgmentReleasedTotal;
	LienSmallClaimsReleasedTotal;
	LienOtherReleasedTotal;
	LienFederalTaxFiledCount;
	LienTaxOtherFiledCount;
	LienForeclosureFiledCount;
	LienPreforeclosureFiledCount;
	LienLandlordTenantFiledCount;
	LienJudgmentFiledCount;
	LienSmallClaimsFiledCount;
	LienOtherFiledCount;
	LienFederalTaxReleasedCount;
	LienTaxOtherReleasedCount;
	LienForeclosureReleasedCount;
	LienPreforeclosureReleasedCount;
	LienLandlordTenantReleasedCount;
	LienJudgmentReleasedCount;
	LienSmallClaimsReleasedCount;
	LienOtherReleasedCount;
	bankruptcy_count;
	BankruptcyAge;
	filing_type;
	disposition;
	bankruptcy_count30;
	bankruptcy_count90;
	bankruptcy_count180;
	bankruptcy_count12;
	bankruptcy_count24;
	bankruptcy_count36;
	bankruptcy_count60;
	eviction_count;
	EvictionAge;
	eviction_count30;
	eviction_count90;
	eviction_count180;
	eviction_count12;
	eviction_count24;
	eviction_count36;
	eviction_count60;
	num_nonderogs;
	num_nonderogs30;
	num_nonderogs90;
	num_nonderogs180;
	num_nonderogs12;
	num_nonderogs24;
	num_nonderogs36;
	num_nonderogs60;
	num_proflic;
	ProfLicAge;
	proflic_type;
	ProfLicTypeCategory;
	expire_date_last_proflic;
	num_proflic30;
	num_proflic90;
	num_proflic180;
	num_proflic12;
	num_proflic24;
	num_proflic36;
	num_proflic60;
	num_proflic_exp30;
	num_proflic_exp90;
	num_proflic_exp180;
	num_proflic_exp12;
	num_proflic_exp24;
	num_proflic_exp36;
	num_proflic_exp60;
	phoneStatus;
	PhonePager;
	PhoneMobile;
	PhoneEDAAgeOldestRecord;
	PhoneEDAAgeNewestRecord;
	PhoneOtherAgeOldestRecord;
	PhoneOtherAgeNewestRecord;
	PhoneZipMismatch;
	phoneAddrDist;
	AddrHighRisk;
	PhoneHighRisk;
	AddrPrison;
	ZipPOBox;
	ZipCorpMil;
	correctedFlag;
	securityFreeze;
	securityAlert;
	idTheftFlag;
	PrescreenOptOut;
	history_date;
	errorcode;
end;

summary_res := table(res, summary_format, total);	
output(summary_res);

endmacro;