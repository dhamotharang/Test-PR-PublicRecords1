export macro_compare_rva_4_0_pre(olddate, newdate, old_adate, new_adate) := macro
#workunit('name','RVA 4.0 Prescreen Comparison for Tracking');
#option ('hthorMemoryLimit', 1000);

IMPORT Risk_Indicators, RiskProcessing;

//===================  input-output files  ======================
infile_original :=  '~nmontpetit::out::rva_40_pre_tracking_'+(string)olddate+'_'+(string)old_adate;
infile_compare :=   '~nmontpetit::out::rva_40_pre_tracking_'+(string)newdate+'_'+(string)new_adate;

layout_v4_attributes_flattened := record
			string3	AgeOldestRecord	;		
			string3	AgeNewestRecord	;		
			string1	RecentUpdate	;		
			string3	SrcsConfirmIDAddrCount	;		
			string2	InvalidDL	;		
			string1	VerificationFailure	;		
			string2	SSNNotFound	;		
			string1	VerifiedName	;		
			string2	VerifiedSSN	;		
			string2	VerifiedPhone	;		
			string2	VerifiedAddress	;		
			string2	VerifiedDOB	;		
			string3	InferredMinimumAge	;		
			string3	BestReportedAge	;		
			string3	SubjectSSNCount	;		
			string3	SubjectAddrCount	;		
			string3	SubjectPhoneCount	;		
			string3	SubjectSSNRecentCount	;		
			string3	SubjectAddrRecentCount	;		
			string3	SubjectPhoneRecentCount	;		
			string3	SSNIdentitiesCount	;		
			string3	SSNAddrCount	;		
			string3	SSNIdentitiesRecentCount	;		
			string3	SSNAddrRecentCount	;		
			string3	InputAddrPhoneCount	;		
			string3	InputAddrPhoneRecentCount	;		
			string3	PhoneIdentitiesCount	;		
			string3	PhoneIdentitiesRecentCount	;		
			string3	SSNAgeDeceased	;	// was named SSNDateDeceased	in version3
			string2	SSNRecent	;		
			string3	SSNLowIssueAge	;	// was named SSNLowIssueDate	in version3
			string3	SSNHighIssueAge	;	// was named SSNHighIssueDate	in version3
			string2	SSNIssueState	;		
			string2	SSNNonUS	;		
			string2	SSN3Years	;		
			string2	SSNAfter5 	;		
			string2	SSNProblems	;	// new to 4.0	
			string3	InputAddrAgeOldestRecord	;		
			string3	InputAddrAgeNewestRecord	;		
			string2	InputAddrHistoricalMatch	;	// new to 4.0	
			string3	InputAddrLenOfRes 	;		
			string2	InputAddrDwellType 	;		
			string2	InputAddrDelivery	;	// new to 4.0	
			string2	InputAddrApplicantOwned	;		
			string2	InputAddrFamilyOwned	;		
			string2	InputAddrOccupantOwned 	;		
			string3	InputAddrAgeLastSale	;		
			string10	InputAddrLastSalesPrice	;		
			string2	InputAddrMortgageType	;	// new to 4.0				
			string2	InputAddrNotPrimaryRes 	;		
			string2	InputAddrActivePhoneList 	;		
			string10	InputAddrTaxValue 	;		
			string4	InputAddrTaxYr	;		
			string10	InputAddrTaxMarketValue	;		
			string10	InputAddrAVMValue	;		
			string10	InputAddrAVMValue12	;	// new to 4.0	
			string10	InputAddrAVMValue60	;	// new to 4.0	
			string5	InputAddrCountyIndex	;		
			string5	InputAddrTractIndex	;		
			string5	InputAddrBlockIndex	;		
			string3	CurrAddrAgeOldestRecord	;		
			string3	CurrAddrAgeNewestRecord	;		
			string3	CurrAddrLenOfRes 	;		
			string2	CurrAddrDwellType 	;		
			string2	CurrAddrApplicantOwned 	;		
			string2	CurrAddrFamilyOwned 	;		
			string2	CurrAddrOccupantOwned 	;		
			string3	CurrAddrAgeLastSale	;		
			string10	CurrAddrLastSalesPrice	;		
			string2	CurrAddrMortgageType	;	// new to 4.0	
			string2	CurrAddrActivePhoneList 	;		
			string10	CurrAddrTaxValue 	;		
			string4	CurrAddrTaxYr	;		
			string10	CurrAddrTaxMarketValue	;		
			string10	CurrAddrAVMValue	;		
			string10	CurrAddrAVMValue12	;	// new to 4.0	
			string10	CurrAddrAVMValue60	;	// new to 4.0	
			string5	CurrAddrCountyIndex	;		
			string5	CurrAddrTractIndex	;		
			string5	CurrAddrBlockIndex	;		
			string3	PrevAddrAgeOldestRecord	;		
			string3	PrevAddrAgeNewestRecord	;		
			string3	PrevAddrLenOfRes 	;		
			string2	PrevAddrDwellType 	;		
			string2	PrevAddrApplicantOwned 	;		
			string2	PrevAddrFamilyOwned 	;		
			string2	PrevAddrOccupantOwned	;		
			string3	PrevAddrAgeLastSale	;		
			string10	PrevAddrLastSalesPrice	;		
			string10	PrevAddrTaxValue	;		
			string4	PrevAddrTaxYr	;		
			string10	PrevAddrTaxMarketValue	;		
			string10	PrevAddrAVMValue	;		
			string5	PrevAddrCountyIndex	;		
			string5	PrevAddrTractIndex	;		
			string5	PrevAddrBlockIndex	;		
			string4	AddrMostRecentDistance	;	// new to 4.0	
			string2	AddrMostRecentStateDiff	;	// new to 4.0	
			string11	AddrMostRecentTaxDiff	;	// new to 4.0	
			string3	AddrMostRecentMoveAge	;	// new to 4.0				
			string2	AddrRecentEconTrajectory	;	// new to 4.0	
			string2	AddrRecentEconTrajectoryIndex	;	// new to 4.0	
			string1	EducationAttendedCollege	;		
			string2	EducationProgram2Yr	;		
			string2	EducationProgram4Yr	;		
			string2	EducationProgramGraduate	;		
			string2	EducationInstitutionPrivate	;		
			string2	EducationFieldofStudyType	;	// new to 4.0	
			string2	EducationInstitutionRating	;		
			string1	AddrStability 	;	// is this the new addrstabilityv2 model or old model?	
			string2	StatusMostRecent 	;		
			string2	StatusPrevious 	;		
			string2	StatusNextPrevious	;		
			string3	AddrChangeCount01	;		
			string3	AddrChangeCount03	;		
			string3	AddrChangeCount06	;		
			string3	AddrChangeCount12	;		
			string3	AddrChangeCount24 	;		
			string3	AddrChangeCount60 	;		
			string10	EstimatedAnnualIncome	;	// was named PredictedAnnualIncome	in version3
			string1	PropertyOwner	;	// new to 4.0	
			string3	PropOwnedCount	;		
			string10	PropOwnedTaxTotal	;		
			string3	PropOwnedHistoricalCount	;		
			string3	PropAgeOldestPurchase	;		
			string3	PropAgeNewestPurchase	;		
			string3	PropAgeNewestSale	;		
			string10	PropNewestSalePrice	;		
			string5	PropNewestSalePurchaseIndex	;		
			string3	PropPurchasedCount01	;		
			string3	PropPurchasedCount03	;		
			string3	PropPurchasedCount06	;		
			string3	PropPurchasedCount12	;		
			string3	PropPurchasedCount24	;		
			string3	PropPurchasedCount60	;		
			string3	PropSoldCount01	;		
			string3	PropSoldCount03	;		
			string3	PropSoldCount06	;		
			string3	PropSoldCount12	;		
			string3	PropSoldCount24 	;		
			string3	PropSoldCount60 	;		
			string1	AssetOwner	;	// new to 4.0	
			string1	WatercraftOwner	;	// new to 4.0	
			string3	WatercraftCount	;		
			string3	WatercraftCount01	;		
			string3	WatercraftCount03	;		
			string3	WatercraftCount06	;		
			string3	WatercraftCount12 	;		
			string3	WatercraftCount24	;		
			string3	WatercraftCount60 	;		
			string1	AircraftOwner	;	// new to 4.0	
			string3	AircraftCount	;		
			string3	AircraftCount01	;		
			string3	AircraftCount03	;		
			string3	AircraftCount06	;		
			string3	AircraftCount12 	;		
			string3	AircraftCount24	;		
			string3	AircraftCount60 	;		
			string2	WealthIndex 	;		
			string2	BusinessActiveAssociation	;	// new to 4.0	
			string2	BusinessInactiveAssociation	;	// new to 4.0	
			string3	BusinessAssociationAge	;	// new to 4.0	
			string100	BusinessTitle	;	// new to 4.0	
			string1	DerogSeverityIndex	;	// new to 4.0	
			string3	DerogCount	;		
			string3	DerogRecentCount	;	// new to 4.0	
			string3	DerogAge	;		
			string3	FelonyCount	;		
			string3	FelonyAge	;		
			string3	FelonyCount01	;		
			string3	FelonyCount03	;		
			string3	FelonyCount06	;		
			string3	FelonyCount12	;		
			string3	FelonyCount24	;		
			string3	FelonyCount60	;		
			string3	LienCount	;		
			string3	LienFiledCount	;		
			string3	LienFiledAge	;		
			string3	LienFiledCount01	;		
			string3	LienFiledCount03	;		
			string3	LienFiledCount06	;		
			string3	LienFiledCount12	;		
			string3	LienFiledCount24	;		
			string3	LienFiledCount60	;		
			string3	LienReleasedCount	;		
			string3	LienReleasedAge	;		
			string3	LienReleasedCount01	;		
			string3	LienReleasedCount03	;		
			string3	LienReleasedCount06	;		
			string3	LienReleasedCount12	;		
			string3	LienReleasedCount24	;		
			string3	LienReleasedCount60	;		
			string10	LienFiledTotal	;	// new to 4.0	
			string10	LienFederalTaxFiledTotal	;		
			string10	LienTaxOtherFiledTotal	;		
			string10	LienForeclosureFiledTotal	;		
			string10	LienLandlordTenantFiledTotal	;		
			string10	LienJudgmentFiledTotal	;		
			string10	LienSmallClaimsFiledTotal	;		
			string10	LienOtherFiledTotal	;		
			string10	LienReleasedTotal	;	// new to 4.0	
			string10	LienFederalTaxReleasedTotal	;		
			string10	LienTaxOtherReleasedTotal	;		
			string10	LienForeclosureReleasedTotal	;		
			string10	LienLandlordTenantReleasedTotal	;		
			string10	LienJudgmentReleasedTotal	;		
			string10	LienSmallClaimsReleasedTotal	;		
			string10	LienOtherReleasedTotal	;		
			string3	LienFederalTaxFiledCount	;		
			string3	LienTaxOtherFiledCount	;		
			string3	LienForeclosureFiledCount	;		
			string3	LienLandlordTenantFiledCount	;		
			string3	LienJudgmentFiledCount	;		
			string3	LienSmallClaimsFiledCount	;		
			string3	LienOtherFiledCount	;		
			string3	LienFederalTaxReleasedCount	;		
			string3	LienTaxOtherReleasedCount	;		
			string3	LienForeclosureReleasedCount	;		
			string3	LienLandlordTenantReleasedCount	;		
			string3	LienJudgmentReleasedCount	;		
			string3	LienSmallClaimsReleasedCount	;		
			string3	LienOtherReleasedCount	;		
			string3	BankruptcyCount	;		
			string3	BankruptcyAge	;		
			string3	BankruptcyType	;		
			string35	BankruptcyStatus	;		
			string3	BankruptcyCount01	;		
			string3	BankruptcyCount03	;		
			string3	BankruptcyCount06	;		
			string3	BankruptcyCount12	;		
			string3	BankruptcyCount24	;		
			string3	BankruptcyCount60	;		
			string3	EvictionCount	;		
			string3	EvictionAge	;		
			string3	EvictionCount01	;		
			string3	EvictionCount03	;		
			string3	EvictionCount06	;		
			string3	EvictionCount12 	;		
			string3	EvictionCount24 	;		
			string3	EvictionCount60 	;		
			string2	RecentActivityIndex	;	// new to 4.0	
			string3	NonDerogCount	;		
			string3	NonDerogCount01	;		
			string3	NonDerogCount03	;		
			string3	NonDerogCount06	;		
			string3	NonDerogCount12	;		
			string3	NonDerogCount24	;		
			string3	NonDerogCount60	;		
			string1	VoterRegistrationRecord	;	// new to 4.0	
			string3	ProfLicCount	;		
			string3	ProfLicAge	;		
			string60	ProfLicType	;		
			string2	ProfLicTypeCategory	;		
			string2	ProfLicExpired	;	// was named ProfLicExpireDate	in version3, changed to a boolean
			string3	ProfLicCount01	;		
			string3	ProfLicCount03	;		
			string3	ProfLicCount06	;		
			string3	ProfLicCount12	;		
			string3	ProfLicCount24	;		
			string3	ProfLicCount60	;		
			string1	InquiryCollectionsRecent	;	// new to 4.0	
			string1	InquiryPersonalFinanceRecent	;	// new to 4.0	
			string1	InquiryOtherRecent	;	// new to 4.0	
			string1	HighRiskCreditActivity	;	// new to 4.0	
			string3	SubPrimeOfferRequestCount	;	// was named SubPrimeSolicitedCount	in version3
			string3	SubPrimeOfferRequestCount01	;	// was named SubPrimeSolicitedCount01	in version3
			string3	SubPrimeOfferRequestCount03	;	// was named SubprimeSolicitedCount03	in version3
			string3	SubPrimeOfferRequestCount06	;	// was named SubprimeSolicitedCount06	in version3
			string3	SubPrimeOfferRequestCount12	;	// was named SubPrimeSolicitedCount12	in version3
			string3	SubPrimeOfferRequestCount24	;	// was named SubPrimeSolicitedCount24	in version3
			string3	SubPrimeOfferRequestCount60	;	// was named SubPrimeSolicitedCount60	in version3
			string2	InputPhoneMobile 	;		
			string3	PhoneEDAAgeOldestRecord	;		
			string3	PhoneEDAAgeNewestRecord	;		
			string3	PhoneOtherAgeOldestRecord	;		
			string3	PhoneOtherAgeNewestRecord	;		
			string2	InputPhoneHighRisk	;		
			string2	InputPhoneProblems	;	// new to 4.0	
			string2	EmailAddress	;	// new to 4.0	
			string2	InputAddrHighRisk	;			
			string2	CurrAddrCorrectional	;	// new to 4.0	
			string2	PrevAddrCorrectional	;	// new to 4.0	
			string2	HistoricalAddrCorrectional	;	// new to 4.0	
			string2	InputAddrProblems	;	// new to 4.0	
			string1	SecurityFreeze	;		
			string1	SecurityAlert	;		
			string1	IDTheftFlag	;		
			string1	ConsumerStatement	;	// new to 4.0	
			string2	PrescreenOptOut	;			
end;

rv_attributes_v4 := RECORD
	unsigned seq;
	string30 AccountNumber;
	layout_v4_attributes_flattened;		
    RiskProcessing.layout_internal_extras;
	string200 errorcode;
END;
	

ds_original := 	dataset(infile_original, 	rv_attributes_v4, csv(heading(1), quote('"'), maxlength(32000)));
ds_compare := 	dataset(infile_compare, 	rv_attributes_v4, csv(heading(1), quote('"'), maxlength(32000)));

//output(ds_original);
//output(ds_compare);

layout_res := RECORD
	integer seq;
	integer AccountNumber;
	integer AgeOldestRecord;
	integer AgeNewestRecord;
	integer RecentUpdate;
	integer SrcsConfirmIDAddrCount;
	integer InvalidDL;
	integer VerificationFailure;
	integer SSNNotFound;
	integer VerifiedName;
	integer VerifiedSSN;
	integer VerifiedPhone;
	integer VerifiedAddress;
	integer VerifiedDOB;
	integer InferredMinimumAge;
	integer BestReportedAge;
	integer SubjectSSNCount;
	integer SubjectAddrCount;
	integer SubjectPhoneCount;
	integer SubjectSSNRecentCount;
	integer SubjectAddrRecentCount;
	integer SubjectPhoneRecentCount;
	integer SSNIdentitiesCount;
	integer SSNAddrCount;
	integer SSNIdentitiesRecentCount;
	integer SSNAddrRecentCount;
	integer InputAddrPhoneCount;
	integer InputAddrPhoneRecentCount;
	integer PhoneIdentitiesCount;
	integer PhoneIdentitiesRecentCount;
	integer SSNAgeDeceased;
	integer SSNRecent;
	integer SSNLowIssueAge;
	integer SSNHighIssueAge;
	integer SSNIssueState;
	integer SSNNonUS;
	integer SSN3Years;
	integer SSNAfter5;
	integer SSNProblems;
	integer InputAddrAgeOldestRecord;
	integer InputAddrAgeNewestRecord;
	integer InputAddrHistoricalMatch;
	integer InputAddrLenOfRes;
	integer InputAddrDwellType;
	integer InputAddrDelivery;
	integer InputAddrApplicantOwned;
	integer InputAddrFamilyOwned;
	integer InputAddrOccupantOwned;
	integer InputAddrAgeLastSale;
	integer InputAddrLastSalesPrice;
	integer InputAddrMortgageType;
	integer InputAddrNotPrimaryRes;
	integer InputAddrActivePhoneList;
	integer InputAddrTaxValue;
	integer InputAddrTaxYr;
	integer InputAddrTaxMarketValue;
	integer InputAddrAVMValue;
	integer InputAddrAVMValue12;
	integer InputAddrAVMValue60;
	integer InputAddrCountyIndex;
	integer InputAddrTractIndex;
	integer InputAddrBlockIndex;
	integer CurrAddrAgeOldestRecord;
	integer CurrAddrAgeNewestRecord;
	integer CurrAddrLenOfRes;
	integer CurrAddrDwellType;
	integer CurrAddrApplicantOwned;
	integer CurrAddrFamilyOwned;
	integer CurrAddrOccupantOwned;
	integer CurrAddrAgeLastSale;
	integer CurrAddrLastSalesPrice;
	integer CurrAddrMortgageType;
	integer CurrAddrActivePhoneList;
	integer CurrAddrTaxValue;
	integer CurrAddrTaxYr;
	integer CurrAddrTaxMarketValue;
	integer CurrAddrAVMValue;
	integer CurrAddrAVMValue12;
	integer CurrAddrAVMValue60;
	integer CurrAddrCountyIndex;
	integer CurrAddrTractIndex;
	integer CurrAddrBlockIndex;
	integer PrevAddrAgeOldestRecord;
	integer PrevAddrAgeNewestRecord;
	integer PrevAddrLenOfRes;
	integer PrevAddrDwellType;
	integer PrevAddrApplicantOwned;
	integer PrevAddrFamilyOwned;
	integer PrevAddrOccupantOwned;
	integer PrevAddrAgeLastSale;
	integer PrevAddrLastSalesPrice;
	integer PrevAddrTaxValue;
	integer PrevAddrTaxYr;
	integer PrevAddrTaxMarketValue;
	integer PrevAddrAVMValue;
	integer PrevAddrCountyIndex;
	integer PrevAddrTractIndex;
	integer PrevAddrBlockIndex;
	integer AddrMostRecentDistance;
	integer AddrMostRecentStateDiff;
	integer AddrMostRecentTaxDiff;
	integer AddrMostRecentMoveAge;
	integer AddrRecentEconTrajectory;
	integer AddrRecentEconTrajectoryIndex;
	integer EducationAttendedCollege;
	integer EducationProgram2Yr;
	integer EducationProgram4Yr;
	integer EducationProgramGraduate;
	integer EducationInstitutionPrivate;
	integer EducationFieldofStudyType;
	integer EducationInstitutionRating;
	integer AddrStability;
	integer StatusMostRecent;
	integer StatusPrevious;
	integer StatusNextPrevious;
	integer AddrChangeCount01;
	integer AddrChangeCount03;
	integer AddrChangeCount06;
	integer AddrChangeCount12;
	integer AddrChangeCount24;
	integer AddrChangeCount60;
	integer EstimatedAnnualIncome;
	integer PropertyOwner;
	integer PropOwnedCount;
	integer PropOwnedTaxTotal;
	integer PropOwnedHistoricalCount;
	integer PropAgeOldestPurchase;
	integer PropAgeNewestPurchase;
	integer PropAgeNewestSale;
	integer PropNewestSalePrice;
	integer PropNewestSalePurchaseIndex;
	integer PropPurchasedCount01;
	integer PropPurchasedCount03;
	integer PropPurchasedCount06;
	integer PropPurchasedCount12;
	integer PropPurchasedCount24;
	integer PropPurchasedCount60;
	integer PropSoldCount01;
	integer PropSoldCount03;
	integer PropSoldCount06;
	integer PropSoldCount12;
	integer PropSoldCount24;
	integer PropSoldCount60;
	integer AssetOwner;
	integer WatercraftOwner;
	integer WatercraftCount;
	integer WatercraftCount01;
	integer WatercraftCount03;
	integer WatercraftCount06;
	integer WatercraftCount12;
	integer WatercraftCount24;
	integer WatercraftCount60;
	integer AircraftOwner;
	integer AircraftCount;
	integer AircraftCount01;
	integer AircraftCount03;
	integer AircraftCount06;
	integer AircraftCount12;
	integer AircraftCount24;
	integer AircraftCount60;
	integer WealthIndex;
	integer BusinessActiveAssociation;
	integer BusinessInactiveAssociation;
	integer BusinessAssociationAge;
	integer BusinessTitle;
	integer DerogSeverityIndex;
	integer DerogCount;
	integer DerogRecentCount;
	integer DerogAge;
	integer FelonyCount;
	integer FelonyAge;
	integer FelonyCount01;
	integer FelonyCount03;
	integer FelonyCount06;
	integer FelonyCount12;
	integer FelonyCount24;
	integer FelonyCount60;
	integer LienCount;
	integer LienFiledCount;
	integer LienFiledAge;
	integer LienFiledCount01;
	integer LienFiledCount03;
	integer LienFiledCount06;
	integer LienFiledCount12;
	integer LienFiledCount24;
	integer LienFiledCount60;
	integer LienReleasedCount;
	integer LienReleasedAge;
	integer LienReleasedCount01;
	integer LienReleasedCount03;
	integer LienReleasedCount06;
	integer LienReleasedCount12;
	integer LienReleasedCount24;
	integer LienReleasedCount60;
	integer LienFiledTotal;
	integer LienFederalTaxFiledTotal;
	integer LienTaxOtherFiledTotal;
	integer LienForeclosureFiledTotal;
	integer LienLandlordTenantFiledTotal;
	integer LienJudgmentFiledTotal;
	integer LienSmallClaimsFiledTotal;
	integer LienOtherFiledTotal;
	integer LienReleasedTotal;
	integer LienFederalTaxReleasedTotal;
	integer LienTaxOtherReleasedTotal;
	integer LienForeclosureReleasedTotal;
	integer LienLandlordTenantReleasedTotal;
	integer LienJudgmentReleasedTotal;
	integer LienSmallClaimsReleasedTotal;
	integer LienOtherReleasedTotal;
	integer LienFederalTaxFiledCount;
	integer LienTaxOtherFiledCount;
	integer LienForeclosureFiledCount;
	integer LienLandlordTenantFiledCount;
	integer LienJudgmentFiledCount;
	integer LienSmallClaimsFiledCount;
	integer LienOtherFiledCount;
	integer LienFederalTaxReleasedCount;
	integer LienTaxOtherReleasedCount;
	integer LienForeclosureReleasedCount;
	integer LienLandlordTenantReleasedCount;
	integer LienJudgmentReleasedCount;
	integer LienSmallClaimsReleasedCount;
	integer LienOtherReleasedCount;
	integer BankruptcyCount;
	integer BankruptcyAge;
	integer BankruptcyType;
	integer BankruptcyStatus;
	integer BankruptcyCount01;
	integer BankruptcyCount03;
	integer BankruptcyCount06;
	integer BankruptcyCount12;
	integer BankruptcyCount24;
	integer BankruptcyCount60;
	integer EvictionCount;
	integer EvictionAge;
	integer EvictionCount01;
	integer EvictionCount03;
	integer EvictionCount06;
	integer EvictionCount12;
	integer EvictionCount24;
	integer EvictionCount60;
	integer RecentActivityIndex;
	integer NonDerogCount;
	integer NonDerogCount01;
	integer NonDerogCount03;
	integer NonDerogCount06;
	integer NonDerogCount12;
	integer NonDerogCount24;
	integer NonDerogCount60;
	integer VoterRegistrationRecord;
	integer ProfLicCount;
	integer ProfLicAge;
	integer ProfLicType;
	integer ProfLicTypeCategory;
	integer ProfLicExpired;
	integer ProfLicCount01;
	integer ProfLicCount03;
	integer ProfLicCount06;
	integer ProfLicCount12;
	integer ProfLicCount24;
	integer ProfLicCount60;
	integer InquiryCollectionsRecent;
	integer InquiryPersonalFinanceRecent;
	integer InquiryOtherRecent;
	integer HighRiskCreditActivity;
	integer SubPrimeOfferRequestCount;
	integer SubPrimeOfferRequestCount01;
	integer SubPrimeOfferRequestCount03;
	integer SubPrimeOfferRequestCount06;
	integer SubPrimeOfferRequestCount12;
	integer SubPrimeOfferRequestCount24;
	integer SubPrimeOfferRequestCount60;
	integer InputPhoneMobile;
	integer PhoneEDAAgeOldestRecord;
	integer PhoneEDAAgeNewestRecord;
	integer PhoneOtherAgeOldestRecord;
	integer PhoneOtherAgeNewestRecord;
	integer InputPhoneHighRisk;
	integer InputPhoneProblems;
	integer EmailAddress;
	integer InputAddrHighRisk;
	integer CurrAddrCorrectional;
	integer PrevAddrCorrectional;
	integer HistoricalAddrCorrectional;
	integer InputAddrProblems;
	integer SecurityFreeze;
	integer SecurityAlert;
	integer IDTheftFlag;
	integer ConsumerStatement;
	integer PrescreenOptOut;
	integer historydate;
	integer DID;
	integer FNamePop;
	integer LNamePop;
	integer AddrPop;
	integer SSNLength;
	integer DOBPop;
	integer EmailPop;
	integer IPAddrPop;
	integer HPhnPop;
	integer errorcode;
END;

layout_res mk_matches(rv_attributes_v4 le, rv_attributes_v4 ri) := TRANSFORM
	self.seq                             :=(integer)(le.seq                              != ri.seq);
	self.AccountNumber                   :=(integer)(le.AccountNumber                    != ri.AccountNumber);
	self.AgeOldestRecord                 :=(integer)(le.AgeOldestRecord                  != ri.AgeOldestRecord);
	self.AgeNewestRecord                 :=(integer)(le.AgeNewestRecord                  != ri.AgeNewestRecord);
	self.RecentUpdate                    :=(integer)(le.RecentUpdate                     != ri.RecentUpdate);
	self.SrcsConfirmIDAddrCount          :=(integer)(le.SrcsConfirmIDAddrCount           != ri.SrcsConfirmIDAddrCount);
	self.InvalidDL                       :=(integer)(le.InvalidDL                        != ri.InvalidDL);
	self.VerificationFailure             :=(integer)(le.VerificationFailure              != ri.VerificationFailure);
	self.SSNNotFound                     :=(integer)(le.SSNNotFound                      != ri.SSNNotFound);
	self.VerifiedName                    :=(integer)(le.VerifiedName                     != ri.VerifiedName);
	self.VerifiedSSN                     :=(integer)(le.VerifiedSSN                      != ri.VerifiedSSN);
	self.VerifiedPhone                   :=(integer)(le.VerifiedPhone                    != ri.VerifiedPhone);
	self.VerifiedAddress                 :=(integer)(le.VerifiedAddress                  != ri.VerifiedAddress);
	self.VerifiedDOB                     :=(integer)(le.VerifiedDOB                      != ri.VerifiedDOB);
	self.InferredMinimumAge              :=(integer)(le.InferredMinimumAge               != ri.InferredMinimumAge);
	self.BestReportedAge                 :=(integer)(le.BestReportedAge                  != ri.BestReportedAge);
	self.SubjectSSNCount                 :=(integer)(le.SubjectSSNCount                  != ri.SubjectSSNCount);
	self.SubjectAddrCount                :=(integer)(le.SubjectAddrCount                 != ri.SubjectAddrCount);
	self.SubjectPhoneCount               :=(integer)(le.SubjectPhoneCount                != ri.SubjectPhoneCount);
	self.SubjectSSNRecentCount           :=(integer)(le.SubjectSSNRecentCount            != ri.SubjectSSNRecentCount);
	self.SubjectAddrRecentCount          :=(integer)(le.SubjectAddrRecentCount           != ri.SubjectAddrRecentCount);
	self.SubjectPhoneRecentCount         :=(integer)(le.SubjectPhoneRecentCount          != ri.SubjectPhoneRecentCount);
	self.SSNIdentitiesCount              :=(integer)(le.SSNIdentitiesCount               != ri.SSNIdentitiesCount);
	self.SSNAddrCount                    :=(integer)(le.SSNAddrCount                     != ri.SSNAddrCount);
	self.SSNIdentitiesRecentCount        :=(integer)(le.SSNIdentitiesRecentCount         != ri.SSNIdentitiesRecentCount);
	self.SSNAddrRecentCount              :=(integer)(le.SSNAddrRecentCount               != ri.SSNAddrRecentCount);
	self.InputAddrPhoneCount             :=(integer)(le.InputAddrPhoneCount              != ri.InputAddrPhoneCount);
	self.InputAddrPhoneRecentCount       :=(integer)(le.InputAddrPhoneRecentCount        != ri.InputAddrPhoneRecentCount);
	self.PhoneIdentitiesCount            :=(integer)(le.PhoneIdentitiesCount             != ri.PhoneIdentitiesCount);
	self.PhoneIdentitiesRecentCount      :=(integer)(le.PhoneIdentitiesRecentCount       != ri.PhoneIdentitiesRecentCount);
	self.SSNAgeDeceased                  :=(integer)(le.SSNAgeDeceased                   != ri.SSNAgeDeceased);
	self.SSNRecent                       :=(integer)(le.SSNRecent                        != ri.SSNRecent);
	self.SSNLowIssueAge                  :=(integer)(le.SSNLowIssueAge                   != ri.SSNLowIssueAge);
	self.SSNHighIssueAge                 :=(integer)(le.SSNHighIssueAge                  != ri.SSNHighIssueAge);
	self.SSNIssueState                   :=(integer)(le.SSNIssueState                    != ri.SSNIssueState);
	self.SSNNonUS                        :=(integer)(le.SSNNonUS                         != ri.SSNNonUS);
	self.SSN3Years                       :=(integer)(le.SSN3Years                        != ri.SSN3Years);
	self.SSNAfter5                       :=(integer)(le.SSNAfter5                        != ri.SSNAfter5);
	self.SSNProblems                     :=(integer)(le.SSNProblems                      != ri.SSNProblems);
	self.InputAddrAgeOldestRecord        :=(integer)(le.InputAddrAgeOldestRecord         != ri.InputAddrAgeOldestRecord);
	self.InputAddrAgeNewestRecord        :=(integer)(le.InputAddrAgeNewestRecord         != ri.InputAddrAgeNewestRecord);
	self.InputAddrHistoricalMatch        :=(integer)(le.InputAddrHistoricalMatch         != ri.InputAddrHistoricalMatch);
	self.InputAddrLenOfRes               :=(integer)(le.InputAddrLenOfRes                != ri.InputAddrLenOfRes);
	self.InputAddrDwellType              :=(integer)(le.InputAddrDwellType               != ri.InputAddrDwellType);
	self.InputAddrDelivery               :=(integer)(le.InputAddrDelivery                != ri.InputAddrDelivery);
	self.InputAddrApplicantOwned         :=(integer)(le.InputAddrApplicantOwned          != ri.InputAddrApplicantOwned);
	self.InputAddrFamilyOwned            :=(integer)(le.InputAddrFamilyOwned             != ri.InputAddrFamilyOwned);
	self.InputAddrOccupantOwned          :=(integer)(le.InputAddrOccupantOwned           != ri.InputAddrOccupantOwned);
	self.InputAddrAgeLastSale            :=(integer)(le.InputAddrAgeLastSale             != ri.InputAddrAgeLastSale);
	self.InputAddrLastSalesPrice         :=(integer)(le.InputAddrLastSalesPrice          != ri.InputAddrLastSalesPrice);
	self.InputAddrMortgageType           :=(integer)(le.InputAddrMortgageType            != ri.InputAddrMortgageType);
	self.InputAddrNotPrimaryRes          :=(integer)(le.InputAddrNotPrimaryRes           != ri.InputAddrNotPrimaryRes);
	self.InputAddrActivePhoneList        :=(integer)(le.InputAddrActivePhoneList         != ri.InputAddrActivePhoneList);
	self.InputAddrTaxValue               :=(integer)(le.InputAddrTaxValue                != ri.InputAddrTaxValue);
	self.InputAddrTaxYr                  :=(integer)(le.InputAddrTaxYr                   != ri.InputAddrTaxYr);
	self.InputAddrTaxMarketValue         :=(integer)(le.InputAddrTaxMarketValue          != ri.InputAddrTaxMarketValue);
	self.InputAddrAVMValue               :=(integer)(le.InputAddrAVMValue                != ri.InputAddrAVMValue);
	self.InputAddrAVMValue12             :=(integer)(le.InputAddrAVMValue12              != ri.InputAddrAVMValue12);
	self.InputAddrAVMValue60             :=(integer)(le.InputAddrAVMValue60              != ri.InputAddrAVMValue60);
	self.InputAddrCountyIndex            :=(integer)(le.InputAddrCountyIndex             != ri.InputAddrCountyIndex);
	self.InputAddrTractIndex             :=(integer)(le.InputAddrTractIndex              != ri.InputAddrTractIndex);
	self.InputAddrBlockIndex             :=(integer)(le.InputAddrBlockIndex              != ri.InputAddrBlockIndex);
	self.CurrAddrAgeOldestRecord         :=(integer)(le.CurrAddrAgeOldestRecord          != ri.CurrAddrAgeOldestRecord);
	self.CurrAddrAgeNewestRecord         :=(integer)(le.CurrAddrAgeNewestRecord          != ri.CurrAddrAgeNewestRecord);
	self.CurrAddrLenOfRes                :=(integer)(le.CurrAddrLenOfRes                 != ri.CurrAddrLenOfRes);
	self.CurrAddrDwellType               :=(integer)(le.CurrAddrDwellType                != ri.CurrAddrDwellType);
	self.CurrAddrApplicantOwned          :=(integer)(le.CurrAddrApplicantOwned           != ri.CurrAddrApplicantOwned);
	self.CurrAddrFamilyOwned             :=(integer)(le.CurrAddrFamilyOwned              != ri.CurrAddrFamilyOwned);
	self.CurrAddrOccupantOwned           :=(integer)(le.CurrAddrOccupantOwned            != ri.CurrAddrOccupantOwned);
	self.CurrAddrAgeLastSale             :=(integer)(le.CurrAddrAgeLastSale              != ri.CurrAddrAgeLastSale);
	self.CurrAddrLastSalesPrice          :=(integer)(le.CurrAddrLastSalesPrice           != ri.CurrAddrLastSalesPrice);
	self.CurrAddrMortgageType            :=(integer)(le.CurrAddrMortgageType             != ri.CurrAddrMortgageType);
	self.CurrAddrActivePhoneList         :=(integer)(le.CurrAddrActivePhoneList          != ri.CurrAddrActivePhoneList);
	self.CurrAddrTaxValue                :=(integer)(le.CurrAddrTaxValue                 != ri.CurrAddrTaxValue);
	self.CurrAddrTaxYr                   :=(integer)(le.CurrAddrTaxYr                    != ri.CurrAddrTaxYr);
	self.CurrAddrTaxMarketValue          :=(integer)(le.CurrAddrTaxMarketValue           != ri.CurrAddrTaxMarketValue);
	self.CurrAddrAVMValue                :=(integer)(le.CurrAddrAVMValue                 != ri.CurrAddrAVMValue);
	self.CurrAddrAVMValue12              :=(integer)(le.CurrAddrAVMValue12               != ri.CurrAddrAVMValue12);
	self.CurrAddrAVMValue60              :=(integer)(le.CurrAddrAVMValue60               != ri.CurrAddrAVMValue60);
	self.CurrAddrCountyIndex             :=(integer)(le.CurrAddrCountyIndex              != ri.CurrAddrCountyIndex);
	self.CurrAddrTractIndex              :=(integer)(le.CurrAddrTractIndex               != ri.CurrAddrTractIndex);
	self.CurrAddrBlockIndex              :=(integer)(le.CurrAddrBlockIndex               != ri.CurrAddrBlockIndex);
	self.PrevAddrAgeOldestRecord         :=(integer)(le.PrevAddrAgeOldestRecord          != ri.PrevAddrAgeOldestRecord);
	self.PrevAddrAgeNewestRecord         :=(integer)(le.PrevAddrAgeNewestRecord          != ri.PrevAddrAgeNewestRecord);
	self.PrevAddrLenOfRes                :=(integer)(le.PrevAddrLenOfRes                 != ri.PrevAddrLenOfRes);
	self.PrevAddrDwellType               :=(integer)(le.PrevAddrDwellType                != ri.PrevAddrDwellType);
	self.PrevAddrApplicantOwned          :=(integer)(le.PrevAddrApplicantOwned           != ri.PrevAddrApplicantOwned);
	self.PrevAddrFamilyOwned             :=(integer)(le.PrevAddrFamilyOwned              != ri.PrevAddrFamilyOwned);
	self.PrevAddrOccupantOwned           :=(integer)(le.PrevAddrOccupantOwned            != ri.PrevAddrOccupantOwned);
	self.PrevAddrAgeLastSale             :=(integer)(le.PrevAddrAgeLastSale              != ri.PrevAddrAgeLastSale);
	self.PrevAddrLastSalesPrice          :=(integer)(le.PrevAddrLastSalesPrice           != ri.PrevAddrLastSalesPrice);
	self.PrevAddrTaxValue                :=(integer)(le.PrevAddrTaxValue                 != ri.PrevAddrTaxValue);
	self.PrevAddrTaxYr                   :=(integer)(le.PrevAddrTaxYr                    != ri.PrevAddrTaxYr);
	self.PrevAddrTaxMarketValue          :=(integer)(le.PrevAddrTaxMarketValue           != ri.PrevAddrTaxMarketValue);
	self.PrevAddrAVMValue                :=(integer)(le.PrevAddrAVMValue                 != ri.PrevAddrAVMValue);
	self.PrevAddrCountyIndex             :=(integer)(le.PrevAddrCountyIndex              != ri.PrevAddrCountyIndex);
	self.PrevAddrTractIndex              :=(integer)(le.PrevAddrTractIndex               != ri.PrevAddrTractIndex);
	self.PrevAddrBlockIndex              :=(integer)(le.PrevAddrBlockIndex               != ri.PrevAddrBlockIndex);
	self.AddrMostRecentDistance          :=(integer)(le.AddrMostRecentDistance           != ri.AddrMostRecentDistance);
	self.AddrMostRecentStateDiff         :=(integer)(le.AddrMostRecentStateDiff          != ri.AddrMostRecentStateDiff);
	self.AddrMostRecentTaxDiff           :=(integer)(le.AddrMostRecentTaxDiff            != ri.AddrMostRecentTaxDiff);
	self.AddrMostRecentMoveAge           :=(integer)(le.AddrMostRecentMoveAge            != ri.AddrMostRecentMoveAge);
	self.AddrRecentEconTrajectory        :=(integer)(le.AddrRecentEconTrajectory         != ri.AddrRecentEconTrajectory);
	self.AddrRecentEconTrajectoryIndex   :=(integer)(le.AddrRecentEconTrajectoryIndex    != ri.AddrRecentEconTrajectoryIndex);
	self.EducationAttendedCollege        :=(integer)(le.EducationAttendedCollege         != ri.EducationAttendedCollege);
	self.EducationProgram2Yr             :=(integer)(le.EducationProgram2Yr              != ri.EducationProgram2Yr);
	self.EducationProgram4Yr             :=(integer)(le.EducationProgram4Yr              != ri.EducationProgram4Yr);
	self.EducationProgramGraduate        :=(integer)(le.EducationProgramGraduate         != ri.EducationProgramGraduate);
	self.EducationInstitutionPrivate     :=(integer)(le.EducationInstitutionPrivate      != ri.EducationInstitutionPrivate);
	self.EducationFieldofStudyType       :=(integer)(le.EducationFieldofStudyType        != ri.EducationFieldofStudyType);
	self.EducationInstitutionRating      :=(integer)(le.EducationInstitutionRating       != ri.EducationInstitutionRating);
	self.AddrStability                   :=(integer)(le.AddrStability                    != ri.AddrStability);
	self.StatusMostRecent                :=(integer)(le.StatusMostRecent                 != ri.StatusMostRecent);
	self.StatusPrevious                  :=(integer)(le.StatusPrevious                   != ri.StatusPrevious);
	self.StatusNextPrevious              :=(integer)(le.StatusNextPrevious               != ri.StatusNextPrevious);
	self.AddrChangeCount01               :=(integer)(le.AddrChangeCount01                != ri.AddrChangeCount01);
	self.AddrChangeCount03               :=(integer)(le.AddrChangeCount03                != ri.AddrChangeCount03);
	self.AddrChangeCount06               :=(integer)(le.AddrChangeCount06                != ri.AddrChangeCount06);
	self.AddrChangeCount12               :=(integer)(le.AddrChangeCount12                != ri.AddrChangeCount12);
	self.AddrChangeCount24               :=(integer)(le.AddrChangeCount24                != ri.AddrChangeCount24);
	self.AddrChangeCount60               :=(integer)(le.AddrChangeCount60                != ri.AddrChangeCount60);
	self.EstimatedAnnualIncome           :=(integer)(le.EstimatedAnnualIncome            != ri.EstimatedAnnualIncome);
	self.PropertyOwner                   :=(integer)(le.PropertyOwner                    != ri.PropertyOwner);
	self.PropOwnedCount                  :=(integer)(le.PropOwnedCount                   != ri.PropOwnedCount);
	self.PropOwnedTaxTotal               :=(integer)(le.PropOwnedTaxTotal                != ri.PropOwnedTaxTotal);
	self.PropOwnedHistoricalCount        :=(integer)(le.PropOwnedHistoricalCount         != ri.PropOwnedHistoricalCount);
	self.PropAgeOldestPurchase           :=(integer)(le.PropAgeOldestPurchase            != ri.PropAgeOldestPurchase);
	self.PropAgeNewestPurchase           :=(integer)(le.PropAgeNewestPurchase            != ri.PropAgeNewestPurchase);
	self.PropAgeNewestSale               :=(integer)(le.PropAgeNewestSale                != ri.PropAgeNewestSale);
	self.PropNewestSalePrice             :=(integer)(le.PropNewestSalePrice              != ri.PropNewestSalePrice);
	self.PropNewestSalePurchaseIndex     :=(integer)(le.PropNewestSalePurchaseIndex      != ri.PropNewestSalePurchaseIndex);
	self.PropPurchasedCount01            :=(integer)(le.PropPurchasedCount01             != ri.PropPurchasedCount01);
	self.PropPurchasedCount03            :=(integer)(le.PropPurchasedCount03             != ri.PropPurchasedCount03);
	self.PropPurchasedCount06            :=(integer)(le.PropPurchasedCount06             != ri.PropPurchasedCount06);
	self.PropPurchasedCount12            :=(integer)(le.PropPurchasedCount12             != ri.PropPurchasedCount12);
	self.PropPurchasedCount24            :=(integer)(le.PropPurchasedCount24             != ri.PropPurchasedCount24);
	self.PropPurchasedCount60            :=(integer)(le.PropPurchasedCount60             != ri.PropPurchasedCount60);
	self.PropSoldCount01                 :=(integer)(le.PropSoldCount01                  != ri.PropSoldCount01);
	self.PropSoldCount03                 :=(integer)(le.PropSoldCount03                  != ri.PropSoldCount03);
	self.PropSoldCount06                 :=(integer)(le.PropSoldCount06                  != ri.PropSoldCount06);
	self.PropSoldCount12                 :=(integer)(le.PropSoldCount12                  != ri.PropSoldCount12);
	self.PropSoldCount24                 :=(integer)(le.PropSoldCount24                  != ri.PropSoldCount24);
	self.PropSoldCount60                 :=(integer)(le.PropSoldCount60                  != ri.PropSoldCount60);
	self.AssetOwner                      :=(integer)(le.AssetOwner                       != ri.AssetOwner);
	self.WatercraftOwner                 :=(integer)(le.WatercraftOwner                  != ri.WatercraftOwner);
	self.WatercraftCount                 :=(integer)(le.WatercraftCount                  != ri.WatercraftCount);
	self.WatercraftCount01               :=(integer)(le.WatercraftCount01                != ri.WatercraftCount01);
	self.WatercraftCount03               :=(integer)(le.WatercraftCount03                != ri.WatercraftCount03);
	self.WatercraftCount06               :=(integer)(le.WatercraftCount06                != ri.WatercraftCount06);
	self.WatercraftCount12               :=(integer)(le.WatercraftCount12                != ri.WatercraftCount12);
	self.WatercraftCount24               :=(integer)(le.WatercraftCount24                != ri.WatercraftCount24);
	self.WatercraftCount60               :=(integer)(le.WatercraftCount60                != ri.WatercraftCount60);
	self.AircraftOwner                   :=(integer)(le.AircraftOwner                    != ri.AircraftOwner);
	self.AircraftCount                   :=(integer)(le.AircraftCount                    != ri.AircraftCount);
	self.AircraftCount01                 :=(integer)(le.AircraftCount01                  != ri.AircraftCount01);
	self.AircraftCount03                 :=(integer)(le.AircraftCount03                  != ri.AircraftCount03);
	self.AircraftCount06                 :=(integer)(le.AircraftCount06                  != ri.AircraftCount06);
	self.AircraftCount12                 :=(integer)(le.AircraftCount12                  != ri.AircraftCount12);
	self.AircraftCount24                 :=(integer)(le.AircraftCount24                  != ri.AircraftCount24);
	self.AircraftCount60                 :=(integer)(le.AircraftCount60                  != ri.AircraftCount60);
	self.WealthIndex                     :=(integer)(le.WealthIndex                      != ri.WealthIndex);
	self.BusinessActiveAssociation       :=(integer)(le.BusinessActiveAssociation        != ri.BusinessActiveAssociation);
	self.BusinessInactiveAssociation     :=(integer)(le.BusinessInactiveAssociation      != ri.BusinessInactiveAssociation);
	self.BusinessAssociationAge          :=(integer)(le.BusinessAssociationAge           != ri.BusinessAssociationAge);
	self.BusinessTitle                   :=(integer)(le.BusinessTitle                    != ri.BusinessTitle);
	self.DerogSeverityIndex              :=(integer)(le.DerogSeverityIndex               != ri.DerogSeverityIndex);
	self.DerogCount                      :=(integer)(le.DerogCount                       != ri.DerogCount);
	self.DerogRecentCount                :=(integer)(le.DerogRecentCount                 != ri.DerogRecentCount);
	self.DerogAge                        :=(integer)(le.DerogAge                         != ri.DerogAge);
	self.FelonyCount                     :=(integer)(le.FelonyCount                      != ri.FelonyCount);
	self.FelonyAge                       :=(integer)(le.FelonyAge                        != ri.FelonyAge);
	self.FelonyCount01                   :=(integer)(le.FelonyCount01                    != ri.FelonyCount01);
	self.FelonyCount03                   :=(integer)(le.FelonyCount03                    != ri.FelonyCount03);
	self.FelonyCount06                   :=(integer)(le.FelonyCount06                    != ri.FelonyCount06);
	self.FelonyCount12                   :=(integer)(le.FelonyCount12                    != ri.FelonyCount12);
	self.FelonyCount24                   :=(integer)(le.FelonyCount24                    != ri.FelonyCount24);
	self.FelonyCount60                   :=(integer)(le.FelonyCount60                    != ri.FelonyCount60);
	self.LienCount                       :=(integer)(le.LienCount                        != ri.LienCount);
	self.LienFiledCount                  :=(integer)(le.LienFiledCount                   != ri.LienFiledCount);
	self.LienFiledAge                    :=(integer)(le.LienFiledAge                     != ri.LienFiledAge);
	self.LienFiledCount01                :=(integer)(le.LienFiledCount01                 != ri.LienFiledCount01);
	self.LienFiledCount03                :=(integer)(le.LienFiledCount03                 != ri.LienFiledCount03);
	self.LienFiledCount06                :=(integer)(le.LienFiledCount06                 != ri.LienFiledCount06);
	self.LienFiledCount12                :=(integer)(le.LienFiledCount12                 != ri.LienFiledCount12);
	self.LienFiledCount24                :=(integer)(le.LienFiledCount24                 != ri.LienFiledCount24);
	self.LienFiledCount60                :=(integer)(le.LienFiledCount60                 != ri.LienFiledCount60);
	self.LienReleasedCount               :=(integer)(le.LienReleasedCount                != ri.LienReleasedCount);
	self.LienReleasedAge                 :=(integer)(le.LienReleasedAge                  != ri.LienReleasedAge);
	self.LienReleasedCount01             :=(integer)(le.LienReleasedCount01              != ri.LienReleasedCount01);
	self.LienReleasedCount03             :=(integer)(le.LienReleasedCount03              != ri.LienReleasedCount03);
	self.LienReleasedCount06             :=(integer)(le.LienReleasedCount06              != ri.LienReleasedCount06);
	self.LienReleasedCount12             :=(integer)(le.LienReleasedCount12              != ri.LienReleasedCount12);
	self.LienReleasedCount24             :=(integer)(le.LienReleasedCount24              != ri.LienReleasedCount24);
	self.LienReleasedCount60             :=(integer)(le.LienReleasedCount60              != ri.LienReleasedCount60);
	self.LienFiledTotal                  :=(integer)(le.LienFiledTotal                   != ri.LienFiledTotal);
	self.LienFederalTaxFiledTotal        :=(integer)(le.LienFederalTaxFiledTotal         != ri.LienFederalTaxFiledTotal);
	self.LienTaxOtherFiledTotal          :=(integer)(le.LienTaxOtherFiledTotal           != ri.LienTaxOtherFiledTotal);
	self.LienForeclosureFiledTotal       :=(integer)(le.LienForeclosureFiledTotal        != ri.LienForeclosureFiledTotal);
	self.LienLandlordTenantFiledTotal    :=(integer)(le.LienLandlordTenantFiledTotal     != ri.LienLandlordTenantFiledTotal);
	self.LienJudgmentFiledTotal          :=(integer)(le.LienJudgmentFiledTotal           != ri.LienJudgmentFiledTotal);
	self.LienSmallClaimsFiledTotal       :=(integer)(le.LienSmallClaimsFiledTotal        != ri.LienSmallClaimsFiledTotal);
	self.LienOtherFiledTotal             :=(integer)(le.LienOtherFiledTotal              != ri.LienOtherFiledTotal);
	self.LienReleasedTotal               :=(integer)(le.LienReleasedTotal                != ri.LienReleasedTotal);
	self.LienFederalTaxReleasedTotal     :=(integer)(le.LienFederalTaxReleasedTotal      != ri.LienFederalTaxReleasedTotal);
	self.LienTaxOtherReleasedTotal       :=(integer)(le.LienTaxOtherReleasedTotal        != ri.LienTaxOtherReleasedTotal);
	self.LienForeclosureReleasedTotal    :=(integer)(le.LienForeclosureReleasedTotal     != ri.LienForeclosureReleasedTotal);
	self.LienLandlordTenantReleasedTotal :=(integer)(le.LienLandlordTenantReleasedTotal  != ri.LienLandlordTenantReleasedTotal);
	self.LienJudgmentReleasedTotal       :=(integer)(le.LienJudgmentReleasedTotal        != ri.LienJudgmentReleasedTotal);
	self.LienSmallClaimsReleasedTotal    :=(integer)(le.LienSmallClaimsReleasedTotal     != ri.LienSmallClaimsReleasedTotal);
	self.LienOtherReleasedTotal          :=(integer)(le.LienOtherReleasedTotal           != ri.LienOtherReleasedTotal);
	self.LienFederalTaxFiledCount        :=(integer)(le.LienFederalTaxFiledCount         != ri.LienFederalTaxFiledCount);
	self.LienTaxOtherFiledCount          :=(integer)(le.LienTaxOtherFiledCount           != ri.LienTaxOtherFiledCount);
	self.LienForeclosureFiledCount       :=(integer)(le.LienForeclosureFiledCount        != ri.LienForeclosureFiledCount);
	self.LienLandlordTenantFiledCount    :=(integer)(le.LienLandlordTenantFiledCount     != ri.LienLandlordTenantFiledCount);
	self.LienJudgmentFiledCount          :=(integer)(le.LienJudgmentFiledCount           != ri.LienJudgmentFiledCount);
	self.LienSmallClaimsFiledCount       :=(integer)(le.LienSmallClaimsFiledCount        != ri.LienSmallClaimsFiledCount);
	self.LienOtherFiledCount             :=(integer)(le.LienOtherFiledCount              != ri.LienOtherFiledCount);
	self.LienFederalTaxReleasedCount     :=(integer)(le.LienFederalTaxReleasedCount      != ri.LienFederalTaxReleasedCount);
	self.LienTaxOtherReleasedCount       :=(integer)(le.LienTaxOtherReleasedCount        != ri.LienTaxOtherReleasedCount);
	self.LienForeclosureReleasedCount    :=(integer)(le.LienForeclosureReleasedCount     != ri.LienForeclosureReleasedCount);
	self.LienLandlordTenantReleasedCount :=(integer)(le.LienLandlordTenantReleasedCount  != ri.LienLandlordTenantReleasedCount);
	self.LienJudgmentReleasedCount       :=(integer)(le.LienJudgmentReleasedCount        != ri.LienJudgmentReleasedCount);
	self.LienSmallClaimsReleasedCount    :=(integer)(le.LienSmallClaimsReleasedCount     != ri.LienSmallClaimsReleasedCount);
	self.LienOtherReleasedCount          :=(integer)(le.LienOtherReleasedCount           != ri.LienOtherReleasedCount);
	self.BankruptcyCount                 :=(integer)(le.BankruptcyCount                  != ri.BankruptcyCount);
	self.BankruptcyAge                   :=(integer)(le.BankruptcyAge                    != ri.BankruptcyAge);
	self.BankruptcyType                  :=(integer)(le.BankruptcyType                   != ri.BankruptcyType);
	self.BankruptcyStatus                :=(integer)(le.BankruptcyStatus                 != ri.BankruptcyStatus);
	self.BankruptcyCount01               :=(integer)(le.BankruptcyCount01                != ri.BankruptcyCount01);
	self.BankruptcyCount03               :=(integer)(le.BankruptcyCount03                != ri.BankruptcyCount03);
	self.BankruptcyCount06               :=(integer)(le.BankruptcyCount06                != ri.BankruptcyCount06);
	self.BankruptcyCount12               :=(integer)(le.BankruptcyCount12                != ri.BankruptcyCount12);
	self.BankruptcyCount24               :=(integer)(le.BankruptcyCount24                != ri.BankruptcyCount24);
	self.BankruptcyCount60               :=(integer)(le.BankruptcyCount60                != ri.BankruptcyCount60);
	self.EvictionCount                   :=(integer)(le.EvictionCount                    != ri.EvictionCount);
	self.EvictionAge                     :=(integer)(le.EvictionAge                      != ri.EvictionAge);
	self.EvictionCount01                 :=(integer)(le.EvictionCount01                  != ri.EvictionCount01);
	self.EvictionCount03                 :=(integer)(le.EvictionCount03                  != ri.EvictionCount03);
	self.EvictionCount06                 :=(integer)(le.EvictionCount06                  != ri.EvictionCount06);
	self.EvictionCount12                 :=(integer)(le.EvictionCount12                  != ri.EvictionCount12);
	self.EvictionCount24                 :=(integer)(le.EvictionCount24                  != ri.EvictionCount24);
	self.EvictionCount60                 :=(integer)(le.EvictionCount60                  != ri.EvictionCount60);
	self.RecentActivityIndex             :=(integer)(le.RecentActivityIndex              != ri.RecentActivityIndex);
	self.NonDerogCount                   :=(integer)(le.NonDerogCount                    != ri.NonDerogCount);
	self.NonDerogCount01                 :=(integer)(le.NonDerogCount01                  != ri.NonDerogCount01);
	self.NonDerogCount03                 :=(integer)(le.NonDerogCount03                  != ri.NonDerogCount03);
	self.NonDerogCount06                 :=(integer)(le.NonDerogCount06                  != ri.NonDerogCount06);
	self.NonDerogCount12                 :=(integer)(le.NonDerogCount12                  != ri.NonDerogCount12);
	self.NonDerogCount24                 :=(integer)(le.NonDerogCount24                  != ri.NonDerogCount24);
	self.NonDerogCount60                 :=(integer)(le.NonDerogCount60                  != ri.NonDerogCount60);
	self.VoterRegistrationRecord         :=(integer)(le.VoterRegistrationRecord          != ri.VoterRegistrationRecord);
	self.ProfLicCount                    :=(integer)(le.ProfLicCount                     != ri.ProfLicCount);
	self.ProfLicAge                      :=(integer)(le.ProfLicAge                       != ri.ProfLicAge);
	self.ProfLicType                     :=(integer)(le.ProfLicType                      != ri.ProfLicType);
	self.ProfLicTypeCategory             :=(integer)(le.ProfLicTypeCategory              != ri.ProfLicTypeCategory);
	self.ProfLicExpired                  :=(integer)(le.ProfLicExpired                   != ri.ProfLicExpired);
	self.ProfLicCount01                  :=(integer)(le.ProfLicCount01                   != ri.ProfLicCount01);
	self.ProfLicCount03                  :=(integer)(le.ProfLicCount03                   != ri.ProfLicCount03);
	self.ProfLicCount06                  :=(integer)(le.ProfLicCount06                   != ri.ProfLicCount06);
	self.ProfLicCount12                  :=(integer)(le.ProfLicCount12                   != ri.ProfLicCount12);
	self.ProfLicCount24                  :=(integer)(le.ProfLicCount24                   != ri.ProfLicCount24);
	self.ProfLicCount60                  :=(integer)(le.ProfLicCount60                   != ri.ProfLicCount60);
	self.InquiryCollectionsRecent        :=(integer)(le.InquiryCollectionsRecent         != ri.InquiryCollectionsRecent);
	self.InquiryPersonalFinanceRecent    :=(integer)(le.InquiryPersonalFinanceRecent     != ri.InquiryPersonalFinanceRecent);
	self.InquiryOtherRecent              :=(integer)(le.InquiryOtherRecent               != ri.InquiryOtherRecent);
	self.HighRiskCreditActivity          :=(integer)(le.HighRiskCreditActivity           != ri.HighRiskCreditActivity);
	self.SubPrimeOfferRequestCount       :=(integer)(le.SubPrimeOfferRequestCount        != ri.SubPrimeOfferRequestCount);
	self.SubPrimeOfferRequestCount01     :=(integer)(le.SubPrimeOfferRequestCount01      != ri.SubPrimeOfferRequestCount01);
	self.SubPrimeOfferRequestCount03     :=(integer)(le.SubPrimeOfferRequestCount03      != ri.SubPrimeOfferRequestCount03);
	self.SubPrimeOfferRequestCount06     :=(integer)(le.SubPrimeOfferRequestCount06      != ri.SubPrimeOfferRequestCount06);
	self.SubPrimeOfferRequestCount12     :=(integer)(le.SubPrimeOfferRequestCount12      != ri.SubPrimeOfferRequestCount12);
	self.SubPrimeOfferRequestCount24     :=(integer)(le.SubPrimeOfferRequestCount24      != ri.SubPrimeOfferRequestCount24);
	self.SubPrimeOfferRequestCount60     :=(integer)(le.SubPrimeOfferRequestCount60      != ri.SubPrimeOfferRequestCount60);
	self.InputPhoneMobile                :=(integer)(le.InputPhoneMobile                 != ri.InputPhoneMobile);
	self.PhoneEDAAgeOldestRecord         :=(integer)(le.PhoneEDAAgeOldestRecord          != ri.PhoneEDAAgeOldestRecord);
	self.PhoneEDAAgeNewestRecord         :=(integer)(le.PhoneEDAAgeNewestRecord          != ri.PhoneEDAAgeNewestRecord);
	self.PhoneOtherAgeOldestRecord       :=(integer)(le.PhoneOtherAgeOldestRecord        != ri.PhoneOtherAgeOldestRecord);
	self.PhoneOtherAgeNewestRecord       :=(integer)(le.PhoneOtherAgeNewestRecord        != ri.PhoneOtherAgeNewestRecord);
	self.InputPhoneHighRisk              :=(integer)(le.InputPhoneHighRisk               != ri.InputPhoneHighRisk);
	self.InputPhoneProblems              :=(integer)(le.InputPhoneProblems               != ri.InputPhoneProblems);
	self.EmailAddress                    :=(integer)(le.EmailAddress                     != ri.EmailAddress);
	self.InputAddrHighRisk               :=(integer)(le.InputAddrHighRisk                != ri.InputAddrHighRisk);
	self.CurrAddrCorrectional            :=(integer)(le.CurrAddrCorrectional             != ri.CurrAddrCorrectional);
	self.PrevAddrCorrectional            :=(integer)(le.PrevAddrCorrectional             != ri.PrevAddrCorrectional);
	self.HistoricalAddrCorrectional      :=(integer)(le.HistoricalAddrCorrectional       != ri.HistoricalAddrCorrectional);
	self.InputAddrProblems               :=(integer)(le.InputAddrProblems                != ri.InputAddrProblems);
	self.SecurityFreeze                  :=(integer)(le.SecurityFreeze                   != ri.SecurityFreeze);
	self.SecurityAlert                   :=(integer)(le.SecurityAlert                    != ri.SecurityAlert);
	self.IDTheftFlag                     :=(integer)(le.IDTheftFlag                      != ri.IDTheftFlag);
	self.ConsumerStatement               :=(integer)(le.ConsumerStatement                != ri.ConsumerStatement);
	self.PrescreenOptOut                 :=(integer)(le.PrescreenOptOut                  != ri.PrescreenOptOut);
	self.historydate                     :=(integer)(le.historydate                      != ri.historydate);
	self.DID                             :=(integer)(le.DID                              != ri.DID);
	self.FNamePop                        :=(integer)(le.FNamePop                         != ri.FNamePop);
	self.LNamePop                        :=(integer)(le.LNamePop                         != ri.LNamePop);
	self.AddrPop                         :=(integer)(le.AddrPop                          != ri.AddrPop);
	self.SSNLength                       :=(integer)(le.SSNLength                        != ri.SSNLength);
	self.DOBPop                          :=(integer)(le.DOBPop                           != ri.DOBPop);
	self.EmailPop                        :=(integer)(le.EmailPop                         != ri.EmailPop);
	self.IPAddrPop                       :=(integer)(le.IPAddrPop                        != ri.IPAddrPop);
	self.HPhnPop                         :=(integer)(le.HPhnPop                          != ri.HPhnPop);
	self.errorcode                       :=(integer)(le.errorcode                        != ri.errorcode);
END;

res := JOIN (ds_original, ds_compare, LEFT.accountnumber=RIGHT.accountnumber, mk_matches(LEFT,RIGHT));
//output(res);

total := count(res);
seq                              := count(res(seq                              = 1));
AccountNumber                    := count(res(AccountNumber                    = 1));
AgeOldestRecord                  := count(res(AgeOldestRecord                  = 1));
AgeNewestRecord                  := count(res(AgeNewestRecord                  = 1));
RecentUpdate                     := count(res(RecentUpdate                     = 1));
SrcsConfirmIDAddrCount           := count(res(SrcsConfirmIDAddrCount           = 1));
InvalidDL                        := count(res(InvalidDL                        = 1));
VerificationFailure              := count(res(VerificationFailure              = 1));
SSNNotFound                      := count(res(SSNNotFound                      = 1));
VerifiedName                     := count(res(VerifiedName                     = 1));
VerifiedSSN                      := count(res(VerifiedSSN                      = 1));
VerifiedPhone                    := count(res(VerifiedPhone                    = 1));
VerifiedAddress                  := count(res(VerifiedAddress                  = 1));
VerifiedDOB                      := count(res(VerifiedDOB                      = 1));
InferredMinimumAge               := count(res(InferredMinimumAge               = 1));
BestReportedAge                  := count(res(BestReportedAge                  = 1));
SubjectSSNCount                  := count(res(SubjectSSNCount                  = 1));
SubjectAddrCount                 := count(res(SubjectAddrCount                 = 1));
SubjectPhoneCount                := count(res(SubjectPhoneCount                = 1));
SubjectSSNRecentCount            := count(res(SubjectSSNRecentCount            = 1));
SubjectAddrRecentCount           := count(res(SubjectAddrRecentCount           = 1));
SubjectPhoneRecentCount          := count(res(SubjectPhoneRecentCount          = 1));
SSNIdentitiesCount               := count(res(SSNIdentitiesCount               = 1));
SSNAddrCount                     := count(res(SSNAddrCount                     = 1));
SSNIdentitiesRecentCount         := count(res(SSNIdentitiesRecentCount         = 1));
SSNAddrRecentCount               := count(res(SSNAddrRecentCount               = 1));
InputAddrPhoneCount              := count(res(InputAddrPhoneCount              = 1));
InputAddrPhoneRecentCount        := count(res(InputAddrPhoneRecentCount        = 1));
PhoneIdentitiesCount             := count(res(PhoneIdentitiesCount             = 1));
PhoneIdentitiesRecentCount       := count(res(PhoneIdentitiesRecentCount       = 1));
SSNAgeDeceased                   := count(res(SSNAgeDeceased                   = 1));
SSNRecent                        := count(res(SSNRecent                        = 1));
SSNLowIssueAge                   := count(res(SSNLowIssueAge                   = 1));
SSNHighIssueAge                  := count(res(SSNHighIssueAge                  = 1));
SSNIssueState                    := count(res(SSNIssueState                    = 1));
SSNNonUS                         := count(res(SSNNonUS                         = 1));
SSN3Years                        := count(res(SSN3Years                        = 1));
SSNAfter5                        := count(res(SSNAfter5                        = 1));
SSNProblems                      := count(res(SSNProblems                      = 1));
InputAddrAgeOldestRecord         := count(res(InputAddrAgeOldestRecord         = 1));
InputAddrAgeNewestRecord         := count(res(InputAddrAgeNewestRecord         = 1));
InputAddrHistoricalMatch         := count(res(InputAddrHistoricalMatch         = 1));
InputAddrLenOfRes                := count(res(InputAddrLenOfRes                = 1));
InputAddrDwellType               := count(res(InputAddrDwellType               = 1));
InputAddrDelivery                := count(res(InputAddrDelivery                = 1));
InputAddrApplicantOwned          := count(res(InputAddrApplicantOwned          = 1));
InputAddrFamilyOwned             := count(res(InputAddrFamilyOwned             = 1));
InputAddrOccupantOwned           := count(res(InputAddrOccupantOwned           = 1));
InputAddrAgeLastSale             := count(res(InputAddrAgeLastSale             = 1));
InputAddrLastSalesPrice          := count(res(InputAddrLastSalesPrice          = 1));
InputAddrMortgageType            := count(res(InputAddrMortgageType            = 1));
InputAddrNotPrimaryRes           := count(res(InputAddrNotPrimaryRes           = 1));
InputAddrActivePhoneList         := count(res(InputAddrActivePhoneList         = 1));
InputAddrTaxValue                := count(res(InputAddrTaxValue                = 1));
InputAddrTaxYr                   := count(res(InputAddrTaxYr                   = 1));
InputAddrTaxMarketValue          := count(res(InputAddrTaxMarketValue          = 1));
InputAddrAVMValue                := count(res(InputAddrAVMValue                = 1));
InputAddrAVMValue12              := count(res(InputAddrAVMValue12              = 1));
InputAddrAVMValue60              := count(res(InputAddrAVMValue60              = 1));
InputAddrCountyIndex             := count(res(InputAddrCountyIndex             = 1));
InputAddrTractIndex              := count(res(InputAddrTractIndex              = 1));
InputAddrBlockIndex              := count(res(InputAddrBlockIndex              = 1));
CurrAddrAgeOldestRecord          := count(res(CurrAddrAgeOldestRecord          = 1));
CurrAddrAgeNewestRecord          := count(res(CurrAddrAgeNewestRecord          = 1));
CurrAddrLenOfRes                 := count(res(CurrAddrLenOfRes                 = 1));
CurrAddrDwellType                := count(res(CurrAddrDwellType                = 1));
CurrAddrApplicantOwned           := count(res(CurrAddrApplicantOwned           = 1));
CurrAddrFamilyOwned              := count(res(CurrAddrFamilyOwned              = 1));
CurrAddrOccupantOwned            := count(res(CurrAddrOccupantOwned            = 1));
CurrAddrAgeLastSale              := count(res(CurrAddrAgeLastSale              = 1));
CurrAddrLastSalesPrice           := count(res(CurrAddrLastSalesPrice           = 1));
CurrAddrMortgageType             := count(res(CurrAddrMortgageType             = 1));
CurrAddrActivePhoneList          := count(res(CurrAddrActivePhoneList          = 1));
CurrAddrTaxValue                 := count(res(CurrAddrTaxValue                 = 1));
CurrAddrTaxYr                    := count(res(CurrAddrTaxYr                    = 1));
CurrAddrTaxMarketValue           := count(res(CurrAddrTaxMarketValue           = 1));
CurrAddrAVMValue                 := count(res(CurrAddrAVMValue                 = 1));
CurrAddrAVMValue12               := count(res(CurrAddrAVMValue12               = 1));
CurrAddrAVMValue60               := count(res(CurrAddrAVMValue60               = 1));
CurrAddrCountyIndex              := count(res(CurrAddrCountyIndex              = 1));
CurrAddrTractIndex               := count(res(CurrAddrTractIndex               = 1));
CurrAddrBlockIndex               := count(res(CurrAddrBlockIndex               = 1));
PrevAddrAgeOldestRecord          := count(res(PrevAddrAgeOldestRecord          = 1));
PrevAddrAgeNewestRecord          := count(res(PrevAddrAgeNewestRecord          = 1));
PrevAddrLenOfRes                 := count(res(PrevAddrLenOfRes                 = 1));
PrevAddrDwellType                := count(res(PrevAddrDwellType                = 1));
PrevAddrApplicantOwned           := count(res(PrevAddrApplicantOwned           = 1));
PrevAddrFamilyOwned              := count(res(PrevAddrFamilyOwned              = 1));
PrevAddrOccupantOwned            := count(res(PrevAddrOccupantOwned            = 1));
PrevAddrAgeLastSale              := count(res(PrevAddrAgeLastSale              = 1));
PrevAddrLastSalesPrice           := count(res(PrevAddrLastSalesPrice           = 1));
PrevAddrTaxValue                 := count(res(PrevAddrTaxValue                 = 1));
PrevAddrTaxYr                    := count(res(PrevAddrTaxYr                    = 1));
PrevAddrTaxMarketValue           := count(res(PrevAddrTaxMarketValue           = 1));
PrevAddrAVMValue                 := count(res(PrevAddrAVMValue                 = 1));
PrevAddrCountyIndex              := count(res(PrevAddrCountyIndex              = 1));
PrevAddrTractIndex               := count(res(PrevAddrTractIndex               = 1));
PrevAddrBlockIndex               := count(res(PrevAddrBlockIndex               = 1));
AddrMostRecentDistance           := count(res(AddrMostRecentDistance           = 1));
AddrMostRecentStateDiff          := count(res(AddrMostRecentStateDiff          = 1));
AddrMostRecentTaxDiff            := count(res(AddrMostRecentTaxDiff            = 1));
AddrMostRecentMoveAge            := count(res(AddrMostRecentMoveAge            = 1));
AddrRecentEconTrajectory         := count(res(AddrRecentEconTrajectory         = 1));
AddrRecentEconTrajectoryIndex    := count(res(AddrRecentEconTrajectoryIndex    = 1));
EducationAttendedCollege         := count(res(EducationAttendedCollege         = 1));
EducationProgram2Yr              := count(res(EducationProgram2Yr              = 1));
EducationProgram4Yr              := count(res(EducationProgram4Yr              = 1));
EducationProgramGraduate         := count(res(EducationProgramGraduate         = 1));
EducationInstitutionPrivate      := count(res(EducationInstitutionPrivate      = 1));
EducationFieldofStudyType        := count(res(EducationFieldofStudyType        = 1));
EducationInstitutionRating       := count(res(EducationInstitutionRating       = 1));
AddrStability                    := count(res(AddrStability                    = 1));
StatusMostRecent                 := count(res(StatusMostRecent                 = 1));
StatusPrevious                   := count(res(StatusPrevious                   = 1));
StatusNextPrevious               := count(res(StatusNextPrevious               = 1));
AddrChangeCount01                := count(res(AddrChangeCount01                = 1));
AddrChangeCount03                := count(res(AddrChangeCount03                = 1));
AddrChangeCount06                := count(res(AddrChangeCount06                = 1));
AddrChangeCount12                := count(res(AddrChangeCount12                = 1));
AddrChangeCount24                := count(res(AddrChangeCount24                = 1));
AddrChangeCount60                := count(res(AddrChangeCount60                = 1));
EstimatedAnnualIncome            := count(res(EstimatedAnnualIncome            = 1));
PropertyOwner                    := count(res(PropertyOwner                    = 1));
PropOwnedCount                   := count(res(PropOwnedCount                   = 1));
PropOwnedTaxTotal                := count(res(PropOwnedTaxTotal                = 1));
PropOwnedHistoricalCount         := count(res(PropOwnedHistoricalCount         = 1));
PropAgeOldestPurchase            := count(res(PropAgeOldestPurchase            = 1));
PropAgeNewestPurchase            := count(res(PropAgeNewestPurchase            = 1));
PropAgeNewestSale                := count(res(PropAgeNewestSale                = 1));
PropNewestSalePrice              := count(res(PropNewestSalePrice              = 1));
PropNewestSalePurchaseIndex      := count(res(PropNewestSalePurchaseIndex      = 1));
PropPurchasedCount01             := count(res(PropPurchasedCount01             = 1));
PropPurchasedCount03             := count(res(PropPurchasedCount03             = 1));
PropPurchasedCount06             := count(res(PropPurchasedCount06             = 1));
PropPurchasedCount12             := count(res(PropPurchasedCount12             = 1));
PropPurchasedCount24             := count(res(PropPurchasedCount24             = 1));
PropPurchasedCount60             := count(res(PropPurchasedCount60             = 1));
PropSoldCount01                  := count(res(PropSoldCount01                  = 1));
PropSoldCount03                  := count(res(PropSoldCount03                  = 1));
PropSoldCount06                  := count(res(PropSoldCount06                  = 1));
PropSoldCount12                  := count(res(PropSoldCount12                  = 1));
PropSoldCount24                  := count(res(PropSoldCount24                  = 1));
PropSoldCount60                  := count(res(PropSoldCount60                  = 1));
AssetOwner                       := count(res(AssetOwner                       = 1));
WatercraftOwner                  := count(res(WatercraftOwner                  = 1));
WatercraftCount                  := count(res(WatercraftCount                  = 1));
WatercraftCount01                := count(res(WatercraftCount01                = 1));
WatercraftCount03                := count(res(WatercraftCount03                = 1));
WatercraftCount06                := count(res(WatercraftCount06                = 1));
WatercraftCount12                := count(res(WatercraftCount12                = 1));
WatercraftCount24                := count(res(WatercraftCount24                = 1));
WatercraftCount60                := count(res(WatercraftCount60                = 1));
AircraftOwner                    := count(res(AircraftOwner                    = 1));
AircraftCount                    := count(res(AircraftCount                    = 1));
AircraftCount01                  := count(res(AircraftCount01                  = 1));
AircraftCount03                  := count(res(AircraftCount03                  = 1));
AircraftCount06                  := count(res(AircraftCount06                  = 1));
AircraftCount12                  := count(res(AircraftCount12                  = 1));
AircraftCount24                  := count(res(AircraftCount24                  = 1));
AircraftCount60                  := count(res(AircraftCount60                  = 1));
WealthIndex                      := count(res(WealthIndex                      = 1));
BusinessActiveAssociation        := count(res(BusinessActiveAssociation        = 1));
BusinessInactiveAssociation      := count(res(BusinessInactiveAssociation      = 1));
BusinessAssociationAge           := count(res(BusinessAssociationAge           = 1));
BusinessTitle                    := count(res(BusinessTitle                    = 1));
DerogSeverityIndex               := count(res(DerogSeverityIndex               = 1));
DerogCount                       := count(res(DerogCount                       = 1));
DerogRecentCount                 := count(res(DerogRecentCount                 = 1));
DerogAge                         := count(res(DerogAge                         = 1));
FelonyCount                      := count(res(FelonyCount                      = 1));
FelonyAge                        := count(res(FelonyAge                        = 1));
FelonyCount01                    := count(res(FelonyCount01                    = 1));
FelonyCount03                    := count(res(FelonyCount03                    = 1));
FelonyCount06                    := count(res(FelonyCount06                    = 1));
FelonyCount12                    := count(res(FelonyCount12                    = 1));
FelonyCount24                    := count(res(FelonyCount24                    = 1));
FelonyCount60                    := count(res(FelonyCount60                    = 1));
LienCount                        := count(res(LienCount                        = 1));
LienFiledCount                   := count(res(LienFiledCount                   = 1));
LienFiledAge                     := count(res(LienFiledAge                     = 1));
LienFiledCount01                 := count(res(LienFiledCount01                 = 1));
LienFiledCount03                 := count(res(LienFiledCount03                 = 1));
LienFiledCount06                 := count(res(LienFiledCount06                 = 1));
LienFiledCount12                 := count(res(LienFiledCount12                 = 1));
LienFiledCount24                 := count(res(LienFiledCount24                 = 1));
LienFiledCount60                 := count(res(LienFiledCount60                 = 1));
LienReleasedCount                := count(res(LienReleasedCount                = 1));
LienReleasedAge                  := count(res(LienReleasedAge                  = 1));
LienReleasedCount01              := count(res(LienReleasedCount01              = 1));
LienReleasedCount03              := count(res(LienReleasedCount03              = 1));
LienReleasedCount06              := count(res(LienReleasedCount06              = 1));
LienReleasedCount12              := count(res(LienReleasedCount12              = 1));
LienReleasedCount24              := count(res(LienReleasedCount24              = 1));
LienReleasedCount60              := count(res(LienReleasedCount60              = 1));
LienFiledTotal                   := count(res(LienFiledTotal                   = 1));
LienFederalTaxFiledTotal         := count(res(LienFederalTaxFiledTotal         = 1));
LienTaxOtherFiledTotal           := count(res(LienTaxOtherFiledTotal           = 1));
LienForeclosureFiledTotal        := count(res(LienForeclosureFiledTotal        = 1));
LienLandlordTenantFiledTotal     := count(res(LienLandlordTenantFiledTotal     = 1));
LienJudgmentFiledTotal           := count(res(LienJudgmentFiledTotal           = 1));
LienSmallClaimsFiledTotal        := count(res(LienSmallClaimsFiledTotal        = 1));
LienOtherFiledTotal              := count(res(LienOtherFiledTotal              = 1));
LienReleasedTotal                := count(res(LienReleasedTotal                = 1));
LienFederalTaxReleasedTotal      := count(res(LienFederalTaxReleasedTotal      = 1));
LienTaxOtherReleasedTotal        := count(res(LienTaxOtherReleasedTotal        = 1));
LienForeclosureReleasedTotal     := count(res(LienForeclosureReleasedTotal     = 1));
LienLandlordTenantReleasedTotal  := count(res(LienLandlordTenantReleasedTotal  = 1));
LienJudgmentReleasedTotal        := count(res(LienJudgmentReleasedTotal        = 1));
LienSmallClaimsReleasedTotal     := count(res(LienSmallClaimsReleasedTotal     = 1));
LienOtherReleasedTotal           := count(res(LienOtherReleasedTotal           = 1));
LienFederalTaxFiledCount         := count(res(LienFederalTaxFiledCount         = 1));
LienTaxOtherFiledCount           := count(res(LienTaxOtherFiledCount           = 1));
LienForeclosureFiledCount        := count(res(LienForeclosureFiledCount        = 1));
LienLandlordTenantFiledCount     := count(res(LienLandlordTenantFiledCount     = 1));
LienJudgmentFiledCount           := count(res(LienJudgmentFiledCount           = 1));
LienSmallClaimsFiledCount        := count(res(LienSmallClaimsFiledCount        = 1));
LienOtherFiledCount              := count(res(LienOtherFiledCount              = 1));
LienFederalTaxReleasedCount      := count(res(LienFederalTaxReleasedCount      = 1));
LienTaxOtherReleasedCount        := count(res(LienTaxOtherReleasedCount        = 1));
LienForeclosureReleasedCount     := count(res(LienForeclosureReleasedCount     = 1));
LienLandlordTenantReleasedCount  := count(res(LienLandlordTenantReleasedCount  = 1));
LienJudgmentReleasedCount        := count(res(LienJudgmentReleasedCount        = 1));
LienSmallClaimsReleasedCount     := count(res(LienSmallClaimsReleasedCount     = 1));
LienOtherReleasedCount           := count(res(LienOtherReleasedCount           = 1));
BankruptcyCount                  := count(res(BankruptcyCount                  = 1));
BankruptcyAge                    := count(res(BankruptcyAge                    = 1));
BankruptcyType                   := count(res(BankruptcyType                   = 1));
BankruptcyStatus                 := count(res(BankruptcyStatus                 = 1));
BankruptcyCount01                := count(res(BankruptcyCount01                = 1));
BankruptcyCount03                := count(res(BankruptcyCount03                = 1));
BankruptcyCount06                := count(res(BankruptcyCount06                = 1));
BankruptcyCount12                := count(res(BankruptcyCount12                = 1));
BankruptcyCount24                := count(res(BankruptcyCount24                = 1));
BankruptcyCount60                := count(res(BankruptcyCount60                = 1));
EvictionCount                    := count(res(EvictionCount                    = 1));
EvictionAge                      := count(res(EvictionAge                      = 1));
EvictionCount01                  := count(res(EvictionCount01                  = 1));
EvictionCount03                  := count(res(EvictionCount03                  = 1));
EvictionCount06                  := count(res(EvictionCount06                  = 1));
EvictionCount12                  := count(res(EvictionCount12                  = 1));
EvictionCount24                  := count(res(EvictionCount24                  = 1));
EvictionCount60                  := count(res(EvictionCount60                  = 1));
RecentActivityIndex              := count(res(RecentActivityIndex              = 1));
NonDerogCount                    := count(res(NonDerogCount                    = 1));
NonDerogCount01                  := count(res(NonDerogCount01                  = 1));
NonDerogCount03                  := count(res(NonDerogCount03                  = 1));
NonDerogCount06                  := count(res(NonDerogCount06                  = 1));
NonDerogCount12                  := count(res(NonDerogCount12                  = 1));
NonDerogCount24                  := count(res(NonDerogCount24                  = 1));
NonDerogCount60                  := count(res(NonDerogCount60                  = 1));
VoterRegistrationRecord          := count(res(VoterRegistrationRecord          = 1));
ProfLicCount                     := count(res(ProfLicCount                     = 1));
ProfLicAge                       := count(res(ProfLicAge                       = 1));
ProfLicType                      := count(res(ProfLicType                      = 1));
ProfLicTypeCategory              := count(res(ProfLicTypeCategory              = 1));
ProfLicExpired                   := count(res(ProfLicExpired                   = 1));
ProfLicCount01                   := count(res(ProfLicCount01                   = 1));
ProfLicCount03                   := count(res(ProfLicCount03                   = 1));
ProfLicCount06                   := count(res(ProfLicCount06                   = 1));
ProfLicCount12                   := count(res(ProfLicCount12                   = 1));
ProfLicCount24                   := count(res(ProfLicCount24                   = 1));
ProfLicCount60                   := count(res(ProfLicCount60                   = 1));
InquiryCollectionsRecent         := count(res(InquiryCollectionsRecent         = 1));
InquiryPersonalFinanceRecent     := count(res(InquiryPersonalFinanceRecent     = 1));
InquiryOtherRecent               := count(res(InquiryOtherRecent               = 1));
HighRiskCreditActivity           := count(res(HighRiskCreditActivity           = 1));
SubPrimeOfferRequestCount        := count(res(SubPrimeOfferRequestCount        = 1));
SubPrimeOfferRequestCount01      := count(res(SubPrimeOfferRequestCount01      = 1));
SubPrimeOfferRequestCount03      := count(res(SubPrimeOfferRequestCount03      = 1));
SubPrimeOfferRequestCount06      := count(res(SubPrimeOfferRequestCount06      = 1));
SubPrimeOfferRequestCount12      := count(res(SubPrimeOfferRequestCount12      = 1));
SubPrimeOfferRequestCount24      := count(res(SubPrimeOfferRequestCount24      = 1));
SubPrimeOfferRequestCount60      := count(res(SubPrimeOfferRequestCount60      = 1));
InputPhoneMobile                 := count(res(InputPhoneMobile                 = 1));
PhoneEDAAgeOldestRecord          := count(res(PhoneEDAAgeOldestRecord          = 1));
PhoneEDAAgeNewestRecord          := count(res(PhoneEDAAgeNewestRecord          = 1));
PhoneOtherAgeOldestRecord        := count(res(PhoneOtherAgeOldestRecord        = 1));
PhoneOtherAgeNewestRecord        := count(res(PhoneOtherAgeNewestRecord        = 1));
InputPhoneHighRisk               := count(res(InputPhoneHighRisk               = 1));
InputPhoneProblems               := count(res(InputPhoneProblems               = 1));
EmailAddress                     := count(res(EmailAddress                     = 1));
InputAddrHighRisk                := count(res(InputAddrHighRisk                = 1));
CurrAddrCorrectional             := count(res(CurrAddrCorrectional             = 1));
PrevAddrCorrectional             := count(res(PrevAddrCorrectional             = 1));
HistoricalAddrCorrectional       := count(res(HistoricalAddrCorrectional       = 1));
InputAddrProblems                := count(res(InputAddrProblems                = 1));
SecurityFreeze                   := count(res(SecurityFreeze                   = 1));
SecurityAlert                    := count(res(SecurityAlert                    = 1));
IDTheftFlag                      := count(res(IDTheftFlag                      = 1));
ConsumerStatement                := count(res(ConsumerStatement                = 1));
PrescreenOptOut                  := count(res(PrescreenOptOut                  = 1));
historydate                      := count(res(historydate                      = 1));
DID                              := count(res(DID                              = 1));
FNamePop                         := count(res(FNamePop                         = 1));
LNamePop                         := count(res(LNamePop                         = 1));
AddrPop                          := count(res(AddrPop                          = 1));
SSNLength                        := count(res(SSNLength                        = 1));
DOBPop                           := count(res(DOBPop                           = 1));
EmailPop                         := count(res(EmailPop                         = 1));
IPAddrPop                        := count(res(IPAddrPop                        = 1));
HPhnPop                          := count(res(HPhnPop                          = 1));
errorcode                        := count(res(errorcode                        = 1));

summary_format := record
	total;
	seq;
	AccountNumber;
	AgeOldestRecord;
	AgeNewestRecord;
	RecentUpdate;
	SrcsConfirmIDAddrCount;
	InvalidDL;
	VerificationFailure;
	SSNNotFound;
	VerifiedName;
	VerifiedSSN;
	VerifiedPhone;
	VerifiedAddress;
	VerifiedDOB;
	InferredMinimumAge;
	BestReportedAge;
	SubjectSSNCount;
	SubjectAddrCount;
	SubjectPhoneCount;
	SubjectSSNRecentCount;
	SubjectAddrRecentCount;
	SubjectPhoneRecentCount;
	SSNIdentitiesCount;
	SSNAddrCount;
	SSNIdentitiesRecentCount;
	SSNAddrRecentCount;
	InputAddrPhoneCount;
	InputAddrPhoneRecentCount;
	PhoneIdentitiesCount;
	PhoneIdentitiesRecentCount;
	SSNAgeDeceased;
	SSNRecent;
	SSNLowIssueAge;
	SSNHighIssueAge;
	SSNIssueState;
	SSNNonUS;
	SSN3Years;
	SSNAfter5;
	SSNProblems;
	InputAddrAgeOldestRecord;
	InputAddrAgeNewestRecord;
	InputAddrHistoricalMatch;
	InputAddrLenOfRes;
	InputAddrDwellType;
	InputAddrDelivery;
	InputAddrApplicantOwned;
	InputAddrFamilyOwned;
	InputAddrOccupantOwned;
	InputAddrAgeLastSale;
	InputAddrLastSalesPrice;
	InputAddrMortgageType;
	InputAddrNotPrimaryRes;
	InputAddrActivePhoneList;
	InputAddrTaxValue;
	InputAddrTaxYr;
	InputAddrTaxMarketValue;
	InputAddrAVMValue;
	InputAddrAVMValue12;
	InputAddrAVMValue60;
	InputAddrCountyIndex;
	InputAddrTractIndex;
	InputAddrBlockIndex;
	CurrAddrAgeOldestRecord;
	CurrAddrAgeNewestRecord;
	CurrAddrLenOfRes;
	CurrAddrDwellType;
	CurrAddrApplicantOwned;
	CurrAddrFamilyOwned;
	CurrAddrOccupantOwned;
	CurrAddrAgeLastSale;
	CurrAddrLastSalesPrice;
	CurrAddrMortgageType;
	CurrAddrActivePhoneList;
	CurrAddrTaxValue;
	CurrAddrTaxYr;
	CurrAddrTaxMarketValue;
	CurrAddrAVMValue;
	CurrAddrAVMValue12;
	CurrAddrAVMValue60;
	CurrAddrCountyIndex;
	CurrAddrTractIndex;
	CurrAddrBlockIndex;
	PrevAddrAgeOldestRecord;
	PrevAddrAgeNewestRecord;
	PrevAddrLenOfRes;
	PrevAddrDwellType;
	PrevAddrApplicantOwned;
	PrevAddrFamilyOwned;
	PrevAddrOccupantOwned;
	PrevAddrAgeLastSale;
	PrevAddrLastSalesPrice;
	PrevAddrTaxValue;
	PrevAddrTaxYr;
	PrevAddrTaxMarketValue;
	PrevAddrAVMValue;
	PrevAddrCountyIndex;
	PrevAddrTractIndex;
	PrevAddrBlockIndex;
	AddrMostRecentDistance;
	AddrMostRecentStateDiff;
	AddrMostRecentTaxDiff;
	AddrMostRecentMoveAge;
	AddrRecentEconTrajectory;
	AddrRecentEconTrajectoryIndex;
	EducationAttendedCollege;
	EducationProgram2Yr;
	EducationProgram4Yr;
	EducationProgramGraduate;
	EducationInstitutionPrivate;
	EducationFieldofStudyType;
	EducationInstitutionRating;
	AddrStability;
	StatusMostRecent;
	StatusPrevious;
	StatusNextPrevious;
	AddrChangeCount01;
	AddrChangeCount03;
	AddrChangeCount06;
	AddrChangeCount12;
	AddrChangeCount24;
	AddrChangeCount60;
	EstimatedAnnualIncome;
	PropertyOwner;
	PropOwnedCount;
	PropOwnedTaxTotal;
	PropOwnedHistoricalCount;
	PropAgeOldestPurchase;
	PropAgeNewestPurchase;
	PropAgeNewestSale;
	PropNewestSalePrice;
	PropNewestSalePurchaseIndex;
	PropPurchasedCount01;
	PropPurchasedCount03;
	PropPurchasedCount06;
	PropPurchasedCount12;
	PropPurchasedCount24;
	PropPurchasedCount60;
	PropSoldCount01;
	PropSoldCount03;
	PropSoldCount06;
	PropSoldCount12;
	PropSoldCount24;
	PropSoldCount60;
	AssetOwner;
	WatercraftOwner;
	WatercraftCount;
	WatercraftCount01;
	WatercraftCount03;
	WatercraftCount06;
	WatercraftCount12;
	WatercraftCount24;
	WatercraftCount60;
	AircraftOwner;
	AircraftCount;
	AircraftCount01;
	AircraftCount03;
	AircraftCount06;
	AircraftCount12;
	AircraftCount24;
	AircraftCount60;
	WealthIndex;
	BusinessActiveAssociation;
	BusinessInactiveAssociation;
	BusinessAssociationAge;
	BusinessTitle;
	DerogSeverityIndex;
	DerogCount;
	DerogRecentCount;
	DerogAge;
	FelonyCount;
	FelonyAge;
	FelonyCount01;
	FelonyCount03;
	FelonyCount06;
	FelonyCount12;
	FelonyCount24;
	FelonyCount60;
	LienCount;
	LienFiledCount;
	LienFiledAge;
	LienFiledCount01;
	LienFiledCount03;
	LienFiledCount06;
	LienFiledCount12;
	LienFiledCount24;
	LienFiledCount60;
	LienReleasedCount;
	LienReleasedAge;
	LienReleasedCount01;
	LienReleasedCount03;
	LienReleasedCount06;
	LienReleasedCount12;
	LienReleasedCount24;
	LienReleasedCount60;
	LienFiledTotal;
	LienFederalTaxFiledTotal;
	LienTaxOtherFiledTotal;
	LienForeclosureFiledTotal;
	LienLandlordTenantFiledTotal;
	LienJudgmentFiledTotal;
	LienSmallClaimsFiledTotal;
	LienOtherFiledTotal;
	LienReleasedTotal;
	LienFederalTaxReleasedTotal;
	LienTaxOtherReleasedTotal;
	LienForeclosureReleasedTotal;
	LienLandlordTenantReleasedTotal;
	LienJudgmentReleasedTotal;
	LienSmallClaimsReleasedTotal;
	LienOtherReleasedTotal;
	LienFederalTaxFiledCount;
	LienTaxOtherFiledCount;
	LienForeclosureFiledCount;
	LienLandlordTenantFiledCount;
	LienJudgmentFiledCount;
	LienSmallClaimsFiledCount;
	LienOtherFiledCount;
	LienFederalTaxReleasedCount;
	LienTaxOtherReleasedCount;
	LienForeclosureReleasedCount;
	LienLandlordTenantReleasedCount;
	LienJudgmentReleasedCount;
	LienSmallClaimsReleasedCount;
	LienOtherReleasedCount;
	BankruptcyCount;
	BankruptcyAge;
	BankruptcyType;
	BankruptcyStatus;
	BankruptcyCount01;
	BankruptcyCount03;
	BankruptcyCount06;
	BankruptcyCount12;
	BankruptcyCount24;
	BankruptcyCount60;
	EvictionCount;
	EvictionAge;
	EvictionCount01;
	EvictionCount03;
	EvictionCount06;
	EvictionCount12;
	EvictionCount24;
	EvictionCount60;
	RecentActivityIndex;
	NonDerogCount;
	NonDerogCount01;
	NonDerogCount03;
	NonDerogCount06;
	NonDerogCount12;
	NonDerogCount24;
	NonDerogCount60;
	VoterRegistrationRecord;
	ProfLicCount;
	ProfLicAge;
	ProfLicType;
	ProfLicTypeCategory;
	ProfLicExpired;
	ProfLicCount01;
	ProfLicCount03;
	ProfLicCount06;
	ProfLicCount12;
	ProfLicCount24;
	ProfLicCount60;
	InquiryCollectionsRecent;
	InquiryPersonalFinanceRecent;
	InquiryOtherRecent;
	HighRiskCreditActivity;
	SubPrimeOfferRequestCount;
	SubPrimeOfferRequestCount01;
	SubPrimeOfferRequestCount03;
	SubPrimeOfferRequestCount06;
	SubPrimeOfferRequestCount12;
	SubPrimeOfferRequestCount24;
	SubPrimeOfferRequestCount60;
	InputPhoneMobile;
	PhoneEDAAgeOldestRecord;
	PhoneEDAAgeNewestRecord;
	PhoneOtherAgeOldestRecord;
	PhoneOtherAgeNewestRecord;
	InputPhoneHighRisk;
	InputPhoneProblems;
	EmailAddress;
	InputAddrHighRisk;
	CurrAddrCorrectional;
	PrevAddrCorrectional;
	HistoricalAddrCorrectional;
	InputAddrProblems;
	SecurityFreeze;
	SecurityAlert;
	IDTheftFlag;
	ConsumerStatement;
	PrescreenOptOut;
	historydate;
	DID;
	FNamePop;
	LNamePop;
	AddrPop;
	SSNLength;
	DOBPop;
	EmailPop;
	IPAddrPop;
	HPhnPop;
	errorcode;
END;

summary_res := table(res, summary_format, total);	
output(summary_res);

endmacro;
