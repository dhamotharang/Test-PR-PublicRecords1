export macro_compare_lia_3_0(olddate, newdate, old_adate, new_adate) := macro
#workunit('name','LIA 3.0 Comparison for Tracking');
#option ('hthorMemoryLimit', 1000);

IMPORT Risk_Indicators, RiskProcessing;

//===================  input-output files  ======================
infile_original :=  '~nmontpetit::out::lia_30_tracking_'+(string)olddate+'_'+(string)old_adate;
infile_compare :=   '~nmontpetit::out::lia_30_tracking_'+(string)newdate+'_'+(string)new_adate;

layout_lia_30 := RECORD
		STRING20 seq;
		STRING30 AccountNumber;

		STRING4  AgeOldestRecord;
		STRING4  AgeNewestRecord;	
		STRING1  RecentUpdate;
		STRING2  SrcsConfirmIDAddrCount;
		STRING1  CreditBureauRecord;
		STRING2  InvalidSSN;
		STRING2  InvalidAddr;
		STRING2  InvalidPhone;
		STRING2  VerificationFailure;
		STRING2  SSNNotFound;
		STRING2  SSNFoundOther;
		STRING1  VerifiedName;
		STRING2  VerifiedSSN;
		STRING2  VerifiedPhone;
		STRING2  VerifiedPhoneFullName;
		STRING2  VerifiedPhoneLastName;
		STRING2  VerifiedAddress;
		STRING2  VerifiedDOB;
		STRING3  AgeRiskIndicator;
		STRING3  SubjectSSNCount;
		STRING3  SubjectAddrCount;
		STRING3  SubjectPhoneCount;
		STRING3  SubjectSSNRecentCount;
		STRING3  SubjectAddrRecentCount;
		STRING3  SubjectPhoneRecentCount;
		STRING3  SSNIdentitiesCount;
		STRING3  SSNAddrCount;
		STRING3  SSNIdentitiesRecentCount;
		STRING3  SSNAddrRecentCount;
		STRING3  InputAddrIdentitiesCount;
		STRING3  InputAddrSSNCount;
		STRING3  InputAddrPhoneCount;
		STRING3  InputAddrIdentitiesRecentCount;
		STRING3  InputAddrSSNRecentCount;
		STRING3  InputAddrPhoneRecentCount;
		STRING3  PhoneIdentitiesCount;
		STRING3  PhoneIdentitiesRecentCount;
		STRING2  PhoneOther;
		STRING3  SSNLastNameCount;
		STRING3  SubjectLastNameCount;
		STRING4  LastNameChangeAge;
		STRING3  LastNameChangeCount01;
		STRING3  LastNameChangeCount03;
		STRING3  LastNameChangeCount06;
		STRING3  LastNameChangeCount12;
		STRING3  LastNameChangeCount24;
		STRING3  LastNameChangeCount36;
		STRING3  LastNameChangeCount60;
		STRING3  SFDUAddrIdentitiesCount;
		STRING3  SFDUAddrSSNCount;
		STRING2  SSNDeceased;
		STRING8  SSNDateDeceased;
		STRING2  SSNIssued;
		STRING2  SSNRecent;
		STRING8  SSNLowIssueDate;
		STRING8  SSNHighIssueDate;
		STRING2  SSNIssueState;
		STRING2  SSNNonUS;
		STRING2  SSNIssuedPriorDOB;
		STRING2  SSN3Years;
		STRING2  SSNAfter5;
		STRING3  SSNProblems;
		STRING3  RelativesCount;
		STRING3  RelativesBankruptcyCount;
		STRING3  RelativesFelonyCount;
		STRING3  RelativesPropOwnedCount;
		STRING13 RelativesPropOwnedTaxTotal;
		STRING2  RelativesDistanceClosest;
		STRING4  InputAddrAgeOldestRecord;
		STRING4  InputAddrAgeNewestRecord;
		STRING3  InputAddrLenOfRes;
		STRING2  InputAddrDwellType;
		STRING2  InputAddrLandUseCode;
		STRING2  InputAddrApplicantOwned;
		STRING2  InputAddrFamilyOwned;
		STRING2  InputAddrOccupantOwned;
		STRING4  InputAddrAgeLastSale;
		STRING10 InputAddrLastSalesPrice;
		STRING2  InputAddrNotPrimaryRes;
		STRING2  InputAddrActivePhoneList;
		STRING10 InputAddrActivePhoneNumber;
		STRING10 InputAddrTaxValue;
		STRING4  InputAddrTaxYr;
		STRING10 InputAddrTaxMarketValue;
		STRING10 InputAddrAVMTax;
		STRING10 InputAddrAVMSalesPrice;
		STRING10 InputAddrAVMHedonic;
		STRING10 InputAddrAVMValue;
		STRING2  InputAddrAVMConfidence;
		STRING5  InputAddrCountyIndex;
		STRING5  InputAddrTractIndex;
		STRING5  InputAddrBlockIndex;
		STRING10 InputAddrMedianIncome;
		STRING10 InputAddrMedianValue;
		STRING3  InputAddrMurderIndex;
		STRING3  InputAddrCarTheftIndex;
		STRING3  InputAddrBurglaryIndex;
		STRING3  InputAddrCrimeIndex;
		STRING4  CurrAddrAgeOldestRecord;
		STRING4  CurrAddrAgeNewestRecord;
		STRING3  CurrAddrLenOfRes;
		STRING2  CurrAddrDwellType;
		STRING2  CurrAddrLandUseCode;
		STRING2  CurrAddrApplicantOwned;
		STRING2  CurrAddrFamilyOwned;
		STRING2  CurrAddrOccupantOwned;
		STRING4  CurrAddrAgeLastSale;
		STRING10 CurrAddrLastSalesPrice;
		STRING2  CurrAddrActivePhoneList;
		STRING10 CurrAddrActivePhoneNumber;
		STRING10 CurrAddrTaxValue;
		STRING4  CurrAddrTaxYr;
		STRING10 CurrAddrTaxMarketValue;
		STRING10 CurrAddrAVMTax;
		STRING10 CurrAddrAVMSalesPrice;
		STRING10 CurrAddrAVMHedonic;
		STRING10 CurrAddrAVMValue;
		STRING2  CurrAddrAVMConfidence;
		STRING5  CurrAddrCountyIndex;
		STRING5  CurrAddrTractIndex;
		STRING5  CurrAddrBlockIndex;
		STRING10 CurrAddrMedianIncome;
		STRING10 CurrAddrMedianValue;
		STRING3  CurrAddrMurderIndex;
		STRING3  CurrAddrCarTheftIndex;
		STRING3  CurrAddrBurglaryIndex;
		STRING3  CurrAddrCrimeIndex;
		STRING4  PrevAddrAgeOldestRecord;
		STRING4  PrevAddrAgeNewestRecord;
		STRING3  PrevAddrLenOfRes;
		STRING2  PrevAddrDwellType;
		STRING2  PrevAddrLandUseCode;
		STRING2  PrevAddrApplicantOwned;
		STRING2  PrevAddrFamilyOwned;
		STRING2  PrevAddrOccupantOwned;
		STRING4  PrevAddrAgeLastSale;
		STRING10 PrevAddrLastSalesPrice;
		STRING2  PrevAddrActivePhoneList;
		STRING10 PrevAddrActivePhoneNumber;
		STRING10 PrevAddrTaxValue;
		STRING4  PrevAddrTaxYr;
		STRING10 PrevAddrTaxMarketValue;
		STRING10 PrevAddrAVMTax;
		STRING10 PrevAddrAVMSalesPrice;
		STRING10 PrevAddrAVMHedonic;
		STRING10 PrevAddrAVMValue;
		STRING2  PrevAddrAVMConfidence;
		STRING5  PrevAddrCountyIndex;
		STRING5  PrevAddrTractIndex;
		STRING5  PrevAddrBlockIndex;
		STRING10 PrevAddrMedianIncome;
		STRING10 PrevAddrMedianValue;
		STRING3  PrevAddrMurderIndex;
		STRING3  PrevAddrCarTheftIndex;
		STRING3  PrevAddrBurglaryIndex;
		STRING3  PrevAddrCrimeIndex;
		STRING2  InputCurrAddrMatch;
		STRING4  InputCurrAddrDistance;
		STRING2  InputCurrAddrStateDiff;
		STRING10 InputCurrAddrTaxDiff;
		STRING11 InputCurrAddrIncomeDiff;
		STRING11 InputCurrAddrValueDiff;
		STRING4  InputCurrAddrCrimeDiff;
		STRING2  InputCurrEconTrajectory;
		STRING2  InputPrevAddrMatch;
		STRING4  CurrPrevAddrDistance;
		STRING2  CurrPrevAddrStateDiff;
		STRING10 CurrPrevAddrTaxDiff;
		STRING11 CurrPrevAddrIncomeDiff;
		STRING11 CurrPrevAddrValueDiff;
		STRING4  CurrPrevAddrCrimeDiff;
		STRING2  PrevCurrEconTrajectory;
		STRING1  EducationAttendedCollege;
		STRING2  EducationProgram2Yr;
		STRING2  EducationProgram4Yr;
		STRING2  EducationProgramGraduate;
		STRING2  EducationInstitutionPrivate;
		STRING2  EducationInstitutionRating;
		STRING2  EducationFieldofStudyType;
		STRING1  AddrStability;
		STRING2  StatusMostRecent;
		STRING2  StatusPrevious;
		STRING2  StatusNextPrevious;
		STRING3  AddrChangeCount01;
		STRING3  AddrChangeCount03;
		STRING3  AddrChangeCount06;
		STRING3  AddrChangeCount12;
		STRING3  AddrChangeCount24;
		STRING3  AddrChangeCount36;
		STRING3  AddrChangeCount60;
		STRING6  PredictedAnnualIncome;
		STRING3  PropOwnedCount;
		STRING13 PropOwnedTaxTotal;
		STRING3  PropOwnedHistoricalCount;
		STRING3  PropAgeOldestPurchase;
		STRING3  PropAgeNewestPurchase;
		STRING3  PropAgeNewestSale;
		STRING4  PropNewestSalePurchaseIndex;
		STRING3  PropPurchasedCount01;
		STRING3  PropPurchasedCount03;
		STRING3  PropPurchasedCount06;
		STRING3  PropPurchasedCount12;
		STRING3  PropPurchasedCount24;
		STRING3  PropPurchasedCount36;
		STRING3  PropPurchasedCount60;
		STRING3  PropSoldCount01;
		STRING3  PropSoldCount03;
		STRING3  PropSoldCount06;
		STRING3  PropSoldCount12;
		STRING3  PropSoldCount24;
		STRING3  PropSoldCount36;
		STRING3  PropSoldCount60;
		STRING3  WatercraftCount;
		STRING3  WatercraftCount01;
		STRING3  WatercraftCount03;
		STRING3  WatercraftCount06;
		STRING3  WatercraftCount12;
		STRING3  WatercraftCount24;
		STRING3  WatercraftCount36;
		STRING3  WatercraftCount60;
		STRING3  AircraftCount;
		STRING3  AircraftCount01;
		STRING3  AircraftCount03;
		STRING3  AircraftCount06;
		STRING3  AircraftCount12;
		STRING3  AircraftCount24;
		STRING3  AircraftCount36;
		STRING3  AircraftCount60;
		STRING1  WealthIndex;
		STRING3  SubPrimeSolicitedCount;
		STRING3  SubPrimeSolicitedCount01;
		STRING3  SubPrimeSolicitedCount03;
		STRING3  SubPrimeSolicitedCount06;
		STRING3  SubPrimeSolicitedCount12;
		STRING3  SubPrimeSolicitedCount24;
		STRING3  SubPrimeSolicitedCount36;
		STRING3  SubPrimeSolicitedCount60;
		STRING2  DerogSeverityIndex;
		STRING3  DerogCount;
		STRING4  DerogAge;
		STRING3  FelonyCount;
		STRING4  FelonyAge;
		STRING3  FelonyCount01;
		STRING3  FelonyCount03;
		STRING3  FelonyCount06;
		STRING3  FelonyCount12;
		STRING3  FelonyCount24;
		STRING3  FelonyCount36;
		STRING3  FelonyCount60;
		STRING3  ArrestCount;
		STRING4  ArrestAge;
		STRING3  ArrestCount01;
		STRING3  ArrestCount03;
		STRING3  ArrestCount06;
		STRING3  ArrestCount12;
		STRING3  ArrestCount24;
		STRING3  ArrestCount36;
		STRING3  ArrestCount60;
		STRING3  LienCount;
		STRING3  LienFiledCount;
		STRING4  LienFiledAge;
		STRING3  LienFiledCount01;
		STRING3  LienFiledCount03;
		STRING3  LienFiledCount06;
		STRING3  LienFiledCount12;
		STRING3  LienFiledCount24;
		STRING3  LienFiledCount36;
		STRING3  LienFiledCount60;
		STRING3  LienReleasedCount;
		STRING4  LienReleasedAge;
		STRING3  LienReleasedCount01;
		STRING3  LienReleasedCount03;
		STRING3  LienReleasedCount06;
		STRING3  LienReleasedCount12;
		STRING3  LienReleasedCount24;
		STRING3  LienReleasedCount36;
		STRING3  LienReleasedCount60;
		STRING3  BankruptcyCount;
		STRING4  BankruptcyAge;
		STRING2  BankruptcyType;
		STRING35 BankruptcyStatus;
		STRING3  BankruptcyCount01;
		STRING3  BankruptcyCount03;
		STRING3  BankruptcyCount06;
		STRING3  BankruptcyCount12;
		STRING3  BankruptcyCount24;
		STRING3  BankruptcyCount36;
		STRING3  BankruptcyCount60;
		STRING3  EvictionCount;
		STRING4  EvictionAge;
		STRING3  EvictionCount01;
		STRING3  EvictionCount03;
		STRING3  EvictionCount06;
		STRING3  EvictionCount12;
		STRING3  EvictionCount24;
		STRING3  EvictionCount36;
		STRING3  EvictionCount60;
		STRING3  NonDerogCount;
		STRING3  NonDerogCount01;
		STRING3  NonDerogCount03;
		STRING3  NonDerogCount06;
		STRING3  NonDerogCount12;
		STRING3  NonDerogCount24;
		STRING3  NonDerogCount36;
		STRING3  NonDerogCount60;
		STRING3  ProfLicCount;
		STRING4  ProfLicAge;
		STRING2  ProfLicTypeCategory;
		STRING8  ProfLicExpireDate;
		STRING3  ProfLicCount01;
		STRING3  ProfLicCount03;
		STRING3  ProfLicCount06;
		STRING3  ProfLicCount12;
		STRING3  ProfLicCount24;
		STRING3  ProfLicCount36;
		STRING3  ProfLicCount60;
		STRING3  ProfLicExpireCount01;
		STRING3  ProfLicExpireCount03;
		STRING3  ProfLicExpireCount06;
		STRING3  ProfLicExpireCount12;
		STRING3  ProfLicExpireCount24;
		STRING3  ProfLicExpireCount36;
		STRING3  ProfLicExpireCount60;
		STRING3  PRSearchCollectionCount;
		STRING3  PRSearchCollectionCount01;
		STRING3  PRSearchCollectionCount03;
		STRING3  PRSearchCollectionCount06;
		STRING3  PRSearchCollectionCount12;
		STRING3  PRSearchCollectionCount24;
		STRING3  PRSearchCollectionCount36;
		STRING3  PRSearchCollectionCount60;
		STRING3  PRSearchIDVFraudCount;
		STRING3  PRSearchIDVFraudCount01;
		STRING3  PRSearchIDVFraudCount03;
		STRING3  PRSearchIDVFraudCount06;
		STRING3  PRSearchIDVFraudCount12;
		STRING3  PRSearchIDVFraudCount24;
		STRING3  PRSearchIDVFraudCount36;
		STRING3  PRSearchIDVFraudCount60;
		STRING3  PRSearchOtherCount;
		STRING3  PRSearchOtherCount01;
		STRING3  PRSearchOtherCount03;
		STRING3  PRSearchOtherCount06;
		STRING3  PRSearchOtherCount12;
		STRING3  PRSearchOtherCount24;
		STRING3  PRSearchOtherCount36;
		STRING3  PRSearchOtherCount60;
		STRING2  InputPhoneStatus;
		STRING2  InputPhonePager;
		STRING2  InputPhoneMobile;
		STRING2  InputPhoneType;
		STRING2  InputPhoneServiceType;
		STRING2  InputAreaCodeChange;
		STRING4  PhoneEDAAgeOldestRecord;
		STRING4  PhoneEDAAgeNewestRecord;
		STRING4  PhoneOtherAgeOldestRecord;
		STRING4  PhoneOtherAgeNewestRecord;
		STRING2  InvalidPhoneZip;
		STRING4  InputPhoneAddrDist;
		STRING6  InputAddrSICCode;
		STRING2  InputAddrValidation;
		STRING5  InputAddrErrorCode;
		STRING2  InputAddrHighRisk;
		STRING2  InputPhoneHighRisk;
		STRING2  InputAddrPrison;
		STRING2  CurrAddrPrison;
		STRING2  PrevAddrPrison;
		STRING2  HistoricalAddrPrison;
		STRING2  InputZipPOBox;
		STRING2  InputZipCorpMil;
		STRING1  DoNotMail;
        RiskProcessing.layout_internal_extras;
END;

ds_original := 	dataset(infile_original, 	layout_lia_30, csv(heading(1), quote('"'), maxlength(32000)));
ds_compare := 	dataset(infile_compare, 	layout_lia_30, csv(heading(1), quote('"'), maxlength(32000)));

//output(ds_original);
//output(ds_compare);

layout_res := RECORD
	integer seq;
	integer AccountNumber;
	integer AgeOldestRecord;
	integer AgeNewestRecord;
	integer RecentUpdate;
	integer SrcsConfirmIDAddrCount;
	integer CreditBureauRecord;
	integer InvalidSSN;
	integer InvalidAddr;
	integer InvalidPhone;
	integer VerificationFailure;
	integer SSNNotFound;
	integer SSNFoundOther;
	integer VerifiedName;
	integer VerifiedSSN;
	integer VerifiedPhone;
	integer VerifiedPhoneFullName;
	integer VerifiedPhoneLastName;
	integer VerifiedAddress;
	integer VerifiedDOB;
	integer AgeRiskIndicator;
	integer SubjectSSNCount;
	integer SubjectAddrCount;
	integer SubjectPhoneCount;
	integer SubjectSSNRecentCount;
	integer SubjectAddrRecentCount;
	integer SubjectPhoneRecentCount;
	integer SSNIdentitiesCount;
	integer SSNAddrCount;
	integer SSNIdentitiesRecentCount;
	integer SSNAddrRecentCount;
	integer InputAddrIdentitiesCount;
	integer InputAddrSSNCount;
	integer InputAddrPhoneCount;
	integer InputAddrIdentitiesRecentCount;
	integer InputAddrSSNRecentCount;
	integer InputAddrPhoneRecentCount;
	integer PhoneIdentitiesCount;
	integer PhoneIdentitiesRecentCount;
	integer PhoneOther;
	integer SSNLastNameCount;
	integer SubjectLastNameCount;
	integer LastNameChangeAge;
	integer LastNameChangeCount01;
	integer LastNameChangeCount03;
	integer LastNameChangeCount06;
	integer LastNameChangeCount12;
	integer LastNameChangeCount24;
	integer LastNameChangeCount36;
	integer LastNameChangeCount60;
	integer SFDUAddrIdentitiesCount;
	integer SFDUAddrSSNCount;
	integer SSNDeceased;
	integer SSNDateDeceased;
	integer SSNIssued;
	integer SSNRecent;
	integer SSNLowIssueDate;
	integer SSNHighIssueDate;
	integer SSNIssueState;
	integer SSNNonUS;
	integer SSNIssuedPriorDOB;
	integer SSN3Years;
	integer SSNAfter5;
	integer SSNProblems;
	integer RelativesCount;
	integer RelativesBankruptcyCount;
	integer RelativesFelonyCount;
	integer RelativesPropOwnedCount;
	integer RelativesPropOwnedTaxTotal;
	integer RelativesDistanceClosest;
	integer InputAddrAgeOldestRecord;
	integer InputAddrAgeNewestRecord;
	integer InputAddrLenOfRes;
	integer InputAddrDwellType;
	integer InputAddrLandUseCode;
	integer InputAddrApplicantOwned;
	integer InputAddrFamilyOwned;
	integer InputAddrOccupantOwned;
	integer InputAddrAgeLastSale;
	integer InputAddrLastSalesPrice;
	integer InputAddrNotPrimaryRes;
	integer InputAddrActivePhoneList;
	integer InputAddrActivePhoneNumber;
	integer InputAddrTaxValue;
	integer InputAddrTaxYr;
	integer InputAddrTaxMarketValue;
	integer InputAddrAVMTax;
	integer InputAddrAVMSalesPrice;
	integer InputAddrAVMHedonic;
	integer InputAddrAVMValue;
	integer InputAddrAVMConfidence;
	integer InputAddrCountyIndex;
	integer InputAddrTractIndex;
	integer InputAddrBlockIndex;
	integer InputAddrMedianIncome;
	integer InputAddrMedianValue;
	integer InputAddrMurderIndex;
	integer InputAddrCarTheftIndex;
	integer InputAddrBurglaryIndex;
	integer InputAddrCrimeIndex;
	integer CurrAddrAgeOldestRecord;
	integer CurrAddrAgeNewestRecord;
	integer CurrAddrLenOfRes;
	integer CurrAddrDwellType;
	integer CurrAddrLandUseCode;
	integer CurrAddrApplicantOwned;
	integer CurrAddrFamilyOwned;
	integer CurrAddrOccupantOwned;
	integer CurrAddrAgeLastSale;
	integer CurrAddrLastSalesPrice;
	integer CurrAddrActivePhoneList;
	integer CurrAddrActivePhoneNumber;
	integer CurrAddrTaxValue;
	integer CurrAddrTaxYr;
	integer CurrAddrTaxMarketValue;
	integer CurrAddrAVMTax;
	integer CurrAddrAVMSalesPrice;
	integer CurrAddrAVMHedonic;
	integer CurrAddrAVMValue;
	integer CurrAddrAVMConfidence;
	integer CurrAddrCountyIndex;
	integer CurrAddrTractIndex;
	integer CurrAddrBlockIndex;
	integer CurrAddrMedianIncome;
	integer CurrAddrMedianValue;
	integer CurrAddrMurderIndex;
	integer CurrAddrCarTheftIndex;
	integer CurrAddrBurglaryIndex;
	integer CurrAddrCrimeIndex;
	integer PrevAddrAgeOldestRecord;
	integer PrevAddrAgeNewestRecord;
	integer PrevAddrLenOfRes;
	integer PrevAddrDwellType;
	integer PrevAddrLandUseCode;
	integer PrevAddrApplicantOwned;
	integer PrevAddrFamilyOwned;
	integer PrevAddrOccupantOwned;
	integer PrevAddrAgeLastSale;
	integer PrevAddrLastSalesPrice;
	integer PrevAddrActivePhoneList;
	integer PrevAddrActivePhoneNumber;
	integer PrevAddrTaxValue;
	integer PrevAddrTaxYr;
	integer PrevAddrTaxMarketValue;
	integer PrevAddrAVMTax;
	integer PrevAddrAVMSalesPrice;
	integer PrevAddrAVMHedonic;
	integer PrevAddrAVMValue;
	integer PrevAddrAVMConfidence;
	integer PrevAddrCountyIndex;
	integer PrevAddrTractIndex;
	integer PrevAddrBlockIndex;
	integer PrevAddrMedianIncome;
	integer PrevAddrMedianValue;
	integer PrevAddrMurderIndex;
	integer PrevAddrCarTheftIndex;
	integer PrevAddrBurglaryIndex;
	integer PrevAddrCrimeIndex;
	integer InputCurrAddrMatch;
	integer InputCurrAddrDistance;
	integer InputCurrAddrStateDiff;
	integer InputCurrAddrTaxDiff;
	integer InputCurrAddrIncomeDiff;
	integer InputCurrAddrValueDiff;
	integer InputCurrAddrCrimeDiff;
	integer InputCurrEconTrajectory;
	integer InputPrevAddrMatch;
	integer CurrPrevAddrDistance;
	integer CurrPrevAddrStateDiff;
	integer CurrPrevAddrTaxDiff;
	integer CurrPrevAddrIncomeDiff;
	integer CurrPrevAddrValueDiff;
	integer CurrPrevAddrCrimeDiff;
	integer PrevCurrEconTrajectory;
	integer EducationAttendedCollege;
	integer EducationProgram2Yr;
	integer EducationProgram4Yr;
	integer EducationProgramGraduate;
	integer EducationInstitutionPrivate;
	integer EducationInstitutionRating;
	integer EducationFieldofStudyType;
	integer AddrStability;
	integer StatusMostRecent;
	integer StatusPrevious;
	integer StatusNextPrevious;
	integer AddrChangeCount01;
	integer AddrChangeCount03;
	integer AddrChangeCount06;
	integer AddrChangeCount12;
	integer AddrChangeCount24;
	integer AddrChangeCount36;
	integer AddrChangeCount60;
	integer PredictedAnnualIncome;
	integer PropOwnedCount;
	integer PropOwnedTaxTotal;
	integer PropOwnedHistoricalCount;
	integer PropAgeOldestPurchase;
	integer PropAgeNewestPurchase;
	integer PropAgeNewestSale;
	integer PropNewestSalePurchaseIndex;
	integer PropPurchasedCount01;
	integer PropPurchasedCount03;
	integer PropPurchasedCount06;
	integer PropPurchasedCount12;
	integer PropPurchasedCount24;
	integer PropPurchasedCount36;
	integer PropPurchasedCount60;
	integer PropSoldCount01;
	integer PropSoldCount03;
	integer PropSoldCount06;
	integer PropSoldCount12;
	integer PropSoldCount24;
	integer PropSoldCount36;
	integer PropSoldCount60;
	integer WatercraftCount;
	integer WatercraftCount01;
	integer WatercraftCount03;
	integer WatercraftCount06;
	integer WatercraftCount12;
	integer WatercraftCount24;
	integer WatercraftCount36;
	integer WatercraftCount60;
	integer AircraftCount;
	integer AircraftCount01;
	integer AircraftCount03;
	integer AircraftCount06;
	integer AircraftCount12;
	integer AircraftCount24;
	integer AircraftCount36;
	integer AircraftCount60;
	integer WealthIndex;
	integer SubPrimeSolicitedCount;
	integer SubPrimeSolicitedCount01;
	integer SubPrimeSolicitedCount03;
	integer SubPrimeSolicitedCount06;
	integer SubPrimeSolicitedCount12;
	integer SubPrimeSolicitedCount24;
	integer SubPrimeSolicitedCount36;
	integer SubPrimeSolicitedCount60;
	integer DerogSeverityIndex;
	integer DerogCount;
	integer DerogAge;
	integer FelonyCount;
	integer FelonyAge;
	integer FelonyCount01;
	integer FelonyCount03;
	integer FelonyCount06;
	integer FelonyCount12;
	integer FelonyCount24;
	integer FelonyCount36;
	integer FelonyCount60;
	integer ArrestCount;
	integer ArrestAge;
	integer ArrestCount01;
	integer ArrestCount03;
	integer ArrestCount06;
	integer ArrestCount12;
	integer ArrestCount24;
	integer ArrestCount36;
	integer ArrestCount60;
	integer LienCount;
	integer LienFiledCount;
	integer LienFiledAge;
	integer LienFiledCount01;
	integer LienFiledCount03;
	integer LienFiledCount06;
	integer LienFiledCount12;
	integer LienFiledCount24;
	integer LienFiledCount36;
	integer LienFiledCount60;
	integer LienReleasedCount;
	integer LienReleasedAge;
	integer LienReleasedCount01;
	integer LienReleasedCount03;
	integer LienReleasedCount06;
	integer LienReleasedCount12;
	integer LienReleasedCount24;
	integer LienReleasedCount36;
	integer LienReleasedCount60;
	integer BankruptcyCount;
	integer BankruptcyAge;
	integer BankruptcyType;
	integer BankruptcyStatus;
	integer BankruptcyCount01;
	integer BankruptcyCount03;
	integer BankruptcyCount06;
	integer BankruptcyCount12;
	integer BankruptcyCount24;
	integer BankruptcyCount36;
	integer BankruptcyCount60;
	integer EvictionCount;
	integer EvictionAge;
	integer EvictionCount01;
	integer EvictionCount03;
	integer EvictionCount06;
	integer EvictionCount12;
	integer EvictionCount24;
	integer EvictionCount36;
	integer EvictionCount60;
	integer NonDerogCount;
	integer NonDerogCount01;
	integer NonDerogCount03;
	integer NonDerogCount06;
	integer NonDerogCount12;
	integer NonDerogCount24;
	integer NonDerogCount36;
	integer NonDerogCount60;
	integer ProfLicCount;
	integer ProfLicAge;
	integer ProfLicTypeCategory;
	integer ProfLicExpireDate;
	integer ProfLicCount01;
	integer ProfLicCount03;
	integer ProfLicCount06;
	integer ProfLicCount12;
	integer ProfLicCount24;
	integer ProfLicCount36;
	integer ProfLicCount60;
	integer ProfLicExpireCount01;
	integer ProfLicExpireCount03;
	integer ProfLicExpireCount06;
	integer ProfLicExpireCount12;
	integer ProfLicExpireCount24;
	integer ProfLicExpireCount36;
	integer ProfLicExpireCount60;
	integer PRSearchCollectionCount;
	integer PRSearchCollectionCount01;
	integer PRSearchCollectionCount03;
	integer PRSearchCollectionCount06;
	integer PRSearchCollectionCount12;
	integer PRSearchCollectionCount24;
	integer PRSearchCollectionCount36;
	integer PRSearchCollectionCount60;
	integer PRSearchIDVFraudCount;
	integer PRSearchIDVFraudCount01;
	integer PRSearchIDVFraudCount03;
	integer PRSearchIDVFraudCount06;
	integer PRSearchIDVFraudCount12;
	integer PRSearchIDVFraudCount24;
	integer PRSearchIDVFraudCount36;
	integer PRSearchIDVFraudCount60;
	integer PRSearchOtherCount;
	integer PRSearchOtherCount01;
	integer PRSearchOtherCount03;
	integer PRSearchOtherCount06;
	integer PRSearchOtherCount12;
	integer PRSearchOtherCount24;
	integer PRSearchOtherCount36;
	integer PRSearchOtherCount60;
	integer InputPhoneStatus;
	integer InputPhonePager;
	integer InputPhoneMobile;
	integer InputPhoneType;
	integer InputPhoneServiceType;
	integer InputAreaCodeChange;
	integer PhoneEDAAgeOldestRecord;
	integer PhoneEDAAgeNewestRecord;
	integer PhoneOtherAgeOldestRecord;
	integer PhoneOtherAgeNewestRecord;
	integer InvalidPhoneZip;
	integer InputPhoneAddrDist;
	integer InputAddrSICCode;
	integer InputAddrValidation;
	integer InputAddrErrorCode;
	integer InputAddrHighRisk;
	integer InputPhoneHighRisk;
	integer InputAddrPrison;
	integer CurrAddrPrison;
	integer PrevAddrPrison;
	integer HistoricalAddrPrison;
	integer InputZipPOBox;
	integer InputZipCorpMil;
	integer DoNotMail;
	integer historydate;
	integer DID;
	integer FNamePop;
	integer LNamePop;
	integer AddrPop;
	integer SSNLength;
	integer DOBPop;
	integer EmailPop;
	integer IPAddrPop;
	integer HPhnPop;
END;

layout_res mk_matches(layout_lia_30 le, layout_lia_30 ri) := TRANSFORM
	self.seq                             :=(integer)(le.seq                              != ri.seq);
	self.AccountNumber                   :=(integer)(le.AccountNumber                    != ri.AccountNumber);
	self.AgeOldestRecord                 :=(integer)(le.AgeOldestRecord                  != ri.AgeOldestRecord);
	self.AgeNewestRecord                 :=(integer)(le.AgeNewestRecord                  != ri.AgeNewestRecord);
	self.RecentUpdate                    :=(integer)(le.RecentUpdate                     != ri.RecentUpdate);
	self.SrcsConfirmIDAddrCount          :=(integer)(le.SrcsConfirmIDAddrCount           != ri.SrcsConfirmIDAddrCount);
	self.CreditBureauRecord              :=(integer)(le.CreditBureauRecord               != ri.CreditBureauRecord);
	self.InvalidSSN                      :=(integer)(le.InvalidSSN                       != ri.InvalidSSN);
	self.InvalidAddr                     :=(integer)(le.InvalidAddr                      != ri.InvalidAddr);
	self.InvalidPhone                    :=(integer)(le.InvalidPhone                     != ri.InvalidPhone);
	self.VerificationFailure             :=(integer)(le.VerificationFailure              != ri.VerificationFailure);
	self.SSNNotFound                     :=(integer)(le.SSNNotFound                      != ri.SSNNotFound);
	self.SSNFoundOther                   :=(integer)(le.SSNFoundOther                    != ri.SSNFoundOther);
	self.VerifiedName                    :=(integer)(le.VerifiedName                     != ri.VerifiedName);
	self.VerifiedSSN                     :=(integer)(le.VerifiedSSN                      != ri.VerifiedSSN);
	self.VerifiedPhone                   :=(integer)(le.VerifiedPhone                    != ri.VerifiedPhone);
	self.VerifiedPhoneFullName           :=(integer)(le.VerifiedPhoneFullName            != ri.VerifiedPhoneFullName);
	self.VerifiedPhoneLastName           :=(integer)(le.VerifiedPhoneLastName            != ri.VerifiedPhoneLastName);
	self.VerifiedAddress                 :=(integer)(le.VerifiedAddress                  != ri.VerifiedAddress);
	self.VerifiedDOB                     :=(integer)(le.VerifiedDOB                      != ri.VerifiedDOB);
	self.AgeRiskIndicator                :=(integer)(le.AgeRiskIndicator                 != ri.AgeRiskIndicator);
	self.SubjectSSNCount                 :=(integer)(le.SubjectSSNCount                  != ri.SubjectSSNCount);
	self.SubjectAddrCount                :=(integer)(le.SubjectAddrCount                 != ri.SubjectAddrCount);
	self.SubjectPhoneCount               :=(integer)(le.SubjectPhoneCount                != ri.SubjectPhoneCount);
	self.SubjectSSNRecentCount           :=(integer)(le.SubjectSSNRecentCount            != ri.SubjectSSNRecentCount);
	self.SubjectAddrRecentCount          :=(integer)(le.SubjectAddrRecentCount           != ri.SubjectAddrRecentCount);
	self.SubjectPhoneRecentCount         :=(integer)(le.SubjectPhoneRecentCount          != ri.SubjectPhoneRecentCount);
	self.SSNIdentitiesCount              :=(integer)(le.SSNIdentitiesCount               != ri.SSNIdentitiesCount);
	self.SSNAddrCount                    :=(integer)(le.SSNAddrCount                     != ri.SSNAddrCount);
	self.SSNIdentitiesRecentCount        :=(integer)(le.SSNIdentitiesRecentCount         != ri.SSNIdentitiesRecentCount);
	self.SSNAddrRecentCount              :=(integer)(le.SSNAddrRecentCount               != ri.SSNAddrRecentCount);
	self.InputAddrIdentitiesCount        :=(integer)(le.InputAddrIdentitiesCount         != ri.InputAddrIdentitiesCount);
	self.InputAddrSSNCount               :=(integer)(le.InputAddrSSNCount                != ri.InputAddrSSNCount);
	self.InputAddrPhoneCount             :=(integer)(le.InputAddrPhoneCount              != ri.InputAddrPhoneCount);
	self.InputAddrIdentitiesRecentCount  :=(integer)(le.InputAddrIdentitiesRecentCount   != ri.InputAddrIdentitiesRecentCount);
	self.InputAddrSSNRecentCount         :=(integer)(le.InputAddrSSNRecentCount          != ri.InputAddrSSNRecentCount);
	self.InputAddrPhoneRecentCount       :=(integer)(le.InputAddrPhoneRecentCount        != ri.InputAddrPhoneRecentCount);
	self.PhoneIdentitiesCount            :=(integer)(le.PhoneIdentitiesCount             != ri.PhoneIdentitiesCount);
	self.PhoneIdentitiesRecentCount      :=(integer)(le.PhoneIdentitiesRecentCount       != ri.PhoneIdentitiesRecentCount);
	self.PhoneOther                      :=(integer)(le.PhoneOther                       != ri.PhoneOther);
	self.SSNLastNameCount                :=(integer)(le.SSNLastNameCount                 != ri.SSNLastNameCount);
	self.SubjectLastNameCount            :=(integer)(le.SubjectLastNameCount             != ri.SubjectLastNameCount);
	self.LastNameChangeAge               :=(integer)(le.LastNameChangeAge                != ri.LastNameChangeAge);
	self.LastNameChangeCount01           :=(integer)(le.LastNameChangeCount01            != ri.LastNameChangeCount01);
	self.LastNameChangeCount03           :=(integer)(le.LastNameChangeCount03            != ri.LastNameChangeCount03);
	self.LastNameChangeCount06           :=(integer)(le.LastNameChangeCount06            != ri.LastNameChangeCount06);
	self.LastNameChangeCount12           :=(integer)(le.LastNameChangeCount12            != ri.LastNameChangeCount12);
	self.LastNameChangeCount24           :=(integer)(le.LastNameChangeCount24            != ri.LastNameChangeCount24);
	self.LastNameChangeCount36           :=(integer)(le.LastNameChangeCount36            != ri.LastNameChangeCount36);
	self.LastNameChangeCount60           :=(integer)(le.LastNameChangeCount60            != ri.LastNameChangeCount60);
	self.SFDUAddrIdentitiesCount         :=(integer)(le.SFDUAddrIdentitiesCount          != ri.SFDUAddrIdentitiesCount);
	self.SFDUAddrSSNCount                :=(integer)(le.SFDUAddrSSNCount                 != ri.SFDUAddrSSNCount);
	self.SSNDeceased                     :=(integer)(le.SSNDeceased                      != ri.SSNDeceased);
	self.SSNDateDeceased                 :=(integer)(le.SSNDateDeceased                  != ri.SSNDateDeceased);
	self.SSNIssued                       :=(integer)(le.SSNIssued                        != ri.SSNIssued);
	self.SSNRecent                       :=(integer)(le.SSNRecent                        != ri.SSNRecent);
	self.SSNLowIssueDate                 :=(integer)(le.SSNLowIssueDate                  != ri.SSNLowIssueDate);
	self.SSNHighIssueDate                :=(integer)(le.SSNHighIssueDate                 != ri.SSNHighIssueDate);
	self.SSNIssueState                   :=(integer)(le.SSNIssueState                    != ri.SSNIssueState);
	self.SSNNonUS                        :=(integer)(le.SSNNonUS                         != ri.SSNNonUS);
	self.SSNIssuedPriorDOB               :=(integer)(le.SSNIssuedPriorDOB                != ri.SSNIssuedPriorDOB);
	self.SSN3Years                       :=(integer)(le.SSN3Years                        != ri.SSN3Years);
	self.SSNAfter5                       :=(integer)(le.SSNAfter5                        != ri.SSNAfter5);
	self.SSNProblems                     :=(integer)(le.SSNProblems                      != ri.SSNProblems);
	self.RelativesCount                  :=(integer)(le.RelativesCount                   != ri.RelativesCount);
	self.RelativesBankruptcyCount        :=(integer)(le.RelativesBankruptcyCount         != ri.RelativesBankruptcyCount);
	self.RelativesFelonyCount            :=(integer)(le.RelativesFelonyCount             != ri.RelativesFelonyCount);
	self.RelativesPropOwnedCount         :=(integer)(le.RelativesPropOwnedCount          != ri.RelativesPropOwnedCount);
	self.RelativesPropOwnedTaxTotal      :=(integer)(le.RelativesPropOwnedTaxTotal       != ri.RelativesPropOwnedTaxTotal);
	self.RelativesDistanceClosest        :=(integer)(le.RelativesDistanceClosest         != ri.RelativesDistanceClosest);
	self.InputAddrAgeOldestRecord        :=(integer)(le.InputAddrAgeOldestRecord         != ri.InputAddrAgeOldestRecord);
	self.InputAddrAgeNewestRecord        :=(integer)(le.InputAddrAgeNewestRecord         != ri.InputAddrAgeNewestRecord);
	self.InputAddrLenOfRes               :=(integer)(le.InputAddrLenOfRes                != ri.InputAddrLenOfRes);
	self.InputAddrDwellType              :=(integer)(le.InputAddrDwellType               != ri.InputAddrDwellType);
	self.InputAddrLandUseCode            :=(integer)(le.InputAddrLandUseCode             != ri.InputAddrLandUseCode);
	self.InputAddrApplicantOwned         :=(integer)(le.InputAddrApplicantOwned          != ri.InputAddrApplicantOwned);
	self.InputAddrFamilyOwned            :=(integer)(le.InputAddrFamilyOwned             != ri.InputAddrFamilyOwned);
	self.InputAddrOccupantOwned          :=(integer)(le.InputAddrOccupantOwned           != ri.InputAddrOccupantOwned);
	self.InputAddrAgeLastSale            :=(integer)(le.InputAddrAgeLastSale             != ri.InputAddrAgeLastSale);
	self.InputAddrLastSalesPrice         :=(integer)(le.InputAddrLastSalesPrice          != ri.InputAddrLastSalesPrice);
	self.InputAddrNotPrimaryRes          :=(integer)(le.InputAddrNotPrimaryRes           != ri.InputAddrNotPrimaryRes);
	self.InputAddrActivePhoneList        :=(integer)(le.InputAddrActivePhoneList         != ri.InputAddrActivePhoneList);
	self.InputAddrActivePhoneNumber      :=(integer)(le.InputAddrActivePhoneNumber       != ri.InputAddrActivePhoneNumber);
	self.InputAddrTaxValue               :=(integer)(le.InputAddrTaxValue                != ri.InputAddrTaxValue);
	self.InputAddrTaxYr                  :=(integer)(le.InputAddrTaxYr                   != ri.InputAddrTaxYr);
	self.InputAddrTaxMarketValue         :=(integer)(le.InputAddrTaxMarketValue          != ri.InputAddrTaxMarketValue);
	self.InputAddrAVMTax                 :=(integer)(le.InputAddrAVMTax                  != ri.InputAddrAVMTax);
	self.InputAddrAVMSalesPrice          :=(integer)(le.InputAddrAVMSalesPrice           != ri.InputAddrAVMSalesPrice);
	self.InputAddrAVMHedonic             :=(integer)(le.InputAddrAVMHedonic              != ri.InputAddrAVMHedonic);
	self.InputAddrAVMValue               :=(integer)(le.InputAddrAVMValue                != ri.InputAddrAVMValue);
	self.InputAddrAVMConfidence          :=(integer)(le.InputAddrAVMConfidence           != ri.InputAddrAVMConfidence);
	self.InputAddrCountyIndex            :=(integer)(le.InputAddrCountyIndex             != ri.InputAddrCountyIndex);
	self.InputAddrTractIndex             :=(integer)(le.InputAddrTractIndex              != ri.InputAddrTractIndex);
	self.InputAddrBlockIndex             :=(integer)(le.InputAddrBlockIndex              != ri.InputAddrBlockIndex);
	self.InputAddrMedianIncome           :=(integer)(le.InputAddrMedianIncome            != ri.InputAddrMedianIncome);
	self.InputAddrMedianValue            :=(integer)(le.InputAddrMedianValue             != ri.InputAddrMedianValue);
	self.InputAddrMurderIndex            :=(integer)(le.InputAddrMurderIndex             != ri.InputAddrMurderIndex);
	self.InputAddrCarTheftIndex          :=(integer)(le.InputAddrCarTheftIndex           != ri.InputAddrCarTheftIndex);
	self.InputAddrBurglaryIndex          :=(integer)(le.InputAddrBurglaryIndex           != ri.InputAddrBurglaryIndex);
	self.InputAddrCrimeIndex             :=(integer)(le.InputAddrCrimeIndex              != ri.InputAddrCrimeIndex);
	self.CurrAddrAgeOldestRecord         :=(integer)(le.CurrAddrAgeOldestRecord          != ri.CurrAddrAgeOldestRecord);
	self.CurrAddrAgeNewestRecord         :=(integer)(le.CurrAddrAgeNewestRecord          != ri.CurrAddrAgeNewestRecord);
	self.CurrAddrLenOfRes                :=(integer)(le.CurrAddrLenOfRes                 != ri.CurrAddrLenOfRes);
	self.CurrAddrDwellType               :=(integer)(le.CurrAddrDwellType                != ri.CurrAddrDwellType);
	self.CurrAddrLandUseCode             :=(integer)(le.CurrAddrLandUseCode              != ri.CurrAddrLandUseCode);
	self.CurrAddrApplicantOwned          :=(integer)(le.CurrAddrApplicantOwned           != ri.CurrAddrApplicantOwned);
	self.CurrAddrFamilyOwned             :=(integer)(le.CurrAddrFamilyOwned              != ri.CurrAddrFamilyOwned);
	self.CurrAddrOccupantOwned           :=(integer)(le.CurrAddrOccupantOwned            != ri.CurrAddrOccupantOwned);
	self.CurrAddrAgeLastSale             :=(integer)(le.CurrAddrAgeLastSale              != ri.CurrAddrAgeLastSale);
	self.CurrAddrLastSalesPrice          :=(integer)(le.CurrAddrLastSalesPrice           != ri.CurrAddrLastSalesPrice);
	self.CurrAddrActivePhoneList         :=(integer)(le.CurrAddrActivePhoneList          != ri.CurrAddrActivePhoneList);
	self.CurrAddrActivePhoneNumber       :=(integer)(le.CurrAddrActivePhoneNumber        != ri.CurrAddrActivePhoneNumber);
	self.CurrAddrTaxValue                :=(integer)(le.CurrAddrTaxValue                 != ri.CurrAddrTaxValue);
	self.CurrAddrTaxYr                   :=(integer)(le.CurrAddrTaxYr                    != ri.CurrAddrTaxYr);
	self.CurrAddrTaxMarketValue          :=(integer)(le.CurrAddrTaxMarketValue           != ri.CurrAddrTaxMarketValue);
	self.CurrAddrAVMTax                  :=(integer)(le.CurrAddrAVMTax                   != ri.CurrAddrAVMTax);
	self.CurrAddrAVMSalesPrice           :=(integer)(le.CurrAddrAVMSalesPrice            != ri.CurrAddrAVMSalesPrice);
	self.CurrAddrAVMHedonic              :=(integer)(le.CurrAddrAVMHedonic               != ri.CurrAddrAVMHedonic);
	self.CurrAddrAVMValue                :=(integer)(le.CurrAddrAVMValue                 != ri.CurrAddrAVMValue);
	self.CurrAddrAVMConfidence           :=(integer)(le.CurrAddrAVMConfidence            != ri.CurrAddrAVMConfidence);
	self.CurrAddrCountyIndex             :=(integer)(le.CurrAddrCountyIndex              != ri.CurrAddrCountyIndex);
	self.CurrAddrTractIndex              :=(integer)(le.CurrAddrTractIndex               != ri.CurrAddrTractIndex);
	self.CurrAddrBlockIndex              :=(integer)(le.CurrAddrBlockIndex               != ri.CurrAddrBlockIndex);
	self.CurrAddrMedianIncome            :=(integer)(le.CurrAddrMedianIncome             != ri.CurrAddrMedianIncome);
	self.CurrAddrMedianValue             :=(integer)(le.CurrAddrMedianValue              != ri.CurrAddrMedianValue);
	self.CurrAddrMurderIndex             :=(integer)(le.CurrAddrMurderIndex              != ri.CurrAddrMurderIndex);
	self.CurrAddrCarTheftIndex           :=(integer)(le.CurrAddrCarTheftIndex            != ri.CurrAddrCarTheftIndex);
	self.CurrAddrBurglaryIndex           :=(integer)(le.CurrAddrBurglaryIndex            != ri.CurrAddrBurglaryIndex);
	self.CurrAddrCrimeIndex              :=(integer)(le.CurrAddrCrimeIndex               != ri.CurrAddrCrimeIndex);
	self.PrevAddrAgeOldestRecord         :=(integer)(le.PrevAddrAgeOldestRecord          != ri.PrevAddrAgeOldestRecord);
	self.PrevAddrAgeNewestRecord         :=(integer)(le.PrevAddrAgeNewestRecord          != ri.PrevAddrAgeNewestRecord);
	self.PrevAddrLenOfRes                :=(integer)(le.PrevAddrLenOfRes                 != ri.PrevAddrLenOfRes);
	self.PrevAddrDwellType               :=(integer)(le.PrevAddrDwellType                != ri.PrevAddrDwellType);
	self.PrevAddrLandUseCode             :=(integer)(le.PrevAddrLandUseCode              != ri.PrevAddrLandUseCode);
	self.PrevAddrApplicantOwned          :=(integer)(le.PrevAddrApplicantOwned           != ri.PrevAddrApplicantOwned);
	self.PrevAddrFamilyOwned             :=(integer)(le.PrevAddrFamilyOwned              != ri.PrevAddrFamilyOwned);
	self.PrevAddrOccupantOwned           :=(integer)(le.PrevAddrOccupantOwned            != ri.PrevAddrOccupantOwned);
	self.PrevAddrAgeLastSale             :=(integer)(le.PrevAddrAgeLastSale              != ri.PrevAddrAgeLastSale);
	self.PrevAddrLastSalesPrice          :=(integer)(le.PrevAddrLastSalesPrice           != ri.PrevAddrLastSalesPrice);
	self.PrevAddrActivePhoneList         :=(integer)(le.PrevAddrActivePhoneList          != ri.PrevAddrActivePhoneList);
	self.PrevAddrActivePhoneNumber       :=(integer)(le.PrevAddrActivePhoneNumber        != ri.PrevAddrActivePhoneNumber);
	self.PrevAddrTaxValue                :=(integer)(le.PrevAddrTaxValue                 != ri.PrevAddrTaxValue);
	self.PrevAddrTaxYr                   :=(integer)(le.PrevAddrTaxYr                    != ri.PrevAddrTaxYr);
	self.PrevAddrTaxMarketValue          :=(integer)(le.PrevAddrTaxMarketValue           != ri.PrevAddrTaxMarketValue);
	self.PrevAddrAVMTax                  :=(integer)(le.PrevAddrAVMTax                   != ri.PrevAddrAVMTax);
	self.PrevAddrAVMSalesPrice           :=(integer)(le.PrevAddrAVMSalesPrice            != ri.PrevAddrAVMSalesPrice);
	self.PrevAddrAVMHedonic              :=(integer)(le.PrevAddrAVMHedonic               != ri.PrevAddrAVMHedonic);
	self.PrevAddrAVMValue                :=(integer)(le.PrevAddrAVMValue                 != ri.PrevAddrAVMValue);
	self.PrevAddrAVMConfidence           :=(integer)(le.PrevAddrAVMConfidence            != ri.PrevAddrAVMConfidence);
	self.PrevAddrCountyIndex             :=(integer)(le.PrevAddrCountyIndex              != ri.PrevAddrCountyIndex);
	self.PrevAddrTractIndex              :=(integer)(le.PrevAddrTractIndex               != ri.PrevAddrTractIndex);
	self.PrevAddrBlockIndex              :=(integer)(le.PrevAddrBlockIndex               != ri.PrevAddrBlockIndex);
	self.PrevAddrMedianIncome            :=(integer)(le.PrevAddrMedianIncome             != ri.PrevAddrMedianIncome);
	self.PrevAddrMedianValue             :=(integer)(le.PrevAddrMedianValue              != ri.PrevAddrMedianValue);
	self.PrevAddrMurderIndex             :=(integer)(le.PrevAddrMurderIndex              != ri.PrevAddrMurderIndex);
	self.PrevAddrCarTheftIndex           :=(integer)(le.PrevAddrCarTheftIndex            != ri.PrevAddrCarTheftIndex);
	self.PrevAddrBurglaryIndex           :=(integer)(le.PrevAddrBurglaryIndex            != ri.PrevAddrBurglaryIndex);
	self.PrevAddrCrimeIndex              :=(integer)(le.PrevAddrCrimeIndex               != ri.PrevAddrCrimeIndex);
	self.InputCurrAddrMatch              :=(integer)(le.InputCurrAddrMatch               != ri.InputCurrAddrMatch);
	self.InputCurrAddrDistance           :=(integer)(le.InputCurrAddrDistance            != ri.InputCurrAddrDistance);
	self.InputCurrAddrStateDiff          :=(integer)(le.InputCurrAddrStateDiff           != ri.InputCurrAddrStateDiff);
	self.InputCurrAddrTaxDiff            :=(integer)(le.InputCurrAddrTaxDiff             != ri.InputCurrAddrTaxDiff);
	self.InputCurrAddrIncomeDiff         :=(integer)(le.InputCurrAddrIncomeDiff          != ri.InputCurrAddrIncomeDiff);
	self.InputCurrAddrValueDiff          :=(integer)(le.InputCurrAddrValueDiff           != ri.InputCurrAddrValueDiff);
	self.InputCurrAddrCrimeDiff          :=(integer)(le.InputCurrAddrCrimeDiff           != ri.InputCurrAddrCrimeDiff);
	self.InputCurrEconTrajectory         :=(integer)(le.InputCurrEconTrajectory          != ri.InputCurrEconTrajectory);
	self.InputPrevAddrMatch              :=(integer)(le.InputPrevAddrMatch               != ri.InputPrevAddrMatch);
	self.CurrPrevAddrDistance            :=(integer)(le.CurrPrevAddrDistance             != ri.CurrPrevAddrDistance);
	self.CurrPrevAddrStateDiff           :=(integer)(le.CurrPrevAddrStateDiff            != ri.CurrPrevAddrStateDiff);
	self.CurrPrevAddrTaxDiff             :=(integer)(le.CurrPrevAddrTaxDiff              != ri.CurrPrevAddrTaxDiff);
	self.CurrPrevAddrIncomeDiff          :=(integer)(le.CurrPrevAddrIncomeDiff           != ri.CurrPrevAddrIncomeDiff);
	self.CurrPrevAddrValueDiff           :=(integer)(le.CurrPrevAddrValueDiff            != ri.CurrPrevAddrValueDiff);
	self.CurrPrevAddrCrimeDiff           :=(integer)(le.CurrPrevAddrCrimeDiff            != ri.CurrPrevAddrCrimeDiff);
	self.PrevCurrEconTrajectory          :=(integer)(le.PrevCurrEconTrajectory           != ri.PrevCurrEconTrajectory);
	self.EducationAttendedCollege        :=(integer)(le.EducationAttendedCollege         != ri.EducationAttendedCollege);
	self.EducationProgram2Yr             :=(integer)(le.EducationProgram2Yr              != ri.EducationProgram2Yr);
	self.EducationProgram4Yr             :=(integer)(le.EducationProgram4Yr              != ri.EducationProgram4Yr);
	self.EducationProgramGraduate        :=(integer)(le.EducationProgramGraduate         != ri.EducationProgramGraduate);
	self.EducationInstitutionPrivate     :=(integer)(le.EducationInstitutionPrivate      != ri.EducationInstitutionPrivate);
	self.EducationInstitutionRating      :=(integer)(le.EducationInstitutionRating       != ri.EducationInstitutionRating);
	self.EducationFieldofStudyType       :=(integer)(le.EducationFieldofStudyType        != ri.EducationFieldofStudyType);
	self.AddrStability                   :=(integer)(le.AddrStability                    != ri.AddrStability);
	self.StatusMostRecent                :=(integer)(le.StatusMostRecent                 != ri.StatusMostRecent);
	self.StatusPrevious                  :=(integer)(le.StatusPrevious                   != ri.StatusPrevious);
	self.StatusNextPrevious              :=(integer)(le.StatusNextPrevious               != ri.StatusNextPrevious);
	self.AddrChangeCount01               :=(integer)(le.AddrChangeCount01                != ri.AddrChangeCount01);
	self.AddrChangeCount03               :=(integer)(le.AddrChangeCount03                != ri.AddrChangeCount03);
	self.AddrChangeCount06               :=(integer)(le.AddrChangeCount06                != ri.AddrChangeCount06);
	self.AddrChangeCount12               :=(integer)(le.AddrChangeCount12                != ri.AddrChangeCount12);
	self.AddrChangeCount24               :=(integer)(le.AddrChangeCount24                != ri.AddrChangeCount24);
	self.AddrChangeCount36               :=(integer)(le.AddrChangeCount36                != ri.AddrChangeCount36);
	self.AddrChangeCount60               :=(integer)(le.AddrChangeCount60                != ri.AddrChangeCount60);
	self.PredictedAnnualIncome           :=(integer)(le.PredictedAnnualIncome            != ri.PredictedAnnualIncome);
	self.PropOwnedCount                  :=(integer)(le.PropOwnedCount                   != ri.PropOwnedCount);
	self.PropOwnedTaxTotal               :=(integer)(le.PropOwnedTaxTotal                != ri.PropOwnedTaxTotal);
	self.PropOwnedHistoricalCount        :=(integer)(le.PropOwnedHistoricalCount         != ri.PropOwnedHistoricalCount);
	self.PropAgeOldestPurchase           :=(integer)(le.PropAgeOldestPurchase            != ri.PropAgeOldestPurchase);
	self.PropAgeNewestPurchase           :=(integer)(le.PropAgeNewestPurchase            != ri.PropAgeNewestPurchase);
	self.PropAgeNewestSale               :=(integer)(le.PropAgeNewestSale                != ri.PropAgeNewestSale);
	self.PropNewestSalePurchaseIndex     :=(integer)(le.PropNewestSalePurchaseIndex      != ri.PropNewestSalePurchaseIndex);
	self.PropPurchasedCount01            :=(integer)(le.PropPurchasedCount01             != ri.PropPurchasedCount01);
	self.PropPurchasedCount03            :=(integer)(le.PropPurchasedCount03             != ri.PropPurchasedCount03);
	self.PropPurchasedCount06            :=(integer)(le.PropPurchasedCount06             != ri.PropPurchasedCount06);
	self.PropPurchasedCount12            :=(integer)(le.PropPurchasedCount12             != ri.PropPurchasedCount12);
	self.PropPurchasedCount24            :=(integer)(le.PropPurchasedCount24             != ri.PropPurchasedCount24);
	self.PropPurchasedCount36            :=(integer)(le.PropPurchasedCount36             != ri.PropPurchasedCount36);
	self.PropPurchasedCount60            :=(integer)(le.PropPurchasedCount60             != ri.PropPurchasedCount60);
	self.PropSoldCount01                 :=(integer)(le.PropSoldCount01                  != ri.PropSoldCount01);
	self.PropSoldCount03                 :=(integer)(le.PropSoldCount03                  != ri.PropSoldCount03);
	self.PropSoldCount06                 :=(integer)(le.PropSoldCount06                  != ri.PropSoldCount06);
	self.PropSoldCount12                 :=(integer)(le.PropSoldCount12                  != ri.PropSoldCount12);
	self.PropSoldCount24                 :=(integer)(le.PropSoldCount24                  != ri.PropSoldCount24);
	self.PropSoldCount36                 :=(integer)(le.PropSoldCount36                  != ri.PropSoldCount36);
	self.PropSoldCount60                 :=(integer)(le.PropSoldCount60                  != ri.PropSoldCount60);
	self.WatercraftCount                 :=(integer)(le.WatercraftCount                  != ri.WatercraftCount);
	self.WatercraftCount01               :=(integer)(le.WatercraftCount01                != ri.WatercraftCount01);
	self.WatercraftCount03               :=(integer)(le.WatercraftCount03                != ri.WatercraftCount03);
	self.WatercraftCount06               :=(integer)(le.WatercraftCount06                != ri.WatercraftCount06);
	self.WatercraftCount12               :=(integer)(le.WatercraftCount12                != ri.WatercraftCount12);
	self.WatercraftCount24               :=(integer)(le.WatercraftCount24                != ri.WatercraftCount24);
	self.WatercraftCount36               :=(integer)(le.WatercraftCount36                != ri.WatercraftCount36);
	self.WatercraftCount60               :=(integer)(le.WatercraftCount60                != ri.WatercraftCount60);
	self.AircraftCount                   :=(integer)(le.AircraftCount                    != ri.AircraftCount);
	self.AircraftCount01                 :=(integer)(le.AircraftCount01                  != ri.AircraftCount01);
	self.AircraftCount03                 :=(integer)(le.AircraftCount03                  != ri.AircraftCount03);
	self.AircraftCount06                 :=(integer)(le.AircraftCount06                  != ri.AircraftCount06);
	self.AircraftCount12                 :=(integer)(le.AircraftCount12                  != ri.AircraftCount12);
	self.AircraftCount24                 :=(integer)(le.AircraftCount24                  != ri.AircraftCount24);
	self.AircraftCount36                 :=(integer)(le.AircraftCount36                  != ri.AircraftCount36);
	self.AircraftCount60                 :=(integer)(le.AircraftCount60                  != ri.AircraftCount60);
	self.WealthIndex                     :=(integer)(le.WealthIndex                      != ri.WealthIndex);
	self.SubPrimeSolicitedCount          :=(integer)(le.SubPrimeSolicitedCount           != ri.SubPrimeSolicitedCount);
	self.SubPrimeSolicitedCount01        :=(integer)(le.SubPrimeSolicitedCount01         != ri.SubPrimeSolicitedCount01);
	self.SubPrimeSolicitedCount03        :=(integer)(le.SubPrimeSolicitedCount03         != ri.SubPrimeSolicitedCount03);
	self.SubPrimeSolicitedCount06        :=(integer)(le.SubPrimeSolicitedCount06         != ri.SubPrimeSolicitedCount06);
	self.SubPrimeSolicitedCount12        :=(integer)(le.SubPrimeSolicitedCount12         != ri.SubPrimeSolicitedCount12);
	self.SubPrimeSolicitedCount24        :=(integer)(le.SubPrimeSolicitedCount24         != ri.SubPrimeSolicitedCount24);
	self.SubPrimeSolicitedCount36        :=(integer)(le.SubPrimeSolicitedCount36         != ri.SubPrimeSolicitedCount36);
	self.SubPrimeSolicitedCount60        :=(integer)(le.SubPrimeSolicitedCount60         != ri.SubPrimeSolicitedCount60);
	self.DerogSeverityIndex              :=(integer)(le.DerogSeverityIndex               != ri.DerogSeverityIndex);
	self.DerogCount                      :=(integer)(le.DerogCount                       != ri.DerogCount);
	self.DerogAge                        :=(integer)(le.DerogAge                         != ri.DerogAge);
	self.FelonyCount                     :=(integer)(le.FelonyCount                      != ri.FelonyCount);
	self.FelonyAge                       :=(integer)(le.FelonyAge                        != ri.FelonyAge);
	self.FelonyCount01                   :=(integer)(le.FelonyCount01                    != ri.FelonyCount01);
	self.FelonyCount03                   :=(integer)(le.FelonyCount03                    != ri.FelonyCount03);
	self.FelonyCount06                   :=(integer)(le.FelonyCount06                    != ri.FelonyCount06);
	self.FelonyCount12                   :=(integer)(le.FelonyCount12                    != ri.FelonyCount12);
	self.FelonyCount24                   :=(integer)(le.FelonyCount24                    != ri.FelonyCount24);
	self.FelonyCount36                   :=(integer)(le.FelonyCount36                    != ri.FelonyCount36);
	self.FelonyCount60                   :=(integer)(le.FelonyCount60                    != ri.FelonyCount60);
	self.ArrestCount                     :=(integer)(le.ArrestCount                      != ri.ArrestCount);
	self.ArrestAge                       :=(integer)(le.ArrestAge                        != ri.ArrestAge);
	self.ArrestCount01                   :=(integer)(le.ArrestCount01                    != ri.ArrestCount01);
	self.ArrestCount03                   :=(integer)(le.ArrestCount03                    != ri.ArrestCount03);
	self.ArrestCount06                   :=(integer)(le.ArrestCount06                    != ri.ArrestCount06);
	self.ArrestCount12                   :=(integer)(le.ArrestCount12                    != ri.ArrestCount12);
	self.ArrestCount24                   :=(integer)(le.ArrestCount24                    != ri.ArrestCount24);
	self.ArrestCount36                   :=(integer)(le.ArrestCount36                    != ri.ArrestCount36);
	self.ArrestCount60                   :=(integer)(le.ArrestCount60                    != ri.ArrestCount60);
	self.LienCount                       :=(integer)(le.LienCount                        != ri.LienCount);
	self.LienFiledCount                  :=(integer)(le.LienFiledCount                   != ri.LienFiledCount);
	self.LienFiledAge                    :=(integer)(le.LienFiledAge                     != ri.LienFiledAge);
	self.LienFiledCount01                :=(integer)(le.LienFiledCount01                 != ri.LienFiledCount01);
	self.LienFiledCount03                :=(integer)(le.LienFiledCount03                 != ri.LienFiledCount03);
	self.LienFiledCount06                :=(integer)(le.LienFiledCount06                 != ri.LienFiledCount06);
	self.LienFiledCount12                :=(integer)(le.LienFiledCount12                 != ri.LienFiledCount12);
	self.LienFiledCount24                :=(integer)(le.LienFiledCount24                 != ri.LienFiledCount24);
	self.LienFiledCount36                :=(integer)(le.LienFiledCount36                 != ri.LienFiledCount36);
	self.LienFiledCount60                :=(integer)(le.LienFiledCount60                 != ri.LienFiledCount60);
	self.LienReleasedCount               :=(integer)(le.LienReleasedCount                != ri.LienReleasedCount);
	self.LienReleasedAge                 :=(integer)(le.LienReleasedAge                  != ri.LienReleasedAge);
	self.LienReleasedCount01             :=(integer)(le.LienReleasedCount01              != ri.LienReleasedCount01);
	self.LienReleasedCount03             :=(integer)(le.LienReleasedCount03              != ri.LienReleasedCount03);
	self.LienReleasedCount06             :=(integer)(le.LienReleasedCount06              != ri.LienReleasedCount06);
	self.LienReleasedCount12             :=(integer)(le.LienReleasedCount12              != ri.LienReleasedCount12);
	self.LienReleasedCount24             :=(integer)(le.LienReleasedCount24              != ri.LienReleasedCount24);
	self.LienReleasedCount36             :=(integer)(le.LienReleasedCount36              != ri.LienReleasedCount36);
	self.LienReleasedCount60             :=(integer)(le.LienReleasedCount60              != ri.LienReleasedCount60);
	self.BankruptcyCount                 :=(integer)(le.BankruptcyCount                  != ri.BankruptcyCount);
	self.BankruptcyAge                   :=(integer)(le.BankruptcyAge                    != ri.BankruptcyAge);
	self.BankruptcyType                  :=(integer)(le.BankruptcyType                   != ri.BankruptcyType);
	self.BankruptcyStatus                :=(integer)(le.BankruptcyStatus                 != ri.BankruptcyStatus);
	self.BankruptcyCount01               :=(integer)(le.BankruptcyCount01                != ri.BankruptcyCount01);
	self.BankruptcyCount03               :=(integer)(le.BankruptcyCount03                != ri.BankruptcyCount03);
	self.BankruptcyCount06               :=(integer)(le.BankruptcyCount06                != ri.BankruptcyCount06);
	self.BankruptcyCount12               :=(integer)(le.BankruptcyCount12                != ri.BankruptcyCount12);
	self.BankruptcyCount24               :=(integer)(le.BankruptcyCount24                != ri.BankruptcyCount24);
	self.BankruptcyCount36               :=(integer)(le.BankruptcyCount36                != ri.BankruptcyCount36);
	self.BankruptcyCount60               :=(integer)(le.BankruptcyCount60                != ri.BankruptcyCount60);
	self.EvictionCount                   :=(integer)(le.EvictionCount                    != ri.EvictionCount);
	self.EvictionAge                     :=(integer)(le.EvictionAge                      != ri.EvictionAge);
	self.EvictionCount01                 :=(integer)(le.EvictionCount01                  != ri.EvictionCount01);
	self.EvictionCount03                 :=(integer)(le.EvictionCount03                  != ri.EvictionCount03);
	self.EvictionCount06                 :=(integer)(le.EvictionCount06                  != ri.EvictionCount06);
	self.EvictionCount12                 :=(integer)(le.EvictionCount12                  != ri.EvictionCount12);
	self.EvictionCount24                 :=(integer)(le.EvictionCount24                  != ri.EvictionCount24);
	self.EvictionCount36                 :=(integer)(le.EvictionCount36                  != ri.EvictionCount36);
	self.EvictionCount60                 :=(integer)(le.EvictionCount60                  != ri.EvictionCount60);
	self.NonDerogCount                   :=(integer)(le.NonDerogCount                    != ri.NonDerogCount);
	self.NonDerogCount01                 :=(integer)(le.NonDerogCount01                  != ri.NonDerogCount01);
	self.NonDerogCount03                 :=(integer)(le.NonDerogCount03                  != ri.NonDerogCount03);
	self.NonDerogCount06                 :=(integer)(le.NonDerogCount06                  != ri.NonDerogCount06);
	self.NonDerogCount12                 :=(integer)(le.NonDerogCount12                  != ri.NonDerogCount12);
	self.NonDerogCount24                 :=(integer)(le.NonDerogCount24                  != ri.NonDerogCount24);
	self.NonDerogCount36                 :=(integer)(le.NonDerogCount36                  != ri.NonDerogCount36);
	self.NonDerogCount60                 :=(integer)(le.NonDerogCount60                  != ri.NonDerogCount60);
	self.ProfLicCount                    :=(integer)(le.ProfLicCount                     != ri.ProfLicCount);
	self.ProfLicAge                      :=(integer)(le.ProfLicAge                       != ri.ProfLicAge);
	self.ProfLicTypeCategory             :=(integer)(le.ProfLicTypeCategory              != ri.ProfLicTypeCategory);
	self.ProfLicExpireDate               :=(integer)(le.ProfLicExpireDate                != ri.ProfLicExpireDate);
	self.ProfLicCount01                  :=(integer)(le.ProfLicCount01                   != ri.ProfLicCount01);
	self.ProfLicCount03                  :=(integer)(le.ProfLicCount03                   != ri.ProfLicCount03);
	self.ProfLicCount06                  :=(integer)(le.ProfLicCount06                   != ri.ProfLicCount06);
	self.ProfLicCount12                  :=(integer)(le.ProfLicCount12                   != ri.ProfLicCount12);
	self.ProfLicCount24                  :=(integer)(le.ProfLicCount24                   != ri.ProfLicCount24);
	self.ProfLicCount36                  :=(integer)(le.ProfLicCount36                   != ri.ProfLicCount36);
	self.ProfLicCount60                  :=(integer)(le.ProfLicCount60                   != ri.ProfLicCount60);
	self.ProfLicExpireCount01            :=(integer)(le.ProfLicExpireCount01             != ri.ProfLicExpireCount01);
	self.ProfLicExpireCount03            :=(integer)(le.ProfLicExpireCount03             != ri.ProfLicExpireCount03);
	self.ProfLicExpireCount06            :=(integer)(le.ProfLicExpireCount06             != ri.ProfLicExpireCount06);
	self.ProfLicExpireCount12            :=(integer)(le.ProfLicExpireCount12             != ri.ProfLicExpireCount12);
	self.ProfLicExpireCount24            :=(integer)(le.ProfLicExpireCount24             != ri.ProfLicExpireCount24);
	self.ProfLicExpireCount36            :=(integer)(le.ProfLicExpireCount36             != ri.ProfLicExpireCount36);
	self.ProfLicExpireCount60            :=(integer)(le.ProfLicExpireCount60             != ri.ProfLicExpireCount60);
	self.PRSearchCollectionCount         :=(integer)(le.PRSearchCollectionCount          != ri.PRSearchCollectionCount);
	self.PRSearchCollectionCount01       :=(integer)(le.PRSearchCollectionCount01        != ri.PRSearchCollectionCount01);
	self.PRSearchCollectionCount03       :=(integer)(le.PRSearchCollectionCount03        != ri.PRSearchCollectionCount03);
	self.PRSearchCollectionCount06       :=(integer)(le.PRSearchCollectionCount06        != ri.PRSearchCollectionCount06);
	self.PRSearchCollectionCount12       :=(integer)(le.PRSearchCollectionCount12        != ri.PRSearchCollectionCount12);
	self.PRSearchCollectionCount24       :=(integer)(le.PRSearchCollectionCount24        != ri.PRSearchCollectionCount24);
	self.PRSearchCollectionCount36       :=(integer)(le.PRSearchCollectionCount36        != ri.PRSearchCollectionCount36);
	self.PRSearchCollectionCount60       :=(integer)(le.PRSearchCollectionCount60        != ri.PRSearchCollectionCount60);
	self.PRSearchIDVFraudCount           :=(integer)(le.PRSearchIDVFraudCount            != ri.PRSearchIDVFraudCount);
	self.PRSearchIDVFraudCount01         :=(integer)(le.PRSearchIDVFraudCount01          != ri.PRSearchIDVFraudCount01);
	self.PRSearchIDVFraudCount03         :=(integer)(le.PRSearchIDVFraudCount03          != ri.PRSearchIDVFraudCount03);
	self.PRSearchIDVFraudCount06         :=(integer)(le.PRSearchIDVFraudCount06          != ri.PRSearchIDVFraudCount06);
	self.PRSearchIDVFraudCount12         :=(integer)(le.PRSearchIDVFraudCount12          != ri.PRSearchIDVFraudCount12);
	self.PRSearchIDVFraudCount24         :=(integer)(le.PRSearchIDVFraudCount24          != ri.PRSearchIDVFraudCount24);
	self.PRSearchIDVFraudCount36         :=(integer)(le.PRSearchIDVFraudCount36          != ri.PRSearchIDVFraudCount36);
	self.PRSearchIDVFraudCount60         :=(integer)(le.PRSearchIDVFraudCount60          != ri.PRSearchIDVFraudCount60);
	self.PRSearchOtherCount              :=(integer)(le.PRSearchOtherCount               != ri.PRSearchOtherCount);
	self.PRSearchOtherCount01            :=(integer)(le.PRSearchOtherCount01             != ri.PRSearchOtherCount01);
	self.PRSearchOtherCount03            :=(integer)(le.PRSearchOtherCount03             != ri.PRSearchOtherCount03);
	self.PRSearchOtherCount06            :=(integer)(le.PRSearchOtherCount06             != ri.PRSearchOtherCount06);
	self.PRSearchOtherCount12            :=(integer)(le.PRSearchOtherCount12             != ri.PRSearchOtherCount12);
	self.PRSearchOtherCount24            :=(integer)(le.PRSearchOtherCount24             != ri.PRSearchOtherCount24);
	self.PRSearchOtherCount36            :=(integer)(le.PRSearchOtherCount36             != ri.PRSearchOtherCount36);
	self.PRSearchOtherCount60            :=(integer)(le.PRSearchOtherCount60             != ri.PRSearchOtherCount60);
	self.InputPhoneStatus                :=(integer)(le.InputPhoneStatus                 != ri.InputPhoneStatus);
	self.InputPhonePager                 :=(integer)(le.InputPhonePager                  != ri.InputPhonePager);
	self.InputPhoneMobile                :=(integer)(le.InputPhoneMobile                 != ri.InputPhoneMobile);
	self.InputPhoneType                  :=(integer)(le.InputPhoneType                   != ri.InputPhoneType);
	self.InputPhoneServiceType           :=(integer)(le.InputPhoneServiceType            != ri.InputPhoneServiceType);
	self.InputAreaCodeChange             :=(integer)(le.InputAreaCodeChange              != ri.InputAreaCodeChange);
	self.PhoneEDAAgeOldestRecord         :=(integer)(le.PhoneEDAAgeOldestRecord          != ri.PhoneEDAAgeOldestRecord);
	self.PhoneEDAAgeNewestRecord         :=(integer)(le.PhoneEDAAgeNewestRecord          != ri.PhoneEDAAgeNewestRecord);
	self.PhoneOtherAgeOldestRecord       :=(integer)(le.PhoneOtherAgeOldestRecord        != ri.PhoneOtherAgeOldestRecord);
	self.PhoneOtherAgeNewestRecord       :=(integer)(le.PhoneOtherAgeNewestRecord        != ri.PhoneOtherAgeNewestRecord);
	self.InvalidPhoneZip                 :=(integer)(le.InvalidPhoneZip                  != ri.InvalidPhoneZip);
	self.InputPhoneAddrDist              :=(integer)(le.InputPhoneAddrDist               != ri.InputPhoneAddrDist);
	self.InputAddrSICCode                :=(integer)(le.InputAddrSICCode                 != ri.InputAddrSICCode);
	self.InputAddrValidation             :=(integer)(le.InputAddrValidation              != ri.InputAddrValidation);
	self.InputAddrErrorCode              :=(integer)(le.InputAddrErrorCode               != ri.InputAddrErrorCode);
	self.InputAddrHighRisk               :=(integer)(le.InputAddrHighRisk                != ri.InputAddrHighRisk);
	self.InputPhoneHighRisk              :=(integer)(le.InputPhoneHighRisk               != ri.InputPhoneHighRisk);
	self.InputAddrPrison                 :=(integer)(le.InputAddrPrison                  != ri.InputAddrPrison);
	self.CurrAddrPrison                  :=(integer)(le.CurrAddrPrison                   != ri.CurrAddrPrison);
	self.PrevAddrPrison                  :=(integer)(le.PrevAddrPrison                   != ri.PrevAddrPrison);
	self.HistoricalAddrPrison            :=(integer)(le.HistoricalAddrPrison             != ri.HistoricalAddrPrison);
	self.InputZipPOBox                   :=(integer)(le.InputZipPOBox                    != ri.InputZipPOBox);
	self.InputZipCorpMil                 :=(integer)(le.InputZipCorpMil                  != ri.InputZipCorpMil);
	self.DoNotMail                       :=(integer)(le.DoNotMail                        != ri.DoNotMail);
	self.historydate                     :=(integer)(le.historydate                      != ri.historydate);
	self.DID                             :=(integer)(le.DID                              != ri.DID);
	self.FNamePop                        :=(integer)(le.FNamePop                         != ri.FNamePop);
	self.LNamePop                        :=(integer)(le.LNamePop                         != ri.LNamePop);
	self.AddrPop                         :=(integer)(le.AddrPop                          != ri.AddrPop);
	self.SSNLength                       :=(integer)(le.SSNLength                        != ri.SSNLength);
	self.DOBPop                          :=(integer)(le.DOBPop                           != ri.DOBPop);
	self.EmailPop                        :=(integer)(le.EmailPop                         != ri.EmailPop);
	self.IPAddrPop                       :=(integer)(le.IPAddrPop                        != ri.IPAddrPop);
	self.HPhnPop                         :=(integer)(le.HPhnPop                          != ri.HPhnPop);
END;

res := JOIN (ds_original, ds_compare, LEFT.accountnumber=RIGHT.accountnumber, mk_matches(LEFT,RIGHT));
//output(res);

total := count(res);
seq                              := count(res(seq                              = 1));
AccountNumber                    := count(res(AccountNumber                    = 1));
AgeOldestRecord                  := count(res(AgeOldestRecord                  = 1));
AgeNewestRecord                  := count(res(AgeNewestRecord                  = 1));
RecentUpdate                     := count(res(RecentUpdate                     = 1));
SrcsConfirmIDAddrCount           := count(res(SrcsConfirmIDAddrCount           = 1));
CreditBureauRecord               := count(res(CreditBureauRecord               = 1));
InvalidSSN                       := count(res(InvalidSSN                       = 1));
InvalidAddr                      := count(res(InvalidAddr                      = 1));
InvalidPhone                     := count(res(InvalidPhone                     = 1));
VerificationFailure              := count(res(VerificationFailure              = 1));
SSNNotFound                      := count(res(SSNNotFound                      = 1));
SSNFoundOther                    := count(res(SSNFoundOther                    = 1));
VerifiedName                     := count(res(VerifiedName                     = 1));
VerifiedSSN                      := count(res(VerifiedSSN                      = 1));
VerifiedPhone                    := count(res(VerifiedPhone                    = 1));
VerifiedPhoneFullName            := count(res(VerifiedPhoneFullName            = 1));
VerifiedPhoneLastName            := count(res(VerifiedPhoneLastName            = 1));
VerifiedAddress                  := count(res(VerifiedAddress                  = 1));
VerifiedDOB                      := count(res(VerifiedDOB                      = 1));
AgeRiskIndicator                 := count(res(AgeRiskIndicator                 = 1));
SubjectSSNCount                  := count(res(SubjectSSNCount                  = 1));
SubjectAddrCount                 := count(res(SubjectAddrCount                 = 1));
SubjectPhoneCount                := count(res(SubjectPhoneCount                = 1));
SubjectSSNRecentCount            := count(res(SubjectSSNRecentCount            = 1));
SubjectAddrRecentCount           := count(res(SubjectAddrRecentCount           = 1));
SubjectPhoneRecentCount          := count(res(SubjectPhoneRecentCount          = 1));
SSNIdentitiesCount               := count(res(SSNIdentitiesCount               = 1));
SSNAddrCount                     := count(res(SSNAddrCount                     = 1));
SSNIdentitiesRecentCount         := count(res(SSNIdentitiesRecentCount         = 1));
SSNAddrRecentCount               := count(res(SSNAddrRecentCount               = 1));
InputAddrIdentitiesCount         := count(res(InputAddrIdentitiesCount         = 1));
InputAddrSSNCount                := count(res(InputAddrSSNCount                = 1));
InputAddrPhoneCount              := count(res(InputAddrPhoneCount              = 1));
InputAddrIdentitiesRecentCount   := count(res(InputAddrIdentitiesRecentCount   = 1));
InputAddrSSNRecentCount          := count(res(InputAddrSSNRecentCount          = 1));
InputAddrPhoneRecentCount        := count(res(InputAddrPhoneRecentCount        = 1));
PhoneIdentitiesCount             := count(res(PhoneIdentitiesCount             = 1));
PhoneIdentitiesRecentCount       := count(res(PhoneIdentitiesRecentCount       = 1));
PhoneOther                       := count(res(PhoneOther                       = 1));
SSNLastNameCount                 := count(res(SSNLastNameCount                 = 1));
SubjectLastNameCount             := count(res(SubjectLastNameCount             = 1));
LastNameChangeAge                := count(res(LastNameChangeAge                = 1));
LastNameChangeCount01            := count(res(LastNameChangeCount01            = 1));
LastNameChangeCount03            := count(res(LastNameChangeCount03            = 1));
LastNameChangeCount06            := count(res(LastNameChangeCount06            = 1));
LastNameChangeCount12            := count(res(LastNameChangeCount12            = 1));
LastNameChangeCount24            := count(res(LastNameChangeCount24            = 1));
LastNameChangeCount36            := count(res(LastNameChangeCount36            = 1));
LastNameChangeCount60            := count(res(LastNameChangeCount60            = 1));
SFDUAddrIdentitiesCount          := count(res(SFDUAddrIdentitiesCount          = 1));
SFDUAddrSSNCount                 := count(res(SFDUAddrSSNCount                 = 1));
SSNDeceased                      := count(res(SSNDeceased                      = 1));
SSNDateDeceased                  := count(res(SSNDateDeceased                  = 1));
SSNIssued                        := count(res(SSNIssued                        = 1));
SSNRecent                        := count(res(SSNRecent                        = 1));
SSNLowIssueDate                  := count(res(SSNLowIssueDate                  = 1));
SSNHighIssueDate                 := count(res(SSNHighIssueDate                 = 1));
SSNIssueState                    := count(res(SSNIssueState                    = 1));
SSNNonUS                         := count(res(SSNNonUS                         = 1));
SSNIssuedPriorDOB                := count(res(SSNIssuedPriorDOB                = 1));
SSN3Years                        := count(res(SSN3Years                        = 1));
SSNAfter5                        := count(res(SSNAfter5                        = 1));
SSNProblems                      := count(res(SSNProblems                      = 1));
RelativesCount                   := count(res(RelativesCount                   = 1));
RelativesBankruptcyCount         := count(res(RelativesBankruptcyCount         = 1));
RelativesFelonyCount             := count(res(RelativesFelonyCount             = 1));
RelativesPropOwnedCount          := count(res(RelativesPropOwnedCount          = 1));
RelativesPropOwnedTaxTotal       := count(res(RelativesPropOwnedTaxTotal       = 1));
RelativesDistanceClosest         := count(res(RelativesDistanceClosest         = 1));
InputAddrAgeOldestRecord         := count(res(InputAddrAgeOldestRecord         = 1));
InputAddrAgeNewestRecord         := count(res(InputAddrAgeNewestRecord         = 1));
InputAddrLenOfRes                := count(res(InputAddrLenOfRes                = 1));
InputAddrDwellType               := count(res(InputAddrDwellType               = 1));
InputAddrLandUseCode             := count(res(InputAddrLandUseCode             = 1));
InputAddrApplicantOwned          := count(res(InputAddrApplicantOwned          = 1));
InputAddrFamilyOwned             := count(res(InputAddrFamilyOwned             = 1));
InputAddrOccupantOwned           := count(res(InputAddrOccupantOwned           = 1));
InputAddrAgeLastSale             := count(res(InputAddrAgeLastSale             = 1));
InputAddrLastSalesPrice          := count(res(InputAddrLastSalesPrice          = 1));
InputAddrNotPrimaryRes           := count(res(InputAddrNotPrimaryRes           = 1));
InputAddrActivePhoneList         := count(res(InputAddrActivePhoneList         = 1));
InputAddrActivePhoneNumber       := count(res(InputAddrActivePhoneNumber       = 1));
InputAddrTaxValue                := count(res(InputAddrTaxValue                = 1));
InputAddrTaxYr                   := count(res(InputAddrTaxYr                   = 1));
InputAddrTaxMarketValue          := count(res(InputAddrTaxMarketValue          = 1));
InputAddrAVMTax                  := count(res(InputAddrAVMTax                  = 1));
InputAddrAVMSalesPrice           := count(res(InputAddrAVMSalesPrice           = 1));
InputAddrAVMHedonic              := count(res(InputAddrAVMHedonic              = 1));
InputAddrAVMValue                := count(res(InputAddrAVMValue                = 1));
InputAddrAVMConfidence           := count(res(InputAddrAVMConfidence           = 1));
InputAddrCountyIndex             := count(res(InputAddrCountyIndex             = 1));
InputAddrTractIndex              := count(res(InputAddrTractIndex              = 1));
InputAddrBlockIndex              := count(res(InputAddrBlockIndex              = 1));
InputAddrMedianIncome            := count(res(InputAddrMedianIncome            = 1));
InputAddrMedianValue             := count(res(InputAddrMedianValue             = 1));
InputAddrMurderIndex             := count(res(InputAddrMurderIndex             = 1));
InputAddrCarTheftIndex           := count(res(InputAddrCarTheftIndex           = 1));
InputAddrBurglaryIndex           := count(res(InputAddrBurglaryIndex           = 1));
InputAddrCrimeIndex              := count(res(InputAddrCrimeIndex              = 1));
CurrAddrAgeOldestRecord          := count(res(CurrAddrAgeOldestRecord          = 1));
CurrAddrAgeNewestRecord          := count(res(CurrAddrAgeNewestRecord          = 1));
CurrAddrLenOfRes                 := count(res(CurrAddrLenOfRes                 = 1));
CurrAddrDwellType                := count(res(CurrAddrDwellType                = 1));
CurrAddrLandUseCode              := count(res(CurrAddrLandUseCode              = 1));
CurrAddrApplicantOwned           := count(res(CurrAddrApplicantOwned           = 1));
CurrAddrFamilyOwned              := count(res(CurrAddrFamilyOwned              = 1));
CurrAddrOccupantOwned            := count(res(CurrAddrOccupantOwned            = 1));
CurrAddrAgeLastSale              := count(res(CurrAddrAgeLastSale              = 1));
CurrAddrLastSalesPrice           := count(res(CurrAddrLastSalesPrice           = 1));
CurrAddrActivePhoneList          := count(res(CurrAddrActivePhoneList          = 1));
CurrAddrActivePhoneNumber        := count(res(CurrAddrActivePhoneNumber        = 1));
CurrAddrTaxValue                 := count(res(CurrAddrTaxValue                 = 1));
CurrAddrTaxYr                    := count(res(CurrAddrTaxYr                    = 1));
CurrAddrTaxMarketValue           := count(res(CurrAddrTaxMarketValue           = 1));
CurrAddrAVMTax                   := count(res(CurrAddrAVMTax                   = 1));
CurrAddrAVMSalesPrice            := count(res(CurrAddrAVMSalesPrice            = 1));
CurrAddrAVMHedonic               := count(res(CurrAddrAVMHedonic               = 1));
CurrAddrAVMValue                 := count(res(CurrAddrAVMValue                 = 1));
CurrAddrAVMConfidence            := count(res(CurrAddrAVMConfidence            = 1));
CurrAddrCountyIndex              := count(res(CurrAddrCountyIndex              = 1));
CurrAddrTractIndex               := count(res(CurrAddrTractIndex               = 1));
CurrAddrBlockIndex               := count(res(CurrAddrBlockIndex               = 1));
CurrAddrMedianIncome             := count(res(CurrAddrMedianIncome             = 1));
CurrAddrMedianValue              := count(res(CurrAddrMedianValue              = 1));
CurrAddrMurderIndex              := count(res(CurrAddrMurderIndex              = 1));
CurrAddrCarTheftIndex            := count(res(CurrAddrCarTheftIndex            = 1));
CurrAddrBurglaryIndex            := count(res(CurrAddrBurglaryIndex            = 1));
CurrAddrCrimeIndex               := count(res(CurrAddrCrimeIndex               = 1));
PrevAddrAgeOldestRecord          := count(res(PrevAddrAgeOldestRecord          = 1));
PrevAddrAgeNewestRecord          := count(res(PrevAddrAgeNewestRecord          = 1));
PrevAddrLenOfRes                 := count(res(PrevAddrLenOfRes                 = 1));
PrevAddrDwellType                := count(res(PrevAddrDwellType                = 1));
PrevAddrLandUseCode              := count(res(PrevAddrLandUseCode              = 1));
PrevAddrApplicantOwned           := count(res(PrevAddrApplicantOwned           = 1));
PrevAddrFamilyOwned              := count(res(PrevAddrFamilyOwned              = 1));
PrevAddrOccupantOwned            := count(res(PrevAddrOccupantOwned            = 1));
PrevAddrAgeLastSale              := count(res(PrevAddrAgeLastSale              = 1));
PrevAddrLastSalesPrice           := count(res(PrevAddrLastSalesPrice           = 1));
PrevAddrActivePhoneList          := count(res(PrevAddrActivePhoneList          = 1));
PrevAddrActivePhoneNumber        := count(res(PrevAddrActivePhoneNumber        = 1));
PrevAddrTaxValue                 := count(res(PrevAddrTaxValue                 = 1));
PrevAddrTaxYr                    := count(res(PrevAddrTaxYr                    = 1));
PrevAddrTaxMarketValue           := count(res(PrevAddrTaxMarketValue           = 1));
PrevAddrAVMTax                   := count(res(PrevAddrAVMTax                   = 1));
PrevAddrAVMSalesPrice            := count(res(PrevAddrAVMSalesPrice            = 1));
PrevAddrAVMHedonic               := count(res(PrevAddrAVMHedonic               = 1));
PrevAddrAVMValue                 := count(res(PrevAddrAVMValue                 = 1));
PrevAddrAVMConfidence            := count(res(PrevAddrAVMConfidence            = 1));
PrevAddrCountyIndex              := count(res(PrevAddrCountyIndex              = 1));
PrevAddrTractIndex               := count(res(PrevAddrTractIndex               = 1));
PrevAddrBlockIndex               := count(res(PrevAddrBlockIndex               = 1));
PrevAddrMedianIncome             := count(res(PrevAddrMedianIncome             = 1));
PrevAddrMedianValue              := count(res(PrevAddrMedianValue              = 1));
PrevAddrMurderIndex              := count(res(PrevAddrMurderIndex              = 1));
PrevAddrCarTheftIndex            := count(res(PrevAddrCarTheftIndex            = 1));
PrevAddrBurglaryIndex            := count(res(PrevAddrBurglaryIndex            = 1));
PrevAddrCrimeIndex               := count(res(PrevAddrCrimeIndex               = 1));
InputCurrAddrMatch               := count(res(InputCurrAddrMatch               = 1));
InputCurrAddrDistance            := count(res(InputCurrAddrDistance            = 1));
InputCurrAddrStateDiff           := count(res(InputCurrAddrStateDiff           = 1));
InputCurrAddrTaxDiff             := count(res(InputCurrAddrTaxDiff             = 1));
InputCurrAddrIncomeDiff          := count(res(InputCurrAddrIncomeDiff          = 1));
InputCurrAddrValueDiff           := count(res(InputCurrAddrValueDiff           = 1));
InputCurrAddrCrimeDiff           := count(res(InputCurrAddrCrimeDiff           = 1));
InputCurrEconTrajectory          := count(res(InputCurrEconTrajectory          = 1));
InputPrevAddrMatch               := count(res(InputPrevAddrMatch               = 1));
CurrPrevAddrDistance             := count(res(CurrPrevAddrDistance             = 1));
CurrPrevAddrStateDiff            := count(res(CurrPrevAddrStateDiff            = 1));
CurrPrevAddrTaxDiff              := count(res(CurrPrevAddrTaxDiff              = 1));
CurrPrevAddrIncomeDiff           := count(res(CurrPrevAddrIncomeDiff           = 1));
CurrPrevAddrValueDiff            := count(res(CurrPrevAddrValueDiff            = 1));
CurrPrevAddrCrimeDiff            := count(res(CurrPrevAddrCrimeDiff            = 1));
PrevCurrEconTrajectory           := count(res(PrevCurrEconTrajectory           = 1));
EducationAttendedCollege         := count(res(EducationAttendedCollege         = 1));
EducationProgram2Yr              := count(res(EducationProgram2Yr              = 1));
EducationProgram4Yr              := count(res(EducationProgram4Yr              = 1));
EducationProgramGraduate         := count(res(EducationProgramGraduate         = 1));
EducationInstitutionPrivate      := count(res(EducationInstitutionPrivate      = 1));
EducationInstitutionRating       := count(res(EducationInstitutionRating       = 1));
EducationFieldofStudyType        := count(res(EducationFieldofStudyType        = 1));
AddrStability                    := count(res(AddrStability                    = 1));
StatusMostRecent                 := count(res(StatusMostRecent                 = 1));
StatusPrevious                   := count(res(StatusPrevious                   = 1));
StatusNextPrevious               := count(res(StatusNextPrevious               = 1));
AddrChangeCount01                := count(res(AddrChangeCount01                = 1));
AddrChangeCount03                := count(res(AddrChangeCount03                = 1));
AddrChangeCount06                := count(res(AddrChangeCount06                = 1));
AddrChangeCount12                := count(res(AddrChangeCount12                = 1));
AddrChangeCount24                := count(res(AddrChangeCount24                = 1));
AddrChangeCount36                := count(res(AddrChangeCount36                = 1));
AddrChangeCount60                := count(res(AddrChangeCount60                = 1));
PredictedAnnualIncome            := count(res(PredictedAnnualIncome            = 1));
PropOwnedCount                   := count(res(PropOwnedCount                   = 1));
PropOwnedTaxTotal                := count(res(PropOwnedTaxTotal                = 1));
PropOwnedHistoricalCount         := count(res(PropOwnedHistoricalCount         = 1));
PropAgeOldestPurchase            := count(res(PropAgeOldestPurchase            = 1));
PropAgeNewestPurchase            := count(res(PropAgeNewestPurchase            = 1));
PropAgeNewestSale                := count(res(PropAgeNewestSale                = 1));
PropNewestSalePurchaseIndex      := count(res(PropNewestSalePurchaseIndex      = 1));
PropPurchasedCount01             := count(res(PropPurchasedCount01             = 1));
PropPurchasedCount03             := count(res(PropPurchasedCount03             = 1));
PropPurchasedCount06             := count(res(PropPurchasedCount06             = 1));
PropPurchasedCount12             := count(res(PropPurchasedCount12             = 1));
PropPurchasedCount24             := count(res(PropPurchasedCount24             = 1));
PropPurchasedCount36             := count(res(PropPurchasedCount36             = 1));
PropPurchasedCount60             := count(res(PropPurchasedCount60             = 1));
PropSoldCount01                  := count(res(PropSoldCount01                  = 1));
PropSoldCount03                  := count(res(PropSoldCount03                  = 1));
PropSoldCount06                  := count(res(PropSoldCount06                  = 1));
PropSoldCount12                  := count(res(PropSoldCount12                  = 1));
PropSoldCount24                  := count(res(PropSoldCount24                  = 1));
PropSoldCount36                  := count(res(PropSoldCount36                  = 1));
PropSoldCount60                  := count(res(PropSoldCount60                  = 1));
WatercraftCount                  := count(res(WatercraftCount                  = 1));
WatercraftCount01                := count(res(WatercraftCount01                = 1));
WatercraftCount03                := count(res(WatercraftCount03                = 1));
WatercraftCount06                := count(res(WatercraftCount06                = 1));
WatercraftCount12                := count(res(WatercraftCount12                = 1));
WatercraftCount24                := count(res(WatercraftCount24                = 1));
WatercraftCount36                := count(res(WatercraftCount36                = 1));
WatercraftCount60                := count(res(WatercraftCount60                = 1));
AircraftCount                    := count(res(AircraftCount                    = 1));
AircraftCount01                  := count(res(AircraftCount01                  = 1));
AircraftCount03                  := count(res(AircraftCount03                  = 1));
AircraftCount06                  := count(res(AircraftCount06                  = 1));
AircraftCount12                  := count(res(AircraftCount12                  = 1));
AircraftCount24                  := count(res(AircraftCount24                  = 1));
AircraftCount36                  := count(res(AircraftCount36                  = 1));
AircraftCount60                  := count(res(AircraftCount60                  = 1));
WealthIndex                      := count(res(WealthIndex                      = 1));
SubPrimeSolicitedCount           := count(res(SubPrimeSolicitedCount           = 1));
SubPrimeSolicitedCount01         := count(res(SubPrimeSolicitedCount01         = 1));
SubPrimeSolicitedCount03         := count(res(SubPrimeSolicitedCount03         = 1));
SubPrimeSolicitedCount06         := count(res(SubPrimeSolicitedCount06         = 1));
SubPrimeSolicitedCount12         := count(res(SubPrimeSolicitedCount12         = 1));
SubPrimeSolicitedCount24         := count(res(SubPrimeSolicitedCount24         = 1));
SubPrimeSolicitedCount36         := count(res(SubPrimeSolicitedCount36         = 1));
SubPrimeSolicitedCount60         := count(res(SubPrimeSolicitedCount60         = 1));
DerogSeverityIndex               := count(res(DerogSeverityIndex               = 1));
DerogCount                       := count(res(DerogCount                       = 1));
DerogAge                         := count(res(DerogAge                         = 1));
FelonyCount                      := count(res(FelonyCount                      = 1));
FelonyAge                        := count(res(FelonyAge                        = 1));
FelonyCount01                    := count(res(FelonyCount01                    = 1));
FelonyCount03                    := count(res(FelonyCount03                    = 1));
FelonyCount06                    := count(res(FelonyCount06                    = 1));
FelonyCount12                    := count(res(FelonyCount12                    = 1));
FelonyCount24                    := count(res(FelonyCount24                    = 1));
FelonyCount36                    := count(res(FelonyCount36                    = 1));
FelonyCount60                    := count(res(FelonyCount60                    = 1));
ArrestCount                      := count(res(ArrestCount                      = 1));
ArrestAge                        := count(res(ArrestAge                        = 1));
ArrestCount01                    := count(res(ArrestCount01                    = 1));
ArrestCount03                    := count(res(ArrestCount03                    = 1));
ArrestCount06                    := count(res(ArrestCount06                    = 1));
ArrestCount12                    := count(res(ArrestCount12                    = 1));
ArrestCount24                    := count(res(ArrestCount24                    = 1));
ArrestCount36                    := count(res(ArrestCount36                    = 1));
ArrestCount60                    := count(res(ArrestCount60                    = 1));
LienCount                        := count(res(LienCount                        = 1));
LienFiledCount                   := count(res(LienFiledCount                   = 1));
LienFiledAge                     := count(res(LienFiledAge                     = 1));
LienFiledCount01                 := count(res(LienFiledCount01                 = 1));
LienFiledCount03                 := count(res(LienFiledCount03                 = 1));
LienFiledCount06                 := count(res(LienFiledCount06                 = 1));
LienFiledCount12                 := count(res(LienFiledCount12                 = 1));
LienFiledCount24                 := count(res(LienFiledCount24                 = 1));
LienFiledCount36                 := count(res(LienFiledCount36                 = 1));
LienFiledCount60                 := count(res(LienFiledCount60                 = 1));
LienReleasedCount                := count(res(LienReleasedCount                = 1));
LienReleasedAge                  := count(res(LienReleasedAge                  = 1));
LienReleasedCount01              := count(res(LienReleasedCount01              = 1));
LienReleasedCount03              := count(res(LienReleasedCount03              = 1));
LienReleasedCount06              := count(res(LienReleasedCount06              = 1));
LienReleasedCount12              := count(res(LienReleasedCount12              = 1));
LienReleasedCount24              := count(res(LienReleasedCount24              = 1));
LienReleasedCount36              := count(res(LienReleasedCount36              = 1));
LienReleasedCount60              := count(res(LienReleasedCount60              = 1));
BankruptcyCount                  := count(res(BankruptcyCount                  = 1));
BankruptcyAge                    := count(res(BankruptcyAge                    = 1));
BankruptcyType                   := count(res(BankruptcyType                   = 1));
BankruptcyStatus                 := count(res(BankruptcyStatus                 = 1));
BankruptcyCount01                := count(res(BankruptcyCount01                = 1));
BankruptcyCount03                := count(res(BankruptcyCount03                = 1));
BankruptcyCount06                := count(res(BankruptcyCount06                = 1));
BankruptcyCount12                := count(res(BankruptcyCount12                = 1));
BankruptcyCount24                := count(res(BankruptcyCount24                = 1));
BankruptcyCount36                := count(res(BankruptcyCount36                = 1));
BankruptcyCount60                := count(res(BankruptcyCount60                = 1));
EvictionCount                    := count(res(EvictionCount                    = 1));
EvictionAge                      := count(res(EvictionAge                      = 1));
EvictionCount01                  := count(res(EvictionCount01                  = 1));
EvictionCount03                  := count(res(EvictionCount03                  = 1));
EvictionCount06                  := count(res(EvictionCount06                  = 1));
EvictionCount12                  := count(res(EvictionCount12                  = 1));
EvictionCount24                  := count(res(EvictionCount24                  = 1));
EvictionCount36                  := count(res(EvictionCount36                  = 1));
EvictionCount60                  := count(res(EvictionCount60                  = 1));
NonDerogCount                    := count(res(NonDerogCount                    = 1));
NonDerogCount01                  := count(res(NonDerogCount01                  = 1));
NonDerogCount03                  := count(res(NonDerogCount03                  = 1));
NonDerogCount06                  := count(res(NonDerogCount06                  = 1));
NonDerogCount12                  := count(res(NonDerogCount12                  = 1));
NonDerogCount24                  := count(res(NonDerogCount24                  = 1));
NonDerogCount36                  := count(res(NonDerogCount36                  = 1));
NonDerogCount60                  := count(res(NonDerogCount60                  = 1));
ProfLicCount                     := count(res(ProfLicCount                     = 1));
ProfLicAge                       := count(res(ProfLicAge                       = 1));
ProfLicTypeCategory              := count(res(ProfLicTypeCategory              = 1));
ProfLicExpireDate                := count(res(ProfLicExpireDate                = 1));
ProfLicCount01                   := count(res(ProfLicCount01                   = 1));
ProfLicCount03                   := count(res(ProfLicCount03                   = 1));
ProfLicCount06                   := count(res(ProfLicCount06                   = 1));
ProfLicCount12                   := count(res(ProfLicCount12                   = 1));
ProfLicCount24                   := count(res(ProfLicCount24                   = 1));
ProfLicCount36                   := count(res(ProfLicCount36                   = 1));
ProfLicCount60                   := count(res(ProfLicCount60                   = 1));
ProfLicExpireCount01             := count(res(ProfLicExpireCount01             = 1));
ProfLicExpireCount03             := count(res(ProfLicExpireCount03             = 1));
ProfLicExpireCount06             := count(res(ProfLicExpireCount06             = 1));
ProfLicExpireCount12             := count(res(ProfLicExpireCount12             = 1));
ProfLicExpireCount24             := count(res(ProfLicExpireCount24             = 1));
ProfLicExpireCount36             := count(res(ProfLicExpireCount36             = 1));
ProfLicExpireCount60             := count(res(ProfLicExpireCount60             = 1));
PRSearchCollectionCount          := count(res(PRSearchCollectionCount          = 1));
PRSearchCollectionCount01        := count(res(PRSearchCollectionCount01        = 1));
PRSearchCollectionCount03        := count(res(PRSearchCollectionCount03        = 1));
PRSearchCollectionCount06        := count(res(PRSearchCollectionCount06        = 1));
PRSearchCollectionCount12        := count(res(PRSearchCollectionCount12        = 1));
PRSearchCollectionCount24        := count(res(PRSearchCollectionCount24        = 1));
PRSearchCollectionCount36        := count(res(PRSearchCollectionCount36        = 1));
PRSearchCollectionCount60        := count(res(PRSearchCollectionCount60        = 1));
PRSearchIDVFraudCount            := count(res(PRSearchIDVFraudCount            = 1));
PRSearchIDVFraudCount01          := count(res(PRSearchIDVFraudCount01          = 1));
PRSearchIDVFraudCount03          := count(res(PRSearchIDVFraudCount03          = 1));
PRSearchIDVFraudCount06          := count(res(PRSearchIDVFraudCount06          = 1));
PRSearchIDVFraudCount12          := count(res(PRSearchIDVFraudCount12          = 1));
PRSearchIDVFraudCount24          := count(res(PRSearchIDVFraudCount24          = 1));
PRSearchIDVFraudCount36          := count(res(PRSearchIDVFraudCount36          = 1));
PRSearchIDVFraudCount60          := count(res(PRSearchIDVFraudCount60          = 1));
PRSearchOtherCount               := count(res(PRSearchOtherCount               = 1));
PRSearchOtherCount01             := count(res(PRSearchOtherCount01             = 1));
PRSearchOtherCount03             := count(res(PRSearchOtherCount03             = 1));
PRSearchOtherCount06             := count(res(PRSearchOtherCount06             = 1));
PRSearchOtherCount12             := count(res(PRSearchOtherCount12             = 1));
PRSearchOtherCount24             := count(res(PRSearchOtherCount24             = 1));
PRSearchOtherCount36             := count(res(PRSearchOtherCount36             = 1));
PRSearchOtherCount60             := count(res(PRSearchOtherCount60             = 1));
InputPhoneStatus                 := count(res(InputPhoneStatus                 = 1));
InputPhonePager                  := count(res(InputPhonePager                  = 1));
InputPhoneMobile                 := count(res(InputPhoneMobile                 = 1));
InputPhoneType                   := count(res(InputPhoneType                   = 1));
InputPhoneServiceType            := count(res(InputPhoneServiceType            = 1));
InputAreaCodeChange              := count(res(InputAreaCodeChange              = 1));
PhoneEDAAgeOldestRecord          := count(res(PhoneEDAAgeOldestRecord          = 1));
PhoneEDAAgeNewestRecord          := count(res(PhoneEDAAgeNewestRecord          = 1));
PhoneOtherAgeOldestRecord        := count(res(PhoneOtherAgeOldestRecord        = 1));
PhoneOtherAgeNewestRecord        := count(res(PhoneOtherAgeNewestRecord        = 1));
InvalidPhoneZip                  := count(res(InvalidPhoneZip                  = 1));
InputPhoneAddrDist               := count(res(InputPhoneAddrDist               = 1));
InputAddrSICCode                 := count(res(InputAddrSICCode                 = 1));
InputAddrValidation              := count(res(InputAddrValidation              = 1));
InputAddrErrorCode               := count(res(InputAddrErrorCode               = 1));
InputAddrHighRisk                := count(res(InputAddrHighRisk                = 1));
InputPhoneHighRisk               := count(res(InputPhoneHighRisk               = 1));
InputAddrPrison                  := count(res(InputAddrPrison                  = 1));
CurrAddrPrison                   := count(res(CurrAddrPrison                   = 1));
PrevAddrPrison                   := count(res(PrevAddrPrison                   = 1));
HistoricalAddrPrison             := count(res(HistoricalAddrPrison             = 1));
InputZipPOBox                    := count(res(InputZipPOBox                    = 1));
InputZipCorpMil                  := count(res(InputZipCorpMil                  = 1));
DoNotMail                        := count(res(DoNotMail                        = 1));
historydate                      := count(res(historydate                      = 1));
DID                              := count(res(DID                              = 1));
FNamePop                         := count(res(FNamePop                         = 1));
LNamePop                         := count(res(LNamePop                         = 1));
AddrPop                          := count(res(AddrPop                          = 1));
SSNLength                        := count(res(SSNLength                        = 1));
DOBPop                           := count(res(DOBPop                           = 1));
EmailPop                         := count(res(EmailPop                         = 1));
IPAddrPop                        := count(res(IPAddrPop                        = 1));
HPhnPop                          := count(res(HPhnPop                          = 1));

summary_format := record
	total;
	seq;
	AccountNumber;
	AgeOldestRecord;
	AgeNewestRecord;
	RecentUpdate;
	SrcsConfirmIDAddrCount;
	CreditBureauRecord;
	InvalidSSN;
	InvalidAddr;
	InvalidPhone;
	VerificationFailure;
	SSNNotFound;
	SSNFoundOther;
	VerifiedName;
	VerifiedSSN;
	VerifiedPhone;
	VerifiedPhoneFullName;
	VerifiedPhoneLastName;
	VerifiedAddress;
	VerifiedDOB;
	AgeRiskIndicator;
	SubjectSSNCount;
	SubjectAddrCount;
	SubjectPhoneCount;
	SubjectSSNRecentCount;
	SubjectAddrRecentCount;
	SubjectPhoneRecentCount;
	SSNIdentitiesCount;
	SSNAddrCount;
	SSNIdentitiesRecentCount;
	SSNAddrRecentCount;
	InputAddrIdentitiesCount;
	InputAddrSSNCount;
	InputAddrPhoneCount;
	InputAddrIdentitiesRecentCount;
	InputAddrSSNRecentCount;
	InputAddrPhoneRecentCount;
	PhoneIdentitiesCount;
	PhoneIdentitiesRecentCount;
	PhoneOther;
	SSNLastNameCount;
	SubjectLastNameCount;
	LastNameChangeAge;
	LastNameChangeCount01;
	LastNameChangeCount03;
	LastNameChangeCount06;
	LastNameChangeCount12;
	LastNameChangeCount24;
	LastNameChangeCount36;
	LastNameChangeCount60;
	SFDUAddrIdentitiesCount;
	SFDUAddrSSNCount;
	SSNDeceased;
	SSNDateDeceased;
	SSNIssued;
	SSNRecent;
	SSNLowIssueDate;
	SSNHighIssueDate;
	SSNIssueState;
	SSNNonUS;
	SSNIssuedPriorDOB;
	SSN3Years;
	SSNAfter5;
	SSNProblems;
	RelativesCount;
	RelativesBankruptcyCount;
	RelativesFelonyCount;
	RelativesPropOwnedCount;
	RelativesPropOwnedTaxTotal;
	RelativesDistanceClosest;
	InputAddrAgeOldestRecord;
	InputAddrAgeNewestRecord;
	InputAddrLenOfRes;
	InputAddrDwellType;
	InputAddrLandUseCode;
	InputAddrApplicantOwned;
	InputAddrFamilyOwned;
	InputAddrOccupantOwned;
	InputAddrAgeLastSale;
	InputAddrLastSalesPrice;
	InputAddrNotPrimaryRes;
	InputAddrActivePhoneList;
	InputAddrActivePhoneNumber;
	InputAddrTaxValue;
	InputAddrTaxYr;
	InputAddrTaxMarketValue;
	InputAddrAVMTax;
	InputAddrAVMSalesPrice;
	InputAddrAVMHedonic;
	InputAddrAVMValue;
	InputAddrAVMConfidence;
	InputAddrCountyIndex;
	InputAddrTractIndex;
	InputAddrBlockIndex;
	InputAddrMedianIncome;
	InputAddrMedianValue;
	InputAddrMurderIndex;
	InputAddrCarTheftIndex;
	InputAddrBurglaryIndex;
	InputAddrCrimeIndex;
	CurrAddrAgeOldestRecord;
	CurrAddrAgeNewestRecord;
	CurrAddrLenOfRes;
	CurrAddrDwellType;
	CurrAddrLandUseCode;
	CurrAddrApplicantOwned;
	CurrAddrFamilyOwned;
	CurrAddrOccupantOwned;
	CurrAddrAgeLastSale;
	CurrAddrLastSalesPrice;
	CurrAddrActivePhoneList;
	CurrAddrActivePhoneNumber;
	CurrAddrTaxValue;
	CurrAddrTaxYr;
	CurrAddrTaxMarketValue;
	CurrAddrAVMTax;
	CurrAddrAVMSalesPrice;
	CurrAddrAVMHedonic;
	CurrAddrAVMValue;
	CurrAddrAVMConfidence;
	CurrAddrCountyIndex;
	CurrAddrTractIndex;
	CurrAddrBlockIndex;
	CurrAddrMedianIncome;
	CurrAddrMedianValue;
	CurrAddrMurderIndex;
	CurrAddrCarTheftIndex;
	CurrAddrBurglaryIndex;
	CurrAddrCrimeIndex;
	PrevAddrAgeOldestRecord;
	PrevAddrAgeNewestRecord;
	PrevAddrLenOfRes;
	PrevAddrDwellType;
	PrevAddrLandUseCode;
	PrevAddrApplicantOwned;
	PrevAddrFamilyOwned;
	PrevAddrOccupantOwned;
	PrevAddrAgeLastSale;
	PrevAddrLastSalesPrice;
	PrevAddrActivePhoneList;
	PrevAddrActivePhoneNumber;
	PrevAddrTaxValue;
	PrevAddrTaxYr;
	PrevAddrTaxMarketValue;
	PrevAddrAVMTax;
	PrevAddrAVMSalesPrice;
	PrevAddrAVMHedonic;
	PrevAddrAVMValue;
	PrevAddrAVMConfidence;
	PrevAddrCountyIndex;
	PrevAddrTractIndex;
	PrevAddrBlockIndex;
	PrevAddrMedianIncome;
	PrevAddrMedianValue;
	PrevAddrMurderIndex;
	PrevAddrCarTheftIndex;
	PrevAddrBurglaryIndex;
	PrevAddrCrimeIndex;
	InputCurrAddrMatch;
	InputCurrAddrDistance;
	InputCurrAddrStateDiff;
	InputCurrAddrTaxDiff;
	InputCurrAddrIncomeDiff;
	InputCurrAddrValueDiff;
	InputCurrAddrCrimeDiff;
	InputCurrEconTrajectory;
	InputPrevAddrMatch;
	CurrPrevAddrDistance;
	CurrPrevAddrStateDiff;
	CurrPrevAddrTaxDiff;
	CurrPrevAddrIncomeDiff;
	CurrPrevAddrValueDiff;
	CurrPrevAddrCrimeDiff;
	PrevCurrEconTrajectory;
	EducationAttendedCollege;
	EducationProgram2Yr;
	EducationProgram4Yr;
	EducationProgramGraduate;
	EducationInstitutionPrivate;
	EducationInstitutionRating;
	EducationFieldofStudyType;
	AddrStability;
	StatusMostRecent;
	StatusPrevious;
	StatusNextPrevious;
	AddrChangeCount01;
	AddrChangeCount03;
	AddrChangeCount06;
	AddrChangeCount12;
	AddrChangeCount24;
	AddrChangeCount36;
	AddrChangeCount60;
	PredictedAnnualIncome;
	PropOwnedCount;
	PropOwnedTaxTotal;
	PropOwnedHistoricalCount;
	PropAgeOldestPurchase;
	PropAgeNewestPurchase;
	PropAgeNewestSale;
	PropNewestSalePurchaseIndex;
	PropPurchasedCount01;
	PropPurchasedCount03;
	PropPurchasedCount06;
	PropPurchasedCount12;
	PropPurchasedCount24;
	PropPurchasedCount36;
	PropPurchasedCount60;
	PropSoldCount01;
	PropSoldCount03;
	PropSoldCount06;
	PropSoldCount12;
	PropSoldCount24;
	PropSoldCount36;
	PropSoldCount60;
	WatercraftCount;
	WatercraftCount01;
	WatercraftCount03;
	WatercraftCount06;
	WatercraftCount12;
	WatercraftCount24;
	WatercraftCount36;
	WatercraftCount60;
	AircraftCount;
	AircraftCount01;
	AircraftCount03;
	AircraftCount06;
	AircraftCount12;
	AircraftCount24;
	AircraftCount36;
	AircraftCount60;
	WealthIndex;
	SubPrimeSolicitedCount;
	SubPrimeSolicitedCount01;
	SubPrimeSolicitedCount03;
	SubPrimeSolicitedCount06;
	SubPrimeSolicitedCount12;
	SubPrimeSolicitedCount24;
	SubPrimeSolicitedCount36;
	SubPrimeSolicitedCount60;
	DerogSeverityIndex;
	DerogCount;
	DerogAge;
	FelonyCount;
	FelonyAge;
	FelonyCount01;
	FelonyCount03;
	FelonyCount06;
	FelonyCount12;
	FelonyCount24;
	FelonyCount36;
	FelonyCount60;
	ArrestCount;
	ArrestAge;
	ArrestCount01;
	ArrestCount03;
	ArrestCount06;
	ArrestCount12;
	ArrestCount24;
	ArrestCount36;
	ArrestCount60;
	LienCount;
	LienFiledCount;
	LienFiledAge;
	LienFiledCount01;
	LienFiledCount03;
	LienFiledCount06;
	LienFiledCount12;
	LienFiledCount24;
	LienFiledCount36;
	LienFiledCount60;
	LienReleasedCount;
	LienReleasedAge;
	LienReleasedCount01;
	LienReleasedCount03;
	LienReleasedCount06;
	LienReleasedCount12;
	LienReleasedCount24;
	LienReleasedCount36;
	LienReleasedCount60;
	BankruptcyCount;
	BankruptcyAge;
	BankruptcyType;
	BankruptcyStatus;
	BankruptcyCount01;
	BankruptcyCount03;
	BankruptcyCount06;
	BankruptcyCount12;
	BankruptcyCount24;
	BankruptcyCount36;
	BankruptcyCount60;
	EvictionCount;
	EvictionAge;
	EvictionCount01;
	EvictionCount03;
	EvictionCount06;
	EvictionCount12;
	EvictionCount24;
	EvictionCount36;
	EvictionCount60;
	NonDerogCount;
	NonDerogCount01;
	NonDerogCount03;
	NonDerogCount06;
	NonDerogCount12;
	NonDerogCount24;
	NonDerogCount36;
	NonDerogCount60;
	ProfLicCount;
	ProfLicAge;
	ProfLicTypeCategory;
	ProfLicExpireDate;
	ProfLicCount01;
	ProfLicCount03;
	ProfLicCount06;
	ProfLicCount12;
	ProfLicCount24;
	ProfLicCount36;
	ProfLicCount60;
	ProfLicExpireCount01;
	ProfLicExpireCount03;
	ProfLicExpireCount06;
	ProfLicExpireCount12;
	ProfLicExpireCount24;
	ProfLicExpireCount36;
	ProfLicExpireCount60;
	PRSearchCollectionCount;
	PRSearchCollectionCount01;
	PRSearchCollectionCount03;
	PRSearchCollectionCount06;
	PRSearchCollectionCount12;
	PRSearchCollectionCount24;
	PRSearchCollectionCount36;
	PRSearchCollectionCount60;
	PRSearchIDVFraudCount;
	PRSearchIDVFraudCount01;
	PRSearchIDVFraudCount03;
	PRSearchIDVFraudCount06;
	PRSearchIDVFraudCount12;
	PRSearchIDVFraudCount24;
	PRSearchIDVFraudCount36;
	PRSearchIDVFraudCount60;
	PRSearchOtherCount;
	PRSearchOtherCount01;
	PRSearchOtherCount03;
	PRSearchOtherCount06;
	PRSearchOtherCount12;
	PRSearchOtherCount24;
	PRSearchOtherCount36;
	PRSearchOtherCount60;
	InputPhoneStatus;
	InputPhonePager;
	InputPhoneMobile;
	InputPhoneType;
	InputPhoneServiceType;
	InputAreaCodeChange;
	PhoneEDAAgeOldestRecord;
	PhoneEDAAgeNewestRecord;
	PhoneOtherAgeOldestRecord;
	PhoneOtherAgeNewestRecord;
	InvalidPhoneZip;
	InputPhoneAddrDist;
	InputAddrSICCode;
	InputAddrValidation;
	InputAddrErrorCode;
	InputAddrHighRisk;
	InputPhoneHighRisk;
	InputAddrPrison;
	CurrAddrPrison;
	PrevAddrPrison;
	HistoricalAddrPrison;
	InputZipPOBox;
	InputZipCorpMil;
	DoNotMail;
	historydate;
	DID;
	FNamePop;
	LNamePop;
	AddrPop;
	SSNLength;
	DOBPop;
	EmailPop;
	IPAddrPop;
	HPhnPop;
END;

summary_res := table(res, summary_format, total);	
output(summary_res);

endmacro;