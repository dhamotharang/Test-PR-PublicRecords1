EXPORT Generalized_Macro_call(Dset,samplesize,Tag):=FUNCTIONMACRO

Rules := RECORD
		STRING ruleName {XPATH('RuleName')}; 
		STRING fieldName {XPATH('FieldName')}; 
		STRING fieldMeaning {XPATH('FieldMeaning')};
		STRING source {XPATH('Source')};
		STRING fieldFormatDescription {XPATH('FieldFormatDescription')};
		STRING regexFormat {XPATH('RegexFormat')}; 
		INTEGER unmatchedCount {XPATH('UnmatchedCount')};
		DECIMAL8_2 lowerLimit {XPATH('LowerLimit')};
		DECIMAL8_2 upperLimit {XPATH('UpperLimit')};
		STRING dateAdded {XPATH('DateAdded')};
		decimal8_4 mean;
		decimal8_4 stdev;
	END;

ruls := DATASET('~kel_shell::in::kel_shell_rules_xml', Rules, XML('dataset/record'));

File:=if(samplesize=0,choosen(Dset,all),choosen(Dset,samplesize));

// dta := Kel_Shell_QA.Base_Files.Base;

Kel_Shell_QA.Generalized_Macro(File,ruls,summary,detailed);

summary_dset_lay:=RECORD
  integer8 totaldatasetsize;
  integer8 samplesize;
  decimal8_2 samplesizepercent;
  string50 rulename;
  string ruletype;
  string rulemeaning;
  string fieldname;
	string Category;
  decimal8_2 lowerlimit;
  decimal8_2 upperlimit;
  decimal8_2 matchpercent;
  string finalconclusion;
 END;


detailed_dset_lay:=RECORD
  string50 rulename;
  string100 fieldname;
	string Category;
  Recordof(detailed) - {string50 rulename,string100 fieldname};
 END;


summary_dset:=project(summary,transform(summary_dset_lay, SELF.Category:=MAP(STD.Str.ToUpperCase(LEFT.fieldname) IN ['CRIMARRESTCOUNT84',	'CRIMARRESTCOUNT12',	'CRIMARRESTDATENEWEST',	'CRIMARRESTDATEOLDEST',	'CRIMARRESTTIMENEWEST',	'CRIMARRESTTIMEOLDEST',	'CRIMCOUNT',	'CRIMCOUNT12',	'CRIMDATENEWEST',	'CRIMDATEOLDEST',	'CRIMTIMENEWEST',	'CRIMTIMEOLDEST',	'CRIMFELONYCOUNT',	'CRIMFELONYCOUNT12',	'CRIMFELONYDATENEWEST',	'CRIMFELONYDATEOLDEST',	'CRIMFELONYTIMENEWEST',	'CRIMFELONYTIMEOLDEST',	'CRIMNONFELONYCOUNT',	'CRIMNONFELONYCOUNT12',	'CRIMNONFELONYDATENEWEST',	'CRIMNONFELONYDATEOLDEST',	'CRIMNONFELONYTIMENEWEST',	'CRIMNONFELONYTIMEOLDEST',	'CRIMADDRESSHISTORY',	'CRIMXFELONY',	'CRIMBEHAVIORLEVEL']
																																=>'CRIMINAL_HISTORY',
																												STD.Str.ToUpperCase(LEFT.fieldname) IN ['BKCOUNT120',	'BKCOUNT24',	'BKFILINGDATEOLDEST120',	'BKFILINGDATENEWEST120',	'BKTIMEOLDEST120',	'BKTIMENEWEST120',	'BKCHAPTER120',	'BKCH7COUNT120',	'BKCH13COUNT120',	'BKUPDATEDATENEWEST120',	'BKTIMENEWESTUPDATE120',	'BKDISPOSITIONDATENEWEST120',	'BKDISPOSITION120',	'BKDISMISSEDCOUNT120',	'BKDISMISSEDCOUNT24',	'BKDISPOSEDCOUNT120',	'BKDISCHARGEDCOUNT120',	'BKBUSINESSFILING120',	'BKSEVERITYINDEX120']
																																=>'BANKRUPTCY_HISTORY',
																												STD.Str.ToUpperCase(LEFT.fieldname) IN ['EXECUTIVECOUNT',	'EXECUTIVEBUSINESSCOUNT',	'EXECUTIVEBUSINESSAVG',	'EXECUTIVEACTIVEBUSINESSCOUNT',	'EXECUTIVEACTIVEBUSINESSAVG',	'EXECUTIVEACTIVEBUSINESSPCT',	'EXECUTIVEPROPOWNERCOUNT',	'EXECUTIVEPROPOWNERPCT',	'EXECUTIVEDEROGCOUNT',	'EXECUTIVEDEROGPCT',	'EXECUTIVEDEROGINDEX',	'EXECUTIVEFELONYCOUNT',	'EXECUTIVEFELONYPCT',	'EXECUTIVECRIMINALCOUNT',	'EXECUTIVECRIMINALPCT',	'EXECUTIVEBANKRUPTCYCOUNT',	'EXECUTIVEBANKRUPTCYPCT',	'EXECUTIVEEVICTIONCOUNT',	'EXECUTIVEEVICTIONPCT',	'EXECUTIVELIENCOUNT',	'EXECUTIVELIENPCT',	'EXECUTIVEJUDGMENTCOUNT',	'EXECUTIVEJUDGMENTPCT']				
																																=>'BUSINESS_EXECUTIVE',
																												STD.Str.ToUpperCase(LEFT.fieldname) IN ['BUSBKCOUNT120',	'BUSBKDISPOSEDCOUNT120',	'BUSBKDISCHARGEDCOUNT120',	'BUSBKDISMISSEDCOUNT120',	'BUSBKCH7COUNT120',	'BUSBKCH11COUNT120',	'BUSBKCH13COUNT120',	'BUSBKTIMEOLDEST120',	'BUSBKTIMENEWEST120',	'BUSBKTIMENEWESTUPDATE120',	'BUSBKNEWESTCHAPTER120',	'BUSBKNEWESTDISPOSITION120',	'BUSBKDATEOLDEST120',	'BUSBKDATENEWEST120',	'BUSBKDATENEWESTUPDATE120']
																												        =>'BUSINESS_BANKRUPTCY',
																												STD.Str.ToUpperCase(LEFT.fieldname) IN ['ASSOCIATECOUNT',	'ASSOCIATEBUSINESSCOUNT',	'ASSOCIATEBUSINESSAVG',	'ASSOCIATEACTIVEBUSINESSCOUNT',	'ASSOCIATEACTIVEBUSINESSAVG',	'ASSOCIATEACTIVEBUSINESSPCT',	'ASSOCIATEPROPOWNERCOUNT',	'ASSOCIATEPROPOWNERPCT',	'ASSOCIATEDEROGCOUNT',	'ASSOCIATEDEROGPCT',	'ASSOCIATEDEROGINDEX',	'ASSOCIATEFELONYCOUNT',	'ASSOCIATEFELONYPCT',	'ASSOCIATECRIMINALCOUNT',	'ASSOCIATECRIMINALPCT',	'ASSOCIATEBANKRUPTCYCOUNT',	'ASSOCIATEBANKRUPTCYPCT',	'ASSOCIATEEVICTIONCOUNT',	'ASSOCIATEEVICTIONPCT',	'ASSOCIATELIENCOUNT',	'ASSOCIATELIENPCT',	'ASSOCIATEJUDGMENTCOUNT',	'ASSOCIATEJUDGMENTPCT']
																												        =>'BUSINESS_ASSOCIATE',
																												STD.Str.ToUpperCase(LEFT.fieldname) IN ['INPUTFIRSTNAME',	'INPUTADDRESS',	'INPUTCITY',	'INPUTSTATE',	'INPUTZIP',	'INPUTHOMEPHONE',	'INPUTWORKPHONE',	'INPUTEMAIL',	'INPUTARCHIVEDATE']				
																																=>'INPUT_ECHO',	
																												STD.Str.ToUpperCase(LEFT.fieldname) IN ['ACCOUNT',	'INPUTID',	'LEXID',	'LEXIDSCORE',	'INPUTCLEANPREFIX',	'INPUTCLEANFIRSTNAME',	'INPUTCLEANSUFFIX',	'INPUTCLEANPRIMARYRANGE',	'INPUTCLEANPREDIRECTION',	'INPUTCLEANPRIMARYNAME',	'INPUTCLEANADDRESSSUFFIX',	'INPUTCLEANPOSTDIRECTION',	'INPUTCLEANUNITDESIG',	'INPUTCLEANSECONDARYRANGE',	'INPUTCLEANCITYNAME',	'INPUTCLEANSTATE',	'INPUTCLEANZIP5',	'INPUTCLEANZIP4',	'INPUTCLEANLATITUDE',	'INPUTCLEANLONGITUDE',	'INPUTCLEANCOUNTY',	'INPUTCLEANGEOBLOCK',	'INPUTCLEANADDRESSTYPE',	'INPUTCLEANADDRESSSTATUS',	'INPUTCLEANCOUNTRY',	'INPUTCLEANEMAIL',	'INPUTCLEANHOMEPHONE',	'INPUTCLEANWORKPHONE']
																												        =>'INPUT_CLEAN',
																																	'NA');
																																	
																												self.totaldatasetsize:=count(Dset);
																												self.samplesize:=count(File);
																												self.samplesizepercent:=(count(File)/count(Dset))*100;
																												self:=left;
																								));
																								
detailed_dset:=project(detailed,transform(detailed_dset_lay, SELF.Category:=MAP(STD.Str.ToUpperCase(LEFT.fieldname) IN ['CRIMARRESTCOUNT84',	'CRIMARRESTCOUNT12',	'CRIMARRESTDATENEWEST',	'CRIMARRESTDATEOLDEST',	'CRIMARRESTTIMENEWEST',	'CRIMARRESTTIMEOLDEST',	'CRIMCOUNT',	'CRIMCOUNT12',	'CRIMDATENEWEST',	'CRIMDATEOLDEST',	'CRIMTIMENEWEST',	'CRIMTIMEOLDEST',	'CRIMFELONYCOUNT',	'CRIMFELONYCOUNT12',	'CRIMFELONYDATENEWEST',	'CRIMFELONYDATEOLDEST',	'CRIMFELONYTIMENEWEST',	'CRIMFELONYTIMEOLDEST',	'CRIMNONFELONYCOUNT',	'CRIMNONFELONYCOUNT12',	'CRIMNONFELONYDATENEWEST',	'CRIMNONFELONYDATEOLDEST',	'CRIMNONFELONYTIMENEWEST',	'CRIMNONFELONYTIMEOLDEST',	'CRIMADDRESSHISTORY',	'CRIMXFELONY',	'CRIMBEHAVIORLEVEL']
																																=>'CRIMINAL_HISTORY',
																												STD.Str.ToUpperCase(LEFT.fieldname) IN ['BKCOUNT120',	'BKCOUNT24',	'BKFILINGDATEOLDEST120',	'BKFILINGDATENEWEST120',	'BKTIMEOLDEST120',	'BKTIMENEWEST120',	'BKCHAPTER120',	'BKCH7COUNT120',	'BKCH13COUNT120',	'BKUPDATEDATENEWEST120',	'BKTIMENEWESTUPDATE120',	'BKDISPOSITIONDATENEWEST120',	'BKDISPOSITION120',	'BKDISMISSEDCOUNT120',	'BKDISMISSEDCOUNT24',	'BKDISPOSEDCOUNT120',	'BKDISCHARGEDCOUNT120',	'BKBUSINESSFILING120',	'BKSEVERITYINDEX120']
																																=>'BANKRUPTCY_HISTORY',
																												STD.Str.ToUpperCase(LEFT.fieldname) IN ['EXECUTIVECOUNT',	'EXECUTIVEBUSINESSCOUNT',	'EXECUTIVEBUSINESSAVG',	'EXECUTIVEACTIVEBUSINESSCOUNT',	'EXECUTIVEACTIVEBUSINESSAVG',	'EXECUTIVEACTIVEBUSINESSPCT',	'EXECUTIVEPROPOWNERCOUNT',	'EXECUTIVEPROPOWNERPCT',	'EXECUTIVEDEROGCOUNT',	'EXECUTIVEDEROGPCT',	'EXECUTIVEDEROGINDEX',	'EXECUTIVEFELONYCOUNT',	'EXECUTIVEFELONYPCT',	'EXECUTIVECRIMINALCOUNT',	'EXECUTIVECRIMINALPCT',	'EXECUTIVEBANKRUPTCYCOUNT',	'EXECUTIVEBANKRUPTCYPCT',	'EXECUTIVEEVICTIONCOUNT',	'EXECUTIVEEVICTIONPCT',	'EXECUTIVELIENCOUNT',	'EXECUTIVELIENPCT',	'EXECUTIVEJUDGMENTCOUNT',	'EXECUTIVEJUDGMENTPCT']				
																																=>'BUSINESS_EXECUTIVE',
																												STD.Str.ToUpperCase(LEFT.fieldname) IN ['BUSBKCOUNT120',	'BUSBKDISPOSEDCOUNT120',	'BUSBKDISCHARGEDCOUNT120',	'BUSBKDISMISSEDCOUNT120',	'BUSBKCH7COUNT120',	'BUSBKCH11COUNT120',	'BUSBKCH13COUNT120',	'BUSBKTIMEOLDEST120',	'BUSBKTIMENEWEST120',	'BUSBKTIMENEWESTUPDATE120',	'BUSBKNEWESTCHAPTER120',	'BUSBKNEWESTDISPOSITION120',	'BUSBKDATEOLDEST120',	'BUSBKDATENEWEST120',	'BUSBKDATENEWESTUPDATE120']
																												        =>'BUSINESS_BANKRUPTCY',
																												STD.Str.ToUpperCase(LEFT.fieldname) IN ['ASSOCIATECOUNT',	'ASSOCIATEBUSINESSCOUNT',	'ASSOCIATEBUSINESSAVG',	'ASSOCIATEACTIVEBUSINESSCOUNT',	'ASSOCIATEACTIVEBUSINESSAVG',	'ASSOCIATEACTIVEBUSINESSPCT',	'ASSOCIATEPROPOWNERCOUNT',	'ASSOCIATEPROPOWNERPCT',	'ASSOCIATEDEROGCOUNT',	'ASSOCIATEDEROGPCT',	'ASSOCIATEDEROGINDEX',	'ASSOCIATEFELONYCOUNT',	'ASSOCIATEFELONYPCT',	'ASSOCIATECRIMINALCOUNT',	'ASSOCIATECRIMINALPCT',	'ASSOCIATEBANKRUPTCYCOUNT',	'ASSOCIATEBANKRUPTCYPCT',	'ASSOCIATEEVICTIONCOUNT',	'ASSOCIATEEVICTIONPCT',	'ASSOCIATELIENCOUNT',	'ASSOCIATELIENPCT',	'ASSOCIATEJUDGMENTCOUNT',	'ASSOCIATEJUDGMENTPCT']
																												        =>'BUSINESS_ASSOCIATE',
																												STD.Str.ToUpperCase(LEFT.fieldname) IN ['INPUTFIRSTNAME',	'INPUTADDRESS',	'INPUTCITY',	'INPUTSTATE',	'INPUTZIP',	'INPUTHOMEPHONE',	'INPUTWORKPHONE',	'INPUTEMAIL',	'INPUTARCHIVEDATE']				
																																=>'INPUT_ECHO',	
																												STD.Str.ToUpperCase(LEFT.fieldname) IN ['ACCOUNT',	'INPUTID',	'LEXID',	'LEXIDSCORE',	'INPUTCLEANPREFIX',	'INPUTCLEANFIRSTNAME',	'INPUTCLEANSUFFIX',	'INPUTCLEANPRIMARYRANGE',	'INPUTCLEANPREDIRECTION',	'INPUTCLEANPRIMARYNAME',	'INPUTCLEANADDRESSSUFFIX',	'INPUTCLEANPOSTDIRECTION',	'INPUTCLEANUNITDESIG',	'INPUTCLEANSECONDARYRANGE',	'INPUTCLEANCITYNAME',	'INPUTCLEANSTATE',	'INPUTCLEANZIP5',	'INPUTCLEANZIP4',	'INPUTCLEANLATITUDE',	'INPUTCLEANLONGITUDE',	'INPUTCLEANCOUNTY',	'INPUTCLEANGEOBLOCK',	'INPUTCLEANADDRESSTYPE',	'INPUTCLEANADDRESSSTATUS',	'INPUTCLEANCOUNTRY',	'INPUTCLEANEMAIL',	'INPUTCLEANHOMEPHONE',	'INPUTCLEANWORKPHONE']
																												        =>'INPUT_CLEAN',
																																	'NA');
																															self:=left;
																								));
																																	
																																	

summary_return:=output(summary_dset(Category in ['INPUT_ECHO','INPUT_CLEAN']),,'~kel_shell::out::' + Tag + '_summary',thor,compressed);

detailed_return:=output(detailed_dset(Category in ['INPUT_ECHO','INPUT_CLEAN']),,'~kel_shell::out::' + Tag + '_detailed',thor,compressed);

// summary_return:=output(summary_dset,,'~kel_shell::out::' + Tag + '_summary',thor,overwrite);

// detailed_return:=output(detailed_dset,,'~kel_shell::out::' + Tag + '_detailed',thor,overwrite);

seq:=sequential(summary_return,detailed_return);

RETURN seq;

ENDMACRO;