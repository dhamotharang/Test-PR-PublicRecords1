/* PRTE2_LNProperty.V_Refresh_Data_2
 V_Refresh_Data_Base_Files are generated by running this which reads our batch_in+XREF, 
pulls data from the mapped address, and saves that data in the base files WITH THE MAPPED ADDRESS STILL

Final step will then take batch_in - join with assess.fid key base file, 
JOIN - again only on the mapped address - not the straight address join.
and then transform over only the codes we need
WARNING - be careful what production keys we join to - some keys in the prod thor only are "added" records
so you will find that many address lookups will fail.  You have to choose a key that contains all or at least many records.
(LNProperty in production has two builds 1 - FULL key builds and 2 - partial new records key builds)

Also we have multiple records per address with multiple ln_fares_id's - we need to pick ONE PER ADDRESS
 - best record type match with best scoring 
 - and then transform over the field values we want in the spreadsheet. (V_Refresh_Data_Transform_A_to_BatIn)
*/

// Phase 1 take our addresses and use addr_search.fid key to gather ln_fares_id's for our addresses.

IMPORT ut, PRTE2_LNProperty, LN_PropertyV2_Services, PRTE2_Common, PRTE2_X_Ins_PropertyScramble;

// DSXRef := PRTE2_X_Ins_PropertyScramble.Files.XRef_Enhanced_SF_DS;
DSXRef 			:= PRTE2_X_Ins_PropertyScramble.Files.XRef_Enhanced_CNT_SF_DS;
LNPExpanded := PRTE2_LNProperty.Files.Alpha_Audit_SF_DS(source_code <> 'OO');
LNPBase 		:= PRTE2_LNProperty.Files.LNP_Scramble_SF_DS;
EnhancedBatchIn_Layout := PRTE2_LNProperty.V_Refresh_Data_Base_Files.EnhancedBatchIn_Layout;

// ---------- First add a cleaned address to the batch_in to enable a good JOIN with XREF
EnhancedBatchIn_Layout xFormInitial(LNPBase L, LNPExpanded R) := TRANSFORM
	SELF.tmp_prim_range := R.person_addr.prim_range;
	SELF.tmp_predir := R.person_addr.predir;
	SELF.tmp_prim_name := R.person_addr.prim_name;
	SELF.tmp_addr_suffix := R.person_addr.addr_suffix;
	SELF.tmp_postdir := R.person_addr.postdir;
	SELF.tmp_unit_desig := R.person_addr.unit_desig;
	SELF.tmp_sec_range := R.person_addr.sec_range;
	SELF.tmp_p_city_name := R.person_addr.v_city_name;
	SELF.tmp_v_city_name := R.person_addr.v_city_name;
	SELF.tmp_st := R.person_addr.st;
	SELF.tmp_zip5 := R.person_addr.zip5;
	SELF.tmp_zip4 := R.person_addr.zip4;
	SELF := L;
	SELF := [];
END;
Enhanced_BatchIn1 := JOIN(LNPBase,LNPExpanded,
													LEFT.ln_fares_id = RIGHT.ln_fares_id
													,xFormInitial(LEFT,RIGHT)
													,LEFT outer
													);
OUTPUT(Enhanced_BatchIn1,NAMED('Enhanced_BatchIn1'));	

// ---------- Next JOIN with the XREF Counter to get the mapped clean address
EnhancedBatchIn_Layout xFormBase2(Enhanced_BatchIn1 L, DSXRef R) := TRANSFORM
		SELF.tmp_prim_range := R.map_prim_range;
		SELF.tmp_predir := R.map_predir;
		SELF.tmp_prim_name := R.map_prim_name;
		SELF.tmp_addr_suffix := R.map_addr_suffix;
		SELF.tmp_postdir := R.map_postdir;
		SELF.tmp_unit_desig := R.map_unit_desig;
		SELF.tmp_sec_range := R.map_sec_range;
		SELF.tmp_p_city_name := R.map_v_city_name;
		SELF.tmp_v_city_name := R.map_v_city_name;
		SELF.tmp_st := R.map_st;
		SELF.tmp_zip5 := R.map_zip5;
		SELF.tmp_zip4 := R.map_zip4;
		SELF.tmp_Clean_streetaddr1 := R.map_Clean_streetaddr1;
		SELF.tmp_Clean_CityStZip := R.map_Clean_CityStZip;
		SELF.map_prim_range := R.prim_range;
		SELF.map_predir := R.predir;
		SELF.map_prim_name := R.prim_name;
		SELF.map_addr_suffix := R.addr_suffix;
		SELF.map_postdir := R.postdir;
		SELF.map_unit_desig := R.unit_desig;
		SELF.map_sec_range := R.sec_range;
		SELF.map_p_city_name := R.p_city_name;
		SELF.map_v_city_name := R.v_city_name;
		SELF.map_st := R.st;
		SELF.map_zip5 := R.zip5;
		SELF.map_zip4 := R.zip4;
		SELF.map_Clean_streetaddr1 := R.Clean_streetaddr1;
		SELF.map_Clean_CityStZip := R.Clean_CityStZip;
		SELF := L;
END;
Enhanced_BatchIn2 := JOIN(Enhanced_BatchIn1, DSXRef,
											LEFT.tmp_prim_name = RIGHT.map_prim_name
											and LEFT.tmp_prim_range = RIGHT.map_prim_range
											and LEFT.tmp_zip5 = RIGHT.map_zip5
											and LEFT.tmp_predir = RIGHT.map_predir
											and LEFT.tmp_postdir = RIGHT.map_postdir
											and LEFT.tmp_sec_range = RIGHT.map_sec_range
											,xFormBase2(LEFT,RIGHT)
											,LEFT outer
											);
OUTPUT(Enhanced_BatchIn2,NAMED('Enhanced_BatchIn2'));		// This contains LN+XREF Mapped address
											
EnhancedBatchIn_Layout fixTmpCleans(Enhanced_BatchIn2 L, LNPExpanded R) := TRANSFORM
	SELF.tmp_prim_range := R.person_addr.prim_range;
	SELF.tmp_predir := R.person_addr.predir;
	SELF.tmp_prim_name := R.person_addr.prim_name;
	SELF.tmp_addr_suffix := R.person_addr.addr_suffix;
	SELF.tmp_postdir := R.person_addr.postdir;
	SELF.tmp_unit_desig := R.person_addr.unit_desig;
	SELF.tmp_sec_range := R.person_addr.sec_range;
	SELF.tmp_p_city_name := R.person_addr.v_city_name;
	SELF.tmp_v_city_name := R.person_addr.v_city_name;
	SELF.tmp_st := R.person_addr.st;
	SELF.tmp_zip5 := R.person_addr.zip5;
	SELF.tmp_zip4 := R.person_addr.zip4;
	SELF := L;
	SELF := [];
END;
Enhanced_BatchIn3 := JOIN(Enhanced_BatchIn2,LNPExpanded,
													LEFT.ln_fares_id = RIGHT.ln_fares_id
													,fixTmpCleans(LEFT,RIGHT)
													,LEFT outer
													);
OUTPUT(Enhanced_BatchIn3);	


OUTPUT(COUNT(LNPBase));
OUTPUT(COUNT(LNPExpanded));
OUTPUT(COUNT(Enhanced_BatchIn1));
OUTPUT(COUNT(Enhanced_BatchIn2));
Enhanced_BatchIn := DEDUP(SORT(Enhanced_BatchIn2,ln_fares_id),ln_fares_id);
OUTPUT(COUNT(Enhanced_BatchIn));
BaseBatchInPlusCleaningName := PRTE2_LNProperty.V_Refresh_Data_Base_Files.BaseBatchInPlusCleaning;
OUTPUT(Enhanced_BatchIn,, BaseBatchInPlusCleaningName, overwrite);
OUTPUT(Enhanced_BatchIn,,NAMED('Enhanced_BatchIn'));
//-------------------------------------------------------------------------------------------------

// AssessorKey_layout := PRTE2_LNProperty.V_Refresh_Data_Keys.assessorKey_Layout;
// DeedsKey_Layout := PRTE2_LNProperty.V_Refresh_Data_Keys.deedsKey_Layout;
AddressSearchKey_layout := PRTE2_LNProperty.V_Refresh_Data_Keys.addr_search_Layout;

//-------------------------------------------------------------------------------------------------
// at this point, we can either read in production keys, linking on mapped address, building new final record data
// or 
// do the same linking but save some files that I can review the data.
//-------------------------------------------------------------------------------------------------


// ------- NOTE: using the FCRA key to keep counts down.
address_search_key := PRTE2_LNProperty.V_Refresh_Data_Keys.fcra_address_search_key;

address_search_key xFormKey1 (Enhanced_BatchIn L, address_search_key R) := TRANSFORM
		SELF := R;
END;

addrSearchTmpNameAll := PRTE2_LNProperty.V_Refresh_Data_Base_Files.RefreshBaseNameFcraAll;
addrSearchTmpName := PRTE2_LNProperty.V_Refresh_Data_Base_Files.RefreshBaseNameFcra;

AddressesFound := JOIN( Enhanced_BatchIn, address_search_key,
											(TRIM(RIGHT.prim_name+RIGHT.prim_range+RIGHT.zip) <> '')
											AND	LEFT.map_prim_name = RIGHT.prim_name
											AND LEFT.map_prim_range = RIGHT.prim_range
											AND LEFT.map_zip5 = RIGHT.zip
											AND LEFT.map_predir = RIGHT.predir
											AND LEFT.map_postdir = RIGHT.postdir
											AND LEFT.map_sec_range = RIGHT.sec_range
											,xFormKey1(LEFT,RIGHT)
											,LEFT outer
											,keep(10));
				
AddressesFoundFilteredAll := AddressesFound(TRIM(prim_name+prim_range+zip) <> '');
AddressesFoundFiltered1 := AddressesFoundFilteredAll( source_code_1+source_code_2 = 'OO' );
AddressesFoundFiltered := AddressesFoundFiltered1( ln_owner OR owner OR nofares_owner );

OUTPUT(AddressesFoundFiltered,, addrSearchTmpName, overwrite);
OUTPUT(AddressesFoundFilteredAll,, addrSearchTmpNameAll, overwrite);

//-------------------------------------------------------------------------------------------------
Assessor_key := PRTE2_LNProperty.V_Refresh_Data_Keys.fcra_assessor_key;
assessorKey_Renew_Layout := PRTE2_LNProperty.V_Refresh_Data_Base_Files.assessorKey_Renew_Layout;
assessorTmpName := PRTE2_LNProperty.V_Refresh_Data_Base_Files.RefreshAssessorName;

assessorKey_Renew_Layout xFormAssessor (AddressesFound L, Assessor_key R) := TRANSFORM
		SELF.map_prim_range := L.prim_range;
		SELF.map_predir := L.predir;
		SELF.map_prim_name := L.prim_name;
		SELF.map_addr_suffix := L.suffix;
		SELF.map_postdir := L.postdir;
		SELF.map_sec_range := L.sec_range;
		SELF.map_zip5 := L.zip[1..5];
		SELF.map_zip4 := '';
		SELF := R;
		SELF := L;
		SELF := [];
END;
Assess := JOIN(AddressesFound, Assessor_key,
							RIGHT.ln_fares_id <> '' AND
							LEFT.ln_fares_id = RIGHT.ln_fares_id
							,xFormAssessor(LEFT,RIGHT)
							,left outer
							);
AssessClean := Assess(ln_fares_id <> '');
AssessScored := PRTE2_LNProperty.V_Refresh_data_fn_Score_Assess(AssessClean);
AssessFinal := SORT(AssessScored,property_full_street_address,property_unit_number,property_city_state_zip,ln_fares_id);
TryAgain := AssessFinal(total_robustness_score>0);
OUTPUT(TryAgain,, assessorTmpName, overwrite);
OUTPUT(MAX(TryAgain,ctScore));

//--------- add some counts -----------------------------------------------------------------------
	testStrValue (String inStr) := function
		return if(length(Trim(inStr))>0,1,0);
	end;
	testIntValue (Integer inInt) := function
		return if(inInt>0,1,0);
	end;

OUTPUT(COUNT(TryAgain));
OUTPUT(SUM(TryAgain,testStrValue(garage_type_code)));
OUTPUT(SUM(TryAgain,testStrValue(parking_no_of_cars)));

				// hasGarageType := testStrValue(l.garage_type_code);
				// hasParkingType := testStrValue(l.parking_no_of_cars);
//-------------------------------------------------------------------------------------------------
				
//-------------------------------------------------------------------------------------------------
// 99% of our problems are in Assessor records so I'm concentrating on that.  This is here but not optimized or scored yet.
// Deeds_Key := PRTE2_LNProperty.V_Refresh_Data_Keys.fcra_Deeds_Key;
// deedTmpName := PRTE2_LNProperty.V_Refresh_Data_Base_Files.RefreshDeedName;
// deedsKey_Renew_Layout := PRTE2_LNProperty.V_Refresh_Data_Base_Files.deedsKey_Renew_Layout;
// deedsKey_Renew_Layout xFormDeeds (AddressesFound L, Deeds_Key R) := TRANSFORM
	// SELF.CTscore := 0;
	// SELF := R;
	// SELF := L;
// END;

// Deeds0 := JOIN(AddressesFound, Deeds_Key,
							// LEFT.ln_fares_id = RIGHT.ln_fares_id
							// ,xFormDeeds(LEFT,RIGHT)
							// ,left outer
							// );
// Deeds1 := 
// OUTPUT(Deeds,, deedTmpName, overwrite);

//-------------------------------------------------------------------------------------------------


// OUTPUT(PRTE2_Common.get_ds_of_Layout(MasterBaseData));
// OUTPUT(PRTE2_Common.get_ds_of_Layout(AddressesFound));
// OUTPUT(PRTE2_Common.get_ds_of_Layout(Assessor_key));
// OUTPUT(PRTE2_Common.get_ds_of_Layout(Deeds_Key));
// OUTPUT(Assess);
// OUTPUT(Deeds);
// AllShouldBe := Assess+Deeds;
// OUTPUT(addrFound);
// OUTPUT(Assessor_key(ln_fares_id in lookups2));
// OUTPUT(Assess(ln_fares_id in lookups2));
// OUTPUT(Deeds(ln_fares_id in lookups2));
// OUTPUT(AllShouldBe(ln_fares_id in lookups2));

//-------------------------------------------------------------------------------------------------

// RoxieKeyBuild.Mac_SF_BuildProcess_V2(NewXRefX,
   																		 // PRTE2_X_Ins_PropertyScramble.Files.BASE_PREFIX_NAME_ENXRef, 
   																		 // PRTE2_X_Ins_PropertyScramble.Files.ENHANCED_COUNTERS_NAME,
   																		 // fileVersion, buildMergedHdr, 3,
   																		 // false,true);
// SEQUENTIAL(buildMergedHdr);


