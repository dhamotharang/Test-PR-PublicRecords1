/*
 These are generated by running PRTE2_LNProperty.V_Refresh_Data_2
Most of these layouts are related to the keys layouts plus some scoring or lexid fields.
		addr_search.fid
		fcra - addr_search.fid		-- we'll use FCRA versions unless we hit problems.
		fcra_assessor.fid
		fcra_deed.fid
IE: we JOIN with and read the key files then save only records related to our addresses into these "base" files
*/
IMPORT ut, PRTE2_LNProperty, PRTE2_X_Ins_PropertyScramble;

EXPORT V_Refresh_Data_Base_Files := MODULE

EXPORT BaseBatchInRefreshened := '~prct::temp::bap::ln_property_reload::Refreshened_batch_in_plus_cleaning';
EXPORT BaseBatchInPlusCleaning := '~prct::temp::bap::ln_property_reload::initial_batch_in_plus_cleaning';
EXPORT EnhancedBatchIn_Layout := RECORD
		PRTE2_LNProperty.Layouts.batch_in;
		INTEGER CTscore := 0;
		INTEGER total_robustness_score	:= 0;
		INTEGER key_robustness_score := 0;		
		PRTE2_X_Ins_PropertyScramble.Layouts.Temp_Clean_Addr;
		PRTE2_X_Ins_PropertyScramble.Layouts.Mapped_Clean_Addr;
END;

EXPORT BaseBatchInPlusCleaningDS := DATASET(BaseBatchInPlusCleaning,EnhancedBatchIn_Layout,THOR);
EXPORT BaseBatchInRefreshenedDS := DATASET(BaseBatchInRefreshened,EnhancedBatchIn_Layout,THOR);

EXPORT RefreshBaseScoredBatchIn := '~prct::temp::bap::ln_property_reload::scored_batch_in';
EXPORT RefreshBaseNameFcra := '~prct::temp::bap::ln_property_reload::fcra_addr_search.fid';
EXPORT RefreshBaseNameFcraAll  := '~prct::temp::bap::ln_property_reload::fcra_addr_search.fid_all';
EXPORT RefreshAssessorName := '~prct::temp::bap::ln_property_reload::assessor_records';
EXPORT RefreshAssessorDedupName := '~prct::temp::bap::ln_property_reload::assessor_records_dedup';
EXPORT RefreshDeedName := '~prct::temp::bap::ln_property_reload::deed_records';

EXPORT RefreshBaseLayout := RECORD
	unsigned6 lexid;
  string28 prim_name;
  string10 prim_range;
  string5 zip;
  string2 predir;
  string2 postdir;
  string4 suffix;
  string8 sec_range;
  string1 source_code_2;
  boolean ln_owner;
  boolean owner;
  boolean nofares_owner;
  string1 source_code_1;
  string12 ln_fares_id;
  string20 lname;
  string20 fname;
  string5 name_suffix;
END;

EXPORT assessorKey_Renew_Layout := RECORD
	INTEGER CTscore := 0;
	INTEGER total_robustness_score	:= 0;
	INTEGER key_robustness_score := 0;
	V_Refresh_Data_Keys.assessorKey_iFields;
	V_Refresh_Data_Keys.assessorKey_Noni_Base;
	PRTE2_X_Ins_PropertyScramble.Layouts.Mapped_Clean_Addr;
END;

EXPORT deedsKey_Renew_Layout := RECORD
	INTEGER CTscore := 0;
	INTEGER total_robustness_score	:= 0;
	INTEGER key_robustness_score := 0;
	V_Refresh_Data_Keys.DeedsKey_Noni;
	V_Refresh_Data_Keys.DeedsKey_iFields;
	PRTE2_X_Ins_PropertyScramble.Layouts.Mapped_Clean_Addr;
END;

EXPORT RefreshBaseFcraDS := DATASET(RefreshBaseNameFcra,RefreshBaseLayout,THOR);
EXPORT RefreshBaseFcraAllDS := DATASET(RefreshBaseNameFcraAll,RefreshBaseLayout,THOR);
EXPORT Cap_IDs_AddressDS := DEDUP(SORT(RefreshBaseFcraDS,prim_name,prim_range,zip,predir,postdir,sec_range,ln_fares_id),prim_name,prim_range,zip,predir,postdir,sec_range,ln_fares_id);
EXPORT Cap_IDs_Per_FidDS := DEDUP(SORT(RefreshBaseFcraDS,ln_fares_id,-owner),ln_fares_id);

EXPORT RefreshAssessorDS := DATASET(RefreshAssessorName,assessorKey_Renew_Layout,THOR);
EXPORT RefreshAssessorDedupDS := DATASET(RefreshAssessorDedupName,assessorKey_Renew_Layout,THOR);
// Dedup and keep the highest score
EXPORT RefreshAssessorOneAddress := DEDUP(
																				SORT(RefreshAssessorDS,mailing_full_street_address,mailing_unit_number,mailing_city_state_zip, -total_robustness_score)
																				,mailing_full_street_address,mailing_unit_number,mailing_city_state_zip);
EXPORT RefreshDeedNameDS := DATASET(RefreshDeedName,deedsKey_Renew_Layout,THOR);

END;

