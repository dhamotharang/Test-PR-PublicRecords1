Generated by SALT V2.7 Gold
File being processed :-
OPTIONS:-gh -ga -p2 -gs2
MODULE:BIPV2_POWID_DOWN_Platform
FILENAME:POWID_Down
 
// ------------------------------------
//  IDs and Tuning
// ------------------------------------
IDFIELD:EXISTS:POWID
RIDFIELD:rcid
// RECORDS:2883814282 
// POPULATION:191477685
RECORDS:3688224497 
POPULATION:275408226
NINES:3
BLOCKTHRESHOLD:5
// THRESHOLD:42
 
// IDPARENT:OrgID,UltID
// IDCHILDREN:ProxID,DotID
 
// ------------------------------------
//  Field validation/cleaning
// ------------------------------------
FIELDTYPE:alpha:CAPS:ALLOW(ABCDEFGHIJKLMNOPQRSTUVWXYZ)
FIELDTYPE:number:ALLOW(0123456789)
 
// ------------------------------------
//  Linking fields
// ------------------------------------
 
FIELD:company_name:CARRY:0,0
 
FIELD:orgid:FORCE:28,0
// CLEAVE:solo_orgid:BASIS(orgid):MINIMUM(1) // Cleave may be needed if we start feeding back around to the next iteration
 
FIELD:prim_range:FORCE:13,0
// FIELD:prim_range:EDIT1:FORCE(+):13,0
// FIELD:prim_range:EDIT1:FORCE(--):13,0
FIELD:prim_name:PROP:FORCE(+):14,0
// FIELD:prim_name:PROP:EDIT1:FORCE(+):15,0
// FIELD:sec_range:PROP:FORCE(--):12,0
FIELD:st:LIKE(alpha):FORCE(+):5,0
FIELD:v_city_name:CONTEXT(st):11,6
FIELD:zip:LIKE(number):14,7
CONCEPT:csz:v_city_name:st:zip:FORCE(+-2):14,19
// CONCEPT:addr1:prim_range:prim_name:sec_range:23,77
CONCEPT:addr1:prim_range:prim_name:22,0
CONCEPT:address:addr1:csz:FORCE(+):25,19
 
// ------------------------------------
//  Metadata
// ------------------------------------
FIELD:dt_first_seen:RECORDDATE(FIRST):0,0
FIELD:dt_last_seen:RECORDDATE(LAST):0,0
// SOURCEFIELD:source:CONSISTENT(prim_range,prim_name,sec_range,st,v_city_name,zip):PARTITION(BIPV2.Mod_Sources.src2partition)
SOURCEFIELD:source:CONSISTENT(prim_range,prim_name,st,v_city_name,zip):PARTITION(BIPV2.Mod_Sources.src2partition)
 
Total available specificity:146
Recommended matching threshold 38
Search Threshold set at 20
Use of PERSISTs in code set at:2
 
______________________________English Description of Matching Process___________________________
 
A SALT generated matching process really only contains one single matching rule.
SALT compares every record to every possible matching record and then allocates a score to how well
the records match. SALT then pairs those clusters which have the highest match scores provided the scores
meet or exceed the matching threshold. The scoring process is highly sophisticated and detailed below
however it can essentially be thought of as allocating points for every pair of fields that match
and subtracting points for every pair of fields that do not match.
This process was told to produce 3 nines of accuracy on a population of 275408224 with -2147483648 records.
The matching threshold is therefore set at 38.
 
___Field by Field Breakdown of Scoring Method___
 
company_name Scoring: This field is not used for scoring; rather it is carried along for context and debugging
orgid Scoring: In order for two records to be a match it is also required that the orgid fields match.
Two orgid fields will be considered to match if:
  - they are identical
The exact number of points allocated to a match will depend upon the global scarcity of the orgid
but should average 28 points with a failed match substracting 28 points.
(This subtraction estimate is based upon 0% of clusters with 2 or more records have 2 or more values for orgid.)
 
prim_range Scoring: In order for two records to be a match it is also required that the prim_range fields match.
Two prim_range fields will be considered to match if:
  - they are identical
The exact number of points allocated to a match will depend upon the global scarcity of the prim_range
but should average 13 points with a failed match substracting 13 points.
(This subtraction estimate is based upon 0% of clusters with 2 or more records have 2 or more values for prim_range.)
It should also be noted that prim_range is a child field of addr1. Therefore if addr1 is a full match this field will score 0.
This field is scaled to match with its parent addr1, on average that will mean multiplying by 81%
(Although the score is still computed to satisfy the forcing condition.)
 
prim_name Scoring: In order for two records to be a match it is also required that the prim_name fields match.
If a field is null and another record in the same cluster has a value for that field then the other records value will be used.
Two prim_name fields will be considered to match if:
  - they are identical
The exact number of points allocated to a match will depend upon the global scarcity of the prim_name
but should average 14 points with a failed match substracting 14 points.
(This subtraction estimate is based upon 0% of clusters with 2 or more records have 2 or more values for prim_name.)
It should also be noted that prim_name is a child field of addr1. Therefore if addr1 is a full match this field will score 0.
This field is scaled to match with its parent addr1, on average that will mean multiplying by 81%
(Although the score is still computed to satisfy the forcing condition.)
 
st Scoring: In order for two records to be a match it is also required that the st fields match.
Two st fields will be considered to match if:
  - they are identical
The exact number of points allocated to a match will depend upon the global scarcity of the st
but should average 5 points with a failed match substracting 5 points.
(This subtraction estimate is based upon 0% of clusters with 2 or more records have 2 or more values for st.)
It should also be noted that st is a child field of csz. Therefore if csz is a full match this field will score 0.
This field is scaled to match with its parent csz, on average that will mean multiplying by 46%
(Although the score is still computed to satisfy the forcing condition.)
 
v_city_name Scoring: 
The scoring for this field is ignored unless the st fields are identical.
Two v_city_name fields will be considered to match if:
  - they are identical
The exact number of points allocated to a match will depend upon the global scarcity of the v_city_name
but should average 11 points with a failed match substracting 10 points.
(This subtraction estimate is based upon 0% of clusters with 2 or more records have 2 or more values for v_city_name.)
It should also be noted that v_city_name is a child field of csz. Therefore if csz is a full match this field will score 0.
This field is scaled to match with its parent csz, on average that will mean multiplying by 46%
 
zip Scoring: Two zip fields will be considered to match if:
  - they are identical
The exact number of points allocated to a match will depend upon the global scarcity of the zip
but should average 14 points with a failed match substracting 13 points.
(This subtraction estimate is based upon 0% of clusters with 2 or more records have 2 or more values for zip.)
It should also be noted that zip is a child field of csz. Therefore if csz is a full match this field will score 0.
This field is scaled to match with its parent csz, on average that will mean multiplying by 46%
 
csz Scoring: In order for two records to be a match it is also required that the csz fields match.
Specifically the score awarded to this field must be >= -2 .
Two csz fields will be considered to match if:
  - they are identical
Note: csz is an amalgam of (v_city_name,st,zip)
Points will only be allocated for a match, the amount depending upon the scarcity of csz
but should average 14 points.
In the event of a non-match this field will score 0 (and the child fields will be allowed to score) and the sum of the scores of its' children will be used to determine the force criteria.
It should also be noted that csz is a child field of address. Therefore if address is a full match this field will score 0.
This field is scaled to match with its parent address, on average that will mean multiplying by 69%
(Although the score is still computed to satisfy the forcing condition.)
 
addr1 Scoring: Two addr1 fields will be considered to match if:
  - they are identical
Note: addr1 is an amalgam of (prim_range,prim_name)
Points will only be allocated for a match, the amount depending upon the scarcity of addr1
but should average 22 points.
In the event of a non-match this field will score 0 (and the child fields will be allowed to score).
It should also be noted that addr1 is a child field of address. Therefore if address is a full match this field will score 0.
This field is scaled to match with its parent address, on average that will mean multiplying by 69%
 
address Scoring: In order for two records to be a match it is also required that the address fields match.
Two address fields will be considered to match if:
  - they are identical
Note: address is an amalgam of (addr1,csz)
Points will only be allocated for a match, the amount depending upon the scarcity of address
but should average 25 points.
In the event of a non-match this field will score 0 (and the child fields will be allowed to score) and the sum of the scores of its' children will be used to determine the force criteria.
 
dt_first_seen Scoring: Date fields are not presently used for scoring but are carried along for debugging purposes
dt_last_seen Scoring: Date fields are not presently used for scoring but are carried along for debugging purposes
 
__Glossary__
Edit Distance: An edit distance of (say) one implies that one string can be converted into another by doing one of
  - Changing one character
  - Deleting one character
  - Transposing two characters
 
Forcing Criteria: In addition to the general 'best match' logic it is possible to insist that
one particular field must match to some degree or the whole record is considered a bad match.
The criterial applied to that one field is the forcing criteria.
 
Cascade: Best Type rules are applied in such a way that the rules are applied one by one UNTIL the first rule succeeds; subsequent rules are then skipped.
 
__General Notes__
How is it decided how much to subtract for a bad match?
SALT computes for each field the percentage likelihood that a valid cluster will have two or more values for a given field
this value (called the switch value in the SALT literature) is then used to produce the subtraction value from the match value.
The value in this document is the one typed into the SPC file; the code will use a value computed at run-time.
 
