IMPORT ut,SALT33;
IMPORT Scrubs; // Import modules for FieldTypes attribute definitions
EXPORT incident_bip_Fields := MODULE
// Processing for each FieldType
EXPORT SALT33.StrType FieldTypeName(UNSIGNED2 i) := CHOOSE(i,'Invalid_Batch','Invalid_DBCode','Invalid_Num','Invalid_State','Invalid_Enh_Did_Src','Invalid_Zip','Invalid_Srce_Cd','Invalid_CurrentDate','Invalid_Suffix');
EXPORT FieldTypeNum(SALT33.StrType fn) := CASE(fn,'Invalid_Batch' => 1,'Invalid_DBCode' => 2,'Invalid_Num' => 3,'Invalid_State' => 4,'Invalid_Enh_Did_Src' => 5,'Invalid_Zip' => 6,'Invalid_Srce_Cd' => 7,'Invalid_CurrentDate' => 8,'Invalid_Suffix' => 9,0);
EXPORT MakeFT_Invalid_Batch(SALT33.StrType s0) := FUNCTION
  s1 := SALT33.stringfilter(s0,'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-'); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_Invalid_Batch(SALT33.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT33.StringFilter(s,'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-'))),~(LENGTH(TRIM(s)) >= 1));
EXPORT InValidMessageFT_Invalid_Batch(UNSIGNED1 wh) := CHOOSE(wh,SALT33.HygieneErrors.NotInChars('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-'),SALT33.HygieneErrors.NotLength('1..'),SALT33.HygieneErrors.Good);
EXPORT MakeFT_Invalid_DBCode(SALT33.StrType s0) := FUNCTION
  RETURN  s0;
END;
EXPORT InValidFT_Invalid_DBCode(SALT33.StrType s) := WHICH(((SALT33.StrType) s) NOT IN ['N','F']);
EXPORT InValidMessageFT_Invalid_DBCode(UNSIGNED1 wh) := CHOOSE(wh,SALT33.HygieneErrors.NotInEnum('N|F'),SALT33.HygieneErrors.Good);
EXPORT MakeFT_Invalid_Num(SALT33.StrType s0) := FUNCTION
  s1 := SALT33.stringfilter(s0,'0123456789'); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_Invalid_Num(SALT33.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT33.StringFilter(s,'0123456789'))));
EXPORT InValidMessageFT_Invalid_Num(UNSIGNED1 wh) := CHOOSE(wh,SALT33.HygieneErrors.NotInChars('0123456789'),SALT33.HygieneErrors.Good);
EXPORT MakeFT_Invalid_State(SALT33.StrType s0) := FUNCTION
  RETURN  s0;
END;
EXPORT InValidFT_Invalid_State(SALT33.StrType s) := WHICH(~Scrubs.fn_Valid_StateAbbrev(s)>0);
EXPORT InValidMessageFT_Invalid_State(UNSIGNED1 wh) := CHOOSE(wh,SALT33.HygieneErrors.CustomFail('Scrubs.fn_Valid_StateAbbrev'),SALT33.HygieneErrors.Good);
EXPORT MakeFT_Invalid_Enh_Did_Src(SALT33.StrType s0) := FUNCTION
  RETURN  s0;
END;
EXPORT InValidFT_Invalid_Enh_Did_Src(SALT33.StrType s) := WHICH(((SALT33.StrType) s) NOT IN ['N','M','S']);
EXPORT InValidMessageFT_Invalid_Enh_Did_Src(UNSIGNED1 wh) := CHOOSE(wh,SALT33.HygieneErrors.NotInEnum('N|M|S'),SALT33.HygieneErrors.Good);
EXPORT MakeFT_Invalid_Zip(SALT33.StrType s0) := FUNCTION
  s1 := SALT33.stringfilter(s0,'0123456789-'); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_Invalid_Zip(SALT33.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT33.StringFilter(s,'0123456789-'))));
EXPORT InValidMessageFT_Invalid_Zip(UNSIGNED1 wh) := CHOOSE(wh,SALT33.HygieneErrors.NotInChars('0123456789-'),SALT33.HygieneErrors.Good);
EXPORT MakeFT_Invalid_Srce_Cd(SALT33.StrType s0) := FUNCTION
  s1 := SALT33.stringfilter(s0,'S0123456789'); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_Invalid_Srce_Cd(SALT33.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT33.StringFilter(s,'S0123456789'))));
EXPORT InValidMessageFT_Invalid_Srce_Cd(UNSIGNED1 wh) := CHOOSE(wh,SALT33.HygieneErrors.NotInChars('S0123456789'),SALT33.HygieneErrors.Good);
EXPORT MakeFT_Invalid_CurrentDate(SALT33.StrType s0) := FUNCTION
  RETURN  s0;
END;
EXPORT InValidFT_Invalid_CurrentDate(SALT33.StrType s) := WHICH(~Scrubs.fn_valid_Date(s)>0);
EXPORT InValidMessageFT_Invalid_CurrentDate(UNSIGNED1 wh) := CHOOSE(wh,SALT33.HygieneErrors.CustomFail('Scrubs.fn_valid_Date'),SALT33.HygieneErrors.Good);
EXPORT MakeFT_Invalid_Suffix(SALT33.StrType s0) := FUNCTION
  RETURN  s0;
END;
EXPORT InValidFT_Invalid_Suffix(SALT33.StrType s) := WHICH(((SALT33.StrType) s) NOT IN ['JR','SR','1','2','3','I','II','III','IV','V','VI','VII','VIII','IX','X','']);
EXPORT InValidMessageFT_Invalid_Suffix(UNSIGNED1 wh) := CHOOSE(wh,SALT33.HygieneErrors.NotInEnum('JR|SR|1|2|3|I|II|III|IV|V|VI|VII|VIII|IX|X|'),SALT33.HygieneErrors.Good);
EXPORT SALT33.StrType FieldName(UNSIGNED2 i) := CHOOSE(i,'dotid','dotscore','dotweight','empid','empscore','empweight','powid','powscore','powweight','proxid','proxscore','proxweight','seleid','selescore','seleweight','orgid','orgscore','orgweight','ultid','ultscore','ultweight','source_rec_id','batch','batch_date','dbcode','incident_num','incident_date','int_key','srce_cd','billing_code','case_num','jurisdiction','agency','source_doc','source_ref','additional_info','modified_date','entry_date','member_name','submitter_name','submitter_nickname','submitter_phone','submitter_fax','submitter_email','prop_addr','prop_city','prop_state','prop_zip','aid','did','did_score','bdid','bdid_score','title','fname','mname','lname','name_suffix','name_score','cname','prim_range','predir','prim_name','addr_suffix','postdir','unit_desig','sec_range','p_city_name','v_city_name','st','zip5','zip4','fips_state','fips_county','addr_rec_type','geo_lat','geo_long','cbsa','geo_blk','geo_match','cart','cr_sort_sz','lot','lot_order','dpbc','chk_digit','err_stat');
EXPORT FieldNum(SALT33.StrType fn) := CASE(fn,'dotid' => 0,'dotscore' => 1,'dotweight' => 2,'empid' => 3,'empscore' => 4,'empweight' => 5,'powid' => 6,'powscore' => 7,'powweight' => 8,'proxid' => 9,'proxscore' => 10,'proxweight' => 11,'seleid' => 12,'selescore' => 13,'seleweight' => 14,'orgid' => 15,'orgscore' => 16,'orgweight' => 17,'ultid' => 18,'ultscore' => 19,'ultweight' => 20,'source_rec_id' => 21,'batch' => 22,'batch_date' => 23,'dbcode' => 24,'incident_num' => 25,'incident_date' => 26,'int_key' => 27,'srce_cd' => 28,'billing_code' => 29,'case_num' => 30,'jurisdiction' => 31,'agency' => 32,'source_doc' => 33,'source_ref' => 34,'additional_info' => 35,'modified_date' => 36,'entry_date' => 37,'member_name' => 38,'submitter_name' => 39,'submitter_nickname' => 40,'submitter_phone' => 41,'submitter_fax' => 42,'submitter_email' => 43,'prop_addr' => 44,'prop_city' => 45,'prop_state' => 46,'prop_zip' => 47,'aid' => 48,'did' => 49,'did_score' => 50,'bdid' => 51,'bdid_score' => 52,'title' => 53,'fname' => 54,'mname' => 55,'lname' => 56,'name_suffix' => 57,'name_score' => 58,'cname' => 59,'prim_range' => 60,'predir' => 61,'prim_name' => 62,'addr_suffix' => 63,'postdir' => 64,'unit_desig' => 65,'sec_range' => 66,'p_city_name' => 67,'v_city_name' => 68,'st' => 69,'zip5' => 70,'zip4' => 71,'fips_state' => 72,'fips_county' => 73,'addr_rec_type' => 74,'geo_lat' => 75,'geo_long' => 76,'cbsa' => 77,'geo_blk' => 78,'geo_match' => 79,'cart' => 80,'cr_sort_sz' => 81,'lot' => 82,'lot_order' => 83,'dpbc' => 84,'chk_digit' => 85,'err_stat' => 86,0);
//Individual field level validation
EXPORT Make_dotid(SALT33.StrType s0) := MakeFT_Invalid_Num(s0);
EXPORT InValid_dotid(SALT33.StrType s) := InValidFT_Invalid_Num(s);
EXPORT InValidMessage_dotid(UNSIGNED1 wh) := InValidMessageFT_Invalid_Num(wh);
EXPORT Make_dotscore(SALT33.StrType s0) := MakeFT_Invalid_Num(s0);
EXPORT InValid_dotscore(SALT33.StrType s) := InValidFT_Invalid_Num(s);
EXPORT InValidMessage_dotscore(UNSIGNED1 wh) := InValidMessageFT_Invalid_Num(wh);
EXPORT Make_dotweight(SALT33.StrType s0) := MakeFT_Invalid_Num(s0);
EXPORT InValid_dotweight(SALT33.StrType s) := InValidFT_Invalid_Num(s);
EXPORT InValidMessage_dotweight(UNSIGNED1 wh) := InValidMessageFT_Invalid_Num(wh);
EXPORT Make_empid(SALT33.StrType s0) := MakeFT_Invalid_Num(s0);
EXPORT InValid_empid(SALT33.StrType s) := InValidFT_Invalid_Num(s);
EXPORT InValidMessage_empid(UNSIGNED1 wh) := InValidMessageFT_Invalid_Num(wh);
EXPORT Make_empscore(SALT33.StrType s0) := MakeFT_Invalid_Num(s0);
EXPORT InValid_empscore(SALT33.StrType s) := InValidFT_Invalid_Num(s);
EXPORT InValidMessage_empscore(UNSIGNED1 wh) := InValidMessageFT_Invalid_Num(wh);
EXPORT Make_empweight(SALT33.StrType s0) := MakeFT_Invalid_Num(s0);
EXPORT InValid_empweight(SALT33.StrType s) := InValidFT_Invalid_Num(s);
EXPORT InValidMessage_empweight(UNSIGNED1 wh) := InValidMessageFT_Invalid_Num(wh);
EXPORT Make_powid(SALT33.StrType s0) := MakeFT_Invalid_Num(s0);
EXPORT InValid_powid(SALT33.StrType s) := InValidFT_Invalid_Num(s);
EXPORT InValidMessage_powid(UNSIGNED1 wh) := InValidMessageFT_Invalid_Num(wh);
EXPORT Make_powscore(SALT33.StrType s0) := MakeFT_Invalid_Num(s0);
EXPORT InValid_powscore(SALT33.StrType s) := InValidFT_Invalid_Num(s);
EXPORT InValidMessage_powscore(UNSIGNED1 wh) := InValidMessageFT_Invalid_Num(wh);
EXPORT Make_powweight(SALT33.StrType s0) := MakeFT_Invalid_Num(s0);
EXPORT InValid_powweight(SALT33.StrType s) := InValidFT_Invalid_Num(s);
EXPORT InValidMessage_powweight(UNSIGNED1 wh) := InValidMessageFT_Invalid_Num(wh);
EXPORT Make_proxid(SALT33.StrType s0) := MakeFT_Invalid_Num(s0);
EXPORT InValid_proxid(SALT33.StrType s) := InValidFT_Invalid_Num(s);
EXPORT InValidMessage_proxid(UNSIGNED1 wh) := InValidMessageFT_Invalid_Num(wh);
EXPORT Make_proxscore(SALT33.StrType s0) := MakeFT_Invalid_Num(s0);
EXPORT InValid_proxscore(SALT33.StrType s) := InValidFT_Invalid_Num(s);
EXPORT InValidMessage_proxscore(UNSIGNED1 wh) := InValidMessageFT_Invalid_Num(wh);
EXPORT Make_proxweight(SALT33.StrType s0) := MakeFT_Invalid_Num(s0);
EXPORT InValid_proxweight(SALT33.StrType s) := InValidFT_Invalid_Num(s);
EXPORT InValidMessage_proxweight(UNSIGNED1 wh) := InValidMessageFT_Invalid_Num(wh);
EXPORT Make_seleid(SALT33.StrType s0) := MakeFT_Invalid_Num(s0);
EXPORT InValid_seleid(SALT33.StrType s) := InValidFT_Invalid_Num(s);
EXPORT InValidMessage_seleid(UNSIGNED1 wh) := InValidMessageFT_Invalid_Num(wh);
EXPORT Make_selescore(SALT33.StrType s0) := MakeFT_Invalid_Num(s0);
EXPORT InValid_selescore(SALT33.StrType s) := InValidFT_Invalid_Num(s);
EXPORT InValidMessage_selescore(UNSIGNED1 wh) := InValidMessageFT_Invalid_Num(wh);
EXPORT Make_seleweight(SALT33.StrType s0) := MakeFT_Invalid_Num(s0);
EXPORT InValid_seleweight(SALT33.StrType s) := InValidFT_Invalid_Num(s);
EXPORT InValidMessage_seleweight(UNSIGNED1 wh) := InValidMessageFT_Invalid_Num(wh);
EXPORT Make_orgid(SALT33.StrType s0) := MakeFT_Invalid_Num(s0);
EXPORT InValid_orgid(SALT33.StrType s) := InValidFT_Invalid_Num(s);
EXPORT InValidMessage_orgid(UNSIGNED1 wh) := InValidMessageFT_Invalid_Num(wh);
EXPORT Make_orgscore(SALT33.StrType s0) := MakeFT_Invalid_Num(s0);
EXPORT InValid_orgscore(SALT33.StrType s) := InValidFT_Invalid_Num(s);
EXPORT InValidMessage_orgscore(UNSIGNED1 wh) := InValidMessageFT_Invalid_Num(wh);
EXPORT Make_orgweight(SALT33.StrType s0) := MakeFT_Invalid_Num(s0);
EXPORT InValid_orgweight(SALT33.StrType s) := InValidFT_Invalid_Num(s);
EXPORT InValidMessage_orgweight(UNSIGNED1 wh) := InValidMessageFT_Invalid_Num(wh);
EXPORT Make_ultid(SALT33.StrType s0) := MakeFT_Invalid_Num(s0);
EXPORT InValid_ultid(SALT33.StrType s) := InValidFT_Invalid_Num(s);
EXPORT InValidMessage_ultid(UNSIGNED1 wh) := InValidMessageFT_Invalid_Num(wh);
EXPORT Make_ultscore(SALT33.StrType s0) := MakeFT_Invalid_Num(s0);
EXPORT InValid_ultscore(SALT33.StrType s) := InValidFT_Invalid_Num(s);
EXPORT InValidMessage_ultscore(UNSIGNED1 wh) := InValidMessageFT_Invalid_Num(wh);
EXPORT Make_ultweight(SALT33.StrType s0) := MakeFT_Invalid_Num(s0);
EXPORT InValid_ultweight(SALT33.StrType s) := InValidFT_Invalid_Num(s);
EXPORT InValidMessage_ultweight(UNSIGNED1 wh) := InValidMessageFT_Invalid_Num(wh);
EXPORT Make_source_rec_id(SALT33.StrType s0) := MakeFT_Invalid_Num(s0);
EXPORT InValid_source_rec_id(SALT33.StrType s) := InValidFT_Invalid_Num(s);
EXPORT InValidMessage_source_rec_id(UNSIGNED1 wh) := InValidMessageFT_Invalid_Num(wh);
EXPORT Make_batch(SALT33.StrType s0) := MakeFT_Invalid_Batch(s0);
EXPORT InValid_batch(SALT33.StrType s) := InValidFT_Invalid_Batch(s);
EXPORT InValidMessage_batch(UNSIGNED1 wh) := InValidMessageFT_Invalid_Batch(wh);
EXPORT Make_batch_date(SALT33.StrType s0) := MakeFT_Invalid_CurrentDate(s0);
EXPORT InValid_batch_date(SALT33.StrType s) := InValidFT_Invalid_CurrentDate(s);
EXPORT InValidMessage_batch_date(UNSIGNED1 wh) := InValidMessageFT_Invalid_CurrentDate(wh);
EXPORT Make_dbcode(SALT33.StrType s0) := MakeFT_Invalid_DBCode(s0);
EXPORT InValid_dbcode(SALT33.StrType s) := InValidFT_Invalid_DBCode(s);
EXPORT InValidMessage_dbcode(UNSIGNED1 wh) := InValidMessageFT_Invalid_DBCode(wh);
EXPORT Make_incident_num(SALT33.StrType s0) := MakeFT_Invalid_Num(s0);
EXPORT InValid_incident_num(SALT33.StrType s) := InValidFT_Invalid_Num(s);
EXPORT InValidMessage_incident_num(UNSIGNED1 wh) := InValidMessageFT_Invalid_Num(wh);
EXPORT Make_incident_date(SALT33.StrType s0) := MakeFT_Invalid_CurrentDate(s0);
EXPORT InValid_incident_date(SALT33.StrType s) := InValidFT_Invalid_CurrentDate(s);
EXPORT InValidMessage_incident_date(UNSIGNED1 wh) := InValidMessageFT_Invalid_CurrentDate(wh);
EXPORT Make_int_key(SALT33.StrType s0) := MakeFT_Invalid_Num(s0);
EXPORT InValid_int_key(SALT33.StrType s) := InValidFT_Invalid_Num(s);
EXPORT InValidMessage_int_key(UNSIGNED1 wh) := InValidMessageFT_Invalid_Num(wh);
EXPORT Make_srce_cd(SALT33.StrType s0) := MakeFT_Invalid_Srce_Cd(s0);
EXPORT InValid_srce_cd(SALT33.StrType s) := InValidFT_Invalid_Srce_Cd(s);
EXPORT InValidMessage_srce_cd(UNSIGNED1 wh) := InValidMessageFT_Invalid_Srce_Cd(wh);
EXPORT Make_billing_code(SALT33.StrType s0) := s0;
EXPORT InValid_billing_code(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_billing_code(UNSIGNED1 wh) := '';
EXPORT Make_case_num(SALT33.StrType s0) := s0;
EXPORT InValid_case_num(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_case_num(UNSIGNED1 wh) := '';
EXPORT Make_jurisdiction(SALT33.StrType s0) := s0;
EXPORT InValid_jurisdiction(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_jurisdiction(UNSIGNED1 wh) := '';
EXPORT Make_agency(SALT33.StrType s0) := s0;
EXPORT InValid_agency(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_agency(UNSIGNED1 wh) := '';
EXPORT Make_source_doc(SALT33.StrType s0) := s0;
EXPORT InValid_source_doc(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_source_doc(UNSIGNED1 wh) := '';
EXPORT Make_source_ref(SALT33.StrType s0) := s0;
EXPORT InValid_source_ref(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_source_ref(UNSIGNED1 wh) := '';
EXPORT Make_additional_info(SALT33.StrType s0) := s0;
EXPORT InValid_additional_info(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_additional_info(UNSIGNED1 wh) := '';
EXPORT Make_modified_date(SALT33.StrType s0) := MakeFT_Invalid_CurrentDate(s0);
EXPORT InValid_modified_date(SALT33.StrType s) := InValidFT_Invalid_CurrentDate(s);
EXPORT InValidMessage_modified_date(UNSIGNED1 wh) := InValidMessageFT_Invalid_CurrentDate(wh);
EXPORT Make_entry_date(SALT33.StrType s0) := MakeFT_Invalid_CurrentDate(s0);
EXPORT InValid_entry_date(SALT33.StrType s) := InValidFT_Invalid_CurrentDate(s);
EXPORT InValidMessage_entry_date(UNSIGNED1 wh) := InValidMessageFT_Invalid_CurrentDate(wh);
EXPORT Make_member_name(SALT33.StrType s0) := s0;
EXPORT InValid_member_name(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_member_name(UNSIGNED1 wh) := '';
EXPORT Make_submitter_name(SALT33.StrType s0) := s0;
EXPORT InValid_submitter_name(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_submitter_name(UNSIGNED1 wh) := '';
EXPORT Make_submitter_nickname(SALT33.StrType s0) := s0;
EXPORT InValid_submitter_nickname(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_submitter_nickname(UNSIGNED1 wh) := '';
EXPORT Make_submitter_phone(SALT33.StrType s0) := MakeFT_Invalid_Num(s0);
EXPORT InValid_submitter_phone(SALT33.StrType s) := InValidFT_Invalid_Num(s);
EXPORT InValidMessage_submitter_phone(UNSIGNED1 wh) := InValidMessageFT_Invalid_Num(wh);
EXPORT Make_submitter_fax(SALT33.StrType s0) := MakeFT_Invalid_Num(s0);
EXPORT InValid_submitter_fax(SALT33.StrType s) := InValidFT_Invalid_Num(s);
EXPORT InValidMessage_submitter_fax(UNSIGNED1 wh) := InValidMessageFT_Invalid_Num(wh);
EXPORT Make_submitter_email(SALT33.StrType s0) := s0;
EXPORT InValid_submitter_email(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_submitter_email(UNSIGNED1 wh) := '';
EXPORT Make_prop_addr(SALT33.StrType s0) := s0;
EXPORT InValid_prop_addr(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_prop_addr(UNSIGNED1 wh) := '';
EXPORT Make_prop_city(SALT33.StrType s0) := s0;
EXPORT InValid_prop_city(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_prop_city(UNSIGNED1 wh) := '';
EXPORT Make_prop_state(SALT33.StrType s0) := MakeFT_Invalid_State(s0);
EXPORT InValid_prop_state(SALT33.StrType s) := InValidFT_Invalid_State(s);
EXPORT InValidMessage_prop_state(UNSIGNED1 wh) := InValidMessageFT_Invalid_State(wh);
EXPORT Make_prop_zip(SALT33.StrType s0) := MakeFT_Invalid_Zip(s0);
EXPORT InValid_prop_zip(SALT33.StrType s) := InValidFT_Invalid_Zip(s);
EXPORT InValidMessage_prop_zip(UNSIGNED1 wh) := InValidMessageFT_Invalid_Zip(wh);
EXPORT Make_aid(SALT33.StrType s0) := MakeFT_Invalid_Num(s0);
EXPORT InValid_aid(SALT33.StrType s) := InValidFT_Invalid_Num(s);
EXPORT InValidMessage_aid(UNSIGNED1 wh) := InValidMessageFT_Invalid_Num(wh);
EXPORT Make_did(SALT33.StrType s0) := MakeFT_Invalid_Num(s0);
EXPORT InValid_did(SALT33.StrType s) := InValidFT_Invalid_Num(s);
EXPORT InValidMessage_did(UNSIGNED1 wh) := InValidMessageFT_Invalid_Num(wh);
EXPORT Make_did_score(SALT33.StrType s0) := MakeFT_Invalid_Num(s0);
EXPORT InValid_did_score(SALT33.StrType s) := InValidFT_Invalid_Num(s);
EXPORT InValidMessage_did_score(UNSIGNED1 wh) := InValidMessageFT_Invalid_Num(wh);
EXPORT Make_bdid(SALT33.StrType s0) := MakeFT_Invalid_Num(s0);
EXPORT InValid_bdid(SALT33.StrType s) := InValidFT_Invalid_Num(s);
EXPORT InValidMessage_bdid(UNSIGNED1 wh) := InValidMessageFT_Invalid_Num(wh);
EXPORT Make_bdid_score(SALT33.StrType s0) := MakeFT_Invalid_Num(s0);
EXPORT InValid_bdid_score(SALT33.StrType s) := InValidFT_Invalid_Num(s);
EXPORT InValidMessage_bdid_score(UNSIGNED1 wh) := InValidMessageFT_Invalid_Num(wh);
EXPORT Make_title(SALT33.StrType s0) := s0;
EXPORT InValid_title(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_title(UNSIGNED1 wh) := '';
EXPORT Make_fname(SALT33.StrType s0) := s0;
EXPORT InValid_fname(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_fname(UNSIGNED1 wh) := '';
EXPORT Make_mname(SALT33.StrType s0) := s0;
EXPORT InValid_mname(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_mname(UNSIGNED1 wh) := '';
EXPORT Make_lname(SALT33.StrType s0) := s0;
EXPORT InValid_lname(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_lname(UNSIGNED1 wh) := '';
EXPORT Make_name_suffix(SALT33.StrType s0) := MakeFT_Invalid_Suffix(s0);
EXPORT InValid_name_suffix(SALT33.StrType s) := InValidFT_Invalid_Suffix(s);
EXPORT InValidMessage_name_suffix(UNSIGNED1 wh) := InValidMessageFT_Invalid_Suffix(wh);
EXPORT Make_name_score(SALT33.StrType s0) := s0;
EXPORT InValid_name_score(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_name_score(UNSIGNED1 wh) := '';
EXPORT Make_cname(SALT33.StrType s0) := s0;
EXPORT InValid_cname(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_cname(UNSIGNED1 wh) := '';
EXPORT Make_prim_range(SALT33.StrType s0) := s0;
EXPORT InValid_prim_range(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_prim_range(UNSIGNED1 wh) := '';
EXPORT Make_predir(SALT33.StrType s0) := s0;
EXPORT InValid_predir(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_predir(UNSIGNED1 wh) := '';
EXPORT Make_prim_name(SALT33.StrType s0) := s0;
EXPORT InValid_prim_name(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_prim_name(UNSIGNED1 wh) := '';
EXPORT Make_addr_suffix(SALT33.StrType s0) := s0;
EXPORT InValid_addr_suffix(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_addr_suffix(UNSIGNED1 wh) := '';
EXPORT Make_postdir(SALT33.StrType s0) := s0;
EXPORT InValid_postdir(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_postdir(UNSIGNED1 wh) := '';
EXPORT Make_unit_desig(SALT33.StrType s0) := s0;
EXPORT InValid_unit_desig(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_unit_desig(UNSIGNED1 wh) := '';
EXPORT Make_sec_range(SALT33.StrType s0) := s0;
EXPORT InValid_sec_range(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_sec_range(UNSIGNED1 wh) := '';
EXPORT Make_p_city_name(SALT33.StrType s0) := s0;
EXPORT InValid_p_city_name(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_p_city_name(UNSIGNED1 wh) := '';
EXPORT Make_v_city_name(SALT33.StrType s0) := s0;
EXPORT InValid_v_city_name(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_v_city_name(UNSIGNED1 wh) := '';
EXPORT Make_st(SALT33.StrType s0) := s0;
EXPORT InValid_st(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_st(UNSIGNED1 wh) := '';
EXPORT Make_zip5(SALT33.StrType s0) := s0;
EXPORT InValid_zip5(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_zip5(UNSIGNED1 wh) := '';
EXPORT Make_zip4(SALT33.StrType s0) := s0;
EXPORT InValid_zip4(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_zip4(UNSIGNED1 wh) := '';
EXPORT Make_fips_state(SALT33.StrType s0) := s0;
EXPORT InValid_fips_state(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_fips_state(UNSIGNED1 wh) := '';
EXPORT Make_fips_county(SALT33.StrType s0) := s0;
EXPORT InValid_fips_county(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_fips_county(UNSIGNED1 wh) := '';
EXPORT Make_addr_rec_type(SALT33.StrType s0) := s0;
EXPORT InValid_addr_rec_type(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_addr_rec_type(UNSIGNED1 wh) := '';
EXPORT Make_geo_lat(SALT33.StrType s0) := s0;
EXPORT InValid_geo_lat(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_geo_lat(UNSIGNED1 wh) := '';
EXPORT Make_geo_long(SALT33.StrType s0) := s0;
EXPORT InValid_geo_long(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_geo_long(UNSIGNED1 wh) := '';
EXPORT Make_cbsa(SALT33.StrType s0) := s0;
EXPORT InValid_cbsa(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_cbsa(UNSIGNED1 wh) := '';
EXPORT Make_geo_blk(SALT33.StrType s0) := s0;
EXPORT InValid_geo_blk(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_geo_blk(UNSIGNED1 wh) := '';
EXPORT Make_geo_match(SALT33.StrType s0) := s0;
EXPORT InValid_geo_match(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_geo_match(UNSIGNED1 wh) := '';
EXPORT Make_cart(SALT33.StrType s0) := s0;
EXPORT InValid_cart(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_cart(UNSIGNED1 wh) := '';
EXPORT Make_cr_sort_sz(SALT33.StrType s0) := s0;
EXPORT InValid_cr_sort_sz(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_cr_sort_sz(UNSIGNED1 wh) := '';
EXPORT Make_lot(SALT33.StrType s0) := s0;
EXPORT InValid_lot(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_lot(UNSIGNED1 wh) := '';
EXPORT Make_lot_order(SALT33.StrType s0) := s0;
EXPORT InValid_lot_order(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_lot_order(UNSIGNED1 wh) := '';
EXPORT Make_dpbc(SALT33.StrType s0) := s0;
EXPORT InValid_dpbc(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_dpbc(UNSIGNED1 wh) := '';
EXPORT Make_chk_digit(SALT33.StrType s0) := s0;
EXPORT InValid_chk_digit(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_chk_digit(UNSIGNED1 wh) := '';
EXPORT Make_err_stat(SALT33.StrType s0) := s0;
EXPORT InValid_err_stat(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_err_stat(UNSIGNED1 wh) := '';
// This macro will compute and count field level differences based upon a pivot expression
export MAC_CountDifferencesByPivot(in_left,in_right,pivot_exp,bad_pivots,out_counts) := MACRO
  IMPORT SALT33,Scrubs_SANCTN_NPKeys;
//Find those highly occuring pivot values to remove them from consideration
#uniquename(tr)
  %tr% := table(in_left+in_right,{ val := pivot_exp; });
#uniquename(r1)
  %r1% := record
    %tr%.val;    unsigned Cnt := COUNT(GROUP);
  end;
#uniquename(t1)
  %t1% := table(%tr%,%r1%,val,local); // Pre-aggregate before distribute
#uniquename(r2)
  %r2% := record
    %t1%.val;    unsigned Cnt := SUM(GROUP,%t1%.Cnt);
  end;
#uniquename(t2)
  %t2% := table(%t1%,%r2%,val); // Now do global aggregate
Bad_Pivots := %t2%(Cnt>100);
#uniquename(dl)
  %dl% := RECORD
    BOOLEAN Diff_dotid;
    BOOLEAN Diff_dotscore;
    BOOLEAN Diff_dotweight;
    BOOLEAN Diff_empid;
    BOOLEAN Diff_empscore;
    BOOLEAN Diff_empweight;
    BOOLEAN Diff_powid;
    BOOLEAN Diff_powscore;
    BOOLEAN Diff_powweight;
    BOOLEAN Diff_proxid;
    BOOLEAN Diff_proxscore;
    BOOLEAN Diff_proxweight;
    BOOLEAN Diff_seleid;
    BOOLEAN Diff_selescore;
    BOOLEAN Diff_seleweight;
    BOOLEAN Diff_orgid;
    BOOLEAN Diff_orgscore;
    BOOLEAN Diff_orgweight;
    BOOLEAN Diff_ultid;
    BOOLEAN Diff_ultscore;
    BOOLEAN Diff_ultweight;
    BOOLEAN Diff_source_rec_id;
    BOOLEAN Diff_batch;
    BOOLEAN Diff_batch_date;
    BOOLEAN Diff_dbcode;
    BOOLEAN Diff_incident_num;
    BOOLEAN Diff_incident_date;
    BOOLEAN Diff_int_key;
    BOOLEAN Diff_srce_cd;
    BOOLEAN Diff_billing_code;
    BOOLEAN Diff_case_num;
    BOOLEAN Diff_jurisdiction;
    BOOLEAN Diff_agency;
    BOOLEAN Diff_source_doc;
    BOOLEAN Diff_source_ref;
    BOOLEAN Diff_additional_info;
    BOOLEAN Diff_modified_date;
    BOOLEAN Diff_entry_date;
    BOOLEAN Diff_member_name;
    BOOLEAN Diff_submitter_name;
    BOOLEAN Diff_submitter_nickname;
    BOOLEAN Diff_submitter_phone;
    BOOLEAN Diff_submitter_fax;
    BOOLEAN Diff_submitter_email;
    BOOLEAN Diff_prop_addr;
    BOOLEAN Diff_prop_city;
    BOOLEAN Diff_prop_state;
    BOOLEAN Diff_prop_zip;
    BOOLEAN Diff_aid;
    BOOLEAN Diff_did;
    BOOLEAN Diff_did_score;
    BOOLEAN Diff_bdid;
    BOOLEAN Diff_bdid_score;
    BOOLEAN Diff_title;
    BOOLEAN Diff_fname;
    BOOLEAN Diff_mname;
    BOOLEAN Diff_lname;
    BOOLEAN Diff_name_suffix;
    BOOLEAN Diff_name_score;
    BOOLEAN Diff_cname;
    BOOLEAN Diff_prim_range;
    BOOLEAN Diff_predir;
    BOOLEAN Diff_prim_name;
    BOOLEAN Diff_addr_suffix;
    BOOLEAN Diff_postdir;
    BOOLEAN Diff_unit_desig;
    BOOLEAN Diff_sec_range;
    BOOLEAN Diff_p_city_name;
    BOOLEAN Diff_v_city_name;
    BOOLEAN Diff_st;
    BOOLEAN Diff_zip5;
    BOOLEAN Diff_zip4;
    BOOLEAN Diff_fips_state;
    BOOLEAN Diff_fips_county;
    BOOLEAN Diff_addr_rec_type;
    BOOLEAN Diff_geo_lat;
    BOOLEAN Diff_geo_long;
    BOOLEAN Diff_cbsa;
    BOOLEAN Diff_geo_blk;
    BOOLEAN Diff_geo_match;
    BOOLEAN Diff_cart;
    BOOLEAN Diff_cr_sort_sz;
    BOOLEAN Diff_lot;
    BOOLEAN Diff_lot_order;
    BOOLEAN Diff_dpbc;
    BOOLEAN Diff_chk_digit;
    BOOLEAN Diff_err_stat;
    SALT33.StrType SourceField {MAXLENGTH(30)};
    UNSIGNED Num_Diffs;
    SALT33.StrType Val {MAXLENGTH(1024)};
  END;
#uniquename(fd)
  %dl% %fd%(in_left le,in_right ri) := TRANSFORM
    SELF.Diff_dotid := le.dotid <> ri.dotid;
    SELF.Diff_dotscore := le.dotscore <> ri.dotscore;
    SELF.Diff_dotweight := le.dotweight <> ri.dotweight;
    SELF.Diff_empid := le.empid <> ri.empid;
    SELF.Diff_empscore := le.empscore <> ri.empscore;
    SELF.Diff_empweight := le.empweight <> ri.empweight;
    SELF.Diff_powid := le.powid <> ri.powid;
    SELF.Diff_powscore := le.powscore <> ri.powscore;
    SELF.Diff_powweight := le.powweight <> ri.powweight;
    SELF.Diff_proxid := le.proxid <> ri.proxid;
    SELF.Diff_proxscore := le.proxscore <> ri.proxscore;
    SELF.Diff_proxweight := le.proxweight <> ri.proxweight;
    SELF.Diff_seleid := le.seleid <> ri.seleid;
    SELF.Diff_selescore := le.selescore <> ri.selescore;
    SELF.Diff_seleweight := le.seleweight <> ri.seleweight;
    SELF.Diff_orgid := le.orgid <> ri.orgid;
    SELF.Diff_orgscore := le.orgscore <> ri.orgscore;
    SELF.Diff_orgweight := le.orgweight <> ri.orgweight;
    SELF.Diff_ultid := le.ultid <> ri.ultid;
    SELF.Diff_ultscore := le.ultscore <> ri.ultscore;
    SELF.Diff_ultweight := le.ultweight <> ri.ultweight;
    SELF.Diff_source_rec_id := le.source_rec_id <> ri.source_rec_id;
    SELF.Diff_batch := le.batch <> ri.batch;
    SELF.Diff_batch_date := le.batch_date <> ri.batch_date;
    SELF.Diff_dbcode := le.dbcode <> ri.dbcode;
    SELF.Diff_incident_num := le.incident_num <> ri.incident_num;
    SELF.Diff_incident_date := le.incident_date <> ri.incident_date;
    SELF.Diff_int_key := le.int_key <> ri.int_key;
    SELF.Diff_srce_cd := le.srce_cd <> ri.srce_cd;
    SELF.Diff_billing_code := le.billing_code <> ri.billing_code;
    SELF.Diff_case_num := le.case_num <> ri.case_num;
    SELF.Diff_jurisdiction := le.jurisdiction <> ri.jurisdiction;
    SELF.Diff_agency := le.agency <> ri.agency;
    SELF.Diff_source_doc := le.source_doc <> ri.source_doc;
    SELF.Diff_source_ref := le.source_ref <> ri.source_ref;
    SELF.Diff_additional_info := le.additional_info <> ri.additional_info;
    SELF.Diff_modified_date := le.modified_date <> ri.modified_date;
    SELF.Diff_entry_date := le.entry_date <> ri.entry_date;
    SELF.Diff_member_name := le.member_name <> ri.member_name;
    SELF.Diff_submitter_name := le.submitter_name <> ri.submitter_name;
    SELF.Diff_submitter_nickname := le.submitter_nickname <> ri.submitter_nickname;
    SELF.Diff_submitter_phone := le.submitter_phone <> ri.submitter_phone;
    SELF.Diff_submitter_fax := le.submitter_fax <> ri.submitter_fax;
    SELF.Diff_submitter_email := le.submitter_email <> ri.submitter_email;
    SELF.Diff_prop_addr := le.prop_addr <> ri.prop_addr;
    SELF.Diff_prop_city := le.prop_city <> ri.prop_city;
    SELF.Diff_prop_state := le.prop_state <> ri.prop_state;
    SELF.Diff_prop_zip := le.prop_zip <> ri.prop_zip;
    SELF.Diff_aid := le.aid <> ri.aid;
    SELF.Diff_did := le.did <> ri.did;
    SELF.Diff_did_score := le.did_score <> ri.did_score;
    SELF.Diff_bdid := le.bdid <> ri.bdid;
    SELF.Diff_bdid_score := le.bdid_score <> ri.bdid_score;
    SELF.Diff_title := le.title <> ri.title;
    SELF.Diff_fname := le.fname <> ri.fname;
    SELF.Diff_mname := le.mname <> ri.mname;
    SELF.Diff_lname := le.lname <> ri.lname;
    SELF.Diff_name_suffix := le.name_suffix <> ri.name_suffix;
    SELF.Diff_name_score := le.name_score <> ri.name_score;
    SELF.Diff_cname := le.cname <> ri.cname;
    SELF.Diff_prim_range := le.prim_range <> ri.prim_range;
    SELF.Diff_predir := le.predir <> ri.predir;
    SELF.Diff_prim_name := le.prim_name <> ri.prim_name;
    SELF.Diff_addr_suffix := le.addr_suffix <> ri.addr_suffix;
    SELF.Diff_postdir := le.postdir <> ri.postdir;
    SELF.Diff_unit_desig := le.unit_desig <> ri.unit_desig;
    SELF.Diff_sec_range := le.sec_range <> ri.sec_range;
    SELF.Diff_p_city_name := le.p_city_name <> ri.p_city_name;
    SELF.Diff_v_city_name := le.v_city_name <> ri.v_city_name;
    SELF.Diff_st := le.st <> ri.st;
    SELF.Diff_zip5 := le.zip5 <> ri.zip5;
    SELF.Diff_zip4 := le.zip4 <> ri.zip4;
    SELF.Diff_fips_state := le.fips_state <> ri.fips_state;
    SELF.Diff_fips_county := le.fips_county <> ri.fips_county;
    SELF.Diff_addr_rec_type := le.addr_rec_type <> ri.addr_rec_type;
    SELF.Diff_geo_lat := le.geo_lat <> ri.geo_lat;
    SELF.Diff_geo_long := le.geo_long <> ri.geo_long;
    SELF.Diff_cbsa := le.cbsa <> ri.cbsa;
    SELF.Diff_geo_blk := le.geo_blk <> ri.geo_blk;
    SELF.Diff_geo_match := le.geo_match <> ri.geo_match;
    SELF.Diff_cart := le.cart <> ri.cart;
    SELF.Diff_cr_sort_sz := le.cr_sort_sz <> ri.cr_sort_sz;
    SELF.Diff_lot := le.lot <> ri.lot;
    SELF.Diff_lot_order := le.lot_order <> ri.lot_order;
    SELF.Diff_dpbc := le.dpbc <> ri.dpbc;
    SELF.Diff_chk_digit := le.chk_digit <> ri.chk_digit;
    SELF.Diff_err_stat := le.err_stat <> ri.err_stat;
    SELF.Val := (SALT33.StrType)evaluate(le,pivot_exp);
    SELF.SourceField := le.dbcode;
    SELF.Num_Diffs := 0+ IF( SELF.Diff_dotid,1,0)+ IF( SELF.Diff_dotscore,1,0)+ IF( SELF.Diff_dotweight,1,0)+ IF( SELF.Diff_empid,1,0)+ IF( SELF.Diff_empscore,1,0)+ IF( SELF.Diff_empweight,1,0)+ IF( SELF.Diff_powid,1,0)+ IF( SELF.Diff_powscore,1,0)+ IF( SELF.Diff_powweight,1,0)+ IF( SELF.Diff_proxid,1,0)+ IF( SELF.Diff_proxscore,1,0)+ IF( SELF.Diff_proxweight,1,0)+ IF( SELF.Diff_seleid,1,0)+ IF( SELF.Diff_selescore,1,0)+ IF( SELF.Diff_seleweight,1,0)+ IF( SELF.Diff_orgid,1,0)+ IF( SELF.Diff_orgscore,1,0)+ IF( SELF.Diff_orgweight,1,0)+ IF( SELF.Diff_ultid,1,0)+ IF( SELF.Diff_ultscore,1,0)+ IF( SELF.Diff_ultweight,1,0)+ IF( SELF.Diff_source_rec_id,1,0)+ IF( SELF.Diff_batch,1,0)+ IF( SELF.Diff_batch_date,1,0)+ IF( SELF.Diff_dbcode,1,0)+ IF( SELF.Diff_incident_num,1,0)+ IF( SELF.Diff_incident_date,1,0)+ IF( SELF.Diff_int_key,1,0)+ IF( SELF.Diff_srce_cd,1,0)+ IF( SELF.Diff_billing_code,1,0)+ IF( SELF.Diff_case_num,1,0)+ IF( SELF.Diff_jurisdiction,1,0)+ IF( SELF.Diff_agency,1,0)+ IF( SELF.Diff_source_doc,1,0)+ IF( SELF.Diff_source_ref,1,0)+ IF( SELF.Diff_additional_info,1,0)+ IF( SELF.Diff_modified_date,1,0)+ IF( SELF.Diff_entry_date,1,0)+ IF( SELF.Diff_member_name,1,0)+ IF( SELF.Diff_submitter_name,1,0)+ IF( SELF.Diff_submitter_nickname,1,0)+ IF( SELF.Diff_submitter_phone,1,0)+ IF( SELF.Diff_submitter_fax,1,0)+ IF( SELF.Diff_submitter_email,1,0)+ IF( SELF.Diff_prop_addr,1,0)+ IF( SELF.Diff_prop_city,1,0)+ IF( SELF.Diff_prop_state,1,0)+ IF( SELF.Diff_prop_zip,1,0)+ IF( SELF.Diff_aid,1,0)+ IF( SELF.Diff_did,1,0)+ IF( SELF.Diff_did_score,1,0)+ IF( SELF.Diff_bdid,1,0)+ IF( SELF.Diff_bdid_score,1,0)+ IF( SELF.Diff_title,1,0)+ IF( SELF.Diff_fname,1,0)+ IF( SELF.Diff_mname,1,0)+ IF( SELF.Diff_lname,1,0)+ IF( SELF.Diff_name_suffix,1,0)+ IF( SELF.Diff_name_score,1,0)+ IF( SELF.Diff_cname,1,0)+ IF( SELF.Diff_prim_range,1,0)+ IF( SELF.Diff_predir,1,0)+ IF( SELF.Diff_prim_name,1,0)+ IF( SELF.Diff_addr_suffix,1,0)+ IF( SELF.Diff_postdir,1,0)+ IF( SELF.Diff_unit_desig,1,0)+ IF( SELF.Diff_sec_range,1,0)+ IF( SELF.Diff_p_city_name,1,0)+ IF( SELF.Diff_v_city_name,1,0)+ IF( SELF.Diff_st,1,0)+ IF( SELF.Diff_zip5,1,0)+ IF( SELF.Diff_zip4,1,0)+ IF( SELF.Diff_fips_state,1,0)+ IF( SELF.Diff_fips_county,1,0)+ IF( SELF.Diff_addr_rec_type,1,0)+ IF( SELF.Diff_geo_lat,1,0)+ IF( SELF.Diff_geo_long,1,0)+ IF( SELF.Diff_cbsa,1,0)+ IF( SELF.Diff_geo_blk,1,0)+ IF( SELF.Diff_geo_match,1,0)+ IF( SELF.Diff_cart,1,0)+ IF( SELF.Diff_cr_sort_sz,1,0)+ IF( SELF.Diff_lot,1,0)+ IF( SELF.Diff_lot_order,1,0)+ IF( SELF.Diff_dpbc,1,0)+ IF( SELF.Diff_chk_digit,1,0)+ IF( SELF.Diff_err_stat,1,0);
  END;
// Now need to remove bad pivots from comparison
#uniquename(L)
  %L% := JOIN(in_left,bad_pivots,evaluate(LEFT,pivot_exp)=right.val,transform(left),left only,lookup);
#uniquename(R)
  %R% := JOIN(in_right,bad_pivots,evaluate(LEFT,pivot_exp)=right.val,transform(left),left only,lookup);
#uniquename(DiffL)
  %DiffL% := JOIN(%L%,%R%,evaluate(left,pivot_exp)=evaluate(right,pivot_exp),%fd%(left,right),hash);
#uniquename(Closest)
  %Closest% := DEDUP(SORT(%DiffL%,Val,Num_Diffs,local),Val,local); // Join will have distributed by pivot_exp
#uniquename(AggRec)
  %AggRec% := RECORD
    Count_Diff_dotid := COUNT(GROUP,%Closest%.Diff_dotid);
    Count_Diff_dotscore := COUNT(GROUP,%Closest%.Diff_dotscore);
    Count_Diff_dotweight := COUNT(GROUP,%Closest%.Diff_dotweight);
    Count_Diff_empid := COUNT(GROUP,%Closest%.Diff_empid);
    Count_Diff_empscore := COUNT(GROUP,%Closest%.Diff_empscore);
    Count_Diff_empweight := COUNT(GROUP,%Closest%.Diff_empweight);
    Count_Diff_powid := COUNT(GROUP,%Closest%.Diff_powid);
    Count_Diff_powscore := COUNT(GROUP,%Closest%.Diff_powscore);
    Count_Diff_powweight := COUNT(GROUP,%Closest%.Diff_powweight);
    Count_Diff_proxid := COUNT(GROUP,%Closest%.Diff_proxid);
    Count_Diff_proxscore := COUNT(GROUP,%Closest%.Diff_proxscore);
    Count_Diff_proxweight := COUNT(GROUP,%Closest%.Diff_proxweight);
    Count_Diff_seleid := COUNT(GROUP,%Closest%.Diff_seleid);
    Count_Diff_selescore := COUNT(GROUP,%Closest%.Diff_selescore);
    Count_Diff_seleweight := COUNT(GROUP,%Closest%.Diff_seleweight);
    Count_Diff_orgid := COUNT(GROUP,%Closest%.Diff_orgid);
    Count_Diff_orgscore := COUNT(GROUP,%Closest%.Diff_orgscore);
    Count_Diff_orgweight := COUNT(GROUP,%Closest%.Diff_orgweight);
    Count_Diff_ultid := COUNT(GROUP,%Closest%.Diff_ultid);
    Count_Diff_ultscore := COUNT(GROUP,%Closest%.Diff_ultscore);
    Count_Diff_ultweight := COUNT(GROUP,%Closest%.Diff_ultweight);
    Count_Diff_source_rec_id := COUNT(GROUP,%Closest%.Diff_source_rec_id);
    Count_Diff_batch := COUNT(GROUP,%Closest%.Diff_batch);
    Count_Diff_batch_date := COUNT(GROUP,%Closest%.Diff_batch_date);
    Count_Diff_dbcode := COUNT(GROUP,%Closest%.Diff_dbcode);
    Count_Diff_incident_num := COUNT(GROUP,%Closest%.Diff_incident_num);
    Count_Diff_incident_date := COUNT(GROUP,%Closest%.Diff_incident_date);
    Count_Diff_int_key := COUNT(GROUP,%Closest%.Diff_int_key);
    Count_Diff_srce_cd := COUNT(GROUP,%Closest%.Diff_srce_cd);
    Count_Diff_billing_code := COUNT(GROUP,%Closest%.Diff_billing_code);
    Count_Diff_case_num := COUNT(GROUP,%Closest%.Diff_case_num);
    Count_Diff_jurisdiction := COUNT(GROUP,%Closest%.Diff_jurisdiction);
    Count_Diff_agency := COUNT(GROUP,%Closest%.Diff_agency);
    Count_Diff_source_doc := COUNT(GROUP,%Closest%.Diff_source_doc);
    Count_Diff_source_ref := COUNT(GROUP,%Closest%.Diff_source_ref);
    Count_Diff_additional_info := COUNT(GROUP,%Closest%.Diff_additional_info);
    Count_Diff_modified_date := COUNT(GROUP,%Closest%.Diff_modified_date);
    Count_Diff_entry_date := COUNT(GROUP,%Closest%.Diff_entry_date);
    Count_Diff_member_name := COUNT(GROUP,%Closest%.Diff_member_name);
    Count_Diff_submitter_name := COUNT(GROUP,%Closest%.Diff_submitter_name);
    Count_Diff_submitter_nickname := COUNT(GROUP,%Closest%.Diff_submitter_nickname);
    Count_Diff_submitter_phone := COUNT(GROUP,%Closest%.Diff_submitter_phone);
    Count_Diff_submitter_fax := COUNT(GROUP,%Closest%.Diff_submitter_fax);
    Count_Diff_submitter_email := COUNT(GROUP,%Closest%.Diff_submitter_email);
    Count_Diff_prop_addr := COUNT(GROUP,%Closest%.Diff_prop_addr);
    Count_Diff_prop_city := COUNT(GROUP,%Closest%.Diff_prop_city);
    Count_Diff_prop_state := COUNT(GROUP,%Closest%.Diff_prop_state);
    Count_Diff_prop_zip := COUNT(GROUP,%Closest%.Diff_prop_zip);
    Count_Diff_aid := COUNT(GROUP,%Closest%.Diff_aid);
    Count_Diff_did := COUNT(GROUP,%Closest%.Diff_did);
    Count_Diff_did_score := COUNT(GROUP,%Closest%.Diff_did_score);
    Count_Diff_bdid := COUNT(GROUP,%Closest%.Diff_bdid);
    Count_Diff_bdid_score := COUNT(GROUP,%Closest%.Diff_bdid_score);
    Count_Diff_title := COUNT(GROUP,%Closest%.Diff_title);
    Count_Diff_fname := COUNT(GROUP,%Closest%.Diff_fname);
    Count_Diff_mname := COUNT(GROUP,%Closest%.Diff_mname);
    Count_Diff_lname := COUNT(GROUP,%Closest%.Diff_lname);
    Count_Diff_name_suffix := COUNT(GROUP,%Closest%.Diff_name_suffix);
    Count_Diff_name_score := COUNT(GROUP,%Closest%.Diff_name_score);
    Count_Diff_cname := COUNT(GROUP,%Closest%.Diff_cname);
    Count_Diff_prim_range := COUNT(GROUP,%Closest%.Diff_prim_range);
    Count_Diff_predir := COUNT(GROUP,%Closest%.Diff_predir);
    Count_Diff_prim_name := COUNT(GROUP,%Closest%.Diff_prim_name);
    Count_Diff_addr_suffix := COUNT(GROUP,%Closest%.Diff_addr_suffix);
    Count_Diff_postdir := COUNT(GROUP,%Closest%.Diff_postdir);
    Count_Diff_unit_desig := COUNT(GROUP,%Closest%.Diff_unit_desig);
    Count_Diff_sec_range := COUNT(GROUP,%Closest%.Diff_sec_range);
    Count_Diff_p_city_name := COUNT(GROUP,%Closest%.Diff_p_city_name);
    Count_Diff_v_city_name := COUNT(GROUP,%Closest%.Diff_v_city_name);
    Count_Diff_st := COUNT(GROUP,%Closest%.Diff_st);
    Count_Diff_zip5 := COUNT(GROUP,%Closest%.Diff_zip5);
    Count_Diff_zip4 := COUNT(GROUP,%Closest%.Diff_zip4);
    Count_Diff_fips_state := COUNT(GROUP,%Closest%.Diff_fips_state);
    Count_Diff_fips_county := COUNT(GROUP,%Closest%.Diff_fips_county);
    Count_Diff_addr_rec_type := COUNT(GROUP,%Closest%.Diff_addr_rec_type);
    Count_Diff_geo_lat := COUNT(GROUP,%Closest%.Diff_geo_lat);
    Count_Diff_geo_long := COUNT(GROUP,%Closest%.Diff_geo_long);
    Count_Diff_cbsa := COUNT(GROUP,%Closest%.Diff_cbsa);
    Count_Diff_geo_blk := COUNT(GROUP,%Closest%.Diff_geo_blk);
    Count_Diff_geo_match := COUNT(GROUP,%Closest%.Diff_geo_match);
    Count_Diff_cart := COUNT(GROUP,%Closest%.Diff_cart);
    Count_Diff_cr_sort_sz := COUNT(GROUP,%Closest%.Diff_cr_sort_sz);
    Count_Diff_lot := COUNT(GROUP,%Closest%.Diff_lot);
    Count_Diff_lot_order := COUNT(GROUP,%Closest%.Diff_lot_order);
    Count_Diff_dpbc := COUNT(GROUP,%Closest%.Diff_dpbc);
    Count_Diff_chk_digit := COUNT(GROUP,%Closest%.Diff_chk_digit);
    Count_Diff_err_stat := COUNT(GROUP,%Closest%.Diff_err_stat);
    %Closest%.SourceField;
  END;
  out_counts := table(%Closest%,%AggRec%,SourceField,few);
ENDMACRO;
END;
