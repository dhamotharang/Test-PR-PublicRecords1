import NAC;

export	MSH2_NAC1_Support :=
module

	dNAc1SSEForMSH2	:=	dataset('~nac::nac2::for_msh2::sse_using', NAC.Layouts.SSE, thor, opt);
	shared	dSSEForMSH2Hits	:=	dNAc1SSEForMSH2((integer)QueryStatus = 0 and DrupalUserState <> CaseState);

	dNAc1MRRForMSH2	:=	dataset('~nac::nac2::for_msh2::mrr_using', NAC.Layouts.MRR, thor, opt);
	shared	dMRRForMSH2Hits	:=	dNAc1MRRForMSH2((integer)QueryStatus = 0 and BatchFileName[1..2] <> CaseState);

	Layouts.MSH2PlusInternal	tSSEForMSH2(dSSEForMSH2Hits pInput)	:=
	transform
		self.TargetNACGroupID := pInput.CaseState + '01';
		self.SourceState := pInput.SearchBenefitState;
		self.ServiceName := '';
		self.ActivityType := '3';
		self.ActivitySource := '';
		self.NACTransactionId := pInput.ESPTransactionId;
		self.BatchRecordNumber := '';
		self.RequestRecordID := '';
		self.NACUserId := pInput.DrupalUserLoginId;
		self.NACUserIP := pInput.DrupalUserIP;
		self.EndUserId := pInput.EndUserName;
		self.EndUserIP := pInput.EndUserIP;
		self.QueryStatus := pInput.QueryStatus;
		self.QueryStatusMessage := pInput.QueryStatusMessage;
		self.SearchCaseID := pInput.SearchCaseId;
		self.SearchClientID := pInput.SearchClientId;
		self.SearchProgramCode := pInput.SearchBenefitType;
		self.SearchRangeType := 'M';
		self.SearchEligibilityStart := pInput.SearchBenefitMonth;
		self.SearchEligibilityEnd := pInput.SearchBenefitMonth;
		self.SearchFullName := pInput.SearchFullName;
		self.SearchLastName := pInput.SearchLastName;
		self.SearchFirstName := pInput.SearchFirstName;
		self.SearchMiddleName := pInput.SearchMiddleName;
		self.SearchSuffixName := pInput.SearchSuffix;
		self.SearchSSN := pInput.SearchSSN;
		self.SearchDOB := pInput.SearchDOB;
		self.SearchAddress1StreetAddress1 := pInput.SearchAddress1City;
		self.SearchAddress1StreetAddress2 := pInput.SearchAddress1State;
		self.SearchAddress1City := pInput.SearchAddress1StreetAddress1;
		self.SearchAddress1State := pInput.SearchAddress1StreetAddress2;
		self.SearchAddress1Zip := pInput.SearchAddress1Zip;
		self.SearchAddress2StreetAddress1 := pInput.SearchAddress2City;
		self.SearchAddress2StreetAddress2 := pInput.SearchAddress2State;
		self.SearchAddress2City := pInput.SearchAddress2StreetAddress1;
		self.SearchAddress2State := pInput.SearchAddress2StreetAddress2;
		self.SearchAddress2Zip := pInput.SearchAddress2Zip;
		self.IncludeEligibilityHistory := pInput.IncludeTwelveMonthHistory;
		self.IncludeInterstateAllPrograms := 'Y';
		self.CaseNACGroupID := pInput.CaseState + '01';
		self.CaseState := pInput.CaseState;
		self.CaseProgramCode := pInput.CaseBenefitType;
		self.CaseID := pInput.CaseID;
		self.CaseLastName := pInput.CaseLastName;
		self.CaseFirstName := pInput.CaseFirstName;
		self.CaseMiddleName := pInput.CaseMiddleName;
		self.CaseSuffixName := '';
		self.CaseMonthlyAllotment := '';
		self.CaseRegionCode := '';
		self.CaseCountyParishCode := pInput.CaseCountyParishCode;
		self.CaseCountyParishName := pInput.CaseCountyParishName;
		self.CasePhone1 := pInput.CasePhone1;
		self.CasePhone2 := pInput.CasePhone2;
		self.CaseEmail := pInput.CaseEmail;
		self.PhysicalAddressCategory := '';
		self.PhysicalAddressStreet1 := pInput.CasePhysicalCity;
		self.PhysicalAddressStreet2 := pInput.CasePhysicalState;
		self.PhysicalAddressCity := pInput.CasePhysicalStreet1;
		self.PhysicalAddressState := pInput.CasePhysicalStreet2;
		self.PhysicalAddressZip := pInput.CasePhysicalZip;
		self.MailAddressCategory := '';
		self.MailAddressStreet1 := pInput.CaseMailCity;
		self.MailAddressStreet2 := pInput.CaseMailState;
		self.MailAddressCity := pInput.CaseMailStreet1;
		self.MailAddressState := pInput.CaseMailStreet2;
		self.MailAddressZip := pInput.CaseMailZip;
		self.ClientID := pInput.ClientID;
		self.ClientHoHIndicator := '';
		self.ClientABAWDIndicator := '';
		self.ClientHoHRelationshipIndicator := '';
		self.ClientLastName := pInput.ClientLastName;
		self.ClientFirstName := pInput.ClientFirstName;
		self.ClientMiddleName := pInput.ClientMiddleName;
		self.ClientSuffixName := '';
		self.ClientGender := pInput.ClientGender;
		self.ClientRace := pInput.ClientRace;
		self.ClientEthnicity := pInput.ClientEthnicity;
		self.ClientSSN := pInput.ClientSSN;
		self.ClientSSNType := pInput.ClientSSNType;
		self.ClientDOB := pInput.ClientDOB;
		self.ClientDOBType := pInput.ClientDOBType;
		self.ClientCertificateID := '';
		self.ClientMonthlyAllotment := '';
		self.ClientEligibilityStatus := pInput.ClientEligibilityStatus;
		self.ClientEligibilityDate := pInput.ClientEligibilityDate;
		self.ClientEligibilityPeriodType := 'M';
		self.ClientEligibilityPeriodCount := '0';
		self.ClientEligibilityPeriodStart := pInput.CaseBenefitMonth;
		self.ClientEligibilityPeriodEnd := pInput.CaseBenefitMonth;
		self.ClientPhone := pInput.ClientPhone;
		self.ClientEmail := pInput.ClientEmail;
		self.StateContactName := pInput.StateContactName;
		self.StateContactPhone := pInput.StateContactEmail;
		self.StateContactPhoneExtension := pInput.StateContactPhone;
		self.StateContactEmail := pInput.StateContactPhoneExtension;
		self.LexIdScore := pInput.LexIdScore;
		self.MatchCodes := pInput.MatchCodes;
		self.TotalEligiblePeriodsDays := '';
		self.TotalEligiblePeriodsMonths := '';
		self.ExceptionReasonCode := '';
		self.ExceptionComments := '';
		self.EligibilityPeriodsHistory := '';
		self.SequenceNumber := pInput.SequenceNumber;
	end;
	export	SSEBucket3	:=	project(dSSEForMSH2Hits, tSSEForMSH2(left));

	Layouts.MSH2PlusInternal	tMRRForMSH2(dMRRForMSH2Hits pInput)	:=
	transform
		self.TargetNACGroupID := pInput.CaseState + '01';
		self.SourceState := pInput.BatchFileName[1..2];
		self.ServiceName := '';
		self.ActivityType := '3';
		self.ActivitySource := pInput.BatchFileName;
		self.NACTransactionId := pInput.BatchJobId;
		self.BatchRecordNumber := pInput.BatchRecordNumber;
		self.RequestRecordID := pInput.RequestRecordID;
		self.NACUserId := '';
		self.NACUserIP := '';
		self.EndUserId := '';
		self.EndUserIP := '';
		self.QueryStatus := pInput.QueryStatus;
		self.QueryStatusMessage := pInput.QueryStatusMessage;
		self.SearchCaseID := pInput.SearchCaseID;
		self.SearchClientID := pInput.SearchClientID;
		self.SearchProgramCode := pInput.SearchBenefitType;
		self.SearchRangeType := 'M';
		self.SearchEligibilityStart := pInput.SearchBenefitMonth;
		self.SearchEligibilityEnd := pInput.SearchBenefitMonth;
		self.SearchFullName := pInput.SearchFullName;
		self.SearchLastName := pInput.SearchLastName;
		self.SearchFirstName := pInput.SearchFirstName;
		self.SearchMiddleName := pInput.SearchMiddleName;
		self.SearchSuffixName := pInput.SearchSuffix;
		self.SearchSSN := pInput.SearchSSN;
		self.SearchDOB := pInput.SearchDOB;
		self.SearchAddress1StreetAddress1 := pInput.SearchAddress1StreetAddress1;
		self.SearchAddress1StreetAddress2 := pInput.SearchAddress1StreetAddress2;
		self.SearchAddress1City := pInput.SearchAddress1City;
		self.SearchAddress1State := pInput.SearchAddress1State;
		self.SearchAddress1Zip := pInput.SearchAddress1Zip;
		self.SearchAddress2StreetAddress1 := pInput.SearchAddress2StreetAddress1;
		self.SearchAddress2StreetAddress2 := pInput.SearchAddress2StreetAddress2;
		self.SearchAddress2City := pInput.SearchAddress2City;
		self.SearchAddress2State := pInput.SearchAddress2State;
		self.SearchAddress2Zip := pInput.SearchAddress2Zip;
		self.IncludeEligibilityHistory := pInput.IncludeTwelveMonthHistory;
		self.IncludeInterstateAllPrograms := 'Y';
		self.CaseNACGroupID := pInput.CaseState + '01';
		self.CaseState := pInput.CaseState;
		self.CaseProgramCode := pInput.CaseBenefitType;
		self.CaseID := pInput.CaseID;
		self.CaseLastName := pInput.CaseLastName;
		self.CaseFirstName := pInput.CaseFirstName;
		self.CaseMiddleName := pInput.CaseMiddleName;
		self.CaseSuffixName := '';
		self.CaseMonthlyAllotment := '';
		self.CaseRegionCode := '';
		self.CaseCountyParishCode := pInput.CaseCountyParishCode;
		self.CaseCountyParishName := pInput.CaseCountyParishName;
		self.CasePhone1 := pInput.CasePhone1;
		self.CasePhone2 := pInput.CasePhone2;
		self.CaseEmail := pInput.CaseEmail;
		self.PhysicalAddressCategory := '';
		self.PhysicalAddressStreet1 := pInput.CasePhysicalStreet1;
		self.PhysicalAddressStreet2 := pInput.CasePhysicalStreet2;
		self.PhysicalAddressCity := pInput.CasePhysicalCity;
		self.PhysicalAddressState := pInput.CasePhysicalState;
		self.PhysicalAddressZip := pInput.CasePhysicalZip;
		self.MailAddressCategory := '';
		self.MailAddressStreet1 := pInput.CaseMailStreet1;
		self.MailAddressStreet2 := pInput.CaseMailStreet2;
		self.MailAddressCity := pInput.CaseMailCity;
		self.MailAddressState := pInput.CaseMailState;
		self.MailAddressZip := pInput.CaseMailZip;
		self.ClientID := pInput.ClientID;
		self.ClientHoHIndicator := '';
		self.ClientABAWDIndicator := '';
		self.ClientHoHRelationshipIndicator := '';
		self.ClientLastName := pInput.ClientLastName;
		self.ClientFirstName := pInput.ClientFirstName;
		self.ClientMiddleName := pInput.ClientMiddleName;
		self.ClientSuffixName := '';
		self.ClientGender := pInput.ClientGender;
		self.ClientRace := pInput.ClientRace;
		self.ClientEthnicity := pInput.ClientEthnicity;
		self.ClientSSN := pInput.ClientSSN;
		self.ClientSSNType := pInput.ClientSSNType;
		self.ClientDOB := pInput.ClientDOB;
		self.ClientDOBType := pInput.ClientDOBType;
		self.ClientCertificateID := '';
		self.ClientMonthlyAllotment := '';
		self.ClientEligibilityStatus := pInput.ClientEligibilityStatus;
		self.ClientEligibilityDate := pInput.ClientEligibilityDate;
		self.ClientEligibilityPeriodType := 'M';
		self.ClientEligibilityPeriodCount := '';
		self.ClientEligibilityPeriodStart := pInput.CaseBenefitMonth;
		self.ClientEligibilityPeriodEnd := pInput.CaseBenefitMonth;
		self.ClientPhone := pInput.ClientPhone;
		self.ClientEmail := pInput.ClientEmail;
		self.StateContactName := pInput.StateContactName;
		self.StateContactPhone := pInput.StateContactPhone;
		self.StateContactPhoneExtension := pInput.StateContactPhoneExtension;
		self.StateContactEmail := pInput.StateContactEmail;
		self.LexIdScore := pInput.LexIdScore;
		self.MatchCodes := pInput.MatchCodes;
		self.TotalEligiblePeriodsDays := '';
		self.TotalEligiblePeriodsMonths := '';
		self.ExceptionReasonCode := '';
		self.ExceptionComments := '';
		self.EligibilityPeriodsHistory := '';
		self.SequenceNumber := pInput.SequenceNumber;
	end;
	export	MRRBucket3	:=	project(dMRRForMSH2Hits, tMRRForMSH2(left));


end;