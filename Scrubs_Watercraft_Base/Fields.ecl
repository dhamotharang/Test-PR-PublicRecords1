IMPORT ut,SALT30;
EXPORT Fields := MODULE
// Processing for each FieldType
EXPORT SALT30.StrType FieldTypeName(UNSIGNED2 i) := CHOOSE(i,'invalid_alpha','invalid_alnum','invalid_numeric','invalid_name','invalid_address','invalid_state','invalid_zip','invalid_date','invalid_year','invalid_hull_number','invalid_source_code','invalid_history_flag','invalid_blank');
EXPORT FieldTypeNum(SALT30.StrType fn) := CASE(fn,'invalid_alpha' => 1,'invalid_alnum' => 2,'invalid_numeric' => 3,'invalid_name' => 4,'invalid_address' => 5,'invalid_state' => 6,'invalid_zip' => 7,'invalid_date' => 8,'invalid_year' => 9,'invalid_hull_number' => 10,'invalid_source_code' => 11,'invalid_history_flag' => 12,'invalid_blank' => 13,0);
EXPORT MakeFT_invalid_alpha(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringtouppercase(s0); // Force to upper case
  s2 := SALT30.stringfilter(s1,'ABCDEFGHIJKLMNOPQRSTUVWXYZ\' -.,\\/'); // Only allow valid symbols
  s3 := SALT30.stringcleanspaces( SALT30.stringsubstituteout(s2,' -.,\\/',' ') ); // Insert spaces but avoid doubles
  RETURN  s3;
END;
EXPORT InValidFT_invalid_alpha(SALT30.StrType s) := WHICH(SALT30.stringtouppercase(s)<>s,LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'ABCDEFGHIJKLMNOPQRSTUVWXYZ\' -.,\\/'))),~(LENGTH(TRIM(s)) >= 0));
EXPORT InValidMessageFT_invalid_alpha(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotCaps,SALT30.HygieneErrors.NotInChars('ABCDEFGHIJKLMNOPQRSTUVWXYZ\' -.,\\/'),SALT30.HygieneErrors.NotLength('0..'),SALT30.HygieneErrors.Good);
EXPORT MakeFT_invalid_alnum(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringtouppercase(s0); // Force to upper case
  s2 := SALT30.stringfilter(s1,'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\' -#.&/_$'); // Only allow valid symbols
  s3 := SALT30.stringcleanspaces( SALT30.stringsubstituteout(s2,' -#.&/_$',' ') ); // Insert spaces but avoid doubles
  RETURN  s3;
END;
EXPORT InValidFT_invalid_alnum(SALT30.StrType s) := WHICH(SALT30.stringtouppercase(s)<>s,LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\' -#.&/_$'))),~(LENGTH(TRIM(s)) >= 0));
EXPORT InValidMessageFT_invalid_alnum(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotCaps,SALT30.HygieneErrors.NotInChars('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\' -#.&/_$'),SALT30.HygieneErrors.NotLength('0..'),SALT30.HygieneErrors.Good);
EXPORT MakeFT_invalid_numeric(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringfilter(s0,'0123456789.'); // Only allow valid symbols
  s2 := SALT30.stringcleanspaces( SALT30.stringsubstituteout(s1,'.',' ') ); // Insert spaces but avoid doubles
  RETURN  s2;
END;
EXPORT InValidFT_invalid_numeric(SALT30.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'0123456789.'))),~(LENGTH(TRIM(s)) >= 0));
EXPORT InValidMessageFT_invalid_numeric(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInChars('0123456789.'),SALT30.HygieneErrors.NotLength('0..'),SALT30.HygieneErrors.Good);
EXPORT MakeFT_invalid_name(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringtouppercase(s0); // Force to upper case
  s2 := SALT30.stringfilter(s1,'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\' -,&\\/.:;_#()*%+!@`'); // Only allow valid symbols
  s3 := SALT30.stringcleanspaces( SALT30.stringsubstituteout(s2,' -,&\\/.:;_#()*%+!@`',' ') ); // Insert spaces but avoid doubles
  RETURN  s3;
END;
EXPORT InValidFT_invalid_name(SALT30.StrType s) := WHICH(SALT30.stringtouppercase(s)<>s,LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\' -,&\\/.:;_#()*%+!@`'))),~(LENGTH(TRIM(s)) >= 0));
EXPORT InValidMessageFT_invalid_name(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotCaps,SALT30.HygieneErrors.NotInChars('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\' -,&\\/.:;_#()*%+!@`'),SALT30.HygieneErrors.NotLength('0..'),SALT30.HygieneErrors.Good);
EXPORT MakeFT_invalid_address(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringtouppercase(s0); // Force to upper case
  s2 := SALT30.stringfilter(s1,'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\' -&/\\#().;,:%'); // Only allow valid symbols
  s3 := SALT30.stringcleanspaces( SALT30.stringsubstituteout(s2,' -&/\\#().;,:%',' ') ); // Insert spaces but avoid doubles
  RETURN  s3;
END;
EXPORT InValidFT_invalid_address(SALT30.StrType s) := WHICH(SALT30.stringtouppercase(s)<>s,LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\' -&/\\#().;,:%'))),~(LENGTH(TRIM(s)) >= 0));
EXPORT InValidMessageFT_invalid_address(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotCaps,SALT30.HygieneErrors.NotInChars('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\' -&/\\#().;,:%'),SALT30.HygieneErrors.NotLength('0..'),SALT30.HygieneErrors.Good);
EXPORT MakeFT_invalid_state(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringfilter(s0,'ABCDEFGHIJKLMNOPQRSTUVWXYZ'); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_invalid_state(SALT30.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'ABCDEFGHIJKLMNOPQRSTUVWXYZ'))),~(LENGTH(TRIM(s)) = 2 OR LENGTH(TRIM(s)) = 0));
EXPORT InValidMessageFT_invalid_state(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInChars('ABCDEFGHIJKLMNOPQRSTUVWXYZ'),SALT30.HygieneErrors.NotLength('2,0'),SALT30.HygieneErrors.Good);
EXPORT MakeFT_invalid_zip(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringfilter(s0,'0123456789X -'); // Only allow valid symbols
  s2 := SALT30.stringcleanspaces( SALT30.stringsubstituteout(s1,' -',' ') ); // Insert spaces but avoid doubles
  RETURN  s2;
END;
EXPORT InValidFT_invalid_zip(SALT30.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'0123456789X -'))),~(LENGTH(TRIM(s)) = 10 OR LENGTH(TRIM(s)) = 9 OR LENGTH(TRIM(s)) = 6 OR LENGTH(TRIM(s)) = 5 OR LENGTH(TRIM(s)) = 0));
EXPORT InValidMessageFT_invalid_zip(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInChars('0123456789X -'),SALT30.HygieneErrors.NotLength('10,9,6,5,0'),SALT30.HygieneErrors.Good);
EXPORT MakeFT_invalid_date(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringfilter(s0,'0123456789'); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_invalid_date(SALT30.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'0123456789'))),~(LENGTH(TRIM(s)) = 8 OR LENGTH(TRIM(s)) = 6 OR LENGTH(TRIM(s)) = 4 OR LENGTH(TRIM(s)) = 0));
EXPORT InValidMessageFT_invalid_date(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInChars('0123456789'),SALT30.HygieneErrors.NotLength('8,6,4,0'),SALT30.HygieneErrors.Good);
EXPORT MakeFT_invalid_year(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringfilter(s0,'0123456789'); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_invalid_year(SALT30.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'0123456789'))),~(LENGTH(TRIM(s)) >= 0));
EXPORT InValidMessageFT_invalid_year(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInChars('0123456789'),SALT30.HygieneErrors.NotLength('0..'),SALT30.HygieneErrors.Good);
EXPORT MakeFT_invalid_hull_number(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringfilter(s0,'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 *#.?-/'); // Only allow valid symbols
  s2 := SALT30.stringcleanspaces( SALT30.stringsubstituteout(s1,' *#.?-/',' ') ); // Insert spaces but avoid doubles
  RETURN  s2;
END;
EXPORT InValidFT_invalid_hull_number(SALT30.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 *#.?-/'))),~(LENGTH(TRIM(s)) >= 0));
EXPORT InValidMessageFT_invalid_hull_number(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInChars('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 *#.?-/'),SALT30.HygieneErrors.NotLength('0..'),SALT30.HygieneErrors.Good);
EXPORT MakeFT_invalid_source_code(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringfilter(s0,'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_invalid_source_code(SALT30.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'))),~(LENGTH(TRIM(s)) = 2));
EXPORT InValidMessageFT_invalid_source_code(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInChars('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'),SALT30.HygieneErrors.NotLength('2'),SALT30.HygieneErrors.Good);
EXPORT MakeFT_invalid_history_flag(SALT30.StrType s0) := FUNCTION
  RETURN  s0;
END;
EXPORT InValidFT_invalid_history_flag(SALT30.StrType s) := WHICH(((SALT30.StrType) s) NOT IN ['H','E','U',' '],~(LENGTH(TRIM(s)) = 1 OR LENGTH(TRIM(s)) = 0));
EXPORT InValidMessageFT_invalid_history_flag(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInEnum('H|E|U| '),SALT30.HygieneErrors.NotLength('1,0'),SALT30.HygieneErrors.Good);
EXPORT MakeFT_invalid_blank(SALT30.StrType s0) := FUNCTION
  RETURN  s0;
END;
EXPORT InValidFT_invalid_blank(SALT30.StrType s) := WHICH(~(LENGTH(TRIM(s)) >= 1));
EXPORT InValidMessageFT_invalid_blank(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotLength('1..'),SALT30.HygieneErrors.Good);
EXPORT SALT30.StrType FieldName(UNSIGNED2 i) := CHOOSE(i,'watercraft_key','sequence_key','watercraft_id','state_origin','source_code','st_registration','county_registration','registration_number','hull_number','propulsion_description','vehicle_type_code','vehicle_type_description','fuel_code','fuel_description','hull_type_code','hull_type_description','use_code','use_description','model_year','watercraft_name','watercraft_class_code','watercraft_class_description','watercraft_make_code','watercraft_make_description','watercraft_model_code','watercraft_model_description','watercraft_length','watercraft_width','watercraft_weight','watercraft_color_1_code','watercraft_color_1_description','watercraft_color_2_code','watercraft_color_2_description','watercraft_toilet_code','watercraft_toilet_description','watercraft_number_of_engines','watercraft_hp_1','watercraft_hp_2','watercraft_hp_3','engine_number_1','engine_number_2','engine_number_3','engine_make_1','engine_make_2','engine_make_3','engine_model_1','engine_model_2','engine_model_3','engine_year_1','engine_year_2','engine_year_3','coast_guard_documented_flag','coast_guard_number','registration_date','registration_expiration_date','registration_status_code','registration_status_description','registration_status_date','registration_renewal_date','decal_number','transaction_type_code','transaction_type_description','title_state','title_status_code','title_status_description','title_number','title_issue_date','title_type_code','title_type_description','additional_owner_count','lien_1_indicator','lien_1_name','lien_1_date','lien_1_address_1','lien_1_address_2','lien_1_city','lien_1_state','lien_1_zip','lien_2_indicator','lien_2_name','lien_2_date','lien_2_address_1','lien_2_address_2','lien_2_city','lien_2_state','lien_2_zip','state_purchased','purchase_date','dealer','purchase_price','new_used_flag','watercraft_status_code','watercraft_status_description','history_flag','coastguard_flag','signatory','persistent_record_id');
EXPORT FieldNum(SALT30.StrType fn) := CASE(fn,'watercraft_key' => 1,'sequence_key' => 2,'watercraft_id' => 3,'state_origin' => 4,'source_code' => 5,'st_registration' => 6,'county_registration' => 7,'registration_number' => 8,'hull_number' => 9,'propulsion_description' => 10,'vehicle_type_code' => 11,'vehicle_type_description' => 12,'fuel_code' => 13,'fuel_description' => 14,'hull_type_code' => 15,'hull_type_description' => 16,'use_code' => 17,'use_description' => 18,'model_year' => 19,'watercraft_name' => 20,'watercraft_class_code' => 21,'watercraft_class_description' => 22,'watercraft_make_code' => 23,'watercraft_make_description' => 24,'watercraft_model_code' => 25,'watercraft_model_description' => 26,'watercraft_length' => 27,'watercraft_width' => 28,'watercraft_weight' => 29,'watercraft_color_1_code' => 30,'watercraft_color_1_description' => 31,'watercraft_color_2_code' => 32,'watercraft_color_2_description' => 33,'watercraft_toilet_code' => 34,'watercraft_toilet_description' => 35,'watercraft_number_of_engines' => 36,'watercraft_hp_1' => 37,'watercraft_hp_2' => 38,'watercraft_hp_3' => 39,'engine_number_1' => 40,'engine_number_2' => 41,'engine_number_3' => 42,'engine_make_1' => 43,'engine_make_2' => 44,'engine_make_3' => 45,'engine_model_1' => 46,'engine_model_2' => 47,'engine_model_3' => 48,'engine_year_1' => 49,'engine_year_2' => 50,'engine_year_3' => 51,'coast_guard_documented_flag' => 52,'coast_guard_number' => 53,'registration_date' => 54,'registration_expiration_date' => 55,'registration_status_code' => 56,'registration_status_description' => 57,'registration_status_date' => 58,'registration_renewal_date' => 59,'decal_number' => 60,'transaction_type_code' => 61,'transaction_type_description' => 62,'title_state' => 63,'title_status_code' => 64,'title_status_description' => 65,'title_number' => 66,'title_issue_date' => 67,'title_type_code' => 68,'title_type_description' => 69,'additional_owner_count' => 70,'lien_1_indicator' => 71,'lien_1_name' => 72,'lien_1_date' => 73,'lien_1_address_1' => 74,'lien_1_address_2' => 75,'lien_1_city' => 76,'lien_1_state' => 77,'lien_1_zip' => 78,'lien_2_indicator' => 79,'lien_2_name' => 80,'lien_2_date' => 81,'lien_2_address_1' => 82,'lien_2_address_2' => 83,'lien_2_city' => 84,'lien_2_state' => 85,'lien_2_zip' => 86,'state_purchased' => 87,'purchase_date' => 88,'dealer' => 89,'purchase_price' => 90,'new_used_flag' => 91,'watercraft_status_code' => 92,'watercraft_status_description' => 93,'history_flag' => 94,'coastguard_flag' => 95,'signatory' => 96,'persistent_record_id' => 97,0);
//Individual field level validation
EXPORT Make_watercraft_key(SALT30.StrType s0) := MakeFT_invalid_blank(s0);
EXPORT InValid_watercraft_key(SALT30.StrType s) := InValidFT_invalid_blank(s);
EXPORT InValidMessage_watercraft_key(UNSIGNED1 wh) := InValidMessageFT_invalid_blank(wh);
EXPORT Make_sequence_key(SALT30.StrType s0) := s0;
EXPORT InValid_sequence_key(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_sequence_key(UNSIGNED1 wh) := '';
EXPORT Make_watercraft_id(SALT30.StrType s0) := s0;
EXPORT InValid_watercraft_id(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_watercraft_id(UNSIGNED1 wh) := '';
EXPORT Make_state_origin(SALT30.StrType s0) := MakeFT_invalid_state(s0);
EXPORT InValid_state_origin(SALT30.StrType s) := InValidFT_invalid_state(s);
EXPORT InValidMessage_state_origin(UNSIGNED1 wh) := InValidMessageFT_invalid_state(wh);
EXPORT Make_source_code(SALT30.StrType s0) := MakeFT_invalid_source_code(s0);
EXPORT InValid_source_code(SALT30.StrType s) := InValidFT_invalid_source_code(s);
EXPORT InValidMessage_source_code(UNSIGNED1 wh) := InValidMessageFT_invalid_source_code(wh);
EXPORT Make_st_registration(SALT30.StrType s0) := MakeFT_invalid_state(s0);
EXPORT InValid_st_registration(SALT30.StrType s) := InValidFT_invalid_state(s);
EXPORT InValidMessage_st_registration(UNSIGNED1 wh) := InValidMessageFT_invalid_state(wh);
EXPORT Make_county_registration(SALT30.StrType s0) := MakeFT_invalid_alnum(s0);
EXPORT InValid_county_registration(SALT30.StrType s) := InValidFT_invalid_alnum(s);
EXPORT InValidMessage_county_registration(UNSIGNED1 wh) := InValidMessageFT_invalid_alnum(wh);
EXPORT Make_registration_number(SALT30.StrType s0) := MakeFT_invalid_alnum(s0);
EXPORT InValid_registration_number(SALT30.StrType s) := InValidFT_invalid_alnum(s);
EXPORT InValidMessage_registration_number(UNSIGNED1 wh) := InValidMessageFT_invalid_alnum(wh);
EXPORT Make_hull_number(SALT30.StrType s0) := MakeFT_invalid_hull_number(s0);
EXPORT InValid_hull_number(SALT30.StrType s) := InValidFT_invalid_hull_number(s);
EXPORT InValidMessage_hull_number(UNSIGNED1 wh) := InValidMessageFT_invalid_hull_number(wh);
EXPORT Make_propulsion_description(SALT30.StrType s0) := s0;
EXPORT InValid_propulsion_description(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_propulsion_description(UNSIGNED1 wh) := '';
EXPORT Make_vehicle_type_code(SALT30.StrType s0) := s0;
EXPORT InValid_vehicle_type_code(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_vehicle_type_code(UNSIGNED1 wh) := '';
EXPORT Make_vehicle_type_description(SALT30.StrType s0) := s0;
EXPORT InValid_vehicle_type_description(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_vehicle_type_description(UNSIGNED1 wh) := '';
EXPORT Make_fuel_code(SALT30.StrType s0) := s0;
EXPORT InValid_fuel_code(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_fuel_code(UNSIGNED1 wh) := '';
EXPORT Make_fuel_description(SALT30.StrType s0) := s0;
EXPORT InValid_fuel_description(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_fuel_description(UNSIGNED1 wh) := '';
EXPORT Make_hull_type_code(SALT30.StrType s0) := s0;
EXPORT InValid_hull_type_code(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_hull_type_code(UNSIGNED1 wh) := '';
EXPORT Make_hull_type_description(SALT30.StrType s0) := s0;
EXPORT InValid_hull_type_description(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_hull_type_description(UNSIGNED1 wh) := '';
EXPORT Make_use_code(SALT30.StrType s0) := s0;
EXPORT InValid_use_code(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_use_code(UNSIGNED1 wh) := '';
EXPORT Make_use_description(SALT30.StrType s0) := s0;
EXPORT InValid_use_description(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_use_description(UNSIGNED1 wh) := '';
EXPORT Make_model_year(SALT30.StrType s0) := MakeFT_invalid_year(s0);
EXPORT InValid_model_year(SALT30.StrType s) := InValidFT_invalid_year(s);
EXPORT InValidMessage_model_year(UNSIGNED1 wh) := InValidMessageFT_invalid_year(wh);
EXPORT Make_watercraft_name(SALT30.StrType s0) := s0;
EXPORT InValid_watercraft_name(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_watercraft_name(UNSIGNED1 wh) := '';
EXPORT Make_watercraft_class_code(SALT30.StrType s0) := s0;
EXPORT InValid_watercraft_class_code(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_watercraft_class_code(UNSIGNED1 wh) := '';
EXPORT Make_watercraft_class_description(SALT30.StrType s0) := s0;
EXPORT InValid_watercraft_class_description(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_watercraft_class_description(UNSIGNED1 wh) := '';
EXPORT Make_watercraft_make_code(SALT30.StrType s0) := s0;
EXPORT InValid_watercraft_make_code(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_watercraft_make_code(UNSIGNED1 wh) := '';
EXPORT Make_watercraft_make_description(SALT30.StrType s0) := s0;
EXPORT InValid_watercraft_make_description(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_watercraft_make_description(UNSIGNED1 wh) := '';
EXPORT Make_watercraft_model_code(SALT30.StrType s0) := s0;
EXPORT InValid_watercraft_model_code(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_watercraft_model_code(UNSIGNED1 wh) := '';
EXPORT Make_watercraft_model_description(SALT30.StrType s0) := s0;
EXPORT InValid_watercraft_model_description(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_watercraft_model_description(UNSIGNED1 wh) := '';
EXPORT Make_watercraft_length(SALT30.StrType s0) := MakeFT_invalid_numeric(s0);
EXPORT InValid_watercraft_length(SALT30.StrType s) := InValidFT_invalid_numeric(s);
EXPORT InValidMessage_watercraft_length(UNSIGNED1 wh) := InValidMessageFT_invalid_numeric(wh);
EXPORT Make_watercraft_width(SALT30.StrType s0) := MakeFT_invalid_numeric(s0);
EXPORT InValid_watercraft_width(SALT30.StrType s) := InValidFT_invalid_numeric(s);
EXPORT InValidMessage_watercraft_width(UNSIGNED1 wh) := InValidMessageFT_invalid_numeric(wh);
EXPORT Make_watercraft_weight(SALT30.StrType s0) := MakeFT_invalid_numeric(s0);
EXPORT InValid_watercraft_weight(SALT30.StrType s) := InValidFT_invalid_numeric(s);
EXPORT InValidMessage_watercraft_weight(UNSIGNED1 wh) := InValidMessageFT_invalid_numeric(wh);
EXPORT Make_watercraft_color_1_code(SALT30.StrType s0) := s0;
EXPORT InValid_watercraft_color_1_code(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_watercraft_color_1_code(UNSIGNED1 wh) := '';
EXPORT Make_watercraft_color_1_description(SALT30.StrType s0) := s0;
EXPORT InValid_watercraft_color_1_description(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_watercraft_color_1_description(UNSIGNED1 wh) := '';
EXPORT Make_watercraft_color_2_code(SALT30.StrType s0) := s0;
EXPORT InValid_watercraft_color_2_code(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_watercraft_color_2_code(UNSIGNED1 wh) := '';
EXPORT Make_watercraft_color_2_description(SALT30.StrType s0) := s0;
EXPORT InValid_watercraft_color_2_description(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_watercraft_color_2_description(UNSIGNED1 wh) := '';
EXPORT Make_watercraft_toilet_code(SALT30.StrType s0) := s0;
EXPORT InValid_watercraft_toilet_code(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_watercraft_toilet_code(UNSIGNED1 wh) := '';
EXPORT Make_watercraft_toilet_description(SALT30.StrType s0) := s0;
EXPORT InValid_watercraft_toilet_description(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_watercraft_toilet_description(UNSIGNED1 wh) := '';
EXPORT Make_watercraft_number_of_engines(SALT30.StrType s0) := s0;
EXPORT InValid_watercraft_number_of_engines(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_watercraft_number_of_engines(UNSIGNED1 wh) := '';
EXPORT Make_watercraft_hp_1(SALT30.StrType s0) := s0;
EXPORT InValid_watercraft_hp_1(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_watercraft_hp_1(UNSIGNED1 wh) := '';
EXPORT Make_watercraft_hp_2(SALT30.StrType s0) := s0;
EXPORT InValid_watercraft_hp_2(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_watercraft_hp_2(UNSIGNED1 wh) := '';
EXPORT Make_watercraft_hp_3(SALT30.StrType s0) := s0;
EXPORT InValid_watercraft_hp_3(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_watercraft_hp_3(UNSIGNED1 wh) := '';
EXPORT Make_engine_number_1(SALT30.StrType s0) := s0;
EXPORT InValid_engine_number_1(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_engine_number_1(UNSIGNED1 wh) := '';
EXPORT Make_engine_number_2(SALT30.StrType s0) := s0;
EXPORT InValid_engine_number_2(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_engine_number_2(UNSIGNED1 wh) := '';
EXPORT Make_engine_number_3(SALT30.StrType s0) := s0;
EXPORT InValid_engine_number_3(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_engine_number_3(UNSIGNED1 wh) := '';
EXPORT Make_engine_make_1(SALT30.StrType s0) := s0;
EXPORT InValid_engine_make_1(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_engine_make_1(UNSIGNED1 wh) := '';
EXPORT Make_engine_make_2(SALT30.StrType s0) := s0;
EXPORT InValid_engine_make_2(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_engine_make_2(UNSIGNED1 wh) := '';
EXPORT Make_engine_make_3(SALT30.StrType s0) := s0;
EXPORT InValid_engine_make_3(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_engine_make_3(UNSIGNED1 wh) := '';
EXPORT Make_engine_model_1(SALT30.StrType s0) := s0;
EXPORT InValid_engine_model_1(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_engine_model_1(UNSIGNED1 wh) := '';
EXPORT Make_engine_model_2(SALT30.StrType s0) := s0;
EXPORT InValid_engine_model_2(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_engine_model_2(UNSIGNED1 wh) := '';
EXPORT Make_engine_model_3(SALT30.StrType s0) := s0;
EXPORT InValid_engine_model_3(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_engine_model_3(UNSIGNED1 wh) := '';
EXPORT Make_engine_year_1(SALT30.StrType s0) := s0;
EXPORT InValid_engine_year_1(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_engine_year_1(UNSIGNED1 wh) := '';
EXPORT Make_engine_year_2(SALT30.StrType s0) := s0;
EXPORT InValid_engine_year_2(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_engine_year_2(UNSIGNED1 wh) := '';
EXPORT Make_engine_year_3(SALT30.StrType s0) := s0;
EXPORT InValid_engine_year_3(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_engine_year_3(UNSIGNED1 wh) := '';
EXPORT Make_coast_guard_documented_flag(SALT30.StrType s0) := s0;
EXPORT InValid_coast_guard_documented_flag(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_coast_guard_documented_flag(UNSIGNED1 wh) := '';
EXPORT Make_coast_guard_number(SALT30.StrType s0) := s0;
EXPORT InValid_coast_guard_number(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_coast_guard_number(UNSIGNED1 wh) := '';
EXPORT Make_registration_date(SALT30.StrType s0) := MakeFT_invalid_date(s0);
EXPORT InValid_registration_date(SALT30.StrType s) := InValidFT_invalid_date(s);
EXPORT InValidMessage_registration_date(UNSIGNED1 wh) := InValidMessageFT_invalid_date(wh);
EXPORT Make_registration_expiration_date(SALT30.StrType s0) := MakeFT_invalid_date(s0);
EXPORT InValid_registration_expiration_date(SALT30.StrType s) := InValidFT_invalid_date(s);
EXPORT InValidMessage_registration_expiration_date(UNSIGNED1 wh) := InValidMessageFT_invalid_date(wh);
EXPORT Make_registration_status_code(SALT30.StrType s0) := s0;
EXPORT InValid_registration_status_code(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_registration_status_code(UNSIGNED1 wh) := '';
EXPORT Make_registration_status_description(SALT30.StrType s0) := s0;
EXPORT InValid_registration_status_description(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_registration_status_description(UNSIGNED1 wh) := '';
EXPORT Make_registration_status_date(SALT30.StrType s0) := MakeFT_invalid_date(s0);
EXPORT InValid_registration_status_date(SALT30.StrType s) := InValidFT_invalid_date(s);
EXPORT InValidMessage_registration_status_date(UNSIGNED1 wh) := InValidMessageFT_invalid_date(wh);
EXPORT Make_registration_renewal_date(SALT30.StrType s0) := MakeFT_invalid_date(s0);
EXPORT InValid_registration_renewal_date(SALT30.StrType s) := InValidFT_invalid_date(s);
EXPORT InValidMessage_registration_renewal_date(UNSIGNED1 wh) := InValidMessageFT_invalid_date(wh);
EXPORT Make_decal_number(SALT30.StrType s0) := MakeFT_invalid_alnum(s0);
EXPORT InValid_decal_number(SALT30.StrType s) := InValidFT_invalid_alnum(s);
EXPORT InValidMessage_decal_number(UNSIGNED1 wh) := InValidMessageFT_invalid_alnum(wh);
EXPORT Make_transaction_type_code(SALT30.StrType s0) := s0;
EXPORT InValid_transaction_type_code(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_transaction_type_code(UNSIGNED1 wh) := '';
EXPORT Make_transaction_type_description(SALT30.StrType s0) := s0;
EXPORT InValid_transaction_type_description(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_transaction_type_description(UNSIGNED1 wh) := '';
EXPORT Make_title_state(SALT30.StrType s0) := MakeFT_invalid_state(s0);
EXPORT InValid_title_state(SALT30.StrType s) := InValidFT_invalid_state(s);
EXPORT InValidMessage_title_state(UNSIGNED1 wh) := InValidMessageFT_invalid_state(wh);
EXPORT Make_title_status_code(SALT30.StrType s0) := s0;
EXPORT InValid_title_status_code(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_title_status_code(UNSIGNED1 wh) := '';
EXPORT Make_title_status_description(SALT30.StrType s0) := s0;
EXPORT InValid_title_status_description(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_title_status_description(UNSIGNED1 wh) := '';
EXPORT Make_title_number(SALT30.StrType s0) := s0;
EXPORT InValid_title_number(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_title_number(UNSIGNED1 wh) := '';
EXPORT Make_title_issue_date(SALT30.StrType s0) := MakeFT_invalid_date(s0);
EXPORT InValid_title_issue_date(SALT30.StrType s) := InValidFT_invalid_date(s);
EXPORT InValidMessage_title_issue_date(UNSIGNED1 wh) := InValidMessageFT_invalid_date(wh);
EXPORT Make_title_type_code(SALT30.StrType s0) := s0;
EXPORT InValid_title_type_code(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_title_type_code(UNSIGNED1 wh) := '';
EXPORT Make_title_type_description(SALT30.StrType s0) := s0;
EXPORT InValid_title_type_description(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_title_type_description(UNSIGNED1 wh) := '';
EXPORT Make_additional_owner_count(SALT30.StrType s0) := s0;
EXPORT InValid_additional_owner_count(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_additional_owner_count(UNSIGNED1 wh) := '';
EXPORT Make_lien_1_indicator(SALT30.StrType s0) := s0;
EXPORT InValid_lien_1_indicator(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_lien_1_indicator(UNSIGNED1 wh) := '';
EXPORT Make_lien_1_name(SALT30.StrType s0) := MakeFT_invalid_name(s0);
EXPORT InValid_lien_1_name(SALT30.StrType s) := InValidFT_invalid_name(s);
EXPORT InValidMessage_lien_1_name(UNSIGNED1 wh) := InValidMessageFT_invalid_name(wh);
EXPORT Make_lien_1_date(SALT30.StrType s0) := MakeFT_invalid_date(s0);
EXPORT InValid_lien_1_date(SALT30.StrType s) := InValidFT_invalid_date(s);
EXPORT InValidMessage_lien_1_date(UNSIGNED1 wh) := InValidMessageFT_invalid_date(wh);
EXPORT Make_lien_1_address_1(SALT30.StrType s0) := MakeFT_invalid_address(s0);
EXPORT InValid_lien_1_address_1(SALT30.StrType s) := InValidFT_invalid_address(s);
EXPORT InValidMessage_lien_1_address_1(UNSIGNED1 wh) := InValidMessageFT_invalid_address(wh);
EXPORT Make_lien_1_address_2(SALT30.StrType s0) := MakeFT_invalid_name(s0);
EXPORT InValid_lien_1_address_2(SALT30.StrType s) := InValidFT_invalid_name(s);
EXPORT InValidMessage_lien_1_address_2(UNSIGNED1 wh) := InValidMessageFT_invalid_name(wh);
EXPORT Make_lien_1_city(SALT30.StrType s0) := MakeFT_invalid_alpha(s0);
EXPORT InValid_lien_1_city(SALT30.StrType s) := InValidFT_invalid_alpha(s);
EXPORT InValidMessage_lien_1_city(UNSIGNED1 wh) := InValidMessageFT_invalid_alpha(wh);
EXPORT Make_lien_1_state(SALT30.StrType s0) := MakeFT_invalid_state(s0);
EXPORT InValid_lien_1_state(SALT30.StrType s) := InValidFT_invalid_state(s);
EXPORT InValidMessage_lien_1_state(UNSIGNED1 wh) := InValidMessageFT_invalid_state(wh);
EXPORT Make_lien_1_zip(SALT30.StrType s0) := MakeFT_invalid_zip(s0);
EXPORT InValid_lien_1_zip(SALT30.StrType s) := InValidFT_invalid_zip(s);
EXPORT InValidMessage_lien_1_zip(UNSIGNED1 wh) := InValidMessageFT_invalid_zip(wh);
EXPORT Make_lien_2_indicator(SALT30.StrType s0) := s0;
EXPORT InValid_lien_2_indicator(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_lien_2_indicator(UNSIGNED1 wh) := '';
EXPORT Make_lien_2_name(SALT30.StrType s0) := MakeFT_invalid_name(s0);
EXPORT InValid_lien_2_name(SALT30.StrType s) := InValidFT_invalid_name(s);
EXPORT InValidMessage_lien_2_name(UNSIGNED1 wh) := InValidMessageFT_invalid_name(wh);
EXPORT Make_lien_2_date(SALT30.StrType s0) := MakeFT_invalid_date(s0);
EXPORT InValid_lien_2_date(SALT30.StrType s) := InValidFT_invalid_date(s);
EXPORT InValidMessage_lien_2_date(UNSIGNED1 wh) := InValidMessageFT_invalid_date(wh);
EXPORT Make_lien_2_address_1(SALT30.StrType s0) := MakeFT_invalid_address(s0);
EXPORT InValid_lien_2_address_1(SALT30.StrType s) := InValidFT_invalid_address(s);
EXPORT InValidMessage_lien_2_address_1(UNSIGNED1 wh) := InValidMessageFT_invalid_address(wh);
EXPORT Make_lien_2_address_2(SALT30.StrType s0) := MakeFT_invalid_name(s0);
EXPORT InValid_lien_2_address_2(SALT30.StrType s) := InValidFT_invalid_name(s);
EXPORT InValidMessage_lien_2_address_2(UNSIGNED1 wh) := InValidMessageFT_invalid_name(wh);
EXPORT Make_lien_2_city(SALT30.StrType s0) := MakeFT_invalid_alpha(s0);
EXPORT InValid_lien_2_city(SALT30.StrType s) := InValidFT_invalid_alpha(s);
EXPORT InValidMessage_lien_2_city(UNSIGNED1 wh) := InValidMessageFT_invalid_alpha(wh);
EXPORT Make_lien_2_state(SALT30.StrType s0) := MakeFT_invalid_state(s0);
EXPORT InValid_lien_2_state(SALT30.StrType s) := InValidFT_invalid_state(s);
EXPORT InValidMessage_lien_2_state(UNSIGNED1 wh) := InValidMessageFT_invalid_state(wh);
EXPORT Make_lien_2_zip(SALT30.StrType s0) := MakeFT_invalid_zip(s0);
EXPORT InValid_lien_2_zip(SALT30.StrType s) := InValidFT_invalid_zip(s);
EXPORT InValidMessage_lien_2_zip(UNSIGNED1 wh) := InValidMessageFT_invalid_zip(wh);
EXPORT Make_state_purchased(SALT30.StrType s0) := MakeFT_invalid_state(s0);
EXPORT InValid_state_purchased(SALT30.StrType s) := InValidFT_invalid_state(s);
EXPORT InValidMessage_state_purchased(UNSIGNED1 wh) := InValidMessageFT_invalid_state(wh);
EXPORT Make_purchase_date(SALT30.StrType s0) := MakeFT_invalid_date(s0);
EXPORT InValid_purchase_date(SALT30.StrType s) := InValidFT_invalid_date(s);
EXPORT InValidMessage_purchase_date(UNSIGNED1 wh) := InValidMessageFT_invalid_date(wh);
EXPORT Make_dealer(SALT30.StrType s0) := s0;
EXPORT InValid_dealer(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_dealer(UNSIGNED1 wh) := '';
EXPORT Make_purchase_price(SALT30.StrType s0) := s0;
EXPORT InValid_purchase_price(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_purchase_price(UNSIGNED1 wh) := '';
EXPORT Make_new_used_flag(SALT30.StrType s0) := s0;
EXPORT InValid_new_used_flag(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_new_used_flag(UNSIGNED1 wh) := '';
EXPORT Make_watercraft_status_code(SALT30.StrType s0) := s0;
EXPORT InValid_watercraft_status_code(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_watercraft_status_code(UNSIGNED1 wh) := '';
EXPORT Make_watercraft_status_description(SALT30.StrType s0) := s0;
EXPORT InValid_watercraft_status_description(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_watercraft_status_description(UNSIGNED1 wh) := '';
EXPORT Make_history_flag(SALT30.StrType s0) := MakeFT_invalid_history_flag(s0);
EXPORT InValid_history_flag(SALT30.StrType s) := InValidFT_invalid_history_flag(s);
EXPORT InValidMessage_history_flag(UNSIGNED1 wh) := InValidMessageFT_invalid_history_flag(wh);
EXPORT Make_coastguard_flag(SALT30.StrType s0) := s0;
EXPORT InValid_coastguard_flag(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_coastguard_flag(UNSIGNED1 wh) := '';
EXPORT Make_signatory(SALT30.StrType s0) := s0;
EXPORT InValid_signatory(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_signatory(UNSIGNED1 wh) := '';
EXPORT Make_persistent_record_id(SALT30.StrType s0) := MakeFT_invalid_blank(s0);
EXPORT InValid_persistent_record_id(SALT30.StrType s) := InValidFT_invalid_blank(s);
EXPORT InValidMessage_persistent_record_id(UNSIGNED1 wh) := InValidMessageFT_invalid_blank(wh);
// This macro will compute and count field level differences based upon a pivot expression
export MAC_CountDifferencesByPivot(in_left,in_right,pivot_exp,bad_pivots,out_counts) := MACRO
  IMPORT SALT30,Scrubs_Watercraft_Base;
//Find those highly occuring pivot values to remove them from consideration
#uniquename(tr)
  %tr% := table(in_left+in_right,{ val := pivot_exp; });
#uniquename(r1)
  %r1% := record
    %tr%.val;    unsigned Cnt := COUNT(GROUP);
  end;
#uniquename(t1)
  %t1% := table(%tr%,%r1%,val,local); // Pre-aggregate before distribute
#uniquename(r2)
  %r2% := record
    %t1%.val;    unsigned Cnt := SUM(GROUP,%t1%.Cnt);
  end;
#uniquename(t2)
  %t2% := table(%t1%,%r2%,val); // Now do global aggregate
Bad_Pivots := %t2%(Cnt>100);
#uniquename(dl)
  %dl% := RECORD
    BOOLEAN Diff_watercraft_key;
    BOOLEAN Diff_sequence_key;
    BOOLEAN Diff_watercraft_id;
    BOOLEAN Diff_state_origin;
    BOOLEAN Diff_source_code;
    BOOLEAN Diff_st_registration;
    BOOLEAN Diff_county_registration;
    BOOLEAN Diff_registration_number;
    BOOLEAN Diff_hull_number;
    BOOLEAN Diff_propulsion_description;
    BOOLEAN Diff_vehicle_type_code;
    BOOLEAN Diff_vehicle_type_description;
    BOOLEAN Diff_fuel_code;
    BOOLEAN Diff_fuel_description;
    BOOLEAN Diff_hull_type_code;
    BOOLEAN Diff_hull_type_description;
    BOOLEAN Diff_use_code;
    BOOLEAN Diff_use_description;
    BOOLEAN Diff_model_year;
    BOOLEAN Diff_watercraft_name;
    BOOLEAN Diff_watercraft_class_code;
    BOOLEAN Diff_watercraft_class_description;
    BOOLEAN Diff_watercraft_make_code;
    BOOLEAN Diff_watercraft_make_description;
    BOOLEAN Diff_watercraft_model_code;
    BOOLEAN Diff_watercraft_model_description;
    BOOLEAN Diff_watercraft_length;
    BOOLEAN Diff_watercraft_width;
    BOOLEAN Diff_watercraft_weight;
    BOOLEAN Diff_watercraft_color_1_code;
    BOOLEAN Diff_watercraft_color_1_description;
    BOOLEAN Diff_watercraft_color_2_code;
    BOOLEAN Diff_watercraft_color_2_description;
    BOOLEAN Diff_watercraft_toilet_code;
    BOOLEAN Diff_watercraft_toilet_description;
    BOOLEAN Diff_watercraft_number_of_engines;
    BOOLEAN Diff_watercraft_hp_1;
    BOOLEAN Diff_watercraft_hp_2;
    BOOLEAN Diff_watercraft_hp_3;
    BOOLEAN Diff_engine_number_1;
    BOOLEAN Diff_engine_number_2;
    BOOLEAN Diff_engine_number_3;
    BOOLEAN Diff_engine_make_1;
    BOOLEAN Diff_engine_make_2;
    BOOLEAN Diff_engine_make_3;
    BOOLEAN Diff_engine_model_1;
    BOOLEAN Diff_engine_model_2;
    BOOLEAN Diff_engine_model_3;
    BOOLEAN Diff_engine_year_1;
    BOOLEAN Diff_engine_year_2;
    BOOLEAN Diff_engine_year_3;
    BOOLEAN Diff_coast_guard_documented_flag;
    BOOLEAN Diff_coast_guard_number;
    BOOLEAN Diff_registration_date;
    BOOLEAN Diff_registration_expiration_date;
    BOOLEAN Diff_registration_status_code;
    BOOLEAN Diff_registration_status_description;
    BOOLEAN Diff_registration_status_date;
    BOOLEAN Diff_registration_renewal_date;
    BOOLEAN Diff_decal_number;
    BOOLEAN Diff_transaction_type_code;
    BOOLEAN Diff_transaction_type_description;
    BOOLEAN Diff_title_state;
    BOOLEAN Diff_title_status_code;
    BOOLEAN Diff_title_status_description;
    BOOLEAN Diff_title_number;
    BOOLEAN Diff_title_issue_date;
    BOOLEAN Diff_title_type_code;
    BOOLEAN Diff_title_type_description;
    BOOLEAN Diff_additional_owner_count;
    BOOLEAN Diff_lien_1_indicator;
    BOOLEAN Diff_lien_1_name;
    BOOLEAN Diff_lien_1_date;
    BOOLEAN Diff_lien_1_address_1;
    BOOLEAN Diff_lien_1_address_2;
    BOOLEAN Diff_lien_1_city;
    BOOLEAN Diff_lien_1_state;
    BOOLEAN Diff_lien_1_zip;
    BOOLEAN Diff_lien_2_indicator;
    BOOLEAN Diff_lien_2_name;
    BOOLEAN Diff_lien_2_date;
    BOOLEAN Diff_lien_2_address_1;
    BOOLEAN Diff_lien_2_address_2;
    BOOLEAN Diff_lien_2_city;
    BOOLEAN Diff_lien_2_state;
    BOOLEAN Diff_lien_2_zip;
    BOOLEAN Diff_state_purchased;
    BOOLEAN Diff_purchase_date;
    BOOLEAN Diff_dealer;
    BOOLEAN Diff_purchase_price;
    BOOLEAN Diff_new_used_flag;
    BOOLEAN Diff_watercraft_status_code;
    BOOLEAN Diff_watercraft_status_description;
    BOOLEAN Diff_history_flag;
    BOOLEAN Diff_coastguard_flag;
    BOOLEAN Diff_signatory;
    BOOLEAN Diff_persistent_record_id;
    SALT30.StrType SourceField {MAXLENGTH(30)};
    UNSIGNED Num_Diffs;
    SALT30.StrType Val {MAXLENGTH(1024)};
  END;
#uniquename(fd)
  %dl% %fd%(in_left le,in_right ri) := TRANSFORM
    SELF.Diff_watercraft_key := le.watercraft_key <> ri.watercraft_key;
    SELF.Diff_sequence_key := le.sequence_key <> ri.sequence_key;
    SELF.Diff_watercraft_id := le.watercraft_id <> ri.watercraft_id;
    SELF.Diff_state_origin := le.state_origin <> ri.state_origin;
    SELF.Diff_source_code := le.source_code <> ri.source_code;
    SELF.Diff_st_registration := le.st_registration <> ri.st_registration;
    SELF.Diff_county_registration := le.county_registration <> ri.county_registration;
    SELF.Diff_registration_number := le.registration_number <> ri.registration_number;
    SELF.Diff_hull_number := le.hull_number <> ri.hull_number;
    SELF.Diff_propulsion_description := le.propulsion_description <> ri.propulsion_description;
    SELF.Diff_vehicle_type_code := le.vehicle_type_code <> ri.vehicle_type_code;
    SELF.Diff_vehicle_type_description := le.vehicle_type_description <> ri.vehicle_type_description;
    SELF.Diff_fuel_code := le.fuel_code <> ri.fuel_code;
    SELF.Diff_fuel_description := le.fuel_description <> ri.fuel_description;
    SELF.Diff_hull_type_code := le.hull_type_code <> ri.hull_type_code;
    SELF.Diff_hull_type_description := le.hull_type_description <> ri.hull_type_description;
    SELF.Diff_use_code := le.use_code <> ri.use_code;
    SELF.Diff_use_description := le.use_description <> ri.use_description;
    SELF.Diff_model_year := le.model_year <> ri.model_year;
    SELF.Diff_watercraft_name := le.watercraft_name <> ri.watercraft_name;
    SELF.Diff_watercraft_class_code := le.watercraft_class_code <> ri.watercraft_class_code;
    SELF.Diff_watercraft_class_description := le.watercraft_class_description <> ri.watercraft_class_description;
    SELF.Diff_watercraft_make_code := le.watercraft_make_code <> ri.watercraft_make_code;
    SELF.Diff_watercraft_make_description := le.watercraft_make_description <> ri.watercraft_make_description;
    SELF.Diff_watercraft_model_code := le.watercraft_model_code <> ri.watercraft_model_code;
    SELF.Diff_watercraft_model_description := le.watercraft_model_description <> ri.watercraft_model_description;
    SELF.Diff_watercraft_length := le.watercraft_length <> ri.watercraft_length;
    SELF.Diff_watercraft_width := le.watercraft_width <> ri.watercraft_width;
    SELF.Diff_watercraft_weight := le.watercraft_weight <> ri.watercraft_weight;
    SELF.Diff_watercraft_color_1_code := le.watercraft_color_1_code <> ri.watercraft_color_1_code;
    SELF.Diff_watercraft_color_1_description := le.watercraft_color_1_description <> ri.watercraft_color_1_description;
    SELF.Diff_watercraft_color_2_code := le.watercraft_color_2_code <> ri.watercraft_color_2_code;
    SELF.Diff_watercraft_color_2_description := le.watercraft_color_2_description <> ri.watercraft_color_2_description;
    SELF.Diff_watercraft_toilet_code := le.watercraft_toilet_code <> ri.watercraft_toilet_code;
    SELF.Diff_watercraft_toilet_description := le.watercraft_toilet_description <> ri.watercraft_toilet_description;
    SELF.Diff_watercraft_number_of_engines := le.watercraft_number_of_engines <> ri.watercraft_number_of_engines;
    SELF.Diff_watercraft_hp_1 := le.watercraft_hp_1 <> ri.watercraft_hp_1;
    SELF.Diff_watercraft_hp_2 := le.watercraft_hp_2 <> ri.watercraft_hp_2;
    SELF.Diff_watercraft_hp_3 := le.watercraft_hp_3 <> ri.watercraft_hp_3;
    SELF.Diff_engine_number_1 := le.engine_number_1 <> ri.engine_number_1;
    SELF.Diff_engine_number_2 := le.engine_number_2 <> ri.engine_number_2;
    SELF.Diff_engine_number_3 := le.engine_number_3 <> ri.engine_number_3;
    SELF.Diff_engine_make_1 := le.engine_make_1 <> ri.engine_make_1;
    SELF.Diff_engine_make_2 := le.engine_make_2 <> ri.engine_make_2;
    SELF.Diff_engine_make_3 := le.engine_make_3 <> ri.engine_make_3;
    SELF.Diff_engine_model_1 := le.engine_model_1 <> ri.engine_model_1;
    SELF.Diff_engine_model_2 := le.engine_model_2 <> ri.engine_model_2;
    SELF.Diff_engine_model_3 := le.engine_model_3 <> ri.engine_model_3;
    SELF.Diff_engine_year_1 := le.engine_year_1 <> ri.engine_year_1;
    SELF.Diff_engine_year_2 := le.engine_year_2 <> ri.engine_year_2;
    SELF.Diff_engine_year_3 := le.engine_year_3 <> ri.engine_year_3;
    SELF.Diff_coast_guard_documented_flag := le.coast_guard_documented_flag <> ri.coast_guard_documented_flag;
    SELF.Diff_coast_guard_number := le.coast_guard_number <> ri.coast_guard_number;
    SELF.Diff_registration_date := le.registration_date <> ri.registration_date;
    SELF.Diff_registration_expiration_date := le.registration_expiration_date <> ri.registration_expiration_date;
    SELF.Diff_registration_status_code := le.registration_status_code <> ri.registration_status_code;
    SELF.Diff_registration_status_description := le.registration_status_description <> ri.registration_status_description;
    SELF.Diff_registration_status_date := le.registration_status_date <> ri.registration_status_date;
    SELF.Diff_registration_renewal_date := le.registration_renewal_date <> ri.registration_renewal_date;
    SELF.Diff_decal_number := le.decal_number <> ri.decal_number;
    SELF.Diff_transaction_type_code := le.transaction_type_code <> ri.transaction_type_code;
    SELF.Diff_transaction_type_description := le.transaction_type_description <> ri.transaction_type_description;
    SELF.Diff_title_state := le.title_state <> ri.title_state;
    SELF.Diff_title_status_code := le.title_status_code <> ri.title_status_code;
    SELF.Diff_title_status_description := le.title_status_description <> ri.title_status_description;
    SELF.Diff_title_number := le.title_number <> ri.title_number;
    SELF.Diff_title_issue_date := le.title_issue_date <> ri.title_issue_date;
    SELF.Diff_title_type_code := le.title_type_code <> ri.title_type_code;
    SELF.Diff_title_type_description := le.title_type_description <> ri.title_type_description;
    SELF.Diff_additional_owner_count := le.additional_owner_count <> ri.additional_owner_count;
    SELF.Diff_lien_1_indicator := le.lien_1_indicator <> ri.lien_1_indicator;
    SELF.Diff_lien_1_name := le.lien_1_name <> ri.lien_1_name;
    SELF.Diff_lien_1_date := le.lien_1_date <> ri.lien_1_date;
    SELF.Diff_lien_1_address_1 := le.lien_1_address_1 <> ri.lien_1_address_1;
    SELF.Diff_lien_1_address_2 := le.lien_1_address_2 <> ri.lien_1_address_2;
    SELF.Diff_lien_1_city := le.lien_1_city <> ri.lien_1_city;
    SELF.Diff_lien_1_state := le.lien_1_state <> ri.lien_1_state;
    SELF.Diff_lien_1_zip := le.lien_1_zip <> ri.lien_1_zip;
    SELF.Diff_lien_2_indicator := le.lien_2_indicator <> ri.lien_2_indicator;
    SELF.Diff_lien_2_name := le.lien_2_name <> ri.lien_2_name;
    SELF.Diff_lien_2_date := le.lien_2_date <> ri.lien_2_date;
    SELF.Diff_lien_2_address_1 := le.lien_2_address_1 <> ri.lien_2_address_1;
    SELF.Diff_lien_2_address_2 := le.lien_2_address_2 <> ri.lien_2_address_2;
    SELF.Diff_lien_2_city := le.lien_2_city <> ri.lien_2_city;
    SELF.Diff_lien_2_state := le.lien_2_state <> ri.lien_2_state;
    SELF.Diff_lien_2_zip := le.lien_2_zip <> ri.lien_2_zip;
    SELF.Diff_state_purchased := le.state_purchased <> ri.state_purchased;
    SELF.Diff_purchase_date := le.purchase_date <> ri.purchase_date;
    SELF.Diff_dealer := le.dealer <> ri.dealer;
    SELF.Diff_purchase_price := le.purchase_price <> ri.purchase_price;
    SELF.Diff_new_used_flag := le.new_used_flag <> ri.new_used_flag;
    SELF.Diff_watercraft_status_code := le.watercraft_status_code <> ri.watercraft_status_code;
    SELF.Diff_watercraft_status_description := le.watercraft_status_description <> ri.watercraft_status_description;
    SELF.Diff_history_flag := le.history_flag <> ri.history_flag;
    SELF.Diff_coastguard_flag := le.coastguard_flag <> ri.coastguard_flag;
    SELF.Diff_signatory := le.signatory <> ri.signatory;
    SELF.Diff_persistent_record_id := le.persistent_record_id <> ri.persistent_record_id;
    SELF.Val := (SALT30.StrType)evaluate(le,pivot_exp);
    SELF.SourceField := le.source_code;
    SELF.Num_Diffs := 0+ IF( SELF.Diff_watercraft_key,1,0)+ IF( SELF.Diff_sequence_key,1,0)+ IF( SELF.Diff_watercraft_id,1,0)+ IF( SELF.Diff_state_origin,1,0)+ IF( SELF.Diff_source_code,1,0)+ IF( SELF.Diff_st_registration,1,0)+ IF( SELF.Diff_county_registration,1,0)+ IF( SELF.Diff_registration_number,1,0)+ IF( SELF.Diff_hull_number,1,0)+ IF( SELF.Diff_propulsion_description,1,0)+ IF( SELF.Diff_vehicle_type_code,1,0)+ IF( SELF.Diff_vehicle_type_description,1,0)+ IF( SELF.Diff_fuel_code,1,0)+ IF( SELF.Diff_fuel_description,1,0)+ IF( SELF.Diff_hull_type_code,1,0)+ IF( SELF.Diff_hull_type_description,1,0)+ IF( SELF.Diff_use_code,1,0)+ IF( SELF.Diff_use_description,1,0)+ IF( SELF.Diff_model_year,1,0)+ IF( SELF.Diff_watercraft_name,1,0)+ IF( SELF.Diff_watercraft_class_code,1,0)+ IF( SELF.Diff_watercraft_class_description,1,0)+ IF( SELF.Diff_watercraft_make_code,1,0)+ IF( SELF.Diff_watercraft_make_description,1,0)+ IF( SELF.Diff_watercraft_model_code,1,0)+ IF( SELF.Diff_watercraft_model_description,1,0)+ IF( SELF.Diff_watercraft_length,1,0)+ IF( SELF.Diff_watercraft_width,1,0)+ IF( SELF.Diff_watercraft_weight,1,0)+ IF( SELF.Diff_watercraft_color_1_code,1,0)+ IF( SELF.Diff_watercraft_color_1_description,1,0)+ IF( SELF.Diff_watercraft_color_2_code,1,0)+ IF( SELF.Diff_watercraft_color_2_description,1,0)+ IF( SELF.Diff_watercraft_toilet_code,1,0)+ IF( SELF.Diff_watercraft_toilet_description,1,0)+ IF( SELF.Diff_watercraft_number_of_engines,1,0)+ IF( SELF.Diff_watercraft_hp_1,1,0)+ IF( SELF.Diff_watercraft_hp_2,1,0)+ IF( SELF.Diff_watercraft_hp_3,1,0)+ IF( SELF.Diff_engine_number_1,1,0)+ IF( SELF.Diff_engine_number_2,1,0)+ IF( SELF.Diff_engine_number_3,1,0)+ IF( SELF.Diff_engine_make_1,1,0)+ IF( SELF.Diff_engine_make_2,1,0)+ IF( SELF.Diff_engine_make_3,1,0)+ IF( SELF.Diff_engine_model_1,1,0)+ IF( SELF.Diff_engine_model_2,1,0)+ IF( SELF.Diff_engine_model_3,1,0)+ IF( SELF.Diff_engine_year_1,1,0)+ IF( SELF.Diff_engine_year_2,1,0)+ IF( SELF.Diff_engine_year_3,1,0)+ IF( SELF.Diff_coast_guard_documented_flag,1,0)+ IF( SELF.Diff_coast_guard_number,1,0)+ IF( SELF.Diff_registration_date,1,0)+ IF( SELF.Diff_registration_expiration_date,1,0)+ IF( SELF.Diff_registration_status_code,1,0)+ IF( SELF.Diff_registration_status_description,1,0)+ IF( SELF.Diff_registration_status_date,1,0)+ IF( SELF.Diff_registration_renewal_date,1,0)+ IF( SELF.Diff_decal_number,1,0)+ IF( SELF.Diff_transaction_type_code,1,0)+ IF( SELF.Diff_transaction_type_description,1,0)+ IF( SELF.Diff_title_state,1,0)+ IF( SELF.Diff_title_status_code,1,0)+ IF( SELF.Diff_title_status_description,1,0)+ IF( SELF.Diff_title_number,1,0)+ IF( SELF.Diff_title_issue_date,1,0)+ IF( SELF.Diff_title_type_code,1,0)+ IF( SELF.Diff_title_type_description,1,0)+ IF( SELF.Diff_additional_owner_count,1,0)+ IF( SELF.Diff_lien_1_indicator,1,0)+ IF( SELF.Diff_lien_1_name,1,0)+ IF( SELF.Diff_lien_1_date,1,0)+ IF( SELF.Diff_lien_1_address_1,1,0)+ IF( SELF.Diff_lien_1_address_2,1,0)+ IF( SELF.Diff_lien_1_city,1,0)+ IF( SELF.Diff_lien_1_state,1,0)+ IF( SELF.Diff_lien_1_zip,1,0)+ IF( SELF.Diff_lien_2_indicator,1,0)+ IF( SELF.Diff_lien_2_name,1,0)+ IF( SELF.Diff_lien_2_date,1,0)+ IF( SELF.Diff_lien_2_address_1,1,0)+ IF( SELF.Diff_lien_2_address_2,1,0)+ IF( SELF.Diff_lien_2_city,1,0)+ IF( SELF.Diff_lien_2_state,1,0)+ IF( SELF.Diff_lien_2_zip,1,0)+ IF( SELF.Diff_state_purchased,1,0)+ IF( SELF.Diff_purchase_date,1,0)+ IF( SELF.Diff_dealer,1,0)+ IF( SELF.Diff_purchase_price,1,0)+ IF( SELF.Diff_new_used_flag,1,0)+ IF( SELF.Diff_watercraft_status_code,1,0)+ IF( SELF.Diff_watercraft_status_description,1,0)+ IF( SELF.Diff_history_flag,1,0)+ IF( SELF.Diff_coastguard_flag,1,0)+ IF( SELF.Diff_signatory,1,0)+ IF( SELF.Diff_persistent_record_id,1,0);
  END;
// Now need to remove bad pivots from comparison
#uniquename(L)
  %L% := JOIN(in_left,bad_pivots,evaluate(LEFT,pivot_exp)=right.val,transform(left),left only,lookup);
#uniquename(R)
  %R% := JOIN(in_right,bad_pivots,evaluate(LEFT,pivot_exp)=right.val,transform(left),left only,lookup);
#uniquename(DiffL)
  %DiffL% := JOIN(%L%,%R%,evaluate(left,pivot_exp)=evaluate(right,pivot_exp),%fd%(left,right),hash);
#uniquename(Closest)
  %Closest% := DEDUP(SORT(%DiffL%,Val,Num_Diffs,local),Val,local); // Join will have distributed by pivot_exp
#uniquename(AggRec)
  %AggRec% := RECORD
    Count_Diff_watercraft_key := COUNT(GROUP,%Closest%.Diff_watercraft_key);
    Count_Diff_sequence_key := COUNT(GROUP,%Closest%.Diff_sequence_key);
    Count_Diff_watercraft_id := COUNT(GROUP,%Closest%.Diff_watercraft_id);
    Count_Diff_state_origin := COUNT(GROUP,%Closest%.Diff_state_origin);
    Count_Diff_source_code := COUNT(GROUP,%Closest%.Diff_source_code);
    Count_Diff_st_registration := COUNT(GROUP,%Closest%.Diff_st_registration);
    Count_Diff_county_registration := COUNT(GROUP,%Closest%.Diff_county_registration);
    Count_Diff_registration_number := COUNT(GROUP,%Closest%.Diff_registration_number);
    Count_Diff_hull_number := COUNT(GROUP,%Closest%.Diff_hull_number);
    Count_Diff_propulsion_description := COUNT(GROUP,%Closest%.Diff_propulsion_description);
    Count_Diff_vehicle_type_code := COUNT(GROUP,%Closest%.Diff_vehicle_type_code);
    Count_Diff_vehicle_type_description := COUNT(GROUP,%Closest%.Diff_vehicle_type_description);
    Count_Diff_fuel_code := COUNT(GROUP,%Closest%.Diff_fuel_code);
    Count_Diff_fuel_description := COUNT(GROUP,%Closest%.Diff_fuel_description);
    Count_Diff_hull_type_code := COUNT(GROUP,%Closest%.Diff_hull_type_code);
    Count_Diff_hull_type_description := COUNT(GROUP,%Closest%.Diff_hull_type_description);
    Count_Diff_use_code := COUNT(GROUP,%Closest%.Diff_use_code);
    Count_Diff_use_description := COUNT(GROUP,%Closest%.Diff_use_description);
    Count_Diff_model_year := COUNT(GROUP,%Closest%.Diff_model_year);
    Count_Diff_watercraft_name := COUNT(GROUP,%Closest%.Diff_watercraft_name);
    Count_Diff_watercraft_class_code := COUNT(GROUP,%Closest%.Diff_watercraft_class_code);
    Count_Diff_watercraft_class_description := COUNT(GROUP,%Closest%.Diff_watercraft_class_description);
    Count_Diff_watercraft_make_code := COUNT(GROUP,%Closest%.Diff_watercraft_make_code);
    Count_Diff_watercraft_make_description := COUNT(GROUP,%Closest%.Diff_watercraft_make_description);
    Count_Diff_watercraft_model_code := COUNT(GROUP,%Closest%.Diff_watercraft_model_code);
    Count_Diff_watercraft_model_description := COUNT(GROUP,%Closest%.Diff_watercraft_model_description);
    Count_Diff_watercraft_length := COUNT(GROUP,%Closest%.Diff_watercraft_length);
    Count_Diff_watercraft_width := COUNT(GROUP,%Closest%.Diff_watercraft_width);
    Count_Diff_watercraft_weight := COUNT(GROUP,%Closest%.Diff_watercraft_weight);
    Count_Diff_watercraft_color_1_code := COUNT(GROUP,%Closest%.Diff_watercraft_color_1_code);
    Count_Diff_watercraft_color_1_description := COUNT(GROUP,%Closest%.Diff_watercraft_color_1_description);
    Count_Diff_watercraft_color_2_code := COUNT(GROUP,%Closest%.Diff_watercraft_color_2_code);
    Count_Diff_watercraft_color_2_description := COUNT(GROUP,%Closest%.Diff_watercraft_color_2_description);
    Count_Diff_watercraft_toilet_code := COUNT(GROUP,%Closest%.Diff_watercraft_toilet_code);
    Count_Diff_watercraft_toilet_description := COUNT(GROUP,%Closest%.Diff_watercraft_toilet_description);
    Count_Diff_watercraft_number_of_engines := COUNT(GROUP,%Closest%.Diff_watercraft_number_of_engines);
    Count_Diff_watercraft_hp_1 := COUNT(GROUP,%Closest%.Diff_watercraft_hp_1);
    Count_Diff_watercraft_hp_2 := COUNT(GROUP,%Closest%.Diff_watercraft_hp_2);
    Count_Diff_watercraft_hp_3 := COUNT(GROUP,%Closest%.Diff_watercraft_hp_3);
    Count_Diff_engine_number_1 := COUNT(GROUP,%Closest%.Diff_engine_number_1);
    Count_Diff_engine_number_2 := COUNT(GROUP,%Closest%.Diff_engine_number_2);
    Count_Diff_engine_number_3 := COUNT(GROUP,%Closest%.Diff_engine_number_3);
    Count_Diff_engine_make_1 := COUNT(GROUP,%Closest%.Diff_engine_make_1);
    Count_Diff_engine_make_2 := COUNT(GROUP,%Closest%.Diff_engine_make_2);
    Count_Diff_engine_make_3 := COUNT(GROUP,%Closest%.Diff_engine_make_3);
    Count_Diff_engine_model_1 := COUNT(GROUP,%Closest%.Diff_engine_model_1);
    Count_Diff_engine_model_2 := COUNT(GROUP,%Closest%.Diff_engine_model_2);
    Count_Diff_engine_model_3 := COUNT(GROUP,%Closest%.Diff_engine_model_3);
    Count_Diff_engine_year_1 := COUNT(GROUP,%Closest%.Diff_engine_year_1);
    Count_Diff_engine_year_2 := COUNT(GROUP,%Closest%.Diff_engine_year_2);
    Count_Diff_engine_year_3 := COUNT(GROUP,%Closest%.Diff_engine_year_3);
    Count_Diff_coast_guard_documented_flag := COUNT(GROUP,%Closest%.Diff_coast_guard_documented_flag);
    Count_Diff_coast_guard_number := COUNT(GROUP,%Closest%.Diff_coast_guard_number);
    Count_Diff_registration_date := COUNT(GROUP,%Closest%.Diff_registration_date);
    Count_Diff_registration_expiration_date := COUNT(GROUP,%Closest%.Diff_registration_expiration_date);
    Count_Diff_registration_status_code := COUNT(GROUP,%Closest%.Diff_registration_status_code);
    Count_Diff_registration_status_description := COUNT(GROUP,%Closest%.Diff_registration_status_description);
    Count_Diff_registration_status_date := COUNT(GROUP,%Closest%.Diff_registration_status_date);
    Count_Diff_registration_renewal_date := COUNT(GROUP,%Closest%.Diff_registration_renewal_date);
    Count_Diff_decal_number := COUNT(GROUP,%Closest%.Diff_decal_number);
    Count_Diff_transaction_type_code := COUNT(GROUP,%Closest%.Diff_transaction_type_code);
    Count_Diff_transaction_type_description := COUNT(GROUP,%Closest%.Diff_transaction_type_description);
    Count_Diff_title_state := COUNT(GROUP,%Closest%.Diff_title_state);
    Count_Diff_title_status_code := COUNT(GROUP,%Closest%.Diff_title_status_code);
    Count_Diff_title_status_description := COUNT(GROUP,%Closest%.Diff_title_status_description);
    Count_Diff_title_number := COUNT(GROUP,%Closest%.Diff_title_number);
    Count_Diff_title_issue_date := COUNT(GROUP,%Closest%.Diff_title_issue_date);
    Count_Diff_title_type_code := COUNT(GROUP,%Closest%.Diff_title_type_code);
    Count_Diff_title_type_description := COUNT(GROUP,%Closest%.Diff_title_type_description);
    Count_Diff_additional_owner_count := COUNT(GROUP,%Closest%.Diff_additional_owner_count);
    Count_Diff_lien_1_indicator := COUNT(GROUP,%Closest%.Diff_lien_1_indicator);
    Count_Diff_lien_1_name := COUNT(GROUP,%Closest%.Diff_lien_1_name);
    Count_Diff_lien_1_date := COUNT(GROUP,%Closest%.Diff_lien_1_date);
    Count_Diff_lien_1_address_1 := COUNT(GROUP,%Closest%.Diff_lien_1_address_1);
    Count_Diff_lien_1_address_2 := COUNT(GROUP,%Closest%.Diff_lien_1_address_2);
    Count_Diff_lien_1_city := COUNT(GROUP,%Closest%.Diff_lien_1_city);
    Count_Diff_lien_1_state := COUNT(GROUP,%Closest%.Diff_lien_1_state);
    Count_Diff_lien_1_zip := COUNT(GROUP,%Closest%.Diff_lien_1_zip);
    Count_Diff_lien_2_indicator := COUNT(GROUP,%Closest%.Diff_lien_2_indicator);
    Count_Diff_lien_2_name := COUNT(GROUP,%Closest%.Diff_lien_2_name);
    Count_Diff_lien_2_date := COUNT(GROUP,%Closest%.Diff_lien_2_date);
    Count_Diff_lien_2_address_1 := COUNT(GROUP,%Closest%.Diff_lien_2_address_1);
    Count_Diff_lien_2_address_2 := COUNT(GROUP,%Closest%.Diff_lien_2_address_2);
    Count_Diff_lien_2_city := COUNT(GROUP,%Closest%.Diff_lien_2_city);
    Count_Diff_lien_2_state := COUNT(GROUP,%Closest%.Diff_lien_2_state);
    Count_Diff_lien_2_zip := COUNT(GROUP,%Closest%.Diff_lien_2_zip);
    Count_Diff_state_purchased := COUNT(GROUP,%Closest%.Diff_state_purchased);
    Count_Diff_purchase_date := COUNT(GROUP,%Closest%.Diff_purchase_date);
    Count_Diff_dealer := COUNT(GROUP,%Closest%.Diff_dealer);
    Count_Diff_purchase_price := COUNT(GROUP,%Closest%.Diff_purchase_price);
    Count_Diff_new_used_flag := COUNT(GROUP,%Closest%.Diff_new_used_flag);
    Count_Diff_watercraft_status_code := COUNT(GROUP,%Closest%.Diff_watercraft_status_code);
    Count_Diff_watercraft_status_description := COUNT(GROUP,%Closest%.Diff_watercraft_status_description);
    Count_Diff_history_flag := COUNT(GROUP,%Closest%.Diff_history_flag);
    Count_Diff_coastguard_flag := COUNT(GROUP,%Closest%.Diff_coastguard_flag);
    Count_Diff_signatory := COUNT(GROUP,%Closest%.Diff_signatory);
    Count_Diff_persistent_record_id := COUNT(GROUP,%Closest%.Diff_persistent_record_id);
    %Closest%.SourceField;
  END;
  out_counts := table(%Closest%,%AggRec%,SourceField,few);
ENDMACRO;
END;
