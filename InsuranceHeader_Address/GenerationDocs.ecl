Generated by SALT V3.11.3
Command line options: -MInsuranceHeader_Address -eC:\Users\dubeni01\AppData\Local\Temp\TFRCDBF.tmp 
File being processed :-
OPTIONS:-ga -gs2
THRESHOLD:12
MODULE:InsuranceHeader_Address
IDNAME:ADDRESS_GROUP_ID
RIDFIELD:RID
FILENAME:Address_Link
IDFIELD:EXISTS:ADDRESS_GROUP_ID
RECORDS:3556054198
POPULATION:3378251488
NINES:3
// HACK:SLICEDISTANCE:18
FIELDTYPE:WORDBAG:CAPS:ALLOW(ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'):SPACES( <>{}[]-^=!+&,./):ONFAIL(CLEAN):
FIELD:DID:WEIGHT(.01):FORCE(--):30,0
FIELD:src:CARRY:
FIELD:dt_first_seen:CARRY:
FIELD:dt_last_seen:CARRY:
FIELD:prim_range:CARRY:
FIELD:prim_range_alpha:FORCE(--):PROP:10,0
FIELD:prim_range_num:LIKE(WORDBAG):TYPE(STRING10):BAGOFWORDS(MOST):PROP:FORCE(--):13,0
FIELD:prim_range_fract:FORCE(--):PROP:9,0
FIELD:predir:CARRY:
FIELD:prim_name:CARRY:
FIELD:prim_name_num:LIKE(WORDBAG):TYPE(STRING28):BAGOFWORDS(MOST):FORCE(--):13,0
FIELD:prim_name_alpha:LIKE(WORDBAG):TYPE(STRING50):BAGOFWORDS(MOST):FORCE(--):INITIAL:ABBR:HYPHEN2:10,0
FIELD:addr_suffix:CARRY:
FIELD:addr_ind:CARRY:
FIELD:postdir:CARRY:
FIELD:unit_desig:CARRY:
FIELD:sec_range:CARRY:
FIELD:sec_range_alpha:FORCE(--):PROP:9,0
FIELD:sec_range_num:INITIAL:FORCE(--):PROP:9,0
FIELD:city:LIKE(WORDBAG):TYPE(STRING25):BAGOFWORDS(MOST):EDIT1:HYPHEN2:8,0
FIELD:st:FORCE(--):6,0
FIELD:zip:14,0
FIELD:rec_cnt:CARRY:
FIELD:src_cnt:CARRY:
CONCEPT:addr:prim_range_num:prim_range_alpha:prim_range_fract:prim_name_num:prim_name_alpha:sec_range_num:sec_range_alpha:FORCE(--):26,0
CONCEPT:locale:city:st:zip:15,0
 
Total available specificity:172
Specificity number that should imply one record specified 32.
Assuming an average of 1 records per cluster
Specificity value at which N^2 joins will be tolerated: 26
User specified threshold 12
Recommended matching threshold 42
Search Threshold set at 20
Use of PERSISTs in code set at:3
 
______________________________English Description of Matching Process___________________________
 
A SALT generated matching process really only contains one single matching rule.
SALT compares every record to every possible matching record and then allocates a score to how well
the records match. SALT then pairs those clusters which have the highest match scores provided the scores
meet or exceed the matching threshold. The scoring process is highly sophisticated and detailed below
however it can essentially be thought of as allocating points for every pair of fields that match
and subtracting points for every pair of fields that do not match.
This process was told to produce 3 nines of accuracy on a population of -2147483648 with  3556054272 records.
A matching threshold of 42 is recommended although this was overridden to 12.
 
___Field by Field Breakdown of Scoring Method___
 
DID Scoring: In order for two records to be a match it is also required that the DID fields not not match.
Two DID fields will be considered to match if:
  - they are identical
The exact number of points allocated to a match will depend upon the global scarcity of the DID
but should average 30 points with a failed match substracting 30 points.
(This subtraction estimate is based upon 0% of clusters with 2 or more records have 2 or more values for DID.)
The SPC file has specified that the weight should be multiplied by  0.01
 
src Scoring: This field is not used for scoring; rather it is carried along for context and debugging
dt_first_seen Scoring: This field is not used for scoring; rather it is carried along for context and debugging
dt_last_seen Scoring: This field is not used for scoring; rather it is carried along for context and debugging
prim_range Scoring: This field is not used for scoring; rather it is carried along for context and debugging
prim_range_alpha Scoring: In order for two records to be a match it is also required that the prim_range_alpha fields not not match.
If a field is null and another record in the same cluster has a value for that field then the other records value will be used.
Two prim_range_alpha fields will be considered to match if:
  - they are identical
The exact number of points allocated to a match will depend upon the global scarcity of the prim_range_alpha
but should average 10 points with a failed match substracting 10 points.
(This subtraction estimate is based upon 0% of clusters with 2 or more records have 2 or more values for prim_range_alpha.)
It should also be noted that prim_range_alpha is a child field of addr. Therefore if addr is a full match this field will score 0.
This field is scaled to match with its parent addr, on average that will mean multiplying by 35%
(Although the score is still computed to satisfy the forcing condition.)
 
prim_range_num Scoring: In order for two records to be a match it is also required that the prim_range_num fields not not match.
If a field is null and another record in the same cluster has a value for that field then the other records value will be used.
Two prim_range_num fields will be considered to match if:
  - they are identical
  - if the space separated tokens in one match the other if re-arranged
The exact number of points allocated to a match will depend upon the global scarcity of the prim_range_num
and the degree of fuzziness required but should average 13 points with a failed match substracting 13 points.
(This subtraction estimate is based upon 0% of clusters with 2 or more records have 2 or more values for prim_range_num.)
It should also be noted that prim_range_num is a child field of addr. Therefore if addr is a full match this field will score 0.
This field is scaled to match with its parent addr, on average that will mean multiplying by 35%
(Although the score is still computed to satisfy the forcing condition.)
 
prim_range_fract Scoring: In order for two records to be a match it is also required that the prim_range_fract fields not not match.
If a field is null and another record in the same cluster has a value for that field then the other records value will be used.
Two prim_range_fract fields will be considered to match if:
  - they are identical
The exact number of points allocated to a match will depend upon the global scarcity of the prim_range_fract
but should average 9 points with a failed match substracting 9 points.
(This subtraction estimate is based upon 0% of clusters with 2 or more records have 2 or more values for prim_range_fract.)
It should also be noted that prim_range_fract is a child field of addr. Therefore if addr is a full match this field will score 0.
This field is scaled to match with its parent addr, on average that will mean multiplying by 35%
(Although the score is still computed to satisfy the forcing condition.)
 
predir Scoring: This field is not used for scoring; rather it is carried along for context and debugging
prim_name Scoring: This field is not used for scoring; rather it is carried along for context and debugging
prim_name_num Scoring: In order for two records to be a match it is also required that the prim_name_num fields not not match.
Two prim_name_num fields will be considered to match if:
  - they are identical
  - if the space separated tokens in one match the other if re-arranged
The exact number of points allocated to a match will depend upon the global scarcity of the prim_name_num
and the degree of fuzziness required but should average 13 points with a failed match substracting 13 points.
(This subtraction estimate is based upon 0% of clusters with 2 or more records have 2 or more values for prim_name_num.)
It should also be noted that prim_name_num is a child field of addr. Therefore if addr is a full match this field will score 0.
This field is scaled to match with its parent addr, on average that will mean multiplying by 35%
(Although the score is still computed to satisfy the forcing condition.)
 
prim_name_alpha Scoring: In order for two records to be a match it is also required that the prim_name_alpha fields not not match.
Two prim_name_alpha fields will be considered to match if:
  - they are identical
  - if the two strings are identical if hypens and spaces are ignored
  - if one is the leading or trailing part of the other
  - one is the leading part of the other
  - if the space separated tokens in one match the other if re-arranged
The exact number of points allocated to a match will depend upon the global scarcity of the prim_name_alpha
and the degree of fuzziness required but should average 10 points with a failed match substracting 10 points.
(This subtraction estimate is based upon 0% of clusters with 2 or more records have 2 or more values for prim_name_alpha.)
It should also be noted that prim_name_alpha is a child field of addr. Therefore if addr is a full match this field will score 0.
This field is scaled to match with its parent addr, on average that will mean multiplying by 35%
(Although the score is still computed to satisfy the forcing condition.)
 
addr_suffix Scoring: This field is not used for scoring; rather it is carried along for context and debugging
addr_ind Scoring: This field is not used for scoring; rather it is carried along for context and debugging
postdir Scoring: This field is not used for scoring; rather it is carried along for context and debugging
unit_desig Scoring: This field is not used for scoring; rather it is carried along for context and debugging
sec_range Scoring: This field is not used for scoring; rather it is carried along for context and debugging
sec_range_alpha Scoring: In order for two records to be a match it is also required that the sec_range_alpha fields not not match.
If a field is null and another record in the same cluster has a value for that field then the other records value will be used.
Two sec_range_alpha fields will be considered to match if:
  - they are identical
The exact number of points allocated to a match will depend upon the global scarcity of the sec_range_alpha
but should average 9 points with a failed match substracting 9 points.
(This subtraction estimate is based upon 0% of clusters with 2 or more records have 2 or more values for sec_range_alpha.)
It should also be noted that sec_range_alpha is a child field of addr. Therefore if addr is a full match this field will score 0.
This field is scaled to match with its parent addr, on average that will mean multiplying by 35%
(Although the score is still computed to satisfy the forcing condition.)
 
sec_range_num Scoring: In order for two records to be a match it is also required that the sec_range_num fields not not match.
If a field is null or an initial and another record in the same cluster has a fuller value for that field then the other records value will be used.
Two sec_range_num fields will be considered to match if:
  - they are identical
  - one is the leading part of the other
The exact number of points allocated to a match will depend upon the global scarcity of the sec_range_num
and the degree of fuzziness required but should average 9 points with a failed match substracting 9 points.
(This subtraction estimate is based upon 0% of clusters with 2 or more records have 2 or more values for sec_range_num.)
It should also be noted that sec_range_num is a child field of addr. Therefore if addr is a full match this field will score 0.
This field is scaled to match with its parent addr, on average that will mean multiplying by 35%
(Although the score is still computed to satisfy the forcing condition.)
 
city Scoring: Two city fields will be considered to match if:
  - they are identical
  - if the two strings are identical if hypens and spaces are ignored
  - if one is the leading or trailing part of the other
  - one can be turned into the other with 1 edit (see Glossary)
  - if the space separated tokens in one match the other if re-arranged
The exact number of points allocated to a match will depend upon the global scarcity of the city
and the degree of fuzziness required but should average 8 points with a failed match substracting 8 points.
(This subtraction estimate is based upon 0% of clusters with 2 or more records have 2 or more values for city.)
It should also be noted that city is a child field of locale. Therefore if locale is a full match this field will score 0.
This field is scaled to match with its parent locale, on average that will mean multiplying by 53%
 
st Scoring: In order for two records to be a match it is also required that the st fields not not match.
Two st fields will be considered to match if:
  - they are identical
The exact number of points allocated to a match will depend upon the global scarcity of the st
but should average 6 points with a failed match substracting 6 points.
(This subtraction estimate is based upon 0% of clusters with 2 or more records have 2 or more values for st.)
It should also be noted that st is a child field of locale. Therefore if locale is a full match this field will score 0.
This field is scaled to match with its parent locale, on average that will mean multiplying by 53%
(Although the score is still computed to satisfy the forcing condition.)
 
zip Scoring: Two zip fields will be considered to match if:
  - they are identical
The exact number of points allocated to a match will depend upon the global scarcity of the zip
but should average 14 points with a failed match substracting 14 points.
(This subtraction estimate is based upon 0% of clusters with 2 or more records have 2 or more values for zip.)
It should also be noted that zip is a child field of locale. Therefore if locale is a full match this field will score 0.
This field is scaled to match with its parent locale, on average that will mean multiplying by 53%
 
rec_cnt Scoring: This field is not used for scoring; rather it is carried along for context and debugging
src_cnt Scoring: This field is not used for scoring; rather it is carried along for context and debugging
addr Scoring: In order for two records to be a match it is also required that the addr fields not not match.
Two addr fields will be considered to match if:
  - they are identical
Note: addr is an amalgam of (prim_range_num,prim_range_alpha,prim_range_fract,prim_name_num,prim_name_alpha,sec_range_num,sec_range_alpha)
Points will only be allocated for a match, the amount depending upon the scarcity of addr
but should average 26 points.
In the event of a non-match this field will score 0 (and the child fields will be allowed to score) and the sum of the scores of its' children will be used to determine the force criteria.
 
locale Scoring: Two locale fields will be considered to match if:
  - they are identical
Note: locale is an amalgam of (city,st,zip)
Points will only be allocated for a match, the amount depending upon the scarcity of locale
but should average 15 points.
In the event of a non-match this field will score 0 (and the child fields will be allowed to score).
 
 
__Glossary__
Edit Distance: An edit distance of (say) one implies that one string can be converted into another by doing one of
  - Changing one character
  - Deleting one character
  - Transposing two characters
 
Forcing Criteria: In addition to the general 'best match' logic it is possible to insist that
one particular field must match to some degree or the whole record is considered a bad match.
The criterial applied to that one field is the forcing criteria.
 
Cascade: Best Type rules are applied in such a way that the rules are applied one by one UNTIL the first rule succeeds; subsequent rules are then skipped.
 
__General Notes__
How is it decided how much to subtract for a bad match?
SALT computes for each field the percentage likelihood that a valid cluster will have two or more values for a given field
this value (called the switch value in the SALT literature) is then used to produce the subtraction value from the match value.
The value in this document is the one typed into the SPC file; the code will use a value computed at run-time.
 
