ID "e5c68b61-9ce3-495a-b297-93ee9f78db2e";
NAME AppendBusinessContacts;
LABEL "Append Business Contacts";
VERSION "1.1.0";
AUTHOR "CarmigJX";
CATEGORY COMPUTE;
DESCRIPTION "Appends business contacts for a business that has previously had the BIP Ids appended.";
PERMISSIONS
VIEW:PUBLIC;
EDIT:PRIVATE;
RUN:PUBLIC;
END

INPUTS
	STRING Prefix: LABEL("Append Column Prefix"),DESCRIPTION("Prefix to be appended to the new fields");
	DATASET dsInput: MAPBYNAME
    FIELD UltID: LABEL("UltID"),DESCRIPTION("UltID");
    FIELD OrgID: LABEL("OrgID"),DESCRIPTION("OrgID");
    FIELD SeleID: LABEL("SeleID"),DESCRIPTION("SeleID");
  END
	ENUM("False","True") ReturnExecutivesOnly: LABEL("Return Executives Only"),DESCRIPTION("Returns contacts that are executives only"),OPTIONAL,DEFAULT("False");
	ENUM("True","False") ReturnCurrentContacts: LABEL("Return Current Contacts"),DESCRIPTION("Returns current contacts only"),OPTIONAL,DEFAULT("True");
	ENUM("True","False") SuppressCCPAOptOut: LABEL("Suppress CCPA Opt Out Records"),DESCRIPTION("True - suppresses CCPA Opt Out records\False - appends a flag informing record is a CCPA Opt Out"),OPTIONAL,DEFAULT("True");
	STRING APPLICATIONTYPE: LABEL("Application Type"),DEFAULT(""), OPTIONAL;
  STRING DPPAPURPOSE:LABEL("DPPA Purpose"),DEFAULT("^GLOBAL|DPPAPURPOSE");
  STRING GLBPURPOSE:LABEL("GLB Purpose"),DEFAULT("^GLOBAL|GLBPURPOSE");
  STRING DATARESTRICTIONMASK:LABEL("Data Restriction Mask"),DEFAULT("^GLOBAL|DATARESTRICTIONMASK");
  STRING ContactDistributionCount: LABEL("Contact Distribution Count"), DEFAULT("100"),DESCRIPTION("Used to limit the number of record returned for the contact distribution side effect. Max is 1,000");
END

OUTPUTS
  DATASET dsOutput(dsInput);
  DATASET dsContactsByBusinesses(dsInput): PREFIX(INPUTS.Prefix)
    UNSIGNED6 LexID;
    STRING Title;
    STRING FirstName;
    STRING MiddleName;
    STRING LastName;
    STRING Suffix;
    STRING JobTitle;
    STRING ContactType;
    BOOLEAN IsExecutive;
    INTEGER ExecutiveOrder;
    UNSIGNED DateFirstSeen;
    UNSIGNED DateLastSeen;
    BOOLEAN isCurrent;
    BOOLEAN ContactAppended;
    BOOLEAN ContactIdentified;
    INTEGER IsOptOutFlag: OPTIONAL;
  END
  DATASET dsContacts(dsInput): PREFIX(INPUTS.Prefix)
    UNSIGNED6 LexID;
    STRING Title;
    STRING FirstName;
    STRING MiddleName;
    STRING LastName;
    STRING Suffix;
    STRING JobTitle;
    STRING ContactType;
    BOOLEAN IsExecutive;
    INTEGER ExecutiveOrder;
    UNSIGNED DateFirstSeen;
    UNSIGNED DateLastSeen;
    BOOLEAN isCurrent;
    BOOLEAN ContactAppended;
    BOOLEAN ContactIdentified;
    INTEGER IsOptOutFlag: OPTIONAL;
  END
  
	DATASET BusinessesStats: SIDE,WUID
		INTEGER TotalNumberOfBusinesses: FEW;
    INTEGER NumberOfBusinessesThatHaveContacts: FEW;
    INTEGER NumberOfBusinessesThatHaveLinkedContacts: FEW;
	END
	DATASET ContactsStats: SIDE,WUID
		INTEGER TotalNumberOfContacts: FEW;
    INTEGER LexIDContactsCount: FEW;
    INTEGER NonLexIDContactsCount: FEW;
	END
  DATASET ContactsDistribution: SIDE,WUID
    STRING Business;
    INTEGER NumberOfContacts: FEW;
  END
END

VISUALIZE AppendBusinessContactsStats: LABEL("Append Business Contacts Stats")
	  TABLE Businesses(BusinessesStats): TITLE("Businesses Stats"),LABEL("Distinct Businesses Count","Businesses with Contacts Count", "Businesses with Linked Contacts Count"),VALUE(TotalNumberOfBusinesses,NumberOfBusinessesThatHaveContacts, NumberOfBusinessesThatHaveLinkedContacts);
	  TABLE Contacts(ContactsStats): TITLE("Contacts Stats"),LABEL("Total Business Contacts Count", "LexID Contacts Count", "Non-LexID Contacts Count"),VALUE(TotalNumberOfContacts, LexIDContactsCount, NonLexIDContactsCount);
    BAR   DistributionOfContacts(ContactsDistribution): TITLE("Distribution of Contacts Count"), LABEL(Business), WEIGHT(NumberOfContacts), SORT(-NumberOfContacts);
END

GENERATES INLINE
	IMPORT Business;
  returnCurrent     := %^qReturnCurrentContacts%  = 'True';
  returnExecutives  := %^qReturnExecutivesOnly%   = 'True';
  suppressCCPARecs  := %^qSuppressCCPAOptOut%     = 'True';

  dAppendContacts   := Business.macAppendBusinessContacts(%dsInput%, %UltID%, %OrgID%, %SeleID%,returnCurrent,returnExecutives,
    '%Prefix%','%APPLICATIONTYPE%','%DATARESTRICTIONMASK%','%GLBPURPOSE%','%DPPAPURPOSE%',,suppressCCPARecs); 
    
  %^edsContacts%              := dAppendContacts %^p%;
  %^sdsContactsDistributed%   := DISTRIBUTE(%dsContacts%, HASH32(%UltID%, %OrgID%, %SeleID%));
  %^edsContactsByBusinesses%  := DEDUP(SORT(%dsContactsDistributed%, %UltID%, %OrgID%, %SeleID%, %Prefix%LexID, %Prefix%LastName, %Prefix%FirstName, %Prefix%Suffix, LOCAL), %UltID%, %OrgID%, %SeleID%, %Prefix%LexID, %Prefix%LastName, %Prefix%FirstName, %Prefix%Suffix, LOCAL) %^p%;
  %^edsOutput% 			          := %dsInput%;
  dContactsByBusinessesDup    := DEDUP(SORT(%dsContactsDistributed%((INTEGER)%SeleID%<>0), %UltID%, %OrgID%, %SeleID%, LOCAL), %UltID%, %OrgID%, %SeleID%, LOCAL);
  tDistinctBusinesses         := TABLE(%dsOutput%((INTEGER)%SeleID%<>0),{%UltID%, %OrgID%, %SeleID%},%UltID%, %OrgID%, %SeleID%, MERGE);
  %^eBusinessesStats%         := DATASET([{COUNT(tDistinctBusinesses), COUNT(dContactsByBusinessesDup), COUNT(dContactsByBusinessesDup(%Prefix%ContactIdentified))}],{INTEGER TotalNumberOfBusinesses, INTEGER NumberOfBusinessesThatHaveContacts, INTEGER NumberOfBusinessesThatHaveLinkedContacts});
  tContacts                   := TABLE(%dsContacts%,{%Prefix%LexID, %Prefix%LastName, %Prefix%FirstName, %Prefix%Suffix},%Prefix%LexID, %Prefix%LastName, %Prefix%FirstName, %Prefix%Suffix, MERGE);
  %^eContactsStats%           := DATASET([{COUNT(tContacts), COUNT(tContacts(%Prefix%LexID<>0)), COUNT(tContacts(%Prefix%LexID=0))}],{INTEGER TotalNumberOfContacts, INTEGER LexIDContactsCount, INTEGER NonLexIDContactsCount});
  dForContactsDistribution    := PROJECT(%dsContactsByBusinesses%, TRANSFORM({RECORDOF(LEFT), STRING _Business},
    SELF._Business := 'UltID:'+(STRING)LEFT.%UltID%+' OrgID:'+(STRING)LEFT.%OrgID%+' SeleID:'+(STRING)LEFT.%SeleID%;
    SELF := LEFT));
  iContactDistributionTopN    := IF(%ContactDistributionCount% >= 1000, 1000, (INTEGER)%ContactDistributionCount%);
  %^eContactsDistribution%    := TOPN(TABLE(dForContactsDistribution,{Business := _Business, NumberOfContacts := COUNT(GROUP)},_Business), iContactDistributionTopN, -NumberOfContacts);
ENDGENERATES

RESOURCES
	FILE readme: FILENAME("AppendBusinessContacts_ReadMe.txt"),LABEL("Plugin Readme File");
	FILE appendbusinesscontacts_testcmp: FILENAME("appendbusinesscontacts_testcmp.txt"),LABEL("Plugin Test Composition");
	FILE AppendBusinessContacts_BuildTestDataset: FILENAME("AppendBusinessContacts_BuildTestDataset.ecl"),LABEL("BWR to create data for test composition");
	ECL  Business:FILENAME("Business"), URL("<http://10.241.100.153:8010>"); 
	ECL  BIPV2:FILENAME("BIPV2"), URL("<http://10.241.100.153:8010>"); 
	ECL  UT:FILENAME("UT"), URL("<http://10.241.100.153:8010>"); 
	ECL  BIPV2_Suppression:FILENAME("BIPV2_Suppression"), URL("<http://10.241.100.153:8010>"); 
	ECL  BIPV2_Build:FILENAME("BIPV2_Build"), URL("<http://10.241.100.153:8010>"); 
	ECL  doxie:FILENAME("doxie"), URL("<http://10.241.100.153:8010>"); 
	ECL  Suppress:FILENAME("Suppress"), URL("<http://10.241.100.153:8010>"); 
	LOGICALFILE test: FILENAME("~qa::business::appendbusinesscontacts::input"),URL("http://10.241.100.159:8010"),DALIIP("10.241.100.159"),CLUSTER("thor100_100cert");
	INDEX Keys.Key_Contacts:FILENAME("~thor_data400::key::bipv2::business_header::qa::contact_linkids"), URL("http://10.241.100.157:8010"), DALIIP("10.241.100.157"), CLUSTER("thor100_100dev");  
END
