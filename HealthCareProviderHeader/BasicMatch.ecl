IMPORT SALT29,ut;
EXPORT BasicMatch(DATASET(layout_HealthProvider) ih) := MODULE// An extremely tight pre-match designed to quickly eliminate high volume duplicates
SHARED  h00 := Specificities(ih).input_file;
  SHARED s := Specificities(ih).specificities[1];
  SHARED h00_match := h00( 
      0 + IF( SSN  IN SET(s.nulls_SSN,SSN), 0, 24 ) + IF( DID  IN SET(s.nulls_DID,DID), 0, 23 ) + IF( DOB_year  IN SET(s.nulls_DOB_year,DOB_year) AND DOB_month  IN SET(s.nulls_DOB_month,DOB_month) AND DOB_day  IN SET(s.nulls_DOB_day,DOB_day), 0, 17 ) + IF( SNAME  IN SET(s.nulls_SNAME,SNAME), 0, 8 ) + IF( FNAME  IN SET(s.nulls_FNAME,FNAME), 0, 8 ) + IF( MNAME  IN SET(s.nulls_MNAME,MNAME), 0, 8 ) + IF( LNAME  IN SET(s.nulls_LNAME,LNAME), 0, 11 ) + IF( GENDER  IN SET(s.nulls_GENDER,GENDER), 0, 2 ) + IF( DERIVED_GENDER  IN SET(s.nulls_DERIVED_GENDER,DERIVED_GENDER), 0, 1 ) + IF( C_LIC_NBR  IN SET(s.nulls_C_LIC_NBR,C_LIC_NBR), 0, 20 ) + IF( PHONE  IN SET(s.nulls_PHONE,PHONE), 0, 18 ) + IF( FAX  IN SET(s.nulls_FAX,FAX), 0, 21 ) + IF( PRIM_NAME  IN SET(s.nulls_PRIM_NAME,PRIM_NAME), 0, 13 ) + IF( PRIM_RANGE  IN SET(s.nulls_PRIM_RANGE,PRIM_RANGE), 0, 11 ) + IF( SEC_RANGE  IN SET(s.nulls_SEC_RANGE,SEC_RANGE), 0, 7 ) + IF( V_CITY_NAME  IN SET(s.nulls_V_CITY_NAME,V_CITY_NAME), 0, 10 ) + IF( ST  IN SET(s.nulls_ST,ST), 0, 5 ) + IF( ZIP  IN SET(s.nulls_ZIP,ZIP), 0, 12 ) + IF( TAX_ID  IN SET(s.nulls_TAX_ID,TAX_ID), 0, 0 ) + IF( BILLING_TAX_ID  IN SET(s.nulls_BILLING_TAX_ID,BILLING_TAX_ID), 0, 16 ) + IF( UPIN  IN SET(s.nulls_UPIN,UPIN), 0, 24 ) + IF( NPI_NUMBER  IN SET(s.nulls_NPI_NUMBER,NPI_NUMBER), 0, 24 ) + IF( BILLING_NPI_NUMBER  IN SET(s.nulls_BILLING_NPI_NUMBER,BILLING_NPI_NUMBER), 0, 16 ) + IF( DEA_NUMBER  IN SET(s.nulls_DEA_NUMBER,DEA_NUMBER), 0, 24 ) + IF( TAXONOMY  IN SET(s.nulls_TAXONOMY,TAXONOMY), 0, 8 ) + IF( VENDOR_ID  IN SET(s.nulls_VENDOR_ID,VENDOR_ID), 0, 23 ) + IF( LIC_TYPE  IN SET(s.nulls_LIC_TYPE,LIC_TYPE), 0, 6 ) + IF( CNSMR_SSN  IN SET(s.nulls_CNSMR_SSN,CNSMR_SSN), 0, 23 ) + IF( CNSMR_DOB_year  IN SET(s.nulls_CNSMR_DOB_year,CNSMR_DOB_year) AND CNSMR_DOB_month  IN SET(s.nulls_CNSMR_DOB_month,CNSMR_DOB_month) AND CNSMR_DOB_day  IN SET(s.nulls_CNSMR_DOB_day,CNSMR_DOB_day), 0, 17 ) + IF( LAT_LONG  IN SET(s.nulls_LAT_LONG,LAT_LONG), 0, 10 ) >= Config.BasicMatchThreshold); // Potentially remove anything that would violate FORCE(+) constraints
  MatchCands := JOIN(h00_match,Specificities(ih).ClusterSizes(InCluster=1),LEFT.LNPID=RIGHT.LNPID,TRANSFORM(LEFT),LOCAL); // Singletons only may match
  Rec := RECORD
    SALT29.UIDType LNPID1;
    SALT29.UIDType LNPID2;
  END;
// It is important that this is an EQUIVALENCE relationship - it allows us to form an implicit transitive closure
  h01 := SORT(h00_match,SSN,DID,DOB_year,DOB_month,DOB_day,SNAME,FNAME,MNAME,LNAME,GENDER,DERIVED_GENDER,C_LIC_NBR,PHONE,FAX,PRIM_NAME,PRIM_RANGE,SEC_RANGE,V_CITY_NAME,ST,ZIP,TAX_ID,BILLING_TAX_ID,UPIN,NPI_NUMBER,BILLING_NPI_NUMBER,DEA_NUMBER,TAXONOMY,VENDOR_ID,LIC_TYPE,CNSMR_SSN,CNSMR_DOB_year,CNSMR_DOB_month,CNSMR_DOB_day,LAT_LONG,LNPID);
  h02 := DEDUP(h01,SSN,DID,DOB_year,DOB_month,DOB_day,SNAME,FNAME,MNAME,LNAME,GENDER,DERIVED_GENDER,C_LIC_NBR,PHONE,FAX,PRIM_NAME,PRIM_RANGE,SEC_RANGE,V_CITY_NAME,ST,ZIP,TAX_ID,BILLING_TAX_ID,UPIN,NPI_NUMBER,BILLING_NPI_NUMBER,DEA_NUMBER,TAXONOMY,VENDOR_ID,LIC_TYPE,CNSMR_SSN,CNSMR_DOB_year,CNSMR_DOB_month,CNSMR_DOB_day,LAT_LONG,LOCAL); // ,LOCAL ok - we don't need a perfect dedup - this is an optimization
  Match := JOIN(h02,MatchCands,LEFT.SSN = RIGHT.SSN AND LEFT.DID = RIGHT.DID AND LEFT.DOB_year = RIGHT.DOB_year AND LEFT.DOB_month = RIGHT.DOB_month AND LEFT.DOB_day = RIGHT.DOB_day AND LEFT.SNAME = RIGHT.SNAME AND LEFT.FNAME = RIGHT.FNAME
       AND LEFT.MNAME = RIGHT.MNAME AND LEFT.LNAME = RIGHT.LNAME AND LEFT.GENDER = RIGHT.GENDER AND LEFT.DERIVED_GENDER = RIGHT.DERIVED_GENDER AND LEFT.C_LIC_NBR = RIGHT.C_LIC_NBR AND LEFT.LIC_STATE = RIGHT.LIC_STATE
       AND LEFT.PHONE = RIGHT.PHONE AND LEFT.FNAME = RIGHT.FNAME AND LEFT.FAX = RIGHT.FAX AND LEFT.FNAME = RIGHT.FNAME AND LEFT.PRIM_NAME = RIGHT.PRIM_NAME AND LEFT.PRIM_RANGE = RIGHT.PRIM_RANGE AND LEFT.SEC_RANGE = RIGHT.SEC_RANGE
       AND LEFT.V_CITY_NAME = RIGHT.V_CITY_NAME AND LEFT.ST = RIGHT.ST AND LEFT.ZIP = RIGHT.ZIP AND LEFT.TAX_ID = RIGHT.TAX_ID AND LEFT.FNAME = RIGHT.FNAME AND LEFT.BILLING_TAX_ID = RIGHT.BILLING_TAX_ID AND LEFT.FNAME = RIGHT.FNAME
       AND LEFT.UPIN = RIGHT.UPIN AND LEFT.NPI_NUMBER = RIGHT.NPI_NUMBER AND LEFT.BILLING_NPI_NUMBER = RIGHT.BILLING_NPI_NUMBER AND LEFT.FNAME = RIGHT.FNAME AND LEFT.DEA_NUMBER = RIGHT.DEA_NUMBER AND LEFT.TAXONOMY = RIGHT.TAXONOMY AND LEFT.FNAME = RIGHT.FNAME
       AND LEFT.VENDOR_ID = RIGHT.VENDOR_ID AND LEFT.SRC = RIGHT.SRC AND LEFT.LIC_TYPE = RIGHT.LIC_TYPE AND LEFT.VENDOR_ID = RIGHT.VENDOR_ID AND LEFT.CNSMR_SSN = RIGHT.CNSMR_SSN AND LEFT.VENDOR_ID = RIGHT.VENDOR_ID AND LEFT.CNSMR_DOB_year = RIGHT.CNSMR_DOB_year AND LEFT.CNSMR_DOB_month = RIGHT.CNSMR_DOB_month AND LEFT.CNSMR_DOB_day = RIGHT.CNSMR_DOB_day AND LEFT.VENDOR_ID = RIGHT.VENDOR_ID AND LEFT.LAT_LONG = RIGHT.LAT_LONG AND LEFT.FNAME = RIGHT.FNAME AND LEFT.LNPID < RIGHT.LNPID,TRANSFORM(Rec,SELF.LNPID2 := LEFT.LNPID,SELF.LNPID1 := RIGHT.LNPID));
SHARED PickOne := DEDUP( SORT( DISTRIBUTE( Match,HASH(LNPID1) ), LNPID1, LNPID2, LOCAL), LNPID1, LOCAL); // Lowest collector ID for each singleton
EXPORT patch_file := PickOne;
  ut.MAC_Patch_Id(h00,LNPID,PickOne,LNPID1,LNPID2,o1); // Patch the input file
EXPORT input_file := o1;
EXPORT basic_match_count := COUNT(PickOne);
EXPORT id_delta := COUNT(DEDUP(h00,LNPID,ALL))-COUNT(DEDUP(input_file,LNPID,ALL)); // Should equal basic_match_count
END;
