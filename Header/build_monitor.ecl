import wk_ut,_control,ut,header;
oneWuid(string wd) := wk_ut.get_WorkunitList(wd,wd, pesp := _control.IPAddress.prod_thor_esp);

// get_WorkunitList is limited to 100 results, so we need to specify the filter in the soap call.
mwuid0 := wk_ut.get_WorkunitList('W20151124-000000','W20181211-000000'
											,pOwner := 'gmarcan_prod', pState := 'running', pesp := _control.IPAddress.prod_thor_esp)+
         wk_ut.get_WorkunitList('W20151124-000000','W20181211-000000'
											,pOwner := 'gmarcan_prod', pState := 'blocked', pesp := _control.IPAddress.prod_thor_esp)+
         wk_ut.get_WorkunitList('W20151124-000000','W20181211-000000'
											,pOwner := 'svc_person_header', pState := 'running', pesp := _control.IPAddress.prod_thor_esp)+
         wk_ut.get_WorkunitList('W20151124-000000','W20181211-000000'
											,pOwner := 'svc_person_header', pState := 'blocked', pesp := _control.IPAddress.prod_thor_esp)
					
					;
eclTimerResultLayout :=
	record
	
		string 	Name			  {xpath('Name'			  )};
		string	Value			  {xpath('Value'			)};
		string 	count		    {xpath('count'      )};
		string  GraphName		{xpath('GraphName'	)};
		string  SubGraphId	{xpath('SubGraphId' )};
	
	end;

l_report := record 
	string wuid;
	string owner;
	string job;
	string state;
	dataset(eclTimerResultLayout) timers;
	string htmlReport :='';
end;


getLatestTiming(dataset(eclTimerResultLayout) timers) := function
	
	cnt := count(timers);
	latest := timers[(cnt-5)..cnt];
	slim_latest := project(latest,{latest.name,latest.value});
	return header.mac_convert_ds.toHTML(slim_latest,name,value,,,,,true);
end;


mwuid:=mwuid0(trim(wuid)<>workunit); // REMOVE CURRENT WUID FROM LIST

l_report assignReport(mwuid L) := transform
	self.timers := project(wk_ut.get_WUInfo(L.wuid, pesp := _control.IPAddress.prod_thor_esp).WUInfo.timers
												,eclTimerResultLayout);
  self.htmlReport := getLatestTiming(self.timers);
	self := L;
end;

reports := project(mwuid,assignReport(LEFT));

href_wuid(string wrkut) := '<a href="http://prod_esp.br.seisint.com:8010/?Wuid='+wrkut+'&Widget=WUDetailsWidget#/stub/Summary">'+wrkut+'</a>';

l_report addHtml(reports L, reports R):= TRANSFORM // 1 left is blank
	SELF.htmlReport := L.htmlReport + '</br>'+href_wuid(R.wuid)+'('+R.state+')'+' ('+R.owner+')('+R.job+')'+'</br>'+R.htmlReport;
	SELF := R;
END;

hReport := iterate(reports,addHtml(LEFT,RIGHT));
attachment := '<html><body>'+hReport[count(hReport)].htmlReport+'</body></html>';

lemail := STD.System.Email.SendEmailAttachText(
				_control.MyInfo.EmailAddressNotify,							// recipientAddress
				'High Priority Workunit report',  			// subjectText
				'Please find the latest report attached.\n\nThis report was generated by '+workunit+'.',			// bodyText
				attachment, 														 			// attachment
				'text/html',											 		  			// fileMimeType
				'high_priority_workunit_report.html'  	// defaultFileName
);

GetDate := (STRING8)Std.Date.Today();
GetTIme := Std.Date.SecondsToString(Std.date.CurrentSeconds(true), '%H%M%S');
EXPORT build_monitor := parallel(
																	
header.build_monitor_scheduled_jobs,
if(count(mwuid)>0,lemail,output(getDate+' '+GetTIme+': No high priority workunits are being monitored')),
header.build_monitor_wuid_report

);