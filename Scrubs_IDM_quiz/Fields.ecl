IMPORT ut,SALT32;
EXPORT Fields := MODULE
// Processing for each FieldType
EXPORT SALT32.StrType FieldTypeName(UNSIGNED2 i) := CHOOSE(i,'invalid_alpha','INVALID_UNIQUE_IDENTITY_COUNT','INVALID_Auth_Fail','INVALID_AUTH_FAIL_STATUS','invalid_QUIZ_STATUS','invalid_AUTH_STATUS','invalid_VERIF_STATUS','INVALID_auth_score','INVALID_SUB_PRODUCT_NAME','INVALID_ID_DISCOVERY_Link_ID','INVALID_PROID_Link_ID','INVALID_name','INVALID_SSN');
EXPORT FieldTypeNum(SALT32.StrType fn) := CASE(fn,'invalid_alpha' => 1,'INVALID_UNIQUE_IDENTITY_COUNT' => 2,'INVALID_Auth_Fail' => 3,'INVALID_AUTH_FAIL_STATUS' => 4,'invalid_QUIZ_STATUS' => 5,'invalid_AUTH_STATUS' => 6,'invalid_VERIF_STATUS' => 7,'INVALID_auth_score' => 8,'INVALID_SUB_PRODUCT_NAME' => 9,'INVALID_ID_DISCOVERY_Link_ID' => 10,'INVALID_PROID_Link_ID' => 11,'INVALID_name' => 12,'INVALID_SSN' => 13,0);
EXPORT MakeFT_invalid_alpha(SALT32.StrType s0) := FUNCTION
  s1 := SALT32.stringfilter(s0,'ABCDEFGHIJKLMNOPQRSTUVWXYZ'); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_invalid_alpha(SALT32.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT32.StringFilter(s,'ABCDEFGHIJKLMNOPQRSTUVWXYZ'))),~(LENGTH(TRIM(s)) >= 0));
EXPORT InValidMessageFT_invalid_alpha(UNSIGNED1 wh) := CHOOSE(wh,SALT32.HygieneErrors.NotInChars('ABCDEFGHIJKLMNOPQRSTUVWXYZ'),SALT32.HygieneErrors.NotLength('0..'),SALT32.HygieneErrors.Good);
EXPORT MakeFT_INVALID_UNIQUE_IDENTITY_COUNT(SALT32.StrType s0) := FUNCTION
  s1 := SALT32.stringfilter(s0,'0123456789'); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_INVALID_UNIQUE_IDENTITY_COUNT(SALT32.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT32.StringFilter(s,'0123456789'))),~(LENGTH(TRIM(s)) >= 0));
EXPORT InValidMessageFT_INVALID_UNIQUE_IDENTITY_COUNT(UNSIGNED1 wh) := CHOOSE(wh,SALT32.HygieneErrors.NotInChars('0123456789'),SALT32.HygieneErrors.NotLength('0..'),SALT32.HygieneErrors.Good);
EXPORT MakeFT_INVALID_Auth_Fail(SALT32.StrType s0) := FUNCTION
  s1 := SALT32.stringfilter(s0,'01'); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_INVALID_Auth_Fail(SALT32.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT32.StringFilter(s,'01'))),~(LENGTH(TRIM(s)) = 1));
EXPORT InValidMessageFT_INVALID_Auth_Fail(UNSIGNED1 wh) := CHOOSE(wh,SALT32.HygieneErrors.NotInChars('01'),SALT32.HygieneErrors.NotLength('1'),SALT32.HygieneErrors.Good);
EXPORT MakeFT_INVALID_AUTH_FAIL_STATUS(SALT32.StrType s0) := FUNCTION
  s1 := SALT32.stringfilter(s0,'01'); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_INVALID_AUTH_FAIL_STATUS(SALT32.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT32.StringFilter(s,'01'))),~(LENGTH(TRIM(s)) = 1));
EXPORT InValidMessageFT_INVALID_AUTH_FAIL_STATUS(UNSIGNED1 wh) := CHOOSE(wh,SALT32.HygieneErrors.NotInChars('01'),SALT32.HygieneErrors.NotLength('1'),SALT32.HygieneErrors.Good);
EXPORT MakeFT_invalid_QUIZ_STATUS(SALT32.StrType s0) := FUNCTION
  s1 := SALT32.stringfilter(s0,'ABCDEFGHIJKLMNOPQRSTUVWXYZ'); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_invalid_QUIZ_STATUS(SALT32.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT32.StringFilter(s,'ABCDEFGHIJKLMNOPQRSTUVWXYZ'))),~(LENGTH(TRIM(s)) >= 0));
EXPORT InValidMessageFT_invalid_QUIZ_STATUS(UNSIGNED1 wh) := CHOOSE(wh,SALT32.HygieneErrors.NotInChars('ABCDEFGHIJKLMNOPQRSTUVWXYZ'),SALT32.HygieneErrors.NotLength('0..'),SALT32.HygieneErrors.Good);
EXPORT MakeFT_invalid_AUTH_STATUS(SALT32.StrType s0) := FUNCTION
  s1 := SALT32.stringfilter(s0,'ABCDEFGHIJKLMNOPQRSTUVWXYZ'); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_invalid_AUTH_STATUS(SALT32.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT32.StringFilter(s,'ABCDEFGHIJKLMNOPQRSTUVWXYZ'))),~(LENGTH(TRIM(s)) >= 0));
EXPORT InValidMessageFT_invalid_AUTH_STATUS(UNSIGNED1 wh) := CHOOSE(wh,SALT32.HygieneErrors.NotInChars('ABCDEFGHIJKLMNOPQRSTUVWXYZ'),SALT32.HygieneErrors.NotLength('0..'),SALT32.HygieneErrors.Good);
EXPORT MakeFT_invalid_VERIF_STATUS(SALT32.StrType s0) := FUNCTION
  s1 := SALT32.stringfilter(s0,'ABCDEFGHIJKLMNOPQRSTUVWXYZ'); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_invalid_VERIF_STATUS(SALT32.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT32.StringFilter(s,'ABCDEFGHIJKLMNOPQRSTUVWXYZ'))),~(LENGTH(TRIM(s)) >= 0));
EXPORT InValidMessageFT_invalid_VERIF_STATUS(UNSIGNED1 wh) := CHOOSE(wh,SALT32.HygieneErrors.NotInChars('ABCDEFGHIJKLMNOPQRSTUVWXYZ'),SALT32.HygieneErrors.NotLength('0..'),SALT32.HygieneErrors.Good);
EXPORT MakeFT_INVALID_auth_score(SALT32.StrType s0) := FUNCTION
  s1 := SALT32.stringfilter(s0,'0123456789'); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_INVALID_auth_score(SALT32.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT32.StringFilter(s,'0123456789'))),~(LENGTH(TRIM(s)) >= 0));
EXPORT InValidMessageFT_INVALID_auth_score(UNSIGNED1 wh) := CHOOSE(wh,SALT32.HygieneErrors.NotInChars('0123456789'),SALT32.HygieneErrors.NotLength('0..'),SALT32.HygieneErrors.Good);
EXPORT MakeFT_INVALID_SUB_PRODUCT_NAME(SALT32.StrType s0) := FUNCTION
  s1 := SALT32.stringfilter(s0,'ABCDEFGHIJKLMNOPQRSTUVWXYZ -,.'); // Only allow valid symbols
  s2 := SALT32.stringcleanspaces( SALT32.stringsubstituteout(s1,' -,.',' ') ); // Insert spaces but avoid doubles
  RETURN  s2;
END;
EXPORT InValidFT_INVALID_SUB_PRODUCT_NAME(SALT32.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT32.StringFilter(s,'ABCDEFGHIJKLMNOPQRSTUVWXYZ -,.'))));
EXPORT InValidMessageFT_INVALID_SUB_PRODUCT_NAME(UNSIGNED1 wh) := CHOOSE(wh,SALT32.HygieneErrors.NotInChars('ABCDEFGHIJKLMNOPQRSTUVWXYZ -,.'),SALT32.HygieneErrors.Good);
EXPORT MakeFT_INVALID_ID_DISCOVERY_Link_ID(SALT32.StrType s0) := FUNCTION
  s1 := SALT32.stringfilter(s0,'0123456789'); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_INVALID_ID_DISCOVERY_Link_ID(SALT32.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT32.StringFilter(s,'0123456789'))),~(LENGTH(TRIM(s)) = 12));
EXPORT InValidMessageFT_INVALID_ID_DISCOVERY_Link_ID(UNSIGNED1 wh) := CHOOSE(wh,SALT32.HygieneErrors.NotInChars('0123456789'),SALT32.HygieneErrors.NotLength('12'),SALT32.HygieneErrors.Good);
EXPORT MakeFT_INVALID_PROID_Link_ID(SALT32.StrType s0) := FUNCTION
  s1 := SALT32.stringfilter(s0,'0123456789'); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_INVALID_PROID_Link_ID(SALT32.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT32.StringFilter(s,'0123456789'))),~(LENGTH(TRIM(s)) = 12));
EXPORT InValidMessageFT_INVALID_PROID_Link_ID(UNSIGNED1 wh) := CHOOSE(wh,SALT32.HygieneErrors.NotInChars('0123456789'),SALT32.HygieneErrors.NotLength('12'),SALT32.HygieneErrors.Good);
EXPORT MakeFT_INVALID_name(SALT32.StrType s0) := FUNCTION
  s1 := SALT32.stringfilter(s0,'ABCDEFGHIJKLMNOPQRSTUVWXYZ -,.'); // Only allow valid symbols
  s2 := SALT32.stringcleanspaces( SALT32.stringsubstituteout(s1,' -,.',' ') ); // Insert spaces but avoid doubles
  RETURN  s2;
END;
EXPORT InValidFT_INVALID_name(SALT32.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT32.StringFilter(s,'ABCDEFGHIJKLMNOPQRSTUVWXYZ -,.'))));
EXPORT InValidMessageFT_INVALID_name(UNSIGNED1 wh) := CHOOSE(wh,SALT32.HygieneErrors.NotInChars('ABCDEFGHIJKLMNOPQRSTUVWXYZ -,.'),SALT32.HygieneErrors.Good);
EXPORT MakeFT_INVALID_SSN(SALT32.StrType s0) := FUNCTION
  s1 := SALT32.stringfilter(s0,'0123456789'); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_INVALID_SSN(SALT32.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT32.StringFilter(s,'0123456789'))),~(LENGTH(TRIM(s)) = 9 OR LENGTH(TRIM(s)) = 4 OR LENGTH(TRIM(s)) = 0));
EXPORT InValidMessageFT_INVALID_SSN(UNSIGNED1 wh) := CHOOSE(wh,SALT32.HygieneErrors.NotInChars('0123456789'),SALT32.HygieneErrors.NotLength('9,4,0'),SALT32.HygieneErrors.Good);
EXPORT SALT32.StrType FieldName(UNSIGNED2 i) := CHOOSE(i,'TRANS_NUM_ID','TRANSACTION_DATE','ACCOUNT','OPER_USERNAME','TRANS_CLIENT_ID','INPUTED_FIRST_NAME','INPUTED_LAST_NAME','INPUTED_SSN','INPUTED_STREET','INPUTED_CITY','INPUTED_STATE','INPUTED_ZIP','INPUTED_DOB','UNIQUE_IDENTITY_COUNT','IDENTITY_LOCATED','IDENTITY_NOT_LOCATED','SELECTED_FIRST_NAME','SELECTED_LAST_NAME','SELECTED_SSN','SELECTED_DOB','SELECTED_STREET','SELECTED_CITY','SELECTED_STATE','SELECTED_ZIP','VERIF_PASS','VERIF_FAIL','VERIF_ERROR','VERIF_NO_DATA_FOUND','NUM_VERIF_CHKS','NUM_VERIF_CHKS_PASS','AUTH_SCORE','AUTH_REQU_SCORE','AUTH_PASS','AUTH_FAIL','AUTH_OPT_OUT','AUTH_UNABLE_TO_GEN','AUTH_ERROR','AUTH_QUIZ_EXPIRE','CLIENT_REFERENCE_ID','AUTH_RESPONSE_TIME','VERIF_RESPONSE_TIME','NAME','IS_VERIFICATION','IS_AUTHENTICATION','ITEM_STATUS','AUTH_STATUS','VERIF_STATUS','PROID_ALIAS','PROCHECK_ALIAS','ID_DISCOVERY_ALIAS','QUIZ1_STATUS','QUIZ2_STATUS','ALIAS_NAME','PRODUCT_SEQUENCE','QUIZ_STATUS','IS_RESERVED','INPUTED_LINK_ID','SELECTED_LINK_ID','ID_DISCOVERY_LINK_ID','PROCHECK_LINK_ID','PROID_LINK_ID','INPUTED_PHONE_NUMBER','ACCOUNT_VERIF_PASS','ACCOUNT_VERIF_FAIL','ACCOUNT_VERIF_ERROR','ACCOUNT_VERIF_NO_DATA_FOUND','ACCOUNT_NUM_VERIF_CHKS','ACCOUNT_NUM_VERIF_CHKS_PASS','ACCOUNT_VERIF_RESPONSE_TIME','IS_ACCOUNT_VERIFICATION','ACCOUNT_VERIF_STATUS','ACCOUNT_VERIFICATION_ALIAS','ACCOUNT_VERIF_LINK_ID','BUSINESS_NAME','FEIN','TAXID','GROUP_NAME','GROUP_SEQUENCE','SUB_PRODUCT_NAME','SUB_PRODUCT_SEQUENCE','IS_SURVEY','SURVEY_STATUS','SURVEY_QUESTION','QUESTION_SEQUENCE','QUESTION_CHOICE','CHOICE_SEQUENCE','USER_CHOICE','ACTUAL_PROID_ALIAS','ACTUAL_PROCHECK_ALIAS','ACTUAL_ID_DISCOVERY_ALIAS','REAL_PROID_ALIAS','REAL_PROCHECK_ALIAS','REAL_ID_DISCOVERY_ALIAS','IS_CUSTOM','SOURCE_IP','IDENTITY_LOCATED_STATUS','IDENTITY_NOT_LOCATED_STATUS','VERIF_ERROR_STATUS','VERIF_NO_DATA_FOUND_STATUS','ACCOUNT_VERIF_ERROR_STATUS','ACCOUNT_VERIF_NO_DATA_FOUND_STATUS','AUTH_FAIL_STATUS','AUTH_STATUS_CODE','QUIZ_STATUS_CODE','CONVERSATION_ID','CUST_USERNAME');
EXPORT FieldNum(SALT32.StrType fn) := CASE(fn,'TRANS_NUM_ID' => 0,'TRANSACTION_DATE' => 1,'ACCOUNT' => 2,'OPER_USERNAME' => 3,'TRANS_CLIENT_ID' => 4,'INPUTED_FIRST_NAME' => 5,'INPUTED_LAST_NAME' => 6,'INPUTED_SSN' => 7,'INPUTED_STREET' => 8,'INPUTED_CITY' => 9,'INPUTED_STATE' => 10,'INPUTED_ZIP' => 11,'INPUTED_DOB' => 12,'UNIQUE_IDENTITY_COUNT' => 13,'IDENTITY_LOCATED' => 14,'IDENTITY_NOT_LOCATED' => 15,'SELECTED_FIRST_NAME' => 16,'SELECTED_LAST_NAME' => 17,'SELECTED_SSN' => 18,'SELECTED_DOB' => 19,'SELECTED_STREET' => 20,'SELECTED_CITY' => 21,'SELECTED_STATE' => 22,'SELECTED_ZIP' => 23,'VERIF_PASS' => 24,'VERIF_FAIL' => 25,'VERIF_ERROR' => 26,'VERIF_NO_DATA_FOUND' => 27,'NUM_VERIF_CHKS' => 28,'NUM_VERIF_CHKS_PASS' => 29,'AUTH_SCORE' => 30,'AUTH_REQU_SCORE' => 31,'AUTH_PASS' => 32,'AUTH_FAIL' => 33,'AUTH_OPT_OUT' => 34,'AUTH_UNABLE_TO_GEN' => 35,'AUTH_ERROR' => 36,'AUTH_QUIZ_EXPIRE' => 37,'CLIENT_REFERENCE_ID' => 38,'AUTH_RESPONSE_TIME' => 39,'VERIF_RESPONSE_TIME' => 40,'NAME' => 41,'IS_VERIFICATION' => 42,'IS_AUTHENTICATION' => 43,'ITEM_STATUS' => 44,'AUTH_STATUS' => 45,'VERIF_STATUS' => 46,'PROID_ALIAS' => 47,'PROCHECK_ALIAS' => 48,'ID_DISCOVERY_ALIAS' => 49,'QUIZ1_STATUS' => 50,'QUIZ2_STATUS' => 51,'ALIAS_NAME' => 52,'PRODUCT_SEQUENCE' => 53,'QUIZ_STATUS' => 54,'IS_RESERVED' => 55,'INPUTED_LINK_ID' => 56,'SELECTED_LINK_ID' => 57,'ID_DISCOVERY_LINK_ID' => 58,'PROCHECK_LINK_ID' => 59,'PROID_LINK_ID' => 60,'INPUTED_PHONE_NUMBER' => 61,'ACCOUNT_VERIF_PASS' => 62,'ACCOUNT_VERIF_FAIL' => 63,'ACCOUNT_VERIF_ERROR' => 64,'ACCOUNT_VERIF_NO_DATA_FOUND' => 65,'ACCOUNT_NUM_VERIF_CHKS' => 66,'ACCOUNT_NUM_VERIF_CHKS_PASS' => 67,'ACCOUNT_VERIF_RESPONSE_TIME' => 68,'IS_ACCOUNT_VERIFICATION' => 69,'ACCOUNT_VERIF_STATUS' => 70,'ACCOUNT_VERIFICATION_ALIAS' => 71,'ACCOUNT_VERIF_LINK_ID' => 72,'BUSINESS_NAME' => 73,'FEIN' => 74,'TAXID' => 75,'GROUP_NAME' => 76,'GROUP_SEQUENCE' => 77,'SUB_PRODUCT_NAME' => 78,'SUB_PRODUCT_SEQUENCE' => 79,'IS_SURVEY' => 80,'SURVEY_STATUS' => 81,'SURVEY_QUESTION' => 82,'QUESTION_SEQUENCE' => 83,'QUESTION_CHOICE' => 84,'CHOICE_SEQUENCE' => 85,'USER_CHOICE' => 86,'ACTUAL_PROID_ALIAS' => 87,'ACTUAL_PROCHECK_ALIAS' => 88,'ACTUAL_ID_DISCOVERY_ALIAS' => 89,'REAL_PROID_ALIAS' => 90,'REAL_PROCHECK_ALIAS' => 91,'REAL_ID_DISCOVERY_ALIAS' => 92,'IS_CUSTOM' => 93,'SOURCE_IP' => 94,'IDENTITY_LOCATED_STATUS' => 95,'IDENTITY_NOT_LOCATED_STATUS' => 96,'VERIF_ERROR_STATUS' => 97,'VERIF_NO_DATA_FOUND_STATUS' => 98,'ACCOUNT_VERIF_ERROR_STATUS' => 99,'ACCOUNT_VERIF_NO_DATA_FOUND_STATUS' => 100,'AUTH_FAIL_STATUS' => 101,'AUTH_STATUS_CODE' => 102,'QUIZ_STATUS_CODE' => 103,'CONVERSATION_ID' => 104,'CUST_USERNAME' => 105,0);
//Individual field level validation
EXPORT Make_TRANS_NUM_ID(SALT32.StrType s0) := s0;
EXPORT InValid_TRANS_NUM_ID(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_TRANS_NUM_ID(UNSIGNED1 wh) := '';
EXPORT Make_TRANSACTION_DATE(SALT32.StrType s0) := s0;
EXPORT InValid_TRANSACTION_DATE(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_TRANSACTION_DATE(UNSIGNED1 wh) := '';
EXPORT Make_ACCOUNT(SALT32.StrType s0) := s0;
EXPORT InValid_ACCOUNT(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_ACCOUNT(UNSIGNED1 wh) := '';
EXPORT Make_OPER_USERNAME(SALT32.StrType s0) := s0;
EXPORT InValid_OPER_USERNAME(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_OPER_USERNAME(UNSIGNED1 wh) := '';
EXPORT Make_TRANS_CLIENT_ID(SALT32.StrType s0) := s0;
EXPORT InValid_TRANS_CLIENT_ID(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_TRANS_CLIENT_ID(UNSIGNED1 wh) := '';
EXPORT Make_INPUTED_FIRST_NAME(SALT32.StrType s0) := s0;
EXPORT InValid_INPUTED_FIRST_NAME(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_INPUTED_FIRST_NAME(UNSIGNED1 wh) := '';
EXPORT Make_INPUTED_LAST_NAME(SALT32.StrType s0) := s0;
EXPORT InValid_INPUTED_LAST_NAME(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_INPUTED_LAST_NAME(UNSIGNED1 wh) := '';
EXPORT Make_INPUTED_SSN(SALT32.StrType s0) := s0;
EXPORT InValid_INPUTED_SSN(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_INPUTED_SSN(UNSIGNED1 wh) := '';
EXPORT Make_INPUTED_STREET(SALT32.StrType s0) := s0;
EXPORT InValid_INPUTED_STREET(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_INPUTED_STREET(UNSIGNED1 wh) := '';
EXPORT Make_INPUTED_CITY(SALT32.StrType s0) := s0;
EXPORT InValid_INPUTED_CITY(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_INPUTED_CITY(UNSIGNED1 wh) := '';
EXPORT Make_INPUTED_STATE(SALT32.StrType s0) := s0;
EXPORT InValid_INPUTED_STATE(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_INPUTED_STATE(UNSIGNED1 wh) := '';
EXPORT Make_INPUTED_ZIP(SALT32.StrType s0) := s0;
EXPORT InValid_INPUTED_ZIP(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_INPUTED_ZIP(UNSIGNED1 wh) := '';
EXPORT Make_INPUTED_DOB(SALT32.StrType s0) := s0;
EXPORT InValid_INPUTED_DOB(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_INPUTED_DOB(UNSIGNED1 wh) := '';
EXPORT Make_UNIQUE_IDENTITY_COUNT(SALT32.StrType s0) := MakeFT_INVALID_UNIQUE_IDENTITY_COUNT(s0);
EXPORT InValid_UNIQUE_IDENTITY_COUNT(SALT32.StrType s) := InValidFT_INVALID_UNIQUE_IDENTITY_COUNT(s);
EXPORT InValidMessage_UNIQUE_IDENTITY_COUNT(UNSIGNED1 wh) := InValidMessageFT_INVALID_UNIQUE_IDENTITY_COUNT(wh);
EXPORT Make_IDENTITY_LOCATED(SALT32.StrType s0) := s0;
EXPORT InValid_IDENTITY_LOCATED(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_IDENTITY_LOCATED(UNSIGNED1 wh) := '';
EXPORT Make_IDENTITY_NOT_LOCATED(SALT32.StrType s0) := s0;
EXPORT InValid_IDENTITY_NOT_LOCATED(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_IDENTITY_NOT_LOCATED(UNSIGNED1 wh) := '';
EXPORT Make_SELECTED_FIRST_NAME(SALT32.StrType s0) := s0;
EXPORT InValid_SELECTED_FIRST_NAME(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_SELECTED_FIRST_NAME(UNSIGNED1 wh) := '';
EXPORT Make_SELECTED_LAST_NAME(SALT32.StrType s0) := s0;
EXPORT InValid_SELECTED_LAST_NAME(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_SELECTED_LAST_NAME(UNSIGNED1 wh) := '';
EXPORT Make_SELECTED_SSN(SALT32.StrType s0) := MakeFT_INVALID_SSN(s0);
EXPORT InValid_SELECTED_SSN(SALT32.StrType s) := InValidFT_INVALID_SSN(s);
EXPORT InValidMessage_SELECTED_SSN(UNSIGNED1 wh) := InValidMessageFT_INVALID_SSN(wh);
EXPORT Make_SELECTED_DOB(SALT32.StrType s0) := s0;
EXPORT InValid_SELECTED_DOB(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_SELECTED_DOB(UNSIGNED1 wh) := '';
EXPORT Make_SELECTED_STREET(SALT32.StrType s0) := s0;
EXPORT InValid_SELECTED_STREET(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_SELECTED_STREET(UNSIGNED1 wh) := '';
EXPORT Make_SELECTED_CITY(SALT32.StrType s0) := s0;
EXPORT InValid_SELECTED_CITY(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_SELECTED_CITY(UNSIGNED1 wh) := '';
EXPORT Make_SELECTED_STATE(SALT32.StrType s0) := s0;
EXPORT InValid_SELECTED_STATE(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_SELECTED_STATE(UNSIGNED1 wh) := '';
EXPORT Make_SELECTED_ZIP(SALT32.StrType s0) := s0;
EXPORT InValid_SELECTED_ZIP(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_SELECTED_ZIP(UNSIGNED1 wh) := '';
EXPORT Make_VERIF_PASS(SALT32.StrType s0) := s0;
EXPORT InValid_VERIF_PASS(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_VERIF_PASS(UNSIGNED1 wh) := '';
EXPORT Make_VERIF_FAIL(SALT32.StrType s0) := s0;
EXPORT InValid_VERIF_FAIL(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_VERIF_FAIL(UNSIGNED1 wh) := '';
EXPORT Make_VERIF_ERROR(SALT32.StrType s0) := s0;
EXPORT InValid_VERIF_ERROR(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_VERIF_ERROR(UNSIGNED1 wh) := '';
EXPORT Make_VERIF_NO_DATA_FOUND(SALT32.StrType s0) := s0;
EXPORT InValid_VERIF_NO_DATA_FOUND(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_VERIF_NO_DATA_FOUND(UNSIGNED1 wh) := '';
EXPORT Make_NUM_VERIF_CHKS(SALT32.StrType s0) := s0;
EXPORT InValid_NUM_VERIF_CHKS(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_NUM_VERIF_CHKS(UNSIGNED1 wh) := '';
EXPORT Make_NUM_VERIF_CHKS_PASS(SALT32.StrType s0) := s0;
EXPORT InValid_NUM_VERIF_CHKS_PASS(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_NUM_VERIF_CHKS_PASS(UNSIGNED1 wh) := '';
EXPORT Make_AUTH_SCORE(SALT32.StrType s0) := MakeFT_INVALID_auth_score(s0);
EXPORT InValid_AUTH_SCORE(SALT32.StrType s) := InValidFT_INVALID_auth_score(s);
EXPORT InValidMessage_AUTH_SCORE(UNSIGNED1 wh) := InValidMessageFT_INVALID_auth_score(wh);
EXPORT Make_AUTH_REQU_SCORE(SALT32.StrType s0) := s0;
EXPORT InValid_AUTH_REQU_SCORE(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_AUTH_REQU_SCORE(UNSIGNED1 wh) := '';
EXPORT Make_AUTH_PASS(SALT32.StrType s0) := s0;
EXPORT InValid_AUTH_PASS(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_AUTH_PASS(UNSIGNED1 wh) := '';
EXPORT Make_AUTH_FAIL(SALT32.StrType s0) := MakeFT_INVALID_Auth_Fail(s0);
EXPORT InValid_AUTH_FAIL(SALT32.StrType s) := InValidFT_INVALID_Auth_Fail(s);
EXPORT InValidMessage_AUTH_FAIL(UNSIGNED1 wh) := InValidMessageFT_INVALID_Auth_Fail(wh);
EXPORT Make_AUTH_OPT_OUT(SALT32.StrType s0) := s0;
EXPORT InValid_AUTH_OPT_OUT(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_AUTH_OPT_OUT(UNSIGNED1 wh) := '';
EXPORT Make_AUTH_UNABLE_TO_GEN(SALT32.StrType s0) := s0;
EXPORT InValid_AUTH_UNABLE_TO_GEN(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_AUTH_UNABLE_TO_GEN(UNSIGNED1 wh) := '';
EXPORT Make_AUTH_ERROR(SALT32.StrType s0) := s0;
EXPORT InValid_AUTH_ERROR(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_AUTH_ERROR(UNSIGNED1 wh) := '';
EXPORT Make_AUTH_QUIZ_EXPIRE(SALT32.StrType s0) := s0;
EXPORT InValid_AUTH_QUIZ_EXPIRE(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_AUTH_QUIZ_EXPIRE(UNSIGNED1 wh) := '';
EXPORT Make_CLIENT_REFERENCE_ID(SALT32.StrType s0) := s0;
EXPORT InValid_CLIENT_REFERENCE_ID(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_CLIENT_REFERENCE_ID(UNSIGNED1 wh) := '';
EXPORT Make_AUTH_RESPONSE_TIME(SALT32.StrType s0) := s0;
EXPORT InValid_AUTH_RESPONSE_TIME(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_AUTH_RESPONSE_TIME(UNSIGNED1 wh) := '';
EXPORT Make_VERIF_RESPONSE_TIME(SALT32.StrType s0) := s0;
EXPORT InValid_VERIF_RESPONSE_TIME(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_VERIF_RESPONSE_TIME(UNSIGNED1 wh) := '';
EXPORT Make_NAME(SALT32.StrType s0) := MakeFT_INVALID_name(s0);
EXPORT InValid_NAME(SALT32.StrType s) := InValidFT_INVALID_name(s);
EXPORT InValidMessage_NAME(UNSIGNED1 wh) := InValidMessageFT_INVALID_name(wh);
EXPORT Make_IS_VERIFICATION(SALT32.StrType s0) := s0;
EXPORT InValid_IS_VERIFICATION(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_IS_VERIFICATION(UNSIGNED1 wh) := '';
EXPORT Make_IS_AUTHENTICATION(SALT32.StrType s0) := s0;
EXPORT InValid_IS_AUTHENTICATION(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_IS_AUTHENTICATION(UNSIGNED1 wh) := '';
EXPORT Make_ITEM_STATUS(SALT32.StrType s0) := s0;
EXPORT InValid_ITEM_STATUS(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_ITEM_STATUS(UNSIGNED1 wh) := '';
EXPORT Make_AUTH_STATUS(SALT32.StrType s0) := MakeFT_invalid_AUTH_STATUS(s0);
EXPORT InValid_AUTH_STATUS(SALT32.StrType s) := InValidFT_invalid_AUTH_STATUS(s);
EXPORT InValidMessage_AUTH_STATUS(UNSIGNED1 wh) := InValidMessageFT_invalid_AUTH_STATUS(wh);
EXPORT Make_VERIF_STATUS(SALT32.StrType s0) := MakeFT_invalid_VERIF_STATUS(s0);
EXPORT InValid_VERIF_STATUS(SALT32.StrType s) := InValidFT_invalid_VERIF_STATUS(s);
EXPORT InValidMessage_VERIF_STATUS(UNSIGNED1 wh) := InValidMessageFT_invalid_VERIF_STATUS(wh);
EXPORT Make_PROID_ALIAS(SALT32.StrType s0) := s0;
EXPORT InValid_PROID_ALIAS(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_PROID_ALIAS(UNSIGNED1 wh) := '';
EXPORT Make_PROCHECK_ALIAS(SALT32.StrType s0) := s0;
EXPORT InValid_PROCHECK_ALIAS(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_PROCHECK_ALIAS(UNSIGNED1 wh) := '';
EXPORT Make_ID_DISCOVERY_ALIAS(SALT32.StrType s0) := s0;
EXPORT InValid_ID_DISCOVERY_ALIAS(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_ID_DISCOVERY_ALIAS(UNSIGNED1 wh) := '';
EXPORT Make_QUIZ1_STATUS(SALT32.StrType s0) := s0;
EXPORT InValid_QUIZ1_STATUS(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_QUIZ1_STATUS(UNSIGNED1 wh) := '';
EXPORT Make_QUIZ2_STATUS(SALT32.StrType s0) := s0;
EXPORT InValid_QUIZ2_STATUS(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_QUIZ2_STATUS(UNSIGNED1 wh) := '';
EXPORT Make_ALIAS_NAME(SALT32.StrType s0) := s0;
EXPORT InValid_ALIAS_NAME(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_ALIAS_NAME(UNSIGNED1 wh) := '';
EXPORT Make_PRODUCT_SEQUENCE(SALT32.StrType s0) := s0;
EXPORT InValid_PRODUCT_SEQUENCE(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_PRODUCT_SEQUENCE(UNSIGNED1 wh) := '';
EXPORT Make_QUIZ_STATUS(SALT32.StrType s0) := MakeFT_invalid_QUIZ_STATUS(s0);
EXPORT InValid_QUIZ_STATUS(SALT32.StrType s) := InValidFT_invalid_QUIZ_STATUS(s);
EXPORT InValidMessage_QUIZ_STATUS(UNSIGNED1 wh) := InValidMessageFT_invalid_QUIZ_STATUS(wh);
EXPORT Make_IS_RESERVED(SALT32.StrType s0) := s0;
EXPORT InValid_IS_RESERVED(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_IS_RESERVED(UNSIGNED1 wh) := '';
EXPORT Make_INPUTED_LINK_ID(SALT32.StrType s0) := s0;
EXPORT InValid_INPUTED_LINK_ID(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_INPUTED_LINK_ID(UNSIGNED1 wh) := '';
EXPORT Make_SELECTED_LINK_ID(SALT32.StrType s0) := s0;
EXPORT InValid_SELECTED_LINK_ID(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_SELECTED_LINK_ID(UNSIGNED1 wh) := '';
EXPORT Make_ID_DISCOVERY_LINK_ID(SALT32.StrType s0) := MakeFT_INVALID_ID_DISCOVERY_Link_ID(s0);
EXPORT InValid_ID_DISCOVERY_LINK_ID(SALT32.StrType s) := InValidFT_INVALID_ID_DISCOVERY_Link_ID(s);
EXPORT InValidMessage_ID_DISCOVERY_LINK_ID(UNSIGNED1 wh) := InValidMessageFT_INVALID_ID_DISCOVERY_Link_ID(wh);
EXPORT Make_PROCHECK_LINK_ID(SALT32.StrType s0) := s0;
EXPORT InValid_PROCHECK_LINK_ID(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_PROCHECK_LINK_ID(UNSIGNED1 wh) := '';
EXPORT Make_PROID_LINK_ID(SALT32.StrType s0) := MakeFT_INVALID_PROID_Link_ID(s0);
EXPORT InValid_PROID_LINK_ID(SALT32.StrType s) := InValidFT_INVALID_PROID_Link_ID(s);
EXPORT InValidMessage_PROID_LINK_ID(UNSIGNED1 wh) := InValidMessageFT_INVALID_PROID_Link_ID(wh);
EXPORT Make_INPUTED_PHONE_NUMBER(SALT32.StrType s0) := s0;
EXPORT InValid_INPUTED_PHONE_NUMBER(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_INPUTED_PHONE_NUMBER(UNSIGNED1 wh) := '';
EXPORT Make_ACCOUNT_VERIF_PASS(SALT32.StrType s0) := s0;
EXPORT InValid_ACCOUNT_VERIF_PASS(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_ACCOUNT_VERIF_PASS(UNSIGNED1 wh) := '';
EXPORT Make_ACCOUNT_VERIF_FAIL(SALT32.StrType s0) := s0;
EXPORT InValid_ACCOUNT_VERIF_FAIL(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_ACCOUNT_VERIF_FAIL(UNSIGNED1 wh) := '';
EXPORT Make_ACCOUNT_VERIF_ERROR(SALT32.StrType s0) := s0;
EXPORT InValid_ACCOUNT_VERIF_ERROR(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_ACCOUNT_VERIF_ERROR(UNSIGNED1 wh) := '';
EXPORT Make_ACCOUNT_VERIF_NO_DATA_FOUND(SALT32.StrType s0) := s0;
EXPORT InValid_ACCOUNT_VERIF_NO_DATA_FOUND(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_ACCOUNT_VERIF_NO_DATA_FOUND(UNSIGNED1 wh) := '';
EXPORT Make_ACCOUNT_NUM_VERIF_CHKS(SALT32.StrType s0) := s0;
EXPORT InValid_ACCOUNT_NUM_VERIF_CHKS(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_ACCOUNT_NUM_VERIF_CHKS(UNSIGNED1 wh) := '';
EXPORT Make_ACCOUNT_NUM_VERIF_CHKS_PASS(SALT32.StrType s0) := s0;
EXPORT InValid_ACCOUNT_NUM_VERIF_CHKS_PASS(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_ACCOUNT_NUM_VERIF_CHKS_PASS(UNSIGNED1 wh) := '';
EXPORT Make_ACCOUNT_VERIF_RESPONSE_TIME(SALT32.StrType s0) := s0;
EXPORT InValid_ACCOUNT_VERIF_RESPONSE_TIME(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_ACCOUNT_VERIF_RESPONSE_TIME(UNSIGNED1 wh) := '';
EXPORT Make_IS_ACCOUNT_VERIFICATION(SALT32.StrType s0) := s0;
EXPORT InValid_IS_ACCOUNT_VERIFICATION(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_IS_ACCOUNT_VERIFICATION(UNSIGNED1 wh) := '';
EXPORT Make_ACCOUNT_VERIF_STATUS(SALT32.StrType s0) := s0;
EXPORT InValid_ACCOUNT_VERIF_STATUS(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_ACCOUNT_VERIF_STATUS(UNSIGNED1 wh) := '';
EXPORT Make_ACCOUNT_VERIFICATION_ALIAS(SALT32.StrType s0) := s0;
EXPORT InValid_ACCOUNT_VERIFICATION_ALIAS(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_ACCOUNT_VERIFICATION_ALIAS(UNSIGNED1 wh) := '';
EXPORT Make_ACCOUNT_VERIF_LINK_ID(SALT32.StrType s0) := s0;
EXPORT InValid_ACCOUNT_VERIF_LINK_ID(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_ACCOUNT_VERIF_LINK_ID(UNSIGNED1 wh) := '';
EXPORT Make_BUSINESS_NAME(SALT32.StrType s0) := s0;
EXPORT InValid_BUSINESS_NAME(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_BUSINESS_NAME(UNSIGNED1 wh) := '';
EXPORT Make_FEIN(SALT32.StrType s0) := s0;
EXPORT InValid_FEIN(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_FEIN(UNSIGNED1 wh) := '';
EXPORT Make_TAXID(SALT32.StrType s0) := s0;
EXPORT InValid_TAXID(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_TAXID(UNSIGNED1 wh) := '';
EXPORT Make_GROUP_NAME(SALT32.StrType s0) := s0;
EXPORT InValid_GROUP_NAME(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_GROUP_NAME(UNSIGNED1 wh) := '';
EXPORT Make_GROUP_SEQUENCE(SALT32.StrType s0) := s0;
EXPORT InValid_GROUP_SEQUENCE(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_GROUP_SEQUENCE(UNSIGNED1 wh) := '';
EXPORT Make_SUB_PRODUCT_NAME(SALT32.StrType s0) := MakeFT_INVALID_SUB_PRODUCT_NAME(s0);
EXPORT InValid_SUB_PRODUCT_NAME(SALT32.StrType s) := InValidFT_INVALID_SUB_PRODUCT_NAME(s);
EXPORT InValidMessage_SUB_PRODUCT_NAME(UNSIGNED1 wh) := InValidMessageFT_INVALID_SUB_PRODUCT_NAME(wh);
EXPORT Make_SUB_PRODUCT_SEQUENCE(SALT32.StrType s0) := s0;
EXPORT InValid_SUB_PRODUCT_SEQUENCE(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_SUB_PRODUCT_SEQUENCE(UNSIGNED1 wh) := '';
EXPORT Make_IS_SURVEY(SALT32.StrType s0) := s0;
EXPORT InValid_IS_SURVEY(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_IS_SURVEY(UNSIGNED1 wh) := '';
EXPORT Make_SURVEY_STATUS(SALT32.StrType s0) := s0;
EXPORT InValid_SURVEY_STATUS(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_SURVEY_STATUS(UNSIGNED1 wh) := '';
EXPORT Make_SURVEY_QUESTION(SALT32.StrType s0) := s0;
EXPORT InValid_SURVEY_QUESTION(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_SURVEY_QUESTION(UNSIGNED1 wh) := '';
EXPORT Make_QUESTION_SEQUENCE(SALT32.StrType s0) := s0;
EXPORT InValid_QUESTION_SEQUENCE(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_QUESTION_SEQUENCE(UNSIGNED1 wh) := '';
EXPORT Make_QUESTION_CHOICE(SALT32.StrType s0) := s0;
EXPORT InValid_QUESTION_CHOICE(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_QUESTION_CHOICE(UNSIGNED1 wh) := '';
EXPORT Make_CHOICE_SEQUENCE(SALT32.StrType s0) := s0;
EXPORT InValid_CHOICE_SEQUENCE(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_CHOICE_SEQUENCE(UNSIGNED1 wh) := '';
EXPORT Make_USER_CHOICE(SALT32.StrType s0) := s0;
EXPORT InValid_USER_CHOICE(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_USER_CHOICE(UNSIGNED1 wh) := '';
EXPORT Make_ACTUAL_PROID_ALIAS(SALT32.StrType s0) := s0;
EXPORT InValid_ACTUAL_PROID_ALIAS(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_ACTUAL_PROID_ALIAS(UNSIGNED1 wh) := '';
EXPORT Make_ACTUAL_PROCHECK_ALIAS(SALT32.StrType s0) := s0;
EXPORT InValid_ACTUAL_PROCHECK_ALIAS(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_ACTUAL_PROCHECK_ALIAS(UNSIGNED1 wh) := '';
EXPORT Make_ACTUAL_ID_DISCOVERY_ALIAS(SALT32.StrType s0) := s0;
EXPORT InValid_ACTUAL_ID_DISCOVERY_ALIAS(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_ACTUAL_ID_DISCOVERY_ALIAS(UNSIGNED1 wh) := '';
EXPORT Make_REAL_PROID_ALIAS(SALT32.StrType s0) := s0;
EXPORT InValid_REAL_PROID_ALIAS(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_REAL_PROID_ALIAS(UNSIGNED1 wh) := '';
EXPORT Make_REAL_PROCHECK_ALIAS(SALT32.StrType s0) := s0;
EXPORT InValid_REAL_PROCHECK_ALIAS(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_REAL_PROCHECK_ALIAS(UNSIGNED1 wh) := '';
EXPORT Make_REAL_ID_DISCOVERY_ALIAS(SALT32.StrType s0) := s0;
EXPORT InValid_REAL_ID_DISCOVERY_ALIAS(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_REAL_ID_DISCOVERY_ALIAS(UNSIGNED1 wh) := '';
EXPORT Make_IS_CUSTOM(SALT32.StrType s0) := s0;
EXPORT InValid_IS_CUSTOM(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_IS_CUSTOM(UNSIGNED1 wh) := '';
EXPORT Make_SOURCE_IP(SALT32.StrType s0) := s0;
EXPORT InValid_SOURCE_IP(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_SOURCE_IP(UNSIGNED1 wh) := '';
EXPORT Make_IDENTITY_LOCATED_STATUS(SALT32.StrType s0) := s0;
EXPORT InValid_IDENTITY_LOCATED_STATUS(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_IDENTITY_LOCATED_STATUS(UNSIGNED1 wh) := '';
EXPORT Make_IDENTITY_NOT_LOCATED_STATUS(SALT32.StrType s0) := s0;
EXPORT InValid_IDENTITY_NOT_LOCATED_STATUS(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_IDENTITY_NOT_LOCATED_STATUS(UNSIGNED1 wh) := '';
EXPORT Make_VERIF_ERROR_STATUS(SALT32.StrType s0) := s0;
EXPORT InValid_VERIF_ERROR_STATUS(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_VERIF_ERROR_STATUS(UNSIGNED1 wh) := '';
EXPORT Make_VERIF_NO_DATA_FOUND_STATUS(SALT32.StrType s0) := s0;
EXPORT InValid_VERIF_NO_DATA_FOUND_STATUS(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_VERIF_NO_DATA_FOUND_STATUS(UNSIGNED1 wh) := '';
EXPORT Make_ACCOUNT_VERIF_ERROR_STATUS(SALT32.StrType s0) := s0;
EXPORT InValid_ACCOUNT_VERIF_ERROR_STATUS(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_ACCOUNT_VERIF_ERROR_STATUS(UNSIGNED1 wh) := '';
EXPORT Make_ACCOUNT_VERIF_NO_DATA_FOUND_STATUS(SALT32.StrType s0) := s0;
EXPORT InValid_ACCOUNT_VERIF_NO_DATA_FOUND_STATUS(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_ACCOUNT_VERIF_NO_DATA_FOUND_STATUS(UNSIGNED1 wh) := '';
EXPORT Make_AUTH_FAIL_STATUS(SALT32.StrType s0) := MakeFT_INVALID_AUTH_FAIL_STATUS(s0);
EXPORT InValid_AUTH_FAIL_STATUS(SALT32.StrType s) := InValidFT_INVALID_AUTH_FAIL_STATUS(s);
EXPORT InValidMessage_AUTH_FAIL_STATUS(UNSIGNED1 wh) := InValidMessageFT_INVALID_AUTH_FAIL_STATUS(wh);
EXPORT Make_AUTH_STATUS_CODE(SALT32.StrType s0) := s0;
EXPORT InValid_AUTH_STATUS_CODE(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_AUTH_STATUS_CODE(UNSIGNED1 wh) := '';
EXPORT Make_QUIZ_STATUS_CODE(SALT32.StrType s0) := s0;
EXPORT InValid_QUIZ_STATUS_CODE(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_QUIZ_STATUS_CODE(UNSIGNED1 wh) := '';
EXPORT Make_CONVERSATION_ID(SALT32.StrType s0) := s0;
EXPORT InValid_CONVERSATION_ID(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_CONVERSATION_ID(UNSIGNED1 wh) := '';
EXPORT Make_CUST_USERNAME(SALT32.StrType s0) := s0;
EXPORT InValid_CUST_USERNAME(SALT32.StrType s) := FALSE;
EXPORT InValidMessage_CUST_USERNAME(UNSIGNED1 wh) := '';
// This macro will compute and count field level differences based upon a pivot expression
export MAC_CountDifferencesByPivot(in_left,in_right,pivot_exp,bad_pivots,out_counts) := MACRO
  IMPORT SALT32,SCRUBS_IDM_QUIZ;
//Find those highly occuring pivot values to remove them from consideration
#uniquename(tr)
  %tr% := table(in_left+in_right,{ val := pivot_exp; });
#uniquename(r1)
  %r1% := record
    %tr%.val;    unsigned Cnt := COUNT(GROUP);
  end;
#uniquename(t1)
  %t1% := table(%tr%,%r1%,val,local); // Pre-aggregate before distribute
#uniquename(r2)
  %r2% := record
    %t1%.val;    unsigned Cnt := SUM(GROUP,%t1%.Cnt);
  end;
#uniquename(t2)
  %t2% := table(%t1%,%r2%,val); // Now do global aggregate
Bad_Pivots := %t2%(Cnt>100);
#uniquename(dl)
  %dl% := RECORD
    BOOLEAN Diff_TRANS_NUM_ID;
    BOOLEAN Diff_TRANSACTION_DATE;
    BOOLEAN Diff_ACCOUNT;
    BOOLEAN Diff_OPER_USERNAME;
    BOOLEAN Diff_TRANS_CLIENT_ID;
    BOOLEAN Diff_INPUTED_FIRST_NAME;
    BOOLEAN Diff_INPUTED_LAST_NAME;
    BOOLEAN Diff_INPUTED_SSN;
    BOOLEAN Diff_INPUTED_STREET;
    BOOLEAN Diff_INPUTED_CITY;
    BOOLEAN Diff_INPUTED_STATE;
    BOOLEAN Diff_INPUTED_ZIP;
    BOOLEAN Diff_INPUTED_DOB;
    BOOLEAN Diff_UNIQUE_IDENTITY_COUNT;
    BOOLEAN Diff_IDENTITY_LOCATED;
    BOOLEAN Diff_IDENTITY_NOT_LOCATED;
    BOOLEAN Diff_SELECTED_FIRST_NAME;
    BOOLEAN Diff_SELECTED_LAST_NAME;
    BOOLEAN Diff_SELECTED_SSN;
    BOOLEAN Diff_SELECTED_DOB;
    BOOLEAN Diff_SELECTED_STREET;
    BOOLEAN Diff_SELECTED_CITY;
    BOOLEAN Diff_SELECTED_STATE;
    BOOLEAN Diff_SELECTED_ZIP;
    BOOLEAN Diff_VERIF_PASS;
    BOOLEAN Diff_VERIF_FAIL;
    BOOLEAN Diff_VERIF_ERROR;
    BOOLEAN Diff_VERIF_NO_DATA_FOUND;
    BOOLEAN Diff_NUM_VERIF_CHKS;
    BOOLEAN Diff_NUM_VERIF_CHKS_PASS;
    BOOLEAN Diff_AUTH_SCORE;
    BOOLEAN Diff_AUTH_REQU_SCORE;
    BOOLEAN Diff_AUTH_PASS;
    BOOLEAN Diff_AUTH_FAIL;
    BOOLEAN Diff_AUTH_OPT_OUT;
    BOOLEAN Diff_AUTH_UNABLE_TO_GEN;
    BOOLEAN Diff_AUTH_ERROR;
    BOOLEAN Diff_AUTH_QUIZ_EXPIRE;
    BOOLEAN Diff_CLIENT_REFERENCE_ID;
    BOOLEAN Diff_AUTH_RESPONSE_TIME;
    BOOLEAN Diff_VERIF_RESPONSE_TIME;
    BOOLEAN Diff_NAME;
    BOOLEAN Diff_IS_VERIFICATION;
    BOOLEAN Diff_IS_AUTHENTICATION;
    BOOLEAN Diff_ITEM_STATUS;
    BOOLEAN Diff_AUTH_STATUS;
    BOOLEAN Diff_VERIF_STATUS;
    BOOLEAN Diff_PROID_ALIAS;
    BOOLEAN Diff_PROCHECK_ALIAS;
    BOOLEAN Diff_ID_DISCOVERY_ALIAS;
    BOOLEAN Diff_QUIZ1_STATUS;
    BOOLEAN Diff_QUIZ2_STATUS;
    BOOLEAN Diff_ALIAS_NAME;
    BOOLEAN Diff_PRODUCT_SEQUENCE;
    BOOLEAN Diff_QUIZ_STATUS;
    BOOLEAN Diff_IS_RESERVED;
    BOOLEAN Diff_INPUTED_LINK_ID;
    BOOLEAN Diff_SELECTED_LINK_ID;
    BOOLEAN Diff_ID_DISCOVERY_LINK_ID;
    BOOLEAN Diff_PROCHECK_LINK_ID;
    BOOLEAN Diff_PROID_LINK_ID;
    BOOLEAN Diff_INPUTED_PHONE_NUMBER;
    BOOLEAN Diff_ACCOUNT_VERIF_PASS;
    BOOLEAN Diff_ACCOUNT_VERIF_FAIL;
    BOOLEAN Diff_ACCOUNT_VERIF_ERROR;
    BOOLEAN Diff_ACCOUNT_VERIF_NO_DATA_FOUND;
    BOOLEAN Diff_ACCOUNT_NUM_VERIF_CHKS;
    BOOLEAN Diff_ACCOUNT_NUM_VERIF_CHKS_PASS;
    BOOLEAN Diff_ACCOUNT_VERIF_RESPONSE_TIME;
    BOOLEAN Diff_IS_ACCOUNT_VERIFICATION;
    BOOLEAN Diff_ACCOUNT_VERIF_STATUS;
    BOOLEAN Diff_ACCOUNT_VERIFICATION_ALIAS;
    BOOLEAN Diff_ACCOUNT_VERIF_LINK_ID;
    BOOLEAN Diff_BUSINESS_NAME;
    BOOLEAN Diff_FEIN;
    BOOLEAN Diff_TAXID;
    BOOLEAN Diff_GROUP_NAME;
    BOOLEAN Diff_GROUP_SEQUENCE;
    BOOLEAN Diff_SUB_PRODUCT_NAME;
    BOOLEAN Diff_SUB_PRODUCT_SEQUENCE;
    BOOLEAN Diff_IS_SURVEY;
    BOOLEAN Diff_SURVEY_STATUS;
    BOOLEAN Diff_SURVEY_QUESTION;
    BOOLEAN Diff_QUESTION_SEQUENCE;
    BOOLEAN Diff_QUESTION_CHOICE;
    BOOLEAN Diff_CHOICE_SEQUENCE;
    BOOLEAN Diff_USER_CHOICE;
    BOOLEAN Diff_ACTUAL_PROID_ALIAS;
    BOOLEAN Diff_ACTUAL_PROCHECK_ALIAS;
    BOOLEAN Diff_ACTUAL_ID_DISCOVERY_ALIAS;
    BOOLEAN Diff_REAL_PROID_ALIAS;
    BOOLEAN Diff_REAL_PROCHECK_ALIAS;
    BOOLEAN Diff_REAL_ID_DISCOVERY_ALIAS;
    BOOLEAN Diff_IS_CUSTOM;
    BOOLEAN Diff_SOURCE_IP;
    BOOLEAN Diff_IDENTITY_LOCATED_STATUS;
    BOOLEAN Diff_IDENTITY_NOT_LOCATED_STATUS;
    BOOLEAN Diff_VERIF_ERROR_STATUS;
    BOOLEAN Diff_VERIF_NO_DATA_FOUND_STATUS;
    BOOLEAN Diff_ACCOUNT_VERIF_ERROR_STATUS;
    BOOLEAN Diff_ACCOUNT_VERIF_NO_DATA_FOUND_STATUS;
    BOOLEAN Diff_AUTH_FAIL_STATUS;
    BOOLEAN Diff_AUTH_STATUS_CODE;
    BOOLEAN Diff_QUIZ_STATUS_CODE;
    BOOLEAN Diff_CONVERSATION_ID;
    BOOLEAN Diff_CUST_USERNAME;
    UNSIGNED Num_Diffs;
    SALT32.StrType Val {MAXLENGTH(1024)};
  END;
#uniquename(fd)
  %dl% %fd%(in_left le,in_right ri) := TRANSFORM
    SELF.Diff_TRANS_NUM_ID := le.TRANS_NUM_ID <> ri.TRANS_NUM_ID;
    SELF.Diff_TRANSACTION_DATE := le.TRANSACTION_DATE <> ri.TRANSACTION_DATE;
    SELF.Diff_ACCOUNT := le.ACCOUNT <> ri.ACCOUNT;
    SELF.Diff_OPER_USERNAME := le.OPER_USERNAME <> ri.OPER_USERNAME;
    SELF.Diff_TRANS_CLIENT_ID := le.TRANS_CLIENT_ID <> ri.TRANS_CLIENT_ID;
    SELF.Diff_INPUTED_FIRST_NAME := le.INPUTED_FIRST_NAME <> ri.INPUTED_FIRST_NAME;
    SELF.Diff_INPUTED_LAST_NAME := le.INPUTED_LAST_NAME <> ri.INPUTED_LAST_NAME;
    SELF.Diff_INPUTED_SSN := le.INPUTED_SSN <> ri.INPUTED_SSN;
    SELF.Diff_INPUTED_STREET := le.INPUTED_STREET <> ri.INPUTED_STREET;
    SELF.Diff_INPUTED_CITY := le.INPUTED_CITY <> ri.INPUTED_CITY;
    SELF.Diff_INPUTED_STATE := le.INPUTED_STATE <> ri.INPUTED_STATE;
    SELF.Diff_INPUTED_ZIP := le.INPUTED_ZIP <> ri.INPUTED_ZIP;
    SELF.Diff_INPUTED_DOB := le.INPUTED_DOB <> ri.INPUTED_DOB;
    SELF.Diff_UNIQUE_IDENTITY_COUNT := le.UNIQUE_IDENTITY_COUNT <> ri.UNIQUE_IDENTITY_COUNT;
    SELF.Diff_IDENTITY_LOCATED := le.IDENTITY_LOCATED <> ri.IDENTITY_LOCATED;
    SELF.Diff_IDENTITY_NOT_LOCATED := le.IDENTITY_NOT_LOCATED <> ri.IDENTITY_NOT_LOCATED;
    SELF.Diff_SELECTED_FIRST_NAME := le.SELECTED_FIRST_NAME <> ri.SELECTED_FIRST_NAME;
    SELF.Diff_SELECTED_LAST_NAME := le.SELECTED_LAST_NAME <> ri.SELECTED_LAST_NAME;
    SELF.Diff_SELECTED_SSN := le.SELECTED_SSN <> ri.SELECTED_SSN;
    SELF.Diff_SELECTED_DOB := le.SELECTED_DOB <> ri.SELECTED_DOB;
    SELF.Diff_SELECTED_STREET := le.SELECTED_STREET <> ri.SELECTED_STREET;
    SELF.Diff_SELECTED_CITY := le.SELECTED_CITY <> ri.SELECTED_CITY;
    SELF.Diff_SELECTED_STATE := le.SELECTED_STATE <> ri.SELECTED_STATE;
    SELF.Diff_SELECTED_ZIP := le.SELECTED_ZIP <> ri.SELECTED_ZIP;
    SELF.Diff_VERIF_PASS := le.VERIF_PASS <> ri.VERIF_PASS;
    SELF.Diff_VERIF_FAIL := le.VERIF_FAIL <> ri.VERIF_FAIL;
    SELF.Diff_VERIF_ERROR := le.VERIF_ERROR <> ri.VERIF_ERROR;
    SELF.Diff_VERIF_NO_DATA_FOUND := le.VERIF_NO_DATA_FOUND <> ri.VERIF_NO_DATA_FOUND;
    SELF.Diff_NUM_VERIF_CHKS := le.NUM_VERIF_CHKS <> ri.NUM_VERIF_CHKS;
    SELF.Diff_NUM_VERIF_CHKS_PASS := le.NUM_VERIF_CHKS_PASS <> ri.NUM_VERIF_CHKS_PASS;
    SELF.Diff_AUTH_SCORE := le.AUTH_SCORE <> ri.AUTH_SCORE;
    SELF.Diff_AUTH_REQU_SCORE := le.AUTH_REQU_SCORE <> ri.AUTH_REQU_SCORE;
    SELF.Diff_AUTH_PASS := le.AUTH_PASS <> ri.AUTH_PASS;
    SELF.Diff_AUTH_FAIL := le.AUTH_FAIL <> ri.AUTH_FAIL;
    SELF.Diff_AUTH_OPT_OUT := le.AUTH_OPT_OUT <> ri.AUTH_OPT_OUT;
    SELF.Diff_AUTH_UNABLE_TO_GEN := le.AUTH_UNABLE_TO_GEN <> ri.AUTH_UNABLE_TO_GEN;
    SELF.Diff_AUTH_ERROR := le.AUTH_ERROR <> ri.AUTH_ERROR;
    SELF.Diff_AUTH_QUIZ_EXPIRE := le.AUTH_QUIZ_EXPIRE <> ri.AUTH_QUIZ_EXPIRE;
    SELF.Diff_CLIENT_REFERENCE_ID := le.CLIENT_REFERENCE_ID <> ri.CLIENT_REFERENCE_ID;
    SELF.Diff_AUTH_RESPONSE_TIME := le.AUTH_RESPONSE_TIME <> ri.AUTH_RESPONSE_TIME;
    SELF.Diff_VERIF_RESPONSE_TIME := le.VERIF_RESPONSE_TIME <> ri.VERIF_RESPONSE_TIME;
    SELF.Diff_NAME := le.NAME <> ri.NAME;
    SELF.Diff_IS_VERIFICATION := le.IS_VERIFICATION <> ri.IS_VERIFICATION;
    SELF.Diff_IS_AUTHENTICATION := le.IS_AUTHENTICATION <> ri.IS_AUTHENTICATION;
    SELF.Diff_ITEM_STATUS := le.ITEM_STATUS <> ri.ITEM_STATUS;
    SELF.Diff_AUTH_STATUS := le.AUTH_STATUS <> ri.AUTH_STATUS;
    SELF.Diff_VERIF_STATUS := le.VERIF_STATUS <> ri.VERIF_STATUS;
    SELF.Diff_PROID_ALIAS := le.PROID_ALIAS <> ri.PROID_ALIAS;
    SELF.Diff_PROCHECK_ALIAS := le.PROCHECK_ALIAS <> ri.PROCHECK_ALIAS;
    SELF.Diff_ID_DISCOVERY_ALIAS := le.ID_DISCOVERY_ALIAS <> ri.ID_DISCOVERY_ALIAS;
    SELF.Diff_QUIZ1_STATUS := le.QUIZ1_STATUS <> ri.QUIZ1_STATUS;
    SELF.Diff_QUIZ2_STATUS := le.QUIZ2_STATUS <> ri.QUIZ2_STATUS;
    SELF.Diff_ALIAS_NAME := le.ALIAS_NAME <> ri.ALIAS_NAME;
    SELF.Diff_PRODUCT_SEQUENCE := le.PRODUCT_SEQUENCE <> ri.PRODUCT_SEQUENCE;
    SELF.Diff_QUIZ_STATUS := le.QUIZ_STATUS <> ri.QUIZ_STATUS;
    SELF.Diff_IS_RESERVED := le.IS_RESERVED <> ri.IS_RESERVED;
    SELF.Diff_INPUTED_LINK_ID := le.INPUTED_LINK_ID <> ri.INPUTED_LINK_ID;
    SELF.Diff_SELECTED_LINK_ID := le.SELECTED_LINK_ID <> ri.SELECTED_LINK_ID;
    SELF.Diff_ID_DISCOVERY_LINK_ID := le.ID_DISCOVERY_LINK_ID <> ri.ID_DISCOVERY_LINK_ID;
    SELF.Diff_PROCHECK_LINK_ID := le.PROCHECK_LINK_ID <> ri.PROCHECK_LINK_ID;
    SELF.Diff_PROID_LINK_ID := le.PROID_LINK_ID <> ri.PROID_LINK_ID;
    SELF.Diff_INPUTED_PHONE_NUMBER := le.INPUTED_PHONE_NUMBER <> ri.INPUTED_PHONE_NUMBER;
    SELF.Diff_ACCOUNT_VERIF_PASS := le.ACCOUNT_VERIF_PASS <> ri.ACCOUNT_VERIF_PASS;
    SELF.Diff_ACCOUNT_VERIF_FAIL := le.ACCOUNT_VERIF_FAIL <> ri.ACCOUNT_VERIF_FAIL;
    SELF.Diff_ACCOUNT_VERIF_ERROR := le.ACCOUNT_VERIF_ERROR <> ri.ACCOUNT_VERIF_ERROR;
    SELF.Diff_ACCOUNT_VERIF_NO_DATA_FOUND := le.ACCOUNT_VERIF_NO_DATA_FOUND <> ri.ACCOUNT_VERIF_NO_DATA_FOUND;
    SELF.Diff_ACCOUNT_NUM_VERIF_CHKS := le.ACCOUNT_NUM_VERIF_CHKS <> ri.ACCOUNT_NUM_VERIF_CHKS;
    SELF.Diff_ACCOUNT_NUM_VERIF_CHKS_PASS := le.ACCOUNT_NUM_VERIF_CHKS_PASS <> ri.ACCOUNT_NUM_VERIF_CHKS_PASS;
    SELF.Diff_ACCOUNT_VERIF_RESPONSE_TIME := le.ACCOUNT_VERIF_RESPONSE_TIME <> ri.ACCOUNT_VERIF_RESPONSE_TIME;
    SELF.Diff_IS_ACCOUNT_VERIFICATION := le.IS_ACCOUNT_VERIFICATION <> ri.IS_ACCOUNT_VERIFICATION;
    SELF.Diff_ACCOUNT_VERIF_STATUS := le.ACCOUNT_VERIF_STATUS <> ri.ACCOUNT_VERIF_STATUS;
    SELF.Diff_ACCOUNT_VERIFICATION_ALIAS := le.ACCOUNT_VERIFICATION_ALIAS <> ri.ACCOUNT_VERIFICATION_ALIAS;
    SELF.Diff_ACCOUNT_VERIF_LINK_ID := le.ACCOUNT_VERIF_LINK_ID <> ri.ACCOUNT_VERIF_LINK_ID;
    SELF.Diff_BUSINESS_NAME := le.BUSINESS_NAME <> ri.BUSINESS_NAME;
    SELF.Diff_FEIN := le.FEIN <> ri.FEIN;
    SELF.Diff_TAXID := le.TAXID <> ri.TAXID;
    SELF.Diff_GROUP_NAME := le.GROUP_NAME <> ri.GROUP_NAME;
    SELF.Diff_GROUP_SEQUENCE := le.GROUP_SEQUENCE <> ri.GROUP_SEQUENCE;
    SELF.Diff_SUB_PRODUCT_NAME := le.SUB_PRODUCT_NAME <> ri.SUB_PRODUCT_NAME;
    SELF.Diff_SUB_PRODUCT_SEQUENCE := le.SUB_PRODUCT_SEQUENCE <> ri.SUB_PRODUCT_SEQUENCE;
    SELF.Diff_IS_SURVEY := le.IS_SURVEY <> ri.IS_SURVEY;
    SELF.Diff_SURVEY_STATUS := le.SURVEY_STATUS <> ri.SURVEY_STATUS;
    SELF.Diff_SURVEY_QUESTION := le.SURVEY_QUESTION <> ri.SURVEY_QUESTION;
    SELF.Diff_QUESTION_SEQUENCE := le.QUESTION_SEQUENCE <> ri.QUESTION_SEQUENCE;
    SELF.Diff_QUESTION_CHOICE := le.QUESTION_CHOICE <> ri.QUESTION_CHOICE;
    SELF.Diff_CHOICE_SEQUENCE := le.CHOICE_SEQUENCE <> ri.CHOICE_SEQUENCE;
    SELF.Diff_USER_CHOICE := le.USER_CHOICE <> ri.USER_CHOICE;
    SELF.Diff_ACTUAL_PROID_ALIAS := le.ACTUAL_PROID_ALIAS <> ri.ACTUAL_PROID_ALIAS;
    SELF.Diff_ACTUAL_PROCHECK_ALIAS := le.ACTUAL_PROCHECK_ALIAS <> ri.ACTUAL_PROCHECK_ALIAS;
    SELF.Diff_ACTUAL_ID_DISCOVERY_ALIAS := le.ACTUAL_ID_DISCOVERY_ALIAS <> ri.ACTUAL_ID_DISCOVERY_ALIAS;
    SELF.Diff_REAL_PROID_ALIAS := le.REAL_PROID_ALIAS <> ri.REAL_PROID_ALIAS;
    SELF.Diff_REAL_PROCHECK_ALIAS := le.REAL_PROCHECK_ALIAS <> ri.REAL_PROCHECK_ALIAS;
    SELF.Diff_REAL_ID_DISCOVERY_ALIAS := le.REAL_ID_DISCOVERY_ALIAS <> ri.REAL_ID_DISCOVERY_ALIAS;
    SELF.Diff_IS_CUSTOM := le.IS_CUSTOM <> ri.IS_CUSTOM;
    SELF.Diff_SOURCE_IP := le.SOURCE_IP <> ri.SOURCE_IP;
    SELF.Diff_IDENTITY_LOCATED_STATUS := le.IDENTITY_LOCATED_STATUS <> ri.IDENTITY_LOCATED_STATUS;
    SELF.Diff_IDENTITY_NOT_LOCATED_STATUS := le.IDENTITY_NOT_LOCATED_STATUS <> ri.IDENTITY_NOT_LOCATED_STATUS;
    SELF.Diff_VERIF_ERROR_STATUS := le.VERIF_ERROR_STATUS <> ri.VERIF_ERROR_STATUS;
    SELF.Diff_VERIF_NO_DATA_FOUND_STATUS := le.VERIF_NO_DATA_FOUND_STATUS <> ri.VERIF_NO_DATA_FOUND_STATUS;
    SELF.Diff_ACCOUNT_VERIF_ERROR_STATUS := le.ACCOUNT_VERIF_ERROR_STATUS <> ri.ACCOUNT_VERIF_ERROR_STATUS;
    SELF.Diff_ACCOUNT_VERIF_NO_DATA_FOUND_STATUS := le.ACCOUNT_VERIF_NO_DATA_FOUND_STATUS <> ri.ACCOUNT_VERIF_NO_DATA_FOUND_STATUS;
    SELF.Diff_AUTH_FAIL_STATUS := le.AUTH_FAIL_STATUS <> ri.AUTH_FAIL_STATUS;
    SELF.Diff_AUTH_STATUS_CODE := le.AUTH_STATUS_CODE <> ri.AUTH_STATUS_CODE;
    SELF.Diff_QUIZ_STATUS_CODE := le.QUIZ_STATUS_CODE <> ri.QUIZ_STATUS_CODE;
    SELF.Diff_CONVERSATION_ID := le.CONVERSATION_ID <> ri.CONVERSATION_ID;
    SELF.Diff_CUST_USERNAME := le.CUST_USERNAME <> ri.CUST_USERNAME;
    SELF.Val := (SALT32.StrType)evaluate(le,pivot_exp);
    SELF.Num_Diffs := 0+ IF( SELF.Diff_TRANS_NUM_ID,1,0)+ IF( SELF.Diff_TRANSACTION_DATE,1,0)+ IF( SELF.Diff_ACCOUNT,1,0)+ IF( SELF.Diff_OPER_USERNAME,1,0)+ IF( SELF.Diff_TRANS_CLIENT_ID,1,0)+ IF( SELF.Diff_INPUTED_FIRST_NAME,1,0)+ IF( SELF.Diff_INPUTED_LAST_NAME,1,0)+ IF( SELF.Diff_INPUTED_SSN,1,0)+ IF( SELF.Diff_INPUTED_STREET,1,0)+ IF( SELF.Diff_INPUTED_CITY,1,0)+ IF( SELF.Diff_INPUTED_STATE,1,0)+ IF( SELF.Diff_INPUTED_ZIP,1,0)+ IF( SELF.Diff_INPUTED_DOB,1,0)+ IF( SELF.Diff_UNIQUE_IDENTITY_COUNT,1,0)+ IF( SELF.Diff_IDENTITY_LOCATED,1,0)+ IF( SELF.Diff_IDENTITY_NOT_LOCATED,1,0)+ IF( SELF.Diff_SELECTED_FIRST_NAME,1,0)+ IF( SELF.Diff_SELECTED_LAST_NAME,1,0)+ IF( SELF.Diff_SELECTED_SSN,1,0)+ IF( SELF.Diff_SELECTED_DOB,1,0)+ IF( SELF.Diff_SELECTED_STREET,1,0)+ IF( SELF.Diff_SELECTED_CITY,1,0)+ IF( SELF.Diff_SELECTED_STATE,1,0)+ IF( SELF.Diff_SELECTED_ZIP,1,0)+ IF( SELF.Diff_VERIF_PASS,1,0)+ IF( SELF.Diff_VERIF_FAIL,1,0)+ IF( SELF.Diff_VERIF_ERROR,1,0)+ IF( SELF.Diff_VERIF_NO_DATA_FOUND,1,0)+ IF( SELF.Diff_NUM_VERIF_CHKS,1,0)+ IF( SELF.Diff_NUM_VERIF_CHKS_PASS,1,0)+ IF( SELF.Diff_AUTH_SCORE,1,0)+ IF( SELF.Diff_AUTH_REQU_SCORE,1,0)+ IF( SELF.Diff_AUTH_PASS,1,0)+ IF( SELF.Diff_AUTH_FAIL,1,0)+ IF( SELF.Diff_AUTH_OPT_OUT,1,0)+ IF( SELF.Diff_AUTH_UNABLE_TO_GEN,1,0)+ IF( SELF.Diff_AUTH_ERROR,1,0)+ IF( SELF.Diff_AUTH_QUIZ_EXPIRE,1,0)+ IF( SELF.Diff_CLIENT_REFERENCE_ID,1,0)+ IF( SELF.Diff_AUTH_RESPONSE_TIME,1,0)+ IF( SELF.Diff_VERIF_RESPONSE_TIME,1,0)+ IF( SELF.Diff_NAME,1,0)+ IF( SELF.Diff_IS_VERIFICATION,1,0)+ IF( SELF.Diff_IS_AUTHENTICATION,1,0)+ IF( SELF.Diff_ITEM_STATUS,1,0)+ IF( SELF.Diff_AUTH_STATUS,1,0)+ IF( SELF.Diff_VERIF_STATUS,1,0)+ IF( SELF.Diff_PROID_ALIAS,1,0)+ IF( SELF.Diff_PROCHECK_ALIAS,1,0)+ IF( SELF.Diff_ID_DISCOVERY_ALIAS,1,0)+ IF( SELF.Diff_QUIZ1_STATUS,1,0)+ IF( SELF.Diff_QUIZ2_STATUS,1,0)+ IF( SELF.Diff_ALIAS_NAME,1,0)+ IF( SELF.Diff_PRODUCT_SEQUENCE,1,0)+ IF( SELF.Diff_QUIZ_STATUS,1,0)+ IF( SELF.Diff_IS_RESERVED,1,0)+ IF( SELF.Diff_INPUTED_LINK_ID,1,0)+ IF( SELF.Diff_SELECTED_LINK_ID,1,0)+ IF( SELF.Diff_ID_DISCOVERY_LINK_ID,1,0)+ IF( SELF.Diff_PROCHECK_LINK_ID,1,0)+ IF( SELF.Diff_PROID_LINK_ID,1,0)+ IF( SELF.Diff_INPUTED_PHONE_NUMBER,1,0)+ IF( SELF.Diff_ACCOUNT_VERIF_PASS,1,0)+ IF( SELF.Diff_ACCOUNT_VERIF_FAIL,1,0)+ IF( SELF.Diff_ACCOUNT_VERIF_ERROR,1,0)+ IF( SELF.Diff_ACCOUNT_VERIF_NO_DATA_FOUND,1,0)+ IF( SELF.Diff_ACCOUNT_NUM_VERIF_CHKS,1,0)+ IF( SELF.Diff_ACCOUNT_NUM_VERIF_CHKS_PASS,1,0)+ IF( SELF.Diff_ACCOUNT_VERIF_RESPONSE_TIME,1,0)+ IF( SELF.Diff_IS_ACCOUNT_VERIFICATION,1,0)+ IF( SELF.Diff_ACCOUNT_VERIF_STATUS,1,0)+ IF( SELF.Diff_ACCOUNT_VERIFICATION_ALIAS,1,0)+ IF( SELF.Diff_ACCOUNT_VERIF_LINK_ID,1,0)+ IF( SELF.Diff_BUSINESS_NAME,1,0)+ IF( SELF.Diff_FEIN,1,0)+ IF( SELF.Diff_TAXID,1,0)+ IF( SELF.Diff_GROUP_NAME,1,0)+ IF( SELF.Diff_GROUP_SEQUENCE,1,0)+ IF( SELF.Diff_SUB_PRODUCT_NAME,1,0)+ IF( SELF.Diff_SUB_PRODUCT_SEQUENCE,1,0)+ IF( SELF.Diff_IS_SURVEY,1,0)+ IF( SELF.Diff_SURVEY_STATUS,1,0)+ IF( SELF.Diff_SURVEY_QUESTION,1,0)+ IF( SELF.Diff_QUESTION_SEQUENCE,1,0)+ IF( SELF.Diff_QUESTION_CHOICE,1,0)+ IF( SELF.Diff_CHOICE_SEQUENCE,1,0)+ IF( SELF.Diff_USER_CHOICE,1,0)+ IF( SELF.Diff_ACTUAL_PROID_ALIAS,1,0)+ IF( SELF.Diff_ACTUAL_PROCHECK_ALIAS,1,0)+ IF( SELF.Diff_ACTUAL_ID_DISCOVERY_ALIAS,1,0)+ IF( SELF.Diff_REAL_PROID_ALIAS,1,0)+ IF( SELF.Diff_REAL_PROCHECK_ALIAS,1,0)+ IF( SELF.Diff_REAL_ID_DISCOVERY_ALIAS,1,0)+ IF( SELF.Diff_IS_CUSTOM,1,0)+ IF( SELF.Diff_SOURCE_IP,1,0)+ IF( SELF.Diff_IDENTITY_LOCATED_STATUS,1,0)+ IF( SELF.Diff_IDENTITY_NOT_LOCATED_STATUS,1,0)+ IF( SELF.Diff_VERIF_ERROR_STATUS,1,0)+ IF( SELF.Diff_VERIF_NO_DATA_FOUND_STATUS,1,0)+ IF( SELF.Diff_ACCOUNT_VERIF_ERROR_STATUS,1,0)+ IF( SELF.Diff_ACCOUNT_VERIF_NO_DATA_FOUND_STATUS,1,0)+ IF( SELF.Diff_AUTH_FAIL_STATUS,1,0)+ IF( SELF.Diff_AUTH_STATUS_CODE,1,0)+ IF( SELF.Diff_QUIZ_STATUS_CODE,1,0)+ IF( SELF.Diff_CONVERSATION_ID,1,0)+ IF( SELF.Diff_CUST_USERNAME,1,0);
  END;
// Now need to remove bad pivots from comparison
#uniquename(L)
  %L% := JOIN(in_left,bad_pivots,evaluate(LEFT,pivot_exp)=right.val,transform(left),left only,lookup);
#uniquename(R)
  %R% := JOIN(in_right,bad_pivots,evaluate(LEFT,pivot_exp)=right.val,transform(left),left only,lookup);
#uniquename(DiffL)
  %DiffL% := JOIN(%L%,%R%,evaluate(left,pivot_exp)=evaluate(right,pivot_exp),%fd%(left,right),hash);
#uniquename(Closest)
  %Closest% := DEDUP(SORT(%DiffL%,Val,Num_Diffs,local),Val,local); // Join will have distributed by pivot_exp
#uniquename(AggRec)
  %AggRec% := RECORD
    Count_Diff_TRANS_NUM_ID := COUNT(GROUP,%Closest%.Diff_TRANS_NUM_ID);
    Count_Diff_TRANSACTION_DATE := COUNT(GROUP,%Closest%.Diff_TRANSACTION_DATE);
    Count_Diff_ACCOUNT := COUNT(GROUP,%Closest%.Diff_ACCOUNT);
    Count_Diff_OPER_USERNAME := COUNT(GROUP,%Closest%.Diff_OPER_USERNAME);
    Count_Diff_TRANS_CLIENT_ID := COUNT(GROUP,%Closest%.Diff_TRANS_CLIENT_ID);
    Count_Diff_INPUTED_FIRST_NAME := COUNT(GROUP,%Closest%.Diff_INPUTED_FIRST_NAME);
    Count_Diff_INPUTED_LAST_NAME := COUNT(GROUP,%Closest%.Diff_INPUTED_LAST_NAME);
    Count_Diff_INPUTED_SSN := COUNT(GROUP,%Closest%.Diff_INPUTED_SSN);
    Count_Diff_INPUTED_STREET := COUNT(GROUP,%Closest%.Diff_INPUTED_STREET);
    Count_Diff_INPUTED_CITY := COUNT(GROUP,%Closest%.Diff_INPUTED_CITY);
    Count_Diff_INPUTED_STATE := COUNT(GROUP,%Closest%.Diff_INPUTED_STATE);
    Count_Diff_INPUTED_ZIP := COUNT(GROUP,%Closest%.Diff_INPUTED_ZIP);
    Count_Diff_INPUTED_DOB := COUNT(GROUP,%Closest%.Diff_INPUTED_DOB);
    Count_Diff_UNIQUE_IDENTITY_COUNT := COUNT(GROUP,%Closest%.Diff_UNIQUE_IDENTITY_COUNT);
    Count_Diff_IDENTITY_LOCATED := COUNT(GROUP,%Closest%.Diff_IDENTITY_LOCATED);
    Count_Diff_IDENTITY_NOT_LOCATED := COUNT(GROUP,%Closest%.Diff_IDENTITY_NOT_LOCATED);
    Count_Diff_SELECTED_FIRST_NAME := COUNT(GROUP,%Closest%.Diff_SELECTED_FIRST_NAME);
    Count_Diff_SELECTED_LAST_NAME := COUNT(GROUP,%Closest%.Diff_SELECTED_LAST_NAME);
    Count_Diff_SELECTED_SSN := COUNT(GROUP,%Closest%.Diff_SELECTED_SSN);
    Count_Diff_SELECTED_DOB := COUNT(GROUP,%Closest%.Diff_SELECTED_DOB);
    Count_Diff_SELECTED_STREET := COUNT(GROUP,%Closest%.Diff_SELECTED_STREET);
    Count_Diff_SELECTED_CITY := COUNT(GROUP,%Closest%.Diff_SELECTED_CITY);
    Count_Diff_SELECTED_STATE := COUNT(GROUP,%Closest%.Diff_SELECTED_STATE);
    Count_Diff_SELECTED_ZIP := COUNT(GROUP,%Closest%.Diff_SELECTED_ZIP);
    Count_Diff_VERIF_PASS := COUNT(GROUP,%Closest%.Diff_VERIF_PASS);
    Count_Diff_VERIF_FAIL := COUNT(GROUP,%Closest%.Diff_VERIF_FAIL);
    Count_Diff_VERIF_ERROR := COUNT(GROUP,%Closest%.Diff_VERIF_ERROR);
    Count_Diff_VERIF_NO_DATA_FOUND := COUNT(GROUP,%Closest%.Diff_VERIF_NO_DATA_FOUND);
    Count_Diff_NUM_VERIF_CHKS := COUNT(GROUP,%Closest%.Diff_NUM_VERIF_CHKS);
    Count_Diff_NUM_VERIF_CHKS_PASS := COUNT(GROUP,%Closest%.Diff_NUM_VERIF_CHKS_PASS);
    Count_Diff_AUTH_SCORE := COUNT(GROUP,%Closest%.Diff_AUTH_SCORE);
    Count_Diff_AUTH_REQU_SCORE := COUNT(GROUP,%Closest%.Diff_AUTH_REQU_SCORE);
    Count_Diff_AUTH_PASS := COUNT(GROUP,%Closest%.Diff_AUTH_PASS);
    Count_Diff_AUTH_FAIL := COUNT(GROUP,%Closest%.Diff_AUTH_FAIL);
    Count_Diff_AUTH_OPT_OUT := COUNT(GROUP,%Closest%.Diff_AUTH_OPT_OUT);
    Count_Diff_AUTH_UNABLE_TO_GEN := COUNT(GROUP,%Closest%.Diff_AUTH_UNABLE_TO_GEN);
    Count_Diff_AUTH_ERROR := COUNT(GROUP,%Closest%.Diff_AUTH_ERROR);
    Count_Diff_AUTH_QUIZ_EXPIRE := COUNT(GROUP,%Closest%.Diff_AUTH_QUIZ_EXPIRE);
    Count_Diff_CLIENT_REFERENCE_ID := COUNT(GROUP,%Closest%.Diff_CLIENT_REFERENCE_ID);
    Count_Diff_AUTH_RESPONSE_TIME := COUNT(GROUP,%Closest%.Diff_AUTH_RESPONSE_TIME);
    Count_Diff_VERIF_RESPONSE_TIME := COUNT(GROUP,%Closest%.Diff_VERIF_RESPONSE_TIME);
    Count_Diff_NAME := COUNT(GROUP,%Closest%.Diff_NAME);
    Count_Diff_IS_VERIFICATION := COUNT(GROUP,%Closest%.Diff_IS_VERIFICATION);
    Count_Diff_IS_AUTHENTICATION := COUNT(GROUP,%Closest%.Diff_IS_AUTHENTICATION);
    Count_Diff_ITEM_STATUS := COUNT(GROUP,%Closest%.Diff_ITEM_STATUS);
    Count_Diff_AUTH_STATUS := COUNT(GROUP,%Closest%.Diff_AUTH_STATUS);
    Count_Diff_VERIF_STATUS := COUNT(GROUP,%Closest%.Diff_VERIF_STATUS);
    Count_Diff_PROID_ALIAS := COUNT(GROUP,%Closest%.Diff_PROID_ALIAS);
    Count_Diff_PROCHECK_ALIAS := COUNT(GROUP,%Closest%.Diff_PROCHECK_ALIAS);
    Count_Diff_ID_DISCOVERY_ALIAS := COUNT(GROUP,%Closest%.Diff_ID_DISCOVERY_ALIAS);
    Count_Diff_QUIZ1_STATUS := COUNT(GROUP,%Closest%.Diff_QUIZ1_STATUS);
    Count_Diff_QUIZ2_STATUS := COUNT(GROUP,%Closest%.Diff_QUIZ2_STATUS);
    Count_Diff_ALIAS_NAME := COUNT(GROUP,%Closest%.Diff_ALIAS_NAME);
    Count_Diff_PRODUCT_SEQUENCE := COUNT(GROUP,%Closest%.Diff_PRODUCT_SEQUENCE);
    Count_Diff_QUIZ_STATUS := COUNT(GROUP,%Closest%.Diff_QUIZ_STATUS);
    Count_Diff_IS_RESERVED := COUNT(GROUP,%Closest%.Diff_IS_RESERVED);
    Count_Diff_INPUTED_LINK_ID := COUNT(GROUP,%Closest%.Diff_INPUTED_LINK_ID);
    Count_Diff_SELECTED_LINK_ID := COUNT(GROUP,%Closest%.Diff_SELECTED_LINK_ID);
    Count_Diff_ID_DISCOVERY_LINK_ID := COUNT(GROUP,%Closest%.Diff_ID_DISCOVERY_LINK_ID);
    Count_Diff_PROCHECK_LINK_ID := COUNT(GROUP,%Closest%.Diff_PROCHECK_LINK_ID);
    Count_Diff_PROID_LINK_ID := COUNT(GROUP,%Closest%.Diff_PROID_LINK_ID);
    Count_Diff_INPUTED_PHONE_NUMBER := COUNT(GROUP,%Closest%.Diff_INPUTED_PHONE_NUMBER);
    Count_Diff_ACCOUNT_VERIF_PASS := COUNT(GROUP,%Closest%.Diff_ACCOUNT_VERIF_PASS);
    Count_Diff_ACCOUNT_VERIF_FAIL := COUNT(GROUP,%Closest%.Diff_ACCOUNT_VERIF_FAIL);
    Count_Diff_ACCOUNT_VERIF_ERROR := COUNT(GROUP,%Closest%.Diff_ACCOUNT_VERIF_ERROR);
    Count_Diff_ACCOUNT_VERIF_NO_DATA_FOUND := COUNT(GROUP,%Closest%.Diff_ACCOUNT_VERIF_NO_DATA_FOUND);
    Count_Diff_ACCOUNT_NUM_VERIF_CHKS := COUNT(GROUP,%Closest%.Diff_ACCOUNT_NUM_VERIF_CHKS);
    Count_Diff_ACCOUNT_NUM_VERIF_CHKS_PASS := COUNT(GROUP,%Closest%.Diff_ACCOUNT_NUM_VERIF_CHKS_PASS);
    Count_Diff_ACCOUNT_VERIF_RESPONSE_TIME := COUNT(GROUP,%Closest%.Diff_ACCOUNT_VERIF_RESPONSE_TIME);
    Count_Diff_IS_ACCOUNT_VERIFICATION := COUNT(GROUP,%Closest%.Diff_IS_ACCOUNT_VERIFICATION);
    Count_Diff_ACCOUNT_VERIF_STATUS := COUNT(GROUP,%Closest%.Diff_ACCOUNT_VERIF_STATUS);
    Count_Diff_ACCOUNT_VERIFICATION_ALIAS := COUNT(GROUP,%Closest%.Diff_ACCOUNT_VERIFICATION_ALIAS);
    Count_Diff_ACCOUNT_VERIF_LINK_ID := COUNT(GROUP,%Closest%.Diff_ACCOUNT_VERIF_LINK_ID);
    Count_Diff_BUSINESS_NAME := COUNT(GROUP,%Closest%.Diff_BUSINESS_NAME);
    Count_Diff_FEIN := COUNT(GROUP,%Closest%.Diff_FEIN);
    Count_Diff_TAXID := COUNT(GROUP,%Closest%.Diff_TAXID);
    Count_Diff_GROUP_NAME := COUNT(GROUP,%Closest%.Diff_GROUP_NAME);
    Count_Diff_GROUP_SEQUENCE := COUNT(GROUP,%Closest%.Diff_GROUP_SEQUENCE);
    Count_Diff_SUB_PRODUCT_NAME := COUNT(GROUP,%Closest%.Diff_SUB_PRODUCT_NAME);
    Count_Diff_SUB_PRODUCT_SEQUENCE := COUNT(GROUP,%Closest%.Diff_SUB_PRODUCT_SEQUENCE);
    Count_Diff_IS_SURVEY := COUNT(GROUP,%Closest%.Diff_IS_SURVEY);
    Count_Diff_SURVEY_STATUS := COUNT(GROUP,%Closest%.Diff_SURVEY_STATUS);
    Count_Diff_SURVEY_QUESTION := COUNT(GROUP,%Closest%.Diff_SURVEY_QUESTION);
    Count_Diff_QUESTION_SEQUENCE := COUNT(GROUP,%Closest%.Diff_QUESTION_SEQUENCE);
    Count_Diff_QUESTION_CHOICE := COUNT(GROUP,%Closest%.Diff_QUESTION_CHOICE);
    Count_Diff_CHOICE_SEQUENCE := COUNT(GROUP,%Closest%.Diff_CHOICE_SEQUENCE);
    Count_Diff_USER_CHOICE := COUNT(GROUP,%Closest%.Diff_USER_CHOICE);
    Count_Diff_ACTUAL_PROID_ALIAS := COUNT(GROUP,%Closest%.Diff_ACTUAL_PROID_ALIAS);
    Count_Diff_ACTUAL_PROCHECK_ALIAS := COUNT(GROUP,%Closest%.Diff_ACTUAL_PROCHECK_ALIAS);
    Count_Diff_ACTUAL_ID_DISCOVERY_ALIAS := COUNT(GROUP,%Closest%.Diff_ACTUAL_ID_DISCOVERY_ALIAS);
    Count_Diff_REAL_PROID_ALIAS := COUNT(GROUP,%Closest%.Diff_REAL_PROID_ALIAS);
    Count_Diff_REAL_PROCHECK_ALIAS := COUNT(GROUP,%Closest%.Diff_REAL_PROCHECK_ALIAS);
    Count_Diff_REAL_ID_DISCOVERY_ALIAS := COUNT(GROUP,%Closest%.Diff_REAL_ID_DISCOVERY_ALIAS);
    Count_Diff_IS_CUSTOM := COUNT(GROUP,%Closest%.Diff_IS_CUSTOM);
    Count_Diff_SOURCE_IP := COUNT(GROUP,%Closest%.Diff_SOURCE_IP);
    Count_Diff_IDENTITY_LOCATED_STATUS := COUNT(GROUP,%Closest%.Diff_IDENTITY_LOCATED_STATUS);
    Count_Diff_IDENTITY_NOT_LOCATED_STATUS := COUNT(GROUP,%Closest%.Diff_IDENTITY_NOT_LOCATED_STATUS);
    Count_Diff_VERIF_ERROR_STATUS := COUNT(GROUP,%Closest%.Diff_VERIF_ERROR_STATUS);
    Count_Diff_VERIF_NO_DATA_FOUND_STATUS := COUNT(GROUP,%Closest%.Diff_VERIF_NO_DATA_FOUND_STATUS);
    Count_Diff_ACCOUNT_VERIF_ERROR_STATUS := COUNT(GROUP,%Closest%.Diff_ACCOUNT_VERIF_ERROR_STATUS);
    Count_Diff_ACCOUNT_VERIF_NO_DATA_FOUND_STATUS := COUNT(GROUP,%Closest%.Diff_ACCOUNT_VERIF_NO_DATA_FOUND_STATUS);
    Count_Diff_AUTH_FAIL_STATUS := COUNT(GROUP,%Closest%.Diff_AUTH_FAIL_STATUS);
    Count_Diff_AUTH_STATUS_CODE := COUNT(GROUP,%Closest%.Diff_AUTH_STATUS_CODE);
    Count_Diff_QUIZ_STATUS_CODE := COUNT(GROUP,%Closest%.Diff_QUIZ_STATUS_CODE);
    Count_Diff_CONVERSATION_ID := COUNT(GROUP,%Closest%.Diff_CONVERSATION_ID);
    Count_Diff_CUST_USERNAME := COUNT(GROUP,%Closest%.Diff_CUST_USERNAME);
  END;
  out_counts := table(%Closest%,%AggRec%,true);
ENDMACRO;
END;
