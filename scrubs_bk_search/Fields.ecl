IMPORT ut,SALT33;
EXPORT Fields := MODULE
// Processing for each FieldType
EXPORT SALT33.StrType FieldTypeName(UNSIGNED2 i) := CHOOSE(i,'invalid_alpha','invalid_alnum','invalid_name','invalid_numeric','invalid_address','invalid_dir','invalid_state','invalid_date','invalid_ssn','invalid_source','invalid_blank');
EXPORT FieldTypeNum(SALT33.StrType fn) := CASE(fn,'invalid_alpha' => 1,'invalid_alnum' => 2,'invalid_name' => 3,'invalid_numeric' => 4,'invalid_address' => 5,'invalid_dir' => 6,'invalid_state' => 7,'invalid_date' => 8,'invalid_ssn' => 9,'invalid_source' => 10,'invalid_blank' => 11,0);
EXPORT MakeFT_invalid_alpha(SALT33.StrType s0) := FUNCTION
  s1 := SALT33.stringfilter(s0,'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ -'); // Only allow valid symbols
  s2 := SALT33.stringcleanspaces( SALT33.stringsubstituteout(s1,' -',' ') ); // Insert spaces but avoid doubles
  RETURN  s2;
END;
EXPORT InValidFT_invalid_alpha(SALT33.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT33.StringFilter(s,'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ -'))),~(LENGTH(TRIM(s)) >= 0));
EXPORT InValidMessageFT_invalid_alpha(UNSIGNED1 wh) := CHOOSE(wh,SALT33.HygieneErrors.NotInChars('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ -'),SALT33.HygieneErrors.NotLength('0..'),SALT33.HygieneErrors.Good);
EXPORT MakeFT_invalid_alnum(SALT33.StrType s0) := FUNCTION
  s1 := SALT33.stringfilter(s0,'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-#\' <>{}[]'); // Only allow valid symbols
  s2 := SALT33.stringcleanspaces( SALT33.stringsubstituteout(s1,' <>{}[]',' ') ); // Insert spaces but avoid doubles
  RETURN  s2;
END;
EXPORT InValidFT_invalid_alnum(SALT33.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT33.StringFilter(s,'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-#\' <>{}[]'))),~(LENGTH(TRIM(s)) >= 0));
EXPORT InValidMessageFT_invalid_alnum(UNSIGNED1 wh) := CHOOSE(wh,SALT33.HygieneErrors.NotInChars('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-#\' <>{}[]'),SALT33.HygieneErrors.NotLength('0..'),SALT33.HygieneErrors.Good);
EXPORT MakeFT_invalid_name(SALT33.StrType s0) := FUNCTION
  s1 := SALT33.stringfilter(s0,'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\' -,&\\/.:;_+'); // Only allow valid symbols
  s2 := SALT33.stringcleanspaces( SALT33.stringsubstituteout(s1,' -,&\\/.:;_+',' ') ); // Insert spaces but avoid doubles
  RETURN  s2;
END;
EXPORT InValidFT_invalid_name(SALT33.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT33.StringFilter(s,'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\' -,&\\/.:;_+'))),~(LENGTH(TRIM(s)) >= 0));
EXPORT InValidMessageFT_invalid_name(UNSIGNED1 wh) := CHOOSE(wh,SALT33.HygieneErrors.NotInChars('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\' -,&\\/.:;_+'),SALT33.HygieneErrors.NotLength('0..'),SALT33.HygieneErrors.Good);
EXPORT MakeFT_invalid_numeric(SALT33.StrType s0) := FUNCTION
  s1 := SALT33.stringfilter(s0,'0123456789 -'); // Only allow valid symbols
  s2 := SALT33.stringcleanspaces( SALT33.stringsubstituteout(s1,' -',' ') ); // Insert spaces but avoid doubles
  RETURN  s2;
END;
EXPORT InValidFT_invalid_numeric(SALT33.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT33.StringFilter(s,'0123456789 -'))),~(LENGTH(TRIM(s)) >= 0));
EXPORT InValidMessageFT_invalid_numeric(UNSIGNED1 wh) := CHOOSE(wh,SALT33.HygieneErrors.NotInChars('0123456789 -'),SALT33.HygieneErrors.NotLength('0..'),SALT33.HygieneErrors.Good);
EXPORT MakeFT_invalid_address(SALT33.StrType s0) := FUNCTION
  s1 := SALT33.stringfilter(s0,'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\' -&/\\#.;,'); // Only allow valid symbols
  s2 := SALT33.stringcleanspaces( SALT33.stringsubstituteout(s1,' -&/\\#.;,',' ') ); // Insert spaces but avoid doubles
  RETURN  s2;
END;
EXPORT InValidFT_invalid_address(SALT33.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT33.StringFilter(s,'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\' -&/\\#.;,'))),~(LENGTH(TRIM(s)) >= 0));
EXPORT InValidMessageFT_invalid_address(UNSIGNED1 wh) := CHOOSE(wh,SALT33.HygieneErrors.NotInChars('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\' -&/\\#.;,'),SALT33.HygieneErrors.NotLength('0..'),SALT33.HygieneErrors.Good);
EXPORT MakeFT_invalid_dir(SALT33.StrType s0) := FUNCTION
  RETURN  s0;
END;
EXPORT InValidFT_invalid_dir(SALT33.StrType s) := WHICH(((SALT33.StrType) s) NOT IN ['N','NW','NE','S','SE','SW','E','W',' ']);
EXPORT InValidMessageFT_invalid_dir(UNSIGNED1 wh) := CHOOSE(wh,SALT33.HygieneErrors.NotInEnum('N|NW|NE|S|SE|SW|E|W| '),SALT33.HygieneErrors.Good);
EXPORT MakeFT_invalid_state(SALT33.StrType s0) := FUNCTION
  s1 := SALT33.stringfilter(s0,'ABCDEFGHIJKLMNOPQRSTUVWXYZ'); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_invalid_state(SALT33.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT33.StringFilter(s,'ABCDEFGHIJKLMNOPQRSTUVWXYZ'))),~(LENGTH(TRIM(s)) = 2 OR LENGTH(TRIM(s)) = 0));
EXPORT InValidMessageFT_invalid_state(UNSIGNED1 wh) := CHOOSE(wh,SALT33.HygieneErrors.NotInChars('ABCDEFGHIJKLMNOPQRSTUVWXYZ'),SALT33.HygieneErrors.NotLength('2,0'),SALT33.HygieneErrors.Good);
EXPORT MakeFT_invalid_date(SALT33.StrType s0) := FUNCTION
  s1 := SALT33.stringfilter(s0,'0123456789 '); // Only allow valid symbols
  s2 := SALT33.stringcleanspaces( SALT33.stringsubstituteout(s1,' ',' ') ); // Insert spaces but avoid doubles
  RETURN  s2;
END;
EXPORT InValidFT_invalid_date(SALT33.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT33.StringFilter(s,'0123456789 '))),~(LENGTH(TRIM(s)) = 8 OR LENGTH(TRIM(s)) = 0));
EXPORT InValidMessageFT_invalid_date(UNSIGNED1 wh) := CHOOSE(wh,SALT33.HygieneErrors.NotInChars('0123456789 '),SALT33.HygieneErrors.NotLength('8,0'),SALT33.HygieneErrors.Good);
EXPORT MakeFT_invalid_ssn(SALT33.StrType s0) := FUNCTION
  s1 := SALT33.stringfilter(s0,'0123456789'); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_invalid_ssn(SALT33.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT33.StringFilter(s,'0123456789'))),~(LENGTH(TRIM(s)) = 0 OR LENGTH(TRIM(s)) = 4 OR LENGTH(TRIM(s)) = 9));
EXPORT InValidMessageFT_invalid_ssn(UNSIGNED1 wh) := CHOOSE(wh,SALT33.HygieneErrors.NotInChars('0123456789'),SALT33.HygieneErrors.NotLength('0,4,9'),SALT33.HygieneErrors.Good);
EXPORT MakeFT_invalid_source(SALT33.StrType s0) := FUNCTION
  RETURN  s0;
END;
EXPORT InValidFT_invalid_source(SALT33.StrType s) := WHICH(((SALT33.StrType) s) NOT IN ['L','H','S']);
EXPORT InValidMessageFT_invalid_source(UNSIGNED1 wh) := CHOOSE(wh,SALT33.HygieneErrors.NotInEnum('L|H|S'),SALT33.HygieneErrors.Good);
EXPORT MakeFT_invalid_blank(SALT33.StrType s0) := FUNCTION
  RETURN  s0;
END;
EXPORT InValidFT_invalid_blank(SALT33.StrType s) := WHICH(~(LENGTH(TRIM(s)) >= 1));
EXPORT InValidMessageFT_invalid_blank(UNSIGNED1 wh) := CHOOSE(wh,SALT33.HygieneErrors.NotLength('1..'),SALT33.HygieneErrors.Good);
EXPORT SALT33.StrType FieldName(UNSIGNED2 i) := CHOOSE(i,'process_date','caseid','defendantid','recid','tmsid','seq_number','court_code','case_number','orig_case_number','chapter','filing_type','business_flag','corp_flag','discharged','disposition','pro_se_ind','converted_date','orig_county','debtor_type','debtor_seq','ssn','ssnsrc','ssnmatch','ssnmsrc','screen','dcode','disptype','dispreason','statusdate','holdcase','datevacated','datetransferred','activityreceipt','tax_id','name_type','orig_name','orig_fname','orig_mname','orig_lname','orig_name_suffix','title','fname','mname','lname','name_suffix','name_score','cname','orig_company','orig_addr1','orig_addr2','orig_city','orig_st','orig_zip5','orig_zip4','orig_email','orig_fax','prim_range','predir','prim_name','addr_suffix','postdir','unit_desig','sec_range','p_city_name','v_city_name','st','zip','zip4','cart','cr_sort_sz','lot','lot_order','dbpc','chk_digit','rec_type','county','geo_lat','geo_long','msa','geo_blk','geo_match','err_stat','phone','did','bdid','app_ssn','app_tax_id','date_first_seen','date_last_seen','date_vendor_first_reported','date_vendor_last_reported','disptypedesc','srcdesc','srcmtchdesc','screendesc','dcodedesc','date_filed','record_type','delete_flag','dotid','dotscore','dotweight','empid','empscore','empweight','powid','powscore','powweight','proxid','proxscore','proxweight','seleid','selescore','seleweight','orgid','orgscore','orgweight','ultid','ultscore','ultweight','source_rec_id');
EXPORT FieldNum(SALT33.StrType fn) := CASE(fn,'process_date' => 0,'caseid' => 1,'defendantid' => 2,'recid' => 3,'tmsid' => 4,'seq_number' => 5,'court_code' => 6,'case_number' => 7,'orig_case_number' => 8,'chapter' => 9,'filing_type' => 10,'business_flag' => 11,'corp_flag' => 12,'discharged' => 13,'disposition' => 14,'pro_se_ind' => 15,'converted_date' => 16,'orig_county' => 17,'debtor_type' => 18,'debtor_seq' => 19,'ssn' => 20,'ssnsrc' => 21,'ssnmatch' => 22,'ssnmsrc' => 23,'screen' => 24,'dcode' => 25,'disptype' => 26,'dispreason' => 27,'statusdate' => 28,'holdcase' => 29,'datevacated' => 30,'datetransferred' => 31,'activityreceipt' => 32,'tax_id' => 33,'name_type' => 34,'orig_name' => 35,'orig_fname' => 36,'orig_mname' => 37,'orig_lname' => 38,'orig_name_suffix' => 39,'title' => 40,'fname' => 41,'mname' => 42,'lname' => 43,'name_suffix' => 44,'name_score' => 45,'cname' => 46,'orig_company' => 47,'orig_addr1' => 48,'orig_addr2' => 49,'orig_city' => 50,'orig_st' => 51,'orig_zip5' => 52,'orig_zip4' => 53,'orig_email' => 54,'orig_fax' => 55,'prim_range' => 56,'predir' => 57,'prim_name' => 58,'addr_suffix' => 59,'postdir' => 60,'unit_desig' => 61,'sec_range' => 62,'p_city_name' => 63,'v_city_name' => 64,'st' => 65,'zip' => 66,'zip4' => 67,'cart' => 68,'cr_sort_sz' => 69,'lot' => 70,'lot_order' => 71,'dbpc' => 72,'chk_digit' => 73,'rec_type' => 74,'county' => 75,'geo_lat' => 76,'geo_long' => 77,'msa' => 78,'geo_blk' => 79,'geo_match' => 80,'err_stat' => 81,'phone' => 82,'did' => 83,'bdid' => 84,'app_ssn' => 85,'app_tax_id' => 86,'date_first_seen' => 87,'date_last_seen' => 88,'date_vendor_first_reported' => 89,'date_vendor_last_reported' => 90,'disptypedesc' => 91,'srcdesc' => 92,'srcmtchdesc' => 93,'screendesc' => 94,'dcodedesc' => 95,'date_filed' => 96,'record_type' => 97,'delete_flag' => 98,'dotid' => 99,'dotscore' => 100,'dotweight' => 101,'empid' => 102,'empscore' => 103,'empweight' => 104,'powid' => 105,'powscore' => 106,'powweight' => 107,'proxid' => 108,'proxscore' => 109,'proxweight' => 110,'seleid' => 111,'selescore' => 112,'seleweight' => 113,'orgid' => 114,'orgscore' => 115,'orgweight' => 116,'ultid' => 117,'ultscore' => 118,'ultweight' => 119,'source_rec_id' => 120,0);
//Individual field level validation
EXPORT Make_process_date(SALT33.StrType s0) := MakeFT_invalid_date(s0);
EXPORT InValid_process_date(SALT33.StrType s) := InValidFT_invalid_date(s);
EXPORT InValidMessage_process_date(UNSIGNED1 wh) := InValidMessageFT_invalid_date(wh);
EXPORT Make_caseid(SALT33.StrType s0) := s0;
EXPORT InValid_caseid(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_caseid(UNSIGNED1 wh) := '';
EXPORT Make_defendantid(SALT33.StrType s0) := s0;
EXPORT InValid_defendantid(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_defendantid(UNSIGNED1 wh) := '';
EXPORT Make_recid(SALT33.StrType s0) := s0;
EXPORT InValid_recid(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_recid(UNSIGNED1 wh) := '';
EXPORT Make_tmsid(SALT33.StrType s0) := s0;
EXPORT InValid_tmsid(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_tmsid(UNSIGNED1 wh) := '';
EXPORT Make_seq_number(SALT33.StrType s0) := s0;
EXPORT InValid_seq_number(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_seq_number(UNSIGNED1 wh) := '';
EXPORT Make_court_code(SALT33.StrType s0) := s0;
EXPORT InValid_court_code(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_court_code(UNSIGNED1 wh) := '';
EXPORT Make_case_number(SALT33.StrType s0) := MakeFT_invalid_alnum(s0);
EXPORT InValid_case_number(SALT33.StrType s) := InValidFT_invalid_alnum(s);
EXPORT InValidMessage_case_number(UNSIGNED1 wh) := InValidMessageFT_invalid_alnum(wh);
EXPORT Make_orig_case_number(SALT33.StrType s0) := MakeFT_invalid_alnum(s0);
EXPORT InValid_orig_case_number(SALT33.StrType s) := InValidFT_invalid_alnum(s);
EXPORT InValidMessage_orig_case_number(UNSIGNED1 wh) := InValidMessageFT_invalid_alnum(wh);
EXPORT Make_chapter(SALT33.StrType s0) := s0;
EXPORT InValid_chapter(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_chapter(UNSIGNED1 wh) := '';
EXPORT Make_filing_type(SALT33.StrType s0) := s0;
EXPORT InValid_filing_type(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_filing_type(UNSIGNED1 wh) := '';
EXPORT Make_business_flag(SALT33.StrType s0) := s0;
EXPORT InValid_business_flag(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_business_flag(UNSIGNED1 wh) := '';
EXPORT Make_corp_flag(SALT33.StrType s0) := s0;
EXPORT InValid_corp_flag(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_corp_flag(UNSIGNED1 wh) := '';
EXPORT Make_discharged(SALT33.StrType s0) := s0;
EXPORT InValid_discharged(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_discharged(UNSIGNED1 wh) := '';
EXPORT Make_disposition(SALT33.StrType s0) := s0;
EXPORT InValid_disposition(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_disposition(UNSIGNED1 wh) := '';
EXPORT Make_pro_se_ind(SALT33.StrType s0) := s0;
EXPORT InValid_pro_se_ind(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_pro_se_ind(UNSIGNED1 wh) := '';
EXPORT Make_converted_date(SALT33.StrType s0) := MakeFT_invalid_date(s0);
EXPORT InValid_converted_date(SALT33.StrType s) := InValidFT_invalid_date(s);
EXPORT InValidMessage_converted_date(UNSIGNED1 wh) := InValidMessageFT_invalid_date(wh);
EXPORT Make_orig_county(SALT33.StrType s0) := s0;
EXPORT InValid_orig_county(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_orig_county(UNSIGNED1 wh) := '';
EXPORT Make_debtor_type(SALT33.StrType s0) := s0;
EXPORT InValid_debtor_type(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_debtor_type(UNSIGNED1 wh) := '';
EXPORT Make_debtor_seq(SALT33.StrType s0) := s0;
EXPORT InValid_debtor_seq(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_debtor_seq(UNSIGNED1 wh) := '';
EXPORT Make_ssn(SALT33.StrType s0) := MakeFT_invalid_ssn(s0);
EXPORT InValid_ssn(SALT33.StrType s) := InValidFT_invalid_ssn(s);
EXPORT InValidMessage_ssn(UNSIGNED1 wh) := InValidMessageFT_invalid_ssn(wh);
EXPORT Make_ssnsrc(SALT33.StrType s0) := s0;
EXPORT InValid_ssnsrc(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_ssnsrc(UNSIGNED1 wh) := '';
EXPORT Make_ssnmatch(SALT33.StrType s0) := s0;
EXPORT InValid_ssnmatch(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_ssnmatch(UNSIGNED1 wh) := '';
EXPORT Make_ssnmsrc(SALT33.StrType s0) := s0;
EXPORT InValid_ssnmsrc(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_ssnmsrc(UNSIGNED1 wh) := '';
EXPORT Make_screen(SALT33.StrType s0) := s0;
EXPORT InValid_screen(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_screen(UNSIGNED1 wh) := '';
EXPORT Make_dcode(SALT33.StrType s0) := s0;
EXPORT InValid_dcode(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_dcode(UNSIGNED1 wh) := '';
EXPORT Make_disptype(SALT33.StrType s0) := s0;
EXPORT InValid_disptype(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_disptype(UNSIGNED1 wh) := '';
EXPORT Make_dispreason(SALT33.StrType s0) := s0;
EXPORT InValid_dispreason(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_dispreason(UNSIGNED1 wh) := '';
EXPORT Make_statusdate(SALT33.StrType s0) := MakeFT_invalid_date(s0);
EXPORT InValid_statusdate(SALT33.StrType s) := InValidFT_invalid_date(s);
EXPORT InValidMessage_statusdate(UNSIGNED1 wh) := InValidMessageFT_invalid_date(wh);
EXPORT Make_holdcase(SALT33.StrType s0) := s0;
EXPORT InValid_holdcase(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_holdcase(UNSIGNED1 wh) := '';
EXPORT Make_datevacated(SALT33.StrType s0) := MakeFT_invalid_date(s0);
EXPORT InValid_datevacated(SALT33.StrType s) := InValidFT_invalid_date(s);
EXPORT InValidMessage_datevacated(UNSIGNED1 wh) := InValidMessageFT_invalid_date(wh);
EXPORT Make_datetransferred(SALT33.StrType s0) := MakeFT_invalid_date(s0);
EXPORT InValid_datetransferred(SALT33.StrType s) := InValidFT_invalid_date(s);
EXPORT InValidMessage_datetransferred(UNSIGNED1 wh) := InValidMessageFT_invalid_date(wh);
EXPORT Make_activityreceipt(SALT33.StrType s0) := s0;
EXPORT InValid_activityreceipt(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_activityreceipt(UNSIGNED1 wh) := '';
EXPORT Make_tax_id(SALT33.StrType s0) := s0;
EXPORT InValid_tax_id(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_tax_id(UNSIGNED1 wh) := '';
EXPORT Make_name_type(SALT33.StrType s0) := s0;
EXPORT InValid_name_type(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_name_type(UNSIGNED1 wh) := '';
EXPORT Make_orig_name(SALT33.StrType s0) := MakeFT_invalid_name(s0);
EXPORT InValid_orig_name(SALT33.StrType s) := InValidFT_invalid_name(s);
EXPORT InValidMessage_orig_name(UNSIGNED1 wh) := InValidMessageFT_invalid_name(wh);
EXPORT Make_orig_fname(SALT33.StrType s0) := MakeFT_invalid_name(s0);
EXPORT InValid_orig_fname(SALT33.StrType s) := InValidFT_invalid_name(s);
EXPORT InValidMessage_orig_fname(UNSIGNED1 wh) := InValidMessageFT_invalid_name(wh);
EXPORT Make_orig_mname(SALT33.StrType s0) := MakeFT_invalid_name(s0);
EXPORT InValid_orig_mname(SALT33.StrType s) := InValidFT_invalid_name(s);
EXPORT InValidMessage_orig_mname(UNSIGNED1 wh) := InValidMessageFT_invalid_name(wh);
EXPORT Make_orig_lname(SALT33.StrType s0) := MakeFT_invalid_name(s0);
EXPORT InValid_orig_lname(SALT33.StrType s) := InValidFT_invalid_name(s);
EXPORT InValidMessage_orig_lname(UNSIGNED1 wh) := InValidMessageFT_invalid_name(wh);
EXPORT Make_orig_name_suffix(SALT33.StrType s0) := s0;
EXPORT InValid_orig_name_suffix(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_orig_name_suffix(UNSIGNED1 wh) := '';
EXPORT Make_title(SALT33.StrType s0) := s0;
EXPORT InValid_title(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_title(UNSIGNED1 wh) := '';
EXPORT Make_fname(SALT33.StrType s0) := MakeFT_invalid_name(s0);
EXPORT InValid_fname(SALT33.StrType s) := InValidFT_invalid_name(s);
EXPORT InValidMessage_fname(UNSIGNED1 wh) := InValidMessageFT_invalid_name(wh);
EXPORT Make_mname(SALT33.StrType s0) := MakeFT_invalid_name(s0);
EXPORT InValid_mname(SALT33.StrType s) := InValidFT_invalid_name(s);
EXPORT InValidMessage_mname(UNSIGNED1 wh) := InValidMessageFT_invalid_name(wh);
EXPORT Make_lname(SALT33.StrType s0) := MakeFT_invalid_name(s0);
EXPORT InValid_lname(SALT33.StrType s) := InValidFT_invalid_name(s);
EXPORT InValidMessage_lname(UNSIGNED1 wh) := InValidMessageFT_invalid_name(wh);
EXPORT Make_name_suffix(SALT33.StrType s0) := s0;
EXPORT InValid_name_suffix(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_name_suffix(UNSIGNED1 wh) := '';
EXPORT Make_name_score(SALT33.StrType s0) := s0;
EXPORT InValid_name_score(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_name_score(UNSIGNED1 wh) := '';
EXPORT Make_cname(SALT33.StrType s0) := s0;
EXPORT InValid_cname(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_cname(UNSIGNED1 wh) := '';
EXPORT Make_orig_company(SALT33.StrType s0) := s0;
EXPORT InValid_orig_company(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_orig_company(UNSIGNED1 wh) := '';
EXPORT Make_orig_addr1(SALT33.StrType s0) := s0;
EXPORT InValid_orig_addr1(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_orig_addr1(UNSIGNED1 wh) := '';
EXPORT Make_orig_addr2(SALT33.StrType s0) := s0;
EXPORT InValid_orig_addr2(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_orig_addr2(UNSIGNED1 wh) := '';
EXPORT Make_orig_city(SALT33.StrType s0) := s0;
EXPORT InValid_orig_city(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_orig_city(UNSIGNED1 wh) := '';
EXPORT Make_orig_st(SALT33.StrType s0) := s0;
EXPORT InValid_orig_st(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_orig_st(UNSIGNED1 wh) := '';
EXPORT Make_orig_zip5(SALT33.StrType s0) := s0;
EXPORT InValid_orig_zip5(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_orig_zip5(UNSIGNED1 wh) := '';
EXPORT Make_orig_zip4(SALT33.StrType s0) := s0;
EXPORT InValid_orig_zip4(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_orig_zip4(UNSIGNED1 wh) := '';
EXPORT Make_orig_email(SALT33.StrType s0) := s0;
EXPORT InValid_orig_email(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_orig_email(UNSIGNED1 wh) := '';
EXPORT Make_orig_fax(SALT33.StrType s0) := s0;
EXPORT InValid_orig_fax(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_orig_fax(UNSIGNED1 wh) := '';
EXPORT Make_prim_range(SALT33.StrType s0) := s0;
EXPORT InValid_prim_range(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_prim_range(UNSIGNED1 wh) := '';
EXPORT Make_predir(SALT33.StrType s0) := s0;
EXPORT InValid_predir(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_predir(UNSIGNED1 wh) := '';
EXPORT Make_prim_name(SALT33.StrType s0) := s0;
EXPORT InValid_prim_name(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_prim_name(UNSIGNED1 wh) := '';
EXPORT Make_addr_suffix(SALT33.StrType s0) := s0;
EXPORT InValid_addr_suffix(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_addr_suffix(UNSIGNED1 wh) := '';
EXPORT Make_postdir(SALT33.StrType s0) := s0;
EXPORT InValid_postdir(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_postdir(UNSIGNED1 wh) := '';
EXPORT Make_unit_desig(SALT33.StrType s0) := s0;
EXPORT InValid_unit_desig(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_unit_desig(UNSIGNED1 wh) := '';
EXPORT Make_sec_range(SALT33.StrType s0) := s0;
EXPORT InValid_sec_range(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_sec_range(UNSIGNED1 wh) := '';
EXPORT Make_p_city_name(SALT33.StrType s0) := s0;
EXPORT InValid_p_city_name(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_p_city_name(UNSIGNED1 wh) := '';
EXPORT Make_v_city_name(SALT33.StrType s0) := s0;
EXPORT InValid_v_city_name(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_v_city_name(UNSIGNED1 wh) := '';
EXPORT Make_st(SALT33.StrType s0) := MakeFT_invalid_state(s0);
EXPORT InValid_st(SALT33.StrType s) := InValidFT_invalid_state(s);
EXPORT InValidMessage_st(UNSIGNED1 wh) := InValidMessageFT_invalid_state(wh);
EXPORT Make_zip(SALT33.StrType s0) := s0;
EXPORT InValid_zip(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_zip(UNSIGNED1 wh) := '';
EXPORT Make_zip4(SALT33.StrType s0) := s0;
EXPORT InValid_zip4(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_zip4(UNSIGNED1 wh) := '';
EXPORT Make_cart(SALT33.StrType s0) := s0;
EXPORT InValid_cart(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_cart(UNSIGNED1 wh) := '';
EXPORT Make_cr_sort_sz(SALT33.StrType s0) := s0;
EXPORT InValid_cr_sort_sz(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_cr_sort_sz(UNSIGNED1 wh) := '';
EXPORT Make_lot(SALT33.StrType s0) := s0;
EXPORT InValid_lot(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_lot(UNSIGNED1 wh) := '';
EXPORT Make_lot_order(SALT33.StrType s0) := s0;
EXPORT InValid_lot_order(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_lot_order(UNSIGNED1 wh) := '';
EXPORT Make_dbpc(SALT33.StrType s0) := s0;
EXPORT InValid_dbpc(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_dbpc(UNSIGNED1 wh) := '';
EXPORT Make_chk_digit(SALT33.StrType s0) := s0;
EXPORT InValid_chk_digit(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_chk_digit(UNSIGNED1 wh) := '';
EXPORT Make_rec_type(SALT33.StrType s0) := s0;
EXPORT InValid_rec_type(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_rec_type(UNSIGNED1 wh) := '';
EXPORT Make_county(SALT33.StrType s0) := s0;
EXPORT InValid_county(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_county(UNSIGNED1 wh) := '';
EXPORT Make_geo_lat(SALT33.StrType s0) := s0;
EXPORT InValid_geo_lat(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_geo_lat(UNSIGNED1 wh) := '';
EXPORT Make_geo_long(SALT33.StrType s0) := s0;
EXPORT InValid_geo_long(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_geo_long(UNSIGNED1 wh) := '';
EXPORT Make_msa(SALT33.StrType s0) := s0;
EXPORT InValid_msa(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_msa(UNSIGNED1 wh) := '';
EXPORT Make_geo_blk(SALT33.StrType s0) := s0;
EXPORT InValid_geo_blk(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_geo_blk(UNSIGNED1 wh) := '';
EXPORT Make_geo_match(SALT33.StrType s0) := s0;
EXPORT InValid_geo_match(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_geo_match(UNSIGNED1 wh) := '';
EXPORT Make_err_stat(SALT33.StrType s0) := s0;
EXPORT InValid_err_stat(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_err_stat(UNSIGNED1 wh) := '';
EXPORT Make_phone(SALT33.StrType s0) := s0;
EXPORT InValid_phone(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_phone(UNSIGNED1 wh) := '';
EXPORT Make_did(SALT33.StrType s0) := s0;
EXPORT InValid_did(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_did(UNSIGNED1 wh) := '';
EXPORT Make_bdid(SALT33.StrType s0) := s0;
EXPORT InValid_bdid(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_bdid(UNSIGNED1 wh) := '';
EXPORT Make_app_ssn(SALT33.StrType s0) := s0;
EXPORT InValid_app_ssn(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_app_ssn(UNSIGNED1 wh) := '';
EXPORT Make_app_tax_id(SALT33.StrType s0) := s0;
EXPORT InValid_app_tax_id(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_app_tax_id(UNSIGNED1 wh) := '';
EXPORT Make_date_first_seen(SALT33.StrType s0) := MakeFT_invalid_date(s0);
EXPORT InValid_date_first_seen(SALT33.StrType s) := InValidFT_invalid_date(s);
EXPORT InValidMessage_date_first_seen(UNSIGNED1 wh) := InValidMessageFT_invalid_date(wh);
EXPORT Make_date_last_seen(SALT33.StrType s0) := MakeFT_invalid_date(s0);
EXPORT InValid_date_last_seen(SALT33.StrType s) := InValidFT_invalid_date(s);
EXPORT InValidMessage_date_last_seen(UNSIGNED1 wh) := InValidMessageFT_invalid_date(wh);
EXPORT Make_date_vendor_first_reported(SALT33.StrType s0) := MakeFT_invalid_date(s0);
EXPORT InValid_date_vendor_first_reported(SALT33.StrType s) := InValidFT_invalid_date(s);
EXPORT InValidMessage_date_vendor_first_reported(UNSIGNED1 wh) := InValidMessageFT_invalid_date(wh);
EXPORT Make_date_vendor_last_reported(SALT33.StrType s0) := MakeFT_invalid_date(s0);
EXPORT InValid_date_vendor_last_reported(SALT33.StrType s) := InValidFT_invalid_date(s);
EXPORT InValidMessage_date_vendor_last_reported(UNSIGNED1 wh) := InValidMessageFT_invalid_date(wh);
EXPORT Make_disptypedesc(SALT33.StrType s0) := s0;
EXPORT InValid_disptypedesc(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_disptypedesc(UNSIGNED1 wh) := '';
EXPORT Make_srcdesc(SALT33.StrType s0) := s0;
EXPORT InValid_srcdesc(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_srcdesc(UNSIGNED1 wh) := '';
EXPORT Make_srcmtchdesc(SALT33.StrType s0) := s0;
EXPORT InValid_srcmtchdesc(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_srcmtchdesc(UNSIGNED1 wh) := '';
EXPORT Make_screendesc(SALT33.StrType s0) := s0;
EXPORT InValid_screendesc(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_screendesc(UNSIGNED1 wh) := '';
EXPORT Make_dcodedesc(SALT33.StrType s0) := s0;
EXPORT InValid_dcodedesc(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_dcodedesc(UNSIGNED1 wh) := '';
EXPORT Make_date_filed(SALT33.StrType s0) := MakeFT_invalid_date(s0);
EXPORT InValid_date_filed(SALT33.StrType s) := InValidFT_invalid_date(s);
EXPORT InValidMessage_date_filed(UNSIGNED1 wh) := InValidMessageFT_invalid_date(wh);
EXPORT Make_record_type(SALT33.StrType s0) := s0;
EXPORT InValid_record_type(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_record_type(UNSIGNED1 wh) := '';
EXPORT Make_delete_flag(SALT33.StrType s0) := s0;
EXPORT InValid_delete_flag(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_delete_flag(UNSIGNED1 wh) := '';
EXPORT Make_dotid(SALT33.StrType s0) := s0;
EXPORT InValid_dotid(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_dotid(UNSIGNED1 wh) := '';
EXPORT Make_dotscore(SALT33.StrType s0) := s0;
EXPORT InValid_dotscore(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_dotscore(UNSIGNED1 wh) := '';
EXPORT Make_dotweight(SALT33.StrType s0) := s0;
EXPORT InValid_dotweight(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_dotweight(UNSIGNED1 wh) := '';
EXPORT Make_empid(SALT33.StrType s0) := s0;
EXPORT InValid_empid(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_empid(UNSIGNED1 wh) := '';
EXPORT Make_empscore(SALT33.StrType s0) := s0;
EXPORT InValid_empscore(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_empscore(UNSIGNED1 wh) := '';
EXPORT Make_empweight(SALT33.StrType s0) := s0;
EXPORT InValid_empweight(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_empweight(UNSIGNED1 wh) := '';
EXPORT Make_powid(SALT33.StrType s0) := s0;
EXPORT InValid_powid(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_powid(UNSIGNED1 wh) := '';
EXPORT Make_powscore(SALT33.StrType s0) := s0;
EXPORT InValid_powscore(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_powscore(UNSIGNED1 wh) := '';
EXPORT Make_powweight(SALT33.StrType s0) := s0;
EXPORT InValid_powweight(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_powweight(UNSIGNED1 wh) := '';
EXPORT Make_proxid(SALT33.StrType s0) := s0;
EXPORT InValid_proxid(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_proxid(UNSIGNED1 wh) := '';
EXPORT Make_proxscore(SALT33.StrType s0) := s0;
EXPORT InValid_proxscore(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_proxscore(UNSIGNED1 wh) := '';
EXPORT Make_proxweight(SALT33.StrType s0) := s0;
EXPORT InValid_proxweight(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_proxweight(UNSIGNED1 wh) := '';
EXPORT Make_seleid(SALT33.StrType s0) := s0;
EXPORT InValid_seleid(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_seleid(UNSIGNED1 wh) := '';
EXPORT Make_selescore(SALT33.StrType s0) := s0;
EXPORT InValid_selescore(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_selescore(UNSIGNED1 wh) := '';
EXPORT Make_seleweight(SALT33.StrType s0) := s0;
EXPORT InValid_seleweight(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_seleweight(UNSIGNED1 wh) := '';
EXPORT Make_orgid(SALT33.StrType s0) := s0;
EXPORT InValid_orgid(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_orgid(UNSIGNED1 wh) := '';
EXPORT Make_orgscore(SALT33.StrType s0) := s0;
EXPORT InValid_orgscore(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_orgscore(UNSIGNED1 wh) := '';
EXPORT Make_orgweight(SALT33.StrType s0) := s0;
EXPORT InValid_orgweight(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_orgweight(UNSIGNED1 wh) := '';
EXPORT Make_ultid(SALT33.StrType s0) := s0;
EXPORT InValid_ultid(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_ultid(UNSIGNED1 wh) := '';
EXPORT Make_ultscore(SALT33.StrType s0) := s0;
EXPORT InValid_ultscore(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_ultscore(UNSIGNED1 wh) := '';
EXPORT Make_ultweight(SALT33.StrType s0) := s0;
EXPORT InValid_ultweight(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_ultweight(UNSIGNED1 wh) := '';
EXPORT Make_source_rec_id(SALT33.StrType s0) := s0;
EXPORT InValid_source_rec_id(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_source_rec_id(UNSIGNED1 wh) := '';
// This macro will compute and count field level differences based upon a pivot expression
export MAC_CountDifferencesByPivot(in_left,in_right,pivot_exp,bad_pivots,out_counts) := MACRO
  IMPORT SALT33,Scrubs_bk_search;
//Find those highly occuring pivot values to remove them from consideration
#uniquename(tr)
  %tr% := table(in_left+in_right,{ val := pivot_exp; });
#uniquename(r1)
  %r1% := record
    %tr%.val;    unsigned Cnt := COUNT(GROUP);
  end;
#uniquename(t1)
  %t1% := table(%tr%,%r1%,val,local); // Pre-aggregate before distribute
#uniquename(r2)
  %r2% := record
    %t1%.val;    unsigned Cnt := SUM(GROUP,%t1%.Cnt);
  end;
#uniquename(t2)
  %t2% := table(%t1%,%r2%,val); // Now do global aggregate
Bad_Pivots := %t2%(Cnt>100);
#uniquename(dl)
  %dl% := RECORD
    BOOLEAN Diff_process_date;
    BOOLEAN Diff_caseid;
    BOOLEAN Diff_defendantid;
    BOOLEAN Diff_recid;
    BOOLEAN Diff_tmsid;
    BOOLEAN Diff_seq_number;
    BOOLEAN Diff_court_code;
    BOOLEAN Diff_case_number;
    BOOLEAN Diff_orig_case_number;
    BOOLEAN Diff_chapter;
    BOOLEAN Diff_filing_type;
    BOOLEAN Diff_business_flag;
    BOOLEAN Diff_corp_flag;
    BOOLEAN Diff_discharged;
    BOOLEAN Diff_disposition;
    BOOLEAN Diff_pro_se_ind;
    BOOLEAN Diff_converted_date;
    BOOLEAN Diff_orig_county;
    BOOLEAN Diff_debtor_type;
    BOOLEAN Diff_debtor_seq;
    BOOLEAN Diff_ssn;
    BOOLEAN Diff_ssnsrc;
    BOOLEAN Diff_ssnmatch;
    BOOLEAN Diff_ssnmsrc;
    BOOLEAN Diff_screen;
    BOOLEAN Diff_dcode;
    BOOLEAN Diff_disptype;
    BOOLEAN Diff_dispreason;
    BOOLEAN Diff_statusdate;
    BOOLEAN Diff_holdcase;
    BOOLEAN Diff_datevacated;
    BOOLEAN Diff_datetransferred;
    BOOLEAN Diff_activityreceipt;
    BOOLEAN Diff_tax_id;
    BOOLEAN Diff_name_type;
    BOOLEAN Diff_orig_name;
    BOOLEAN Diff_orig_fname;
    BOOLEAN Diff_orig_mname;
    BOOLEAN Diff_orig_lname;
    BOOLEAN Diff_orig_name_suffix;
    BOOLEAN Diff_title;
    BOOLEAN Diff_fname;
    BOOLEAN Diff_mname;
    BOOLEAN Diff_lname;
    BOOLEAN Diff_name_suffix;
    BOOLEAN Diff_name_score;
    BOOLEAN Diff_cname;
    BOOLEAN Diff_orig_company;
    BOOLEAN Diff_orig_addr1;
    BOOLEAN Diff_orig_addr2;
    BOOLEAN Diff_orig_city;
    BOOLEAN Diff_orig_st;
    BOOLEAN Diff_orig_zip5;
    BOOLEAN Diff_orig_zip4;
    BOOLEAN Diff_orig_email;
    BOOLEAN Diff_orig_fax;
    BOOLEAN Diff_prim_range;
    BOOLEAN Diff_predir;
    BOOLEAN Diff_prim_name;
    BOOLEAN Diff_addr_suffix;
    BOOLEAN Diff_postdir;
    BOOLEAN Diff_unit_desig;
    BOOLEAN Diff_sec_range;
    BOOLEAN Diff_p_city_name;
    BOOLEAN Diff_v_city_name;
    BOOLEAN Diff_st;
    BOOLEAN Diff_zip;
    BOOLEAN Diff_zip4;
    BOOLEAN Diff_cart;
    BOOLEAN Diff_cr_sort_sz;
    BOOLEAN Diff_lot;
    BOOLEAN Diff_lot_order;
    BOOLEAN Diff_dbpc;
    BOOLEAN Diff_chk_digit;
    BOOLEAN Diff_rec_type;
    BOOLEAN Diff_county;
    BOOLEAN Diff_geo_lat;
    BOOLEAN Diff_geo_long;
    BOOLEAN Diff_msa;
    BOOLEAN Diff_geo_blk;
    BOOLEAN Diff_geo_match;
    BOOLEAN Diff_err_stat;
    BOOLEAN Diff_phone;
    BOOLEAN Diff_did;
    BOOLEAN Diff_bdid;
    BOOLEAN Diff_app_ssn;
    BOOLEAN Diff_app_tax_id;
    BOOLEAN Diff_date_first_seen;
    BOOLEAN Diff_date_last_seen;
    BOOLEAN Diff_date_vendor_first_reported;
    BOOLEAN Diff_date_vendor_last_reported;
    BOOLEAN Diff_disptypedesc;
    BOOLEAN Diff_srcdesc;
    BOOLEAN Diff_srcmtchdesc;
    BOOLEAN Diff_screendesc;
    BOOLEAN Diff_dcodedesc;
    BOOLEAN Diff_date_filed;
    BOOLEAN Diff_record_type;
    BOOLEAN Diff_delete_flag;
    BOOLEAN Diff_dotid;
    BOOLEAN Diff_dotscore;
    BOOLEAN Diff_dotweight;
    BOOLEAN Diff_empid;
    BOOLEAN Diff_empscore;
    BOOLEAN Diff_empweight;
    BOOLEAN Diff_powid;
    BOOLEAN Diff_powscore;
    BOOLEAN Diff_powweight;
    BOOLEAN Diff_proxid;
    BOOLEAN Diff_proxscore;
    BOOLEAN Diff_proxweight;
    BOOLEAN Diff_seleid;
    BOOLEAN Diff_selescore;
    BOOLEAN Diff_seleweight;
    BOOLEAN Diff_orgid;
    BOOLEAN Diff_orgscore;
    BOOLEAN Diff_orgweight;
    BOOLEAN Diff_ultid;
    BOOLEAN Diff_ultscore;
    BOOLEAN Diff_ultweight;
    BOOLEAN Diff_source_rec_id;
    SALT33.StrType SourceField {MAXLENGTH(30)};
    UNSIGNED Num_Diffs;
    SALT33.StrType Val {MAXLENGTH(1024)};
  END;
#uniquename(fd)
  %dl% %fd%(in_left le,in_right ri) := TRANSFORM
    SELF.Diff_process_date := le.process_date <> ri.process_date;
    SELF.Diff_caseid := le.caseid <> ri.caseid;
    SELF.Diff_defendantid := le.defendantid <> ri.defendantid;
    SELF.Diff_recid := le.recid <> ri.recid;
    SELF.Diff_tmsid := le.tmsid <> ri.tmsid;
    SELF.Diff_seq_number := le.seq_number <> ri.seq_number;
    SELF.Diff_court_code := le.court_code <> ri.court_code;
    SELF.Diff_case_number := le.case_number <> ri.case_number;
    SELF.Diff_orig_case_number := le.orig_case_number <> ri.orig_case_number;
    SELF.Diff_chapter := le.chapter <> ri.chapter;
    SELF.Diff_filing_type := le.filing_type <> ri.filing_type;
    SELF.Diff_business_flag := le.business_flag <> ri.business_flag;
    SELF.Diff_corp_flag := le.corp_flag <> ri.corp_flag;
    SELF.Diff_discharged := le.discharged <> ri.discharged;
    SELF.Diff_disposition := le.disposition <> ri.disposition;
    SELF.Diff_pro_se_ind := le.pro_se_ind <> ri.pro_se_ind;
    SELF.Diff_converted_date := le.converted_date <> ri.converted_date;
    SELF.Diff_orig_county := le.orig_county <> ri.orig_county;
    SELF.Diff_debtor_type := le.debtor_type <> ri.debtor_type;
    SELF.Diff_debtor_seq := le.debtor_seq <> ri.debtor_seq;
    SELF.Diff_ssn := le.ssn <> ri.ssn;
    SELF.Diff_ssnsrc := le.ssnsrc <> ri.ssnsrc;
    SELF.Diff_ssnmatch := le.ssnmatch <> ri.ssnmatch;
    SELF.Diff_ssnmsrc := le.ssnmsrc <> ri.ssnmsrc;
    SELF.Diff_screen := le.screen <> ri.screen;
    SELF.Diff_dcode := le.dcode <> ri.dcode;
    SELF.Diff_disptype := le.disptype <> ri.disptype;
    SELF.Diff_dispreason := le.dispreason <> ri.dispreason;
    SELF.Diff_statusdate := le.statusdate <> ri.statusdate;
    SELF.Diff_holdcase := le.holdcase <> ri.holdcase;
    SELF.Diff_datevacated := le.datevacated <> ri.datevacated;
    SELF.Diff_datetransferred := le.datetransferred <> ri.datetransferred;
    SELF.Diff_activityreceipt := le.activityreceipt <> ri.activityreceipt;
    SELF.Diff_tax_id := le.tax_id <> ri.tax_id;
    SELF.Diff_name_type := le.name_type <> ri.name_type;
    SELF.Diff_orig_name := le.orig_name <> ri.orig_name;
    SELF.Diff_orig_fname := le.orig_fname <> ri.orig_fname;
    SELF.Diff_orig_mname := le.orig_mname <> ri.orig_mname;
    SELF.Diff_orig_lname := le.orig_lname <> ri.orig_lname;
    SELF.Diff_orig_name_suffix := le.orig_name_suffix <> ri.orig_name_suffix;
    SELF.Diff_title := le.title <> ri.title;
    SELF.Diff_fname := le.fname <> ri.fname;
    SELF.Diff_mname := le.mname <> ri.mname;
    SELF.Diff_lname := le.lname <> ri.lname;
    SELF.Diff_name_suffix := le.name_suffix <> ri.name_suffix;
    SELF.Diff_name_score := le.name_score <> ri.name_score;
    SELF.Diff_cname := le.cname <> ri.cname;
    SELF.Diff_orig_company := le.orig_company <> ri.orig_company;
    SELF.Diff_orig_addr1 := le.orig_addr1 <> ri.orig_addr1;
    SELF.Diff_orig_addr2 := le.orig_addr2 <> ri.orig_addr2;
    SELF.Diff_orig_city := le.orig_city <> ri.orig_city;
    SELF.Diff_orig_st := le.orig_st <> ri.orig_st;
    SELF.Diff_orig_zip5 := le.orig_zip5 <> ri.orig_zip5;
    SELF.Diff_orig_zip4 := le.orig_zip4 <> ri.orig_zip4;
    SELF.Diff_orig_email := le.orig_email <> ri.orig_email;
    SELF.Diff_orig_fax := le.orig_fax <> ri.orig_fax;
    SELF.Diff_prim_range := le.prim_range <> ri.prim_range;
    SELF.Diff_predir := le.predir <> ri.predir;
    SELF.Diff_prim_name := le.prim_name <> ri.prim_name;
    SELF.Diff_addr_suffix := le.addr_suffix <> ri.addr_suffix;
    SELF.Diff_postdir := le.postdir <> ri.postdir;
    SELF.Diff_unit_desig := le.unit_desig <> ri.unit_desig;
    SELF.Diff_sec_range := le.sec_range <> ri.sec_range;
    SELF.Diff_p_city_name := le.p_city_name <> ri.p_city_name;
    SELF.Diff_v_city_name := le.v_city_name <> ri.v_city_name;
    SELF.Diff_st := le.st <> ri.st;
    SELF.Diff_zip := le.zip <> ri.zip;
    SELF.Diff_zip4 := le.zip4 <> ri.zip4;
    SELF.Diff_cart := le.cart <> ri.cart;
    SELF.Diff_cr_sort_sz := le.cr_sort_sz <> ri.cr_sort_sz;
    SELF.Diff_lot := le.lot <> ri.lot;
    SELF.Diff_lot_order := le.lot_order <> ri.lot_order;
    SELF.Diff_dbpc := le.dbpc <> ri.dbpc;
    SELF.Diff_chk_digit := le.chk_digit <> ri.chk_digit;
    SELF.Diff_rec_type := le.rec_type <> ri.rec_type;
    SELF.Diff_county := le.county <> ri.county;
    SELF.Diff_geo_lat := le.geo_lat <> ri.geo_lat;
    SELF.Diff_geo_long := le.geo_long <> ri.geo_long;
    SELF.Diff_msa := le.msa <> ri.msa;
    SELF.Diff_geo_blk := le.geo_blk <> ri.geo_blk;
    SELF.Diff_geo_match := le.geo_match <> ri.geo_match;
    SELF.Diff_err_stat := le.err_stat <> ri.err_stat;
    SELF.Diff_phone := le.phone <> ri.phone;
    SELF.Diff_did := le.did <> ri.did;
    SELF.Diff_bdid := le.bdid <> ri.bdid;
    SELF.Diff_app_ssn := le.app_ssn <> ri.app_ssn;
    SELF.Diff_app_tax_id := le.app_tax_id <> ri.app_tax_id;
    SELF.Diff_date_first_seen := le.date_first_seen <> ri.date_first_seen;
    SELF.Diff_date_last_seen := le.date_last_seen <> ri.date_last_seen;
    SELF.Diff_date_vendor_first_reported := le.date_vendor_first_reported <> ri.date_vendor_first_reported;
    SELF.Diff_date_vendor_last_reported := le.date_vendor_last_reported <> ri.date_vendor_last_reported;
    SELF.Diff_disptypedesc := le.disptypedesc <> ri.disptypedesc;
    SELF.Diff_srcdesc := le.srcdesc <> ri.srcdesc;
    SELF.Diff_srcmtchdesc := le.srcmtchdesc <> ri.srcmtchdesc;
    SELF.Diff_screendesc := le.screendesc <> ri.screendesc;
    SELF.Diff_dcodedesc := le.dcodedesc <> ri.dcodedesc;
    SELF.Diff_date_filed := le.date_filed <> ri.date_filed;
    SELF.Diff_record_type := le.record_type <> ri.record_type;
    SELF.Diff_delete_flag := le.delete_flag <> ri.delete_flag;
    SELF.Diff_dotid := le.dotid <> ri.dotid;
    SELF.Diff_dotscore := le.dotscore <> ri.dotscore;
    SELF.Diff_dotweight := le.dotweight <> ri.dotweight;
    SELF.Diff_empid := le.empid <> ri.empid;
    SELF.Diff_empscore := le.empscore <> ri.empscore;
    SELF.Diff_empweight := le.empweight <> ri.empweight;
    SELF.Diff_powid := le.powid <> ri.powid;
    SELF.Diff_powscore := le.powscore <> ri.powscore;
    SELF.Diff_powweight := le.powweight <> ri.powweight;
    SELF.Diff_proxid := le.proxid <> ri.proxid;
    SELF.Diff_proxscore := le.proxscore <> ri.proxscore;
    SELF.Diff_proxweight := le.proxweight <> ri.proxweight;
    SELF.Diff_seleid := le.seleid <> ri.seleid;
    SELF.Diff_selescore := le.selescore <> ri.selescore;
    SELF.Diff_seleweight := le.seleweight <> ri.seleweight;
    SELF.Diff_orgid := le.orgid <> ri.orgid;
    SELF.Diff_orgscore := le.orgscore <> ri.orgscore;
    SELF.Diff_orgweight := le.orgweight <> ri.orgweight;
    SELF.Diff_ultid := le.ultid <> ri.ultid;
    SELF.Diff_ultscore := le.ultscore <> ri.ultscore;
    SELF.Diff_ultweight := le.ultweight <> ri.ultweight;
    SELF.Diff_source_rec_id := le.source_rec_id <> ri.source_rec_id;
    SELF.Val := (SALT33.StrType)evaluate(le,pivot_exp);
    SELF.SourceField := le.sourcecode;
    SELF.Num_Diffs := 0+ IF( SELF.Diff_process_date,1,0)+ IF( SELF.Diff_caseid,1,0)+ IF( SELF.Diff_defendantid,1,0)+ IF( SELF.Diff_recid,1,0)+ IF( SELF.Diff_tmsid,1,0)+ IF( SELF.Diff_seq_number,1,0)+ IF( SELF.Diff_court_code,1,0)+ IF( SELF.Diff_case_number,1,0)+ IF( SELF.Diff_orig_case_number,1,0)+ IF( SELF.Diff_chapter,1,0)+ IF( SELF.Diff_filing_type,1,0)+ IF( SELF.Diff_business_flag,1,0)+ IF( SELF.Diff_corp_flag,1,0)+ IF( SELF.Diff_discharged,1,0)+ IF( SELF.Diff_disposition,1,0)+ IF( SELF.Diff_pro_se_ind,1,0)+ IF( SELF.Diff_converted_date,1,0)+ IF( SELF.Diff_orig_county,1,0)+ IF( SELF.Diff_debtor_type,1,0)+ IF( SELF.Diff_debtor_seq,1,0)+ IF( SELF.Diff_ssn,1,0)+ IF( SELF.Diff_ssnsrc,1,0)+ IF( SELF.Diff_ssnmatch,1,0)+ IF( SELF.Diff_ssnmsrc,1,0)+ IF( SELF.Diff_screen,1,0)+ IF( SELF.Diff_dcode,1,0)+ IF( SELF.Diff_disptype,1,0)+ IF( SELF.Diff_dispreason,1,0)+ IF( SELF.Diff_statusdate,1,0)+ IF( SELF.Diff_holdcase,1,0)+ IF( SELF.Diff_datevacated,1,0)+ IF( SELF.Diff_datetransferred,1,0)+ IF( SELF.Diff_activityreceipt,1,0)+ IF( SELF.Diff_tax_id,1,0)+ IF( SELF.Diff_name_type,1,0)+ IF( SELF.Diff_orig_name,1,0)+ IF( SELF.Diff_orig_fname,1,0)+ IF( SELF.Diff_orig_mname,1,0)+ IF( SELF.Diff_orig_lname,1,0)+ IF( SELF.Diff_orig_name_suffix,1,0)+ IF( SELF.Diff_title,1,0)+ IF( SELF.Diff_fname,1,0)+ IF( SELF.Diff_mname,1,0)+ IF( SELF.Diff_lname,1,0)+ IF( SELF.Diff_name_suffix,1,0)+ IF( SELF.Diff_name_score,1,0)+ IF( SELF.Diff_cname,1,0)+ IF( SELF.Diff_orig_company,1,0)+ IF( SELF.Diff_orig_addr1,1,0)+ IF( SELF.Diff_orig_addr2,1,0)+ IF( SELF.Diff_orig_city,1,0)+ IF( SELF.Diff_orig_st,1,0)+ IF( SELF.Diff_orig_zip5,1,0)+ IF( SELF.Diff_orig_zip4,1,0)+ IF( SELF.Diff_orig_email,1,0)+ IF( SELF.Diff_orig_fax,1,0)+ IF( SELF.Diff_prim_range,1,0)+ IF( SELF.Diff_predir,1,0)+ IF( SELF.Diff_prim_name,1,0)+ IF( SELF.Diff_addr_suffix,1,0)+ IF( SELF.Diff_postdir,1,0)+ IF( SELF.Diff_unit_desig,1,0)+ IF( SELF.Diff_sec_range,1,0)+ IF( SELF.Diff_p_city_name,1,0)+ IF( SELF.Diff_v_city_name,1,0)+ IF( SELF.Diff_st,1,0)+ IF( SELF.Diff_zip,1,0)+ IF( SELF.Diff_zip4,1,0)+ IF( SELF.Diff_cart,1,0)+ IF( SELF.Diff_cr_sort_sz,1,0)+ IF( SELF.Diff_lot,1,0)+ IF( SELF.Diff_lot_order,1,0)+ IF( SELF.Diff_dbpc,1,0)+ IF( SELF.Diff_chk_digit,1,0)+ IF( SELF.Diff_rec_type,1,0)+ IF( SELF.Diff_county,1,0)+ IF( SELF.Diff_geo_lat,1,0)+ IF( SELF.Diff_geo_long,1,0)+ IF( SELF.Diff_msa,1,0)+ IF( SELF.Diff_geo_blk,1,0)+ IF( SELF.Diff_geo_match,1,0)+ IF( SELF.Diff_err_stat,1,0)+ IF( SELF.Diff_phone,1,0)+ IF( SELF.Diff_did,1,0)+ IF( SELF.Diff_bdid,1,0)+ IF( SELF.Diff_app_ssn,1,0)+ IF( SELF.Diff_app_tax_id,1,0)+ IF( SELF.Diff_date_first_seen,1,0)+ IF( SELF.Diff_date_last_seen,1,0)+ IF( SELF.Diff_date_vendor_first_reported,1,0)+ IF( SELF.Diff_date_vendor_last_reported,1,0)+ IF( SELF.Diff_disptypedesc,1,0)+ IF( SELF.Diff_srcdesc,1,0)+ IF( SELF.Diff_srcmtchdesc,1,0)+ IF( SELF.Diff_screendesc,1,0)+ IF( SELF.Diff_dcodedesc,1,0)+ IF( SELF.Diff_date_filed,1,0)+ IF( SELF.Diff_record_type,1,0)+ IF( SELF.Diff_delete_flag,1,0)+ IF( SELF.Diff_dotid,1,0)+ IF( SELF.Diff_dotscore,1,0)+ IF( SELF.Diff_dotweight,1,0)+ IF( SELF.Diff_empid,1,0)+ IF( SELF.Diff_empscore,1,0)+ IF( SELF.Diff_empweight,1,0)+ IF( SELF.Diff_powid,1,0)+ IF( SELF.Diff_powscore,1,0)+ IF( SELF.Diff_powweight,1,0)+ IF( SELF.Diff_proxid,1,0)+ IF( SELF.Diff_proxscore,1,0)+ IF( SELF.Diff_proxweight,1,0)+ IF( SELF.Diff_seleid,1,0)+ IF( SELF.Diff_selescore,1,0)+ IF( SELF.Diff_seleweight,1,0)+ IF( SELF.Diff_orgid,1,0)+ IF( SELF.Diff_orgscore,1,0)+ IF( SELF.Diff_orgweight,1,0)+ IF( SELF.Diff_ultid,1,0)+ IF( SELF.Diff_ultscore,1,0)+ IF( SELF.Diff_ultweight,1,0)+ IF( SELF.Diff_source_rec_id,1,0);
  END;
// Now need to remove bad pivots from comparison
#uniquename(L)
  %L% := JOIN(in_left,bad_pivots,evaluate(LEFT,pivot_exp)=right.val,transform(left),left only,lookup);
#uniquename(R)
  %R% := JOIN(in_right,bad_pivots,evaluate(LEFT,pivot_exp)=right.val,transform(left),left only,lookup);
#uniquename(DiffL)
  %DiffL% := JOIN(%L%,%R%,evaluate(left,pivot_exp)=evaluate(right,pivot_exp),%fd%(left,right),hash);
#uniquename(Closest)
  %Closest% := DEDUP(SORT(%DiffL%,Val,Num_Diffs,local),Val,local); // Join will have distributed by pivot_exp
#uniquename(AggRec)
  %AggRec% := RECORD
    Count_Diff_process_date := COUNT(GROUP,%Closest%.Diff_process_date);
    Count_Diff_caseid := COUNT(GROUP,%Closest%.Diff_caseid);
    Count_Diff_defendantid := COUNT(GROUP,%Closest%.Diff_defendantid);
    Count_Diff_recid := COUNT(GROUP,%Closest%.Diff_recid);
    Count_Diff_tmsid := COUNT(GROUP,%Closest%.Diff_tmsid);
    Count_Diff_seq_number := COUNT(GROUP,%Closest%.Diff_seq_number);
    Count_Diff_court_code := COUNT(GROUP,%Closest%.Diff_court_code);
    Count_Diff_case_number := COUNT(GROUP,%Closest%.Diff_case_number);
    Count_Diff_orig_case_number := COUNT(GROUP,%Closest%.Diff_orig_case_number);
    Count_Diff_chapter := COUNT(GROUP,%Closest%.Diff_chapter);
    Count_Diff_filing_type := COUNT(GROUP,%Closest%.Diff_filing_type);
    Count_Diff_business_flag := COUNT(GROUP,%Closest%.Diff_business_flag);
    Count_Diff_corp_flag := COUNT(GROUP,%Closest%.Diff_corp_flag);
    Count_Diff_discharged := COUNT(GROUP,%Closest%.Diff_discharged);
    Count_Diff_disposition := COUNT(GROUP,%Closest%.Diff_disposition);
    Count_Diff_pro_se_ind := COUNT(GROUP,%Closest%.Diff_pro_se_ind);
    Count_Diff_converted_date := COUNT(GROUP,%Closest%.Diff_converted_date);
    Count_Diff_orig_county := COUNT(GROUP,%Closest%.Diff_orig_county);
    Count_Diff_debtor_type := COUNT(GROUP,%Closest%.Diff_debtor_type);
    Count_Diff_debtor_seq := COUNT(GROUP,%Closest%.Diff_debtor_seq);
    Count_Diff_ssn := COUNT(GROUP,%Closest%.Diff_ssn);
    Count_Diff_ssnsrc := COUNT(GROUP,%Closest%.Diff_ssnsrc);
    Count_Diff_ssnmatch := COUNT(GROUP,%Closest%.Diff_ssnmatch);
    Count_Diff_ssnmsrc := COUNT(GROUP,%Closest%.Diff_ssnmsrc);
    Count_Diff_screen := COUNT(GROUP,%Closest%.Diff_screen);
    Count_Diff_dcode := COUNT(GROUP,%Closest%.Diff_dcode);
    Count_Diff_disptype := COUNT(GROUP,%Closest%.Diff_disptype);
    Count_Diff_dispreason := COUNT(GROUP,%Closest%.Diff_dispreason);
    Count_Diff_statusdate := COUNT(GROUP,%Closest%.Diff_statusdate);
    Count_Diff_holdcase := COUNT(GROUP,%Closest%.Diff_holdcase);
    Count_Diff_datevacated := COUNT(GROUP,%Closest%.Diff_datevacated);
    Count_Diff_datetransferred := COUNT(GROUP,%Closest%.Diff_datetransferred);
    Count_Diff_activityreceipt := COUNT(GROUP,%Closest%.Diff_activityreceipt);
    Count_Diff_tax_id := COUNT(GROUP,%Closest%.Diff_tax_id);
    Count_Diff_name_type := COUNT(GROUP,%Closest%.Diff_name_type);
    Count_Diff_orig_name := COUNT(GROUP,%Closest%.Diff_orig_name);
    Count_Diff_orig_fname := COUNT(GROUP,%Closest%.Diff_orig_fname);
    Count_Diff_orig_mname := COUNT(GROUP,%Closest%.Diff_orig_mname);
    Count_Diff_orig_lname := COUNT(GROUP,%Closest%.Diff_orig_lname);
    Count_Diff_orig_name_suffix := COUNT(GROUP,%Closest%.Diff_orig_name_suffix);
    Count_Diff_title := COUNT(GROUP,%Closest%.Diff_title);
    Count_Diff_fname := COUNT(GROUP,%Closest%.Diff_fname);
    Count_Diff_mname := COUNT(GROUP,%Closest%.Diff_mname);
    Count_Diff_lname := COUNT(GROUP,%Closest%.Diff_lname);
    Count_Diff_name_suffix := COUNT(GROUP,%Closest%.Diff_name_suffix);
    Count_Diff_name_score := COUNT(GROUP,%Closest%.Diff_name_score);
    Count_Diff_cname := COUNT(GROUP,%Closest%.Diff_cname);
    Count_Diff_orig_company := COUNT(GROUP,%Closest%.Diff_orig_company);
    Count_Diff_orig_addr1 := COUNT(GROUP,%Closest%.Diff_orig_addr1);
    Count_Diff_orig_addr2 := COUNT(GROUP,%Closest%.Diff_orig_addr2);
    Count_Diff_orig_city := COUNT(GROUP,%Closest%.Diff_orig_city);
    Count_Diff_orig_st := COUNT(GROUP,%Closest%.Diff_orig_st);
    Count_Diff_orig_zip5 := COUNT(GROUP,%Closest%.Diff_orig_zip5);
    Count_Diff_orig_zip4 := COUNT(GROUP,%Closest%.Diff_orig_zip4);
    Count_Diff_orig_email := COUNT(GROUP,%Closest%.Diff_orig_email);
    Count_Diff_orig_fax := COUNT(GROUP,%Closest%.Diff_orig_fax);
    Count_Diff_prim_range := COUNT(GROUP,%Closest%.Diff_prim_range);
    Count_Diff_predir := COUNT(GROUP,%Closest%.Diff_predir);
    Count_Diff_prim_name := COUNT(GROUP,%Closest%.Diff_prim_name);
    Count_Diff_addr_suffix := COUNT(GROUP,%Closest%.Diff_addr_suffix);
    Count_Diff_postdir := COUNT(GROUP,%Closest%.Diff_postdir);
    Count_Diff_unit_desig := COUNT(GROUP,%Closest%.Diff_unit_desig);
    Count_Diff_sec_range := COUNT(GROUP,%Closest%.Diff_sec_range);
    Count_Diff_p_city_name := COUNT(GROUP,%Closest%.Diff_p_city_name);
    Count_Diff_v_city_name := COUNT(GROUP,%Closest%.Diff_v_city_name);
    Count_Diff_st := COUNT(GROUP,%Closest%.Diff_st);
    Count_Diff_zip := COUNT(GROUP,%Closest%.Diff_zip);
    Count_Diff_zip4 := COUNT(GROUP,%Closest%.Diff_zip4);
    Count_Diff_cart := COUNT(GROUP,%Closest%.Diff_cart);
    Count_Diff_cr_sort_sz := COUNT(GROUP,%Closest%.Diff_cr_sort_sz);
    Count_Diff_lot := COUNT(GROUP,%Closest%.Diff_lot);
    Count_Diff_lot_order := COUNT(GROUP,%Closest%.Diff_lot_order);
    Count_Diff_dbpc := COUNT(GROUP,%Closest%.Diff_dbpc);
    Count_Diff_chk_digit := COUNT(GROUP,%Closest%.Diff_chk_digit);
    Count_Diff_rec_type := COUNT(GROUP,%Closest%.Diff_rec_type);
    Count_Diff_county := COUNT(GROUP,%Closest%.Diff_county);
    Count_Diff_geo_lat := COUNT(GROUP,%Closest%.Diff_geo_lat);
    Count_Diff_geo_long := COUNT(GROUP,%Closest%.Diff_geo_long);
    Count_Diff_msa := COUNT(GROUP,%Closest%.Diff_msa);
    Count_Diff_geo_blk := COUNT(GROUP,%Closest%.Diff_geo_blk);
    Count_Diff_geo_match := COUNT(GROUP,%Closest%.Diff_geo_match);
    Count_Diff_err_stat := COUNT(GROUP,%Closest%.Diff_err_stat);
    Count_Diff_phone := COUNT(GROUP,%Closest%.Diff_phone);
    Count_Diff_did := COUNT(GROUP,%Closest%.Diff_did);
    Count_Diff_bdid := COUNT(GROUP,%Closest%.Diff_bdid);
    Count_Diff_app_ssn := COUNT(GROUP,%Closest%.Diff_app_ssn);
    Count_Diff_app_tax_id := COUNT(GROUP,%Closest%.Diff_app_tax_id);
    Count_Diff_date_first_seen := COUNT(GROUP,%Closest%.Diff_date_first_seen);
    Count_Diff_date_last_seen := COUNT(GROUP,%Closest%.Diff_date_last_seen);
    Count_Diff_date_vendor_first_reported := COUNT(GROUP,%Closest%.Diff_date_vendor_first_reported);
    Count_Diff_date_vendor_last_reported := COUNT(GROUP,%Closest%.Diff_date_vendor_last_reported);
    Count_Diff_disptypedesc := COUNT(GROUP,%Closest%.Diff_disptypedesc);
    Count_Diff_srcdesc := COUNT(GROUP,%Closest%.Diff_srcdesc);
    Count_Diff_srcmtchdesc := COUNT(GROUP,%Closest%.Diff_srcmtchdesc);
    Count_Diff_screendesc := COUNT(GROUP,%Closest%.Diff_screendesc);
    Count_Diff_dcodedesc := COUNT(GROUP,%Closest%.Diff_dcodedesc);
    Count_Diff_date_filed := COUNT(GROUP,%Closest%.Diff_date_filed);
    Count_Diff_record_type := COUNT(GROUP,%Closest%.Diff_record_type);
    Count_Diff_delete_flag := COUNT(GROUP,%Closest%.Diff_delete_flag);
    Count_Diff_dotid := COUNT(GROUP,%Closest%.Diff_dotid);
    Count_Diff_dotscore := COUNT(GROUP,%Closest%.Diff_dotscore);
    Count_Diff_dotweight := COUNT(GROUP,%Closest%.Diff_dotweight);
    Count_Diff_empid := COUNT(GROUP,%Closest%.Diff_empid);
    Count_Diff_empscore := COUNT(GROUP,%Closest%.Diff_empscore);
    Count_Diff_empweight := COUNT(GROUP,%Closest%.Diff_empweight);
    Count_Diff_powid := COUNT(GROUP,%Closest%.Diff_powid);
    Count_Diff_powscore := COUNT(GROUP,%Closest%.Diff_powscore);
    Count_Diff_powweight := COUNT(GROUP,%Closest%.Diff_powweight);
    Count_Diff_proxid := COUNT(GROUP,%Closest%.Diff_proxid);
    Count_Diff_proxscore := COUNT(GROUP,%Closest%.Diff_proxscore);
    Count_Diff_proxweight := COUNT(GROUP,%Closest%.Diff_proxweight);
    Count_Diff_seleid := COUNT(GROUP,%Closest%.Diff_seleid);
    Count_Diff_selescore := COUNT(GROUP,%Closest%.Diff_selescore);
    Count_Diff_seleweight := COUNT(GROUP,%Closest%.Diff_seleweight);
    Count_Diff_orgid := COUNT(GROUP,%Closest%.Diff_orgid);
    Count_Diff_orgscore := COUNT(GROUP,%Closest%.Diff_orgscore);
    Count_Diff_orgweight := COUNT(GROUP,%Closest%.Diff_orgweight);
    Count_Diff_ultid := COUNT(GROUP,%Closest%.Diff_ultid);
    Count_Diff_ultscore := COUNT(GROUP,%Closest%.Diff_ultscore);
    Count_Diff_ultweight := COUNT(GROUP,%Closest%.Diff_ultweight);
    Count_Diff_source_rec_id := COUNT(GROUP,%Closest%.Diff_source_rec_id);
    %Closest%.SourceField;
  END;
  out_counts := table(%Closest%,%AggRec%,SourceField,few);
ENDMACRO;
END;
