Generated by SALT V2.4 Gold
File being processed :-
MODULE:BIPV2_Best
FILENAME:Base
// Uncomment up to NINES for internal or external adl
IDFIELD:EXISTS:Proxid
RIDFIELD:rcid
RECORDS:5704681
POPULATION:5704681
NINES:3
// FIELDTYPE statements can be used to clean up (or check the cleaning) of individual fields
FIELDTYPE:wordbag:CAPS:ALLOW(ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'):SPACES( <>{}[]-^=!+&,./):ONFAIL(CLEAN)
FIELDTYPE:alpha:CAPS:ALLOW(ABCDEFGHIJKLMNOPQRSTUVWXYZ)
FIELDTYPE:number:ALLOW(0123456789)
FIELDTYPE:upper:CAPS:ONFAIL(CLEAN)
FIELDTYPE:cname:CAPS:ALLOW(ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'):SPACES( <>{}[]-^=!+&,./):ONFAIL(CLEAN)
FIELD:dt_first_seen:RECORDDATE(FIRST):0,0
FIELD:dt_last_seen:RECORDDATE(LAST):0,0
FIELD:source:CARRY
SOURCEFIELD:source:PERMITS(fn_sources,20)
//BESTTYPE statements declare methods of generating the best value for a given cluster
//Company Name
BESTTYPE:BestCompanyNameVoted:BASIS(Proxid):VOTED(fn_Best_Name_Source_Votes,1):VALID(fn_valid_cname):EXTEND
BESTTYPE:BestCompanyNameCommon:BASIS(Proxid):COMMONEST:FUZZY:MINIMUM(2):VALID(fn_valid_cname):EXTEND
BESTTYPE:BestCompanyNameCurrent:BASIS(Proxid):RECENT(dt_last_seen):FUZZY:MINIMUM(2):VALID(fn_valid_cname):EXTEND
BESTTYPE:BestCompanyNameLength:BASIS(Proxid):LONGEST:FUZZY:VALID(fn_valid_cname):EXTEND
//Address 
BESTTYPE:BestCompanyAddressVoted:BASIS(Proxid):VOTED(fn_Best_Address_Source_Votes,1):VALID(fn_valid_caddress):EXTEND
BESTTYPE:BestCompanyAddressCurrent:BASIS(Proxid):RECENT(dt_last_seen):FUZZY:MINIMUM(2):VALID(fn_valid_caddress):EXTEND
BESTTYPE:BestCompanyAddressCommon:BASIS(Proxid):COMMONEST:FUZZY:MINIMUM(2):VALID(fn_valid_caddress):EXTEND
BESTTYPE:BestCompanyAddressLength:BASIS(Proxid):LONGEST:FUZZY:VALID(fn_valid_caddress):EXTEND
BESTTYPE:BestCompanyAddressStrong:BASIS(Proxid):UNIQUE:FUZZY:VALID(fn_valid_caddress):EXTEND
//Phone
BESTTYPE:BestPhoneCurrent:BASIS(Proxid):RECENT(dt_last_seen):FUZZY:MINIMUM(2):VALID(fn_valid_cphone):EXTEND
BESTTYPE:BestPhoneStrong:BASIS(Proxid):UNIQUE:FUZZY:VALID(fn_valid_cphone):EXTEND
//TIN
BESTTYPE:BestFeinStrong:BASIS(Proxid):UNIQUE:FUZZY:VALID(fn_valid_cfein):EXTEND
BESTTYPE:BestFeinCommon:BASIS(Proxid):COMMONEST:FUZZY:MINIMUM(2):VALID(fn_valid_cfein):EXTEND
BESTTYPE:BestFeinCurrent:BASIS(Proxid):RECENT(dt_last_seen):FUZZY:MINIMUM(2):VALID(fn_valid_cfein):EXTEND
//BESTTYPE:BestFeinVoted:BASIS(Proxid):VOTED(BestFeinVotes,2):FUZZY:VALID(fn_valid_cfein):PROP
//URL
BESTTYPE:BestUrlCurrent:BASIS(Proxid):RECENT(dt_last_seen):FUZZY:MINIMUM(2):VALID(fn_valid_curl):EXTEND
BESTTYPE:BestUrlCommon:BASIS(Proxid):COMMONEST:FUZZY:MINIMUM(2):VALID(fn_valid_curl):EXTEND
//BESTTYPE:BestUrlLength:BASIS(Proxid):LONGEST:FUZZY:VALID(fn_valid_curl):EXTEND
// FUZZY can be used to create new types of FUZZY linking
FUZZY:Right4:RST:CUSTOM(fn_Right4):TYPE(STRING4)
FUZZY:PreferredName:RST:CUSTOM(fn_PreferredName):TYPE(STRING20)
// ------------------------------------
//  1. Company
// ------------------------------------
FIELD:company_name:LIKE(cname):EDIT1:PHONETIC:BestCompanyNameCommon:BestCompanyNameCurrent:BestCompanyNameLength:FLAG:19,137
FIELD:company_fein:LIKE(number):right4:EDIT1:BestFeinStrong:BestFeinCommon:FLAG:OWNED:27,20
FIELD:company_phone:LIKE(number):EDIT1:BestPhoneCurrent:BestPhoneStrong:FLAG:19,207
FIELD:company_url:LIKE(wordbag):BestUrlCommon:EDIT1:FLAG:27,2
// ------------------------------------
//  2. Address
// ------------------------------------
FIELD:company_prim_range:11,13
FIELD:company_predir:4,3
FIELD:company_prim_name:12,12
FIELD:company_addr_suffix:3,2
FIELD:company_postdir:6,4
FIELD:company_unit_desig:4,4
FIELD:company_sec_range:FORCE(--):11,7435
FIELD:company_p_city_name:10,411 
FIELD:company_v_city_name:1,1
FIELD:company_st:LIKE(alpha):4,0
FIELD:company_zip5:LIKE(number):5,0
FIELD:company_zip4:LIKE(number):12,15
//FIELD:Company_RAWAID:17,492
//FIELD:Company_ACEAID:16,129
CONCEPT:company_csz:company_v_city_name:company_st:company_zip5:company_zip4:18,50
CONCEPT:company_addr1:company_prim_range:company_predir:company_prim_name:company_addr_suffix:company_postdir:company_unit_desig:company_sec_range:18,59
CONCEPT:company_address:company_addr1:company_csz:BestCompanyAddressCurrent:FLAG:18,59
//CONCEPT:company_address:company_prim_range:company_predir:company_prim_name:company_addr_suffix:company_postdir:company_unit_desig:company_sec_range:compan//y_v_city_name:company_st:company_zip5:company_zip4:BestCompanyAddressCurrent:FLAG:18,59
// BESTTYPE statements declare methods of generating the best value for a given cluster; this can also improve linking
// CONCEPT statements should be used to group together interellated fields; such as address
// RELATIONSHIP is used to find non-obvious relationships between the clusters
// SOURCEFIELD is used if a field of the file denotes a source of the records in that file
// LINKPATH is used to define access paths for external linking
// DotID
// a contact name (or the absence of a contact) at a company name at a physical address.  Separate legal entities within an office will consist of //separate //Dots.
// ProxID
// 1.	A legal entity at a physical address. (fuzzy matching to account for typos and different representations of same name)
// 2.	has no more than 1 active charter for a given state (fuzzy matching to account for typos).  Now this should allow for charters from different states
//	  to be ok, but not two charters in the same state.
// 3.	has no more than 1 active Duns or LNCA lowest level ID.
// 4.	Has no more than 1 status (active vs defunct).
// 5.	Has no more than 1 legal name.
// 6.	FEIN is sometimes useful for pulling records together, but won't be pushed to push records apart.
// 7.	Unincorporated businesses will need more than just company name & address to bring them together into a Prox.  Address + contact is enough.
// Beyond ProxID
// 1.	LNCA hierarchy
// 2.	Duns hierarchy
// Business Relatives (outside of hierarchy - linkable from a report)
// TBD, but essentially any other connection we come across in this process but do not feel is strong enough for ProxID linking.
Total available specificity:229
Specificity number that should imply one record specified 22.
Assuming an average of 1 records per cluster
Specificity value at which N^2 joins will be tolerated: 16
Recommended matching threshold 32
Search Threshold set at 11
Use of PERSISTs in code set at:3
______________________________English Description of Matching Process___________________________
A SALT generated matching process really only contains one single matching rule.
SALT compares every record to every possible matching record and then allocates a score to how well
the records match. SALT then pairs those clusters which have the highest match scores provided the scores
meet or exceed the matching threshold. The scoring process is highly sophisticated and detailed below
however it can essentially be thought of as allocating points for every pair of fields that match
and subtracting points for every pair of fields that do not match.
This process was told to produce 3 nines of accuracy on a population of 5704681 with 5704681 records.
The matching threshold is therefore set at 32.
___Field by Field Breakdown of Scoring Method___
dt_first_seen Scoring: Date fields are not presently used for scoring but are carried along for debugging purposes
dt_last_seen Scoring: Date fields are not presently used for scoring but are carried along for debugging purposes
source Scoring: This field is not used for scoring; rather it is carried along for context and debugging
company_name Scoring: 
Prior to matching the following rules are applied in a cascade in an attempt to fix or complete field values.
 1. Gather together all records that match on (Proxid,source,data_permits) removing any which are invalid according to fn_valid_cname.
 The number of each field value are then counted, field values with a smaller count are used to re-enforce higher count fields that they fuzzy-match to.
 The best is then defined to be the one which is the most commonly occurring field value and which has at least 2 records with that field value.
 If the value generated is non-null and the value currently in the field is a shorter form of it then the value currently in the field will be replaced.
 2. Gather together all records that match on (Proxid,source,data_permits) removing any which are invalid according to fn_valid_cname.
 The number of each field value are then counted, field values with a smaller count are used to re-enforce higher count fields that they fuzzy-match to.
 The best is then defined to be the one which has the most recent date recorded in:dt_last_seen and which has at least 2 records with that field value.
 If the value generated is non-null and the value currently in the field is a shorter form of it then the value currently in the field will be replaced.
 3. Gather together all records that match on (Proxid,source,data_permits) removing any which are invalid according to fn_valid_cname.
 The number of each field value are then counted, field values with a smaller count are used to re-enforce higher count fields that they fuzzy-match to.
 The best is then defined to be the one which has the most complete (non-null) value of all the field values.
 If the value generated is non-null and the value currently in the field is a shorter form of it then the value currently in the field will be replaced.
Two company_name fields will be considered to match if:
  - they are identical
  - one can be turned into the other with 1 edit (see Glossary)
  - if the two fields have the same metaphone handle
The exact number of points allocated to a match will depend upon the global scarcity of the company_name
and the degree of fuzziness required but should average 19 points with a failed match substracting 16 points.
(This subtraction estimate is based upon 13% of clusters with 2 or more records have 2 or more values for company_name.)
company_fein Scoring: 
Prior to matching the following rules are applied in a cascade in an attempt to fix or complete field values.
 1. Gather together all records that match on (Proxid,source,data_permits) removing any which are invalid according to fn_valid_cfein.
 The number of each field value are then counted, field values with a smaller count are used to re-enforce higher count fields that they fuzzy-match to.
 The best is then defined to be the one which is unique or at least fuzzily-equal to every value gathered.
 If the value generated is non-null and the value currently in the field is a shorter form of it then the value currently in the field will be replaced.
 2. Gather together all records that match on (Proxid,source,data_permits) removing any which are invalid according to fn_valid_cfein.
 The number of each field value are then counted, field values with a smaller count are used to re-enforce higher count fields that they fuzzy-match to.
 The best is then defined to be the one which is the most commonly occurring field value and which has at least 2 records with that field value.
 If the value generated is non-null and the value currently in the field is a shorter form of it then the value currently in the field will be replaced.
Two company_fein fields will be considered to match if:
  - they are identical
  - one can be turned into the other with 1 edit (see Glossary)
  - if the two fields have the same value for the function Right4
The exact number of points allocated to a match will depend upon the global scarcity of the company_fein
and the degree of fuzziness required but should average 27 points with a failed match substracting 26 points.
(This subtraction estimate is based upon 2% of clusters with 2 or more records have 2 or more values for company_fein.)
company_phone Scoring: 
Prior to matching the following rules are applied in a cascade in an attempt to fix or complete field values.
 1. Gather together all records that match on (Proxid,source,data_permits) removing any which are invalid according to fn_valid_cphone.
 The number of each field value are then counted, field values with a smaller count are used to re-enforce higher count fields that they fuzzy-match to.
 The best is then defined to be the one which has the most recent date recorded in:dt_last_seen and which has at least 2 records with that field value.
 If the value generated is non-null and the value currently in the field is a shorter form of it then the value currently in the field will be replaced.
 2. Gather together all records that match on (Proxid,source,data_permits) removing any which are invalid according to fn_valid_cphone.
 The number of each field value are then counted, field values with a smaller count are used to re-enforce higher count fields that they fuzzy-match to.
 The best is then defined to be the one which is unique or at least fuzzily-equal to every value gathered.
 If the value generated is non-null and the value currently in the field is a shorter form of it then the value currently in the field will be replaced.
Two company_phone fields will be considered to match if:
  - they are identical
  - one can be turned into the other with 1 edit (see Glossary)
The exact number of points allocated to a match will depend upon the global scarcity of the company_phone
and the degree of fuzziness required but should average 19 points with a failed match substracting 15 points.
(This subtraction estimate is based upon 20% of clusters with 2 or more records have 2 or more values for company_phone.)
company_url Scoring: 
Prior to matching the following rules are applied in a cascade in an attempt to fix or complete field values.
 1. Gather together all records that match on (Proxid,source,data_permits) removing any which are invalid according to fn_valid_curl.
 The number of each field value are then counted, field values with a smaller count are used to re-enforce higher count fields that they fuzzy-match to.
 The best is then defined to be the one which is the most commonly occurring field value and which has at least 2 records with that field value.
 If the value generated is non-null and the value currently in the field is a shorter form of it then the value currently in the field will be replaced.
Two company_url fields will be considered to match if:
  - they are identical
  - one can be turned into the other with 1 edit (see Glossary)
The exact number of points allocated to a match will depend upon the global scarcity of the company_url
and the degree of fuzziness required but should average 27 points with a failed match substracting 26 points.
(This subtraction estimate is based upon 0% of clusters with 2 or more records have 2 or more values for company_url.)
company_prim_range Scoring: Two company_prim_range fields will be considered to match if:
  - they are identical
The exact number of points allocated to a match will depend upon the global scarcity of the company_prim_range
but should average 11 points with a failed match substracting 10 points.
(This subtraction estimate is based upon 1% of clusters with 2 or more records have 2 or more values for company_prim_range.)
It should also be noted that company_prim_range is a child field of company_addr1. Therefore if company_addr1 is a full match this field will score 0.
This field is scaled to match with its parent company_addr1, on average that will mean multiplying by 35%
company_predir Scoring: Two company_predir fields will be considered to match if:
  - they are identical
The exact number of points allocated to a match will depend upon the global scarcity of the company_predir
but should average 4 points with a failed match substracting 3 points.
(This subtraction estimate is based upon 0% of clusters with 2 or more records have 2 or more values for company_predir.)
It should also be noted that company_predir is a child field of company_addr1. Therefore if company_addr1 is a full match this field will score 0.
This field is scaled to match with its parent company_addr1, on average that will mean multiplying by 35%
company_prim_name Scoring: Two company_prim_name fields will be considered to match if:
  - they are identical
The exact number of points allocated to a match will depend upon the global scarcity of the company_prim_name
but should average 12 points with a failed match substracting 11 points.
(This subtraction estimate is based upon 1% of clusters with 2 or more records have 2 or more values for company_prim_name.)
It should also be noted that company_prim_name is a child field of company_addr1. Therefore if company_addr1 is a full match this field will score 0.
This field is scaled to match with its parent company_addr1, on average that will mean multiplying by 35%
company_addr_suffix Scoring: Two company_addr_suffix fields will be considered to match if:
  - they are identical
The exact number of points allocated to a match will depend upon the global scarcity of the company_addr_suffix
but should average 3 points with a failed match substracting 2 points.
(This subtraction estimate is based upon 0% of clusters with 2 or more records have 2 or more values for company_addr_suffix.)
It should also be noted that company_addr_suffix is a child field of company_addr1. Therefore if company_addr1 is a full match this field will score 0.
This field is scaled to match with its parent company_addr1, on average that will mean multiplying by 35%
company_postdir Scoring: Two company_postdir fields will be considered to match if:
  - they are identical
The exact number of points allocated to a match will depend upon the global scarcity of the company_postdir
but should average 6 points with a failed match substracting 5 points.
(This subtraction estimate is based upon 0% of clusters with 2 or more records have 2 or more values for company_postdir.)
It should also be noted that company_postdir is a child field of company_addr1. Therefore if company_addr1 is a full match this field will score 0.
This field is scaled to match with its parent company_addr1, on average that will mean multiplying by 35%
company_unit_desig Scoring: Two company_unit_desig fields will be considered to match if:
  - they are identical
The exact number of points allocated to a match will depend upon the global scarcity of the company_unit_desig
but should average 4 points with a failed match substracting 3 points.
(This subtraction estimate is based upon 0% of clusters with 2 or more records have 2 or more values for company_unit_desig.)
It should also be noted that company_unit_desig is a child field of company_addr1. Therefore if company_addr1 is a full match this field will score 0.
This field is scaled to match with its parent company_addr1, on average that will mean multiplying by 35%
company_sec_range Scoring: In order for two records to be a match it is also required that the company_sec_range fields not not match.
Two company_sec_range fields will be considered to match if:
  - they are identical
The exact number of points allocated to a match will depend upon the global scarcity of the company_sec_range
but should average 11 points with a failed match substracting 4294896 points.
(This subtraction estimate is based upon 743% of clusters with 2 or more records have 2 or more values for company_sec_range.)
It should also be noted that company_sec_range is a child field of company_addr1. Therefore if company_addr1 is a full match this field will score 0.
This field is scaled to match with its parent company_addr1, on average that will mean multiplying by 35%
(Although the score is still computed to satisfy the forcing condition.)
company_p_city_name Scoring: Two company_p_city_name fields will be considered to match if:
  - they are identical
The exact number of points allocated to a match will depend upon the global scarcity of the company_p_city_name
but should average 10 points with a failed match substracting 5 points.
(This subtraction estimate is based upon 41% of clusters with 2 or more records have 2 or more values for company_p_city_name.)
company_v_city_name Scoring: Two company_v_city_name fields will be considered to match if:
  - they are identical
The exact number of points allocated to a match will depend upon the global scarcity of the company_v_city_name
but should average 1 points with a failed match substracting 0 points.
(This subtraction estimate is based upon 0% of clusters with 2 or more records have 2 or more values for company_v_city_name.)
It should also be noted that company_v_city_name is a child field of company_csz. Therefore if company_csz is a full match this field will score 0.
This field is scaled to match with its parent company_csz, on average that will mean multiplying by 81%
company_st Scoring: Two company_st fields will be considered to match if:
  - they are identical
The exact number of points allocated to a match will depend upon the global scarcity of the company_st
but should average 4 points with a failed match substracting 4 points.
(This subtraction estimate is based upon 0% of clusters with 2 or more records have 2 or more values for company_st.)
It should also be noted that company_st is a child field of company_csz. Therefore if company_csz is a full match this field will score 0.
This field is scaled to match with its parent company_csz, on average that will mean multiplying by 81%
company_zip5 Scoring: Two company_zip5 fields will be considered to match if:
  - they are identical
The exact number of points allocated to a match will depend upon the global scarcity of the company_zip5
but should average 5 points with a failed match substracting 5 points.
(This subtraction estimate is based upon 0% of clusters with 2 or more records have 2 or more values for company_zip5.)
It should also be noted that company_zip5 is a child field of company_csz. Therefore if company_csz is a full match this field will score 0.
This field is scaled to match with its parent company_csz, on average that will mean multiplying by 81%
company_zip4 Scoring: Two company_zip4 fields will be considered to match if:
  - they are identical
The exact number of points allocated to a match will depend upon the global scarcity of the company_zip4
but should average 12 points with a failed match substracting 11 points.
(This subtraction estimate is based upon 1% of clusters with 2 or more records have 2 or more values for company_zip4.)
It should also be noted that company_zip4 is a child field of company_csz. Therefore if company_csz is a full match this field will score 0.
This field is scaled to match with its parent company_csz, on average that will mean multiplying by 81%
company_csz Scoring: Two company_csz fields will be considered to match if:
  - they are identical
Note: company_csz is an amalgam of (company_v_city_name,company_st,company_zip5,company_zip4)
Points will only be allocated for a match, the amount depending upon the scarcity of company_csz
but should average 18 points.
In the event of a non-match this field will score 0 (and the child fields will be allowed to score).
It should also be noted that company_csz is a child field of company_address. Therefore if company_address is a full match this field will score 0.
This field is scaled to match with its parent company_address, on average that will mean multiplying by 50%
company_addr1 Scoring: Two company_addr1 fields will be considered to match if:
  - they are identical
Note: company_addr1 is an amalgam of (company_prim_range,company_predir,company_prim_name,company_addr_suffix,company_postdir,company_unit_desig,company_sec_range)
Points will only be allocated for a match, the amount depending upon the scarcity of company_addr1
but should average 18 points.
In the event of a non-match this field will score 0 (and the child fields will be allowed to score).
It should also be noted that company_addr1 is a child field of company_address. Therefore if company_address is a full match this field will score 0.
This field is scaled to match with its parent company_address, on average that will mean multiplying by 50%
company_address Scoring: 
Prior to matching the following rules are applied in a cascade in an attempt to fix or complete field values.
 1. Gather together all records that match on (Proxid,source,data_permits) removing any which are invalid according to fn_valid_caddress.
 The number of each field value are then counted, field values with a smaller count are used to re-enforce higher count fields that they fuzzy-match to.
 The best is then defined to be the one which has the most recent date recorded in:dt_last_seen and which has at least 2 records with that field value.
 If the value generated is non-null and the value currently in the field is a shorter form of it then the value currently in the field will be replaced.
Two company_address fields will be considered to match if:
  - they are identical
Note: company_address is an amalgam of (company_addr1,company_csz)
Points will only be allocated for a match, the amount depending upon the scarcity of company_address
but should average 18 points.
In the event of a non-match this field will score 0 (and the child fields will be allowed to score).
__Glossary__
Edit Distance: An edit distance of (say) one implies that one string can be converted into another by doing one of
  - Changing one character
  - Deleting one character
  - Transposing two characters
Forcing Criteria: In addition to the general 'best match' logic it is possible to insist that
one particular field must match to some degree or the whole record is considered a bad match.
The criterial applied to that one field is the forcing criteria.
Cascade: Best Type rules are applied in such a way that the rules are applied one by one UNTIL the first rule succeeds; subsequent rules are then skipped.
__General Notes__
How is it decided how much to subtract for a bad match?
SALT computes for each field the percentage likelihood that a valid cluster will have two or more values for a given field
this value (called the switch value in the SALT literature) is then used to produce the subtraction value from the match value.
The value in this document is the one typed into the SPC file; the code will use a value computed at run-time.
