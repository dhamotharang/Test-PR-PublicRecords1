ID "z423f4ce-c432-4f41-2442-29cd2224443f";
NAME AppendProviderAttributes;
LABEL "Provider Shell Attribute Append";
CATEGORY APPEND;
VERSION "2.1";
AUTHOR "periassx";
DESCRIPTION "Append Provider Shell Attributes using LNPID";

PERMISSIONS
 VIEW:PUBLIC;
 EDIT:PRIVATE;
 RUN:PUBLIC;
END
 
INPUTS
    STRING Prefix:LABEL("Append Column Prefix"),DEFAULT("ProviderAttr");
    DATASET dsInput:MAPBYNAME
		FIELD LNPID:LABEL("Provider ID"),DESCRIPTION("Lexis Nexis Professional ID");
		FIELD ProviderState:LABEL("Provider State"),DESCRIPTION("Provider State");
    END
    STRING GCID:LABEL("GLOBAL COMPANY ID"),DEFAULT("^GLOBAL|GCID");
    STRING JOBID:LABEL("Job ID"),DEFAULT("^GLOBAL|JOBID");
    STRING FCRA:LABEL("FCRA"),DEFAULT("^GLOBAL|FCRA");
    STRING DPPAPURPOSE:LABEL("DPPA Purpose"),DEFAULT("^GLOBAL|DPPAPURPOSE");
    STRING GLBPURPOSE:LABEL("GLB Purpose"),DEFAULT("^GLOBAL|GLBPURPOSE");
    STRING DATAPERMISSIONMASK:LABEL("Data Permission Mask"),DEFAULT("^GLOBAL|DATAPERMISSIONMASK");
    STRING DATARESTRICTIONMASK:LABEL("Data Restriction Mask"),DEFAULT("^GLOBAL|DATARESTRICTIONMASK");
    STRING SSNMASK:LABEL("SSN Mask"),DEFAULT("^GLOBAL|SSNMASK");
    STRING INDUSTRYCLASS:LABEL("Industry Class"),DEFAULT("^GLOBAL|INDUSTRYCLASS");
    STRING DLMASK:LABEL("Driver's License Mask"),DEFAULT("^GLOBAL|DLMASK");
    STRING DOBMASK:LABEL("Date of Birth Mask"),DEFAULT("^GLOBAL|DOBMASK");
END

OUTPUTS
    DATASET dsOutput(dsInput):PREFIX(INPUTS.Prefix), APPEND
			UNSIGNED8 LexID;
			STRING1	  EntityType;
			STRING20  FNAME;
			STRING20  MNAME;
			STRING28  LNAME; 
			STRING5	  SNAME;
			STRING9	  SSN;
			STRING9	  ConsumerSSN;
			UNSIGNED4 DateOfBirth;
			UNSIGNED4 ConsumerDateOfBirth;
			STRING25  LicenseNumber;
			STRING25  CleanedLicenseNumber;
			STRING2	  LicenseState;
			STRING60  LicenseType;
			STRING60  LicenseStatus;
			UNSIGNED4 DateLicenseExpired; 
			UNSIGNED4 LicenseCount;
			UNSIGNED4 LicenseStateCount;
			UNSIGNED4 ActiveLicenseCount;
			UNSIGNED4 InactiveLicenseCount;
			UNSIGNED4 RevokedLicenseCount;
			STRING2	  InactiveLicenseState;	
			STRING2	  RevokedLicenseState;	
			STRING1	  InactiveLicenseFlag;	
			STRING1	  RevokedLicenseFlag;	
			STRING1	  ExpiredLicenseFlag;	
			STRING1	  DeathIndicator;
			UNSIGNED4 DateOfDeath;
			UNSIGNED4 BillingTaxID;
			STRING10  Phone;
			STRING10  Fax;
			STRING6	  UPIN;
			STRING10  NPINUMBER;
			STRING8   NPIEnumerationDate;
			STRING8   NPIDeactivationDate;
			STRING8   NPIReactivationDate;
			STRING1	  NPIFlag;
			UNSIGNED4 DeactivedNPICount;		
			STRING1	  DEABusinessActivityIndicator;		
			STRING10  DEANumber;
			UNSIGNED4 DateDEAExpired;
			UNSIGNED4 DEACount;
			UNSIGNED4 ActiveDEACount;
			UNSIGNED4 ExpiredDEACount;
			STRING1	  DEAExpiredFlag;
			STRING1	  isStateSanction;
			STRING1	  isOIGSanction;
			STRING1	  isOPMSanction;
			STRING10  Taxonomy;
			STRING50  TaxonomyDescription;		
			STRING3	  SpecialityCode;	
			STRING1	  ProviderStatus;
			STRING40  GroupKey;
			STRING1	  hasActiveLicenseRevocation;
			STRING2	  ActiveLicenseRevocationState;			
			STRING8	  ActiveLicenseRevocationDate;			
			STRING1	  hasActiveStateExclusion;
			STRING2	  ActiveLicenseExclusionState;
			STRING8	  ActiveStateExclusionDate;			
			STRING1	  hasActiveOIGExclusion;	
			STRING8	  ActiveOIGExclusionDate;
			STRING1	  hasActiveOPMExclusion;
			STRING8	  ActiveOPMExclusionDate;
			STRING8	  ActiveStateSanctionExclusionDate;
			STRING8	  ActiveOIGSanctionExclusionDate;
			STRING8	  ActiveOPMSanctionExclusionDate;
			STRING1	  hasLicenseRevocationReinstated;
			STRING2	  LicenseRevocationReinstatedState;
			STRING8	  LicenseRevocationReinstatedDate;
			STRING1	  hasStateExclusioinReinstated;
			STRING2	  StateExclusionReinstatedState;
			STRING8	  StateExclusionReinstatedDate;
			STRING1	  hasOIGExclusioinReinstated;
			STRING8   OIGExclusionBeginDate;
			STRING8	  OIGExclusionReinstatedDate;			
			STRING1	  hasOPMExclusioinReinstated;
			STRING8	  StateExclusionBeginDate;
			STRING8   OPMExclusionBeginDate;
			STRING8	  OPMExclusionReinstatedDate;			
			STRING10  ResidentialPrimaryRange;
			STRING2   ResidentialPreDirectional;
			STRING28  ResidentialPrimaryName;
			STRING4   ResidentialAddressSuffix;
			STRING2   ResidentialPostDirectional;
			STRING8   ResidentialSecondaryRange;
			STRING25  ResidentialCityName;
			STRING2   ResidentialState;
			STRING5   ResidentialZip5;
			UNSIGNED3 ResidentialAddressLastSeen;
			STRING1	  ProviderWithSingleAddress;
			UNSIGNED3 SingleAddressProviderCount;
			STRING10  PractisePrimaryRange;
			STRING2   PractisePreDirectional;
			STRING28  PractisePrimaryName;
			STRING4   PractiseAddressSuffix;
			STRING2   PractisePostDirectional;
			STRING8   PractiseSecondaryRange;
			STRING25  PractiseCityName;
			STRING2   PractiseState;
			STRING5   PractiseZip5;
			STRING1	  hasBankruptcy;
			STRING8	  BankruptcyLastSeen;
			STRING1	  hasCriminalHistory;			
			STRING8	  LastArrestedDate;
			STRING1	  hasRelativeConvictions;
			STRING1	  hasRelativeBankruptcy;
			STRING3	  RelativeCount;
			STRING3	  RelativeBankruptcyCount;
			STRING3	  RelativeFelonyCount;
			STRING1	  hasAssocActiveStateExclusion;
			STRING1	  hasAssocActiveLicenseRevocation;		
			STRING1	  hasAssocStateExclusionReinstated;
			STRING1	  hasAssocLicenseRevocationReinstated;
			STRING1	  hasAssocBankruptcy;
			STRING1	  hasAssocCriminalHistory;
			STRING1	  hasDeceased;
			STRING8	  DeceasedDate;
			STRING1	  ClientStateExclusionInd;
			STRING2	  ClientStateExclusionState;
			STRING8   ClientStateExclusionDate;  
			STRING1	  ClientStateLicenseRevokedInd;
			STRING2	  ClientStateLicenseRevokedState;
			STRING8	  ClientStateLicenseRevokedDate;
			STRING1	  ClientStateLicenseExpiredInd;
			STRING8	  ClientPastStateExclusionDate;
			STRING8   ClientPastStateExclusionReinstDate;
			STRING8   ClientPastLicRevokedDate;
			STRING8   ClientPastLicRevokedReinstDate;
			STRING1	  ClientExpiredLicenseInd;			
			STRING2	  ClientExpiredLicenseState;			
			STRING25  ClientExpiredLicenseNumber;
			UNSIGNED4 ClientExpiredLicenseDate;
			STRING1	  ClientInactiveLicenseInd;			
			STRING2	  ClientInactiveLicenseState;			
			STRING25  ClientInactiveLicenseNumber;
			UNSIGNED4 ClientInactiveLicenseDate;
	END

    DATASET LexIDStats:PREFIX(INPUTS.Prefix),SIDE,SMALL, WUID
		INTEGER1 Hit;
        INTEGER4  Cnt;
    END    

    DATASET ProvTypeStats:PREFIX(INPUTS.Prefix),SIDE,SMALL, WUID
        STRING	  ProviderType;
        INTEGER4  Cnt;
    END    

    DATASET ProvStatusStats:PREFIX(INPUTS.Prefix),SIDE,SMALL, WUID
        STRING	  ProviderDesc;
        INTEGER4  Cnt;
    END    

    DATASET PerStats:PREFIX(INPUTS.Prefix),SIDE,SMALL, WUID
        STRING  FieldName;
        INTEGER FieldPercent;
    END
END

VISUALIZE AppendProviderDataStats:LABEL("Append Provider Data Stats")
	PIE LexIDHitCounts(LexIDStats{Hit, Cnt}) : TITLE("LexIDStats") , LABEL(Hit), WEIGHT (Cnt) , COLOR ("Red_Yellow_Blue"); 
	PIE ProviderStatusCounts(ProvStatusStats{ProviderDesc, Cnt}) : TITLE("ProviderDesc") , LABEL(ProviderDesc), WEIGHT (Cnt) , COLOR ("Red_Yellow_Blue"); 
	TABLE ProvidersTypeStats(ProvTypeStats{ProviderType, Cnt}) : VALUE (ProviderType, Cnt) , LABEL ("ProviderType", "Count");	
	TABLE FieldPopulationPercentage(PerStats{FieldName, FieldPercent}) : VALUE (FieldName, FieldPercent) , LABEL ("FieldName", "FieldPercentage");	
END

GENERATES INLINE 
 IMPORT AppendProviderAttributes;
 
 LNPIDResults := AppendProviderAttributes.macAppendProviderAttributesV3 (%dsInput%, %LNPID%, %ProviderState%,,'%Prefix%');

 %^edsOutput% := LNPIDResults %^p%; 
 %^eLexIDStats% := TABLE(%dsOutput%, {INTEGER %Prefix%Hit := MAP(%Prefix%LexID > 0 => 1, 0), %Prefix%Cnt := COUNT(GROUP)}, MAP(%Prefix%LexID > 0 => 1, 0), FEW); 
 %^eProvTypeStats% := TABLE(%dsOutput% (%Prefix%TaxonomyDescription <> ''), {%Prefix%ProviderType := %Prefix%TaxonomyDescription, %Prefix%Cnt := COUNT(GROUP)}, %Prefix%TaxonomyDescription, FEW);
 %^eProvStatusStats% := TABLE(%dsOutput%, {%Prefix%ProviderDesc := MAP (%Prefix%ProviderStatus IN ['N',''] => 'Active', %Prefix%ProviderStatus IN ['U','D'] => 'Deceased', %Prefix%ProviderStatus IN ['R'] => 'Retired','Other'), %Prefix%Cnt := COUNT(GROUP)}, MAP (%Prefix%ProviderStatus IN ['N',''] => 'Active', %Prefix%ProviderStatus IN ['U','D'] => 'Deacesed', %Prefix%ProviderStatus IN ['R'] => 'Retired','Other'), FEW);

 IMPORT HealthCare;
 PercentageResults := HealthCare.Mac_Field_Percentage (%dsOutput%, '%Prefix%');
 %^ePerStats% := TABLE (PercentageResults,{%Prefix%FieldName, %Prefix%FieldPercent}); 
ENDGENERATES

RESOURCES
    INDEX Key_Provider_Attributes:FILENAME("~thor::key::healthcareprovider::qa::shell"), URL("http://10.173.10.157:8010"), DALIIP("10.173.10.157"), CLUSTER("thor100_100cert");
    LOGICALFILE testinput:FILENAME("~qa::appendproviderattributes::appendproviderattributes::input"), URL("http://10.173.10.157:8010"), DALIIP("10.173.10.157"), CLUSTER("thor100_100cert");
    ECL AppendProviderAttributes:FILENAME("AppendProviderAttributes"), URL("http://10.173.10.157:8010");
    FILE ReadMe: FILENAME("AppendProviderAttributes_2.1_ReadMe.txt"),LABEL("Plugin Readme File");
    FILE AppendProviderAttributes_testcmp: FILENAME("AppendProviderAttributes_2.1_testcmp.txt"),LABEL("Plugin Test Composition");
    FILE AppendProviderAttributes_BuildTestDataset: FILENAME("AppendProviderAttributes_2.1_BuildTestDataset.ecl"),LABEL("BWR to create data for test composition");
    FILE AppendProviderAttributesChecklist: FILENAME("AppendProviderAttributesChecklist.xlsx"),LABEL("Checklist");
    FILE AppendProviderAttributes_TestHarness: FILENAME("AppendProviderAttributes_2.1_TestHarness.txt"),LABEL("Test Harness");
END