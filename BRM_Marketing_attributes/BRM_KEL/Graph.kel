#OPTION(keyfetchlimit, 10000) // Maximum number of rows to return for any key fetch. HPCC Defaults to 10,000
#OPTION(keyfetchlimitaction, 'atmost') // Instead of using LIMIT(N) for ECL JOIN's, use ATMOST(N). The N is specified by the keyfetchlimit #OPTION above.

// --- ENTITY Definitions Section --- 
IMPORT KnowledgeUniverse.PublicRecords_KEL.Entities;

// --- USE Statements Section ---
IMPORT PublicRecords_KEL.Uses; 

// --- Attributes Section ---
IMPORT KnowledgeUniverse.PublicRecords_KEL.Attributes;


QUERY: InputBusAttributesV1Dynamic(DATASET OF PublicRecords_KEL.ECL_Functions.Layouts.LayoutInputPII InputPIIDataset,
					DATASET OF PublicRecords_KEL.ECL_Functions.Layouts.LayoutInputBII InputBIIDataset, 
					DATE P_InpClnArchDt,
					PERMITS DPM) <= InputBII{
		G_ProcBusUID := UID, 
		B_InpAcct := BusInputAccountEchoValue,
		G_ProcBusUID, 
		// Business Clean 
		B_LexIDUlt := B_LexIDUltValue,
		B_LexIDOrg := B_LexIDOrgValue,
		B_LexIDLegal := B_LexIDLegalValue,
		B_LexIDSite := B_LexIDSiteValue,
		B_LexIDLoc := B_LexIDLocValue,
		B_LexIDLegalScore := B_LexIDLegalScoreValue,
		B_InpClnName := BusInputNameCleanValue,
		B_InpClnAltName := BusInputAlternateNameCleanValue,
		B_InpClnAddrCity := BusInputCityCleanValue,
		B_InpClnAddrState := BusInputStateCleanValue,
		B_InpClnAddrZip5 := BusInputZip5CleanValue,
		B_InpClnAddrZip4 := BusInputZip4CleanValue,
		B_InpClnAddrSt := BusInputStreetCleanValue,
		B_InpClnPhone := BusInputPhoneCleanValue,
		B_InpClnTIN := BusInputTINCleanValue,
		B_InpClnEmail := BusInputEmailCleanValue
		}
	ASOF DynamicArchive(P_InpClnArchDt)
	USING DPM
	USE InputPIIDataset(FLAT,
			InputPII(UID = G_ProcUID, Subject = P_LexID, InputCleanSSN = P_InpClnSSN, InputCleanEmail = P_InpClnEmail, InputCleanPhone = P_InpClnPhoneHome, SocialSummary = P_InpClnSSN, TelephoneSummary = P_InpClnPhoneHome),
			InputBIIInputPII(PII = G_ProcUID, BII = G_ProcBusUID)),
		InputBIIDataset(FLAT, InputBII(UID = G_ProcBusUID));
		
		
QUERY: NonFCRABusinessProxIDAttributesV1Dynamic(INTEGER UltID_in, INTEGER OrgID_in, INTEGER SeleID_in, INTEGER ProxID_in,  
					DATASET OF PublicRecords_KEL.ECL_Functions.Layouts.LayoutInputPII InputPIIDataset,
					DATASET OF PublicRecords_KEL.ECL_Functions.Layouts.LayoutInputBII InputBIIDataset, 
					DATE P_InpClnArchDt, 
					PERMITS DPM) <= BusinessProx(UltID = UltID_in, OrgID = OrgID_in, SeleID = SeleID_in,ProxID = ProxID_in){
		B_LexIDUlt := UltID,
		B_LexIDOrg := OrgID,
		B_LexIDLegal := SeleID,
		B_LexIDLoc := ProxID,
		B_LexIDLocSeenFlag,
		//Best BII Attributes//
		BP_BestName,
		BP_BestAddrLocID,
		BP_BestAddrSt,
		BP_BestAddrCity,
		BP_BestAddrCityPost,
		BP_BestAddrState,
		BP_BestAddrZip,
		BP_BestTIN,
		BP_BestPhone
		}
	ASOF DynamicArchive(P_InpClnArchDt) 
	USING DPM
	USE InputPIIDataset(FLAT,
			InputPII(UID = G_ProcUID, Subject = P_LexID, InputCleanSSN = P_InpClnSSN, InputCleanEmail = P_InpClnEmail, InputCleanPhone = P_InpClnPhoneHome, SocialSummary = P_InpClnSSN, TelephoneSummary = P_InpClnPhoneHome),
			InputBIIInputPII(PII = G_ProcUID, BII = G_ProcBusUID)),
		InputBIIDataset(FLAT, InputBII(UID = G_ProcBusUID));		
		
		
QUERY: NonFCRABusinessSeleIDAttributesV1Dynamic(INTEGER UltID_in, INTEGER OrgID_in, INTEGER SeleID_in,  
					DATASET OF PublicRecords_KEL.ECL_Functions.Layouts.LayoutInputPII InputPIIDataset,
					DATASET OF PublicRecords_KEL.ECL_Functions.Layouts.LayoutInputBII InputBIIDataset, 
					DATE P_InpClnArchDt, 
					PERMITS DPM) <= BusinessSele(UltID = UltID_in, OrgID = OrgID_in, SeleID = SeleID_in){
		B_LexIDUlt := UltID,
		B_LexIDOrg := OrgID,
		B_LexIDLegal := SeleID,
		B_LexIDLegalSeenFlag,
		BE_SOSOldMsncEv,
		BE_SOSStateCntEv,
		BE_SOSDomStatusIndxEv,
		BE_UCCCntEv,
		BE_UCCDebtorCntEv,
		BE_UCCDebtorOldMsncEv,
		BE_UCCDebtorNewMsncEv,
		BE_UCCActvCnt,
		BE_UCCDebtorTermCntEv,
		BE_UCCDebtorOtherCntEv,
		BE_UCCDebtorTermNewMsncEv,
		BE_UCCCreditorCntEv,
		BE_AstVehAirCntEv,
		BE_AstVehWtrCntEv,
		// BE_AstVehAutoCnt2Y,
		// BE_AstVehAutoPersCnt2Y,
		// BE_AstVehAutoCommCnt2Y,
		// BE_AstVehAutoOtherCnt2Y,
		// BE_AstVehAutoEmrgNewMsncEv,
		BE_AstPropCntEv,
		BE_AstPropCurrCnt,
		BE_AstPropOldMsncEv,
		BE_AstPropNewMsncEv,
		BE_AstPropCurrValTot,
		BE_AstPropCurrLotSizeTot,
		BE_AstPropCurrBldgSizeTot,
		BE_BestName,
		BE_BestAddrSt,
		BE_BestAddrCity,
		BE_BestAddrState,
		BE_BestAddrZip,
		BE_BestTIN,
		BE_BestPhone,
		BE_URLFlag,
		BE_AssocExecEmailFlag2Y,
		BE_BestAddrSrcOldMsncEv,
		BE_BestAddrBldgType,
		BE_BestAddrIsOwnedFlag,
		BE_BestAddrNewTaxValEv,
		BE_BestAddrLotSize,
		BE_BestAddrBldgSize,
		BE_DrgGovDebarredFlagEv,
		BE_DrgFlag7Y,
		BE_DrgBkCnt10Y,
		BE_DrgBkNewMsnc10Y,
		BE_DrgBkNewChType10Y,
		BE_DrgLienCnt7Y,
		BE_DrgLienNewMsnc7Y,
		BE_DrgJudgCnt7Y,
		BE_DrgJudgNewMsnc7Y,
		BE_DrgLTDCnt7Y,
		BE_DrgLTDNewMsnc7Y,
		BE_B2BActvCnt,
		BE_B2BActvCarrCnt,
		BE_B2BActvFltCnt,
		BE_B2BActvMatCnt,
		BE_B2BActvOpsCnt,
		BE_B2BActvOthCnt,
		BE_B2BActvBalTot,
		BE_B2BActvCarrBalTot,
		BE_B2BActvFltBalTot,
		BE_B2BActvMatBalTot,
		BE_B2BActvOpsBalTot,
		BE_B2BActvOthBalTot,
		BE_B2BActvBalTotRnge,
		BE_B2BActvCarrBalTotRnge,
		BE_B2BActvFltBalTotRnge,
		BE_B2BActvMatBalTotRnge,
		BE_B2BActvOpsBalTotRnge,
		BE_B2BActvOthBalTotRnge,
		BE_B2BActvWorstPerfIndx,
		BE_B2BWorstPerfIndx2Y,
		BE_AssocCntEv,
		// BE_AssocCnt2Y,
		BE_AssocExecCntEv,
		// BE_AssocExecCnt2Y,
		BE_AssocNexecCntEv,
		// BE_AssocNexecCnt2Y,
		// BE_AssocAgeAvg2Y,
		// BE_AssocExecAgeAvg2Y,
		// BE_AssocNexecAgeAvg2Y,
		// BE_AssocWEduCollCnt2Y,
		// BE_AssocExecWEduCollCnt2Y,
		// BE_AssocNexecWEduCollCnt2Y,
		// BE_AssocEmrgMsncAvg2Y,
		// BE_AssocExecEmrgMsncAvg2Y,
		// BE_AssocNexecEmrgMsncAvg2Y,
		// BE_AssocWDrgCnt2Y,
		// BE_AssocExecWDrgCnt2Y,
		// BE_AssocNexecWDrgCnt2Y,
		// BE_AssocBusCntAvg2Y,
		// BE_AssocExecBusCntAvg2Y,
		// BE_AssocNexecBusCntAvg2Y,
		BE_BusSICCode1,
		BE_BusSICCode1Desc,
		BE_BusSICCode2,
		BE_BusSICCode2Desc,
		BE_BusSICCode3,
		BE_BusSICCode3Desc,
		BE_BusSICCode4,
		BE_BusSICCode4Desc,
		BE_BusNAICSCode1,
		BE_BusNAICSCode1Desc,
		BE_BusNAICSCode2,
		BE_BusNAICSCode2Desc,
		BE_BusNAICSCode3,
		BE_BusNAICSCode3Desc,
		BE_BusNAICSCode4,
		BE_BusNAICSCode4Desc,
		BE_BusEmplCountCurr,
		BE_BusAnnualSalesCurr,
		BE_BusIsNonProfitFlag,
		BE_BusIsFranchiseFlag,
		BE_BusOffers401kFlag,
		BE_BusHasNewLocationFlag1Y,
		BE_BusLocActvCnt,
		BE_BusInferFemaleOwnedFlag,
		// BE_BusInferFamilyOwnedFlag,
		BE_BusIsFemaleOwnedFlag,
		BE_BusIsMinorityOwnedFlag,
		// BE_BusIsResidentialFlag,
		BE_DBANameCnt2Y,
		BE_VerSrcCntEv,
		BE_VerSrcOldMsncEv,
		BE_VerSrcNewMsncEv,
		BE_VerSrcRptNewBusFlag,
		BE_VerSrcCredCntEv,
		BE_VerSrcBureauFlag,
		BE_VerSrcBureauOldMsncEv,
		BE_AddrPOBoxFlag,
		BE_VerNameFlag,
		BE_VerAddrFlag,
		BE_VerAddrSrcOldMsncEv,
		BE_VerTINFlag,
		BE_VerTINSrcOldMsncEv,
		BE_VerPhoneFlag,
		BE_VerPhoneSrcOldMsncEv
		}
	ASOF DynamicArchive(P_InpClnArchDt) 
	USING DPM
	USE InputPIIDataset(FLAT,
			InputPII(UID = G_ProcUID, Subject = P_LexID, InputCleanSSN = P_InpClnSSN, InputCleanEmail = P_InpClnEmail, InputCleanPhone = P_InpClnPhoneHome, SocialSummary = P_InpClnSSN, TelephoneSummary = P_InpClnPhoneHome),
			InputBIIInputPII(PII = G_ProcUID, BII = G_ProcBusUID)),
		InputBIIDataset(FLAT, InputBII(UID = G_ProcBusUID));	
				