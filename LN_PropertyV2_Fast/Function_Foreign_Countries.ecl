EXPORT Function_Foreign_Countries := module 

	export	Append_AID(inSearch, outSearch)	:= macro
	
	import	Address,AID;

	// Pass the records to the AddressID macro to fetch the RawAID
	#uniquename(lAIDAppendFlags)
	unsigned4	%lAIDAppendFlags%	:=	AID.Common.eReturnValues.RawAID	|
																	AID.Common.eReturnValues.ACECacheRecords;
	
	#uniquename(dSearchAppendAID)
	AID.MacAppendFromRaw_2Line(	inSearch,
															Append_PrepAddr1,
															Append_PrepAddr2,
															Append_RawAID,
															%dSearchAppendAID%,
															%lAIDAppendFlags%
														);
														
	#uniquename(dSearchAppendAID_Ind)
	%dSearchAppendAID_Ind% := %dSearchAppendAID% : independent;

	#uniquename(tReformat2Orig)
	recordof(inSearch)	%tReformat2Orig%(%dSearchAppendAID_Ind%	pInput)	:=
	transform
		self.Append_RawAID:=	pInput.AIDWork_RawAID;
		self.prim_range		:=	pInput.AIDWork_AceCache.prim_range;
		self.predir				:=	pInput.AIDWork_AceCache.predir;
		self.prim_name		:=	pInput.AIDWork_AceCache.prim_name;
		self.suffix				:=	pInput.AIDWork_AceCache.addr_suffix;
		self.postdir			:=	pInput.AIDWork_AceCache.postdir;
		self.unit_desig		:=	pInput.AIDWork_AceCache.unit_desig;
		self.sec_range		:=	pInput.AIDWork_AceCache.sec_range;
		self.p_city_name	:=	pInput.AIDWork_AceCache.p_city_name;
		self.v_city_name	:=	pInput.AIDWork_AceCache.v_city_name;
		self.st						:=	pInput.AIDWork_AceCache.st;
		self.zip					:=	pInput.AIDWork_AceCache.zip5;
		self.zip4					:=	pInput.AIDWork_AceCache.zip4;
		self.cart					:=	pInput.AIDWork_AceCache.cart;
		self.cr_sort_sz		:=	pInput.AIDWork_AceCache.cr_sort_sz;
		self.lot					:=	pInput.AIDWork_AceCache.lot;
		self.lot_order		:=	pInput.AIDWork_AceCache.lot_order;
		self.dbpc					:=	pInput.AIDWork_AceCache.dbpc;
		self.chk_digit		:=	pInput.AIDWork_AceCache.chk_digit;
		self.rec_type			:=	pInput.AIDWork_AceCache.rec_type;
		self.county				:=	pInput.AIDWork_AceCache.county;
		self.geo_lat			:=	pInput.AIDWork_AceCache.geo_lat;
		self.geo_long			:=	pInput.AIDWork_AceCache.geo_long;
		self.msa					:=	pInput.AIDWork_AceCache.msa;
		self.geo_blk			:=	pInput.AIDWork_AceCache.geo_blk;
		self.geo_match		:=	pInput.AIDWork_AceCache.geo_match;
		self.err_stat			:=	pInput.AIDWork_AceCache.err_stat;
		self							:=	pInput;
	end;

	#uniquename(dSearchCleanAddr)
	%dSearchCleanAddr%	:=	project(%dSearchAppendAID_Ind%,%tReformat2Orig%(left));
	
	outSearch	:=	%dSearchCleanAddr%;
	endmacro;	
	
	export fCountry(string country) := function
		cntry := map(regexfind('AFGHANISTAN', country, 0)<>'' => 'AFGHANISTAN',
									regexfind('ALAND ISLANDS', country, 0)<>'' => 'ALAND_ISLANDS',
									regexfind('ALBANIA', country, 0)<>'' => 'ALBANIA',
									regexfind('ALGERIA$', country, 0)<>'' => 'ALGERIA',
									regexfind('AMERICAN SAMOA| AS$|AMERICAN SAM$', country, 0)<>'' => 'AMERICAN_SAMOA',
									regexfind('ANDORRA |ANDORRA$', country, 0)<>'' and regexfind('SPAIN', country, 0)='' => 'ANDORRA',
									regexfind('ANGOLA$', country, 0)<>'' => 'ANGOLA',
									regexfind('ANGUILLA', country, 0)<>'' => 'ANGUILLA',
									regexfind('ANTARCTICA', country, 0)<>'' => 'ANTARCTICA',
									regexfind('ANTIGUA AND BARBUDA|ANTIGUA WEST INDIES', country, 0)<>'' => 'ANTIGUA_AND_BARBUDA',
									regexfind('ARGENTINA$| ARGENTINA,|BUENOS AIRES', country, 0)<>'' => 'ARGENTINA',
									regexfind('ARMENIA$', country, 0)<>'' => 'ARMENIA',
									regexfind('ARUBA', country, 0)<>'' => 'ARUBA',
									regexfind('AUSTRALIA| AU$|AUSTRALI|QUEENSLAND A', country, 0)<>'' => 'AUSTRALIA',
									regexfind('AUSTRIA|VIENNA', country, 0)<>'' and regexfind('VIENNA RD', country, 0)='' => 'AUSTRIA',
									regexfind('AZERBAIJAN', country, 0)<>'' => 'AZERBAIJAN',
									regexfind('BAHAMAS|NASSAU B', country, 0)<>'' and regexfind('NASSAU RD|NASSAU ROAD', country, 0)='' => 'BAHAMAS',
									regexfind('BAHRAIN', country, 0)<>'' => 'BAHRAIN',
									regexfind('BANGLADESH', country, 0)<>'' => 'BANGLADESH',
									regexfind('BARBADOS', country, 0)<>'' => 'BARBADOS',
									regexfind('BELARUS', country, 0)<>'' => 'BELARUS',
									regexfind('BELGIUM|ANTWERP|BRUSSELS|RHODE-ST. GENESE', country, 0)<>'' => 'BELGIUM',
									regexfind('BELIZE |BELIZE$|BELIZE CENTRAL AM', country, 0)<>'' => 'BELIZE',
									regexfind('BENIN$', country, 0)<>'' => 'BENIN',
									regexfind('BERMUDA$', country, 0)<>'' => 'BERMUDA',
									regexfind('BHUTAN$', country, 0)<>'' => 'BHUTAN',
									regexfind('BOLIVIA$', country, 0)<>'' => 'BOLIVIA',
									regexfind('BONAIRE$', country, 0)<>'' => 'BONAIRE',
									regexfind('BOSNIA_AND_HERZEGOVINA|BOSNIA$|HERZEGOVINA$', country, 0)<>'' => 'BOSNIA_AND_HERZEGOVINA',
									regexfind('BOTSWANA$', country, 0)<>'' => 'BOTSWANA',
									regexfind('BOUVET ISLAND', country, 0)<>'' => 'BOUVET_ISLAND',
									regexfind('BRAZIL$|ARACAJU|BRASIL$|BELO HORIZONTE|BLUMENAU|FORTALEZA|GOIANIA|HORTOLANDIA|MINAS GERAIS|PORTO ALEGRE|RIO DE JAN|SAN PAULO|SAO PAULO', country, 0)<>'' => 'BRAZIL',
									regexfind('BRITISH INDIAN OCEAN TERRITORY', country, 0)<>'' => 'BRITISH_INDIAN_OCEAN_TERRITORY',
									regexfind('BRUNEI DARUSSALAM', country, 0)<>'' => 'BRUNEI_DARUSSALAM',
									regexfind('BULGARIA$', country, 0)<>'' => 'BULGARIA',
									regexfind('BURKINA FASO', country, 0)<>'' => 'BURKINA_FASO',
									regexfind('BURUNDI', country, 0)<>'' => 'BURUNDI',
									regexfind('CAMBODIA', country, 0)<>'' => 'CAMBODIA',
									regexfind('CAMEROON', country, 0)<>'' => 'CAMEROON',
									regexfind(' AB | AB$| BC | BC$| CAN AD A | CANA | CANAD | CANAD$| CANADA$| CANDA | MB | MB$| QC |'+
														' QC$| SK | SK$|, BC |ALBERTA|BRITISH COLUMBIA|CALGARY|CALGARY AB|CALGARY C|CANADA|CORBYVILLE|'+
														'EDMONTON|HALIFAX|MISSISSAUGA|MONTREAL|NEWMARKET ON|NEWMARKET, ON|NOVA SCOTIA|ONTAR|ONTARIO|'+
														'OTTAWA C|QUEBEC|SCARBOROUGH ON|VANCOUVER|VICTORIA ON|VICTORIA, ON|WEYBURN SK CAN|WINNIPEG MAN|'+                                  
														'BARRIE ON|BARRIE, ON|BEETON ON|BEETON, ON|BELLEVILLE ON|BELLEVILLE, ON|BRAMPTON ON|BRAMPTON, ON|BRANT ON|BRANT, ON|BRANTFORD ON|'+
														'BRANTFORD, ON|BRECHIN ON|BRECHIN, ON|BRESLAU ON|BRESLAU, ON|BROCKVILLE ON|BROCKVILLE, ON|BURLINGTON ON|BURLINGTON, ON|'+
														'CALLANDER ON|CALLANDER, ON|CAMBRIDGE ON|CAMBRIDGE, ON|CLARENCE-ROCKLAND ON|CLARENCE-ROCKLAND, ON|CONCORD ON|CONCORD, ON|'+
														'COPPER CLIFF ON|COPPER CLIFF, ON|CORNWALL ON|CORNWALL, ON|DRYDEN ON|DRYDEN, ON|DUBLIN ON|DUBLIN, ON'+
														'ELLIOT LAKE ON|ELLIOT LAKE, ON|GANANOQUE ON|GANANOQUE, ON|GLOUCESTER ON|GLOUCESTER, ON|GREATER SUDBURY ON|GREATER SUDBURY, ON|GUELPH ON|GUELPH, ON|'+
														'HALDIMAND COUNTY ON|HALDIMAND COUNTY, ON|HAMILTON ON|HAMILTON, ON|KAWARTHA LAKES ON|KAWARTHA LAKES, ON|'+
														'KENORA ON|KENORA, ON|KINGSTON ON|KINGSTON, ON|KITCHENER ON|KITCHENER, ON|LEAMINGTON ON|LEAMINGTON, ON|LONDON ON|LONDON, ON|MARKHAM ON|'+
														'MARKHAM, ON|MIDHURST ON|MIDHURST, ON|MILTON ON|MILTON, ON|MISSISSAUGA ON|MISSISSAUGA, ON|NIAGARA FALLS ON|NIAGARA FALLS, ON|NORFOLK COUNTY ON|'+
														'NORFOLK COUNTY, ON|NORTH BAY ON|NORTH BAY, ON|NORTH YORK ON|NORTH YORK, ON|OAKVILLE ON|OAKVILLE, ON|ORILLIA ON|ORILLIA, ON|OSHAWA ON|OSHAWA, ON|'+
														'OTTAWA |OTTAWA ON|OTTAWA, ON|OWEN SOUND ON|OWEN SOUND, ON|PEMBROKE ON|PEMBROKE, ON|PETERBOROUGH ON|'+
														'PETERBOROUGH, ON|PICKERING ON|PICKERING, ON|PORT COLBORNE ON|PORT COLBORNE, ON|PRINCE EDWARD COUNTY ON|'+
														'PRINCE EDWARD COUNTY, ON|QUINTE WEST ON|QUINTE WEST, ON|RICHMOND HILL ON|RICHMOND HILL, ON|SAINT THOMAS ON|SAINT THOMAS, ON|SARNIA ON|SARNIA, ON|SAULT STE MARIE ON|'+
														'SAULT STE MARIE, ON|ST AUGUSTIN DESMAURES|ST CATHARINES ON|ST CATHARINES, ON|ST CATHRINES ON|ST CATHRINES, ON|ST JEAN SUR RICHELIEU|'+
														'ST THOMAS ON|ST THOMAS, ON|STRATFORD ON|STRATFORD, ON|SUDBURY ON|SUDBURY, ON'+
														'TEMISKAMING SHORES ON|TEMISKAMING SHORES, ON|THORNHILL ON|THORNHILL, ON|THOROLD ON|THOROLD, ON|THUNDER BAY ON|THUNDER BAY, ON|'+
														'TIMMINS ON|TIMMINS, ON|TORONTO ON|TORONTO, ON|VAUGHAN ON|VAUGHAN, ON|WATERLOO ON|WATERLOO, ON|'+
														'WELLAND ON|WELLAND, ON|WESTON ON|WESTON, ON|WINDSOR ON|WINDSOR, ON|WOODSTOCK ON|WOODSTOCK, ON', country, 0)<>'' and
														regexfind('CALLE CANADA|CANADA PL|HALIFAX ST|ONTARIO ST|VANCOUVER DR|VICTORIA ST', country, 0)='' => 'CANADA',	
									regexfind('CABO VERDE|CAPE VERDE', country, 0)<>'' => 'CAPE_VERDE',
									regexfind('CAYMAN ISLAND|GRAND CAYMAN', country, 0)<>'' => 'CAYMAN_ISLANDS',
									regexfind('CENTRAL AFRICAN REPUBLIC', country, 0)<>'' => 'CENTRAL_AFRICAN_REPUBLIC',
									regexfind(' CHAD$', country, 0)<>'' => 'CHAD',
									regexfind('CHILE$', country, 0)<>'' => 'CHILE',
									regexfind('CHINA |CHINA$|BEIJING|CHAO YANG|CHAOYANG|CHUNG HOM KOK|DONG GUANG|DONGGUANG|FUZHOU|GUANGXI|GUANGZHOU|'+
														'HANGZHOU|HONG K|HONGKONG|KA NING PATH|KOWLOON|MACAU |POK FU LAM|POKFULAM|SHANGHAI|SHEN ZHEN|SHENZHEN|SUZHOU|TIANJIN|WANCHAI', country, 0)<>'' and
														regexfind('CHINA CT|CHINA COURT|CHINA GROVE|CHINA MI |CHINA ROSE|CHINA TOWNSHIP', country, 0)='' => 'CHINA',
									regexfind('CHRISTMAS ISLAND', country, 0)<>'' => 'CHRISTMAS_ISLAND',
									regexfind('COCOS', country, 0)<>'' => 'COCOS',
									regexfind('COLOMBIA|BOGOTA |BOGOTO COLOMB|MEDELLIN|QUITO COLUMBIA ', country, 0)<>'' => 'COLOMBIA',
									regexfind('COMOROS', country, 0)<>'' => 'COMOROS',
									regexfind(' CONGO$', country, 0)<>'' => 'CONGO',
									regexfind('COOK ISLANDS', country, 0)<>'' => 'COOK_ISLANDS',
									regexfind('COSTA RICA', country, 0)<>'' => 'COSTA_RICA',
									regexfind('COTE D\'IVOIRE', country, 0)<>'' => 'COTE_D_IVOIRE',
									regexfind('CROATIA|ZAGREB ', country, 0)<>'' and regexfind('CROATIA CT', country, 0)='' => 'CROATIA',
									regexfind('CUBA$', country, 0)<>'' => 'CUBA',
									regexfind('CURAÃ‡AO|CURACAO', country, 0)<>'' => 'CURACAO',
									regexfind('CYPRUS$|LARNACA', country, 0)<>'' => 'CYPRUS',
									regexfind('CZECH REPUBLIC|CZECH REP| PRAGUE', country, 0)<>'' => 'CZECH_REPUBLIC',
									regexfind('DENMARK$|COPENHAGEN|DENMARK[0-9]+$', country, 0)<>'' => 'DENMARK',
									regexfind('DJIBOUTI', country, 0)<>'' => 'DJIBOUTI',
									regexfind('DOMINICA$', country, 0)<>'' => 'DOMINICA',
									regexfind('DOMINICAN REPUBLIC|CALLE.*SANTO DOMINGO|REPUBLICA DOMINICANA', country, 0)<>'' => 'DOMINICAN_REPUBLIC',
									regexfind('ECUADOR|EQUADOR|QUITO EC|GUAYAQUIL', country, 0)<>'' => 'ECUADOR',
									regexfind('EGYPT$|CAIRO E|EGY PT|EGYPT, -', country, 0)<>'' => 'EGYPT',
									regexfind('EL SALVADOR', country, 0)<>'' and regexfind('MEXICO', country, 0)='' => 'EL_SALVADOR',
									regexfind('EQUATORIAL GUINEA', country, 0)<>'' => 'EQUATORIAL_GUINEA',
									regexfind('ERITREA', country, 0)<>'' => 'ERITREA',
									regexfind('ESTONIA', country, 0)<>'' => 'ESTONIA',
									regexfind('ETHIOPIA', country, 0)<>'' => 'ETHIOPIA',
									regexfind('FALKLAND ISLANDS', country, 0)<>'' => 'FALKLAND_ISLANDS',
									regexfind('FAROE ISLANDS', country, 0)<>'' => 'FAROE_ISLANDS',
									regexfind('FIJI', country, 0)<>'' => 'FIJI',
									regexfind('FINLAND', country, 0)<>'' and regexfind('FINLAND MN', country, 0)='' => 'FINLAND',
									regexfind('FRANCE |FRANCE$| FRANCE,|PARIS FR|PARIS, FR|NICE FR|NICE, FR|ST JULIEN EN GENEVOIS', country, 0)<>'' and regexfind('PARIS AVE', country, 0)='' => 'FRANCE',
									regexfind('FRENCH GUIANA', country, 0)<>'' => 'FRENCH_GUIANA',
									regexfind('FRENCH POLYNESIA', country, 0)<>'' => 'FRENCH_POLYNESIA',
									regexfind('FRENCH SOUTHERN TERRITORIES', country, 0)<>'' => 'FRENCH_SOUTHERN_TERRITORIES',
									regexfind('GABON', country, 0)<>'' => 'GABON',
									regexfind('GAMBIA', country, 0)<>'' => 'GAMBIA',
									//regexfind('GEORGIA', country, 0)<>'' => 'GEORGIA',
									regexfind('GERMANY| BERLIN | FRANKFURT | HAMBURG | MUNICH |BERLIN, GE', country, 0)<>'' => 'GERMANY',
									regexfind('GHANA', country, 0)<>'' => 'GHANA',
									regexfind('GIBRALTAR', country, 0)<>'' => 'GIBRALTAR',
									regexfind('GREECE|NAFPAKTOS', country, 0) <>'' => 'GREECE',
									regexfind('GREENLAND', country, 0)<>'' => 'GREENLAND',
									regexfind('GRENADA$|GRENADA WEST INDIES', country, 0)<>'' => 'GRENADA',
									regexfind('GUADELOUPE', country, 0)<>'' => 'GUADELOUPE',
									regexfind('GUAM', country, 0)<>'' => 'GUAM',
									regexfind('GUATEMALA', country, 0)<>'' => 'GUATEMALA',
									regexfind('GUERNSEY$', country, 0)<>'' => 'GUERNSEY',
									regexfind('GUINEA', country, 0)<>'' => 'GUINEA',
									regexfind('GUINEA-BISSAU', country, 0)<>'' => 'GUINEA-BISSAU',
									regexfind('GUYANA', country, 0)<>'' => 'GUYANA',
									regexfind('HAITI$|HAITI WEST INDIES', country, 0)<>'' => 'HAITI',
									regexfind('HEARD ISLAND AND MCDONALD ISLANDS', country, 0)<>'' => 'HEARD_ISLAND_AND_MCDONALD_ISLANDS',
									regexfind('HOLY SEE' , country, 0)<>'' => 'HOLY_SEE',
									regexfind('HONDURAS', country, 0)<>'' => 'HONDURAS',
									//regexfind('HONG KONG', country, 0)<>'' => 'HONG_KONG',
									regexfind('HUNGARY|BUDA PEST|BUDAPEST H', country, 0)<>'' and regexfind('CALLE BUDAPEST|BUDAPEST COU|BUDAPEST CT', country, 0)='' => 'HUNGARY',
									regexfind('ICELAND', country, 0)<>'' => 'ICELAND',
									regexfind('INDIA$|NEW DELHI', country, 0)<>'' and regexfind('CALLE INDIA|WEST INDIA', country, 0)='' => 'INDIA',
									regexfind('INDONESIA|JAKARTA', country, 0)<>'' => 'INDONESIA',
									regexfind('IRAN$', country, 0)<>'' => 'IRAN',
									regexfind('IRAQ$', country, 0)<>'' => 'IRAQ',
									regexfind('IRELAND|LIMERICK I|DUBLIN I|DUBLIN, IE', country, 0)<>'' and regexfind('DUBLIN AV|LIMERICK RD', country, 0)='' => 'IRELAND',
									regexfind('ISLE OF MAN', country, 0)<>'' => 'ISLE_OF_MAN',
									regexfind('ISRAEL|ISREAL|JERUSALEM I|TEL AVIV', country, 0)<>'' and regexfind('ISRAEL ST|ISREAL ST', country, 0)='' => 'ISRAEL',
									regexfind('ITALY|BENEVENTO|CALENZANO, IT|DOMODOSSOLA|ERCOLANO|FIRENZE|ITALIA |ITALIA$|LEGNANO, IT|LUCCA|MILAN I|MILANO, IT|NAPOLI PUZZUOLI, IT|OGGIONO I|POZZUOLI I| ROMA ITAL| ROME I| ROME, IT|TORINO I', country, 0)<>'' => 'ITALY',
									regexfind('JAMAICA$|JAMAICA, KINGSTON|JAMAICA , KINGSTON|JAMAICA WEST INDIES|KINGSTON '+'[0-9]+'+' JAMAICA|KINGSTON '+'[0-9]+'+' JM|KINGSTON, JM', country, 0)<>'' and regexfind('JAMAICA PLAIN MA|JAMAICA NY', country, 0)='' => 'JAMAICA',
									regexfind('JAPAN|HIROSHIMA|KANAGAWA|KYOTO|JPN|TOKYO|OKAYAWA JP', country, 0)<>'' => 'JAPAN',
									regexfind('JORDAN$| AMMAN ', country, 0)<>'' => 'JORDAN',
									regexfind('KAZAKHSTAN', country, 0)<>'' => 'KAZAKHSTAN',
									regexfind('KENYA$|NAIROBI', country, 0)<>'' => 'KENYA',
									regexfind('KIRIBATI', country, 0)<>'' => 'KIRIBATI',
									regexfind('KOREA|SEOUL', country, 0)<>'' => 'KOREA',
									regexfind('KUWAIT', country, 0)<>'' => 'KUWAIT',
									regexfind('KYRGYZSTAN', country, 0)<>'' => 'KYRGYZSTAN',
									regexfind('LAO PEOPLE\'S DEMOCRATIC_REPUBLIC| LAOS ', country, 0)<>'' => 'LAO_PEOPLES_DEMOCRATIC_REPUBLIC',
									regexfind('LATVIA$', country, 0)<>'' => 'LATVIA',
									regexfind('LEBANON$', country, 0)<>'' => 'LEBANON',
									regexfind('LESOTHO', country, 0)<>'' => 'LESOTHO',
									regexfind('LIBERIA', country, 0)<>'' => 'LIBERIA',
									regexfind('LIBYA', country, 0)<>'' => 'LIBYA',
									regexfind('LIECHTENSTEIN', country, 0)<>'' => 'LIECHTENSTEIN',
									regexfind('LITHUANIA', country, 0)<>'' => 'LITHUANIA',
									regexfind('LUXEMBOURG', country, 0)<>'' => 'LUXEMBOURG',
									regexfind(' MACAO$', country, 0)<>'' => 'MACAO',
									regexfind('MACEDONIA$|MACEDO NI A', country, 0)<>'' => 'MACEDONIA',
									regexfind('MADAGASCAR$', country, 0)<>'' => 'MADAGASCAR',
									regexfind('MALAWI$', country, 0)<>'' => 'MALAWI',
									regexfind('MALAYSIA|KUALA LAMPUR|KUALA LUMPUR', country, 0)<>'' => 'MALAYSIA',
									regexfind('MALDIVES$', country, 0)<>'' => 'MALDIVES',
									regexfind(' MALI$', country, 0)<>'' => 'MALI',
									regexfind('MALTA$', country, 0)<>'' => 'MALTA',
									regexfind('MARSHALL ISLANDS| MH$', country, 0)<>'' => 'MARSHALL_ISLANDS',
									regexfind('MARTINIQUE', country, 0)<>'' => 'MARTINIQUE',
									regexfind('MAURITANIA', country, 0)<>'' => 'MAURITANIA',
									regexfind('MAURITIUS', country, 0)<>'' => 'MAURITIUS',
									regexfind('MAYOTTE', country, 0)<>'' => 'MAYOTTE',
									regexfind('MEXICO|JALISCO | MEX$', country, 0)<>'' and regexfind('NEW MEXICO|NEW MEX$', country, 0)='' => 'MEXICO',
									regexfind('MICRONESIA| FM$', country, 0)<>'' => 'MICRONESIA',
									regexfind('MOLDOVA$', country, 0)<>'' => 'MOLDOVA',
									regexfind('MONACO$', country, 0)<>'' => 'MONACO',
									regexfind('MONGOLIA', country, 0)<>'' => 'MONGOLIA',
									regexfind('MONTENEGRO', country, 0)<>'' => 'MONTENEGRO',
									regexfind('MONTSERRAT', country, 0)<>'' => 'MONTSERRAT',
									regexfind('MOROCCO', country, 0)<>'' => 'MOROCCO',
									regexfind('MOZAMBIQUE', country, 0)<>'' => 'MOZAMBIQUE',
									regexfind('MYANMAR', country, 0)<>'' => 'MYANMAR',
									regexfind('NAMIBIA', country, 0)<>'' => 'NAMIBIA',
									//regexfind('NAURU', country, 0)<>'' => 'NAURU',
									regexfind('NEPAL', country, 0)<>'' => 'NEPAL',
									regexfind('NETHERLANDS|AMSTERDAM N|AMSTERDAM, NL| HOLLAND$', country, 0)<>'' and regexfind('NEW HOLLAND|NETHERLANDS ANT|NETHERLANDS RD', country, 0)='' => 'NETHERLANDS',
									regexfind('NEW CALEDONIA$', country, 0)<>'' => 'NEW_CALEDONIA',
									regexfind('NEW ZEALAND|NEW ZEA$|NEW ZEALA|ONEHUNGA AUCKLAND', country, 0)<>'' => 'NEW_ZEALAND',
									regexfind('NICARAGUA', country, 0)<>'' => 'NICARAGUA',
									regexfind('NIGER ', country, 0)<>'' => 'NIGER',
									regexfind('NIGERIA', country, 0)<>'' => 'NIGERIA',
									//regexfind('NIUE', country, 0)<>'' => 'NIUE',
									regexfind('NORFOLK ISLAND', country, 0)<>'' => 'NORFOLK_ISLAND',
									regexfind('NORTHERN MARIANA ISLANDS| MP$', country, 0)<>'' => 'NORTHERN_MARIANA_ISLANDS',
									regexfind('NORWAY$|OSLO|STAVANGER, NO', country, 0)<>'' => 'NORWAY',
									regexfind(' OMAN$', country, 0)<>'' => 'OMAN',
									regexfind('PAKISTAN|ISLAMABAD |ISLAMAB AD', country, 0)<>'' => 'PAKISTAN',
									regexfind('PALAU| PW$', country, 0)<>'' => 'PALAU',
									regexfind('PALESTINE', country, 0)<>'' and regexfind('PALESTINE RD', country, 0)='' => 'PALESTINE',
									regexfind('PANAMA', country, 0)<>'' and regexfind('PANAMA CITY BEAC|PANAMA CITY FL', country, 0)='' => 'PANAMA',
									regexfind('PAPUA NEW GUINEA', country, 0)<>'' => 'PAPUA_NEW_GUINEA',
									regexfind('PARAGUAY', country, 0)<>'' => 'PARAGUAY',
									regexfind('PERU | PERU$', country, 0)<>'' => 'PERU',
									regexfind('PHILIPPINES|GENERAL SANTOS|MAKATI |MANILA PH|PHILLIPINES', country, 0)<>'' => 'PHILIPPINES',
									//regexfind('PITCAIRN', country, 0)<>'' => 'PITCAIRN',
									regexfind('POLAND', country, 0)<>'' => 'POLAND',
									regexfind('PORTUGAL| LISBON P', country, 0)<>'' and regexfind('LISBON CT|PORTUGAL COVE', country, 0)='' => 'PORTUGAL',
									regexfind('PUERTO RICO| PR$| PR ', country, 0)<>'' => 'PUERTO_RICO',
									regexfind('QATAR', country, 0)<>'' => 'QATAR',
									regexfind('REUNION', country, 0)<>'' => 'REUNION',
									regexfind('ROMANIA', country, 0)<>'' => 'ROMANIA',
									regexfind('RUSSIAN FEDERATION|MOSCOW|RUSSIA |RUSSIA$|SAINT PETERSBURG RU', country, 0)<>'' => 'RUSSIAN_FEDERATION',
									regexfind('RWANDA', country, 0)<>'' => 'RWANDA',
									regexfind('SAINT BARTHELEMY$', country, 0)<>'' => 'SAINT_BARTHÃ‰LEMY',
									regexfind('SAINT HELENA', country, 0)<>'' => 'SAINT_HELENA',
									regexfind('SAINT KITTS AND NEVIS', country, 0)<>'' => 'SAINT_KITTS_AND_NEVIS',
									regexfind('SAINT LUCIA', country, 0)<>'' => 'SAINT_LUCIA',
									regexfind('SAINT MARTIN$|ST MAARTEN NETHERLANDS ANT|SAINT MARTIN FRE|SAINT MARTIN FWI', country, 0)<>'' => 'SAINT_MAARTIN',
									regexfind('SAINT PIERRE AND MIQUELON', country, 0)<>'' => 'SAINT_PIERRE_AND_MIQUELON',
									regexfind('SAINT VINCENT AND THE GRENADINES', country, 0)<>'' => 'SAINT_VINCENT_AND_THE_GRENADINES',
									regexfind('SAMOA', country, 0)<>'' => 'SAMOA',
									regexfind('SAN MARINO', country, 0)<>'' => 'SAN_MARINO',
									regexfind('SAO TOME AND PRINCIPE', country, 0)<>'' => 'SAO_TOME_AND_PRINCIPE',
									regexfind('SAUDI ARABIA|KINGDOM OF SAUDI', country, 0)<>'' => 'SAUDI_ARABIA',
									regexfind('SENEGAL', country, 0)<>'' => 'SENEGAL',
									regexfind('SERBIA', country, 0)<>'' => 'SERBIA',
									regexfind('SEYCHELLES', country, 0)<>'' => 'SEYCHELLES',
									regexfind('SIERRA LEONE$', country, 0)<>'' => 'SIERRA_LEONE',
									regexfind('SINGAPORE', country, 0)<>'' => 'SINGAPORE',
									regexfind('SAINT MAARTEN', country, 0)<>'' => 'SAINT_MAARTEN',
									regexfind('SLOVAKIA', country, 0)<>'' => 'SLOVAKIA',
									regexfind('SLOVENIA', country, 0)<>'' => 'SLOVENIA',
									regexfind('SOLOMON ISLANDS', country, 0)<>'' => 'SOLOMON_ISLANDS',
									regexfind('SOMALIA', country, 0)<>'' => 'SOMALIA',
									regexfind('SOUTH AFRICA$||JOHANNESBURG|PRETORIA|SOUTH, AF |SOUTH AFRICA,', country, 0)<>'' => 'SOUTH_AFRICA',
									regexfind('SOUTH GEORGIA AND THE SOUTH SANDWICH ISLANDS', country, 0)<>'' => 'SOUTH_GEORGIA_AND_THE_SOUTH_SANDWICH_ISLANDS',
									regexfind('SOUTH SUDAN', country, 0)<>'' => 'SOUTH_SUDAN',
									regexfind('SPAIN |BARCELONA|CANARY ISLAND|MADRID |MADRID,| MALAGA| SPAIN$|TENERIFE', country, 0)<>'' and regexfind('MADRID ST|PORT OF SPAIN|PT OF SPAIN', country, 0)='' => 'SPAIN',
									regexfind('SRI LANKA', country, 0)<>'' => 'SRI_LANKA',
									regexfind('SUDAN', country, 0)<>'' => 'SUDAN',
									regexfind('SURINAME|SURINAM SOUTH AMERICA', country, 0)<>'' => 'SURINAME',
									regexfind('SVALBARD AND JAN MAYEN', country, 0)<>'' => 'SVALBARD_AND_JAN_MAYEN',
									regexfind('SWAZILAND', country, 0)<>'' => 'SWAZILAND',
									regexfind('SWEDEN|TALLHOJDSVAGEN', country, 0)<>'' => 'SWEDEN',
									regexfind('SWITZERLAND| BERN |GENEVE SUISSE|SWITZ ER LAND| SWITZER|ZURICH', country, 0)<>'' => 'SWITZERLAND',
									regexfind('SYRIAN ARAB REPUBLIC', country, 0)<>'' => 'SYRIAN_ARAB_REPUBLIC',
									regexfind('TAIWAN|DATONG|TAICHUNG|TAIPEI|TAOYUAN CITY|XINYI', country, 0)<>'' => 'TAIWAN',
									regexfind('TAJIKISTAN', country, 0)<>'' => 'TAJIKISTAN',
									regexfind('TANZANIA', country, 0)<>'' => 'TANZANIA',
									regexfind('THAILAND|THAILND', country, 0)<>'' => 'THAILAND',
									regexfind('TIMOR-LESTE', country, 0)<>'' => 'TIMOR-LESTE',
									regexfind(' TOGO$', country, 0)<>'' => 'TOGO',
									regexfind('TOKELAU$', country, 0)<>'' => 'TOKELAU',
									regexfind(' TONGA ', country, 0)<>'' => 'TONGA',
									regexfind('TRINIDAD AND TOBAGO|TRINIDAD & TOBAGO|TRINIDAD$|TRINIDAD AN$|TRINIDAD WI|TRINIDAD, WEST INDIES|TRINIDAD WEST INDIES|TRINIDAD W I', country, 0)<>'' => 'TRINIDAD_AND_TOBAGO',
									regexfind('TUNISIA', country, 0)<>'' => 'TUNISIA',
									regexfind('TURKEY$|TURKEY ZZ|ISTANBUL', country, 0)<>'' => 'TURKEY',
									regexfind('TURKMENISTAN', country, 0)<>'' => 'TURKMENISTAN',
									regexfind('TURKS AND CAICOS ISLANDS| CAICOS', country, 0)<>'' => 'TURKS_AND_CAICOS_ISLANDS',
									regexfind('TUVALU', country, 0)<>'' => 'TUVALU',
									regexfind('UGANDA', country, 0)<>'' => 'UGANDA',
									regexfind('UKRAINE', country, 0)<>'' => 'UKRAINE',
									regexfind('UNITED ARAB EMIRATES|ABU DHABI|DUBAI |DUBAI, AE|U A E| UAE|UNITED ARAB EMIRA', country, 0)<>'' => 'UNITED_ARAB_EMIRATES',
									regexfind('UNITED KINGDOM|EDINBURGH E|EDINBURGH U|ENGLAN|GREAT BRIT|GREATER LONDON|HERTFORDSHIRE UK|LIPHOOK E|LIVERPOOL E|LONDON E|LONDON, EG|LONDON U|LONDON, UK|SCOTLAND$|SCOTLAND SCO|'+
														' U.K.$|U K | U K$| UK |UK$|UNITED K|UNITED, KI', country, 0)<>'' and
														regexfind('EDINBURGH DR', country, 0)='' => 'UNITED_KINGDOM',
									regexfind('UNITED STATES|ALABAMA|ALASKA|ARIZONA|ARKANSAS|CALIFORNIA|COLORADO|CONNECTICUT|DELAWARE|FLORIDA|GEORGIA|'+
														'HAWAII|IDAHO|ILLINOIS|INDIANA|IOWA|KANSAS|KENTUCKY|LOUISIANA|MAINE|MARYLAND|MASSACHUSETTS|'+
														'MICHIGAN|MINNESOTA|MISSISSIPPI|MISSOURI|MONTANA|NEBRASKA|NEVADA|NEW HAMPSHIRE|NEW JERSEY|'+
														'NEW MEXICO|NEW YORK|NORTH CAROLINA|NORTH DAKOTA|OHIO|OKLAHOMA|OREGON|PENNSYLVANIA|RHODE ISLAND|'+
														'SOUTH CAROLINA|SOUTH DAKOTA|TENNESSEE|TEXAS|UTAH|VERMONT|VIRGINIA|WASHINGTON|WEST VIRGINIA|WISCONSIN|WYOMING|DISTRICT OF COLUMBIA', country, 0)<>'' => 'UNITED_STATES',
									regexfind(' AA | AA$| AE | AE$| AP | AP$', country, 0)<>'' => 'ARMED_FORCES',	
									regexfind('UNITED STATES MINOR OUTLYING ISLANDS', country, 0)<>'' => 'UNITED_STATES_MINOR_OUTLYING_ISLANDS',
									regexfind('URUGUAY|MONTEVIDEO', country, 0)<>'' => 'URUGUAY',
									regexfind('UZBEKISTAN', country, 0)<>'' => 'UZBEKISTAN',
									regexfind('VANUATU', country, 0)<>'' => 'VANUATU',
									regexfind('VENEZUELA|CARACAS|MARACAIBO|VE, NEZUELA', country, 0)<>'' => 'VENEZUELA',
									regexfind('VIET NAM|HO CHI MINH|VIETNAM', country, 0)<>'' => 'VIETNAM',
									regexfind('VIRGIN ISLANDS|CHRISTIANSTED VI|SAINT THOMAS VI| USVI ', country, 0)<>'' => 'VIRGIN_ISLANDS',
									regexfind('WALLIS AND FUTUNA', country, 0)<>'' => 'WALLIS_AND_FUTUNA',
									regexfind('WESTERN SAHARA', country, 0)<>'' => 'WESTERN_SAHARA',
									regexfind('YEMEN', country, 0)<>'' => 'YEMEN',
									regexfind('ZAMBIA', country, 0)<>'' => 'ZAMBIA',
									regexfind('ZIMBABWE', country, 0)<>'' => 'ZIMBABWE',
									'');							
		return cntry;
	end;
	
	export fCountryAbbr(string country):= function
		abbr := map(//trim(country, left, right) = 'AF' => 'AFGHANISTAN',
								//trim(country, left, right) = 'AX' => 'ALAND_ISLANDS',
								//trim(country, left, right) = 'AL' => 'ALBANIA',
								//trim(country, left, right) = 'DZ' => 'ALGERIA',
								trim(country, left, right) = 'AS' => 'AMERICAN_SAMOA',
								//trim(country, left, right) = 'AD' => 'ANDORRA',
								//trim(country, left, right) = 'AO' => 'ANGOLA',
								//trim(country, left, right) = 'AI' => 'ANGUILLA',
								//trim(country, left, right) = 'AQ' => 'ANTARCTICA',
								//trim(country, left, right) = 'AG' => 'ANTIGUA_AND_BARBUDA',
								//trim(country, left, right) = 'AR' => 'ARGENTINA',
								//trim(country, left, right) = 'AM' => 'ARMENIA',
								//trim(country, left, right) = 'AW' => 'ARUBA',
								trim(country, left, right) = 'AU' => 'AUSTRALIA',
								//trim(country, left, right) = 'AT' => 'AUSTRIA',
								//trim(country, left, right) = 'AZ' => 'AZERBAIJAN',
								trim(country, left, right) = 'BS' => 'BAHAMAS',
								//trim(country, left, right) = 'BH' => 'BAHRAIN',
								//trim(country, left, right) = 'BD' => 'BANGLADESH',
								//trim(country, left, right) = 'BB' => 'BARBADOS',
								//trim(country, left, right) = 'BY' => 'BELARUS',
								//trim(country, left, right) = 'BE' => 'BELGIUM',
								//trim(country, left, right) = 'BZ' => 'BELIZE',
								//trim(country, left, right) = 'BJ' => 'BENIN',
								//trim(country, left, right) = 'BM' => 'BERMUDA',
								//trim(country, left, right) = 'BT' => 'BHUTAN',
								//trim(country, left, right) = 'BO' => 'BOLIVIA',
								//trim(country, left, right) = 'BQ' => 'BONAIRE',
								//trim(country, left, right) = 'BA' => 'BOSNIA_AND_HERZEGOVINA',
								//trim(country, left, right) = 'BW' => 'BOTSWANA',
								//trim(country, left, right) = 'BV' => 'BOUVET_ISLAND',
								trim(country, left, right) = 'BR' => 'BRAZIL',
								//trim(country, left, right) = 'IO' => 'BRITISH_INDIAN_OCEAN_TERRITORY',
								//trim(country, left, right) = 'BN' => 'BRUNEI_DARUSSALAM',
								//trim(country, left, right) = 'BG' => 'BULGARIA',
								//trim(country, left, right) = 'BF' => 'BURKINA_FASO',
								//trim(country, left, right) = 'BI' => 'BURUNDI',
								//trim(country, left, right) = 'KH' => 'CAMBODIA',
								//trim(country, left, right) = 'CM' => 'CAMEROON',
								trim(country, left, right) in ['BC','CA','ON','QC','SK'] => 'CANADA',
								//trim(country, left, right) = 'CV' => 'CAPE_VERDE',
								//trim(country, left, right) = 'KY' => 'CAYMAN_ISLANDS',
								//trim(country, left, right) = 'CF' => 'CENTRAL_AFRICAN_REPUBLIC',
								//trim(country, left, right) = 'TD' => 'CHAD',
								//trim(country, left, right) = 'CL' => 'CHILE',
								trim(country, left, right) in ['HK'] => 'CHINA',
								//trim(country, left, right) = 'CX' => 'CHRISTMAS_ISLAND',
								//trim(country, left, right) = 'CC' => 'COCOS',
								trim(country, left, right) = 'CO' => 'COLOMBIA',
								//trim(country, left, right) = 'KM' => 'COMOROS',
								//trim(country, left, right) in ['CG','CD'] => 'CONGO',
								//trim(country, left, right) = 'CK' => 'COOK_ISLANDS',
								//trim(country, left, right) = 'CR' => 'COSTA_RICA',
								//trim(country, left, right) = 'CI' => 'COTE_D_IVOIRE',
								//trim(country, left, right) = 'HR' => 'CROATIA',
								//trim(country, left, right) = 'CU' => 'CUBA',
								//trim(country, left, right) = 'CW' => 'CURACAO',
								//trim(country, left, right) = 'CY' => 'CYPRUS',
								//trim(country, left, right) = 'CZ' => 'CZECH_REPUBLIC',
								//trim(country, left, right) = 'DK' => 'DENMARK',
								//trim(country, left, right) = 'DJ' => 'DJIBOUTI',
								//trim(country, left, right) = 'DM' => 'DOMINICA',
								//trim(country, left, right) = 'DO' => 'DOMINICAN_REPUBLIC',
								//trim(country, left, right) = 'EC' => 'ECUADOR',
								//trim(country, left, right) = 'EG' => 'EGYPT',
								//trim(country, left, right) = 'SV' => 'EL_SALVADOR',
								//trim(country, left, right) = 'GQ' => 'EQUATORIAL_GUINEA',
								//trim(country, left, right) = 'ER' => 'ERITREA',
								//trim(country, left, right) = 'EE' => 'ESTONIA',
								//trim(country, left, right) = 'ET' => 'ETHIOPIA',
								//trim(country, left, right) = 'FK' => 'FALKLAND_ISLANDS',
								//trim(country, left, right) = 'FO' => 'FAROE_ISLANDS',
								//trim(country, left, right) = 'FJ' => 'FIJI',
								//trim(country, left, right) = 'FI' => 'FINLAND',
								trim(country, left, right) = 'FR' => 'FRANCE',
								//trim(country, left, right) = 'GF' => 'FRENCH_GUIANA',
								//trim(country, left, right) = 'PF' => 'FRENCH_POLYNESIA',
								//trim(country, left, right) = 'TF' => 'FRENCH_SOUTHERN_TERRITORIES',
								//trim(country, left, right) = 'GA' => 'GABON',
								//trim(country, left, right) = 'GM' => 'GAMBIA',
								//trim(country, left, right) = 'GE' => 'GEORGIA',
								//trim(country, left, right) = 'DE' => 'GERMANY',
								//trim(country, left, right) = 'GH' => 'GHANA',
								//trim(country, left, right) = 'GI' => 'GIBRALTAR',
								//trim(country, left, right) = 'GR' => 'GREECE',
								//trim(country, left, right) = 'GL' => 'GREENLAND',
								//trim(country, left, right) = 'GD' => 'GRENADA',
								//trim(country, left, right) = 'GP' => 'GUADELOUPE',
								trim(country, left, right) = 'GU' => 'GUAM',
								//trim(country, left, right) = 'GT' => 'GUATEMALA',
								//trim(country, left, right) = 'GG' => 'GUERNSEY',
								//trim(country, left, right) = 'GN' => 'GUINEA',
								//trim(country, left, right) = 'GW' => 'GUINEA-BISSAU',
								//trim(country, left, right) = 'GY' => 'GUYANA',
								//trim(country, left, right) = 'HT' => 'HAITI',
								//trim(country, left, right) = 'HM' => 'HEARD_ISLAND_AND_MCDONALD_ISLANDS',
								//trim(country, left, right) = 'VA' => 'HOLY_SEE',
								//trim(country, left, right) = 'HN' => 'HONDURAS',
								trim(country, left, right) = 'HK' => 'CHINA',//'HONG_KONG',
								//trim(country, left, right) = 'HU' => 'HUNGARY',
								//trim(country, left, right) = 'IS' => 'ICELAND',
								//trim(country, left, right) = 'IN' => 'INDIA',
								//trim(country, left, right) = 'ID' => 'INDONESIA',
								//trim(country, left, right) = 'IR' => 'IRAN',
								//trim(country, left, right) = 'IQ' => 'IRAQ',
								trim(country, left, right) = 'IE' => 'IRELAND',
								//trim(country, left, right) = 'IM' => 'ISLE_OF_MAN',
								//trim(country, left, right) = 'IL' => 'ISRAEL',
								trim(country, left, right) = 'IT' => 'ITALY',
								trim(country, left, right) = 'JM' => 'JAMAICA',
								trim(country, left, right) = 'JP' => 'JAPAN',
								//trim(country, left, right) = 'JO' => 'JORDAN',
								//trim(country, left, right) = 'KZ' => 'KAZAKHSTAN',
								//trim(country, left, right) = 'KE' => 'KENYA',
								//trim(country, left, right) = 'KI' => 'KIRIBATI',
								//trim(country, left, right) = 'KP' => 'KOREA',
								//trim(country, left, right) = 'KR' => 'KOREA',
								//trim(country, left, right) = 'KW' => 'KUWAIT',
								//trim(country, left, right) = 'KG' => 'KYRGYZSTAN',
								//trim(country, left, right) = 'LA' => 'LAO_PEOPLES_DEMOCRATIC_REPUBLIC',
								//trim(country, left, right) = 'LV' => 'LATVIA',
								//trim(country, left, right) = 'LB' => 'LEBANON',
								//trim(country, left, right) = 'LS' => 'LESOTHO',
								//trim(country, left, right) = 'LR' => 'LIBERIA',
								//trim(country, left, right) = 'LY' => 'LIBYA',
								//trim(country, left, right) = 'LI' => 'LIECHTENSTEIN',
								//trim(country, left, right) = 'LT' => 'LITHUANIA',
								//trim(country, left, right) = 'LU' => 'LUXEMBOURG',
								//trim(country, left, right) = 'MO' => 'MACAO',
								//trim(country, left, right) = 'MK' => 'MACEDONIA',
								//trim(country, left, right) = 'MG' => 'MADAGASCAR',
								//trim(country, left, right) = 'MW' => 'MALAWI',
								//trim(country, left, right) = 'MY' => 'MALAYSIA',
								//trim(country, left, right) = 'MV' => 'MALDIVES',
								//trim(country, left, right) = 'ML' => 'MALI',
								//trim(country, left, right) = 'MT' => 'MALTA',
								trim(country, left, right) = 'MH' => 'MARSHALL_ISLANDS',
								//trim(country, left, right) = 'MQ' => 'MARTINIQUE',
								//trim(country, left, right) = 'MR' => 'MAURITANIA',
								//trim(country, left, right) = 'MU' => 'MAURITIUS',
								//trim(country, left, right) = 'YT' => 'MAYOTTE',
								trim(country, left, right) = 'MX' => 'MEXICO',
								trim(country, left, right) = 'FM' => 'MICRONESIA',
								//trim(country, left, right) = 'MD' => 'MOLDOVA',
								trim(country, left, right) = 'MC' => 'MONACO',
								//trim(country, left, right) = 'MN' => 'MONGOLIA',
								//trim(country, left, right) = 'ME' => 'MONTENEGRO',
								//trim(country, left, right) = 'MS' => 'MONTSERRAT',
								//trim(country, left, right) = 'MA' => 'MOROCCO',
								//trim(country, left, right) = 'MZ' => 'MOZAMBIQUE',
								//trim(country, left, right) = 'MM' => 'MYANMAR',
								//trim(country, left, right) = 'NA' => 'NAMIBIA',
								//trim(country, left, right) = 'NR' => 'NAURU',
								//trim(country, left, right) = 'NP' => 'NEPAL',
								trim(country, left, right) = 'NL' => 'NETHERLANDS',
								//trim(country, left, right) = 'NC' => 'NEW_CALEDONIA',
								trim(country, left, right) = 'NZ' => 'NEW_ZEALAND',
								//trim(country, left, right) = 'NI' => 'NICARAGUA',
								//trim(country, left, right) = 'NE' => 'NIGER',
								//trim(country, left, right) = 'NG' => 'NIGERIA',
								//trim(country, left, right) = 'NU' => 'NIUE',
								//trim(country, left, right) = 'NF' => 'NORFOLK_ISLAND',
								trim(country, left, right) = 'MP' => 'NORTHERN_MARIANA_ISLANDS',
								trim(country, left, right) = 'NO' => 'NORWAY',
								//trim(country, left, right) = 'OM' => 'OMAN',
								//trim(country, left, right) = 'PK' => 'PAKISTAN',
								trim(country, left, right) = 'PW' => 'PALAU',
								//trim(country, left, right) = 'PS' => 'PALESTINE',
								//trim(country, left, right) = 'PA' => 'PANAMA',
								//trim(country, left, right) = 'PG' => 'PAPUA_NEW_GUINEA',
								//trim(country, left, right) = 'PY' => 'PARAGUAY',
								//trim(country, left, right) = 'PE' => 'PERU',
								//trim(country, left, right) = 'PH' => 'PHILIPPINES',
								//trim(country, left, right) = 'PN' => 'PITCAIRN',
								//trim(country, left, right) = 'PL' => 'POLAND',
								//trim(country, left, right) = 'PT' => 'PORTUGAL',
								trim(country, left, right) = 'PR' => 'PUERTO_RICO',
								//trim(country, left, right) = 'QA' => 'QATAR',
								//trim(country, left, right) = 'RE' => 'REUNION',
								//trim(country, left, right) = 'RO' => 'ROMANIA',
								trim(country, left, right) = 'RU' => 'RUSSIAN_FEDERATION',
								//trim(country, left, right) = 'RW' => 'RWANDA',
								//trim(country, left, right) = 'BL' => 'SAINT_BARTHÃ‰LEMY',
								//trim(country, left, right) = 'SH' => 'SAINT_HELENA',
								//trim(country, left, right) = 'KN' => 'SAINT_KITTS_AND_NEVIS',
								//trim(country, left, right) = 'LC' => 'SAINT_LUCIA',
								//trim(country, left, right) = 'MF' => 'SAINT_MARTIN_',
								//trim(country, left, right) = 'PM' => 'SAINT_PIERRE_AND_MIQUELON',
								//trim(country, left, right) = 'VC' => 'SAINT_VINCENT_AND_THE_GRENADINES',
								//trim(country, left, right) = 'WS' => 'SAMOA',
								//trim(country, left, right) = 'SM' => 'SAN_MARINO',
								//trim(country, left, right) = 'ST' => 'SAO_TOME_AND_PRINCIPE',
								//trim(country, left, right) = 'SA' => 'SAUDI_ARABIA',
								//trim(country, left, right) = 'SN' => 'SENEGAL',
								//trim(country, left, right) = 'RS' => 'SERBIA',
								//trim(country, left, right) = 'SC' => 'SEYCHELLES',
								//trim(country, left, right) = 'SL' => 'SIERRA_LEONE',
								//trim(country, left, right) = 'SG' => 'SINGAPORE',
								//trim(country, left, right) = 'SX' => 'SAINT_MAARTEN',
								//trim(country, left, right) = 'SK' => 'SLOVAKIA',
								//trim(country, left, right) = 'SI' => 'SLOVENIA',
								//trim(country, left, right) = 'SB' => 'SOLOMON_ISLANDS',
								//trim(country, left, right) = 'SO' => 'SOMALIA',
								//trim(country, left, right) = 'ZA' => 'SOUTH_AFRICA',
								//trim(country, left, right) = 'GS' => 'SOUTH_GEORGIA_AND_THE_SOUTH_SANDWICH_ISLANDS',
								//trim(country, left, right) = 'SS' => 'SOUTH_SUDAN',
								trim(country, left, right) = 'ES' => 'SPAIN',
								//trim(country, left, right) = 'LK' => 'SRI_LANKA',
								//trim(country, left, right) = 'SD' => 'SUDAN',
								//trim(country, left, right) = 'SR' => 'SURINAME',
								//trim(country, left, right) = 'SJ' => 'SVALBARD_AND_JAN_MAYEN',
								//trim(country, left, right) = 'SZ' => 'SWAZILAND',
								//trim(country, left, right) = 'SE' => 'SWEDEN',
								trim(country, left, right) = 'CH' => 'SWITZERLAND',
								//trim(country, left, right) = 'SY' => 'SYRIAN_ARAB_REPUBLIC',
								//trim(country, left, right) = 'TW' => 'TAIWAN',
								//trim(country, left, right) = 'TJ' => 'TAJIKISTAN',
								//trim(country, left, right) = 'TZ' => 'TANZANIA',
								//trim(country, left, right) = 'TH' => 'THAILAND',
								//trim(country, left, right) = 'TL' => 'TIMOR-LESTE',
								//trim(country, left, right) = 'TG' => 'TOGO',
								//trim(country, left, right) = 'TK' => 'TOKELAU',
								//trim(country, left, right) = 'TO' => 'TONGA',
								//trim(country, left, right) = 'TT' => 'TRINIDAD_AND_TOBAGO',
								//trim(country, left, right) = 'TN' => 'TUNISIA',
								//trim(country, left, right) = 'TR' => 'TURKEY',
								//trim(country, left, right) = 'TM' => 'TURKMENISTAN',
								//trim(country, left, right) = 'TC' => 'TURKS_AND_CAICOS_ISLANDS',
								//trim(country, left, right) = 'TV' => 'TUVALU',
								//trim(country, left, right) = 'UG' => 'UGANDA',
								//trim(country, left, right) = 'UA' => 'UKRAINE',
								//trim(country, left, right) = 'AE' => 'UNITED_ARAB_EMIRATES',
								//trim(country, left, right) = 'GB' => 'UNITED_KINGDOM',
								trim(country, left, right) = 'US' => 'UNITED_STATES',
								trim(country, left, right) in  ['AA','AE','AP'] => 'ARMED_FORCES',
								//trim(country, left, right) = 'UM' => 'UNITED_STATES_MINOR_OUTLYING_ISLANDS',
								//trim(country, left, right) = 'UY' => 'URUGUAY',
								//trim(country, left, right) = 'UZ' => 'UZBEKISTAN',
								//trim(country, left, right) = 'VU' => 'VANUATU',
								//trim(country, left, right) = 'VE' => 'VENEZUELA',
								//trim(country, left, right) = 'VN' => 'VIETNAM',
								//trim(country, left, right) = 'VG' => 'BRITISH_VIRGIN_ISLANDS',
								trim(country, left, right) = 'VI' => 'VIRGIN_ISLANDS',
								//trim(country, left, right) = 'WF' => 'WALLIS_AND_FUTUNA',
								//trim(country, left, right) = 'EH' => 'WESTERN_SAHARA',
								//trim(country, left, right) = 'YE' => 'YEMEN',
								//trim(country, left, right) = 'ZM' => 'ZAMBIA',
								//trim(country, left, right) = 'ZW' => 'ZIMBABWE',
								'');
		return abbr;
	end;
	
	//Use for Deeds Only
	export fCountryAbbrDeed(string country, string vendor):= function
		abbrD := map(regexfind(', AU, XX$', country, 0)<>'' => 'AUSTRALIA',
									regexfind(' CEP [0-9]+|, BR, XX$', country, 0)<>'' => 'BRAZIL',
									regexfind(', HK, XX$', country, 0)<>'' => 'CHINA',
									regexfind(', DO, XX$', country, 0)<>'' => 'DOMINICAN_REPUBLIC',
									regexfind(', FI$', country, 0)<>'' and vendor in ['F','S'] => 'FINLAND',
									regexfind(', GE$', country, 0)<>'' => 'GERMANY',
									regexfind(', IE, XX$', country, 0)<>'' => 'IRELAND',
									regexfind(', IT, XX$', country, 0)<>'' => 'ITALY',
									regexfind(', JA$|, JP, XX$', country, 0)<>'' => 'JAPAN',
									regexfind(', NL, XX$', country, 0)<>'' => 'NETHERLANDS',
									regexfind(', PH, XX$', country, 0)<>'' => 'PHILIPPINES',
									regexfind(', SP$', country, 0)<>'' => 'SPAIN',
									regexfind(', CH, XX$', country, 0)<>'' => 'SWITZERLAND',
									regexfind(', TW, XX$', country, 0)<>'' => 'TAIWAN',
									regexfind(', EN$|, UK, XX$', country, 0)<>'' => 'UNITED_KINGDOM',
									'');								
		return abbrD;
	end;

	export fisUS(string country) := function
		isUS := if(trim(country, left, right) in ['AL','AK','AZ','AR','CA','CO','CT','DE','FL','GA',
																																						'HI','ID','IL','IN','IA','KS','KY','LA','ME','MD',
																																						'MA','MI','MN','MS','MO','MT','NE','NV','NH','NJ',
																																						'NM','NY','NC','ND','OH','OK','OR','PA','RI','SC',
																																						'SD','TN','TX','UT','VT','VA','WA','WV','WI','WY',
																																						'DC','ALABAMA','ALASKA','ARIZONA','ARKANSAS','CALIFORNIA',
																																						'COLORADO','CONNECTICUT','DELAWARE','FLORIDA','GEORGIA',
																																						'HAWAII','IDAHO','ILLINOIS','INDIANA','IOWA','KANSAS',
																																						'KENTUCKY','LOUISIANA','MAINE','MARYLAND','MASSACHUSETTS',
																																						'MICHIGAN','MINNESOTA','MISSISSIPPI','MISSOURI',
																																						'MONTANA','NEBRASKA','NEVADA','NEW HAMPSHIRE','NEW JERSEY',
																																						'NEW MEXICO','NEW YORK','NORTH CAROLINA','NORTH DAKOTA',
																																						'OHIO','OKLAHOMA','OREGON','PENNSYLVANIA','RHODE ISLAND',
																																						'SOUTH CAROLINA','SOUTH DAKOTA','TENNESSEE','TEXAS',
																																						'UTAH','VERMONT','VIRGINIA','WASHINGTON','WEST VIRGINIA',
																																						'WISCONSIN','WYOMING','DISTRICT OF COLUMBIA'],
								true,
								false);
			
		return isUS;
	end;

	export fCountryCode(string country):= function
		ctry := map(trim(country, left, right) = 'AFGHANISTAN'=> 'AFG',
								trim(country, left, right) = 'ALAND_ISLANDS'=> 'ALA',
								trim(country, left, right) = 'ALBANIA'=> 'ALB',
								trim(country, left, right) = 'ALGERIA'=> 'DZA',
								trim(country, left, right) = 'AMERICAN_SAMOA'=> 'ASM',
								trim(country, left, right) = 'ANDORRA'=> 'AND',
								trim(country, left, right) = 'ANGOLA'=> 'AGO',
								trim(country, left, right) = 'ANGUILLA'=> 'AIA',
								trim(country, left, right) = 'ANTARCTICA'=> 'ATA',
								trim(country, left, right) = 'ANTIGUA_AND_BARBUDA'=> 'ATG',
								trim(country, left, right) = 'ARGENTINA'=> 'ARG',
								trim(country, left, right) = 'ARMENIA'=> 'ARM',
								trim(country, left, right) = 'ARUBA'=> 'ABW',
								trim(country, left, right) = 'AUSTRALIA'=> 'AUS',
								trim(country, left, right) = 'AUSTRIA'=> 'AUT',
								trim(country, left, right) = 'AZERBAIJAN'=> 'AZE',
								trim(country, left, right) = 'BAHAMAS'=> 'BHS',
								trim(country, left, right) = 'BAHRAIN'=> 'BHR',
								trim(country, left, right) = 'BANGLADESH'=> 'BGD',
								trim(country, left, right) = 'BARBADOS'=> 'BRB',
								trim(country, left, right) = 'BELARUS'=> 'BLR',
								trim(country, left, right) = 'BELGIUM'=> 'BEL',
								trim(country, left, right) = 'BELIZE'=> 'BLZ',
								trim(country, left, right) = 'BENIN'=> 'BEN',
								trim(country, left, right) = 'BERMUDA'=> 'BMU',
								trim(country, left, right) = 'BHUTAN'=> 'BTN',
								trim(country, left, right) = 'BOLIVIA'=> 'BOL',
								trim(country, left, right) = 'BONAIRE'=> 'BES',
								trim(country, left, right) = 'BOSNIA_AND_HERZEGOVINA'=> 'BIH',
								trim(country, left, right) = 'BOTSWANA'=> 'BWA',
								trim(country, left, right) = 'BOUVET_ISLAND'=> 'BVT',
								trim(country, left, right) = 'BRAZIL'=> 'BRA',
								trim(country, left, right) = 'BRITISH_INDIAN_OCEAN_TERRITORY'=> 'IOT',
								trim(country, left, right) = 'BRUNEI_DARUSSALAM'=> 'BRN',
								trim(country, left, right) = 'BULGARIA'=> 'BGR',
								trim(country, left, right) = 'BURKINA_FASO'=> 'BFA',
								trim(country, left, right) = 'BURUNDI'=> 'BDI',
								trim(country, left, right) = 'CABO_VERDE'=> 'CPV',
								trim(country, left, right) = 'CAMBODIA'=> 'KHM',
								trim(country, left, right) = 'CAMEROON'=> 'CMR',
								trim(country, left, right) = 'CANADA'=> 'CAN',
								trim(country, left, right) = 'CAYMAN_ISLANDS'=> 'CYM',
								trim(country, left, right) = 'CENTRAL_AFRICAN_REPUBLIC'=> 'CAF',
								trim(country, left, right) = 'CHAD'=> 'TCD',
								trim(country, left, right) = 'CHILE'=> 'CHL',
								trim(country, left, right) = 'CHINA'=> 'CHN',
								trim(country, left, right) = 'CHRISTMAS_ISLAND'=> 'CXR',
								trim(country, left, right) = 'COCOS'=> 'CCK',
								trim(country, left, right) = 'COLOMBIA'=> 'COL',
								trim(country, left, right) = 'COMOROS'=> 'COM',
								trim(country, left, right) = 'CONGO'=> 'COG',
								//trim(country, left, right) = ''=> 'COD',
								trim(country, left, right) = 'COOK_ISLANDS'=> 'COK',
								trim(country, left, right) = 'COSTA_RICA'=> 'CRI',
								trim(country, left, right) = 'COTE_D_IVOIRE'=> 'CIV',
								trim(country, left, right) = 'CROATIA'=> 'HRV',
								trim(country, left, right) = 'CUBA'=> 'CUB',
								trim(country, left, right) = 'CURACAO'=> 'CUW',
								trim(country, left, right) = 'CYPRUS'=> 'CYP',
								trim(country, left, right) = 'CZECH_REPUBLIC'=> 'CZE',
								trim(country, left, right) = 'DENMARK'=> 'DNK',
								trim(country, left, right) = 'DJIBOUTI'=> 'DJI',
								trim(country, left, right) = 'DOMINICA'=> 'DMA',
								trim(country, left, right) = 'DOMINICAN_REPUBLIC'=> 'DOM',
								trim(country, left, right) = 'ECUADOR'=> 'ECU',
								trim(country, left, right) = 'EGYPT'=> 'EGY',
								trim(country, left, right) = 'EL_SALVADOR'=> 'SLV',
								trim(country, left, right) = 'EQUATORIAL_GUINEA'=> 'GNQ',
								trim(country, left, right) = 'ERITREA'=> 'ERI',
								trim(country, left, right) = 'ESTONIA'=> 'EST',
								trim(country, left, right) = 'ETHIOPIA'=> 'ETH',
								trim(country, left, right) = 'FALKLAND_ISLANDS'=> 'FLK',
								trim(country, left, right) = 'FAROE_ISLANDS'=> 'FRO',
								trim(country, left, right) = 'FIJI'=> 'FJI',
								trim(country, left, right) = 'FINLAND'=> 'FIN',
								trim(country, left, right) = 'FRANCE'=> 'FRA',
								trim(country, left, right) = 'FRENCH_GUIANA'=> 'GUF',
								trim(country, left, right) = 'FRENCH_POLYNESIA'=> 'PYF',
								trim(country, left, right) = 'FRENCH_SOUTHERN_TERRITORIES'=> 'ATF',
								trim(country, left, right) = 'GABON'=> 'GAB',
								trim(country, left, right) = 'GAMBIA'=> 'GMB',
								trim(country, left, right) = 'GEORGIA'=> 'GEO',
								trim(country, left, right) = 'GERMANY'=> 'DEU',
								trim(country, left, right) = 'GHANA'=> 'GHA',
								trim(country, left, right) = 'GIBRALTAR'=> 'GIB',
								trim(country, left, right) = 'GREECE'=> 'GRC',
								trim(country, left, right) = 'GREENLAND'=> 'GRL',
								trim(country, left, right) = 'GRENADA'=> 'GRD',
								trim(country, left, right) = 'GUADELOUPE'=> 'GLP',
								trim(country, left, right) = 'GUAM'=> 'GUM',
								trim(country, left, right) = 'GUATEMALA'=> 'GTM',
								trim(country, left, right) = 'GUERNSEY'=> 'GGY',
								trim(country, left, right) = 'GUINEA'=> 'GIN',
								trim(country, left, right) = 'GUINEA-BISSAU'=> 'GNB',
								trim(country, left, right) = 'GUYANA'=> 'GUY',
								trim(country, left, right) = 'HAITI'=> 'HTI',
								trim(country, left, right) = 'HEARD_ISLAND_AND_MCDONALD_ISLANDS'=> 'HMD',
								trim(country, left, right) = 'HOLY_SEE'=> 'VAT',
								trim(country, left, right) = 'HONDURAS'=> 'HND',
								trim(country, left, right) = 'HONG_KONG'=> 'HKG',
								trim(country, left, right) = 'HUNGARY'=> 'HUN',
								trim(country, left, right) = 'ICELAND'=> 'ISL',
								trim(country, left, right) = 'INDIA'=> 'IND',
								trim(country, left, right) = 'INDONESIA'=> 'IDN',
								trim(country, left, right) = 'IRAN'=> 'IRN',
								trim(country, left, right) = 'IRAQ'=> 'IRQ',
								trim(country, left, right) = 'IRELAND'=> 'IRL',
								trim(country, left, right) = 'ISLE_OF_MAN'=> 'IMN',
								trim(country, left, right) = 'ISRAEL'=> 'ISR',
								trim(country, left, right) = 'ITALY'=> 'ITA',
								trim(country, left, right) = 'JAMAICA'=> 'JAM',
								trim(country, left, right) = 'JAPAN'=> 'JPN',
								//trim(country, left, right) = 'JERSEY'=> 'JEY',
								trim(country, left, right) = 'JORDAN'=> 'JOR',
								trim(country, left, right) = 'KAZAKHSTAN'=> 'KAZ',
								trim(country, left, right) = 'KENYA'=> 'KEN',
								trim(country, left, right) = 'KIRIBATI'=> 'KIR',
								//trim(country, left, right) = ''=> 'PRK',
								trim(country, left, right) = 'KOREA'=> 'KOR',
								trim(country, left, right) = 'KUWAIT'=> 'KWT',
								trim(country, left, right) = 'KYRGYZSTAN'=> 'KGZ',
								trim(country, left, right) = 'LAO_PEOPLES_DEMOCRATIC_REPUBLIC'=> 'LAO',
								trim(country, left, right) = 'LATVIA'=> 'LVA',
								trim(country, left, right) = 'LEBANON'=> 'LBN',
								trim(country, left, right) = 'LESOTHO'=> 'LSO',
								trim(country, left, right) = 'LIBERIA'=> 'LBR',
								trim(country, left, right) = 'LIBYA'=> 'LBY',
								trim(country, left, right) = 'LIECHTENSTEIN'=> 'LIE',
								trim(country, left, right) = 'LITHUANIA'=> 'LTU',
								trim(country, left, right) = 'LUXEMBOURG'=> 'LUX',
								trim(country, left, right) = 'MACAO'=> 'MAC',
								trim(country, left, right) = 'MACEDONIA'=> 'MKD',
								trim(country, left, right) = 'MADAGASCAR'=> 'MDG',
								trim(country, left, right) = 'MALAWI'=> 'MWI',
								trim(country, left, right) = 'MALAYSIA'=> 'MYS',
								trim(country, left, right) = 'MALDIVES'=> 'MDV',
								trim(country, left, right) = 'MALI'=> 'MLI',
								trim(country, left, right) = 'MALTA'=> 'MLT',
								trim(country, left, right) = 'MARSHALL_ISLANDS'=> 'MHL',
								trim(country, left, right) = 'MARTINIQUE'=> 'MTQ',
								trim(country, left, right) = 'MAURITANIA'=> 'MRT',
								trim(country, left, right) = 'MAURITIUS'=> 'MUS',
								trim(country, left, right) = 'MAYOTTE'=> 'MYT',
								trim(country, left, right) = 'MEXICO'=> 'MEX',
								trim(country, left, right) = 'MICRONESIA'=> 'FSM',
								trim(country, left, right) = 'MOLDOVA'=> 'MDA',
								trim(country, left, right) = 'MONACO'=> 'MCO',
								trim(country, left, right) = 'MONGOLIA'=> 'MNG',
								trim(country, left, right) = 'MONTENEGRO'=> 'MNE',
								trim(country, left, right) = 'MONTSERRAT'=> 'MSR',
								trim(country, left, right) = 'MOROCCO'=> 'MAR',
								trim(country, left, right) = 'MOZAMBIQUE'=> 'MOZ',
								trim(country, left, right) = 'MYANMAR'=> 'MMR',
								trim(country, left, right) = 'NAMIBIA'=> 'NAM',
								trim(country, left, right) = 'NAURU'=> 'NRU',
								trim(country, left, right) = 'NEPAL'=> 'NPL',
								trim(country, left, right) = 'NETHERLANDS'=> 'NLD',
								trim(country, left, right) = 'NEW_CALEDONIA'=> 'NCL',
								trim(country, left, right) = 'NEW_ZEALAND'=> 'NZL',
								trim(country, left, right) = 'NICARAGUA'=> 'NIC',
								trim(country, left, right) = 'NIGER'=> 'NER',
								trim(country, left, right) = 'NIGERIA'=> 'NGA',
								trim(country, left, right) = 'NIUE'=> 'NIU',
								trim(country, left, right) = 'NORFOLK_ISLAND'=> 'NFK',
								trim(country, left, right) = 'NORTHERN_MARIANA_ISLANDS'=> 'MNP',
								trim(country, left, right) = 'NORWAY'=> 'NOR',
								trim(country, left, right) = 'OMAN'=> 'OMN',
								trim(country, left, right) = 'PAKISTAN'=> 'PAK',
								trim(country, left, right) = 'PALAU'=> 'PLW',
								trim(country, left, right) = 'PALESTINE'=> 'PSE',
								trim(country, left, right) = 'PANAMA'=> 'PAN',
								trim(country, left, right) = 'PAPUA_NEW_GUINEA'=> 'PNG',
								trim(country, left, right) = 'PARAGUAY'=> 'PRY',
								trim(country, left, right) = 'PERU'=> 'PER',
								trim(country, left, right) = 'PHILIPPINES'=> 'PHL',
								trim(country, left, right) = 'PITCAIRN'=> 'PCN',
								trim(country, left, right) = 'POLAND'=> 'POL',
								trim(country, left, right) = 'PORTUGAL'=> 'PRT',
								trim(country, left, right) = 'PUERTO_RICO'=> 'PRI',
								trim(country, left, right) = 'QATAR'=> 'QAT',
								trim(country, left, right) = 'REUNION'=> 'REU',
								trim(country, left, right) = 'ROMANIA'=> 'ROU',
								trim(country, left, right) = 'RUSSIAN_FEDERATION'=> 'RUS',
								trim(country, left, right) = 'RWANDA'=> 'RWA',
								trim(country, left, right) = 'SAINT_BARTHÃ‰LEMY'=> 'BLM',
								trim(country, left, right) = 'SAINT_HELENA'=> 'SHN',
								trim(country, left, right) = 'SAINT_KITTS_AND_NEVIS'=> 'KNA',
								trim(country, left, right) = 'SAINT_LUCIA'=> 'LCA',
								trim(country, left, right) = 'SAINT_MAARTIN'=> 'MAF',
								trim(country, left, right) = 'SAINT_PIERRE_AND_MIQUELON'=> 'SPM',
								trim(country, left, right) = 'SAINT_VINCENT_AND_THE_GRENADINES'=> 'VCT',
								trim(country, left, right) = 'SAMOA'=> 'WSM',
								trim(country, left, right) = 'SAN_MARINO'=> 'SMR',
								trim(country, left, right) = 'SAO_TOME_AND_PRINCIPE'=> 'STP',
								trim(country, left, right) = 'SAUDI_ARABIA'=> 'SAU',
								trim(country, left, right) = 'SENEGAL'=> 'SEN',
								trim(country, left, right) = 'SERBIA'=> 'SRB',
								trim(country, left, right) = 'SEYCHELLES'=> 'SYC',
								trim(country, left, right) = 'SIERRA_LEONE'=> 'SLE',
								trim(country, left, right) = 'SINGAPORE'=> 'SGP',
								trim(country, left, right) = 'SAINT_MAARTEN'=> 'SXM',
								trim(country, left, right) = 'SLOVAKIA'=> 'SVK',
								trim(country, left, right) = 'SLOVENIA'=> 'SVN',
								trim(country, left, right) = 'SOLOMON_ISLANDS'=> 'SLB',
								trim(country, left, right) = 'SOMALIA'=> 'SOM',
								trim(country, left, right) = 'SOUTH_AFRICA'=> 'ZAF',
								trim(country, left, right) = 'SOUTH_GEORGIA_AND_THE_SOUTH_SANDWICH_ISLANDS'=> 'SGS',
								trim(country, left, right) = 'SOUTH_SUDAN'=> 'SSD',
								trim(country, left, right) = 'SPAIN'=> 'ESP',
								trim(country, left, right) = 'SRI_LANKA'=> 'LKA',
								trim(country, left, right) = 'SUDAN'=> 'SDN',
								trim(country, left, right) = 'SURINAME'=> 'SUR',
								trim(country, left, right) = 'SVALBARD_AND_JAN_MAYEN'=> 'SJM',
								trim(country, left, right) = 'SWAZILAND'=> 'SWZ',
								trim(country, left, right) = 'SWEDEN'=> 'SWE',
								trim(country, left, right) = 'SWITZERLAND'=> 'CHE',
								trim(country, left, right) = 'SYRIAN_ARAB_REPUBLIC'=> 'SYR',
								trim(country, left, right) = 'TAIWAN'=> 'TWN',
								trim(country, left, right) = 'TAJIKISTAN'=> 'TJK',
								trim(country, left, right) = 'TANZANIA'=> 'TZA',
								trim(country, left, right) = 'THAILAND'=> 'THA',
								trim(country, left, right) = 'TIMOR-LESTE'=> 'TLS',
								trim(country, left, right) = 'TOGO'=> 'TGO',
								trim(country, left, right) = 'TOKELAU'=> 'TKL',
								trim(country, left, right) = 'TONGA'=> 'TON',
								trim(country, left, right) = 'TRINIDAD_AND_TOBAGO'=> 'TTO',
								trim(country, left, right) = 'TUNISIA'=> 'TUN',
								trim(country, left, right) = 'TURKEY'=> 'TUR',
								trim(country, left, right) = 'TURKMENISTAN'=> 'TKM',
								trim(country, left, right) = 'TURKS_AND_CAICOS_ISLANDS'=> 'TCA',
								trim(country, left, right) = 'TUVALU'=> 'TUV',
								trim(country, left, right) = 'UGANDA'=> 'UGA',
								trim(country, left, right) = 'UKRAINE'=> 'UKR',
								trim(country, left, right) = 'UNITED_ARAB_EMIRATES'=> 'ARE',
								trim(country, left, right) = 'UNITED_KINGDOM'=> 'GBR',
								trim(country, left, right) = 'UNITED_STATES'=> 'USA',
								trim(country, left, right) = 'ARMED_FORCES'=> 'AF',
								trim(country, left, right) = 'UNITED_STATES_MINOR_OUTLYING_ISLANDS'=> 'UMI',
								trim(country, left, right) = 'URUGUAY'=> 'URY',
								trim(country, left, right) = 'UZBEKISTAN'=> 'UZB',
								trim(country, left, right) = 'VANUATU'=> 'VUT',
								trim(country, left, right) = 'VENEZUELA'=> 'VEN',
								trim(country, left, right) = 'VIETNAM'=> 'VNM',
								//trim(country, left, right) = ''=> 'VGB',
								trim(country, left, right) = 'VIRGIN_ISLANDS'=> 'VIR',
								trim(country, left, right) = 'WALLIS_AND_FUTUNA'=> 'WLF',
								trim(country, left, right) = 'WESTERN_SAHARA'=> 'ESH',
								trim(country, left, right) = 'YEMEN'=> 'YEM',
								trim(country, left, right) = 'ZAMBIA'=> 'ZMB',
								trim(country, left, right) = 'ZIMBABWE'=> 'ZWE',
								'');
		return ctry;
	end;
	
	export fCountryZip(string country):= function
		zip := map(regexfind(', CN$| [ABCEGHJKLMNPRSTVXY][0-9][A-Z][ ]{0,1}[0-9][A-Z][0-9]$', country, 0)<>'' => 'CANADA',
								regexfind(' 009[0-9][0-9]$', country, 0)<>'' => 'PUERTO_RICO',
								regexfind('[A-Z][0-9A-Z]{1,3}[ ]{0,1}[0-9][A-Z][A-Z][ ,]{1}', country, 0)<>'' and regexfind('[A-Z][A-Z][ ][0-9][NRST][DHT]', country, 0)='' => 'UNITED_KINGDOM',
								'');
		return zip;
	end;
	
end;