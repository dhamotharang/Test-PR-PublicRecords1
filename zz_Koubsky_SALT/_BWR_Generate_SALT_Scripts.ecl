
/******************************************************************************************/
/* ****************************************************************************************
 * This script generates the two scripts needed to use SALT for Data Profiling:           *
 * 1.) It generates the SALT Specification (*.spc) file that you will run through the     *
 *   SALT tool on your computer. This creates all of the necessary ECL for running SALT   *
 *   analysis on your file.                                                               *
 * 2.) It generates the ECL Builder Window script to perform the SALT Data Profiling.     *
 ******************************************************************************************
 * Current SALT Version: 2.9 GOLD                                                         *
 ******************************************************************************************/
/******************************************************************************************/

// Your input file MUST be named *.In_Input_File and be placed in the same repository folder/module as your ModuleName.  If not you will need to manually edit the generated code...
InputFile := zz_Koubsky_SALT.In_Input_File;

// Set this to the Repository Module/Folder that you want the generated SALT to go to.  
/*** WARNING: This will overwrite anything you previously had in that folder that SALT generated! ***/
ModuleFolderName := 'zz_Koubsky_SALT';


/* ******************************************************************************************/
/********************************************************************************************/
/********************* DO NOT ALTER ANYTHING BELOW THIS LINE ********************************/
/********************************************************************************************/
/* ******************************************************************************************/
IMPORT SALT29;

SALT29.MAC_Default_SPC(InputFile, generatedSALTSpecification);

CleanedSALTLayout := RECORD
	STRING GeneratedSALTSpec := '';
END;

SALTSpecificationHeader := DATASET([
	{'MODULE:' + ModuleFolderName},
	{'FILENAME:Input_File'},
	{'// Comment out any fields below that you DO NOT need to perform analysis on.  Things like Seq and Account Number are good examples to comment out.'}
																		], CleanedSALTLayout);

generatedSALTSpecificationTemp := PROJECT(generatedSALTSpecification, TRANSFORM(CleanedSALTLayout, 
	SELF.GeneratedSALTSpec := MAP( // Purposefully blank out some lines of SALT Spec code generated by MAC_Default_SPC that aren't needed for Data Profiling
		LEFT.s = 'MODULE:<EnterModuleNameHere>'																																														=> '',
		LEFT.s = 'FILENAME:<FileName>'																																																		=> '',
		LEFT.s = '//Uncomment up to NINES for internal or external adl'																																		=> '',
		LEFT.s = '//IDFIELD:EXISTS:<NameOfIDField>'																																												=> '',
		LEFT.s = '//RIDFIELD:<NameOfRidField>'																																														=> '',
		LEFT.s = '//RECORDS:<NumberOfRecordsInDataFile>'																																									=> '',
		LEFT.s = '//POPULATION:<ExpectedNumberOfEntitiesInDataFile>'																																			=> '',
		LEFT.s = '//NINES:<Precision required 3 = 99.9%, 2 = 99% etc>'																																		=> '',
		LEFT.s = '//Uncomment Process if doing external adl'																																							=> '',
		LEFT.s = '//PROCESS:<ProcessName>'																																																=> '',
		LEFT.s = '//FIELDTYPE statements can be used to clean up (or check the cleaning) of individual fields'														=> '',
		LEFT.s = '//BESTTYPE statements declare methods of generating the best value for a given cluster; this can also improve linking'	=> '',
		LEFT.s = '//FUZZY can be used to create new types of FUZZY linking'																																=> '',
		LEFT.s = '//CONCEPT statements should be used to group together interellated fields; such as address'															=> '',
		LEFT.s = '//RELATIONSHIP is used to find non-obvious relationships between the clusters'																					=> '',
		LEFT.s = '//SOURCEFIELD is used if a field of the file denotes a source of the records in that file'															=> '',
		LEFT.s = '//LINKPATH is used to define access paths for external linking'																													=> '',
																																																																				 LEFT.s))) (GeneratedSALTSpec <> '');

fullSALTSpecification := SALTSpecificationHeader + generatedSALTSpecificationTemp;

cleanedGeneratedSALTSpecification := ROLLUP(fullSALTSpecification, TRUE, TRANSFORM(CleanedSALTLayout, SELF.GeneratedSALTSpec := LEFT.GeneratedSALTSpec + '\n' + RIGHT.GeneratedSALTSpec));

OUTPUT(cleanedGeneratedSALTSpecification, NAMED('Generated_SALT_Specification'));

DataProfilingLayout := RECORD
	STRING GeneratedECL := '';
END;

SALTDataProfilingTemp := DATASET([
	{'/* Executing the following code will produce most of the stats needed to perform simple UAT analysis on field distributions */'},
	{''},
	{'#workunit(\'name\',\'SALT v2.9 - Data Profiling\');'},
	{''},
	{'IMPORT ' + ModuleFolderName + ', SALT29, UT;'},
	{''},
	{'RecordsToRun := 0; // Set to 0 to run all records through, or just choose a random sample of records'},
	{''},
	{'ChooseRandomInput := TRUE; // Set to TRUE to grab a random sample of input records, FALSE to grab the first N records (Based on RecordsToRun above)'},
	{'// ChooseRandomInput := FALSE; // Set to TRUE to grab a random sample of input records, FALSE to grab the first N records (Based on RecordsToRun above)'},
	{''},
	{'// Grab our input records'},
	{'ut.MAC_Pick_Random(' + ModuleFolderName + '.In_Input_File, InputFileRandom, IF(RecordsToRun > 0, RecordsToRun, 10000000000));'},
	{'InputFileSequential := IF(RecordsToRun > 0, CHOOSEN(' + ModuleFolderName + '.In_Input_File, RecordsToRun), ' + ModuleFolderName + '.In_Input_File);'},
	{'InputFile := IF(ChooseRandomInput, InputFileRandom, InputFileSequential);'},
	{''},
	{'// First create an instantiated hygiene module'},
	{'SALTHygiene := ' + ModuleFolderName + '.Hygiene(InputFile);'},
	{''},
	{'OUTPUT(SALTHygiene.Summary(\'Summary_Report\'), NAMED(\'Summary_Report\'), ALL); // Displays an overall summary of all fields analyzed, including Min/Max/Average values'},
	{''},
	{'OUTPUT(SALTHygiene.AllProfiles, NAMED(\'Field_Distributions\'), ALL); // Displays a field by field distribution analysis.  This will include the top 300 most common field values for each field.'}
																	], DataProfilingLayout);

SALTDataProfiling := ROLLUP(SALTDataProfilingTemp, TRUE, TRANSFORM(DataProfilingLayout, SELF.GeneratedECL := LEFT.GeneratedECL + '\n' + RIGHT.GeneratedECL));

OUTPUT(SALTDataProfiling, NAMED('Generated_BWR_SALT_Data_Profiling'));