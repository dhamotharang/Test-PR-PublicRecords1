EXPORT macRemoveNulls(infile, outfile) := MACRO
IMPORT STD;
#UNIQUENAME(trecs)

  infile %trecs%(infile L) := TRANSFORM
    SELF.Local_Code := MAP(STD.Str.ToUpperCase(TRIM(L.Local_Code, LEFT, RIGHT))='NULL' => '',L.Local_Code='NUL' => '',L.Local_Code);
    SELF.Commercial_Info_Source := MAP(STD.Str.ToUpperCase(TRIM(L.Commercial_Info_Source))='Not Applicable' => '',L.Commercial_Info_Source='NULL' => '',L.Commercial_Info_Source);
    SELF.Motor_Carrier_ID_State := IF(STD.Str.ToUpperCase(TRIM(L.Motor_Carrier_ID_State, LEFT, RIGHT))='NU','',L.Motor_Carrier_ID_State);
    SELF.Number_of_Axles := IF(STD.Str.ToUpperCase(TRIM(L.Number_of_Axles, LEFT, RIGHT))='N','',L.Number_of_Axles);
    SELF.Number_of_Tires := IF(STD.Str.ToUpperCase(TRIM(L.Number_of_Tires, LEFT, RIGHT))='NU','',L.Number_of_Tires);
    SELF.Vehicle_Length_Feet := IF(STD.Str.ToUpperCase(TRIM(L.Vehicle_Length_Feet, LEFT, RIGHT))='NUL','',L.Vehicle_Length_Feet);
    SELF.Trailer1_Length_Feet := IF(STD.Str.ToUpperCase(TRIM(L.Trailer1_Length_Feet, LEFT, RIGHT))='NUL','',L.Trailer1_Length_Feet);
    SELF.Trailer1_Width_Feet := IF(STD.Str.ToUpperCase(TRIM(L.Trailer1_Width_Feet, LEFT, RIGHT))='NU','',L.Trailer1_Width_Feet);
    SELF.Trailer2_Length_Feet := IF(STD.Str.ToUpperCase(TRIM(L.Trailer2_Length_Feet, LEFT, RIGHT))='NUL','',L.Trailer2_Length_Feet);
    SELF.Trailer2_Width_Feet := IF(STD.Str.ToUpperCase(TRIM(L.Trailer2_Width_Feet, LEFT, RIGHT))='NU','',L.Trailer2_Width_Feet);
    SELF.Hazardous_Materials_Class_Number1 := IF(STD.Str.ToUpperCase(TRIM(L.Hazardous_Materials_Class_Number1, LEFT, RIGHT))='N','',L.Hazardous_Materials_Class_Number1);
    SELF.Hazardous_Materials_Class_Number2 := IF(STD.Str.ToUpperCase(TRIM(L.Hazardous_Materials_Class_Number2, LEFT, RIGHT))='N','',L.Hazardous_Materials_Class_Number2);
    SELF.Transporting_HazMat := IF(STD.Str.ToUpperCase(TRIM(L.Transporting_HazMat, LEFT, RIGHT))='NUL','',L.Transporting_HazMat);
    SELF.Oversize_Vehicle := IF(STD.Str.ToUpperCase(TRIM(L.Oversize_Vehicle, LEFT, RIGHT))='NUL','',L.Oversize_Vehicle);
    SELF.Overlength_Vehicle := IF(STD.Str.ToUpperCase(TRIM(L.Overlength_Vehicle, LEFT, RIGHT))='NUL','',L.Overlength_Vehicle);
    SELF.Oversize_Vehicle_Permitted := IF(STD.Str.ToUpperCase(TRIM(L.Oversize_Vehicle_Permitted, LEFT, RIGHT))='NUL','',L.Oversize_Vehicle_Permitted);
    SELF.Overlength_Vehicle_Permitted := IF(STD.Str.ToUpperCase(TRIM(L.Overlength_Vehicle_Permitted, LEFT, RIGHT))='NUL','',L.Overlength_Vehicle_Permitted);
    SELF.Citation_Issued_to_Vehicle := IF(STD.Str.ToUpperCase(TRIM(L.Citation_Issued_to_Vehicle, LEFT, RIGHT))='NUL','',L.Citation_Issued_to_Vehicle);
    SELF.DOT_State := IF(STD.Str.ToUpperCase(TRIM(L.DOT_State, LEFT, RIGHT))='NU','',L.DOT_State);
    SELF.CRU_Sequence_Nbr := IF(STD.Str.ToUpperCase(TRIM(L.CRU_Sequence_Nbr, LEFT, RIGHT))='N','',L.CRU_Sequence_Nbr);
    SELF.Loss_State_Abbr := IF(STD.Str.ToUpperCase(TRIM(L.Loss_State_Abbr, LEFT, RIGHT))='NU','',L.Loss_State_Abbr);
    SELF.Report_Type_ID := IF(STD.Str.ToUpperCase(TRIM(L.Report_Type_ID, LEFT, RIGHT))='NUL','',L.Report_Type_ID);
    SELF.Number_of_Vehicles := IF(STD.Str.ToUpperCase(TRIM(L.Number_of_Vehicles, LEFT, RIGHT))='NUL','',L.Number_of_Vehicles);
    SELF.Total_Nonfatal_Injuries := IF(STD.Str.ToUpperCase(TRIM(L.Total_Nonfatal_Injuries, LEFT, RIGHT))='NUL','',L.Total_Nonfatal_Injuries);
    SELF.Total_Fatal_Injuries := IF(STD.Str.ToUpperCase(TRIM(L.Total_Fatal_Injuries, LEFT, RIGHT))='NUL','',L.Total_Fatal_Injuries);
    SELF.Loss_Street_Speed_Limit := IF(STD.Str.ToUpperCase(TRIM(L.Loss_Street_Speed_Limit, LEFT, RIGHT))='NUL','',L.Loss_Street_Speed_Limit);
    SELF.Loss_Cross_Street_Speed_Limit := IF(STD.Str.ToUpperCase(TRIM(L.Loss_Cross_Street_Speed_Limit, LEFT, RIGHT))='NU','',L.Loss_Cross_Street_Speed_Limit);
    SELF.Loss_Cross_Street_Number_of_Lanes := IF(STD.Str.ToUpperCase(TRIM(L.Loss_Cross_Street_Number_of_Lanes, LEFT, RIGHT))='NU','',L.Loss_Cross_Street_Number_of_Lanes);
    SELF.Number_of_Lanes := IF(STD.Str.ToUpperCase(TRIM(L.Number_of_Lanes, LEFT, RIGHT))='NU','',L.Number_of_Lanes);
    SELF.Report_Complete := IF(STD.Str.ToUpperCase(TRIM(L.Report_Complete, LEFT, RIGHT))='NUL','',L.Report_Complete);
    SELF.Counter_Report := IF(STD.Str.ToUpperCase(TRIM(L.Counter_Report, LEFT, RIGHT))='NUL','',L.Counter_Report);
    SELF.Public_Property_Employee := IF(STD.Str.ToUpperCase(TRIM(L.Public_Property_Employee, LEFT, RIGHT))='NUL','',L.Public_Property_Employee);
    SELF.Bridge_Related := IF(STD.Str.ToUpperCase(TRIM(L.Bridge_Related, LEFT, RIGHT))='NUL','',L.Bridge_Related);
    SELF.Ramp_Indicator := IF(STD.Str.ToUpperCase(TRIM(L.Ramp_Indicator, LEFT, RIGHT))='NUL','',L.Ramp_Indicator);
    SELF.Work_Zone_Speed_Limit := IF(STD.Str.ToUpperCase(TRIM(L.Work_Zone_Speed_Limit, LEFT, RIGHT))='NU','',L.Work_Zone_Speed_Limit);
    SELF.Offset_Distance_Feet := IF(STD.Str.ToUpperCase(TRIM(L.Offset_Distance_Feet, LEFT, RIGHT))='NUL','',L.Offset_Distance_Feet);
    SELF.Number_of_Qualifying_Units := IF(STD.Str.ToUpperCase(TRIM(L.Number_of_Qualifying_Units, LEFT, RIGHT))='NU','',L.Number_of_Qualifying_Units);
    SELF.Number_of_HazMat_Vehicles := IF(STD.Str.ToUpperCase(TRIM(L.Number_of_HazMat_Vehicles, LEFT, RIGHT))='NU','',L.Number_of_HazMat_Vehicles);
    SELF.Number_of_Buses_Involved := IF(STD.Str.ToUpperCase(TRIM(L.Number_of_Buses_Involved, LEFT, RIGHT))='NU','',L.Number_of_Buses_Involved);
    SELF.Number_Taken_to_Treatment := IF(STD.Str.ToUpperCase(TRIM(L.Number_Taken_to_Treatment, LEFT, RIGHT))='NU','',L.Number_Taken_to_Treatment);
    SELF.Number_Vehicles_Towed := IF(STD.Str.ToUpperCase(TRIM(L.Number_Vehicles_Towed, LEFT, RIGHT))='NU','',L.Number_Vehicles_Towed);
    SELF.Vehicle_at_Fault_Unit_Number := IF(STD.Str.ToUpperCase(TRIM(L.Vehicle_at_Fault_Unit_Number, LEFT, RIGHT))='NU','',L.Vehicle_at_Fault_Unit_Number);
    SELF.Person_Number := IF(STD.Str.ToUpperCase(TRIM(L.Person_Number, LEFT, RIGHT))='NUL','',L.Person_Number);
    SELF.Vehicle_Unit_Number := IF(STD.Str.ToUpperCase(TRIM(L.Vehicle_Unit_Number, LEFT, RIGHT))='NUL','',L.Vehicle_Unit_Number);
    SELF.DL_Number_CDL := IF(STD.Str.ToUpperCase(TRIM(L.DL_Number_CDL, LEFT, RIGHT))='NUL','',L.DL_Number_CDL);
    SELF.Age := IF(STD.Str.ToUpperCase(TRIM(L.Age, LEFT, RIGHT))='NUL','',L.Age);
    SELF.Party_ID := IF(STD.Str.ToUpperCase(TRIM(L.Party_ID, LEFT, RIGHT))in ['NULL','NUL'],'',L.Party_ID);
    SELF.Name_Suffx := IF(STD.Str.ToUpperCase(TRIM(L.Name_Suffx, LEFT, RIGHT))='NUL','',L.Name_Suffx);
    SELF.State := IF(STD.Str.ToUpperCase(TRIM(L.State, LEFT, RIGHT))='NU','',L.State);
    SELF.Weight := IF(STD.Str.ToUpperCase(TRIM(L.Weight, LEFT, RIGHT))='NUL','',L.Weight);
    SELF.Insurance_Expired := IF(STD.Str.ToUpperCase(TRIM(L.Insurance_Expired, LEFT, RIGHT))='NUL','',L.Insurance_Expired);
    SELF.Insurance_Exempt := IF(STD.Str.ToUpperCase(TRIM(L.Insurance_Exempt, LEFT, RIGHT))='NUL','',L.Insurance_Exempt);
    SELF.Violent_Crime_Victim_Notified := IF(STD.Str.ToUpperCase(TRIM(L.Violent_Crime_Victim_Notified, LEFT, RIGHT))='NUL','',L.Violent_Crime_Victim_Notified);
    SELF.Refused_Medical_Treatment := IF(STD.Str.ToUpperCase(TRIM(L.Refused_Medical_Treatment, LEFT, RIGHT))='NUL','',L.Refused_Medical_Treatment);
    SELF.Contributed_to_Collision := IF(STD.Str.ToUpperCase(TRIM(L.Contributed_to_Collision, LEFT, RIGHT))='NUL','',L.Contributed_to_Collision);
    SELF.Passenger_Number := IF(STD.Str.ToUpperCase(TRIM(L.Passenger_Number, LEFT, RIGHT))='NUL','',L.Passenger_Number);
    SELF.Registration_State := IF(STD.Str.ToUpperCase(TRIM(L.Registration_State, LEFT, RIGHT))='NU','',L.Registration_State);
    SELF.Total_Occupants_in_Vehicle := IF(STD.Str.ToUpperCase(TRIM(L.Total_Occupants_in_Vehicle, LEFT, RIGHT))='NUL','',L.Total_Occupants_in_Vehicle);
    SELF.Vehicle_Color := IF(STD.Str.ToUpperCase(TRIM(L.Vehicle_Color, LEFT, RIGHT))='NUL','',L.Vehicle_Color);
		SELF.Other_Unit_Vehicle_Damage_Amount:= IF(STD.Str.ToUpperCase(TRIM(L.Other_Unit_Vehicle_Damage_Amount, LEFT, RIGHT)) = '0', '', L.Other_Unit_Vehicle_Damage_Amount);
    SELF.Other_Unit_Registration_State := IF(STD.Str.ToUpperCase(TRIM(L.Other_Unit_Registration_State, LEFT, RIGHT))='NU', '', L.Other_Unit_Registration_State);
    SELF.Vehicle_Inventoried := IF(STD.Str.ToUpperCase(TRIM(L.Vehicle_Inventoried, LEFT, RIGHT))='NUL','',L.Vehicle_Inventoried);
    SELF.Number_Trailing_Units := IF(STD.Str.ToUpperCase(TRIM(L.Number_Trailing_Units, LEFT, RIGHT))='NU','',L.Number_Trailing_Units);
    SELF.CDL_Required := IF(STD.Str.ToUpperCase(TRIM(L.CDL_Required, LEFT, RIGHT))='NUL','',L.CDL_Required);
    SELF.Truck_Bus_Supplement_Required := IF(STD.Str.ToUpperCase(TRIM(L.Truck_Bus_Supplement_Required, LEFT, RIGHT))='NUL','',L.Truck_Bus_Supplement_Required);
    SELF.Insurance_Policy_Holder := IF( STD.Str.ToUpperCase(TRIM(l.Insurance_Policy_Holder, LEFT, RIGHT))='N','',l.Insurance_Policy_Holder); 
    SELF  := L;
  END;
  outfile := PROJECT(infile, %trecs%(LEFT));
	
ENDMACRO;