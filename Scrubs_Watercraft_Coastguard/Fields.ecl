IMPORT ut,SALT30;
EXPORT Fields := MODULE
// Processing for each FieldType
EXPORT SALT30.StrType FieldTypeName(UNSIGNED2 i) := CHOOSE(i,'invalid_alpha','invalid_alnum','invalid_numeric','invalid_state','invalid_hullnum','invalid_date','invalid_year','invalid_source_code','invalid_blank');
EXPORT FieldTypeNum(SALT30.StrType fn) := CASE(fn,'invalid_alpha' => 1,'invalid_alnum' => 2,'invalid_numeric' => 3,'invalid_state' => 4,'invalid_hullnum' => 5,'invalid_date' => 6,'invalid_year' => 7,'invalid_source_code' => 8,'invalid_blank' => 9,0);
EXPORT MakeFT_invalid_alpha(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringfilter(s0,'ABCDEFGHIJKLMNOPQRSTUVWXYZ\' \\/-.,'); // Only allow valid symbols
  s2 := SALT30.stringcleanspaces( SALT30.stringsubstituteout(s1,' \\/-.,',' ') ); // Insert spaces but avoid doubles
  RETURN  s2;
END;
EXPORT InValidFT_invalid_alpha(SALT30.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'ABCDEFGHIJKLMNOPQRSTUVWXYZ\' \\/-.,'))),~(LENGTH(TRIM(s)) >= 0));
EXPORT InValidMessageFT_invalid_alpha(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInChars('ABCDEFGHIJKLMNOPQRSTUVWXYZ\' \\/-.,'),SALT30.HygieneErrors.NotLength('0..'),SALT30.HygieneErrors.Good);
EXPORT MakeFT_invalid_alnum(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringfilter(s0,'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\' -#.\\/_'); // Only allow valid symbols
  s2 := SALT30.stringcleanspaces( SALT30.stringsubstituteout(s1,' -#.\\/_',' ') ); // Insert spaces but avoid doubles
  RETURN  s2;
END;
EXPORT InValidFT_invalid_alnum(SALT30.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\' -#.\\/_'))),~(LENGTH(TRIM(s)) >= 0));
EXPORT InValidMessageFT_invalid_alnum(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInChars('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\' -#.\\/_'),SALT30.HygieneErrors.NotLength('0..'),SALT30.HygieneErrors.Good);
EXPORT MakeFT_invalid_numeric(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringfilter(s0,'0123456789.'); // Only allow valid symbols
  s2 := SALT30.stringcleanspaces( SALT30.stringsubstituteout(s1,'.',' ') ); // Insert spaces but avoid doubles
  RETURN  s2;
END;
EXPORT InValidFT_invalid_numeric(SALT30.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'0123456789.'))),~(LENGTH(TRIM(s)) >= 0));
EXPORT InValidMessageFT_invalid_numeric(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInChars('0123456789.'),SALT30.HygieneErrors.NotLength('0..'),SALT30.HygieneErrors.Good);
EXPORT MakeFT_invalid_state(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringfilter(s0,'ABCDEFGHIJKLMNOPQRSTUVWXYZ'); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_invalid_state(SALT30.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'ABCDEFGHIJKLMNOPQRSTUVWXYZ'))),~(LENGTH(TRIM(s)) = 2 OR LENGTH(TRIM(s)) = 0));
EXPORT InValidMessageFT_invalid_state(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInChars('ABCDEFGHIJKLMNOPQRSTUVWXYZ'),SALT30.HygieneErrors.NotLength('2,0'),SALT30.HygieneErrors.Good);
EXPORT MakeFT_invalid_hullnum(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringfilter(s0,'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\' -#.\\/_*?'); // Only allow valid symbols
  s2 := SALT30.stringcleanspaces( SALT30.stringsubstituteout(s1,' -#.\\/_*?',' ') ); // Insert spaces but avoid doubles
  RETURN  s2;
END;
EXPORT InValidFT_invalid_hullnum(SALT30.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\' -#.\\/_*?'))),~(LENGTH(TRIM(s)) >= 0));
EXPORT InValidMessageFT_invalid_hullnum(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInChars('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\' -#.\\/_*?'),SALT30.HygieneErrors.NotLength('0..'),SALT30.HygieneErrors.Good);
EXPORT MakeFT_invalid_date(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringfilter(s0,'0123456789'); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_invalid_date(SALT30.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'0123456789'))),~(LENGTH(TRIM(s)) = 8 OR LENGTH(TRIM(s)) = 6 OR LENGTH(TRIM(s)) = 4 OR LENGTH(TRIM(s)) = 0));
EXPORT InValidMessageFT_invalid_date(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInChars('0123456789'),SALT30.HygieneErrors.NotLength('8,6,4,0'),SALT30.HygieneErrors.Good);
EXPORT MakeFT_invalid_year(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringfilter(s0,'0123456789'); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_invalid_year(SALT30.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'0123456789'))),~(LENGTH(TRIM(s)) >= 0));
EXPORT InValidMessageFT_invalid_year(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInChars('0123456789'),SALT30.HygieneErrors.NotLength('0..'),SALT30.HygieneErrors.Good);
EXPORT MakeFT_invalid_source_code(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringfilter(s0,'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_invalid_source_code(SALT30.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'))),~(LENGTH(TRIM(s)) = 2));
EXPORT InValidMessageFT_invalid_source_code(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInChars('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'),SALT30.HygieneErrors.NotLength('2'),SALT30.HygieneErrors.Good);
EXPORT MakeFT_invalid_blank(SALT30.StrType s0) := FUNCTION
  RETURN  s0;
END;
EXPORT InValidFT_invalid_blank(SALT30.StrType s) := WHICH(~(LENGTH(TRIM(s)) >= 1));
EXPORT InValidMessageFT_invalid_blank(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotLength('1..'),SALT30.HygieneErrors.Good);
EXPORT SALT30.StrType FieldName(UNSIGNED2 i) := CHOOSE(i,'watercraft_key','sequence_key','state_origin','source_code','vessel_id','vessel_database_key','name_of_vessel','call_sign','official_number','imo_number','hull_number','hull_identification_number','vessel_service_type','flag','self_propelled_indicator','registered_gross_tons','registered_net_tons','registered_length','registered_breadth','registered_depth','itc_gross_tons','itc_net_tons','itc_length','itc_breadth','itc_depth','hailing_port','hailing_port_state','hailing_port_province','home_port_name','home_port_state','home_port_province','trade_ind_coastwise_unrestricted','trade_ind_limited_coastwise_bowaters_only','trade_ind_limited_coastwise_restricted','trade_ind_limited_coastwise_oil_spill_response_only','trade_ind_limited_coastwise_under_charter_to_citizen','trade_ind_fishery','trade_ind_limited_fishery_only','trade_ind_recreation','trade_ind_limited_recreation_great_lakes_use_only','trade_ind_registry','trade_ind_limited_registry_cross_border_financing','trade_ind_limited_registry_no_foreign_voyage','trade_ind_limited_registry_trade_with_canada_only','trade_ind_great_lakes','vessel_complete_build_city','vessel_complete_build_state','vessel_complete_build_province','vessel_complete_build_country','vessel_build_year','vessel_hull_build_city','vessel_hull_build_state','vessel_hull_build_province','vessel_hull_build_country','party_identification_number','main_hp_ahead','main_hp_astern','propulsion_type','hull_material','ship_yard','hull_builder_name','doc_certificate_status','date_issued','date_expires','hull_design_type','sail_ind','party_database_key','itc_tons_cod_ind','persistent_record_id');
EXPORT FieldNum(SALT30.StrType fn) := CASE(fn,'watercraft_key' => 1,'sequence_key' => 2,'state_origin' => 3,'source_code' => 4,'vessel_id' => 5,'vessel_database_key' => 6,'name_of_vessel' => 7,'call_sign' => 8,'official_number' => 9,'imo_number' => 10,'hull_number' => 11,'hull_identification_number' => 12,'vessel_service_type' => 13,'flag' => 14,'self_propelled_indicator' => 15,'registered_gross_tons' => 16,'registered_net_tons' => 17,'registered_length' => 18,'registered_breadth' => 19,'registered_depth' => 20,'itc_gross_tons' => 21,'itc_net_tons' => 22,'itc_length' => 23,'itc_breadth' => 24,'itc_depth' => 25,'hailing_port' => 26,'hailing_port_state' => 27,'hailing_port_province' => 28,'home_port_name' => 29,'home_port_state' => 30,'home_port_province' => 31,'trade_ind_coastwise_unrestricted' => 32,'trade_ind_limited_coastwise_bowaters_only' => 33,'trade_ind_limited_coastwise_restricted' => 34,'trade_ind_limited_coastwise_oil_spill_response_only' => 35,'trade_ind_limited_coastwise_under_charter_to_citizen' => 36,'trade_ind_fishery' => 37,'trade_ind_limited_fishery_only' => 38,'trade_ind_recreation' => 39,'trade_ind_limited_recreation_great_lakes_use_only' => 40,'trade_ind_registry' => 41,'trade_ind_limited_registry_cross_border_financing' => 42,'trade_ind_limited_registry_no_foreign_voyage' => 43,'trade_ind_limited_registry_trade_with_canada_only' => 44,'trade_ind_great_lakes' => 45,'vessel_complete_build_city' => 46,'vessel_complete_build_state' => 47,'vessel_complete_build_province' => 48,'vessel_complete_build_country' => 49,'vessel_build_year' => 50,'vessel_hull_build_city' => 51,'vessel_hull_build_state' => 52,'vessel_hull_build_province' => 53,'vessel_hull_build_country' => 54,'party_identification_number' => 55,'main_hp_ahead' => 56,'main_hp_astern' => 57,'propulsion_type' => 58,'hull_material' => 59,'ship_yard' => 60,'hull_builder_name' => 61,'doc_certificate_status' => 62,'date_issued' => 63,'date_expires' => 64,'hull_design_type' => 65,'sail_ind' => 66,'party_database_key' => 67,'itc_tons_cod_ind' => 68,'persistent_record_id' => 69,0);
//Individual field level validation
EXPORT Make_watercraft_key(SALT30.StrType s0) := MakeFT_invalid_blank(s0);
EXPORT InValid_watercraft_key(SALT30.StrType s) := InValidFT_invalid_blank(s);
EXPORT InValidMessage_watercraft_key(UNSIGNED1 wh) := InValidMessageFT_invalid_blank(wh);
EXPORT Make_sequence_key(SALT30.StrType s0) := s0;
EXPORT InValid_sequence_key(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_sequence_key(UNSIGNED1 wh) := '';
EXPORT Make_state_origin(SALT30.StrType s0) := MakeFT_invalid_state(s0);
EXPORT InValid_state_origin(SALT30.StrType s) := InValidFT_invalid_state(s);
EXPORT InValidMessage_state_origin(UNSIGNED1 wh) := InValidMessageFT_invalid_state(wh);
EXPORT Make_source_code(SALT30.StrType s0) := MakeFT_invalid_source_code(s0);
EXPORT InValid_source_code(SALT30.StrType s) := InValidFT_invalid_source_code(s);
EXPORT InValidMessage_source_code(UNSIGNED1 wh) := InValidMessageFT_invalid_source_code(wh);
EXPORT Make_vessel_id(SALT30.StrType s0) := s0;
EXPORT InValid_vessel_id(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_vessel_id(UNSIGNED1 wh) := '';
EXPORT Make_vessel_database_key(SALT30.StrType s0) := s0;
EXPORT InValid_vessel_database_key(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_vessel_database_key(UNSIGNED1 wh) := '';
EXPORT Make_name_of_vessel(SALT30.StrType s0) := s0;
EXPORT InValid_name_of_vessel(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_name_of_vessel(UNSIGNED1 wh) := '';
EXPORT Make_call_sign(SALT30.StrType s0) := s0;
EXPORT InValid_call_sign(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_call_sign(UNSIGNED1 wh) := '';
EXPORT Make_official_number(SALT30.StrType s0) := s0;
EXPORT InValid_official_number(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_official_number(UNSIGNED1 wh) := '';
EXPORT Make_imo_number(SALT30.StrType s0) := s0;
EXPORT InValid_imo_number(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_imo_number(UNSIGNED1 wh) := '';
EXPORT Make_hull_number(SALT30.StrType s0) := MakeFT_invalid_hullnum(s0);
EXPORT InValid_hull_number(SALT30.StrType s) := InValidFT_invalid_hullnum(s);
EXPORT InValidMessage_hull_number(UNSIGNED1 wh) := InValidMessageFT_invalid_hullnum(wh);
EXPORT Make_hull_identification_number(SALT30.StrType s0) := MakeFT_invalid_hullnum(s0);
EXPORT InValid_hull_identification_number(SALT30.StrType s) := InValidFT_invalid_hullnum(s);
EXPORT InValidMessage_hull_identification_number(UNSIGNED1 wh) := InValidMessageFT_invalid_hullnum(wh);
EXPORT Make_vessel_service_type(SALT30.StrType s0) := s0;
EXPORT InValid_vessel_service_type(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_vessel_service_type(UNSIGNED1 wh) := '';
EXPORT Make_flag(SALT30.StrType s0) := s0;
EXPORT InValid_flag(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_flag(UNSIGNED1 wh) := '';
EXPORT Make_self_propelled_indicator(SALT30.StrType s0) := s0;
EXPORT InValid_self_propelled_indicator(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_self_propelled_indicator(UNSIGNED1 wh) := '';
EXPORT Make_registered_gross_tons(SALT30.StrType s0) := MakeFT_invalid_numeric(s0);
EXPORT InValid_registered_gross_tons(SALT30.StrType s) := InValidFT_invalid_numeric(s);
EXPORT InValidMessage_registered_gross_tons(UNSIGNED1 wh) := InValidMessageFT_invalid_numeric(wh);
EXPORT Make_registered_net_tons(SALT30.StrType s0) := MakeFT_invalid_numeric(s0);
EXPORT InValid_registered_net_tons(SALT30.StrType s) := InValidFT_invalid_numeric(s);
EXPORT InValidMessage_registered_net_tons(UNSIGNED1 wh) := InValidMessageFT_invalid_numeric(wh);
EXPORT Make_registered_length(SALT30.StrType s0) := MakeFT_invalid_numeric(s0);
EXPORT InValid_registered_length(SALT30.StrType s) := InValidFT_invalid_numeric(s);
EXPORT InValidMessage_registered_length(UNSIGNED1 wh) := InValidMessageFT_invalid_numeric(wh);
EXPORT Make_registered_breadth(SALT30.StrType s0) := MakeFT_invalid_numeric(s0);
EXPORT InValid_registered_breadth(SALT30.StrType s) := InValidFT_invalid_numeric(s);
EXPORT InValidMessage_registered_breadth(UNSIGNED1 wh) := InValidMessageFT_invalid_numeric(wh);
EXPORT Make_registered_depth(SALT30.StrType s0) := MakeFT_invalid_numeric(s0);
EXPORT InValid_registered_depth(SALT30.StrType s) := InValidFT_invalid_numeric(s);
EXPORT InValidMessage_registered_depth(UNSIGNED1 wh) := InValidMessageFT_invalid_numeric(wh);
EXPORT Make_itc_gross_tons(SALT30.StrType s0) := MakeFT_invalid_numeric(s0);
EXPORT InValid_itc_gross_tons(SALT30.StrType s) := InValidFT_invalid_numeric(s);
EXPORT InValidMessage_itc_gross_tons(UNSIGNED1 wh) := InValidMessageFT_invalid_numeric(wh);
EXPORT Make_itc_net_tons(SALT30.StrType s0) := MakeFT_invalid_numeric(s0);
EXPORT InValid_itc_net_tons(SALT30.StrType s) := InValidFT_invalid_numeric(s);
EXPORT InValidMessage_itc_net_tons(UNSIGNED1 wh) := InValidMessageFT_invalid_numeric(wh);
EXPORT Make_itc_length(SALT30.StrType s0) := MakeFT_invalid_numeric(s0);
EXPORT InValid_itc_length(SALT30.StrType s) := InValidFT_invalid_numeric(s);
EXPORT InValidMessage_itc_length(UNSIGNED1 wh) := InValidMessageFT_invalid_numeric(wh);
EXPORT Make_itc_breadth(SALT30.StrType s0) := MakeFT_invalid_numeric(s0);
EXPORT InValid_itc_breadth(SALT30.StrType s) := InValidFT_invalid_numeric(s);
EXPORT InValidMessage_itc_breadth(UNSIGNED1 wh) := InValidMessageFT_invalid_numeric(wh);
EXPORT Make_itc_depth(SALT30.StrType s0) := MakeFT_invalid_numeric(s0);
EXPORT InValid_itc_depth(SALT30.StrType s) := InValidFT_invalid_numeric(s);
EXPORT InValidMessage_itc_depth(UNSIGNED1 wh) := InValidMessageFT_invalid_numeric(wh);
EXPORT Make_hailing_port(SALT30.StrType s0) := s0;
EXPORT InValid_hailing_port(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_hailing_port(UNSIGNED1 wh) := '';
EXPORT Make_hailing_port_state(SALT30.StrType s0) := s0;
EXPORT InValid_hailing_port_state(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_hailing_port_state(UNSIGNED1 wh) := '';
EXPORT Make_hailing_port_province(SALT30.StrType s0) := s0;
EXPORT InValid_hailing_port_province(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_hailing_port_province(UNSIGNED1 wh) := '';
EXPORT Make_home_port_name(SALT30.StrType s0) := s0;
EXPORT InValid_home_port_name(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_home_port_name(UNSIGNED1 wh) := '';
EXPORT Make_home_port_state(SALT30.StrType s0) := s0;
EXPORT InValid_home_port_state(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_home_port_state(UNSIGNED1 wh) := '';
EXPORT Make_home_port_province(SALT30.StrType s0) := s0;
EXPORT InValid_home_port_province(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_home_port_province(UNSIGNED1 wh) := '';
EXPORT Make_trade_ind_coastwise_unrestricted(SALT30.StrType s0) := s0;
EXPORT InValid_trade_ind_coastwise_unrestricted(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_trade_ind_coastwise_unrestricted(UNSIGNED1 wh) := '';
EXPORT Make_trade_ind_limited_coastwise_bowaters_only(SALT30.StrType s0) := s0;
EXPORT InValid_trade_ind_limited_coastwise_bowaters_only(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_trade_ind_limited_coastwise_bowaters_only(UNSIGNED1 wh) := '';
EXPORT Make_trade_ind_limited_coastwise_restricted(SALT30.StrType s0) := s0;
EXPORT InValid_trade_ind_limited_coastwise_restricted(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_trade_ind_limited_coastwise_restricted(UNSIGNED1 wh) := '';
EXPORT Make_trade_ind_limited_coastwise_oil_spill_response_only(SALT30.StrType s0) := s0;
EXPORT InValid_trade_ind_limited_coastwise_oil_spill_response_only(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_trade_ind_limited_coastwise_oil_spill_response_only(UNSIGNED1 wh) := '';
EXPORT Make_trade_ind_limited_coastwise_under_charter_to_citizen(SALT30.StrType s0) := s0;
EXPORT InValid_trade_ind_limited_coastwise_under_charter_to_citizen(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_trade_ind_limited_coastwise_under_charter_to_citizen(UNSIGNED1 wh) := '';
EXPORT Make_trade_ind_fishery(SALT30.StrType s0) := s0;
EXPORT InValid_trade_ind_fishery(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_trade_ind_fishery(UNSIGNED1 wh) := '';
EXPORT Make_trade_ind_limited_fishery_only(SALT30.StrType s0) := s0;
EXPORT InValid_trade_ind_limited_fishery_only(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_trade_ind_limited_fishery_only(UNSIGNED1 wh) := '';
EXPORT Make_trade_ind_recreation(SALT30.StrType s0) := s0;
EXPORT InValid_trade_ind_recreation(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_trade_ind_recreation(UNSIGNED1 wh) := '';
EXPORT Make_trade_ind_limited_recreation_great_lakes_use_only(SALT30.StrType s0) := s0;
EXPORT InValid_trade_ind_limited_recreation_great_lakes_use_only(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_trade_ind_limited_recreation_great_lakes_use_only(UNSIGNED1 wh) := '';
EXPORT Make_trade_ind_registry(SALT30.StrType s0) := s0;
EXPORT InValid_trade_ind_registry(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_trade_ind_registry(UNSIGNED1 wh) := '';
EXPORT Make_trade_ind_limited_registry_cross_border_financing(SALT30.StrType s0) := s0;
EXPORT InValid_trade_ind_limited_registry_cross_border_financing(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_trade_ind_limited_registry_cross_border_financing(UNSIGNED1 wh) := '';
EXPORT Make_trade_ind_limited_registry_no_foreign_voyage(SALT30.StrType s0) := s0;
EXPORT InValid_trade_ind_limited_registry_no_foreign_voyage(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_trade_ind_limited_registry_no_foreign_voyage(UNSIGNED1 wh) := '';
EXPORT Make_trade_ind_limited_registry_trade_with_canada_only(SALT30.StrType s0) := s0;
EXPORT InValid_trade_ind_limited_registry_trade_with_canada_only(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_trade_ind_limited_registry_trade_with_canada_only(UNSIGNED1 wh) := '';
EXPORT Make_trade_ind_great_lakes(SALT30.StrType s0) := s0;
EXPORT InValid_trade_ind_great_lakes(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_trade_ind_great_lakes(UNSIGNED1 wh) := '';
EXPORT Make_vessel_complete_build_city(SALT30.StrType s0) := s0;
EXPORT InValid_vessel_complete_build_city(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_vessel_complete_build_city(UNSIGNED1 wh) := '';
EXPORT Make_vessel_complete_build_state(SALT30.StrType s0) := s0;
EXPORT InValid_vessel_complete_build_state(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_vessel_complete_build_state(UNSIGNED1 wh) := '';
EXPORT Make_vessel_complete_build_province(SALT30.StrType s0) := s0;
EXPORT InValid_vessel_complete_build_province(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_vessel_complete_build_province(UNSIGNED1 wh) := '';
EXPORT Make_vessel_complete_build_country(SALT30.StrType s0) := s0;
EXPORT InValid_vessel_complete_build_country(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_vessel_complete_build_country(UNSIGNED1 wh) := '';
EXPORT Make_vessel_build_year(SALT30.StrType s0) := s0;
EXPORT InValid_vessel_build_year(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_vessel_build_year(UNSIGNED1 wh) := '';
EXPORT Make_vessel_hull_build_city(SALT30.StrType s0) := s0;
EXPORT InValid_vessel_hull_build_city(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_vessel_hull_build_city(UNSIGNED1 wh) := '';
EXPORT Make_vessel_hull_build_state(SALT30.StrType s0) := s0;
EXPORT InValid_vessel_hull_build_state(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_vessel_hull_build_state(UNSIGNED1 wh) := '';
EXPORT Make_vessel_hull_build_province(SALT30.StrType s0) := s0;
EXPORT InValid_vessel_hull_build_province(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_vessel_hull_build_province(UNSIGNED1 wh) := '';
EXPORT Make_vessel_hull_build_country(SALT30.StrType s0) := s0;
EXPORT InValid_vessel_hull_build_country(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_vessel_hull_build_country(UNSIGNED1 wh) := '';
EXPORT Make_party_identification_number(SALT30.StrType s0) := s0;
EXPORT InValid_party_identification_number(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_party_identification_number(UNSIGNED1 wh) := '';
EXPORT Make_main_hp_ahead(SALT30.StrType s0) := s0;
EXPORT InValid_main_hp_ahead(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_main_hp_ahead(UNSIGNED1 wh) := '';
EXPORT Make_main_hp_astern(SALT30.StrType s0) := s0;
EXPORT InValid_main_hp_astern(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_main_hp_astern(UNSIGNED1 wh) := '';
EXPORT Make_propulsion_type(SALT30.StrType s0) := s0;
EXPORT InValid_propulsion_type(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_propulsion_type(UNSIGNED1 wh) := '';
EXPORT Make_hull_material(SALT30.StrType s0) := s0;
EXPORT InValid_hull_material(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_hull_material(UNSIGNED1 wh) := '';
EXPORT Make_ship_yard(SALT30.StrType s0) := s0;
EXPORT InValid_ship_yard(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_ship_yard(UNSIGNED1 wh) := '';
EXPORT Make_hull_builder_name(SALT30.StrType s0) := s0;
EXPORT InValid_hull_builder_name(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_hull_builder_name(UNSIGNED1 wh) := '';
EXPORT Make_doc_certificate_status(SALT30.StrType s0) := s0;
EXPORT InValid_doc_certificate_status(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_doc_certificate_status(UNSIGNED1 wh) := '';
EXPORT Make_date_issued(SALT30.StrType s0) := MakeFT_invalid_date(s0);
EXPORT InValid_date_issued(SALT30.StrType s) := InValidFT_invalid_date(s);
EXPORT InValidMessage_date_issued(UNSIGNED1 wh) := InValidMessageFT_invalid_date(wh);
EXPORT Make_date_expires(SALT30.StrType s0) := MakeFT_invalid_date(s0);
EXPORT InValid_date_expires(SALT30.StrType s) := InValidFT_invalid_date(s);
EXPORT InValidMessage_date_expires(UNSIGNED1 wh) := InValidMessageFT_invalid_date(wh);
EXPORT Make_hull_design_type(SALT30.StrType s0) := s0;
EXPORT InValid_hull_design_type(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_hull_design_type(UNSIGNED1 wh) := '';
EXPORT Make_sail_ind(SALT30.StrType s0) := s0;
EXPORT InValid_sail_ind(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_sail_ind(UNSIGNED1 wh) := '';
EXPORT Make_party_database_key(SALT30.StrType s0) := s0;
EXPORT InValid_party_database_key(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_party_database_key(UNSIGNED1 wh) := '';
EXPORT Make_itc_tons_cod_ind(SALT30.StrType s0) := s0;
EXPORT InValid_itc_tons_cod_ind(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_itc_tons_cod_ind(UNSIGNED1 wh) := '';
EXPORT Make_persistent_record_id(SALT30.StrType s0) := MakeFT_invalid_blank(s0);
EXPORT InValid_persistent_record_id(SALT30.StrType s) := InValidFT_invalid_blank(s);
EXPORT InValidMessage_persistent_record_id(UNSIGNED1 wh) := InValidMessageFT_invalid_blank(wh);
// This macro will compute and count field level differences based upon a pivot expression
export MAC_CountDifferencesByPivot(in_left,in_right,pivot_exp,bad_pivots,out_counts) := MACRO
  IMPORT SALT30,Scrubs_Watercraft_Coastguard;
//Find those highly occuring pivot values to remove them from consideration
#uniquename(tr)
  %tr% := table(in_left+in_right,{ val := pivot_exp; });
#uniquename(r1)
  %r1% := record
    %tr%.val;    unsigned Cnt := COUNT(GROUP);
  end;
#uniquename(t1)
  %t1% := table(%tr%,%r1%,val,local); // Pre-aggregate before distribute
#uniquename(r2)
  %r2% := record
    %t1%.val;    unsigned Cnt := SUM(GROUP,%t1%.Cnt);
  end;
#uniquename(t2)
  %t2% := table(%t1%,%r2%,val); // Now do global aggregate
Bad_Pivots := %t2%(Cnt>100);
#uniquename(dl)
  %dl% := RECORD
    BOOLEAN Diff_watercraft_key;
    BOOLEAN Diff_sequence_key;
    BOOLEAN Diff_state_origin;
    BOOLEAN Diff_source_code;
    BOOLEAN Diff_vessel_id;
    BOOLEAN Diff_vessel_database_key;
    BOOLEAN Diff_name_of_vessel;
    BOOLEAN Diff_call_sign;
    BOOLEAN Diff_official_number;
    BOOLEAN Diff_imo_number;
    BOOLEAN Diff_hull_number;
    BOOLEAN Diff_hull_identification_number;
    BOOLEAN Diff_vessel_service_type;
    BOOLEAN Diff_flag;
    BOOLEAN Diff_self_propelled_indicator;
    BOOLEAN Diff_registered_gross_tons;
    BOOLEAN Diff_registered_net_tons;
    BOOLEAN Diff_registered_length;
    BOOLEAN Diff_registered_breadth;
    BOOLEAN Diff_registered_depth;
    BOOLEAN Diff_itc_gross_tons;
    BOOLEAN Diff_itc_net_tons;
    BOOLEAN Diff_itc_length;
    BOOLEAN Diff_itc_breadth;
    BOOLEAN Diff_itc_depth;
    BOOLEAN Diff_hailing_port;
    BOOLEAN Diff_hailing_port_state;
    BOOLEAN Diff_hailing_port_province;
    BOOLEAN Diff_home_port_name;
    BOOLEAN Diff_home_port_state;
    BOOLEAN Diff_home_port_province;
    BOOLEAN Diff_trade_ind_coastwise_unrestricted;
    BOOLEAN Diff_trade_ind_limited_coastwise_bowaters_only;
    BOOLEAN Diff_trade_ind_limited_coastwise_restricted;
    BOOLEAN Diff_trade_ind_limited_coastwise_oil_spill_response_only;
    BOOLEAN Diff_trade_ind_limited_coastwise_under_charter_to_citizen;
    BOOLEAN Diff_trade_ind_fishery;
    BOOLEAN Diff_trade_ind_limited_fishery_only;
    BOOLEAN Diff_trade_ind_recreation;
    BOOLEAN Diff_trade_ind_limited_recreation_great_lakes_use_only;
    BOOLEAN Diff_trade_ind_registry;
    BOOLEAN Diff_trade_ind_limited_registry_cross_border_financing;
    BOOLEAN Diff_trade_ind_limited_registry_no_foreign_voyage;
    BOOLEAN Diff_trade_ind_limited_registry_trade_with_canada_only;
    BOOLEAN Diff_trade_ind_great_lakes;
    BOOLEAN Diff_vessel_complete_build_city;
    BOOLEAN Diff_vessel_complete_build_state;
    BOOLEAN Diff_vessel_complete_build_province;
    BOOLEAN Diff_vessel_complete_build_country;
    BOOLEAN Diff_vessel_build_year;
    BOOLEAN Diff_vessel_hull_build_city;
    BOOLEAN Diff_vessel_hull_build_state;
    BOOLEAN Diff_vessel_hull_build_province;
    BOOLEAN Diff_vessel_hull_build_country;
    BOOLEAN Diff_party_identification_number;
    BOOLEAN Diff_main_hp_ahead;
    BOOLEAN Diff_main_hp_astern;
    BOOLEAN Diff_propulsion_type;
    BOOLEAN Diff_hull_material;
    BOOLEAN Diff_ship_yard;
    BOOLEAN Diff_hull_builder_name;
    BOOLEAN Diff_doc_certificate_status;
    BOOLEAN Diff_date_issued;
    BOOLEAN Diff_date_expires;
    BOOLEAN Diff_hull_design_type;
    BOOLEAN Diff_sail_ind;
    BOOLEAN Diff_party_database_key;
    BOOLEAN Diff_itc_tons_cod_ind;
    BOOLEAN Diff_persistent_record_id;
    SALT30.StrType SourceField {MAXLENGTH(30)};
    UNSIGNED Num_Diffs;
    SALT30.StrType Val {MAXLENGTH(1024)};
  END;
#uniquename(fd)
  %dl% %fd%(in_left le,in_right ri) := TRANSFORM
    SELF.Diff_watercraft_key := le.watercraft_key <> ri.watercraft_key;
    SELF.Diff_sequence_key := le.sequence_key <> ri.sequence_key;
    SELF.Diff_state_origin := le.state_origin <> ri.state_origin;
    SELF.Diff_source_code := le.source_code <> ri.source_code;
    SELF.Diff_vessel_id := le.vessel_id <> ri.vessel_id;
    SELF.Diff_vessel_database_key := le.vessel_database_key <> ri.vessel_database_key;
    SELF.Diff_name_of_vessel := le.name_of_vessel <> ri.name_of_vessel;
    SELF.Diff_call_sign := le.call_sign <> ri.call_sign;
    SELF.Diff_official_number := le.official_number <> ri.official_number;
    SELF.Diff_imo_number := le.imo_number <> ri.imo_number;
    SELF.Diff_hull_number := le.hull_number <> ri.hull_number;
    SELF.Diff_hull_identification_number := le.hull_identification_number <> ri.hull_identification_number;
    SELF.Diff_vessel_service_type := le.vessel_service_type <> ri.vessel_service_type;
    SELF.Diff_flag := le.flag <> ri.flag;
    SELF.Diff_self_propelled_indicator := le.self_propelled_indicator <> ri.self_propelled_indicator;
    SELF.Diff_registered_gross_tons := le.registered_gross_tons <> ri.registered_gross_tons;
    SELF.Diff_registered_net_tons := le.registered_net_tons <> ri.registered_net_tons;
    SELF.Diff_registered_length := le.registered_length <> ri.registered_length;
    SELF.Diff_registered_breadth := le.registered_breadth <> ri.registered_breadth;
    SELF.Diff_registered_depth := le.registered_depth <> ri.registered_depth;
    SELF.Diff_itc_gross_tons := le.itc_gross_tons <> ri.itc_gross_tons;
    SELF.Diff_itc_net_tons := le.itc_net_tons <> ri.itc_net_tons;
    SELF.Diff_itc_length := le.itc_length <> ri.itc_length;
    SELF.Diff_itc_breadth := le.itc_breadth <> ri.itc_breadth;
    SELF.Diff_itc_depth := le.itc_depth <> ri.itc_depth;
    SELF.Diff_hailing_port := le.hailing_port <> ri.hailing_port;
    SELF.Diff_hailing_port_state := le.hailing_port_state <> ri.hailing_port_state;
    SELF.Diff_hailing_port_province := le.hailing_port_province <> ri.hailing_port_province;
    SELF.Diff_home_port_name := le.home_port_name <> ri.home_port_name;
    SELF.Diff_home_port_state := le.home_port_state <> ri.home_port_state;
    SELF.Diff_home_port_province := le.home_port_province <> ri.home_port_province;
    SELF.Diff_trade_ind_coastwise_unrestricted := le.trade_ind_coastwise_unrestricted <> ri.trade_ind_coastwise_unrestricted;
    SELF.Diff_trade_ind_limited_coastwise_bowaters_only := le.trade_ind_limited_coastwise_bowaters_only <> ri.trade_ind_limited_coastwise_bowaters_only;
    SELF.Diff_trade_ind_limited_coastwise_restricted := le.trade_ind_limited_coastwise_restricted <> ri.trade_ind_limited_coastwise_restricted;
    SELF.Diff_trade_ind_limited_coastwise_oil_spill_response_only := le.trade_ind_limited_coastwise_oil_spill_response_only <> ri.trade_ind_limited_coastwise_oil_spill_response_only;
    SELF.Diff_trade_ind_limited_coastwise_under_charter_to_citizen := le.trade_ind_limited_coastwise_under_charter_to_citizen <> ri.trade_ind_limited_coastwise_under_charter_to_citizen;
    SELF.Diff_trade_ind_fishery := le.trade_ind_fishery <> ri.trade_ind_fishery;
    SELF.Diff_trade_ind_limited_fishery_only := le.trade_ind_limited_fishery_only <> ri.trade_ind_limited_fishery_only;
    SELF.Diff_trade_ind_recreation := le.trade_ind_recreation <> ri.trade_ind_recreation;
    SELF.Diff_trade_ind_limited_recreation_great_lakes_use_only := le.trade_ind_limited_recreation_great_lakes_use_only <> ri.trade_ind_limited_recreation_great_lakes_use_only;
    SELF.Diff_trade_ind_registry := le.trade_ind_registry <> ri.trade_ind_registry;
    SELF.Diff_trade_ind_limited_registry_cross_border_financing := le.trade_ind_limited_registry_cross_border_financing <> ri.trade_ind_limited_registry_cross_border_financing;
    SELF.Diff_trade_ind_limited_registry_no_foreign_voyage := le.trade_ind_limited_registry_no_foreign_voyage <> ri.trade_ind_limited_registry_no_foreign_voyage;
    SELF.Diff_trade_ind_limited_registry_trade_with_canada_only := le.trade_ind_limited_registry_trade_with_canada_only <> ri.trade_ind_limited_registry_trade_with_canada_only;
    SELF.Diff_trade_ind_great_lakes := le.trade_ind_great_lakes <> ri.trade_ind_great_lakes;
    SELF.Diff_vessel_complete_build_city := le.vessel_complete_build_city <> ri.vessel_complete_build_city;
    SELF.Diff_vessel_complete_build_state := le.vessel_complete_build_state <> ri.vessel_complete_build_state;
    SELF.Diff_vessel_complete_build_province := le.vessel_complete_build_province <> ri.vessel_complete_build_province;
    SELF.Diff_vessel_complete_build_country := le.vessel_complete_build_country <> ri.vessel_complete_build_country;
    SELF.Diff_vessel_build_year := le.vessel_build_year <> ri.vessel_build_year;
    SELF.Diff_vessel_hull_build_city := le.vessel_hull_build_city <> ri.vessel_hull_build_city;
    SELF.Diff_vessel_hull_build_state := le.vessel_hull_build_state <> ri.vessel_hull_build_state;
    SELF.Diff_vessel_hull_build_province := le.vessel_hull_build_province <> ri.vessel_hull_build_province;
    SELF.Diff_vessel_hull_build_country := le.vessel_hull_build_country <> ri.vessel_hull_build_country;
    SELF.Diff_party_identification_number := le.party_identification_number <> ri.party_identification_number;
    SELF.Diff_main_hp_ahead := le.main_hp_ahead <> ri.main_hp_ahead;
    SELF.Diff_main_hp_astern := le.main_hp_astern <> ri.main_hp_astern;
    SELF.Diff_propulsion_type := le.propulsion_type <> ri.propulsion_type;
    SELF.Diff_hull_material := le.hull_material <> ri.hull_material;
    SELF.Diff_ship_yard := le.ship_yard <> ri.ship_yard;
    SELF.Diff_hull_builder_name := le.hull_builder_name <> ri.hull_builder_name;
    SELF.Diff_doc_certificate_status := le.doc_certificate_status <> ri.doc_certificate_status;
    SELF.Diff_date_issued := le.date_issued <> ri.date_issued;
    SELF.Diff_date_expires := le.date_expires <> ri.date_expires;
    SELF.Diff_hull_design_type := le.hull_design_type <> ri.hull_design_type;
    SELF.Diff_sail_ind := le.sail_ind <> ri.sail_ind;
    SELF.Diff_party_database_key := le.party_database_key <> ri.party_database_key;
    SELF.Diff_itc_tons_cod_ind := le.itc_tons_cod_ind <> ri.itc_tons_cod_ind;
    SELF.Diff_persistent_record_id := le.persistent_record_id <> ri.persistent_record_id;
    SELF.Val := (SALT30.StrType)evaluate(le,pivot_exp);
    SELF.SourceField := le.source_code;
    SELF.Num_Diffs := 0+ IF( SELF.Diff_watercraft_key,1,0)+ IF( SELF.Diff_sequence_key,1,0)+ IF( SELF.Diff_state_origin,1,0)+ IF( SELF.Diff_source_code,1,0)+ IF( SELF.Diff_vessel_id,1,0)+ IF( SELF.Diff_vessel_database_key,1,0)+ IF( SELF.Diff_name_of_vessel,1,0)+ IF( SELF.Diff_call_sign,1,0)+ IF( SELF.Diff_official_number,1,0)+ IF( SELF.Diff_imo_number,1,0)+ IF( SELF.Diff_hull_number,1,0)+ IF( SELF.Diff_hull_identification_number,1,0)+ IF( SELF.Diff_vessel_service_type,1,0)+ IF( SELF.Diff_flag,1,0)+ IF( SELF.Diff_self_propelled_indicator,1,0)+ IF( SELF.Diff_registered_gross_tons,1,0)+ IF( SELF.Diff_registered_net_tons,1,0)+ IF( SELF.Diff_registered_length,1,0)+ IF( SELF.Diff_registered_breadth,1,0)+ IF( SELF.Diff_registered_depth,1,0)+ IF( SELF.Diff_itc_gross_tons,1,0)+ IF( SELF.Diff_itc_net_tons,1,0)+ IF( SELF.Diff_itc_length,1,0)+ IF( SELF.Diff_itc_breadth,1,0)+ IF( SELF.Diff_itc_depth,1,0)+ IF( SELF.Diff_hailing_port,1,0)+ IF( SELF.Diff_hailing_port_state,1,0)+ IF( SELF.Diff_hailing_port_province,1,0)+ IF( SELF.Diff_home_port_name,1,0)+ IF( SELF.Diff_home_port_state,1,0)+ IF( SELF.Diff_home_port_province,1,0)+ IF( SELF.Diff_trade_ind_coastwise_unrestricted,1,0)+ IF( SELF.Diff_trade_ind_limited_coastwise_bowaters_only,1,0)+ IF( SELF.Diff_trade_ind_limited_coastwise_restricted,1,0)+ IF( SELF.Diff_trade_ind_limited_coastwise_oil_spill_response_only,1,0)+ IF( SELF.Diff_trade_ind_limited_coastwise_under_charter_to_citizen,1,0)+ IF( SELF.Diff_trade_ind_fishery,1,0)+ IF( SELF.Diff_trade_ind_limited_fishery_only,1,0)+ IF( SELF.Diff_trade_ind_recreation,1,0)+ IF( SELF.Diff_trade_ind_limited_recreation_great_lakes_use_only,1,0)+ IF( SELF.Diff_trade_ind_registry,1,0)+ IF( SELF.Diff_trade_ind_limited_registry_cross_border_financing,1,0)+ IF( SELF.Diff_trade_ind_limited_registry_no_foreign_voyage,1,0)+ IF( SELF.Diff_trade_ind_limited_registry_trade_with_canada_only,1,0)+ IF( SELF.Diff_trade_ind_great_lakes,1,0)+ IF( SELF.Diff_vessel_complete_build_city,1,0)+ IF( SELF.Diff_vessel_complete_build_state,1,0)+ IF( SELF.Diff_vessel_complete_build_province,1,0)+ IF( SELF.Diff_vessel_complete_build_country,1,0)+ IF( SELF.Diff_vessel_build_year,1,0)+ IF( SELF.Diff_vessel_hull_build_city,1,0)+ IF( SELF.Diff_vessel_hull_build_state,1,0)+ IF( SELF.Diff_vessel_hull_build_province,1,0)+ IF( SELF.Diff_vessel_hull_build_country,1,0)+ IF( SELF.Diff_party_identification_number,1,0)+ IF( SELF.Diff_main_hp_ahead,1,0)+ IF( SELF.Diff_main_hp_astern,1,0)+ IF( SELF.Diff_propulsion_type,1,0)+ IF( SELF.Diff_hull_material,1,0)+ IF( SELF.Diff_ship_yard,1,0)+ IF( SELF.Diff_hull_builder_name,1,0)+ IF( SELF.Diff_doc_certificate_status,1,0)+ IF( SELF.Diff_date_issued,1,0)+ IF( SELF.Diff_date_expires,1,0)+ IF( SELF.Diff_hull_design_type,1,0)+ IF( SELF.Diff_sail_ind,1,0)+ IF( SELF.Diff_party_database_key,1,0)+ IF( SELF.Diff_itc_tons_cod_ind,1,0)+ IF( SELF.Diff_persistent_record_id,1,0);
  END;
// Now need to remove bad pivots from comparison
#uniquename(L)
  %L% := JOIN(in_left,bad_pivots,evaluate(LEFT,pivot_exp)=right.val,transform(left),left only,lookup);
#uniquename(R)
  %R% := JOIN(in_right,bad_pivots,evaluate(LEFT,pivot_exp)=right.val,transform(left),left only,lookup);
#uniquename(DiffL)
  %DiffL% := JOIN(%L%,%R%,evaluate(left,pivot_exp)=evaluate(right,pivot_exp),%fd%(left,right),hash);
#uniquename(Closest)
  %Closest% := DEDUP(SORT(%DiffL%,Val,Num_Diffs,local),Val,local); // Join will have distributed by pivot_exp
#uniquename(AggRec)
  %AggRec% := RECORD
    Count_Diff_watercraft_key := COUNT(GROUP,%Closest%.Diff_watercraft_key);
    Count_Diff_sequence_key := COUNT(GROUP,%Closest%.Diff_sequence_key);
    Count_Diff_state_origin := COUNT(GROUP,%Closest%.Diff_state_origin);
    Count_Diff_source_code := COUNT(GROUP,%Closest%.Diff_source_code);
    Count_Diff_vessel_id := COUNT(GROUP,%Closest%.Diff_vessel_id);
    Count_Diff_vessel_database_key := COUNT(GROUP,%Closest%.Diff_vessel_database_key);
    Count_Diff_name_of_vessel := COUNT(GROUP,%Closest%.Diff_name_of_vessel);
    Count_Diff_call_sign := COUNT(GROUP,%Closest%.Diff_call_sign);
    Count_Diff_official_number := COUNT(GROUP,%Closest%.Diff_official_number);
    Count_Diff_imo_number := COUNT(GROUP,%Closest%.Diff_imo_number);
    Count_Diff_hull_number := COUNT(GROUP,%Closest%.Diff_hull_number);
    Count_Diff_hull_identification_number := COUNT(GROUP,%Closest%.Diff_hull_identification_number);
    Count_Diff_vessel_service_type := COUNT(GROUP,%Closest%.Diff_vessel_service_type);
    Count_Diff_flag := COUNT(GROUP,%Closest%.Diff_flag);
    Count_Diff_self_propelled_indicator := COUNT(GROUP,%Closest%.Diff_self_propelled_indicator);
    Count_Diff_registered_gross_tons := COUNT(GROUP,%Closest%.Diff_registered_gross_tons);
    Count_Diff_registered_net_tons := COUNT(GROUP,%Closest%.Diff_registered_net_tons);
    Count_Diff_registered_length := COUNT(GROUP,%Closest%.Diff_registered_length);
    Count_Diff_registered_breadth := COUNT(GROUP,%Closest%.Diff_registered_breadth);
    Count_Diff_registered_depth := COUNT(GROUP,%Closest%.Diff_registered_depth);
    Count_Diff_itc_gross_tons := COUNT(GROUP,%Closest%.Diff_itc_gross_tons);
    Count_Diff_itc_net_tons := COUNT(GROUP,%Closest%.Diff_itc_net_tons);
    Count_Diff_itc_length := COUNT(GROUP,%Closest%.Diff_itc_length);
    Count_Diff_itc_breadth := COUNT(GROUP,%Closest%.Diff_itc_breadth);
    Count_Diff_itc_depth := COUNT(GROUP,%Closest%.Diff_itc_depth);
    Count_Diff_hailing_port := COUNT(GROUP,%Closest%.Diff_hailing_port);
    Count_Diff_hailing_port_state := COUNT(GROUP,%Closest%.Diff_hailing_port_state);
    Count_Diff_hailing_port_province := COUNT(GROUP,%Closest%.Diff_hailing_port_province);
    Count_Diff_home_port_name := COUNT(GROUP,%Closest%.Diff_home_port_name);
    Count_Diff_home_port_state := COUNT(GROUP,%Closest%.Diff_home_port_state);
    Count_Diff_home_port_province := COUNT(GROUP,%Closest%.Diff_home_port_province);
    Count_Diff_trade_ind_coastwise_unrestricted := COUNT(GROUP,%Closest%.Diff_trade_ind_coastwise_unrestricted);
    Count_Diff_trade_ind_limited_coastwise_bowaters_only := COUNT(GROUP,%Closest%.Diff_trade_ind_limited_coastwise_bowaters_only);
    Count_Diff_trade_ind_limited_coastwise_restricted := COUNT(GROUP,%Closest%.Diff_trade_ind_limited_coastwise_restricted);
    Count_Diff_trade_ind_limited_coastwise_oil_spill_response_only := COUNT(GROUP,%Closest%.Diff_trade_ind_limited_coastwise_oil_spill_response_only);
    Count_Diff_trade_ind_limited_coastwise_under_charter_to_citizen := COUNT(GROUP,%Closest%.Diff_trade_ind_limited_coastwise_under_charter_to_citizen);
    Count_Diff_trade_ind_fishery := COUNT(GROUP,%Closest%.Diff_trade_ind_fishery);
    Count_Diff_trade_ind_limited_fishery_only := COUNT(GROUP,%Closest%.Diff_trade_ind_limited_fishery_only);
    Count_Diff_trade_ind_recreation := COUNT(GROUP,%Closest%.Diff_trade_ind_recreation);
    Count_Diff_trade_ind_limited_recreation_great_lakes_use_only := COUNT(GROUP,%Closest%.Diff_trade_ind_limited_recreation_great_lakes_use_only);
    Count_Diff_trade_ind_registry := COUNT(GROUP,%Closest%.Diff_trade_ind_registry);
    Count_Diff_trade_ind_limited_registry_cross_border_financing := COUNT(GROUP,%Closest%.Diff_trade_ind_limited_registry_cross_border_financing);
    Count_Diff_trade_ind_limited_registry_no_foreign_voyage := COUNT(GROUP,%Closest%.Diff_trade_ind_limited_registry_no_foreign_voyage);
    Count_Diff_trade_ind_limited_registry_trade_with_canada_only := COUNT(GROUP,%Closest%.Diff_trade_ind_limited_registry_trade_with_canada_only);
    Count_Diff_trade_ind_great_lakes := COUNT(GROUP,%Closest%.Diff_trade_ind_great_lakes);
    Count_Diff_vessel_complete_build_city := COUNT(GROUP,%Closest%.Diff_vessel_complete_build_city);
    Count_Diff_vessel_complete_build_state := COUNT(GROUP,%Closest%.Diff_vessel_complete_build_state);
    Count_Diff_vessel_complete_build_province := COUNT(GROUP,%Closest%.Diff_vessel_complete_build_province);
    Count_Diff_vessel_complete_build_country := COUNT(GROUP,%Closest%.Diff_vessel_complete_build_country);
    Count_Diff_vessel_build_year := COUNT(GROUP,%Closest%.Diff_vessel_build_year);
    Count_Diff_vessel_hull_build_city := COUNT(GROUP,%Closest%.Diff_vessel_hull_build_city);
    Count_Diff_vessel_hull_build_state := COUNT(GROUP,%Closest%.Diff_vessel_hull_build_state);
    Count_Diff_vessel_hull_build_province := COUNT(GROUP,%Closest%.Diff_vessel_hull_build_province);
    Count_Diff_vessel_hull_build_country := COUNT(GROUP,%Closest%.Diff_vessel_hull_build_country);
    Count_Diff_party_identification_number := COUNT(GROUP,%Closest%.Diff_party_identification_number);
    Count_Diff_main_hp_ahead := COUNT(GROUP,%Closest%.Diff_main_hp_ahead);
    Count_Diff_main_hp_astern := COUNT(GROUP,%Closest%.Diff_main_hp_astern);
    Count_Diff_propulsion_type := COUNT(GROUP,%Closest%.Diff_propulsion_type);
    Count_Diff_hull_material := COUNT(GROUP,%Closest%.Diff_hull_material);
    Count_Diff_ship_yard := COUNT(GROUP,%Closest%.Diff_ship_yard);
    Count_Diff_hull_builder_name := COUNT(GROUP,%Closest%.Diff_hull_builder_name);
    Count_Diff_doc_certificate_status := COUNT(GROUP,%Closest%.Diff_doc_certificate_status);
    Count_Diff_date_issued := COUNT(GROUP,%Closest%.Diff_date_issued);
    Count_Diff_date_expires := COUNT(GROUP,%Closest%.Diff_date_expires);
    Count_Diff_hull_design_type := COUNT(GROUP,%Closest%.Diff_hull_design_type);
    Count_Diff_sail_ind := COUNT(GROUP,%Closest%.Diff_sail_ind);
    Count_Diff_party_database_key := COUNT(GROUP,%Closest%.Diff_party_database_key);
    Count_Diff_itc_tons_cod_ind := COUNT(GROUP,%Closest%.Diff_itc_tons_cod_ind);
    Count_Diff_persistent_record_id := COUNT(GROUP,%Closest%.Diff_persistent_record_id);
    %Closest%.SourceField;
  END;
  out_counts := table(%Closest%,%AggRec%,SourceField,few);
ENDMACRO;
END;
