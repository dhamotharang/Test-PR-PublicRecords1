Generated by SALT V3.2.0
Command line options: -MBIPV2_EmpID -eC:\Users\bentlela\AppData\Local\Temp\TFR1C65.tmp 
File being processed :-
OPTIONS:-gh -ga -p2 -gs2
MODULE:BIPV2_EmpID
FILENAME:EmpID
 
// ------------------------------------
//  IDs and Tuning
// ------------------------------------
IDFIELD:EXISTS:EmpID
RIDFIELD:rcid
RECORDS:4816645228
POPULATION:650474159
NINES:4
BLOCKTHRESHOLD:5
// THRESHOLD:42
 
IDPARENTS:OrgID,UltID
// IDCHILDREN:DotID
HACK:NOSLICE
HACK:NO_PARALLEL_MATCH
HACK:MULTIPARENT
 
// ------------------------------------
//  Field validation/cleaning
// ------------------------------------
FIELDTYPE:multiword:CAPS:ALLOW(ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'):SPACES( <>{}[]-^=!+&,./):ONFAIL(CLEAN)
FIELDTYPE:number:ALLOW(0123456789)
FIELDTYPE:hasZip4:ALLOW(0123456789):LENGTHS(4):ONFAIL(REJECT)
 
// ------------------------------------
//  Linking fields
// ------------------------------------
 
// ASSERT - Unincorporated businesses
FIELDTYPE:isNoCorp:ALLOW(F):LENGTHS(0,1):ONFAIL(REJECT)
FIELD:isCorpEnhanced:LIKE(isNoCorp):CARRY:0,0
 
// ASSERT - Identified owner
FIELDTYPE:isOwner:ENUM(_set_Owner):ONFAIL(REJECT)
FIELD:contact_job_title_derived:LIKE(isOwner):CARRY:0,0
 
// Company Name - fname/lname remove to avoid double counting
FIELD:cname_devanitize:LIKE(multiword):BAGOFWORDS(MOST):EDIT1(2):PROP:FORCE(+):TYPE(string250):20,90
 
// skeletal address match, assert zip4 exists to ensure quality
FIELD:prim_range:FORCE:13,37
FIELD:prim_name:PROP:FORCE(+):15,53
FIELD:zip:LIKE(number):14,31
FIELD:zip4:LIKE(hasZip4):CARRY:0,0
 
FUZZY:PreferredName:RST:CUSTOM(BIPV2_Tools.fn_PreferredName):TYPE(STRING20)
FIELD:fname:INITIAL:PreferredName:FORCE(+):8,15
FIELD:lname:FORCE(+):15,20
FIELD:contact_phone:24,101
FIELD:contact_did:FORCE(--):24,23
FIELD:contact_ssn:FORCE(--):4,48
 
// CARRY fields useful for evaluation
FIELD:company_name:CARRY:0,0
FIELD:sec_range:CARRY:0,0
FIELD:v_city_name:CARRY:0,0
FIELD:st:CARRY:0,0
FIELD:company_inc_state:CARRY:0,0
FIELD:company_charter_number:CARRY:0,0
FIELD:active_duns_number:CARRY:0,0
FIELD:hist_duns_number:CARRY:0,0
FIELD:active_domestic_corp_key:CARRY:0,0
FIELD:hist_domestic_corp_key:CARRY:0,0
FIELD:foreign_corp_key:CARRY:0,0
FIELD:unk_corp_key:CARRY:0,0
FIELD:company_fein:CARRY:0,0
FIELD:cnp_btype:CARRY:0,0
FIELD:cnp_name:CARRY:0,0
FIELD:company_name_type_derived:CARRY:0,0
FIELD:company_bdid:CARRY:0,0
FIELD:nodes_total:CARRY:0,0
 
// ------------------------------------
//  Metadata
// ------------------------------------
FIELD:dt_first_seen:RECORDDATE(FIRST):0,0
FIELD:dt_last_seen:RECORDDATE(LAST):0,0
SOURCEFIELD:source:CONSISTENT(cname_devanitize,prim_range,prim_name,zip,fname,lname):PARTITION(BIPV2.Mod_Sources.src2partition)
 
Total available specificity:137
Recommended matching threshold 43
Search Threshold set at 20
Use of PERSISTs in code set at:2
 
______________________________English Description of Matching Process___________________________
 
A SALT generated matching process really only contains one single matching rule.
SALT compares every record to every possible matching record and then allocates a score to how well
the records match. SALT then pairs those clusters which have the highest match scores provided the scores
meet or exceed the matching threshold. The scoring process is highly sophisticated and detailed below
however it can essentially be thought of as allocating points for every pair of fields that match
and subtracting points for every pair of fields that do not match.
This process was told to produce 4 nines of accuracy on a population of 650474176 with  4816645120 records.
The matching threshold is therefore set at 43.
 
___Field by Field Breakdown of Scoring Method___
 
isCorpEnhanced Scoring: This field is not used for scoring; rather it is carried along for context and debugging
contact_job_title_derived Scoring: This field is not used for scoring; rather it is carried along for context and debugging
cname_devanitize Scoring: In order for two records to be a match it is also required that the cname_devanitize fields match.
If a field is null and another record in the same cluster has a value for that field then the other records value will be used.
Two cname_devanitize fields will be considered to match if:
  - they are identical
  - one can be turned into the other with 1 edit (see Glossary)
  - if the space separated tokens in one match the other if re-arranged
The exact number of points allocated to a match will depend upon the global scarcity of the cname_devanitize
and the degree of fuzziness required but should average 20 points with a failed match substracting 18 points.
(This subtraction estimate is based upon 9% of clusters with 2 or more records have 2 or more values for cname_devanitize.)
 
prim_range Scoring: In order for two records to be a match it is also required that the prim_range fields match.
Two prim_range fields will be considered to match if:
  - they are identical
The exact number of points allocated to a match will depend upon the global scarcity of the prim_range
but should average 13 points with a failed match substracting 12 points.
(This subtraction estimate is based upon 3% of clusters with 2 or more records have 2 or more values for prim_range.)
 
prim_name Scoring: In order for two records to be a match it is also required that the prim_name fields match.
If a field is null and another record in the same cluster has a value for that field then the other records value will be used.
Two prim_name fields will be considered to match if:
  - they are identical
The exact number of points allocated to a match will depend upon the global scarcity of the prim_name
but should average 15 points with a failed match substracting 14 points.
(This subtraction estimate is based upon 5% of clusters with 2 or more records have 2 or more values for prim_name.)
 
zip Scoring: Two zip fields will be considered to match if:
  - they are identical
The exact number of points allocated to a match will depend upon the global scarcity of the zip
but should average 14 points with a failed match substracting 13 points.
(This subtraction estimate is based upon 3% of clusters with 2 or more records have 2 or more values for zip.)
 
zip4 Scoring: This field is not used for scoring; rather it is carried along for context and debugging
fname Scoring: In order for two records to be a match it is also required that the fname fields match.
Two fname fields will be considered to match if:
  - they are identical
  - one is the leading part of the other
  - if the two fields have the same value for the function PreferredName
The exact number of points allocated to a match will depend upon the global scarcity of the fname
and the degree of fuzziness required but should average 8 points with a failed match substracting 7 points.
(This subtraction estimate is based upon 1% of clusters with 2 or more records have 2 or more values for fname.)
 
lname Scoring: In order for two records to be a match it is also required that the lname fields match.
Two lname fields will be considered to match if:
  - they are identical
The exact number of points allocated to a match will depend upon the global scarcity of the lname
but should average 15 points with a failed match substracting 14 points.
(This subtraction estimate is based upon 2% of clusters with 2 or more records have 2 or more values for lname.)
 
contact_phone Scoring: Two contact_phone fields will be considered to match if:
  - they are identical
The exact number of points allocated to a match will depend upon the global scarcity of the contact_phone
but should average 24 points with a failed match substracting 21 points.
(This subtraction estimate is based upon 10% of clusters with 2 or more records have 2 or more values for contact_phone.)
 
contact_did Scoring: In order for two records to be a match it is also required that the contact_did fields not not match.
Two contact_did fields will be considered to match if:
  - they are identical
The exact number of points allocated to a match will depend upon the global scarcity of the contact_did
but should average 24 points with a failed match substracting 23 points.
(This subtraction estimate is based upon 2% of clusters with 2 or more records have 2 or more values for contact_did.)
 
contact_ssn Scoring: In order for two records to be a match it is also required that the contact_ssn fields not not match.
Two contact_ssn fields will be considered to match if:
  - they are identical
The exact number of points allocated to a match will depend upon the global scarcity of the contact_ssn
but should average 4 points with a failed match substracting 3 points.
(This subtraction estimate is based upon 4% of clusters with 2 or more records have 2 or more values for contact_ssn.)
 
company_name Scoring: This field is not used for scoring; rather it is carried along for context and debugging
sec_range Scoring: This field is not used for scoring; rather it is carried along for context and debugging
v_city_name Scoring: This field is not used for scoring; rather it is carried along for context and debugging
st Scoring: This field is not used for scoring; rather it is carried along for context and debugging
company_inc_state Scoring: This field is not used for scoring; rather it is carried along for context and debugging
company_charter_number Scoring: This field is not used for scoring; rather it is carried along for context and debugging
active_duns_number Scoring: This field is not used for scoring; rather it is carried along for context and debugging
hist_duns_number Scoring: This field is not used for scoring; rather it is carried along for context and debugging
active_domestic_corp_key Scoring: This field is not used for scoring; rather it is carried along for context and debugging
hist_domestic_corp_key Scoring: This field is not used for scoring; rather it is carried along for context and debugging
foreign_corp_key Scoring: This field is not used for scoring; rather it is carried along for context and debugging
unk_corp_key Scoring: This field is not used for scoring; rather it is carried along for context and debugging
company_fein Scoring: This field is not used for scoring; rather it is carried along for context and debugging
cnp_btype Scoring: This field is not used for scoring; rather it is carried along for context and debugging
cnp_name Scoring: This field is not used for scoring; rather it is carried along for context and debugging
company_name_type_derived Scoring: This field is not used for scoring; rather it is carried along for context and debugging
company_bdid Scoring: This field is not used for scoring; rather it is carried along for context and debugging
nodes_total Scoring: This field is not used for scoring; rather it is carried along for context and debugging
dt_first_seen Scoring: Date fields are not presently used for scoring but are carried along for debugging purposes
dt_last_seen Scoring: Date fields are not presently used for scoring but are carried along for debugging purposes
 
__Glossary__
Edit Distance: An edit distance of (say) one implies that one string can be converted into another by doing one of
  - Changing one character
  - Deleting one character
  - Transposing two characters
 
Forcing Criteria: In addition to the general 'best match' logic it is possible to insist that
one particular field must match to some degree or the whole record is considered a bad match.
The criterial applied to that one field is the forcing criteria.
 
Cascade: Best Type rules are applied in such a way that the rules are applied one by one UNTIL the first rule succeeds; subsequent rules are then skipped.
 
__General Notes__
How is it decided how much to subtract for a bad match?
SALT computes for each field the percentage likelihood that a valid cluster will have two or more values for a given field
this value (called the switch value in the SALT literature) is then used to produce the subtraction value from the match value.
The value in this document is the one typed into the SPC file; the code will use a value computed at run-time.
 
