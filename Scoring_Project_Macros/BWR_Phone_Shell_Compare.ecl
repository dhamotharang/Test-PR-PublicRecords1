EXPORT BWR_Phone_Shell_Compare(oldFile, newFile) := MACRO


#WORKUNIT('name', 'Phone Shell Comparison');

IMPORT Phone_Shell;

ds_original := dataset(oldFile, Phone_Shell.Layout_Modeling_Shell, csv(quote('"')));
ds_compare := dataset(newFile, Phone_Shell.Layout_Modeling_Shell, csv(quote('"')));

// ds_original := dataset('~scoringqa::out::phone_shell_20180112_test.csv', Phone_Shell.Layout_Modeling_Shell, csv(quote('"')));
// ds_compare := dataset('~scoringqa::out::phone_shell_20180112_test2.csv', Phone_Shell.Layout_Modeling_Shell, csv(quote('"')));

layout_comparison := RECORD
  // integer AcctNo;
  // integer in_FName;
  // integer in_LName;
  // integer in_StreetAddress;
  // integer in_City;
  // integer in_State;
  // integer in_ZipCode;
  // integer in_DOB;
  // integer in_SSN;
  // integer in_ph10;
  // integer in_EXPGW_Enabled;
  // integer in_TargusGW_Enabled;
  // integer in_TUGW_Enabled;
  // integer in_InsGW_Enabled;
  // integer in_Processing_Date;
  integer Subject_SSN_Mismatch;
  integer Exp_Num_Duplicate;
  integer Exp_Num_Insufficient_Score;
  integer Gathered_Ph;
  integer Source_List;
  integer Source_List_Last_Seen;
  integer Source_List_First_Seen;
  integer Phone_Subject_Level;
  integer Phone_Subject_Title;
  integer Phone_Switch_Type;
  integer Phone_High_Risk;
  integer Phone_Debt_Settlement;
  integer Phone_Disconnected;
  integer Phone_Zip_Match;
  integer Phone_Timezone_Match;
  integer Phone_Timezone;
  integer Address_Zipcode_Timezone;
  integer Phone_Match_Code;
  integer Phone_Business_Count;
  integer PP_Type;
  integer PP_Source;
  integer PP_Carrier;
  integer PP_City;
  integer PP_State;
  integer PP_RP_Type;
  integer PP_RP_Source;
  integer PP_RP_Carrier;
  integer PP_RP_City;
  integer PP_RP_State;
  integer PP_Confidence;
  integer PP_Rules;
  integer PP_DID;
  integer PP_DID_Score;
  integer PP_Listing_Name;
  integer PP_DateFirstSeen;
  integer PP_DateLastSeen;
  integer PP_DateVendorFirstSeen;
  integer PP_DateVendorLastSeen;
  integer PP_Date_NonGLB_LastSeen;
  integer PP_GLB_DPPA_fl;
  integer PP_GLB_DPPA_All;
  integer PP_Src;
  integer PP_Src_All;
  integer PP_Src_Cnt;
  integer PP_Src_Rule;
  integer PP_Avg_Source_Conf;
  integer PP_Max_Source_Conf;
  integer PP_Min_Source_Conf;
  integer PP_Total_Source_Conf;
  integer PP_Orig_LastSeen;
  integer PP_DID_Type;
  integer PP_OrigName;
  integer PP_Address1;
  integer PP_Address2;
  integer PP_Address3;
  integer PP_OrigCity;
  integer PP_OrigState;
  integer PP_OrigZip;
  integer PP_OrigPhone;
  integer PP_Dob;
  integer PP_AgeGroup;
  integer PP_Gender;
  integer PP_Email;
  integer PP_OrigListingType;
  integer PP_ListingType;
  integer PP_OrigPublishCode;
  integer PP_OrigPhoneType;
  integer PP_OrigPhoneUsage;
  integer PP_Company;
  integer PP_OrigPhoneRegDate;
  integer PP_OrigCarrierCode;
  integer PP_OrigCarrierName;
  integer PP_OrigConfScore;
  integer PP_OrigRecType;
  integer PP_BDID;
  integer PP_BDID_Score;
  integer PP_app_NPA_Effective_DT;
  integer PP_app_NPA_Last_Change_DT;
  integer PP_app_Dialable_Ind;
  integer PP_app_Place_Name;
  integer PP_app_Portability_Indicator;
  integer PP_app_Prior_Area_Code;
  integer PP_app_NonPublished_Match;
  integer PP_app_OCN;
  integer PP_app_Time_Zone;
  integer PP_app_NXX_Type;
  integer PP_app_COCType;
  integer PP_app_SCC;
  integer PP_app_ph_Type;
  integer PP_app_Company_Type;
  integer PP_app_ph_Use;
  integer PP_Agreg_Listing_Type;
  integer PP_Max_Orig_Conf_Score;
  integer PP_Min_Orig_Conf_Score;
  integer PP_Curr_Orig_Conf_Score;
  integer PP_EDA_Match;
  integer PP_EDA_ph_Dt;
  integer PP_EDA_DID_Dt;
  integer PP_EDA_NM_Addr_Dt;
  integer PP_EDA_Hist_Match;
  integer PP_EDA_Hist_ph_Dt;
  integer PP_EDA_Hist_DID_Dt;
  integer PP_EDA_Hist_Nm_Addr_Dt;
  integer PP_app_fb_ph;
  integer PP_app_fb_ph_Dt;
  integer PP_app_fb_ph7_DID;
  integer PP_app_fb_ph7_DID_Dt;
  integer PP_app_fb_ph7_NM_Addr;
  integer PP_app_fb_ph7_NM_Addr_Dt;
  integer PP_app_Ported_Match;
  integer PP_app_Seen_Once_Ind;
  integer PP_app_ind_ph_Cnt;
  integer PP_app_ind_Has_actv_EDA_ph_fl;
  integer PP_app_Latest_ph_Owner_fl;
  integer PP_HHID;
  integer PP_HHID_Score;
  integer PP_app_Best_Addr_Match_fl;
  integer PP_app_Best_NM_Match_fl;
  integer PP_RawAID;
  integer PP_CleanAID;
  integer PP_Current_Rec;
  integer PP_First_Build_Date;
  integer PP_Last_Build_Date;
  integer Phone_fb_Date;
  integer Phone_fb_Result;
  integer Phone_fb_First;
  integer Phone_fb_Middle;
  integer Phone_fb_Last;
  integer Phone_fb_Last_RPC_Date;
  integer Phone_fb_RP_Date;
  integer Phone_fb_RP_Result;
  integer Phone_fb_RP_First;
  integer Phone_fb_RP_Middle;
  integer Phone_fb_RP_Last;
  integer Phone_fb_RP_Last_RPC_Date;
  integer Inq_Num;
  integer Inq_Num_06;
  integer Inq_Num_Addresses;
  integer Inq_Num_Addresses_06;
  integer Inq_Num_ADLs;
  integer Inq_Num_ADLs_06;
  integer Inq_FirstSeen;
  integer Inq_LastSeen;
  integer Inq_ADL_FirstSeen;
  integer Inq_ADL_LastSeen;
  integer Inq_ADL_ph_Industry_List_12;
  integer Internal_Verification;
  integer Internal_ver_First_Seen;
  integer Internal_ver_Last_Seen;
  integer Internal_ver_Match_Types;
  integer Exp_Verified;
  integer Exp_Type;
  integer Exp_Source;
  integer Exp_Last_Update;
  integer Exp_ph_Score_V1;
  integer EDA_Omit_Locality;
  integer EDA_DID;
  integer EDA_HHID;
  integer EDA_BDID;
  integer EDA_Listing_Name;
  integer EDA_DID_Count;
  integer EDA_Dt_First_Seen;
  integer EDA_Dt_Last_Seen;
  integer EDA_Current_Record_fl;
  integer EDA_Deletion_Date;
  integer EDA_Disc_Cnt6;
  integer EDA_Disc_Cnt12;
  integer EDA_Disc_Cnt18;
  integer EDA_Pfrd_Address_Ind;
  integer EDA_Days_In_Service;
  integer EDA_Num_ph_Owners_Hist;
  integer EDA_Num_ph_Owners_Cur;
  integer EDA_Num_phs_ind;
  integer EDA_Num_phs_Connected_ind;
  integer EDA_Num_phs_Discon_ind;
  integer EDA_Avg_Days_Connected_ind;
  integer EDA_Min_Days_Connected_ind;
  integer EDA_Max_Days_Connected_ind;
  integer EDA_Days_ind_First_Seen;
  integer EDA_Days_ind_First_Seen_w_ph;
  integer EDA_Days_ph_First_Seen;
  integer EDA_Address_Match_Best;
  integer EDA_Months_Addr_Last_Seen;
  integer EDA_Num_phs_Connected_Addr;
  integer EDA_Num_phs_Discon_Addr;
  integer EDA_Num_phs_Connected_HHID;
  integer EDA_Num_phs_Discon_HHID;
  integer EDA_Is_Discon_15_Days;
  integer EDA_Is_Discon_30_Days;
  integer EDA_Is_Discon_60_Days;
  integer EDA_Is_Discon_90_Days;
  integer EDA_Is_Discon_180_Days;
  integer EDA_Is_Discon_360_Days;
  integer EDA_Is_Current_In_Hist;
  integer EDA_Num_Interrupts_Cur;
  integer EDA_Avg_Days_Interrupt;
  integer EDA_Min_Days_Interrupt;
  integer EDA_Max_Days_Interrupt;
  integer EDA_Has_Cur_Discon_15_Days;
  integer EDA_Has_Cur_Discon_30_Days;
  integer EDA_Has_Cur_Discon_60_Days;
  integer EDA_Has_Cur_Discon_90_Days;
  integer EDA_Has_Cur_Discon_180_Days;
	integer EDA_Has_Cur_Discon_360_Days;
	
	integer dropped;
	integer added;
	integer overlap;
	integer total;
END;

layout_comparison mk_comparison(Phone_Shell.Layout_Modeling_Shell le, Phone_Shell.Layout_Modeling_shell rt) := TRANSFORM
	self.dropped := (integer)(rt.acctNo = '');
	self.added := (integer)(le.acctNo = '');
	self.overlap := (integer)(le.acctNo = rt.acctNo);
	self.total := 1;
	
	// SELF.AcctNo := (integer)(le.AcctNo != rt.AcctNo AND (boolean)SELF.overlap);
  // SELF.in_FName := (integer)(le.in_FName != rt.in_FName AND (boolean)SELF.overlap);
  // SELF.in_LName := (integer)(le.in_LName != rt.in_LName AND (boolean)SELF.overlap);
  // SELF.in_StreetAddress := (integer)(le.in_StreetAddress != rt.in_StreetAddress AND (boolean)SELF.overlap);
  // SELF.in_City := (integer)(le.in_City != rt.in_City AND (boolean)SELF.overlap);
  // SELF.in_State := (integer)(le.in_State != rt.in_State AND (boolean)SELF.overlap);
  // SELF.in_ZipCode := (integer)(le.in_ZipCode != rt.in_ZipCode AND (boolean)SELF.overlap);
  // SELF.in_DOB := (integer)(le.in_DOB != rt.in_DOB AND (boolean)SELF.overlap);
  // SELF.in_SSN := (integer)(le.in_SSN != rt.in_SSN AND (boolean)SELF.overlap);
  // SELF.in_ph10 := (integer)(le.in_ph10 != rt.in_ph10 AND (boolean)SELF.overlap);
  // SELF.in_EXPGW_Enabled := (integer)(le.in_EXPGW_Enabled != rt.in_EXPGW_Enabled AND (boolean)SELF.overlap);
  // SELF.in_TargusGW_Enabled := (integer)(le.in_TargusGW_Enabled != rt.in_TargusGW_Enabled AND (boolean)SELF.overlap);
  // SELF.in_TUGW_Enabled := (integer)(le.in_TUGW_Enabled != rt.in_TUGW_Enabled AND (boolean)SELF.overlap);
  // SELF.in_InsGW_Enabled := (integer)(le.in_InsGW_Enabled != rt.in_InsGW_Enabled AND (boolean)SELF.overlap);
  // SELF.in_Processing_Date := (integer)(le.in_Processing_Date != rt.in_Processing_Date AND (boolean)SELF.overlap);
  SELF.Subject_SSN_Mismatch := (integer)(le.Subject_SSN_Mismatch != rt.Subject_SSN_Mismatch AND (boolean)SELF.overlap);
  SELF.Exp_Num_Duplicate := (integer)(le.Exp_Num_Duplicate != rt.Exp_Num_Duplicate AND (boolean)SELF.overlap);
  SELF.Exp_Num_Insufficient_Score := (integer)(le.Exp_Num_Insufficient_Score != rt.Exp_Num_Insufficient_Score AND (boolean)SELF.overlap);
  SELF.Gathered_Ph := (integer)(le.Gathered_Ph != rt.Gathered_Ph AND (boolean)SELF.overlap);
  SELF.Source_List := (integer)(le.Source_List != rt.Source_List AND (boolean)SELF.overlap);
  SELF.Source_List_Last_Seen := (integer)(le.Source_List_Last_Seen != rt.Source_List_Last_Seen AND (boolean)SELF.overlap);
  SELF.Source_List_First_Seen := (integer)(le.Source_List_First_Seen != rt.Source_List_First_Seen AND (boolean)SELF.overlap);
  SELF.Phone_Subject_Level := (integer)(le.Phone_Subject_Level != rt.Phone_Subject_Level AND (boolean)SELF.overlap);
  SELF.Phone_Subject_Title := (integer)(le.Phone_Subject_Title != rt.Phone_Subject_Title AND (boolean)SELF.overlap);
  SELF.Phone_Switch_Type := (integer)(le.Phone_Switch_Type != rt.Phone_Switch_Type AND (boolean)SELF.overlap);
  SELF.Phone_High_Risk := (integer)(le.Phone_High_Risk != rt.Phone_High_Risk AND (boolean)SELF.overlap);
  SELF.Phone_Debt_Settlement := (integer)(le.Phone_Debt_Settlement != rt.Phone_Debt_Settlement AND (boolean)SELF.overlap);
  SELF.Phone_Disconnected := (integer)(le.Phone_Disconnected != rt.Phone_Disconnected AND (boolean)SELF.overlap);
  SELF.Phone_Zip_Match := (integer)(le.Phone_Zip_Match != rt.Phone_Zip_Match AND (boolean)SELF.overlap);
  SELF.Phone_Timezone_Match := (integer)(le.Phone_Timezone_Match != rt.Phone_Timezone_Match AND (boolean)SELF.overlap);
  SELF.Phone_Timezone := (integer)(le.Phone_Timezone != rt.Phone_Timezone AND (boolean)SELF.overlap);
  SELF.Address_Zipcode_Timezone := (integer)(le.Address_Zipcode_Timezone != rt.Address_Zipcode_Timezone AND (boolean)SELF.overlap);
  SELF.Phone_Match_Code := (integer)(le.Phone_Match_Code != rt.Phone_Match_Code AND (boolean)SELF.overlap);
  SELF.Phone_Business_Count := (integer)(le.Phone_Business_Count != rt.Phone_Business_Count AND (boolean)SELF.overlap);
  SELF.PP_Type := (integer)(le.PP_Type != rt.PP_Type AND (boolean)SELF.overlap);
  SELF.PP_Source := (integer)(le.PP_Source != rt.PP_Source AND (boolean)SELF.overlap);
  SELF.PP_Carrier := (integer)(le.PP_Carrier != rt.PP_Carrier AND (boolean)SELF.overlap);
  SELF.PP_City := (integer)(le.PP_City != rt.PP_City AND (boolean)SELF.overlap);
  SELF.PP_State := (integer)(le.PP_State != rt.PP_State AND (boolean)SELF.overlap);
  SELF.PP_RP_Type := (integer)(le.PP_RP_Type != rt.PP_RP_Type AND (boolean)SELF.overlap);
  SELF.PP_RP_Source := (integer)(le.PP_RP_Source != rt.PP_RP_Source AND (boolean)SELF.overlap);
  SELF.PP_RP_Carrier := (integer)(le.PP_RP_Carrier != rt.PP_RP_Carrier AND (boolean)SELF.overlap);
  SELF.PP_RP_City := (integer)(le.PP_RP_City != rt.PP_RP_City AND (boolean)SELF.overlap);
  SELF.PP_RP_State := (integer)(le.PP_RP_State != rt.PP_RP_State AND (boolean)SELF.overlap);
  SELF.PP_Confidence := (integer)(le.PP_Confidence != rt.PP_Confidence AND (boolean)SELF.overlap);
  SELF.PP_Rules := (integer)(le.PP_Rules != rt.PP_Rules AND (boolean)SELF.overlap);
  SELF.PP_DID := (integer)(le.PP_DID != rt.PP_DID AND (boolean)SELF.overlap);
  SELF.PP_DID_Score := (integer)(le.PP_DID_Score != rt.PP_DID_Score AND (boolean)SELF.overlap);
  SELF.PP_Listing_Name := (integer)(le.PP_Listing_Name != rt.PP_Listing_Name AND (boolean)SELF.overlap);
  SELF.PP_DateFirstSeen := (integer)(le.PP_DateFirstSeen != rt.PP_DateFirstSeen AND (boolean)SELF.overlap);
  SELF.PP_DateLastSeen := (integer)(le.PP_DateLastSeen != rt.PP_DateLastSeen AND (boolean)SELF.overlap);
  SELF.PP_DateVendorFirstSeen := (integer)(le.PP_DateVendorFirstSeen != rt.PP_DateVendorFirstSeen AND (boolean)SELF.overlap);
  SELF.PP_DateVendorLastSeen := (integer)(le.PP_DateVendorLastSeen != rt.PP_DateVendorLastSeen AND (boolean)SELF.overlap);
  SELF.PP_Date_NonGLB_LastSeen := (integer)(le.PP_Date_NonGLB_LastSeen != rt.PP_Date_NonGLB_LastSeen AND (boolean)SELF.overlap);
  SELF.PP_GLB_DPPA_fl := (integer)(le.PP_GLB_DPPA_fl != rt.PP_GLB_DPPA_fl AND (boolean)SELF.overlap);
  SELF.PP_GLB_DPPA_All := (integer)(le.PP_GLB_DPPA_All != rt.PP_GLB_DPPA_All AND (boolean)SELF.overlap);
  SELF.PP_Src := (integer)(le.PP_Src != rt.PP_Src AND (boolean)SELF.overlap);
  SELF.PP_Src_All := (integer)(le.PP_Src_All != rt.PP_Src_All AND (boolean)SELF.overlap);
  SELF.PP_Src_Cnt := (integer)(le.PP_Src_Cnt != rt.PP_Src_Cnt AND (boolean)SELF.overlap);
  SELF.PP_Src_Rule := (integer)(le.PP_Src_Rule != rt.PP_Src_Rule AND (boolean)SELF.overlap);
  SELF.PP_Avg_Source_Conf := (integer)(le.PP_Avg_Source_Conf != rt.PP_Avg_Source_Conf AND (boolean)SELF.overlap);
  SELF.PP_Max_Source_Conf := (integer)(le.PP_Max_Source_Conf != rt.PP_Max_Source_Conf AND (boolean)SELF.overlap);
  SELF.PP_Min_Source_Conf := (integer)(le.PP_Min_Source_Conf != rt.PP_Min_Source_Conf AND (boolean)SELF.overlap);
  SELF.PP_Total_Source_Conf := (integer)(le.PP_Total_Source_Conf != rt.PP_Total_Source_Conf AND (boolean)SELF.overlap);
  SELF.PP_Orig_LastSeen := (integer)(le.PP_Orig_LastSeen != rt.PP_Orig_LastSeen AND (boolean)SELF.overlap);
  SELF.PP_DID_Type := (integer)(le.PP_DID_Type != rt.PP_DID_Type AND (boolean)SELF.overlap);
  SELF.PP_OrigName := (integer)(le.PP_OrigName != rt.PP_OrigName AND (boolean)SELF.overlap);
  SELF.PP_Address1 := (integer)(le.PP_Address1 != rt.PP_Address1 AND (boolean)SELF.overlap);
  SELF.PP_Address2 := (integer)(le.PP_Address2 != rt.PP_Address2 AND (boolean)SELF.overlap);
  SELF.PP_Address3 := (integer)(le.PP_Address3 != rt.PP_Address3 AND (boolean)SELF.overlap);
  SELF.PP_OrigCity := (integer)(le.PP_OrigCity != rt.PP_OrigCity AND (boolean)SELF.overlap);
  SELF.PP_OrigState := (integer)(le.PP_OrigState != rt.PP_OrigState AND (boolean)SELF.overlap);
  SELF.PP_OrigZip := (integer)(le.PP_OrigZip != rt.PP_OrigZip AND (boolean)SELF.overlap);
  SELF.PP_OrigPhone := (integer)(le.PP_OrigPhone != rt.PP_OrigPhone AND (boolean)SELF.overlap);
  SELF.PP_Dob := (integer)(le.PP_Dob != rt.PP_Dob AND (boolean)SELF.overlap);
  SELF.PP_AgeGroup := (integer)(le.PP_AgeGroup != rt.PP_AgeGroup AND (boolean)SELF.overlap);
  SELF.PP_Gender := (integer)(le.PP_Gender != rt.PP_Gender AND (boolean)SELF.overlap);
  SELF.PP_Email := (integer)(le.PP_Email != rt.PP_Email AND (boolean)SELF.overlap);
  SELF.PP_OrigListingType := (integer)(le.PP_OrigListingType != rt.PP_OrigListingType AND (boolean)SELF.overlap);
  SELF.PP_ListingType := (integer)(le.PP_ListingType != rt.PP_ListingType AND (boolean)SELF.overlap);
  SELF.PP_OrigPublishCode := (integer)(le.PP_OrigPublishCode != rt.PP_OrigPublishCode AND (boolean)SELF.overlap);
  SELF.PP_OrigPhoneType := (integer)(le.PP_OrigPhoneType != rt.PP_OrigPhoneType AND (boolean)SELF.overlap);
  SELF.PP_OrigPhoneUsage := (integer)(le.PP_OrigPhoneUsage != rt.PP_OrigPhoneUsage AND (boolean)SELF.overlap);
  SELF.PP_Company := (integer)(le.PP_Company != rt.PP_Company AND (boolean)SELF.overlap);
  SELF.PP_OrigPhoneRegDate := (integer)(le.PP_OrigPhoneRegDate != rt.PP_OrigPhoneRegDate AND (boolean)SELF.overlap);
  SELF.PP_OrigCarrierCode := (integer)(le.PP_OrigCarrierCode != rt.PP_OrigCarrierCode AND (boolean)SELF.overlap);
  SELF.PP_OrigCarrierName := (integer)(le.PP_OrigCarrierName != rt.PP_OrigCarrierName AND (boolean)SELF.overlap);
  SELF.PP_OrigConfScore := (integer)(le.PP_OrigConfScore != rt.PP_OrigConfScore AND (boolean)SELF.overlap);
  SELF.PP_OrigRecType := (integer)(le.PP_OrigRecType != rt.PP_OrigRecType AND (boolean)SELF.overlap);
  SELF.PP_BDID := (integer)(le.PP_BDID != rt.PP_BDID AND (boolean)SELF.overlap);
  SELF.PP_BDID_Score := (integer)(le.PP_BDID_Score != rt.PP_BDID_Score AND (boolean)SELF.overlap);
  SELF.PP_app_NPA_Effective_DT := (integer)(le.PP_app_NPA_Effective_DT != rt.PP_app_NPA_Effective_DT AND (boolean)SELF.overlap);
  SELF.PP_app_NPA_Last_Change_DT := (integer)(le.PP_app_NPA_Last_Change_DT != rt.PP_app_NPA_Last_Change_DT AND (boolean)SELF.overlap);
  SELF.PP_app_Dialable_Ind := (integer)(le.PP_app_Dialable_Ind != rt.PP_app_Dialable_Ind AND (boolean)SELF.overlap);
  SELF.PP_app_Place_Name := (integer)(le.PP_app_Place_Name != rt.PP_app_Place_Name AND (boolean)SELF.overlap);
  SELF.PP_app_Portability_Indicator := (integer)(le.PP_app_Portability_Indicator != rt.PP_app_Portability_Indicator AND (boolean)SELF.overlap);
  SELF.PP_app_Prior_Area_Code := (integer)(le.PP_app_Prior_Area_Code != rt.PP_app_Prior_Area_Code AND (boolean)SELF.overlap);
  SELF.PP_app_NonPublished_Match := (integer)(le.PP_app_NonPublished_Match != rt.PP_app_NonPublished_Match AND (boolean)SELF.overlap);
  SELF.PP_app_OCN := (integer)(le.PP_app_OCN != rt.PP_app_OCN AND (boolean)SELF.overlap);
  SELF.PP_app_Time_Zone := (integer)(le.PP_app_Time_Zone != rt.PP_app_Time_Zone AND (boolean)SELF.overlap);
  SELF.PP_app_NXX_Type := (integer)(le.PP_app_NXX_Type != rt.PP_app_NXX_Type AND (boolean)SELF.overlap);
  SELF.PP_app_COCType := (integer)(le.PP_app_COCType != rt.PP_app_COCType AND (boolean)SELF.overlap);
  SELF.PP_app_SCC := (integer)(le.PP_app_SCC != rt.PP_app_SCC AND (boolean)SELF.overlap);
  SELF.PP_app_ph_Type := (integer)(le.PP_app_ph_Type != rt.PP_app_ph_Type AND (boolean)SELF.overlap);
  SELF.PP_app_Company_Type := (integer)(le.PP_app_Company_Type != rt.PP_app_Company_Type AND (boolean)SELF.overlap);
  SELF.PP_app_ph_Use := (integer)(le.PP_app_ph_Use != rt.PP_app_ph_Use AND (boolean)SELF.overlap);
  SELF.PP_Agreg_Listing_Type := (integer)(le.PP_Agreg_Listing_Type != rt.PP_Agreg_Listing_Type AND (boolean)SELF.overlap);
  SELF.PP_Max_Orig_Conf_Score := (integer)(le.PP_Max_Orig_Conf_Score != rt.PP_Max_Orig_Conf_Score AND (boolean)SELF.overlap);
  SELF.PP_Min_Orig_Conf_Score := (integer)(le.PP_Min_Orig_Conf_Score != rt.PP_Min_Orig_Conf_Score AND (boolean)SELF.overlap);
  SELF.PP_Curr_Orig_Conf_Score := (integer)(le.PP_Curr_Orig_Conf_Score != rt.PP_Curr_Orig_Conf_Score AND (boolean)SELF.overlap);
  SELF.PP_EDA_Match := (integer)(le.PP_EDA_Match != rt.PP_EDA_Match AND (boolean)SELF.overlap);
  SELF.PP_EDA_ph_Dt := (integer)(le.PP_EDA_ph_Dt != rt.PP_EDA_ph_Dt AND (boolean)SELF.overlap);
  SELF.PP_EDA_DID_Dt := (integer)(le.PP_EDA_DID_Dt != rt.PP_EDA_DID_Dt AND (boolean)SELF.overlap);
  SELF.PP_EDA_NM_Addr_Dt := (integer)(le.PP_EDA_NM_Addr_Dt != rt.PP_EDA_NM_Addr_Dt AND (boolean)SELF.overlap);
  SELF.PP_EDA_Hist_Match := (integer)(le.PP_EDA_Hist_Match != rt.PP_EDA_Hist_Match AND (boolean)SELF.overlap);
  SELF.PP_EDA_Hist_ph_Dt := (integer)(le.PP_EDA_Hist_ph_Dt != rt.PP_EDA_Hist_ph_Dt AND (boolean)SELF.overlap);
  SELF.PP_EDA_Hist_DID_Dt := (integer)(le.PP_EDA_Hist_DID_Dt != rt.PP_EDA_Hist_DID_Dt AND (boolean)SELF.overlap);
  SELF.PP_EDA_Hist_Nm_Addr_Dt := (integer)(le.PP_EDA_Hist_Nm_Addr_Dt != rt.PP_EDA_Hist_Nm_Addr_Dt AND (boolean)SELF.overlap);
  SELF.PP_app_fb_ph := (integer)(le.PP_app_fb_ph != rt.PP_app_fb_ph AND (boolean)SELF.overlap);
  SELF.PP_app_fb_ph_Dt := (integer)(le.PP_app_fb_ph_Dt != rt.PP_app_fb_ph_Dt AND (boolean)SELF.overlap);
  SELF.PP_app_fb_ph7_DID := (integer)(le.PP_app_fb_ph7_DID != rt.PP_app_fb_ph7_DID AND (boolean)SELF.overlap);
  SELF.PP_app_fb_ph7_DID_Dt := (integer)(le.PP_app_fb_ph7_DID_Dt != rt.PP_app_fb_ph7_DID_Dt AND (boolean)SELF.overlap);
  SELF.PP_app_fb_ph7_NM_Addr := (integer)(le.PP_app_fb_ph7_NM_Addr != rt.PP_app_fb_ph7_NM_Addr AND (boolean)SELF.overlap);
  SELF.PP_app_fb_ph7_NM_Addr_Dt := (integer)(le.PP_app_fb_ph7_NM_Addr_Dt != rt.PP_app_fb_ph7_NM_Addr_Dt AND (boolean)SELF.overlap);
  SELF.PP_app_Ported_Match := (integer)(le.PP_app_Ported_Match != rt.PP_app_Ported_Match AND (boolean)SELF.overlap);
  SELF.PP_app_Seen_Once_Ind := (integer)(le.PP_app_Seen_Once_Ind != rt.PP_app_Seen_Once_Ind AND (boolean)SELF.overlap);
  SELF.PP_app_ind_ph_Cnt := (integer)(le.PP_app_ind_ph_Cnt != rt.PP_app_ind_ph_Cnt AND (boolean)SELF.overlap);
  SELF.PP_app_ind_Has_actv_EDA_ph_fl := (integer)(le.PP_app_ind_Has_actv_EDA_ph_fl != rt.PP_app_ind_Has_actv_EDA_ph_fl AND (boolean)SELF.overlap);
  SELF.PP_app_Latest_ph_Owner_fl := (integer)(le.PP_app_Latest_ph_Owner_fl != rt.PP_app_Latest_ph_Owner_fl AND (boolean)SELF.overlap);
  SELF.PP_HHID := (integer)(le.PP_HHID != rt.PP_HHID AND (boolean)SELF.overlap);
  SELF.PP_HHID_Score := (integer)(le.PP_HHID_Score != rt.PP_HHID_Score AND (boolean)SELF.overlap);
  SELF.PP_app_Best_Addr_Match_fl := (integer)(le.PP_app_Best_Addr_Match_fl != rt.PP_app_Best_Addr_Match_fl AND (boolean)SELF.overlap);
  SELF.PP_app_Best_NM_Match_fl := (integer)(le.PP_app_Best_NM_Match_fl != rt.PP_app_Best_NM_Match_fl AND (boolean)SELF.overlap);
  SELF.PP_RawAID := (integer)(le.PP_RawAID != rt.PP_RawAID AND (boolean)SELF.overlap);
  SELF.PP_CleanAID := (integer)(le.PP_CleanAID != rt.PP_CleanAID AND (boolean)SELF.overlap);
  SELF.PP_Current_Rec := (integer)(le.PP_Current_Rec != rt.PP_Current_Rec AND (boolean)SELF.overlap);
  SELF.PP_First_Build_Date := (integer)(le.PP_First_Build_Date != rt.PP_First_Build_Date AND (boolean)SELF.overlap);
  SELF.PP_Last_Build_Date := (integer)(le.PP_Last_Build_Date != rt.PP_Last_Build_Date AND (boolean)SELF.overlap);
  SELF.Phone_fb_Date := (integer)(le.Phone_fb_Date != rt.Phone_fb_Date AND (boolean)SELF.overlap);
  SELF.Phone_fb_Result := (integer)(le.Phone_fb_Result != rt.Phone_fb_Result AND (boolean)SELF.overlap);
  SELF.Phone_fb_First := (integer)(le.Phone_fb_First != rt.Phone_fb_First AND (boolean)SELF.overlap);
  SELF.Phone_fb_Middle := (integer)(le.Phone_fb_Middle != rt.Phone_fb_Middle AND (boolean)SELF.overlap);
  SELF.Phone_fb_Last := (integer)(le.Phone_fb_Last != rt.Phone_fb_Last AND (boolean)SELF.overlap);
  SELF.Phone_fb_Last_RPC_Date := (integer)(le.Phone_fb_Last_RPC_Date != rt.Phone_fb_Last_RPC_Date AND (boolean)SELF.overlap);
  SELF.Phone_fb_RP_Date := (integer)(le.Phone_fb_RP_Date != rt.Phone_fb_RP_Date AND (boolean)SELF.overlap);
  SELF.Phone_fb_RP_Result := (integer)(le.Phone_fb_RP_Result != rt.Phone_fb_RP_Result AND (boolean)SELF.overlap);
  SELF.Phone_fb_RP_First := (integer)(le.Phone_fb_RP_First != rt.Phone_fb_RP_First AND (boolean)SELF.overlap);
  SELF.Phone_fb_RP_Middle := (integer)(le.Phone_fb_RP_Middle != rt.Phone_fb_RP_Middle AND (boolean)SELF.overlap);
  SELF.Phone_fb_RP_Last := (integer)(le.Phone_fb_RP_Last != rt.Phone_fb_RP_Last AND (boolean)SELF.overlap);
  SELF.Phone_fb_RP_Last_RPC_Date := (integer)(le.Phone_fb_RP_Last_RPC_Date != rt.Phone_fb_RP_Last_RPC_Date AND (boolean)SELF.overlap);
  SELF.Inq_Num := (integer)(le.Inq_Num != rt.Inq_Num AND (boolean)SELF.overlap);
  SELF.Inq_Num_06 := (integer)(le.Inq_Num_06 != rt.Inq_Num_06 AND (boolean)SELF.overlap);
  SELF.Inq_Num_Addresses := (integer)(le.Inq_Num_Addresses != rt.Inq_Num_Addresses AND (boolean)SELF.overlap);
  SELF.Inq_Num_Addresses_06 := (integer)(le.Inq_Num_Addresses_06 != rt.Inq_Num_Addresses_06 AND (boolean)SELF.overlap);
  SELF.Inq_Num_ADLs := (integer)(le.Inq_Num_ADLs != rt.Inq_Num_ADLs AND (boolean)SELF.overlap);
  SELF.Inq_Num_ADLs_06 := (integer)(le.Inq_Num_ADLs_06 != rt.Inq_Num_ADLs_06 AND (boolean)SELF.overlap);
  SELF.Inq_FirstSeen := (integer)(le.Inq_FirstSeen != rt.Inq_FirstSeen AND (boolean)SELF.overlap);
  SELF.Inq_LastSeen := (integer)(le.Inq_LastSeen != rt.Inq_LastSeen AND (boolean)SELF.overlap);
  SELF.Inq_ADL_FirstSeen := (integer)(le.Inq_ADL_FirstSeen != rt.Inq_ADL_FirstSeen AND (boolean)SELF.overlap);
  SELF.Inq_ADL_LastSeen := (integer)(le.Inq_ADL_LastSeen != rt.Inq_ADL_LastSeen AND (boolean)SELF.overlap);
  SELF.Inq_ADL_ph_Industry_List_12 := (integer)(le.Inq_ADL_ph_Industry_List_12 != rt.Inq_ADL_ph_Industry_List_12 AND (boolean)SELF.overlap);
  SELF.Internal_Verification := (integer)(le.Internal_Verification != rt.Internal_Verification AND (boolean)SELF.overlap);
  SELF.Internal_ver_First_Seen := (integer)(le.Internal_ver_First_Seen != rt.Internal_ver_First_Seen AND (boolean)SELF.overlap);
  SELF.Internal_ver_Last_Seen := (integer)(le.Internal_ver_Last_Seen != rt.Internal_ver_Last_Seen AND (boolean)SELF.overlap);
  SELF.Internal_ver_Match_Types := (integer)(le.Internal_ver_Match_Types != rt.Internal_ver_Match_Types AND (boolean)SELF.overlap);
  SELF.Exp_Verified := (integer)(le.Exp_Verified != rt.Exp_Verified AND (boolean)SELF.overlap);
  SELF.Exp_Type := (integer)(le.Exp_Type != rt.Exp_Type AND (boolean)SELF.overlap);
  SELF.Exp_Source := (integer)(le.Exp_Source != rt.Exp_Source AND (boolean)SELF.overlap);
  SELF.Exp_Last_Update := (integer)(le.Exp_Last_Update != rt.Exp_Last_Update AND (boolean)SELF.overlap);
  SELF.Exp_ph_Score_V1 := (integer)(le.Exp_ph_Score_V1 != rt.Exp_ph_Score_V1 AND (boolean)SELF.overlap);
  SELF.EDA_Omit_Locality := (integer)(le.EDA_Omit_Locality != rt.EDA_Omit_Locality AND (boolean)SELF.overlap);
  SELF.EDA_DID := (integer)(le.EDA_DID != rt.EDA_DID AND (boolean)SELF.overlap);
  SELF.EDA_HHID := (integer)(le.EDA_HHID != rt.EDA_HHID AND (boolean)SELF.overlap);
  SELF.EDA_BDID := (integer)(le.EDA_BDID != rt.EDA_BDID AND (boolean)SELF.overlap);
  SELF.EDA_Listing_Name := (integer)(le.EDA_Listing_Name != rt.EDA_Listing_Name AND (boolean)SELF.overlap);
  SELF.EDA_DID_Count := (integer)(le.EDA_DID_Count != rt.EDA_DID_Count AND (boolean)SELF.overlap);
  SELF.EDA_Dt_First_Seen := (integer)(le.EDA_Dt_First_Seen != rt.EDA_Dt_First_Seen AND (boolean)SELF.overlap);
  SELF.EDA_Dt_Last_Seen := (integer)(le.EDA_Dt_Last_Seen != rt.EDA_Dt_Last_Seen AND (boolean)SELF.overlap);
  SELF.EDA_Current_Record_fl := (integer)(le.EDA_Current_Record_fl != rt.EDA_Current_Record_fl AND (boolean)SELF.overlap);
  SELF.EDA_Deletion_Date := (integer)(le.EDA_Deletion_Date != rt.EDA_Deletion_Date AND (boolean)SELF.overlap);
  SELF.EDA_Disc_Cnt6 := (integer)(le.EDA_Disc_Cnt6 != rt.EDA_Disc_Cnt6 AND (boolean)SELF.overlap);
  SELF.EDA_Disc_Cnt12 := (integer)(le.EDA_Disc_Cnt12 != rt.EDA_Disc_Cnt12 AND (boolean)SELF.overlap);
  SELF.EDA_Disc_Cnt18 := (integer)(le.EDA_Disc_Cnt18 != rt.EDA_Disc_Cnt18 AND (boolean)SELF.overlap);
  SELF.EDA_Pfrd_Address_Ind := (integer)(le.EDA_Pfrd_Address_Ind != rt.EDA_Pfrd_Address_Ind AND (boolean)SELF.overlap);
  SELF.EDA_Days_In_Service := (integer)(le.EDA_Days_In_Service != rt.EDA_Days_In_Service AND (boolean)SELF.overlap);
  SELF.EDA_Num_ph_Owners_Hist := (integer)(le.EDA_Num_ph_Owners_Hist != rt.EDA_Num_ph_Owners_Hist AND (boolean)SELF.overlap);
  SELF.EDA_Num_ph_Owners_Cur := (integer)(le.EDA_Num_ph_Owners_Cur != rt.EDA_Num_ph_Owners_Cur AND (boolean)SELF.overlap);
  SELF.EDA_Num_phs_ind := (integer)(le.EDA_Num_phs_ind != rt.EDA_Num_phs_ind AND (boolean)SELF.overlap);
  SELF.EDA_Num_phs_Connected_ind := (integer)(le.EDA_Num_phs_Connected_ind != rt.EDA_Num_phs_Connected_ind AND (boolean)SELF.overlap);
  SELF.EDA_Num_phs_Discon_ind := (integer)(le.EDA_Num_phs_Discon_ind != rt.EDA_Num_phs_Discon_ind AND (boolean)SELF.overlap);
  SELF.EDA_Avg_Days_Connected_ind := (integer)(le.EDA_Avg_Days_Connected_ind != rt.EDA_Avg_Days_Connected_ind AND (boolean)SELF.overlap);
  SELF.EDA_Min_Days_Connected_ind := (integer)(le.EDA_Min_Days_Connected_ind != rt.EDA_Min_Days_Connected_ind AND (boolean)SELF.overlap);
  SELF.EDA_Max_Days_Connected_ind := (integer)(le.EDA_Max_Days_Connected_ind != rt.EDA_Max_Days_Connected_ind AND (boolean)SELF.overlap);
  SELF.EDA_Days_ind_First_Seen := (integer)(le.EDA_Days_ind_First_Seen != rt.EDA_Days_ind_First_Seen AND (boolean)SELF.overlap);
  SELF.EDA_Days_ind_First_Seen_w_ph := (integer)(le.EDA_Days_ind_First_Seen_w_ph != rt.EDA_Days_ind_First_Seen_w_ph AND (boolean)SELF.overlap);
  SELF.EDA_Days_ph_First_Seen := (integer)(le.EDA_Days_ph_First_Seen != rt.EDA_Days_ph_First_Seen AND (boolean)SELF.overlap);
  SELF.EDA_Address_Match_Best := (integer)(le.EDA_Address_Match_Best != rt.EDA_Address_Match_Best AND (boolean)SELF.overlap);
  SELF.EDA_Months_Addr_Last_Seen := (integer)(le.EDA_Months_Addr_Last_Seen != rt.EDA_Months_Addr_Last_Seen AND (boolean)SELF.overlap);
  SELF.EDA_Num_phs_Connected_Addr := (integer)(le.EDA_Num_phs_Connected_Addr != rt.EDA_Num_phs_Connected_Addr AND (boolean)SELF.overlap);
  SELF.EDA_Num_phs_Discon_Addr := (integer)(le.EDA_Num_phs_Discon_Addr != rt.EDA_Num_phs_Discon_Addr AND (boolean)SELF.overlap);
  SELF.EDA_Num_phs_Connected_HHID := (integer)(le.EDA_Num_phs_Connected_HHID != rt.EDA_Num_phs_Connected_HHID AND (boolean)SELF.overlap);
  SELF.EDA_Num_phs_Discon_HHID := (integer)(le.EDA_Num_phs_Discon_HHID != rt.EDA_Num_phs_Discon_HHID AND (boolean)SELF.overlap);
  SELF.EDA_Is_Discon_15_Days := (integer)(le.EDA_Is_Discon_15_Days != rt.EDA_Is_Discon_15_Days AND (boolean)SELF.overlap);
  SELF.EDA_Is_Discon_30_Days := (integer)(le.EDA_Is_Discon_30_Days != rt.EDA_Is_Discon_30_Days AND (boolean)SELF.overlap);
  SELF.EDA_Is_Discon_60_Days := (integer)(le.EDA_Is_Discon_60_Days != rt.EDA_Is_Discon_60_Days AND (boolean)SELF.overlap);
  SELF.EDA_Is_Discon_90_Days := (integer)(le.EDA_Is_Discon_90_Days != rt.EDA_Is_Discon_90_Days AND (boolean)SELF.overlap);
  SELF.EDA_Is_Discon_180_Days := (integer)(le.EDA_Is_Discon_180_Days != rt.EDA_Is_Discon_180_Days AND (boolean)SELF.overlap);
  SELF.EDA_Is_Discon_360_Days := (integer)(le.EDA_Is_Discon_360_Days != rt.EDA_Is_Discon_360_Days AND (boolean)SELF.overlap);
  SELF.EDA_Is_Current_In_Hist := (integer)(le.EDA_Is_Current_In_Hist != rt.EDA_Is_Current_In_Hist AND (boolean)SELF.overlap);
  SELF.EDA_Num_Interrupts_Cur := (integer)(le.EDA_Num_Interrupts_Cur != rt.EDA_Num_Interrupts_Cur AND (boolean)SELF.overlap);
  SELF.EDA_Avg_Days_Interrupt := (integer)(le.EDA_Avg_Days_Interrupt != rt.EDA_Avg_Days_Interrupt AND (boolean)SELF.overlap);
  SELF.EDA_Min_Days_Interrupt := (integer)(le.EDA_Min_Days_Interrupt != rt.EDA_Min_Days_Interrupt AND (boolean)SELF.overlap);
  SELF.EDA_Max_Days_Interrupt := (integer)(le.EDA_Max_Days_Interrupt != rt.EDA_Max_Days_Interrupt AND (boolean)SELF.overlap);
  SELF.EDA_Has_Cur_Discon_15_Days := (integer)(le.EDA_Has_Cur_Discon_15_Days != rt.EDA_Has_Cur_Discon_15_Days AND (boolean)SELF.overlap);
  SELF.EDA_Has_Cur_Discon_30_Days := (integer)(le.EDA_Has_Cur_Discon_30_Days != rt.EDA_Has_Cur_Discon_30_Days AND (boolean)SELF.overlap);
  SELF.EDA_Has_Cur_Discon_60_Days := (integer)(le.EDA_Has_Cur_Discon_60_Days != rt.EDA_Has_Cur_Discon_60_Days AND (boolean)SELF.overlap);
  SELF.EDA_Has_Cur_Discon_90_Days := (integer)(le.EDA_Has_Cur_Discon_90_Days != rt.EDA_Has_Cur_Discon_90_Days AND (boolean)SELF.overlap);
  SELF.EDA_Has_Cur_Discon_180_Days := (integer)(le.EDA_Has_Cur_Discon_180_Days != rt.EDA_Has_Cur_Discon_180_Days AND (boolean)SELF.overlap);
  SELF.EDA_Has_Cur_Discon_360_Days := (integer)(le.EDA_Has_Cur_Discon_360_Days != rt.EDA_Has_Cur_Discon_360_Days AND (boolean)SELF.overlap);
END;

layout_comparison mk_summary(layout_comparison le, layout_comparison rt) := TRANSFORM
  // SELF.AcctNo := le.AcctNo + rt.AcctNo;
  // SELF.in_FName := le.in_FName + rt.in_FName;
  // SELF.in_LName := le.in_LName + rt.in_LName;
  // SELF.in_StreetAddress := le.in_StreetAddress + rt.in_StreetAddress;
  // SELF.in_City := le.in_City + rt.in_City;
  // SELF.in_State := le.in_State + rt.in_State;
  // SELF.in_ZipCode := le.in_ZipCode + rt.in_ZipCode;
  // SELF.in_DOB := le.in_DOB + rt.in_DOB;
  // SELF.in_SSN := le.in_SSN + rt.in_SSN;
  // SELF.in_ph10 := le.in_ph10 + rt.in_ph10;
  // SELF.in_EXPGW_Enabled := le.in_EXPGW_Enabled + rt.in_EXPGW_Enabled;
  // SELF.in_TargusGW_Enabled := le.in_TargusGW_Enabled + rt.in_TargusGW_Enabled;
  // SELF.in_TUGW_Enabled := le.in_TUGW_Enabled + rt.in_TUGW_Enabled;
  // SELF.in_InsGW_Enabled := le.in_InsGW_Enabled + rt.in_InsGW_Enabled;
  // SELF.in_Processing_Date := le.in_Processing_Date + rt.in_Processing_Date;
  SELF.Subject_SSN_Mismatch := le.Subject_SSN_Mismatch + rt.Subject_SSN_Mismatch;
  SELF.Exp_Num_Duplicate := le.Exp_Num_Duplicate + rt.Exp_Num_Duplicate;
  SELF.Exp_Num_Insufficient_Score := le.Exp_Num_Insufficient_Score + rt.Exp_Num_Insufficient_Score;
  SELF.Gathered_Ph := le.Gathered_Ph + rt.Gathered_Ph;
  SELF.Source_List := le.Source_List + rt.Source_List;
  SELF.Source_List_Last_Seen := le.Source_List_Last_Seen + rt.Source_List_Last_Seen;
  SELF.Source_List_First_Seen := le.Source_List_First_Seen + rt.Source_List_First_Seen;
  SELF.Phone_Subject_Level := le.Phone_Subject_Level + rt.Phone_Subject_Level;
  SELF.Phone_Subject_Title := le.Phone_Subject_Title + rt.Phone_Subject_Title;
  SELF.Phone_Switch_Type := le.Phone_Switch_Type + rt.Phone_Switch_Type;
  SELF.Phone_High_Risk := le.Phone_High_Risk + rt.Phone_High_Risk;
  SELF.Phone_Debt_Settlement := le.Phone_Debt_Settlement + rt.Phone_Debt_Settlement;
  SELF.Phone_Disconnected := le.Phone_Disconnected + rt.Phone_Disconnected;
  SELF.Phone_Zip_Match := le.Phone_Zip_Match + rt.Phone_Zip_Match;
  SELF.Phone_Timezone_Match := le.Phone_Timezone_Match + rt.Phone_Timezone_Match;
  SELF.Phone_Timezone := le.Phone_Timezone + rt.Phone_Timezone;
  SELF.Address_Zipcode_Timezone := le.Address_Zipcode_Timezone + rt.Address_Zipcode_Timezone;
  SELF.Phone_Match_Code := le.Phone_Match_Code + rt.Phone_Match_Code;
  SELF.Phone_Business_Count := le.Phone_Business_Count + rt.Phone_Business_Count;
  SELF.PP_Type := le.PP_Type + rt.PP_Type;
  SELF.PP_Source := le.PP_Source + rt.PP_Source;
  SELF.PP_Carrier := le.PP_Carrier + rt.PP_Carrier;
  SELF.PP_City := le.PP_City + rt.PP_City;
  SELF.PP_State := le.PP_State + rt.PP_State;
  SELF.PP_RP_Type := le.PP_RP_Type + rt.PP_RP_Type;
  SELF.PP_RP_Source := le.PP_RP_Source + rt.PP_RP_Source;
  SELF.PP_RP_Carrier := le.PP_RP_Carrier + rt.PP_RP_Carrier;
  SELF.PP_RP_City := le.PP_RP_City + rt.PP_RP_City;
  SELF.PP_RP_State := le.PP_RP_State + rt.PP_RP_State;
  SELF.PP_Confidence := le.PP_Confidence + rt.PP_Confidence;
  SELF.PP_Rules := le.PP_Rules + rt.PP_Rules;
  SELF.PP_DID := le.PP_DID + rt.PP_DID;
  SELF.PP_DID_Score := le.PP_DID_Score + rt.PP_DID_Score;
  SELF.PP_Listing_Name := le.PP_Listing_Name + rt.PP_Listing_Name;
  SELF.PP_DateFirstSeen := le.PP_DateFirstSeen + rt.PP_DateFirstSeen;
  SELF.PP_DateLastSeen := le.PP_DateLastSeen + rt.PP_DateLastSeen;
  SELF.PP_DateVendorFirstSeen := le.PP_DateVendorFirstSeen + rt.PP_DateVendorFirstSeen;
  SELF.PP_DateVendorLastSeen := le.PP_DateVendorLastSeen + rt.PP_DateVendorLastSeen;
  SELF.PP_Date_NonGLB_LastSeen := le.PP_Date_NonGLB_LastSeen + rt.PP_Date_NonGLB_LastSeen;
  SELF.PP_GLB_DPPA_fl := le.PP_GLB_DPPA_fl + rt.PP_GLB_DPPA_fl;
  SELF.PP_GLB_DPPA_All := le.PP_GLB_DPPA_All + rt.PP_GLB_DPPA_All;
  SELF.PP_Src := le.PP_Src + rt.PP_Src;
  SELF.PP_Src_All := le.PP_Src_All + rt.PP_Src_All;
  SELF.PP_Src_Cnt := le.PP_Src_Cnt + rt.PP_Src_Cnt;
  SELF.PP_Src_Rule := le.PP_Src_Rule + rt.PP_Src_Rule;
  SELF.PP_Avg_Source_Conf := le.PP_Avg_Source_Conf + rt.PP_Avg_Source_Conf;
  SELF.PP_Max_Source_Conf := le.PP_Max_Source_Conf + rt.PP_Max_Source_Conf;
  SELF.PP_Min_Source_Conf := le.PP_Min_Source_Conf + rt.PP_Min_Source_Conf;
  SELF.PP_Total_Source_Conf := le.PP_Total_Source_Conf + rt.PP_Total_Source_Conf;
  SELF.PP_Orig_LastSeen := le.PP_Orig_LastSeen + rt.PP_Orig_LastSeen;
  SELF.PP_DID_Type := le.PP_DID_Type + rt.PP_DID_Type;
  SELF.PP_OrigName := le.PP_OrigName + rt.PP_OrigName;
  SELF.PP_Address1 := le.PP_Address1 + rt.PP_Address1;
  SELF.PP_Address2 := le.PP_Address2 + rt.PP_Address2;
  SELF.PP_Address3 := le.PP_Address3 + rt.PP_Address3;
  SELF.PP_OrigCity := le.PP_OrigCity + rt.PP_OrigCity;
  SELF.PP_OrigState := le.PP_OrigState + rt.PP_OrigState;
  SELF.PP_OrigZip := le.PP_OrigZip + rt.PP_OrigZip;
  SELF.PP_OrigPhone := le.PP_OrigPhone + rt.PP_OrigPhone;
  SELF.PP_Dob := le.PP_Dob + rt.PP_Dob;
  SELF.PP_AgeGroup := le.PP_AgeGroup + rt.PP_AgeGroup;
  SELF.PP_Gender := le.PP_Gender + rt.PP_Gender;
  SELF.PP_Email := le.PP_Email + rt.PP_Email;
  SELF.PP_OrigListingType := le.PP_OrigListingType + rt.PP_OrigListingType;
  SELF.PP_ListingType := le.PP_ListingType + rt.PP_ListingType;
  SELF.PP_OrigPublishCode := le.PP_OrigPublishCode + rt.PP_OrigPublishCode;
  SELF.PP_OrigPhoneType := le.PP_OrigPhoneType + rt.PP_OrigPhoneType;
  SELF.PP_OrigPhoneUsage := le.PP_OrigPhoneUsage + rt.PP_OrigPhoneUsage;
  SELF.PP_Company := le.PP_Company + rt.PP_Company;
  SELF.PP_OrigPhoneRegDate := le.PP_OrigPhoneRegDate + rt.PP_OrigPhoneRegDate;
  SELF.PP_OrigCarrierCode := le.PP_OrigCarrierCode + rt.PP_OrigCarrierCode;
  SELF.PP_OrigCarrierName := le.PP_OrigCarrierName + rt.PP_OrigCarrierName;
  SELF.PP_OrigConfScore := le.PP_OrigConfScore + rt.PP_OrigConfScore;
  SELF.PP_OrigRecType := le.PP_OrigRecType + rt.PP_OrigRecType;
  SELF.PP_BDID := le.PP_BDID + rt.PP_BDID;
  SELF.PP_BDID_Score := le.PP_BDID_Score + rt.PP_BDID_Score;
  SELF.PP_app_NPA_Effective_DT := le.PP_app_NPA_Effective_DT + rt.PP_app_NPA_Effective_DT;
  SELF.PP_app_NPA_Last_Change_DT := le.PP_app_NPA_Last_Change_DT + rt.PP_app_NPA_Last_Change_DT;
  SELF.PP_app_Dialable_Ind := le.PP_app_Dialable_Ind + rt.PP_app_Dialable_Ind;
  SELF.PP_app_Place_Name := le.PP_app_Place_Name + rt.PP_app_Place_Name;
  SELF.PP_app_Portability_Indicator := le.PP_app_Portability_Indicator + rt.PP_app_Portability_Indicator;
  SELF.PP_app_Prior_Area_Code := le.PP_app_Prior_Area_Code + rt.PP_app_Prior_Area_Code;
  SELF.PP_app_NonPublished_Match := le.PP_app_NonPublished_Match + rt.PP_app_NonPublished_Match;
  SELF.PP_app_OCN := le.PP_app_OCN + rt.PP_app_OCN;
  SELF.PP_app_Time_Zone := le.PP_app_Time_Zone + rt.PP_app_Time_Zone;
  SELF.PP_app_NXX_Type := le.PP_app_NXX_Type + rt.PP_app_NXX_Type;
  SELF.PP_app_COCType := le.PP_app_COCType + rt.PP_app_COCType;
  SELF.PP_app_SCC := le.PP_app_SCC + rt.PP_app_SCC;
  SELF.PP_app_ph_Type := le.PP_app_ph_Type + rt.PP_app_ph_Type;
  SELF.PP_app_Company_Type := le.PP_app_Company_Type + rt.PP_app_Company_Type;
  SELF.PP_app_ph_Use := le.PP_app_ph_Use + rt.PP_app_ph_Use;
  SELF.PP_Agreg_Listing_Type := le.PP_Agreg_Listing_Type + rt.PP_Agreg_Listing_Type;
  SELF.PP_Max_Orig_Conf_Score := le.PP_Max_Orig_Conf_Score + rt.PP_Max_Orig_Conf_Score;
  SELF.PP_Min_Orig_Conf_Score := le.PP_Min_Orig_Conf_Score + rt.PP_Min_Orig_Conf_Score;
  SELF.PP_Curr_Orig_Conf_Score := le.PP_Curr_Orig_Conf_Score + rt.PP_Curr_Orig_Conf_Score;
  SELF.PP_EDA_Match := le.PP_EDA_Match + rt.PP_EDA_Match;
  SELF.PP_EDA_ph_Dt := le.PP_EDA_ph_Dt + rt.PP_EDA_ph_Dt;
  SELF.PP_EDA_DID_Dt := le.PP_EDA_DID_Dt + rt.PP_EDA_DID_Dt;
  SELF.PP_EDA_NM_Addr_Dt := le.PP_EDA_NM_Addr_Dt + rt.PP_EDA_NM_Addr_Dt;
  SELF.PP_EDA_Hist_Match := le.PP_EDA_Hist_Match + rt.PP_EDA_Hist_Match;
  SELF.PP_EDA_Hist_ph_Dt := le.PP_EDA_Hist_ph_Dt + rt.PP_EDA_Hist_ph_Dt;
  SELF.PP_EDA_Hist_DID_Dt := le.PP_EDA_Hist_DID_Dt + rt.PP_EDA_Hist_DID_Dt;
  SELF.PP_EDA_Hist_Nm_Addr_Dt := le.PP_EDA_Hist_Nm_Addr_Dt + rt.PP_EDA_Hist_Nm_Addr_Dt;
  SELF.PP_app_fb_ph := le.PP_app_fb_ph + rt.PP_app_fb_ph;
  SELF.PP_app_fb_ph_Dt := le.PP_app_fb_ph_Dt + rt.PP_app_fb_ph_Dt;
  SELF.PP_app_fb_ph7_DID := le.PP_app_fb_ph7_DID + rt.PP_app_fb_ph7_DID;
  SELF.PP_app_fb_ph7_DID_Dt := le.PP_app_fb_ph7_DID_Dt + rt.PP_app_fb_ph7_DID_Dt;
  SELF.PP_app_fb_ph7_NM_Addr := le.PP_app_fb_ph7_NM_Addr + rt.PP_app_fb_ph7_NM_Addr;
  SELF.PP_app_fb_ph7_NM_Addr_Dt := le.PP_app_fb_ph7_NM_Addr_Dt + rt.PP_app_fb_ph7_NM_Addr_Dt;
  SELF.PP_app_Ported_Match := le.PP_app_Ported_Match + rt.PP_app_Ported_Match;
  SELF.PP_app_Seen_Once_Ind := le.PP_app_Seen_Once_Ind + rt.PP_app_Seen_Once_Ind;
  SELF.PP_app_ind_ph_Cnt := le.PP_app_ind_ph_Cnt + rt.PP_app_ind_ph_Cnt;
  SELF.PP_app_ind_Has_actv_EDA_ph_fl := le.PP_app_ind_Has_actv_EDA_ph_fl + rt.PP_app_ind_Has_actv_EDA_ph_fl;
  SELF.PP_app_Latest_ph_Owner_fl := le.PP_app_Latest_ph_Owner_fl + rt.PP_app_Latest_ph_Owner_fl;
  SELF.PP_HHID := le.PP_HHID + rt.PP_HHID;
  SELF.PP_HHID_Score := le.PP_HHID_Score + rt.PP_HHID_Score;
  SELF.PP_app_Best_Addr_Match_fl := le.PP_app_Best_Addr_Match_fl + rt.PP_app_Best_Addr_Match_fl;
  SELF.PP_app_Best_NM_Match_fl := le.PP_app_Best_NM_Match_fl + rt.PP_app_Best_NM_Match_fl;
  SELF.PP_RawAID := le.PP_RawAID + rt.PP_RawAID;
  SELF.PP_CleanAID := le.PP_CleanAID + rt.PP_CleanAID;
  SELF.PP_Current_Rec := le.PP_Current_Rec + rt.PP_Current_Rec;
  SELF.PP_First_Build_Date := le.PP_First_Build_Date + rt.PP_First_Build_Date;
  SELF.PP_Last_Build_Date := le.PP_Last_Build_Date + rt.PP_Last_Build_Date;
  SELF.Phone_fb_Date := le.Phone_fb_Date + rt.Phone_fb_Date;
  SELF.Phone_fb_Result := le.Phone_fb_Result + rt.Phone_fb_Result;
  SELF.Phone_fb_First := le.Phone_fb_First + rt.Phone_fb_First;
  SELF.Phone_fb_Middle := le.Phone_fb_Middle + rt.Phone_fb_Middle;
  SELF.Phone_fb_Last := le.Phone_fb_Last + rt.Phone_fb_Last;
  SELF.Phone_fb_Last_RPC_Date := le.Phone_fb_Last_RPC_Date + rt.Phone_fb_Last_RPC_Date;
  SELF.Phone_fb_RP_Date := le.Phone_fb_RP_Date + rt.Phone_fb_RP_Date;
  SELF.Phone_fb_RP_Result := le.Phone_fb_RP_Result + rt.Phone_fb_RP_Result;
  SELF.Phone_fb_RP_First := le.Phone_fb_RP_First + rt.Phone_fb_RP_First;
  SELF.Phone_fb_RP_Middle := le.Phone_fb_RP_Middle + rt.Phone_fb_RP_Middle;
  SELF.Phone_fb_RP_Last := le.Phone_fb_RP_Last + rt.Phone_fb_RP_Last;
  SELF.Phone_fb_RP_Last_RPC_Date := le.Phone_fb_RP_Last_RPC_Date + rt.Phone_fb_RP_Last_RPC_Date;
  SELF.Inq_Num := le.Inq_Num + rt.Inq_Num;
  SELF.Inq_Num_06 := le.Inq_Num_06 + rt.Inq_Num_06;
  SELF.Inq_Num_Addresses := le.Inq_Num_Addresses + rt.Inq_Num_Addresses;
  SELF.Inq_Num_Addresses_06 := le.Inq_Num_Addresses_06 + rt.Inq_Num_Addresses_06;
  SELF.Inq_Num_ADLs := le.Inq_Num_ADLs + rt.Inq_Num_ADLs;
  SELF.Inq_Num_ADLs_06 := le.Inq_Num_ADLs_06 + rt.Inq_Num_ADLs_06;
  SELF.Inq_FirstSeen := le.Inq_FirstSeen + rt.Inq_FirstSeen;
  SELF.Inq_LastSeen := le.Inq_LastSeen + rt.Inq_LastSeen;
  SELF.Inq_ADL_FirstSeen := le.Inq_ADL_FirstSeen + rt.Inq_ADL_FirstSeen;
  SELF.Inq_ADL_LastSeen := le.Inq_ADL_LastSeen + rt.Inq_ADL_LastSeen;
  SELF.Inq_ADL_ph_Industry_List_12 := le.Inq_ADL_ph_Industry_List_12 + rt.Inq_ADL_ph_Industry_List_12;
  SELF.Internal_Verification := le.Internal_Verification + rt.Internal_Verification;
  SELF.Internal_ver_First_Seen := le.Internal_ver_First_Seen + rt.Internal_ver_First_Seen;
  SELF.Internal_ver_Last_Seen := le.Internal_ver_Last_Seen + rt.Internal_ver_Last_Seen;
  SELF.Internal_ver_Match_Types := le.Internal_ver_Match_Types + rt.Internal_ver_Match_Types;
  SELF.Exp_Verified := le.Exp_Verified + rt.Exp_Verified;
  SELF.Exp_Type := le.Exp_Type + rt.Exp_Type;
  SELF.Exp_Source := le.Exp_Source + rt.Exp_Source;
  SELF.Exp_Last_Update := le.Exp_Last_Update + rt.Exp_Last_Update;
  SELF.Exp_ph_Score_V1 := le.Exp_ph_Score_V1 + rt.Exp_ph_Score_V1;
  SELF.EDA_Omit_Locality := le.EDA_Omit_Locality + rt.EDA_Omit_Locality;
  SELF.EDA_DID := le.EDA_DID + rt.EDA_DID;
  SELF.EDA_HHID := le.EDA_HHID + rt.EDA_HHID;
  SELF.EDA_BDID := le.EDA_BDID + rt.EDA_BDID;
  SELF.EDA_Listing_Name := le.EDA_Listing_Name + rt.EDA_Listing_Name;
  SELF.EDA_DID_Count := le.EDA_DID_Count + rt.EDA_DID_Count;
  SELF.EDA_Dt_First_Seen := le.EDA_Dt_First_Seen + rt.EDA_Dt_First_Seen;
  SELF.EDA_Dt_Last_Seen := le.EDA_Dt_Last_Seen + rt.EDA_Dt_Last_Seen;
  SELF.EDA_Current_Record_fl := le.EDA_Current_Record_fl + rt.EDA_Current_Record_fl;
  SELF.EDA_Deletion_Date := le.EDA_Deletion_Date + rt.EDA_Deletion_Date;
  SELF.EDA_Disc_Cnt6 := le.EDA_Disc_Cnt6 + rt.EDA_Disc_Cnt6;
  SELF.EDA_Disc_Cnt12 := le.EDA_Disc_Cnt12 + rt.EDA_Disc_Cnt12;
  SELF.EDA_Disc_Cnt18 := le.EDA_Disc_Cnt18 + rt.EDA_Disc_Cnt18;
  SELF.EDA_Pfrd_Address_Ind := le.EDA_Pfrd_Address_Ind + rt.EDA_Pfrd_Address_Ind;
  SELF.EDA_Days_In_Service := le.EDA_Days_In_Service + rt.EDA_Days_In_Service;
  SELF.EDA_Num_ph_Owners_Hist := le.EDA_Num_ph_Owners_Hist + rt.EDA_Num_ph_Owners_Hist;
  SELF.EDA_Num_ph_Owners_Cur := le.EDA_Num_ph_Owners_Cur + rt.EDA_Num_ph_Owners_Cur;
  SELF.EDA_Num_phs_ind := le.EDA_Num_phs_ind + rt.EDA_Num_phs_ind;
  SELF.EDA_Num_phs_Connected_ind := le.EDA_Num_phs_Connected_ind + rt.EDA_Num_phs_Connected_ind;
  SELF.EDA_Num_phs_Discon_ind := le.EDA_Num_phs_Discon_ind + rt.EDA_Num_phs_Discon_ind;
  SELF.EDA_Avg_Days_Connected_ind := le.EDA_Avg_Days_Connected_ind + rt.EDA_Avg_Days_Connected_ind;
  SELF.EDA_Min_Days_Connected_ind := le.EDA_Min_Days_Connected_ind + rt.EDA_Min_Days_Connected_ind;
  SELF.EDA_Max_Days_Connected_ind := le.EDA_Max_Days_Connected_ind + rt.EDA_Max_Days_Connected_ind;
  SELF.EDA_Days_ind_First_Seen := le.EDA_Days_ind_First_Seen + rt.EDA_Days_ind_First_Seen;
  SELF.EDA_Days_ind_First_Seen_w_ph := le.EDA_Days_ind_First_Seen_w_ph + rt.EDA_Days_ind_First_Seen_w_ph;
  SELF.EDA_Days_ph_First_Seen := le.EDA_Days_ph_First_Seen + rt.EDA_Days_ph_First_Seen;
  SELF.EDA_Address_Match_Best := le.EDA_Address_Match_Best + rt.EDA_Address_Match_Best;
  SELF.EDA_Months_Addr_Last_Seen := le.EDA_Months_Addr_Last_Seen + rt.EDA_Months_Addr_Last_Seen;
  SELF.EDA_Num_phs_Connected_Addr := le.EDA_Num_phs_Connected_Addr + rt.EDA_Num_phs_Connected_Addr;
  SELF.EDA_Num_phs_Discon_Addr := le.EDA_Num_phs_Discon_Addr + rt.EDA_Num_phs_Discon_Addr;
  SELF.EDA_Num_phs_Connected_HHID := le.EDA_Num_phs_Connected_HHID + rt.EDA_Num_phs_Connected_HHID;
  SELF.EDA_Num_phs_Discon_HHID := le.EDA_Num_phs_Discon_HHID + rt.EDA_Num_phs_Discon_HHID;
  SELF.EDA_Is_Discon_15_Days := le.EDA_Is_Discon_15_Days + rt.EDA_Is_Discon_15_Days;
  SELF.EDA_Is_Discon_30_Days := le.EDA_Is_Discon_30_Days + rt.EDA_Is_Discon_30_Days;
  SELF.EDA_Is_Discon_60_Days := le.EDA_Is_Discon_60_Days + rt.EDA_Is_Discon_60_Days;
  SELF.EDA_Is_Discon_90_Days := le.EDA_Is_Discon_90_Days + rt.EDA_Is_Discon_90_Days;
  SELF.EDA_Is_Discon_180_Days := le.EDA_Is_Discon_180_Days + rt.EDA_Is_Discon_180_Days;
  SELF.EDA_Is_Discon_360_Days := le.EDA_Is_Discon_360_Days + rt.EDA_Is_Discon_360_Days;
  SELF.EDA_Is_Current_In_Hist := le.EDA_Is_Current_In_Hist + rt.EDA_Is_Current_In_Hist;
  SELF.EDA_Num_Interrupts_Cur := le.EDA_Num_Interrupts_Cur + rt.EDA_Num_Interrupts_Cur;
  SELF.EDA_Avg_Days_Interrupt := le.EDA_Avg_Days_Interrupt + rt.EDA_Avg_Days_Interrupt;
  SELF.EDA_Min_Days_Interrupt := le.EDA_Min_Days_Interrupt + rt.EDA_Min_Days_Interrupt;
  SELF.EDA_Max_Days_Interrupt := le.EDA_Max_Days_Interrupt + rt.EDA_Max_Days_Interrupt;
  SELF.EDA_Has_Cur_Discon_15_Days := le.EDA_Has_Cur_Discon_15_Days + rt.EDA_Has_Cur_Discon_15_Days;
  SELF.EDA_Has_Cur_Discon_30_Days := le.EDA_Has_Cur_Discon_30_Days + rt.EDA_Has_Cur_Discon_30_Days;
  SELF.EDA_Has_Cur_Discon_60_Days := le.EDA_Has_Cur_Discon_60_Days + rt.EDA_Has_Cur_Discon_60_Days;
  SELF.EDA_Has_Cur_Discon_90_Days := le.EDA_Has_Cur_Discon_90_Days + rt.EDA_Has_Cur_Discon_90_Days;
  SELF.EDA_Has_Cur_Discon_180_Days := le.EDA_Has_Cur_Discon_180_Days + rt.EDA_Has_Cur_Discon_180_Days;
  SELF.EDA_Has_Cur_Discon_360_Days := le.EDA_Has_Cur_Discon_360_Days + rt.EDA_Has_Cur_Discon_360_Days;
	
	self.dropped := le.dropped + rt.dropped;
	self.added := le.added + rt.added;
	self.overlap := le.overlap + rt.overlap;
	self.total := le.total + rt.total;
END;

comparison := join(ds_original, ds_compare, LEFT.acctNo = RIGHT.acctNo AND LEFT.gathered_ph = RIGHT.gathered_ph, mk_comparison(LEFT,RIGHT), FULL OUTER);
summary := rollup(comparison, TRUE, mk_summary(LEFT,RIGHT));
output(summary);
ENDMACRO;