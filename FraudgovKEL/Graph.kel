/*2018-05-25T15:50:30Z (jprihighriskcity
chard)
C:\Users\prichajx\AppData\Roaming\HPCC Systems\eclide\jprichard\Dataland\FraudgovKEL\Graph\2018-05-25T15_50_30Z.ecl
*/
#OPTION(persistlevel, 4)
#OPTION(persistexpire, 7)
/* 
#OPTION(codegen, 'nosmartjoins')
#OPTION(codegen, 'nolookupjoins')
#OPTION(codegen, 'nolookupjoins')
*/

// Defining the ERA to allow for ASOF functionality
ERA reportedby BEFORE(DateFirstSeen=NULL(MIN));
ERA reportedbetween BETWEEN(DateFirstSeen=NULL(MIN), DateLastSeen=NULL(MAX));

FUNCTION: CleanSpaces(STRING s) <= ECL(STD.Str.CleanSpaces(s)) FROM Std RETURNS STRING;

//GLOBAL: => HighFrequencyAddressThreshold := 20;

Customer := ENTITY(FLAT(UID=TargetCustomerHash,
    INTEGER CustomerId,
    INTEGER IndustryType, 
		STRING State,
		INTEGER StateCount), // This is filled from ECL but will be switch to fill in ECL from MBS later!!! (then take this comment out).
  MODEL(UID, CustomerId, IndustryType, States{State, StateCount}));

// The UID should be off the associated customer
// this ensure the customer can see all the people that are shared with them.

Person := ENTITY(FLAT(UID(AssociatedCustomerFileInfo, LexId),
    Customer rCustomer=AssociatedCustomerFileInfo,
    Customer rSourceCustomer=SourceCustomerFileInfo,
    DATE EventDate,
    INTEGER LexId, 
		DATE DateOfBirth,
		STRING Ssn,
		STRING EmailAddress,
		STRING Title=NULL(),
		STRING FirstName=NULL(),
		STRING MiddleName=NULL(),
		STRING LastName=NULL(),
		STRING NameSuffix=NULL(),
    INTEGER rin_source,

  
    // Deceased
    
    DATE DeceasedDate,
    DATE DeceasedDateOfBirth,
    STRING DeceasedFirst,
    STRING DeceasedMiddle,
    STRING DeceasedLast,   

    STRING DeceasedMatchCode,
    BOOLEAN isdeepdive,

    STRING county_death,
    STRING DeceasedSsn,
    STRING state_death_flag,
    STRING death_rec_src,
    STRING state_death_id,
    
    STRING curr_incar_flag,
    STRING off_cat_list,
    INTEGER name_ssn_dob_match,
		
		STRING PrimaryRange=NULL(),
		STRING Predirectional=NULL(),
		STRING PrimaryName=NULL(),
		STRING Suffix=NULL(),
		STRING Postdirectional=NULL(),
		STRING UnitDesignation=NULL(),
		STRING SecondaryRange=NULL(),
		STRING PostalCity=NULL(),
		STRING VanityCity=NULL(),
		STRING State=NULL(),
		STRING Zip=NULL(),
		STRING Zip4=NULL()
    ),
	MODEL(UID,
    rCustomer,
    LexId,
    SourceCustomers{rSourceCustomer},
		ReportedDateOfBirth{DateOfBirth},
		ReportedSsn{EventDate, Ssn},
		ReportedEmailAddress{EventDate, EmailAddress},
		FullName{EventDate, Title,FirstName,MiddleName,LastName,NameSuffix},
    
		rin_source,
    DeceasedDate,
    DeceasedDateOfBirth,
    DeceasedFirst,
    DeceasedMiddle,
    DeceasedLast,   

    DeceasedMatchCode,
    isdeepdive,

    county_death,
    DeceasedSsn,
    state_death_flag,
    death_rec_src,
    state_death_id,

    curr_incar_flag,
    name_ssn_dob_match,
    Offenses {off_cat_list},
    Address {EventDate, PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, UnitDesignation, SecondaryRange, PostalCity, VanityCity, State, Zip, Zip4}				
    ));	
		

Event := ENTITY(FLAT(UID(AssociatedCustomerFileInfo,record_id), 
    Customer rCustomer=AssociatedCustomerFileInfo,
    Customer rSourceCustomer=SourceCustomerFileInfo,
    Person Subject=UID(AssociatedCustomerFileInfo, LexId),
		Address Location=UID(AssociatedCustomerFileInfo, OttoAddressId),    
    SocialSecurityNumber rSsn=UID(AssociatedCustomerFileInfo, OttoSSNId),
    Phone rPhone=UID(AssociatedCustomerFileInfo, PhoneNumber),
    Email rEmail=UID(AssociatedCustomerFileInfo,OttoEmailId),
    InternetProtocol rInternetProtocol=UID(AssociatedCustomerFileInfo, OttoIpAddressId),
    BankAccount rBankAccount=UID(AssociatedCustomerFileInfo, OttoBankAccountId),
    DriversLicense rDriversLicense=UID(AssociatedCustomerFileInfo, OttoDriversLicenseId),
		
		ind_type_description,
    INTEGER rin_source,
		STRING rin_sourcelabel,
		
    INTEGER LexId, 
    STRING PhoneNumber,
    STRING OttoAddressId,
    STRING OttoEmailId,
    STRING OttoIpAddressId,
    STRING OttoDriversLicenseId,
		STRING OttoSSNId,
		STRING OttoBankAccountId,
    STRING CaseId,
    STRING ClientId, 
    INTEGER RecordId=record_id,
    DATE EventDate,
    STRING reported_time,
    
    STRING EventType, 
		
		STRING Title=NULL(),
		STRING FirstName=NULL(),
		STRING MiddleName=NULL(),
		STRING LastName=NULL(),
		STRING NameSuffix=NULL(),

    STRING unique_number,
    STRING mac_address,
    STRING serial_number,
		STRING Device_ID,
    STRING device_type,
    STRING device_identification_provider,
	
	  STRING Contact_Type,
		STRING PhoneFormatted,
		STRING CellPhoneFormatted,
		STRING WorkPhoneFormatted,
    STRING ethnicity,
		STRING race,
		STRING head_of_household_indicator,
		STRING relationship_indicator,
		REAL geo_lat,
		REAL geo_long,
		STRING investigator_id,
		STRING investigation_referral_case_id,
		STRING type_of_referral,
		STRING referral_reason,
    STRING disposition, 
		STRING cleared_fraud,
		STRING reason_description,
		STRING reported_by,
		STRING reason_cleared_code,

    BOOLEAN addresspobox,
    BOOLEAN addresscmra,
		STRING PrimaryRange=NULL(),
		STRING Predirectional=NULL(),
		STRING PrimaryName=NULL(),
		STRING Suffix=NULL(),
		STRING Postdirectional=NULL(),
		STRING UnitDesignation=NULL(),
		STRING SecondaryRange=NULL(),
		STRING PostalCity=NULL(),
		STRING VanityCity=NULL(),
		STRING State=NULL(),
		STRING Zip=NULL(),
		STRING Zip4=NULL(),
		STRING CarrierRouteNumber=NULL(),
		STRING CarrierRouteSortationAtZIP=NULL(),
		INTEGER LineOfTravel=NULL(),
		STRING LineOfTravelOrder=NULL(),
		INTEGER DeliveryPointBarcode=NULL(),
		INTEGER DeliveryPointBarcodeCheckDigit=NULL(),
		STRING TypeCode=NULL(),
		INTEGER County=NULL(),
		REAL Latitude=NULL(),
		REAL Longitude=NULL(),
		INTEGER MetropolitanStatisticalArea=NULL(),
		INTEGER GeoBlock=NULL(),
		STRING GeoMatch=NULL(),
		STRING ACECleanerErrorCode=NULL(),
		BOOLEAN isAdditional,
    STRING fips_state,
    STRING fips_county,    
    

	  STRING MailingPrimaryRange=NULL(),
		STRING MailingPredirectional=NULL(),
		STRING MailingPrimaryName=NULL(),
		STRING MailingSuffix=NULL(),
		STRING MailingPostdirectional=NULL(),
		STRING MailingUnitDesignation=NULL(),
		STRING MailingSecondaryRange=NULL(),
		STRING MailingPostalCity=NULL(),
		STRING MailingVanityCity=NULL(),
		STRING MailingState=NULL(),
		STRING MailingZip=NULL(),
		STRING MailingZip4=NULL(),
		STRING MailingTypeCode=NULL(),
		INTEGER MailingCounty=NULL(),
		REAL MailingLatitude=NULL(),
		REAL MailingLongitude=NULL(),
		STRING MailingGeoMatch=NULL(),
		STRING MailingACECleanerErrorCode=NULL(),

    STRING LicenseNumber,
    STRING LicenseState, 

		STRING EmailAddress,
		STRING Type,
		DATE CreatedOn,
		STRING Host,
		STRING EmailLastDomain,
		INTEGER isdisposableemail,	
		
    STRING Ssn,
    STRING SsnFormatted,

    STRING RoutingNumber,
    STRING FullBankname,
    STRING AbbreviatedBankname,
    STRING FractionalRoutingnumber,
    STRING HeadofficeRoutingnumber,
    STRING HeadofficeBranchcodes,
    STRING AccountNumber,
    STRING BankHit,

    STRING RoutingNumber2,
    STRING FullBankname2,
    STRING AbbreviatedBankname2,
    STRING FractionalRoutingnumber2,
    STRING HeadofficeRoutingnumber2,
    STRING HeadofficeBranchcodes2,
    STRING AccountNumber2,
    STRING BankHit2,
		
    INTEGER Confidence_that_activity_was_deceitful_id,
    INTEGER name_risk_code,
    INTEGER dob_risk_code,
    INTEGER ssn_risk_code,
    INTEGER drivers_license_risk_code,
    INTEGER physical_address_risk_code,
    INTEGER phone_risk_code,
    INTEGER cell_phone_risk_code,
    INTEGER work_phone_risk_code,
    INTEGER bank_account_1_risk_code,
    INTEGER bank_account_2_risk_code,
    INTEGER email_address_risk_code,
    INTEGER ip_address_fraud_code,
    INTEGER business_risk_code,
    INTEGER mailing_address_risk_code,
    INTEGER device_risk_code,
    INTEGER identity_risk_code,

    INTEGER event_type_1,
		INTEGER event_type_2,
		INTEGER event_type_3,
		
    DATE DateOfBirth,

    // BocaShell Columns

	  BOOLEAN BocashellHit,
		INTEGER BocashellLexId,
    INTEGER nap_summary,
    INTEGER nas_summary,
    INTEGER cvi,
    STRING addrvalflag,
    INTEGER fp3_stolenidentityindex,
    INTEGER syntheticidentityindex_v3,
    INTEGER manipulatedidentityindex_v3,
    STRING socsdobflag,
    INTEGER pwsocsdobflag,
    INTEGER dobmatchlevel,
    INTEGER sourcerisklevel,
    STRING reason1,
    STRING reason2,
    STRING reason3,
    STRING reason4,
    STRING reason5,
    STRING reason6,
    INTEGER socsvalflag,
    INTEGER drlcvalflag,
    STRING hphonevalflag,

    BOOLEAN truedid	= truedid,
    STRING best_fname	= best_flags.fname,
    STRING best_lname	= best_flags.lname,
    STRING best_ssn	= best_flags.ssn,		
		
    STRING input_fname_isbestmatch,
    STRING input_lname_isbestmatch,
    STRING input_ssn_isbestmatch,
    BOOLEAN add_curr_pop,
		

    drop_indicator,
    address_vacancy_indicator,

    STRING add_curr_prim_range,
    STRING add_curr_predir,
    STRING add_curr_prim_name,
    STRING add_curr_addr_suffix,
    STRING add_curr_postdir,
    STRING add_curr_unit_desig,
    STRING add_curr_sec_range,
    STRING add_curr_city_name,
    STRING add_curr_st,
    STRING add_curr_zip5,
    STRING add_curr_county,
    STRING add_curr_geo_blk,
    STRING add_curr_lat,
    STRING add_curr_long,
    BOOLEAN add_input_isbestmatch,

    DATE bocashell_addr1_dt_first_seen,
		DATE bocashell_addr1_date_last_seen,

		
		STRING historydatetimestamp,
		DATE reported_dob,
		
    BOOLEAN diddeceased,
    DATE diddeceaseddate,
    STRING fraudpoint_v3,
		
		// Best 
		
    BOOLEAN BestHit,
		STRING best_phone,
		STRING best_drivers_license_state,
		STRING best_drivers_license,
		STRING best_drivers_license_exp,
		
		// Phones Meta
    BOOLEAN PhonesMetaHit,
		DATE phone_reported_date,
		DATE phone_vendor_first_reported_dt,
		DATE phone_vendor_last_reported_dt,
		STRING phone_prepaid,
		
    // Deceased    
    DATE DeceasedDate,
    DATE DeceasedDateOfBirth,
    STRING DeceasedFirst,
    STRING DeceasedMiddle,
    STRING DeceasedLast,   

    STRING DeceasedMatchCode,
    BOOLEAN isdeepdive,

    STRING county_death,
    STRING DeceasedSsn,
    STRING state_death_flag,
    STRING death_rec_src,
    STRING state_death_id,
    
		// Crim
    BOOLEAN CrimHit,
    STRING curr_incar_flag,
    STRING off_cat_list,
    INTEGER name_ssn_dob_match,

    STRING IpAddress=ip_address,
    STRING iprngbeg,
    STRING iprngend,
    STRING edgecountry,
    STRING edgeregion,
    STRING edgecity,
    STRING edgeconnspeed,
    STRING edgemetrocode,
    STRING edgelatitude,
    STRING edgelongitude,
    STRING edgepostalcode,
    STRING edgecountrycode,
    STRING edgeregioncode,
    STRING edgecitycode,
    STRING edgecontinentcode,
    STRING edgetwolettercountry,
    STRING edgeinternalcode,
    STRING edgeareacodes,
    STRING edgecountryconf,
    STRING edgeregionconf,
    STRING edgecitycong,
    STRING edgepostalconf,
    STRING edgegmtoffset,
    STRING edgeindst,
    STRING siccode,
    STRING domainname,
    STRING ispname,
    STRING homebiztype,
    STRING asn,
    STRING asnname,
    STRING primarylang,
    STRING secondarylang,
    STRING proxytype,
    STRING proxydescription,
    STRING isanisp,
    STRING companyname,
    STRING ranks,
    STRING households,
    STRING women,
    STRING women18to34,
    STRING women35to49,
    STRING men,
    STRING men18to34,
    STRING men35to49,
    STRING teens,
    STRING kids,
    STRING naicscode,
    STRING cbsacode,
    STRING cbsatitle,
    STRING cbsatype,
    STRING csacode,
    STRING csatitle,
    STRING mdcode,
    STRING mdtitle,
    STRING organizationname,
    STRING advo_hitflag,
    STRING advo_vacancyindicator,
    STRING advo_addressstyle,
    STRING advo_dropindicator,
    STRING advo_residentialorbusinessindicator,
    STRING advo_addresstype,
    STRING advo_addressusagetype

    ),
    MODEL(
      UID,
      rCustomer,
      rSourceCustomer,
      Subject,
      Location,
      RecordId,
      EventDate,
      reported_time,
      EventTypes{EventType},

    rPhone,rEmail,rInternetProtocol,rBankAccount,rDriversLicense,rSsn,
    Title,FirstName,MiddleName,LastName,NameSuffix,		
		rin_source,
	  rin_sourcelabel,		
		ind_type_description,
		
    LexId,
	  BocashellHit,
	  BocashellLexId,
    OttoAddressId,
    DateOfBirth,
    DeceasedDate,
    DeceasedDateOfBirth,
    DeceasedFirst,
    DeceasedMiddle,
    DeceasedLast,   
		PhoneNumber,

    OttoEmailId,
    OttoIpAddressId,
		OttoSSNId,
    CaseId,
		ClientId,
    OttoDriversLicenseId,
		OttoBankAccountId,

		Contact_Type,
		PhoneFormatted,
		CellPhoneFormatted,
		WorkPhoneFormatted,
		ethnicity,
		race,
		head_of_household_indicator,
		relationship_indicator,
		geo_lat,
		geo_long,
		investigator_id,
		investigation_referral_case_id,
		type_of_referral,
		referral_reason,
		disposition, 
		cleared_fraud,
		reason_description,
		reported_by,
		reason_cleared_code,
		
		Device_ID,unique_number, mac_address, serial_number, device_type, device_identification_provider,
		
    DeceasedMatchCode,
    isdeepdive,
    
		// bocashell
    nap_summary,nas_summary,cvi,addrvalflag,fp3_stolenidentityindex,syntheticidentityindex_v3,manipulatedidentityindex_v3,socsdobflag,pwsocsdobflag,dobmatchlevel,
		sourcerisklevel,reason1,reason2,reason3,reason4,reason5,reason6,socsvalflag,drlcvalflag,hphonevalflag,historydatetimestamp,reported_dob,
    bocashell_addr1_dt_first_seen,bocashell_addr1_date_last_seen,diddeceased,diddeceaseddate,fraudpoint_v3,
		
		// best
    BestHit,best_phone,best_drivers_license_state,best_drivers_license,best_drivers_license_exp,
		// phones meta
    PhonesMetaHit, phone_reported_date,phone_vendor_first_reported_dt,phone_vendor_last_reported_dt,phone_prepaid,
	
    truedid,best_fname,best_lname,best_ssn,				
		input_fname_isbestmatch,input_lname_isbestmatch,input_ssn_isbestmatch,
    drop_indicator,address_vacancy_indicator,add_curr_pop,add_curr_prim_range,
		add_curr_predir,add_curr_prim_name,add_curr_addr_suffix,add_curr_postdir,add_curr_unit_desig,add_curr_sec_range,
		add_curr_city_name,add_curr_st,add_curr_zip5,add_curr_county,add_curr_geo_blk,add_curr_lat,add_curr_long,
		add_input_isbestmatch,
		
		county_death,DeceasedSsn,state_death_flag,death_rec_src,state_death_id,

    addresspobox, addresscmra, PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, UnitDesignation, SecondaryRange, PostalCity, VanityCity, State, 
		Zip, Zip4, CarrierRouteNumber, CarrierRouteSortationAtZIP, LineOfTravel, LineOfTravelOrder, DeliveryPointBarcode, DeliveryPointBarcodeCheckDigit, 
		TypeCode, County, Latitude, Longitude, MetropolitanStatisticalArea, GeoBlock, GeoMatch,ACECleanerErrorCode,isAdditional,fips_state,fips_county,


		MailingPrimaryRange,MailingPredirectional,MailingPrimaryName,MailingSuffix,MailingPostdirectional,MailingUnitDesignation,MailingSecondaryRange,
		MailingPostalCity,MailingVanityCity,MailingState,MailingZip,MailingZip4,MailingTypeCode,MailingCounty,MailingLatitude,MailingLongitude,MailingGeoMatch,MailingACECleanerErrorCode,		

		LicenseNumber,
    LicenseState,
		
    EmailAddress, Type, CreatedOn, Host , EmailLastDomain, isdisposableemail,

    Ssn, SsnFormatted,

    RoutingNumber,FullBankname,AbbreviatedBankname,FractionalRoutingnumber,HeadofficeRoutingnumber,HeadofficeBranchcodes,AccountNumber,BankHit,
    RoutingNumber2,FullBankname2,AbbreviatedBankname2,FractionalRoutingnumber2,HeadofficeRoutingnumber2,HeadofficeBranchcodes2,AccountNumber2,BankHit2,
    CrimHit,
    curr_incar_flag,
    off_cat_list,
    name_ssn_dob_match,

    IpAddress,iprngbeg,iprngend,edgecountry,edgeregion,edgecity,edgeconnspeed,edgemetrocode,edgelatitude,edgelongitude,edgepostalcode,edgecountrycode,edgeregioncode,edgecitycode,edgecontinentcode,edgetwolettercountry,edgeinternalcode,edgeareacodes,edgecountryconf,edgeregionconf,edgecitycong,edgepostalconf,edgegmtoffset,edgeindst,siccode,domainname,ispname,homebiztype,asn,asnname,primarylang,secondarylang,proxytype,proxydescription,isanisp,companyname,ranks,households,women,women18to34,women35to49,men,men18to34,men35to49,teens,kids,naicscode,cbsacode,cbsatitle,cbsatype,csacode,csatitle,mdcode,mdtitle,organizationname,
    Confidence_that_activity_was_deceitful_id,event_type_1,event_type_2,event_type_3,name_risk_code,dob_risk_code,ssn_risk_code,drivers_license_risk_code,physical_address_risk_code,phone_risk_code,cell_phone_risk_code,work_phone_risk_code,bank_account_1_risk_code,bank_account_2_risk_code,email_address_risk_code,ip_address_fraud_code,business_risk_code,mailing_address_risk_code,device_risk_code,identity_risk_code,
		advo_hitflag, advo_vacancyindicator, advo_addressstyle, advo_dropindicator, advo_residentialorbusinessindicator, advo_addresstype, advo_addressusagetype
          ));

Address := ENTITY(FLAT(UID(AssociatedCustomerFileInfo, OttoAddressId),
    Customer rCustomer=AssociatedCustomerFileInfo,
    Customer rSourceCustomer=SourceCustomerFileInfo,
    BOOLEAN addresspobox,
    BOOLEAN addresscmra,
    STRING OttoAddressId,
		STRING PrimaryRange=NULL(),
		STRING Predirectional=NULL(),
		STRING PrimaryName=NULL(),
		STRING Suffix=NULL(),
		STRING Postdirectional=NULL(),
		STRING UnitDesignation=NULL(),
		STRING SecondaryRange=NULL(),
		STRING PostalCity=NULL(),
		STRING VanityCity=NULL(),
		STRING State=NULL(),
		STRING Zip=NULL(),
		STRING Zip4=NULL(),
		STRING CarrierRouteNumber=NULL(),
		STRING CarrierRouteSortationAtZIP=NULL(),
		INTEGER LineOfTravel=NULL(),
		STRING LineOfTravelOrder=NULL(),
		INTEGER DeliveryPointBarcode=NULL(),
		INTEGER DeliveryPointBarcodeCheckDigit=NULL(),
		STRING TypeCode=NULL(),
		INTEGER County=NULL(),
		REAL Latitude=NULL(),
		REAL Longitude=NULL(),
		INTEGER MetropolitanStatisticalArea=NULL(),
		INTEGER GeoBlock=NULL(),
		STRING GeoMatch=NULL(),
		STRING ACECleanerErrorCode=NULL(),
		BOOLEAN isAdditional),
	MODEL(UID,
    rCustomer, SourceCustomers{rSourceCustomer}, 
    addresspobox, addresscmra, OttoAddressId, PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, UnitDesignation, SecondaryRange, PostalCity, VanityCity, State, 
		Zip, Zip4, CarrierRouteNumber, CarrierRouteSortationAtZIP, LineOfTravel, LineOfTravelOrder, DeliveryPointBarcode, DeliveryPointBarcodeCheckDigit, 
		TypeCode, County, Latitude, Longitude, MetropolitanStatisticalArea, GeoBlock, GeoMatch,ACECleanerErrorCode,isAdditional));

SocialSecurityNumber := ENTITY(FLAT(UID(AssociatedCustomerFileInfo, OttoSSNId),
    Customer rCustomer=AssociatedCustomerFileInfo,
    Customer rSourceCustomer=SourceCustomerFileInfo,
    Ssn,
    STRING OttoSSNId,
    STRING SsnFormatted,

    v2_divssnidentitycountnew,
    DATE DeceasedDate,
    DATE DeceasedDateOfBirth,
    STRING DeceasedFirst,
    STRING DeceasedMiddle,
    STRING DeceasedLast,   

    STRING DeceasedMatchCode,
    BOOLEAN isdeepdive,

    STRING county_death,
    STRING DeceasedSsn,
    STRING state_death_flag,
    STRING death_rec_src,
    STRING state_death_id
    ),
  MODEL(
    UID, rCustomer, SourceCustomers{rSourceCustomer}, Ssn, OttoSSNId, SsnFormatted, v2_divssnidentitycountnew,DeceasedDate,DeceasedDateOfBirth,DeceasedFirst,DeceasedMiddle,DeceasedLast,DeceasedMatchCode,isdeepdive,county_death,DeceasedSsn,state_death_flag,death_rec_src,state_death_id
    ));

Phone := ENTITY(FLAT(UID(AssociatedCustomerFileInfo, PhoneNumber),
    Customer rCustomer=AssociatedCustomerFileInfo,
    Customer rSourceCustomer=SourceCustomerFileInfo,
    STRING PhoneFormatted,
    STRING PhoneNumber,
		BOOLEAN isCellPhone
		),
	MODEL(UID,
    rCustomer, SourceCustomers{rSourceCustomer}, PhoneFormatted, PhoneNumber, isCellPhone));

Email := ENTITY(FLAT(UID(AssociatedCustomerFileInfo,OttoEmailId),
    Customer rCustomer=AssociatedCustomerFileInfo,
    Customer rSourceCustomer=SourceCustomerFileInfo,
		STRING EmailAddress,
		STRING Type,
		STRING OttoEmailId,
		DATE CreatedOn,
		STRING Host,
		STRING EmailLastDomain,
		INTEGER isdisposableemail),
	MODEL(UID,
    rCustomer, SourceCustomers{rSourceCustomer}, EmailAddress, OttoEmailId, Details{Type,CreatedOn,Host}, EmailLastDomain, isdisposableemail));

InternetProtocol := ENTITY(FLAT(UID(AssociatedCustomerFileInfo, OttoIpAddressId),
    Customer rCustomer=AssociatedCustomerFileInfo,
    Customer rSourceCustomer=SourceCustomerFileInfo,
    STRING IpAddress=ip_address,
		STRING OttoIpAddressId,
    STRING host,
    STRING alias,
    STRING location,
    STRING ip_address,
    STRING ip_address_date,
    STRING version,
    STRING class,
    STRING subnet_mask,
    STRING reserved,
    STRING isp,
    INTEGER v2_validationipproblems,
    STRING v2_ipstate,
    STRING v2_ipcountry,
    STRING v2_ipcontinent,

    STRING iprngbeg,
    STRING iprngend,
    STRING edgecountry,
    STRING edgeregion,
    STRING edgecity,
    STRING edgeconnspeed,
    STRING edgemetrocode,
    STRING edgelatitude,
    STRING edgelongitude,
    STRING edgepostalcode,
    STRING edgecountrycode,
    STRING edgeregioncode,
    STRING edgecitycode,
    STRING edgecontinentcode,
    STRING edgetwolettercountry,
    STRING edgeinternalcode,
    STRING edgeareacodes,
    STRING edgecountryconf,
    STRING edgeregionconf,
    STRING edgecitycong,
    STRING edgepostalconf,
    STRING edgegmtoffset,
    STRING edgeindst,
    STRING siccode,
    STRING domainname,
    STRING ispname,
    STRING homebiztype,
    STRING asn,
    STRING asnname,
    STRING primarylang,
    STRING secondarylang,
    STRING proxytype,
    STRING proxydescription,
    STRING isanisp,
    STRING companyname,
    STRING ranks,
    STRING households,
    STRING women,
    STRING women18to34,
    STRING women35to49,
    STRING men,
    STRING men18to34,
    STRING men35to49,
    STRING teens,
    STRING kids,
    STRING naicscode,
    STRING cbsacode,
    STRING cbsatitle,
    STRING cbsatype,
    STRING csacode,
    STRING csatitle,
    STRING mdcode,
    STRING mdtitle,
    STRING organizationname
    
    ),
  MODEL(
    UID, rCustomer, SourceCustomers{rSourceCustomer},IpAddress, OttoIpAddressId, host,alias,location,ip_address,ip_address_date,version,class,subnet_mask,reserved,isp,v2_validationipproblems,v2_ipstate,v2_ipcountry,v2_ipcontinent,
    iprngbeg,iprngend,edgecountry,edgeregion,edgecity,edgeconnspeed,edgemetrocode,edgelatitude,edgelongitude,edgepostalcode,edgecountrycode,edgeregioncode,edgecitycode,edgecontinentcode,edgetwolettercountry,edgeinternalcode,edgeareacodes,edgecountryconf,edgeregionconf,edgecitycong,edgepostalconf,edgegmtoffset,edgeindst,siccode,domainname,ispname,homebiztype,asn,asnname,primarylang,secondarylang,proxytype,proxydescription,isanisp,companyname,ranks,households,women,women18to34,women35to49,men,men18to34,men35to49,teens,kids,naicscode,cbsacode,cbsatitle,cbsatype,csacode,csatitle,mdcode,mdtitle,organizationname
    ));
    
 
//Bank Account – New – let’s make it 19

Bank := ENTITY(FLAT(UID(AssociatedCustomerFileInfo, RoutingNumber),
    Customer rCustomer=AssociatedCustomerFileInfo,
    Customer rSourceCustomer=SourceCustomerFileInfo,
    STRING RoutingNumber,
    STRING FullBankname,
    STRING AbbreviatedBankname,
    STRING FractionalRoutingnumber,
    STRING HeadofficeRoutingnumber,
    STRING HeadofficeBranchcodes,
    STRING hit
		),
	MODEL(UID,
    rCustomer, SourceCustomers{rSourceCustomer},RoutingNumber,FullBankname,AbbreviatedBankname,FractionalRoutingnumber,HeadofficeRoutingnumber,HeadofficeBranchcodes,hit));
	
BankAccount := ENTITY(FLAT(UID(AssociatedCustomerFileInfo, OttoBankAccountId),
    Customer rCustomer=AssociatedCustomerFileInfo,
    Customer rSourceCustomer=SourceCustomerFileInfo,
    Bank rBank=UID(AssociatedCustomerFileInfo, RoutingNumber),
    STRING AccountNumber,
    STRING OttoBankAccountId
		),
	MODEL(UID,
    rCustomer, SourceCustomers{rSourceCustomer}, rBank, AccountNumber, OttoBankAccountId));


//DL – New – let’s make it 20
 
DriversLicense := ENTITY(FLAT(UID(AssociatedCustomerFileInfo, OttoDriversLicenseId),
    Customer rCustomer=AssociatedCustomerFileInfo,
    Customer rSourceCustomer=SourceCustomerFileInfo,
    STRING LicenseNumber,
    STRING State,
    STRING OttoDriversLicenseId
		),
	MODEL(UID,
    rCustomer, SourceCustomers{rSourceCustomer}, LicenseNumber, State, OttoDriversLicenseId));
    
/*
  ASSOCIATIONS
*/

CustomerPerson := ASSOCIATION(FLAT(
    Customer rCustomer=AssociatedCustomerFileInfo,
		Person Subject=UID(AssociatedCustomerFileInfo, LexId)));	

PersonAddress := ASSOCIATION(FLAT(
    Customer rCustomer=AssociatedCustomerFileInfo,
		Person Subject=UID(AssociatedCustomerFileInfo, LexId),
		Address Location=UID(AssociatedCustomerFileInfo, OttoAddressId),
    DATE EventDate), MODEL(rCustomer, Subject, Location, EventDates{EventDate}));	

PersonSSN := ASSOCIATION(FLAT(
    Customer rCustomer=AssociatedCustomerFileInfo,
		Person Subject=UID(AssociatedCustomerFileInfo, LexId),
		SocialSecurityNumber Social=UID(AssociatedCustomerFileInfo, OttoSSNId),
    DATE EventDate), MODEL(rCustomer, Subject, Social, EventDates{EventDate}));	

PersonIpAddress := ASSOCIATION(FLAT(
    Customer rCustomer=AssociatedCustomerFileInfo,
		Person Subject=UID(AssociatedCustomerFileInfo, LexId),
		InternetProtocol Ip=UID(AssociatedCustomerFileInfo, OttoIpAddressId),
    DATE EventDate), MODEL(rCustomer, Subject, Ip, EventDates{EventDate}));	
		
PersonPhone := ASSOCIATION(FLAT(
    Customer rCustomer=AssociatedCustomerFileInfo,
		Person Subject=UID(AssociatedCustomerFileInfo, LexId),
		Phone PhoneNumber=UID(AssociatedCustomerFileInfo, PhoneNumber),
    DATE EventDate), MODEL(rCustomer, Subject, PhoneNumber, EventDates{EventDate}));	

PersonBankAccount := ASSOCIATION(FLAT(
    Customer rCustomer=AssociatedCustomerFileInfo,
		Person Subject=UID(AssociatedCustomerFileInfo, LexId),
		BankAccount Account=UID(AssociatedCustomerFileInfo, OttoBankAccountId),
    DATE EventDate), MODEL(rCustomer, Subject, Account, EventDates{EventDate}));	

PersonDriversLicense := ASSOCIATION(FLAT(
    Customer rCustomer=AssociatedCustomerFileInfo,
		Person Subject=UID(AssociatedCustomerFileInfo, LexId),
		DriversLicense License=UID(AssociatedCustomerFileInfo, OttoDriversLicenseId),
    DATE EventDate), MODEL(rCustomer, Subject, License, EventDates{EventDate}));

PersonEmail := ASSOCIATION(FLAT(
    Customer rCustomer=AssociatedCustomerFileInfo,
		Person Subject=UID(AssociatedCustomerFileInfo, LexId),
		Email Emailof=UID(AssociatedCustomerFileInfo, OttoEmailId),
    DATE EventDate), MODEL(rCustomer, Subject, Emailof, EventDates{EventDate}));

AddressSSN := ASSOCIATION(FLAT(
    Customer rCustomer=AssociatedCustomerFileInfo,
		Address Location=UID(AssociatedCustomerFileInfo, OttoAddressId),
		SocialSecurityNumber Social=UID(AssociatedCustomerFileInfo, Ssn),
		DATE EventDate));	
		
		
/*
PersonEvent := ASSOCIATION(FLAT(
    Customer rCustomer=AssociatedCustomerFileInfo,
		Person Subject=UID(AssociatedCustomerFileInfo, LexId),
		SocialSecurityNumber Social=UID(AssociatedCustomerFileInfo, Ssn),
		Phone PhoneNumber=UID(AssociatedCustomerFileInfo, PhoneNumber),
		Email Emailof=UID(AssociatedCustomerFileInfo,Email_Address),
		Address Location=UID(AssociatedCustomerFileInfo,PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, Zip, SecondaryRange),
		InternetProtocol Ip=UID(AssociatedCustomerFileInfo, IpAddress),
    Bank RoutingBank=UID(AssociatedCustomerFileInfo, RoutingNumber),
    BankAccount Account=UID(AssociatedCustomerFileInfo, RoutingNumber, AccountNumber),
    DriversLicense Licence=UID(AssociatedCustomerFileInfo, drivers_license),
    DATE EventDate,
    Event Transaction=UID(AssociatedCustomerFileInfo, record_id)
   ));
*/
PersonEvent := ASSOCIATION(FLAT(
    Customer rCustomer=AssociatedCustomerFileInfo,
		Person Subject=UID(AssociatedCustomerFileInfo, LexId),
    DATE EventDate,
    Event Transaction=UID(AssociatedCustomerFileInfo, record_id)
   ));

SsnEvent := ASSOCIATION(FLAT(
    Customer rCustomer=AssociatedCustomerFileInfo,
		SocialSecurityNumber Social=UID(AssociatedCustomerFileInfo, OttoSSNId),
    DATE EventDate,
    Event Transaction=UID(AssociatedCustomerFileInfo, record_id)
   ));

PhoneEvent := ASSOCIATION(FLAT(
    Customer rCustomer=AssociatedCustomerFileInfo,
		Phone PhoneNumber=UID(AssociatedCustomerFileInfo, PhoneNumber),
    DATE EventDate,
    Event Transaction=UID(AssociatedCustomerFileInfo, record_id)
   ));
   
EmailEvent := ASSOCIATION(FLAT(
    Customer rCustomer=AssociatedCustomerFileInfo,
		Email Emailof=UID(AssociatedCustomerFileInfo,OttoEmailId),
    DATE EventDate,
    Event Transaction=UID(AssociatedCustomerFileInfo, record_id)
   ));   
   
BankAccountEvent := ASSOCIATION(FLAT(
    Customer rCustomer=AssociatedCustomerFileInfo,
    BankAccount Account=UID(AssociatedCustomerFileInfo, OttoBankAccountId),
    DATE EventDate,
    Event Transaction=UID(AssociatedCustomerFileInfo, record_id)
   ));

DriversLicenseEvent := ASSOCIATION(FLAT(
    Customer rCustomer=AssociatedCustomerFileInfo,
    DriversLicense Licence=UID(AssociatedCustomerFileInfo, OttoDriversLicenseId),
    DATE EventDate,
    Event Transaction=UID(AssociatedCustomerFileInfo, record_id)
   ));


InternetProtocolEvent := ASSOCIATION(FLAT(
    Customer rCustomer=AssociatedCustomerFileInfo,
		InternetProtocol Ip=UID(AssociatedCustomerFileInfo, OttoIpAddressId),
    DATE EventDate,
    Event Transaction=UID(AssociatedCustomerFileInfo, record_id)
   ));
   
AddressEvent := ASSOCIATION(FLAT(
    Customer rCustomer=AssociatedCustomerFileInfo,
		Address Location=UID(AssociatedCustomerFileInfo, OttoAddressId),
    DATE EventDate,
    Event Transaction=UID(AssociatedCustomerFileInfo, record_id)
   ));

   
PersonPerson := ASSOCIATION(FLAT(
    Customer rCustomer=AssociatedCustomerFileInfo,
    Person FromPerson=UID(AssociatedCustomerFileInfo,frompersonlexid),
    Person ToPerson=UID(AssociatedCustomerFileInfo,topersonlexid),
		INTEGER SelfMatch,
    INTEGER ContributoryRecords,
    INTEGER SameAddressEmailMatch,
    INTEGER SameAddressSsnMatch,
    INTEGER SameAddressPhoneNumberMatch,
    INTEGER SameAddressSameDayCount,
    INTEGER HighFrequencySameAddressSameDayCount,
    INTEGER NonHighFrequencyAddressCount,
    INTEGER NonHighFrequencySameAddressSameDayCount,
    INTEGER SharedAddressCount,
    STRING VerifiedPRType,
    STRING VerifiedPRconfidence,
    BOOLEAN VerifiedPRPersonal,
    BOOLEAN VerifiedPRBusiness,
    BOOLEAN VerifiedPROther,
    BOOLEAN VerifiedPRIsRelative,
    BOOLEAN VerifiedPRIsAssociate,
    BOOLEAN VerifiedPRIsBusiness,
    REAL VerifiedPRDegree,
    INTEGER VerifiedPRHit,
    INTEGER VerifiedPRRelationshipCode,
    INTEGER VerifiedPRRelationship

    ));

USE FraudgovKEL.fraudgovshared(FLAT,
  Event(FILTER((UNSIGNED)record_id > 0), 
    LexId = did,
		BocashellLexId = bocashelldid,
		ind_type_description = classification_permissible_use_access.ind_type_description,
		CaseId = household_id,
		ClientId = Customer_Person_ID,
    EventDate = event_date,
		DateOfBirth = dob,		
		Title = cleaned_name.title,
		FirstName = cleaned_name.fname,
		MiddleName =cleaned_name.mname,
		LastName = cleaned_name.lname,
		NameSuffix = cleaned_name.name_suffix,
		PhoneNumber = clean_phones.phone_number,
		PhoneFormatted = phone_number_formatted,
    CellPhoneFormatted = cell_phone_formatted,
		WorkPhoneFormatted = Work_phone_Formatted,
		LicenseNumber = drivers_license,
    LicenseState = drivers_license_state,
		
		PrimaryRange = clean_address.prim_range,
		Predirectional = clean_address.predir,
		PrimaryName = clean_address.prim_name,
		Suffix =clean_address.addr_suffix,
		Postdirectional = clean_address.postdir,
		UnitDesignation = clean_address.unit_desig,
		SecondaryRange = clean_address.sec_range,
		PostalCity = clean_address.p_city_name,
		VanityCity = clean_address.v_city_name,
		State = clean_address.st,
		Zip = clean_address.zip,
		Zip4 = clean_address.zip4,
		CarrierRouteNumber = clean_address.cart,
		CarrierRouteSortationAtZIP = clean_address.cr_sort_sz,
		LineOfTravel =clean_address.lot,
		LineOfTravelOrder = clean_address.lot_order,
		DeliveryPointBarcode = clean_address.dbpc,
		DeliveryPointBarcodeCheckDigit = clean_address.chk_digit,
		TypeCode = clean_address.rec_type,
		County = clean_address.fips_county,
		Latitude = clean_address.geo_lat,
		Longitude = clean_address.geo_long,
		MetropolitanStatisticalArea = clean_address.msa,
		GeoBlock = clean_address.geo_blk,
		GeoMatch = clean_address.geo_match,
		ACECleanerErrorCode = clean_address.err_stat,
		isAdditional=FALSE,
    fips_state = clean_address.fips_state,
    fips_county = clean_address.fips_county,	
    
		MailingPrimaryRange = additional_address.clean_address.prim_range,
		MailingPredirectional = additional_address.clean_address.predir,
		MailingPrimaryName = additional_address.clean_address.prim_name,
		MailingSuffix = additional_address.clean_address.addr_suffix,
		MailingPostdirectional = additional_address.clean_address.postdir,
		MailingUnitDesignation = additional_address.clean_address.unit_desig,
		MailingSecondaryRange = additional_address.clean_address.sec_range,
		MailingPostalCity = additional_address.clean_address.p_city_name,
		MailingVanityCity = additional_address.clean_address.v_city_name,
		MailingState = additional_address.clean_address.st,
		MailingZip = additional_address.clean_address.zip,
		MailingZip4 = additional_address.clean_address.zip4,

		MailingTypeCode = additional_address.clean_address.rec_type,
		MailingCounty = additional_address.clean_address.ace_fips_county,
		MailingLatitude = additional_address.clean_address.geo_lat,
		MailingLongitude = additional_address.clean_address.geo_long,
		MailingGeoMatch = additional_address.clean_address.geo_match,
		MailingACECleanerErrorCode = additional_address.clean_address.err_stat,
		
		EmailAddress=email_address,
		Type=email_address_type,
		CreatedOn=email_address_date,
    RoutingNumber = bank_routing_number_1,
    FullBankname = bank1FullBankname,
    AbbreviatedBankname = bank1AbbreviatedBankname,
    FractionalRoutingnumber = bank1FractionalRoutingnumber,
    HeadofficeRoutingnumber = bank1HeadofficeRoutingnumber,
    HeadofficeBranchcodes = bank1HeadofficeBranchcodes,
    RoutingNumber = bank_routing_number_1,
    AccountNumber = bank_account_number_1,		
    BankHit = bank1hit,
		
    nap_summary = iid.nap_summary,
    nas_summary = iid.nap_summary,
    cvi = iid.cvi,
    addrvalflag = iid.addrvalflag,
    fp3_stolenidentityindex = fd_scores.stolenidentityindex_v3,
    syntheticidentityindex_v3 = fd_scores.syntheticidentityindex_v3,
    manipulatedidentityindex_v3 = fd_scores.manipulatedidentityindex_v3,
    socsdobflag = iid.socsdobflag,
    pwsocsdobflag = iid.pwsocsdobflag,
    dobmatchlevel = dobmatchlevel,
    sourcerisklevel = fdattributesv2.sourcerisklevel,
    reason1 = iid.reason1,
    reason2 = iid.reason2,
    reason3 = iid.reason3,
    reason4 = iid.reason4,
    reason5 = iid.reason5,
    reason6 = iid.reason6,
    socsvalflag = iid.socsvalflag,
    drlcvalflag = iid.drlcvalflag,
    hphonevalflag = iid.hphonevalflag,
    truedid	= truedid,
    best_fname = best_fname,
    best_lname = best_lname,
    best_ssn = best_ssn,
    input_fname_isbestmatch	= best_pii_flags.input_fname_isbestmatch,
    input_lname_isbestmatch	= best_pii_flags.input_lname_isbestmatch,
    input_ssn_isbestmatch	= best_pii_flags.input_ssn_isbestmatch,
    bocashell_addr1_dt_first_seen = address_verification.address_history_1.date_first_seen,
		bocashell_addr1_date_last_seen = address_verification.address_history_1.date_last_seen,

    drop_indicator = address_verification.input_address_information.drop_indicator,
    address_vacancy_indicator = address_verification.input_address_information.address_vacancy_indicator, 		
    add_curr_prim_range = add_curr_prim_range,
    add_curr_predir = add_curr_predir,
    add_curr_prim_name = add_curr_prim_name,
    add_curr_addr_suffix = add_curr_addr_suffix,
    add_curr_postdir = add_curr_postdir,
    add_curr_unit_desig = add_curr_unit_desig,
    add_curr_sec_range = add_curr_sec_range,
    add_curr_city_name = add_curr_city_name,
    add_curr_st = add_curr_st,
    add_curr_zip5 = add_curr_zip5,
    add_curr_county = add_curr_county,
    add_curr_geo_blk = add_curr_geo_blk,
    add_curr_lat = add_curr_lat,
    add_curr_long = add_curr_long,
    
    add_curr_pop	= address_verification.address_history_1.addrpop,
    add_input_isbestmatch	= address_verification.input_address_information.isbestmatch,

    diddeceased = diddeceased,
		diddeceaseddate = diddeceaseddate,
		fraudpoint_v3 = fd_scores.fraudpoint_v3,		

    AccountNumber = bank_account_number_1,
    RoutingNumber = bank_routing_number_1,
    FullBankname = bank1FullBankname,
    AbbreviatedBankname = bank1AbbreviatedBankname,
    FractionalRoutingnumber = bank1FractionalRoutingnumber,
    HeadofficeRoutingnumber = bank1HeadofficeRoutingnumber,
    HeadofficeBranchcodes = bank1HeadofficeBranchcodes,
    BankHit = bank1hit, 
 
    AccountNumber2 = bank_account_number_2,
    RoutingNumber2 = bank_routing_number_2,
    FullBankname2 = bank1FullBankname,
    AbbreviatedBankname2 = bank1AbbreviatedBankname,
    FractionalRoutingnumber2 = bank1FractionalRoutingnumber,
    HeadofficeRoutingnumber2 = bank1HeadofficeRoutingnumber,
    HeadofficeBranchcodes = bank1HeadofficeBranchcodes,
    BankHit2 = bank1hit 

    ),
	Person(FILTER((UNSIGNED)record_id > 0 AND (UNSIGNED)did <> 0),
    LexId = did,
		DateOfBirth = dob,
    EventDate = event_date,
		Title = cleaned_name.title,
		FirstName = cleaned_name.fname,
		MiddleName =cleaned_name.mname,
		LastName = cleaned_name.lname,
		NameSuffix = cleaned_name.name_suffix,
		EmailAddress=email_address,
		PrimaryRange = clean_address.prim_range,
		Predirectional = clean_address.predir,
		PrimaryName = clean_address.prim_name,
		Suffix =clean_address.addr_suffix,
		Postdirectional = clean_address.postdir,
		UnitDesignation = clean_address.unit_desig,
		SecondaryRange = clean_address.sec_range,
		PostalCity = clean_address.p_city_name,
		VanityCity = clean_address.v_city_name,
		State = clean_address.st,
		Zip = clean_address.zip,
		Zip4 = clean_address.zip4,
    DeceasedDate = dod8,
    DeceasedDateOfBirth = dob8,
    DeceasedFirst = fname,
    DeceasedMiddle = mname,
    DeceasedLast = lname,
    DeceasedSsn = ssn,
    DeceasedMatchCode = matchcode,
		DateFirstSeen = dt_first_seen, // Contains information for ASOF
		DateLastSeen = dt_last_seen),		// Contains information for ASOF
	Address(FILTER((UNSIGNED)record_id > 0 AND OttoAddressId != 12638153115695167395),
		PrimaryRange = clean_address.prim_range,
		Predirectional = clean_address.predir,
		PrimaryName = clean_address.prim_name,
		Suffix =clean_address.addr_suffix,
		Postdirectional = clean_address.postdir,
		UnitDesignation = clean_address.unit_desig,
		SecondaryRange = clean_address.sec_range,
		PostalCity = clean_address.p_city_name,
		VanityCity = clean_address.v_city_name,
		State = clean_address.st,
		Zip = clean_address.zip,
		Zip4 = clean_address.zip4,
		CarrierRouteNumber = clean_address.cart,
		CarrierRouteSortationAtZIP = clean_address.cr_sort_sz,
		LineOfTravel =clean_address.lot,
		LineOfTravelOrder = clean_address.lot_order,
		DeliveryPointBarcode = clean_address.dbpc,
		DeliveryPointBarcodeCheckDigit = clean_address.chk_digit,
		TypeCode = clean_address.rec_type,
		County = clean_address.fips_county,
		Latitude = clean_address.geo_lat,
		Longitude = clean_address.geo_long,
		MetropolitanStatisticalArea = clean_address.msa,
		GeoBlock = clean_address.geo_blk,
		GeoMatch = clean_address.geo_match,
		ACECleanerErrorCode = clean_address.err_stat,
		isAdditional=FALSE,
		DateFirstSeen = dt_first_seen, 
		DateLastSeen = dt_last_seen),
    /*
	Address(FILTER((STRING10)additional_address.clean_address.prim_range <> '' AND (STRING28)additional_address.clean_address.prim_name <> '' AND (UNSIGNED3)additional_address.clean_address.zip <> 0),
		PrimaryRange = additional_address.clean_address.prim_range,
		Predirectional = additional_address.clean_address.predir,
		PrimaryName = additional_address.clean_address.prim_name,
		Suffix = additional_address.clean_address.addr_suffix,
		Postdirectional = additional_address.clean_address.postdir,
		UnitDesignation = additional_address.clean_address.unit_desig,
		SecondaryRange = additional_address.clean_address.sec_range,
		PostalCity = additional_address.clean_address.p_city_name,
		VanityCity = additional_address.clean_address.v_city_name,
		State = additional_address.clean_address.st,
		Zip = additional_address.clean_address.zip,
		Zip4 = additional_address.clean_address.zip4,
		CarrierRouteNumber = additional_address.clean_address.cart,
		CarrierRouteSortationAtZIP = additional_address.clean_address.cr_sort_sz,
		LineOfTravel = additional_address.clean_address.lot,
		LineOfTravelOrder = additional_address.clean_address.lot_order,
		DeliveryPointBarcode = additional_address.clean_address.dpbc,
		DeliveryPointBarcodeCheckDigit = additional_address.clean_address.chk_digit,
		TypeCode = additional_address.clean_address.rec_type,
		County = additional_address.clean_address.ace_fips_county,
		Latitude = additional_address.clean_address.geo_lat,
		Longitude = additional_address.clean_address.geo_long,
		MetropolitanStatisticalArea = additional_address.clean_address.msa,
		GeoBlock = additional_address.clean_address.geo_blk,
		GeoMatch = additional_address.clean_address.geo_match,
		ACECleanerErrorCode = additional_address.clean_address.err_stat,
		isAdditional=TRUE,
		DateFirstSeen = dt_first_seen,
		DateLastSeen = dt_last_seen),
    */
	SocialSecurityNumber(FILTER((UNSIGNED)record_id > 0 AND (UNSIGNED)ssn <> 0),
		DateFirstSeen = dt_first_seen,
		DateLastSeen = dt_last_seen),
	Phone(FILTER((UNSIGNED)record_id > 0 AND TRIM(clean_phones.cell_phone) != ''),
    PhoneFormatted = Cell_phone_Formatted,
		PhoneNumber = clean_phones.cell_phone,
		isCellPhone = TRUE,
		DateFirstSeen = dt_first_seen,
		DateLastSeen = dt_last_seen),
	Phone(FILTER((UNSIGNED)record_id > 0 AND TRIM(clean_phones.phone_number) != ''),
    PhoneFormatted = phone_number_formatted,
		PhoneNumber = clean_phones.phone_number,
		isCellPhone = FALSE,
		DateFirstSeen = dt_first_seen,
		DateLastSeen = dt_last_seen),
	Email(FILTER((UNSIGNED)record_id > 0 AND TRIM((STRING50)email_address) <> ''),
		EmailAddress=email_address,
		Type=email_address_type,
		CreatedOn=email_address_date,
		DateFirstSeen = dt_first_seen,
		DateLastSeen = dt_last_seen),
	PersonAddress(FILTER((UNSIGNED)did <> 0),
    LexId = did,
		EventDate = event_date,
		DateLastSeen = dt_last_seen,
		DateFirstSeen = dt_first_seen),

  CustomerPerson(FILTER((UNSIGNED)did<>0 AND AssociatedCustomerFileInfo > 0),		
    LexId = did,
		DateLastSeen = dt_last_seen,
		DateFirstSeen = dt_first_seen),
		
	PersonSSN(FILTER((UNSIGNED)did<>0 AND (UNSIGNED)ssn<>0 AND AssociatedCustomerFileInfo > 0),
    LexId = did,
		EventDate = event_date,
		DateLastSeen = dt_last_seen,
		DateFirstSeen = dt_first_seen),
	AddressSSN(FILTER((UNSIGNED)ssn <>0 AND AssociatedCustomerFileInfo > 0),
		EventDate = event_date,
		DateLastSeen = dt_last_seen,
		DateFirstSeen = dt_first_seen),
	PersonPhone(FILTER((UNSIGNED)did <> 0 AND clean_phones.cell_phone != ''),
    LexId = did,
		EventDate = event_date,
		PhoneNumber = clean_phones.cell_phone,
		DateLastSeen = dt_last_seen,
		DateFirstSeen = dt_first_seen),
	PersonPhone(FILTER((UNSIGNED)did <> 0 AND clean_phones.phone_number != ''),
    LexId = did,
		EventDate = event_date,
		PhoneNumber = clean_phones.phone_number,
		DateLastSeen = dt_last_seen,
		DateFirstSeen = dt_first_seen),
	PersonEmail(FILTER((UNSIGNED)did <> 0 AND (STRING50)email_address <> '' AND AssociatedCustomerFileInfo > 0),
    LexId = did,
		EventDate = event_date
  ),
  PersonEvent(FILTER((UNSIGNED)did <> 0 AND AssociatedCustomerFileInfo > 0 AND (UNSIGNED)record_id > 0),
    LexId = did,
    EventDate = event_date,
    Transaction = record_id    
  ),
  PersonAddress(FILTER((UNSIGNED)did <> 0 AND AssociatedCustomerFileInfo > 0 AND (UNSIGNED)record_id > 0),
    LexId = did,
		EventDate = event_date
		
  ),  
  SsnEvent(FILTER((UNSIGNED)SSN <> 0 AND AssociatedCustomerFileInfo > 0 AND (UNSIGNED)record_id > 0),
    Transaction = record_id,
		EventDate = event_date   
  ),
  /*
  PhoneEvent(FILTER(AssociatedCustomerFileInfo > 0 AND (UNSIGNED)record_id > 0 AND clean_phones.cell_phone != ''),
		PhoneNumber = clean_phones.cell_phone,
		EventDate = event_date,
    Transaction = record_id    
  ),
  */
  PhoneEvent(FILTER(AssociatedCustomerFileInfo > 0 AND (UNSIGNED)record_id > 0 AND clean_phones.phone_number != ''),
		PhoneNumber = clean_phones.phone_number,
		EventDate = event_date,
    Transaction = record_id    
  ),
  EmailEvent(FILTER(AssociatedCustomerFileInfo > 0 AND (UNSIGNED)record_id > 0 AND email_address != ''),
		Emailof=email_address,  		
		EventDate = event_date,
    Transaction = record_id    
  ),
  BankAccountEvent(FILTER(AssociatedCustomerFileInfo > 0 AND (UNSIGNED)record_id > 0 AND bank_account_number_1 != ''),
    Transaction = record_id,    
		EventDate = event_date
  ),
  BankAccountEvent(FILTER(AssociatedCustomerFileInfo > 0 AND (UNSIGNED)record_id > 0 AND bank_account_number_2 != ''),
    OttoBankAccountId = OttoBankAccountId2,
		EventDate = event_date,		
    Transaction = record_id    
  ),
  DriversLicenseEvent(FILTER(AssociatedCustomerFileInfo > 0 AND (UNSIGNED)record_id > 0 AND drivers_license != ''),
		EventDate = event_date,
    Transaction = record_id    
  ),  
  InternetProtocolEvent(FILTER(AssociatedCustomerFileInfo > 0 AND (UNSIGNED)record_id > 0 AND TRIM(ip_address) != '' AND ip_address NOT IN ['0.0.0.0']),
		EventDate = event_date,
    Transaction = record_id    
  ),
  AddressEvent(FILTER(AssociatedCustomerFileInfo > 0 AND (UNSIGNED)record_id > 0 AND OttoAddressId != 12638153115695167395),
    EventDate = event_date,
    Transaction = record_id    
  ),
  /*
  PersonEvent(FILTER((UNSIGNED)did <> 0 AND AssociatedCustomerFileInfo > 0 AND (UNSIGNED)record_id > 0),
    LexId = did,
		PrimaryRange = clean_address.prim_range,
		Predirectional = clean_address.predir,
		PrimaryName = clean_address.prim_name,
		Suffix =clean_address.addr_suffix,
		Postdirectional = clean_address.postdir,
		Postdirectional = clean_address.postdir,
		Zip = clean_address.zip,
		SecondaryRange = clean_address.sec_range,
    EventDate = event_date,
		
    IpAddress = ip_address, 
		Emailof=email_address,  		
		PhoneNumber = clean_phones.cell_phone,

    RoutingNumber = bank_routing_number_1,
    AccountNumber = bank_account_number_1,
    Transaction = record_id    
  ),
  PersonEvent(FILTER((UNSIGNED)did <> 0 AND AssociatedCustomerFileInfo > 0 AND (UNSIGNED)record_id > 0),
    LexId = did,
		PrimaryRange = clean_address.prim_range,
		Predirectional = clean_address.predir,
		PrimaryName = clean_address.prim_name,
		Suffix =clean_address.addr_suffix,
		Postdirectional = clean_address.postdir,
		Zip = clean_address.zip,
		SecondaryRange = clean_address.sec_range,
    EventDate = event_date,
		
    IpAddress = ip_address, 
		Emailof=email_address,  		
		PhoneNumber = clean_phones.phone_number,
    RoutingNumber = bank_routing_number_2,
    AccountNumber = bank_account_number_2,
		
    Transaction = record_id    
  ),
*/
  InternetProtocol(FILTER((UNSIGNED)did <> 0 AND AssociatedCustomerFileInfo > 0 AND TRIM(ip_address) != '' AND ip_address NOT IN ['0.0.0.0'])),
	
  PersonIpAddress(FILTER((UNSIGNED)did <> 0 AND AssociatedCustomerFileInfo > 0 AND TRIM(ip_address) != '' AND ip_address NOT IN ['0.0.0.0']),
    LexId = did),

  Bank(FILTER(bank_routing_number_1 != '' AND bank_account_number_1 != ''),
    RoutingNumber = bank_routing_number_1,
    FullBankname = bank1FullBankname,
    AbbreviatedBankname = bank1AbbreviatedBankname,
    FractionalRoutingnumber = bank1FractionalRoutingnumber,
    HeadofficeRoutingnumber = bank1HeadofficeRoutingnumber,
    HeadofficeBranchcodes = bank1HeadofficeBranchcodes,
    hit = bank1hit 
		),

  Bank(FILTER(bank_routing_number_2 != '' AND bank_account_number_2 != ''),
    RoutingNumber = bank_routing_number_2,
    FullBankname = bank2FullBankname,
    AbbreviatedBankname = bank2AbbreviatedBankname,
    FractionalRoutingnumber = bank2FractionalRoutingnumber,
    HeadofficeRoutingnumber = bank2HeadofficeRoutingnumber,
    HeadofficeBranchcodes = bank2HeadofficeBranchcodes,
    hit = bank2hit 
		), 
		
  BankAccount(FILTER((UNSIGNED)did <> 0 AND TRIM(bank_account_number_1) != ''),
    RoutingNumber = bank_routing_number_1,
    AccountNumber = bank_account_number_1,
    OttoBankAccountId = OttoBankAccountId
		),

  BankAccount(FILTER((UNSIGNED)did <> 0 AND TRIM(bank_account_number_2) != ''),
    RoutingNumber = bank_routing_number_2,
    AccountNumber = bank_account_number_2,
    OttoBankAccountId = OttoBankAccountId2
		),

  DriversLicense(FILTER((UNSIGNED)did <> 0 AND TRIM(drivers_license) != ''),
    LicenseNumber = drivers_license,
    State = drivers_license_state
		),

  PersonBankAccount(FILTER((UNSIGNED)did <> 0 AND TRIM(bank_account_number_1) != ''),
    LexId = did
		),
  PersonBankAccount(FILTER((UNSIGNED)did <> 0 AND TRIM(bank_account_number_2) != ''),
    LexId = did,
		OttoBankAccountId = OttoBankAccountId2
		),

  PersonDriversLicense(FILTER((UNSIGNED)did <> 0 AND TRIM(drivers_license) != ''),
    LexId = did
		)  
        
);

USE FraudgovKEL.PersonEventTypes(FLAT, 
  Event(FILTER((UNSIGNED)record_id > 0),
  EventType = event_type)
);

USE FraudgovKEL.SharingRules(FLAT,
  Customer(FILTER((UNSIGNED)fdn_ind_type_gc_id_inclusion>0),
    CustomerId=inclusion_id,
    IndustryType=Ind_type)
);

/*
USE FraudgovKEL.PersonCIID(FLAT,
  DriversLicense(FILTER((UNSIGNED)did <> 0 AND TRIM(dl_number) != ''),
    LicenseNumber = dl_number,
    State = dl_state
		),

  PersonDriversLicense(FILTER((UNSIGNED)did <> 0 AND TRIM(dl_number) != ''),
    LexId = did,
    LicenseNumber = dl_number
		),

  Person(FILTER((UNSIGNED)did>0),
    LexId = did,
    SubjectSsnCount = subjectssncount
    )

);
*/
/*
USE FraudgovKEL.PersonFraudPoint(FLAT,
  Person(FILTER((UNSIGNED)did>0),
    LexId = did));
/*

USE FraudgovKEL.PersonDeceased(FLAT,
  Person(
     LexId = did,
     DeceasedDate = dod8,
     DeceasedDateOfBirth = dob8,
     DeceasedFirst = fname,
     DeceasedMiddle = mname,
     DeceasedLast = lname,
     DeceasedSsn = ssn,
     DeceasedMatchCode = matchcode)
     );

USE FraudgovKEL.PersonCrim(FLAT,
  Person(FILTER((UNSIGNED)did>0),
    LexId = did
    ));

USE FraudgovKEL.PersonIPMetadata(FLAT,
  Event(FILTER((UNSIGNED)record_id > 0 and did > 0), 
    LexId = did),
  InternetProtocol(FILTER((UNSIGNED)did <> 0 AND AssociatedCustomerFileInfo > 0 AND ip_address NOT IN ['0.0.0.0']),
    IpAddress = ip_address
    )
  );
*/  
USE FraudgovKEL.AddressPersonAssociations.PersonAddressMatchStats(FLAT,
  PersonPerson);

/* LOGIC STATEMENTS - Attributes */
     
Event: => EntityContextUid := '_11' + RecordId;     
Event: => InCustomerPopulation := MAP(rSourceCustomer=rCustomer => 1, 0);
Event: => CustomerId := rCustomer.CustomerId;
Event: => IndustryType := rCustomer.IndustryType;

Event: => Deceased := MAP(ISVALIDDATE(DeceasedDate) => 1, 0);
Event: => DeceasedNameMatch := MAP(FirstName=DeceasedFirst AND LastName=DeceasedLast => 1, 0);
Event: => DeceasedDobMatch := MAP(DeceasedDateOfBirth=DateOfBirth => 1, 0);
Event: => DeceasedMatch := MAP(Deceased=1 AND DeceasedNameMatch=1 AND DeceasedDobMatch=1 => 1, 0);

Event: => DeceasedPriorToEvent := MAP(Subject.DeceasedMatch = 1 AND Subject.DeceasedDate < EventDate => 1, 0); //jp1
Event: => CurrentlyIncarceratedFlag := MAP(name_ssn_dob_match = 1 AND curr_incar_flag='Y' => 1, 0);
Event: => IdAge := YEARSBETWEEN(DateOfBirth, EventDate); // Age at time of transaction.
Event: => NoLexId := MAP(LexId > 900000000000 => 1, 0);
Event: => NoLexIdAdult := MAP(NoLexId = 1 AND IdAge > 17 => 1, 0);

Event: => EventYearMonth := INTEGER(EventDate) DIV 100;
Event: => DeceasedToEventYearDiff := MAP(DeceasedMatch = 1 => YEARSBETWEEN(EventDate, DeceasedDate), 0);//jp1

//Event: => FullAddress := Location.FullAddress;//jp
Event: => FullAddress := CleanSpaces(TRIM(TRIM(PrimaryRange) + ' ' + TRIM(TRIM(Predirectional) + ' ' + TRIM(TRIM(PrimaryName) + ' ' + TRIM(TRIM(Suffix) + ' ' + TRIM(TRIM(Postdirectional) + ' ' + TRIM(TRIM(UnitDesignation) + ' ' + TRIM(TRIM(SecondaryRange) + ' ' + TRIM(TRIM(VanityCity) + ' ' + TRIM(State))))))))));
Event: => StreetAddress := CleanSpaces(TRIM(TRIM(PrimaryRange) + ' ' + TRIM(TRIM(Predirectional) + ' ' + TRIM(TRIM(PrimaryName) + ' ' + TRIM(TRIM(Suffix) + ' ' + TRIM(TRIM(Postdirectional) + ' ' + TRIM(TRIM(UnitDesignation) + ' ' + TRIM(TRIM(SecondaryRange)))))))));
Event: => City := PostalCity;
Event: => MailingStreetAddress := CleanSpaces(TRIM(TRIM(MailingPrimaryRange) + ' ' + TRIM(TRIM(MailingPredirectional) + ' ' + TRIM(TRIM(MailingPrimaryName) + ' ' + TRIM(TRIM(MailingSuffix) + ' ' + TRIM(TRIM(MailingPostdirectional) + ' ' + TRIM(TRIM(MailingUnitDesignation) + ' ' + TRIM(TRIM(MailingSecondaryRange)))))))));
Event: => MailingCity := MailingPostalCity;

Event: => LatLongId := STRING(Latitude) + ' ' + STRING(Longitude);
Event: => EventTypeCount := COUNT(EventTypes);

Event: => SafeFlag := MAP(InCustomerPopulation = 1 AND Confidence_that_activity_was_deceitful_id = 3 => 1, 0);
Event: => ContributorSafeFlag := MAP(InCustomerPopulation = 0 AND Confidence_that_activity_was_deceitful_id = 3 => 1, 0);

Event: => AddressIsVacant := MAP(advo_vacancyindicator = 'Y' => 1, 0);
Event: => AddressIsCmra := MAP(advo_dropindicator='C' => 1, 0);
Event: => AddressIsPoBox := MAP(advo_addresstype=9 => 1, 0);
Event: => InvalidAddress := MAP(ACECleanerErrorCode IN ['E101','E212','E213','E214','E216','E302','E412','E413','E420','E421','E422','E423','E425','E427','E428','E429','E430','E431','E439','E500','E501','E502','E503','E504','E505','E600'] => 1, 0);
Event: => AddressOutOfState := MAP(Location.State != rCustomer.JurisdictionState => 1, 0);//jp

Event: => DemoCustomer := rCustomer.CustomerId IN ['248283691','248283681','248283671'];
Event: => EventAge := IF(DemoCustomer, DAYSBETWEEN(EventDate, DATEFROMPARTS(2018, 4, 7)), DAYSBETWEEN(EventDate, rCustomer.EventDateMax));

Event: => Nas9Flag := MAP(nas_summary = '3' => 1, 0); // Address not associated with identity per public records and not relative address
Event: => Nap3Flag := MAP(nap_summary = '3' => 1, 0); // Phone and Lastname not associated with identity per public records

Event: => IdNas9OnlyFlag := MAP(nas_summary = '9' => 1, 0); // Address not associated with identity per public records
Event: => IdNas9Flag := MAP(nas_summary = '9' /*AND relativeaddressmatch = 0 */=> 1, 0); // Address not associated with identity per public records and not relative address

// jp temp attr
Event: => IdAddressNotVerified := MAP(nas_summary IN ['4','7','9'] => 1, 0); 
Event: => IdSsnNotVerifiedFlag := MAP(nas_summary IN ['2','3','5','8'] => 1, 0); 
Event: => IdContradictorySsnFlag := MAP(nas_summary IN ['1'] => 1, 0); // 

Event: => KrIdentityRisk := MAP(name_risk_code != 0 OR dob_risk_code != 0 OR identity_risk_code != 0 => 1, 0);
Event: => KrHighRiskIdentityFlag := MAP(KrIdentityRisk = 1 OR COUNT(EventTypes(EventType IN ['10000','10001','10002','10005','10006','10007','11000','11001','11002','11003','11004','11005','11006','11007','11008','11009','11010','11011','11012','11013','11014','11015','11016','11017','11018','11019','12000','12001','12002','12003','12004','12005','12006','12007','13000','13001','13002','13003','13004','13005','13006','13007','1400','14901']))>0 => 1, 0); 
Event: => KrMediumRiskIdentityFlag := MAP(COUNT(EventTypes(EventType IN ['10003','10004','14001','14902']))>0 => 1, 0);
Event: => KrLowRiskIdentityFlag := MAP(COUNT(EventTypes(EventType IN ['14900','14903']))>0 => 1, 0);
Event: => KrIdentityFlag := MAP(KrHighRiskIdentityFlag=1 OR KrMediumRiskIdentityFlag=1 OR KrLowRiskIdentityFlag=1 => 1, 0);

Event: => KrHighRiskAddressFlag := MAP(COUNT(EventTypes(EventType IN ['301','302','303','391']))>0 => 1, 0);
Event: => KrMediumRiskAddressFlag := MAP(COUNT(EventTypes(EventType IN ['300','392']))>0 => 1, 0);
Event: => KrLowRiskAddressFlag := MAP(COUNT(EventTypes(EventType IN ['390','393']))>0 => 1, 0);
Event: => KrAddressFlag := MAP(KrHighRiskAddressFlag=1 OR KrMediumRiskAddressFlag=1 OR KrLowRiskAddressFlag=1 => 1, 0);

Event: => KrHighRiskSsnFlag := MAP(COUNT(EventTypes(EventType IN ['100','191']))>0 => 1, 0);
Event: => KrMediumRiskSsnFlag := MAP(COUNT(EventTypes(EventType IN ['101','192']))>0 => 1, 0);
Event: => KrLowRiskSsnFlag := MAP(COUNT(EventTypes(EventType IN ['103','104','105','190','193']))>0 => 1, 0);
Event: => KrSsnFlag := MAP(KrHighRiskSsnFlag=1 OR KrMediumRiskSsnFlag=1 OR KrLowRiskSsnFlag=1 => 1, 0);

Event: => KrHighRiskPhoneFlag := MAP(COUNT(EventTypes(EventType IN ['400','402','491']))>0 => 1, 0);
Event: => KrMediumRiskPhoneFlag := MAP(COUNT(EventTypes(EventType IN ['401','492']))>0 => 1, 0);
Event: => KrLowRiskPhoneFlag := MAP(COUNT(EventTypes(EventType IN ['490','493']))>0 => 1, 0);
Event: => KrPhoneFlag := MAP(KrHighRiskPhoneFlag=1 OR KrMediumRiskPhoneFlag=1 OR KrLowRiskPhoneFlag=1 => 1, 0);

Event: => KrHighRiskEmailFlag := MAP(COUNT(EventTypes(EventType IN ['500','501','591']))>0 => 1, 0);
Event: => KrMediumRiskEmailFlag := MAP(COUNT(EventTypes(EventType IN ['502','592']))>0 => 1, 0);
Event: => KrLowRiskEmailFlag := MAP(COUNT(EventTypes(EventType IN ['590','593']))>0 => 1, 0);
Event: => KrEmailFlag := MAP(KrHighRiskEmailFlag=1 OR KrMediumRiskEmailFlag=1 OR KrLowRiskEmailFlag=1 => 1, 0);

Event: => KrHighRiskIpAddressFlag := MAP(COUNT(EventTypes(EventType IN ['601','602','605','691','1000','1091']))>0 => 1, 0);
Event: => KrMediumRiskIpAddressFlag := MAP(COUNT(EventTypes(EventType IN ['600','603','604','692','1001','1092']))>0 => 1, 0);
Event: => KrLowRiskIpAddressFlag := MAP(COUNT(EventTypes(EventType IN ['690','693','1090','1093']))>0 => 1, 0);
Event: => KrIpFlag := MAP(KrHighRiskIpAddressFlag=1 OR KrMediumRiskIpAddressFlag=1 OR KrLowRiskIpAddressFlag=1 => 1, 0);

Event: => KrHighRiskDlFlag := MAP(COUNT(EventTypes(EventType IN ['203','291']))>0 => 1, 0);
Event: => KrMediumRiskDlFlag := MAP(COUNT(EventTypes(EventType IN ['202','204','292']))>0 => 1, 0);
Event: => KrLowRiskDlFlag := MAP(COUNT(EventTypes(EventType IN ['200','201','290','293']))>0 => 1, 0);
Event: => KrDlFlag := MAP(KrHighRiskDlFlag=1 OR KrMediumRiskDlFlag=1 OR KrLowRiskDlFlag=1 => 1, 0);

Event: => KrHighRiskBankFlag := MAP(COUNT(EventTypes(EventType IN ['800','891']))>0 => 1, 0);
Event: => KrMediumRiskBankFlag := MAP(COUNT(EventTypes(EventType IN ['801','802','892']))>0 => 1, 0);
Event: => KrLowRiskBankFlag := MAP(COUNT(EventTypes(EventType IN ['893','890']))>0 => 1, 0);
Event: => KrBankFlag := MAP(KrHighRiskBankFlag=1 OR KrMediumRiskBankFlag=1 OR KrLowRiskBankFlag=1 => 1, 0);

Event: => FlagsKnownRiskElement := MAP(KrAddressFlag+KrSsnFlag+KrPhoneFlag+KrEmailFlag+KrIpFlag+KrDlFlag+KrBankFlag>0 => 1, 0); // this specific transaction marks a known risk element.

Event: => HasKnownRiskElement := MAP(Location.KrFlag=1 OR 
                                       rPhone.KrFlag=1 OR 
                                       rEmail.KrFlag=1 OR 
                                       rInternetProtocol.KrFlag=1 OR 
                                       rBankAccount.KrFlag=1 OR 
                                       rDriversLicense.KrFlag=1 => 1, 0); // this means that an element involved in this transaction was previously marked as kr

Event: => KrPersonProfileFlag := Subject.KrFlag;
Event: => KrEmailProfileFlag := rEmail.KrFlag;
Event: => KrAddressProfileFlag := Location.KrFlag;
Event: => KrIpProfileFlag := rInternetProtocol.KrFlag;
Event: => KrSsnProfileFlag := rSsn.KrFlag;
Event: => KrPhoneProfileFlag := rPhone.KrFlag;
Event: => KrBankAccountProfileFlag := rBankAccount.KrFlag;
Event: => KrDriversLicenseProfileFlag := rDriversLicense.KrFlag;


Event: => KrEventAfterKnownRisk := MAP(Location.KrLastEventDate < EventDate OR 
                                       rPhone.KrLastEventDate < EventDate OR 
                                       rEmail.KrLastEventDate < EventDate OR 
                                       rInternetProtocol.KrLastEventDate < EventDate OR 
                                       rBankAccount.KrLastEventDate < EventDate OR 
                                       rDriversLicense.KrLastEventDate < EventDate => 1, 0);

Event: => KrDl200Flag := MAP(COUNT(EventTypes(EventType IN ['200']))>0 => 1, 0);
Event: => KrDl201Flag := MAP(COUNT(EventTypes(EventType IN ['201']))>0 => 1, 0);
Event: => KrDl202Flag := MAP(COUNT(EventTypes(EventType IN ['202']))>0 => 1, 0);
Event: => KrDl203Flag := MAP(COUNT(EventTypes(EventType IN ['203']))>0 => 1, 0);
Event: => KrDl204Flag := MAP(COUNT(EventTypes(EventType IN ['204']))>0 => 1, 0);
Event: => KrDl290Flag := MAP(COUNT(EventTypes(EventType IN ['290']))>0 => 1, 0);
Event: => KrDl291Flag := MAP(COUNT(EventTypes(EventType IN ['291']))>0 => 1, 0);
Event: => KrDl292Flag := MAP(COUNT(EventTypes(EventType IN ['292']))>0 => 1, 0);
Event: => KrDl293Flag := MAP(COUNT(EventTypes(EventType IN ['293']))>0 => 1, 0);

Event: => KrBnk800Flag := MAP(COUNT(EventTypes(EventType IN ['800']))>0 => 1, 0);
Event: => KrBnk801Flag := MAP(COUNT(EventTypes(EventType IN ['801']))>0 => 1, 0);
Event: => KrBnk802Flag := MAP(COUNT(EventTypes(EventType IN ['802']))>0 => 1, 0);
Event: => KrBnk890Flag := MAP(COUNT(EventTypes(EventType IN ['890']))>0 => 1, 0);
Event: => KrBnk891Flag := MAP(COUNT(EventTypes(EventType IN ['891']))>0 => 1, 0);
Event: => KrBnk892Flag := MAP(COUNT(EventTypes(EventType IN ['892']))>0 => 1, 0);
Event: => KrBnk893Flag := MAP(COUNT(EventTypes(EventType IN ['893']))>0 => 1, 0);

Event: => KrEml500Flag := MAP(COUNT(EventTypes(EventType IN ['500']))>0 => 1, 0);
Event: => KrEml501Flag := MAP(COUNT(EventTypes(EventType IN ['501']))>0 => 1, 0);
Event: => KrEml502Flag := MAP(COUNT(EventTypes(EventType IN ['502']))>0 => 1, 0);
Event: => KrEml590Flag := MAP(COUNT(EventTypes(EventType IN ['590']))>0 => 1, 0);
Event: => KrEml591Flag := MAP(COUNT(EventTypes(EventType IN ['591']))>0 => 1, 0);
Event: => KrEml592Flag := MAP(COUNT(EventTypes(EventType IN ['592']))>0 => 1, 0);
Event: => KrEml593Flag := MAP(COUNT(EventTypes(EventType IN ['593']))>0 => 1, 0);

Event: => KrSsn100Flag := MAP(COUNT(EventTypes(EventType IN ['100']))>0 => 1, 0);
Event: => KrSsn101Flag := MAP(COUNT(EventTypes(EventType IN ['101']))>0 => 1, 0);
Event: => KrSsn103Flag := MAP(COUNT(EventTypes(EventType IN ['103']))>0 => 1, 0);
Event: => KrSsn104Flag := MAP(COUNT(EventTypes(EventType IN ['104']))>0 => 1, 0);
Event: => KrSsn105Flag := MAP(COUNT(EventTypes(EventType IN ['105']))>0 => 1, 0);
Event: => KrSsn190Flag := MAP(COUNT(EventTypes(EventType IN ['190']))>0 => 1, 0);
Event: => KrSsn191Flag := MAP(COUNT(EventTypes(EventType IN ['191']))>0 => 1, 0);
Event: => KrSsn192Flag := MAP(COUNT(EventTypes(EventType IN ['192']))>0 => 1, 0);
Event: => KrSsn193Flag := MAP(COUNT(EventTypes(EventType IN ['193']))>0 => 1, 0);

Event: => KrPhn400Flag := MAP(COUNT(EventTypes(EventType IN ['400']))>0 => 1, 0);
Event: => KrPhn401Flag := MAP(COUNT(EventTypes(EventType IN ['401']))>0 => 1, 0);
Event: => KrPhn402Flag := MAP(COUNT(EventTypes(EventType IN ['402']))>0 => 1, 0);
Event: => KrPhn490Flag := MAP(COUNT(EventTypes(EventType IN ['490']))>0 => 1, 0);
Event: => KrPhn491Flag := MAP(COUNT(EventTypes(EventType IN ['491']))>0 => 1, 0);
Event: => KrPhn492Flag := MAP(COUNT(EventTypes(EventType IN ['492']))>0 => 1, 0);
Event: => KrPhn493Flag := MAP(COUNT(EventTypes(EventType IN ['493']))>0 => 1, 0);

Event: => KrAddr300Flag := MAP(COUNT(EventTypes(EventType IN ['300']))>0 => 1, 0);
Event: => KrAddr301Flag := MAP(COUNT(EventTypes(EventType IN ['301']))>0 => 1, 0);
Event: => KrAddr302Flag := MAP(COUNT(EventTypes(EventType IN ['302']))>0 => 1, 0);
Event: => KrAddr303Flag := MAP(COUNT(EventTypes(EventType IN ['303']))>0 => 1, 0);
Event: => KrAddr390Flag := MAP(COUNT(EventTypes(EventType IN ['390']))>0 => 1, 0);
Event: => KrAddr391Flag := MAP(COUNT(EventTypes(EventType IN ['391']))>0 => 1, 0);
Event: => KrAddr392Flag := MAP(COUNT(EventTypes(EventType IN ['392']))>0 => 1, 0);
Event: => KrAddr393Flag := MAP(COUNT(EventTypes(EventType IN ['393']))>0 => 1, 0);

Event: => KrIp600Flag := MAP(COUNT(EventTypes(EventType IN ['600']))>0 => 1, 0);
Event: => KrIp601Flag := MAP(COUNT(EventTypes(EventType IN ['601']))>0 => 1, 0);
Event: => KrIp602Flag := MAP(COUNT(EventTypes(EventType IN ['602']))>0 => 1, 0);
Event: => KrIp603Flag := MAP(COUNT(EventTypes(EventType IN ['603']))>0 => 1, 0);
Event: => KrIp604Flag := MAP(COUNT(EventTypes(EventType IN ['604']))>0 => 1, 0);
Event: => KrIp605Flag := MAP(COUNT(EventTypes(EventType IN ['605']))>0 => 1, 0);
Event: => KrIp690Flag := MAP(COUNT(EventTypes(EventType IN ['690']))>0 => 1, 0);
Event: => KrIp691Flag := MAP(COUNT(EventTypes(EventType IN ['691']))>0 => 1, 0);
Event: => KrIp692Flag := MAP(COUNT(EventTypes(EventType IN ['692']))>0 => 1, 0);
Event: => KrIp693Flag := MAP(COUNT(EventTypes(EventType IN ['693']))>0 => 1, 0);
Event: => KrIp1000Flag := MAP(COUNT(EventTypes(EventType IN ['1000']))>0 => 1, 0);
Event: => KrIp1001Flag := MAP(COUNT(EventTypes(EventType IN ['1001']))>0 => 1, 0);
Event: => KrIp1090Flag := MAP(COUNT(EventTypes(EventType IN ['1090']))>0 => 1, 0);
Event: => KrIp1091Flag := MAP(COUNT(EventTypes(EventType IN ['1091']))>0 => 1, 0);
Event: => KrIp1092Flag := MAP(COUNT(EventTypes(EventType IN ['1092']))>0 => 1, 0);
Event: => KrIp1093Flag := MAP(COUNT(EventTypes(EventType IN ['1093']))>0 => 1, 0);

Event: => KrId1010Flag := MAP(COUNT(EventTypes(EventType IN ['1010']))>0 => 1, 0);
Event: => KrId2025Flag := MAP(COUNT(EventTypes(EventType IN ['2025']))>0 => 1, 0);

Event: => KrId10000Flag := MAP(COUNT(EventTypes(EventType IN ['10000']))>0 => 1, 0);
Event: => KrId10001Flag := MAP(COUNT(EventTypes(EventType IN ['10001']))>0 => 1, 0);
Event: => KrId10002Flag := MAP(COUNT(EventTypes(EventType IN ['10002']))>0 => 1, 0);
Event: => KrId10003Flag := MAP(COUNT(EventTypes(EventType IN ['10003']))>0 => 1, 0);
Event: => KrId10004Flag := MAP(COUNT(EventTypes(EventType IN ['10004']))>0 => 1, 0);
Event: => KrId10005Flag := MAP(COUNT(EventTypes(EventType IN ['10005']))>0 => 1, 0);
Event: => KrId10006Flag := MAP(COUNT(EventTypes(EventType IN ['10006']))>0 => 1, 0);
Event: => KrId10007Flag := MAP(COUNT(EventTypes(EventType IN ['10007']))>0 => 1, 0);
Event: => KrId11000Flag := MAP(COUNT(EventTypes(EventType IN ['11000']))>0 => 1, 0);
Event: => KrId11001Flag := MAP(COUNT(EventTypes(EventType IN ['11001']))>0 => 1, 0);
Event: => KrId11002Flag := MAP(COUNT(EventTypes(EventType IN ['11002']))>0 => 1, 0);
Event: => KrId11003Flag := MAP(COUNT(EventTypes(EventType IN ['11003']))>0 => 1, 0);
Event: => KrId11004Flag := MAP(COUNT(EventTypes(EventType IN ['11004']))>0 => 1, 0);
Event: => KrId11005Flag := MAP(COUNT(EventTypes(EventType IN ['11005']))>0 => 1, 0);
Event: => KrId11006Flag := MAP(COUNT(EventTypes(EventType IN ['11006']))>0 => 1, 0);
Event: => KrId11007Flag := MAP(COUNT(EventTypes(EventType IN ['11007']))>0 => 1, 0);
Event: => KrId11008Flag := MAP(COUNT(EventTypes(EventType IN ['11008']))>0 => 1, 0);
Event: => KrId11009Flag := MAP(COUNT(EventTypes(EventType IN ['11009']))>0 => 1, 0);
Event: => KrId11010Flag := MAP(COUNT(EventTypes(EventType IN ['11010']))>0 => 1, 0);
Event: => KrId11011Flag := MAP(COUNT(EventTypes(EventType IN ['11011']))>0 => 1, 0);
Event: => KrId11012Flag := MAP(COUNT(EventTypes(EventType IN ['11012']))>0 => 1, 0);
Event: => KrId11013Flag := MAP(COUNT(EventTypes(EventType IN ['11013']))>0 => 1, 0);
Event: => KrId11014Flag := MAP(COUNT(EventTypes(EventType IN ['11014']))>0 => 1, 0);
Event: => KrId11015Flag := MAP(COUNT(EventTypes(EventType IN ['11015']))>0 => 1, 0);
Event: => KrId11016Flag := MAP(COUNT(EventTypes(EventType IN ['11016']))>0 => 1, 0);
Event: => KrId11017Flag := MAP(COUNT(EventTypes(EventType IN ['11017']))>0 => 1, 0);
Event: => KrId11018Flag := MAP(COUNT(EventTypes(EventType IN ['11018']))>0 => 1, 0);
Event: => KrId11019Flag := MAP(COUNT(EventTypes(EventType IN ['11019']))>0 => 1, 0);
Event: => KrId12000Flag := MAP(COUNT(EventTypes(EventType IN ['12000']))>0 => 1, 0);
Event: => KrId12001Flag := MAP(COUNT(EventTypes(EventType IN ['12001']))>0 => 1, 0);
Event: => KrId12002Flag := MAP(COUNT(EventTypes(EventType IN ['12002']))>0 => 1, 0);
Event: => KrId12003Flag := MAP(COUNT(EventTypes(EventType IN ['12003']))>0 => 1, 0);
Event: => KrId12004Flag := MAP(COUNT(EventTypes(EventType IN ['12004']))>0 => 1, 0);
Event: => KrId12006Flag := MAP(COUNT(EventTypes(EventType IN ['12006']))>0 => 1, 0);
Event: => KrId12007Flag := MAP(COUNT(EventTypes(EventType IN ['12007']))>0 => 1, 0);
Event: => KrId13000Flag := MAP(COUNT(EventTypes(EventType IN ['13000']))>0 => 1, 0);
Event: => KrId13001Flag := MAP(COUNT(EventTypes(EventType IN ['13001']))>0 => 1, 0);
Event: => KrId13002Flag := MAP(COUNT(EventTypes(EventType IN ['13002']))>0 => 1, 0);
Event: => KrId13003Flag := MAP(COUNT(EventTypes(EventType IN ['13003']))>0 => 1, 0);
Event: => KrId13005Flag := MAP(COUNT(EventTypes(EventType IN ['13005']))>0 => 1, 0);
Event: => KrId13006Flag := MAP(COUNT(EventTypes(EventType IN ['13006']))>0 => 1, 0);
Event: => KrId13007Flag := MAP(COUNT(EventTypes(EventType IN ['13007']))>0 => 1, 0);
Event: => KrId14000Flag := MAP(COUNT(EventTypes(EventType IN ['14000']))>0 => 1, 0);
Event: => KrId14001Flag := MAP(COUNT(EventTypes(EventType IN ['14001']))>0 => 1, 0);
Event: => KrId14900Flag := MAP(COUNT(EventTypes(EventType IN ['14900']))>0 => 1, 0);
Event: => KrId14901Flag := MAP(COUNT(EventTypes(EventType IN ['14901']))>0 => 1, 0);
Event: => KrId14902Flag := MAP(COUNT(EventTypes(EventType IN ['14902']))>0 => 1, 0);
Event: => KrId14903Flag := MAP(COUNT(EventTypes(EventType IN ['14903']))>0 => 1, 0);

Event: => IpNotUs := MAP(UPCASE(TRIM(edgecountry)) IN ['USA','','0'] => 0, 1); // did the reverse because KEL was throwing an error.
Event: => IpVpn := MAP(UPCASE(proxydescription) = 'VPN' => 1, 0);

Event: => IpTor := MAP(UPCASE(proxydescription) IN ['TOR EXIT','TOR RELAY'] /*OR UPCASE(proxytype) = 'ANONYMOUS'*/ => 1, 0);
Event: => IpHighRiskCity := MAP(rCustomer.JurisdictionState != 'FL' AND UPCASE(edgecity) IN ['MIAMI'] => 1, 0);
Event: => IpHosted := MAP(UPCASE(proxytype) = 'HOSTING' AND NOT UPCASE(proxydescription) IN ['CLOUD-SECURITY','CLOUD'] => 1, 0);

//attributes from Nicole D. 


Event: => AgencyUid := CustomerId;
Event: => AgencyProgType := IndustryType;
Event: => AgencyProgDesc := ind_type_description;
Event: => AgencyProgJurSt := rCustomer.JurisdictionState;

Event: => T_SrcAgencyUid := rSourceCustomer.CustomerId; 
Event: => T_SrcAgencyProgType := rSourceCustomer.IndustryType; 

Event: => T_ActUid := RecordId;
Event: => T_ActDtEcho := EventDate; 

Event: => T_SrcType := MAP(rin_source <= 0 OR rin_source > 15 => -99997,rin_source); 
Event: => T_SrcDesc := MAP(T_SrcType=-99997 => -99997, rin_sourcelabel);

Event: => T_SrcClassType := MAP(T_SrcType = -99997 => -99997,
																T_SrcType IN [6,14] => 0, //Agency Updates
																T_SrcType IN [4,8,11] => 1, //Additional Activity
																T_SrcType IN [3,7] => 2, //Safe List
																T_SrcType IN [2,5] => 3, //Known Risk
																4); //Identity Activity


Event: => T_PersonUidEcho	:= MAP(LexId:Null OR LexId = 0 => -99999, LexId);
																	
														
Event: => T_InpClnTitleEcho := MAP(Title = '' OR Title:Null => -99999, Title);
Event: => T_InpClnFullNmEcho := MAP(T_FirstNmPopFlag=0 OR T_LastNmPopFlag=0 => -99999, 
                                    T_InpClnMiddleNmEcho=-99999 => TRIM(LastName) + ', ' + TRIM(FirstName),                       
																		TRIM(LastName) + ', ' + TRIM(FirstName) + ' ' + TRIM(MiddleName));
Event: => T_InpClnFirstNmEcho := MAP(FirstName ='' OR FirstName:Null => -99999, FirstName);
Event: => T_InpClnMiddleNmEcho := MAP(MiddleName = '' OR MiddleName:Null => -99999, MiddleName);
Event: => T_InpClnLastNmEcho := MAP(LastName = '' OR LastName:Null => -99999, LastName);
Event: => T_InpClnNmSuffixEcho := MAP(NameSuffix = '' OR NameSuffix:Null => -99999, NameSuffix);
																	 
Event: => T_InpClnAddrPrimRangeEcho := MAP(PrimaryRange = '' OR PrimaryRange:Null => -99999, PrimaryRange);
Event: => T_InpClnAddrPreDirEcho := MAP(Predirectional = '' OR Predirectional:Null => -99999, Predirectional);
Event: => T_InpClnAddrPrimNmEcho := MAP(PrimaryName = '' OR PrimaryName:Null OR Location = 0 => -99999, PrimaryName);
Event: => T_InpClnAddrSuffixEcho := MAP(Suffix = '' OR Suffix:Null => -99999, Suffix);
Event: => T_InpClnAddrPostDirEcho := MAP(Postdirectional = '' OR Postdirectional:Null => -99999, Postdirectional);
Event: => T_InpClnAddrUnitDesigEcho := MAP(UnitDesignation = '' OR UnitDesignation:Null => -99999, UnitDesignation);
Event: => T_InpClnAddrSecRangeEcho := MAP(SecondaryRange = '' OR SecondaryRange:Null => -99999, SecondaryRange);
Event: => T_InpClnAddrCityEcho := MAP(PostalCity = '' OR PostalCity:Null => -99999, PostalCity);
Event: => T_InpClnAddrStEcho := MAP(State = '' OR State:Null => -99999, State);
Event: => T_InpClnAddrZip5Echo := MAP(Zip = '' OR Zip:Null OR Zip=0 => -99999, Zip);
Event: => T_InpClnAddrZip4Echo := MAP(Zip4 = '' OR Zip4:Null OR Zip=0 => -99999, Zip4);
Event: => T_InpClnAddrLatEcho := MAP(Latitude:Null OR Latitude=0=> -99999, Latitude);
Event: => T_InpClnAddrLongEcho := MAP(Longitude:Null OR Longitude=0 => -99999, Longitude);
Event: => T_InpClnAddrCountyEcho := MAP(fips_county='' OR fips_county:Null OR fips_state='' OR fips_state:Null => -99999, fips_state+fips_county);
Event: => T_InpClnAddrGeoBlkEcho := MAP(GeoBlock = '' OR GeoBlock:Null OR GeoBlock=0 => -99999, GeoBlock);

Event: => T_InpClnSsnEcho := MAP(Ssn = '' OR Ssn:Null OR Ssn = '000000000' => -99999, TRIM(Ssn));
Event: => T_InpClnDobEcho := MAP(DateOfBirth:Null => -99999, INTEGER(DateOfBirth));
Event: => T_InpClnDlEcho := MAP(LicenseNumber = '' OR rDriversLicense.LicenseNumber:Null => -99999, rDriversLicense.LicenseNumber);
Event: => T_InpClnDlStEcho := MAP(LicenseState = '' OR LicenseState:Null => -99999, LicenseState);
Event: => T_InpClnEmailEcho := MAP(EmailAddress = '' OR EmailAddress:Null => -99999, EmailAddress);
Event: => T_InpClnBnkAcctEcho := MAP(AccountNumber = '' OR AccountNumber:Null => -99999, AccountNumber);
Event: => T_InpClnBnkAcctRtgEcho := MAP(RoutingNumber = '' OR RoutingNumber:Null => -99999, RoutingNumber);
Event: => T_InpClnIpAddrEcho := MAP(IpAddress = '' OR IpAddress:Null => -99999, IpAddress);
Event: => T_InpClnPhnEcho := MAP(PhoneNumber = '' OR PhoneNumber:Null OR PhoneNumber='0000000000' OR STARTSWITH(PhoneNumber,'0') => -99999, TRIM(PhoneNumber));

Event: => T1_LexIdPopFlag := MAP(T_PersonUidEcho = -99999 => 0,
																 NoLexId = 1 => 0, 1);
Event: => T1_RinIdPopFlag := MAP(T_PersonUidEcho = -99999 => 0,
																 NoLexId = 1 => 1, 0);
																 

Event: => T18_IsIpMetaHitFlag := MAP(T_InpClnIpAddrEcho = -99999 => -99999, 
                                     T_InpClnIpAddrEcho != -99999 AND iprngbeg = '' AND iprngend = '' => 0,
																		 1);										 
Event: => T18_IpAddrCity := MAP(T_InpClnIpAddrEcho=-99999 => -99999,
																T18_IsIpMetaHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																edgecity = '' OR edgecity:Null => -99997,
																edgecity);
Event: => T18_IpAddrCountry := MAP(T_InpClnIpAddrEcho=-99999 => -99999,
																T18_IsIpMetaHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																edgecountry = '' OR edgecountry:Null OR edgecountry='0' => -99997,
																edgecountry);
Event: => T18_IpAddrRegion := MAP(T_InpClnIpAddrEcho=-99999 => -99999,
																T18_IsIpMetaHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																edgeregion = '' OR edgeregion:Null => -99997,
																edgeregion);
Event: => T18_IpAddrDomain := MAP(T_InpClnIpAddrEcho=-99999 => -99999,
																T18_IsIpMetaHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																domainname = '' OR domainname:Null => -99997,
																domainname);
Event: => T18_IpAddrIspNm := MAP(T_InpClnIpAddrEcho=-99999 => -99999,
																T18_IsIpMetaHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																ispname = '' OR ispname:Null => -99997,
															  ispname);
Event: => T18_IpAddrLocType := MAP(T_InpClnIpAddrEcho=-99999 => -99999,
																T18_IsIpMetaHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																homebiztype = '' OR homebiztype:Null => -99997,
															  homebiztype);
Event: => T18_IpAddrProxyType := MAP(T_InpClnIpAddrEcho=-99999 => -99999,
																T18_IsIpMetaHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																proxytype = '' OR proxytype:Null => -99997,
															  proxytype);
Event: => T18_IpAddrProxyDesc := MAP(T_InpClnIpAddrEcho=-99999 => -99999,
																T18_IsIpMetaHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																proxydescription = '' OR proxydescription:Null => -99997,
															  proxydescription);
Event: => T18_IpAddrIsIspFlag := MAP(T_InpClnIpAddrEcho=-99999 => -99999,
																T18_IsIpMetaHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																isanisp:Null => -99997,
															  isanisp='YES' => 1,
																isanisp='NO' => 0);
Event: => T18_IpAddrAsnCompNm := MAP(T_InpClnIpAddrEcho=-99999 => -99999,
															T18_IsIpMetaHitFlag < 1 OR T_SrcClassType < 4 => -99998,
															asnname = '' OR asnname:Null => -99997,
															asnname);
Event: => T18_IpAddrAsn := MAP(T_InpClnIpAddrEcho=-99999 => -99999,
																T18_IsIpMetaHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																asn:Null OR asn=0 => -99997,
															  asn);
Event: => T18_IpAddrCompNm := MAP(T_InpClnIpAddrEcho=-99999 => -99999,
																T18_IsIpMetaHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																companyname = '' OR companyname:Null => -99997,
															  companyname);
Event: => T18_IpAddrOrgNm := MAP(T_InpClnIpAddrEcho=-99999 => -99999,
																T18_IsIpMetaHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																organizationname = '' OR organizationname:Null => -99997,
															  organizationname);
																
Event: => T18_IpAddrHostedFlag := MAP(T_InpClnIpAddrEcho=-99999 => -99999,
																T18_IsIpMetaHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																T18_IpAddrProxyType<1 OR T18_IpAddrProxyDesc<1 => -99997,
															  T18_IpAddrProxyType='HOSTING' AND (T18_IpAddrProxyDesc != 'CLOUD-SECURITY' AND T18_IpAddrProxyDesc != 'CLOUD') => 1, //CHECKME - double check this logic make sure it matches reqs
																0);
Event: => T18_IpAddrVpnFlag := MAP(T_InpClnIpAddrEcho=-99999 => -99999,
																T18_IsIpMetaHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																T18_IpAddrProxyDesc < 1 => -99997,
															  T18_IpAddrProxyDesc = 'VPN' => 1,
																0);
Event: => T18_IpAddrTorNodeFlag := MAP(T_InpClnIpAddrEcho=-99999 => -99999,
																T18_IsIpMetaHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																T18_IpAddrProxyDesc < 1 => -99997,
																T18_IpAddrProxyDesc IN ['TOR EXIT','TOR RELAY'] => 1,
																0);
Event: => T18_IpAddrLocNonUsFlag := MAP(T_InpClnIpAddrEcho=-99999 => -99999,
																T18_IsIpMetaHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																T18_IpAddrCountry < 1 => -99997,
																T18_IpAddrCountry != 'USA' => 1,
																0);
Event: => T18_IpAddrLocMiamiFlag := MAP(T_InpClnIpAddrEcho=-99999 => -99999,
																T18_IsIpMetaHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																T18_IpAddrCity < 1 => -99997,
																AgencyProgJurSt != 'FL' AND T18_IpAddrCity = 'MIAMI' => 1,
																0);
	
Event: => T19_BnkAcctPopFlag := MAP(T_InpClnBnkAcctEcho IN ['-99999','-99998'] OR T_InpClnBnkAcctRtgEcho IN ['-99999','-99998'] => 0,
																    1);
Event: => T19_IsBnkAppHitFlag := MAP(T19_BnkAcctPopFlag = 0 => -99999, 
																		 BankHit = 1 => 1, 0); 
Event: => T19_BnkAcctBnkNm := MAP(T19_BnkAcctPopFlag=0 => -99999,
																	T19_IsBnkAppHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																	FullBankname); 
Event: => T19_BnkAcctHrPrePdRtgFlag := MAP(T19_BnkAcctPopFlag = 0 => -99999,
																					 T_SrcClassType < 4 => -99998,
																					 T_InpClnBnkAcctRtgEcho IN ['031101169','124071889','124303120','073972181','084003997','114924742','031101169','063115194'] => 1,
																					 0);
																					 
Event: => T17_EmailPopFlag := MAP(WORD(EmailAddress,1,'@') = '' OR WORD(EmailAddress,2,'@') = '' OR T_InpClnEmailEcho = -99999  => 0, 
																	1);
Event: => T17_EmailDomain := MAP(T17_EmailPopFlag = 0 => -99999,
																 T_SrcClassType < 4 => -99998,
																 WORD(EmailAddress,2,'@')); 
Event: => T17_EmailDomainDispFlag := MAP(T17_EmailPopFlag = 0 => -99999,
																				 T_SrcClassType < 4 => -99998,
																				 rEmail.isdisposableemail);

Event: => T9_AddrPopFlag := MAP((T_InpClnAddrPrimNmEcho != -99999 AND T_InpClnAddrCityEcho != -99999 AND T_InpClnAddrStEcho != -99999) OR (T_InpClnAddrPrimNmEcho != -99999 AND T_InpClnAddrZip5Echo != -99999) => 1,0);
Event: => T9_AddrType := MAP(T9_AddrPopFlag < 1 => -99999,
														 Location.TypeCode = '' OR Location.TypeCode:Null => -99997,
														 Location.TypeCode);
Event: => T9_AddrStatus := MAP(T9_AddrPopFlag < 1 => -99999,
															 Location.ACECleanerErrorCode = '' OR Location.ACECleanerErrorCode:Null => -99997,
															 Location.ACECleanerErrorCode);

Event: => T16_PhnPopFlag := MAP(T_InpClnPhnEcho IN ['-99999','-99998','-99997'] OR LENGTH(T_InpClnPhnEcho) < 10 => 0, 1);
Event: => T15_SsnPopFlag := MAP(T_InpClnSsnEcho <= -99997 OR LENGTH(T_InpClnSsnEcho) < 9 => 0, 1);
Event: => T20_DlPopFlag := MAP(T_InpClnDlEcho IN ['-99999','-99998','-99997'] OR T_InpClnDlStEcho IN ['-99999','-99998','-99997'] => 0, 1);
Event: => T18_IpAddrPopFlag := MAP(T_InpClnIpAddrEcho IN ['-99999','-99998','-99997'] => 0, 1);


Event: => T_InAgencyFlag := MAP(rSourceCustomer != rCustomer => 0, 1);

Event: => T_StatusActionDesc := MAP(T_SrcClassType=1 OR T_SrcClassType>3 => -99998,
                                    T_SrcClassType=3 => 'Added to Known Risk',
																		T_SrcClassType=2 => 'Added to Safe List',
																		T_SrcClassType=0 => 'Updated Status');

Event: => T_EvtType1StatusCodeEcho := MAP(T_SrcClassType!=2 AND T_SrcClassType!=3 AND T_SrcClassType!=0 => -99998,
																			event_type_1 = '' OR event_type_1:Null => -99997,
																			event_type_1);
Event: => T_EvtType2StatusCodeEcho := MAP(T_SrcClassType!=2 AND T_SrcClassType!=3 AND T_SrcClassType!=0 => -99998,
																			event_type_2 = '' OR event_type_2:Null => -99997,
																			event_type_2);
Event: => T_EvtType3StatusCodeEcho := MAP(T_SrcClassType!=2 AND T_SrcClassType!=3 AND T_SrcClassType!=0 => -99998,
																			event_type_3 = '' OR event_type_3:Null => -99997,
																			event_type_3);
																			
Event: => T_NameStatusCodeEcho := MAP(T_SrcClassType!=2 AND T_SrcClassType!=3 AND T_SrcClassType!=0 => -99998,
																name_risk_code = '' OR name_risk_code:Null => -99997,
																name_risk_code);
Event: => T_IdStatusCodeEcho := MAP(T_SrcClassType!=2 AND T_SrcClassType!=3 AND T_SrcClassType!=0 => -99998,
																identity_risk_code = '' OR identity_risk_code:Null => -99997,
																identity_risk_code);
Event: => T_SsnStatusCodeEcho := MAP(T_SrcClassType!=2 AND T_SrcClassType!=3 AND T_SrcClassType!=0 => -99998,
																ssn_risk_code = '' OR ssn_risk_code:Null => -99997,
																ssn_risk_code);																
Event: => T_DlStatusCodeEcho := MAP(T_SrcClassType!=2 AND T_SrcClassType!=3 AND T_SrcClassType!=0 => -99998,
																drivers_license_risk_code = '' OR drivers_license_risk_code:Null => -99997,
																drivers_license_risk_code);
Event: => T_AddrStatusCodeEcho := MAP(T_SrcClassType!=2 AND T_SrcClassType!=3 AND T_SrcClassType!=0 => -99998,
																physical_address_risk_code = '' OR physical_address_risk_code:Null => -99997,
																physical_address_risk_code);
Event: => T_PhnStatusCodeEcho := MAP(T_SrcClassType!=2 AND T_SrcClassType!=3 AND T_SrcClassType!=0 => -99998,
																phone_risk_code = '' OR phone_risk_code:Null => -99997,
																phone_risk_code);
Event: => T_EmailStatusCodeEcho := MAP(T_SrcClassType!=2 AND T_SrcClassType!=3 AND T_SrcClassType!=0 => -99998,
																email_address_risk_code = '' OR email_address_risk_code:Null => -99997,
																email_address_risk_code);
Event: => T_IpAddrStatusCodeEcho := MAP(T_SrcClassType!=2 AND T_SrcClassType!=3 AND T_SrcClassType!=0 => -99998,
																ip_address_fraud_code = '' OR ip_address_fraud_code:Null => -99997,
																ip_address_fraud_code);
Event: => T_BnkAcctStatusCodeEcho := MAP(T_SrcClassType!=2 AND T_SrcClassType!=3 AND T_SrcClassType!=0 => -99998,
																bank_account_1_risk_code = '' OR bank_account_1_risk_code:Null => -99997,
																bank_account_1_risk_code);



Event: => T15_SsnIsKrFlag := MAP(T15_SsnPopFlag = 0 => -99999,
																 T_SrcClassType != 3 => -99998,
																 T_SsnStatusCodeEcho = -99997 => 0,
																 T_SsnStatusCodeEcho IN ['100','101','190','191','192','193'] => 1, -99997);
																 
Event: => T20_DlIsKrFlag := MAP(T20_DlPopFlag = 0 => -99999,
																T_SrcClassType != 3 => -99998,
																T_DlStatusCodeEcho = -99997 => 0,
																T_DlStatusCodeEcho IN ['200','201','202','203','204','290','291','292','293'] => 1, -99997);

Event: => T9_AddrIsKrFlag := MAP(T9_AddrPopFlag = 0 => -99999,
																 T_SrcClassType !=3 => -99998,
																 T_AddrStatusCodeEcho = -99997 => 0,
																 T_AddrStatusCodeEcho IN ['300','301','302','303','390','391','392','393'] => 1, -99997);
																
Event: => T16_PhnIsKrFlag := MAP(T16_PhnPopFlag = 0 => -99999,
																 T_SrcClassType !=3 => -99998,
																 T_PhnStatusCodeEcho = -99997 => 0,
																 T_PhnStatusCodeEcho IN ['400','401','402','490','491','492','493'] => 1, -99997);
																 
Event: => T17_EmailIsKrFlag := MAP(T17_EmailPopFlag = 0 => -99999,
																 T_SrcClassType != 3 => -99998,
																 T_EmailStatusCodeEcho = -99997 => 0,
																 T_EmailStatusCodeEcho IN ['500','501','502','590','591','592','593'] => 1, -99997);
																 
Event: => T18_IpAddrIsKrFlag := MAP(T18_IpAddrPopFlag = 0 => -99999,
																 T_SrcClassType != 3 => -99998,
																 T_IpAddrStatusCodeEcho = -99997 => 0,
																 T_IpAddrStatusCodeEcho IN ['600','601','602','603','604','605','1000','1001','1090','1091','1092','1093'] => 1, -99997);

Event: => T19_BnkAcctIsKrFlag := MAP(T19_BnkAcctPopFlag = 0 => -99999,
																 T_SrcClassType !=3 => -99998,
																 T_BnkAcctStatusCodeEcho = -99997 => 0,
																 T_BnkAcctStatusCodeEcho IN ['800','801','802','890','891','892','893'] => 1, -99997);

Event: => IdKrCodeFlag := IF(T_EvtType1StatusCodeEcho IN ['10000','10001','10002','10003','10004','10005','10006','10007',
																									'11000','11001','11002','11003','11004','11005','11006','11007','11008','11009','11010','11011','11012','11013','11014','11015','11016','11017','11018','11019',
																									'12000','12001','12002','12003','12004','12006','12007',
																									'13000','13001','13002','13003','13005','13006','13007',
																									'14900','14901','14902','14903']
																 OR T_EvtType2StatusCodeEcho IN ['10000','10001','10002','10003','10004','10005','10006','10007',
																									'11000','11001','11002','11003','11004','11005','11006','11007','11008','11009','11010','11011','11012','11013','11014','11015','11016','11017','11018','11019',
																									'12000','12001','12002','12003','12004','12006','12007',
																									'13000','13001','13002','13003','13005','13006','13007',
																									'14900','14901','14902','14903']
																 OR T_EvtType3StatusCodeEcho IN ['10000','10001','10002','10003','10004','10005','10006','10007',
																									'11000','11001','11002','11003','11004','11005','11006','11007','11008','11009','11010','11011','11012','11013','11014','11015','11016','11017','11018','11019',
																									'12000','12001','12002','12003','12004','12006','12007',
																									'13000','13001','13002','13003','13005','13006','13007',
																									'14900','14901','14902','14903'], 1,0);
																									
Event: => T1_IdIsKrGenFrdFlag := MAP(T1_LexIdPopFlag = 0 AND T1_RinIdPopFlag = 0 => -99999,
																 T_SrcClassType != 3 => -99998,
																 IdKrCodeFlag=0 => -99997,
																 T_EvtType1StatusCodeEcho IN ['10005','10006','10007',
																									'11000','11001','11002','11004','11006','11007','11008','11009','11010','11011','11012','11013','11014','11015','11016',
																									'12000','12001','12002','12003','12004','12006','12007',
																									'13000','13001','13002','13003','13005','13006','13007']
																 OR T_EvtType2StatusCodeEcho IN ['10005','10006','10007',
																									'11000','11001','11002','11004','11006','11007','11008','11009','11010','11011','11012','11013','11014','11015','11016',
																									'12000','12001','12002','12003','12004','12006','12007',
																									'13000','13001','13002','13003','13005','13006','13007']
																 OR T_EvtType3StatusCodeEcho IN ['10005','10006','10007',
																									'11000','11001','11002','11004','11006','11007','11008','11009','11010','11011','11012','11013','11014','11015','11016',
																									'12000','12001','12002','12003','12004','12006','12007',
																									'13000','13001','13002','13003','13005','13006','13007'] => 1, 0);
Event: => T1_IdIsKrStolIdFlag := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
																     T_SrcClassType != 3 => -99998,
																     IdKrCodeFlag=0 => -99997,
																     T_EvtType1StatusCodeEcho IN ['10000','10001','10004']
																		 OR T_EvtType2StatusCodeEcho IN ['10000','10001','10004']
																		 OR T_EvtType3StatusCodeEcho IN ['10000','10001','10004'] => 1, 0);
Event: => T1_IdIsKrAppFrdFlag := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
																     T_SrcClassType != 3 => -99998,
																     IdKrCodeFlag=0 => -99997,
																     T_EvtType1StatusCodeEcho IN ['10002','10003','11003','11005','11017','11018','11019']
																		 OR T_EvtType2StatusCodeEcho IN ['10002','10003','11003','11005','11017','11018','11019']
																		 OR T_EvtType3StatusCodeEcho IN ['10002','10003','11003','11005','11017','11018','11019'] => 1, 0);
Event: => T1_IdIsKrOthFrdFlag := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
																     T_SrcClassType != 3 => -99998,
																     IdKrCodeFlag=0 => -99997,
																     T_EvtType1StatusCodeEcho IN ['14900','14901','14902','14903']
																		 OR T_EvtType2StatusCodeEcho IN ['14900','14901','14902','14903']
																		 OR T_EvtType3StatusCodeEcho IN ['14900','14901','14902','14903'] => 1, 0);
Event: => T1_IdIsKrFlag := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
																     T_SrcClassType != 3 => -99998,
																     IdKrCodeFlag=0 => -99997,
																     T1_IdIsKrGenFrdFlag=1 OR T1_IdIsKrStolIdFlag=1 OR T1_IdIsKrAppFrdFlag=1 OR T1_IdIsKrOthFrdFlag=1 => 1, 0);

Event: => T_FirstNmPopFlag := MAP(T_InpClnFirstNmEcho IN ['-99999','-99998','-99997'] => 0, 1);
Event: => T_LastNmPopFlag := MAP(T_InpClnLastNmEcho IN ['-99999','-99998','-99997'] => 0, 1);
Event: => T_DobPopFlag := MAP(T_InpClnDobEcho < -99997 => 0, 1);

//Current Profile flag attrs joe


Event: => P1_AotActCntEv := Subject.AotActCntEv;
Event: => P1_AotSrc1ActCntEv := Subject.AotSrc1ActCntEv;
Event: => P1_AotSrc1ActOnlyFlag := Subject.AotSrc1ActOnlyFlag;
Event: => P1_AotIdCurrProfFlag := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
																			P1_AotSrc1ActOnlyFlag => -99998,
																			T_SrcClassType < 2 => -99997,
																			IdIsLastEventId);

Event: => P9_AotActCntEv := Location.AotActCntEv;
Event: => P9_AotSrc1ActCntEv := Location.AotSrc1ActCntEv;
Event: => P9_AotSrc1ActOnlyFlag := Location.AotSrc1ActOnlyFlag;
Event: => P9_AotAddrCurrProfFlag := MAP(T9_AddrPopFlag=0 => -99999,
																			P9_AotSrc1ActOnlyFlag => -99998,
																			T_SrcClassType < 2 => -99997,
																			AddrIsLastEventId);                                     
                                      
Event: => P15_AotActCntEv := rSsn.AotActCntEv;
Event: => P15_AotSrc1ActCntEv := rSsn.AotSrc1ActCntEv;
Event: => P15_AotSrc1ActOnlyFlag := rSsn.AotSrc1ActOnlyFlag;
Event: => P15_AotSsnCurrProfFlag := MAP(T15_SsnPopFlag=0 => -99999,
																			P1_AotSrc1ActOnlyFlag => -99998,
																			T_SrcClassType < 2 => -99997,
																			SsnIsLastEventId);
 
Event: => P20_AotActCntEv := rDriversLicense.AotActCntEv;
Event: => P20_AotSrc1ActCntEv := rDriversLicense.AotSrc1ActCntEv;
Event: => P20_AotSrc1ActOnlyFlag := rDriversLicense.AotSrc1ActOnlyFlag; 
Event: => P20_AotDlCurrProfFlag := MAP(T20_DlPopFlag=0 => -99999,
																			P20_AotSrc1ActOnlyFlag => -99998,
																			T_SrcClassType < 2 => -99997,
																			DlIsLastEventId);
                                      
Event: => P16_AotActCntEv := rPhone.AotActCntEv;
Event: => P16_AotSrc1ActCntEv := rPhone.AotSrc1ActCntEv;
Event: => P16_AotSrc1ActOnlyFlag := rPhone.AotSrc1ActOnlyFlag; 
Event: => P16_AotPhnCurrProfFlag := MAP(T16_PhnPopFlag=0 => -99999,
																			P16_AotSrc1ActOnlyFlag => -99998,
																			T_SrcClassType < 2 => -99997,
																			PhIsLastEventId);
                                      
Event: => P17_AotActCntEv := rEmail.AotActCntEv;
Event: => P17_AotSrc1ActCntEv := rEmail.AotSrc1ActCntEv;
Event: => P17_AotSrc1ActOnlyFlag := rEmail.AotSrc1ActOnlyFlag;                                       
Event: => P17_AotEmailCurrProfFlag := MAP(T17_EmailPopFlag=0 => -99999,
																			P17_AotSrc1ActOnlyFlag => -99998,
																			T_SrcClassType < 2 => -99997,
																			EmlIsLastEventId);

Event: => P18_AotActCntEv := rInternetProtocol.AotActCntEv;
Event: => P18_AotSrc1ActCntEv := rInternetProtocol.AotSrc1ActCntEv;
Event: => P18_AotSrc1ActOnlyFlag := rInternetProtocol.AotSrc1ActOnlyFlag;                                         
Event: => P18_AotIpAddrCurrProfFlag := MAP(T18_IpAddrPopFlag=0 => -99999,
																			P18_AotSrc1ActOnlyFlag => -99998,
																			T_SrcClassType < 2 => -99997,
																			IpIsLastEventId);

Event: => P19_AotActCntEv := rBankAccount.AotActCntEv;
Event: => P19_AotSrc1ActCntEv := rBankAccount.AotSrc1ActCntEv;
Event: => P19_AotSrc1ActOnlyFlag := rBankAccount.AotSrc1ActOnlyFlag;                                       
Event: => P19_AotBnkAcctCurrProfFlag := MAP(T19_BnkAcctPopFlag=0 => -99999,
																			P19_AotSrc1ActOnlyFlag => -99998,
																			T_SrcClassType < 2 => -99997,
																			BnkIsLastEventId);
//ID KR Attrs
Event: => P1_AotIdKrActCntEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
																		T_SrcClassType < 2 => -99998,
																		ALL(PersonEvent.Transaction,T1_IdIsKrFlag=-99997) => -99997,
																		Subject.AotIdKrActCntEv);
Event: => P1_AotIdKrActFlagEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
																		T_SrcClassType < 2 => -99998,
																		P1_AotIdKrActCntEv=-99997 => -99997,
																		P1_AotIdKrActCntEv>0 => 1, 0);
Event: => P1_AotIdKrActShrdCntEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
																		T_SrcClassType < 2 => -99998,
																		ALL(PersonEvent.Transaction,T1_IdIsKrFlag=-99997) => -99997,
																		Subject.AotIdKrActShrdCntEv);
Event: => P1_AotIdKrActShrdFlagEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
																		 T_SrcClassType < 2 => -99998,
																		 P1_AotIdKrActShrdCntEv = -99997 => -99997,
																		 P1_AotIdKrActShrdCntEv>0 => 1, 0);
Event: => P1_AotIdKrActOldDtEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
																		  T_SrcClassType <2 OR P1_AotIdKrActFlagEv=0 => -99998,
																			ALL(PersonEvent.Transaction,T1_IdIsKrFlag=-99997) => -99997,
																			INTEGER(Subject.AotIdKrActOldDtEv));
Event: => P1_AotIdKrActNewDtEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
																		  T_SrcClassType <2 OR P1_AotIdKrActFlagEv=0 => -99998,
																			ALL(PersonEvent.Transaction,T1_IdIsKrFlag=-99997) => -99997,
																			INTEGER(Subject.AotIdKrActNewDtEv));
Event: => P1_AotIdKrActShrdOldDtEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
																		  T_SrcClassType <2 OR P1_AotIdKrActShrdFlagEv=0 => -99998,
																			ALL(PersonEvent.Transaction,T1_IdIsKrFlag=-99997) => -99997,																			
																			INTEGER(Subject.AotIdKrActShrdOldDtEv));
Event: => P1_AotIdKrActShrdNewDtEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
																		  T_SrcClassType <2 OR P1_AotIdKrActShrdFlagEv=0 => -99998,
																			ALL(PersonEvent.Transaction,T1_IdIsKrFlag=-99997) => -99997,
																			INTEGER(Subject.AotIdKrActShrdNewDtEv));
//ID KR App Fraud Attrs
Event: => P1_AotIdKrAppFrdActCntEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
																		  T_SrcClassType <2 => -99998,
																			ALL(PersonEvent.Transaction,T1_IdIsKrAppFrdFlag=-99997) => -99997,
																			Subject.AotIdKrAppFrdActCntEv);																	
Event: => P1_AotIdKrAppFrdActFlagEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
																		   T_SrcClassType <2 => -99998,
																			 P1_AotIdKrAppFrdActCntEv=-99997 => -99997,
																			 P1_AotIdKrAppFrdActCntEv>0 => 1, 0);
Event: => P1_AotIdKrAppFrdActShrdCntEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
																		      T_SrcClassType <2 => -99998,
																			    ALL(PersonEvent.Transaction,T1_IdIsKrAppFrdFlag=-99997) => -99997,
																			    Subject.AotIdKrAppFrdActShrdCntEv);
Event: => P1_AotIdKrAppFrdActShrdFlagEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
																		   T_SrcClassType <2 => -99998,
																			 P1_AotIdKrAppFrdActShrdCntEv=-99997 => -99997,
																			 P1_AotIdKrAppFrdActShrdCntEv>0 => 1, 0);
Event: => P1_AotIdKrAppFrdActOldDtEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
																		    T_SrcClassType <2 OR P1_AotIdKrActFlagEv=0 => -99998,
																		    ALL(PersonEvent.Transaction,T1_IdIsKrAppFrdFlag=-99997) => -99997,
																				INTEGER(Subject.AotIdKrAppFrdActOldDtEv));
Event: => P1_AotIdKrAppFrdActNewDtEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
																		    T_SrcClassType <2 OR P1_AotIdKrActFlagEv=0 => -99998,
																		    ALL(PersonEvent.Transaction,T1_IdIsKrAppFrdFlag=-99997) => -99997,
																				INTEGER(Subject.AotIdKrAppFrdActNewDtEv));
Event: => P1_AotIdKrAppFrdActShrdOldDtEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
																		    T_SrcClassType <2 OR P1_AotIdKrActShrdFlagEv=0 => -99998,
																		    ALL(PersonEvent.Transaction,T1_IdIsKrAppFrdFlag=-99997) => -99997,
																				INTEGER(Subject.AotIdKrAppFrdActShrdOldDtEv));
Event: => P1_AotIdKrAppFrdActShrdNewDtEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
																		    T_SrcClassType <2 OR P1_AotIdKrActShrdFlagEv=0 => -99998,
																		    ALL(PersonEvent.Transaction,T1_IdIsKrAppFrdFlag=-99997) => -99997,
																				INTEGER(Subject.AotIdKrAppFrdActShrdNewDtEv));	
//ID KR General Fraud Attrs
Event: => P1_AotIdKrGenFrdActCntEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
																		    T_SrcClassType <2 => -99998,
																		    ALL(PersonEvent.Transaction,T1_IdIsKrGenFrdFlag=-99997) => -99997,
																				Subject.AotIdKrGenFrdActCntEv);				
Event: => P1_AotIdKrGenFrdActFlagEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
																		       T_SrcClassType <2 => -99998,
																				   P1_AotIdKrGenFrdActCntEv = -99997 => -99997,
																					 P1_AotIdKrGenFrdActCntEv>0 => 1, 0);
Event: => P1_AotIdKrGenFrdActShrdCntEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
																		    T_SrcClassType <2 => -99998,
																		    ALL(PersonEvent.Transaction,T1_IdIsKrGenFrdFlag=-99997) => -99997,
																				Subject.AotIdKrGenFrdActShrdCntEv);	
Event: => P1_AotIdKrGenFrdActShrdFlagEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
																		       T_SrcClassType <2 => -99998,
																				   P1_AotIdKrGenFrdActShrdCntEv = -99997 => -99997,
																					 P1_AotIdKrGenFrdActShrdCntEv>0 => 1, 0);
Event: => P1_AotIdKrGenFrdActOldDtEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
																		        T_SrcClassType <2 OR P1_AotIdKrGenFrdActFlagEv=0 => -99998,
																						ALL(PersonEvent.Transaction, T1_IdIsKrGenFrdFlag=-99997) => -99997,
																						INTEGER(Subject.AotIdKrGenFrdActOldDtEv));
Event: => P1_AotIdKrGenFrdActNewDtEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
																		            T_SrcClassType <2 OR P1_AotIdKrGenFrdActFlagEv=0 => -99998,
																								ALL(PersonEvent.Transaction, T1_IdIsKrGenFrdFlag=-99997) => -99997,
																								INTEGER(Subject.AotIdKrGenFrdActNewDtEv));
Event: => P1_AotIdKrGenFrdActShrdOldDtEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
																		            T_SrcClassType <2 OR P1_AotIdKrGenFrdActShrdFlagEv=0 => -99998,
																								ALL(PersonEvent.Transaction, T1_IdIsKrGenFrdFlag=-99997) => -99997,
																								INTEGER(Subject.AotIdKrGenFrdActShrdOldDtEv));
Event: => P1_AotIdKrGenFrdActShrdNewDtEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
																		            T_SrcClassType <2 OR P1_AotIdKrGenFrdActShrdFlagEv=0 => -99998,
																								ALL(PersonEvent.Transaction, T1_IdIsKrGenFrdFlag=-99997) => -99997,
																								INTEGER(Subject.AotIdKrGenFrdActShrdNewDtEv));
//ID KR Other Fraud Attrs
Event: => P1_AotIdKrOthFrdActCntEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
																		      T_SrcClassType <2 => -99998,
																					ALL(PersonEvent.Transaction,T1_IdIsKrOthFrdFlag=-99997) => -99997,
																					Subject.AotIdKrOthFrdActCntEv);
Event: => P1_AotIdKrOthFrdActFlagEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
																		      T_SrcClassType <2 => -99998,
																					P1_AotIdKrOthFrdActCntEv = -99997 => -99997,
																					P1_AotIdKrOthFrdActCntEv>0 => 1, 0);
Event: => P1_AotIdKrOthFrdActShrdCntEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
																		      T_SrcClassType <2 => -99998,
																					ALL(PersonEvent.Transaction,T1_IdIsKrOthFrdFlag=-99997) => -99997,
																					Subject.AotIdKrOthFrdActShrdCntEv);
Event: => P1_AotIdKrOthFrdActShrdFlagEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
																		      T_SrcClassType <2 => -99998,
																					P1_AotIdKrOthFrdActShrdCntEv = -99997 => -99997,
																					P1_AotIdKrOthFrdActShrdCntEv>0 => 1, 0);
Event: => P1_AotIdKrOthFrdActOldDtEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
																		      T_SrcClassType <2 OR P1_AotIdKrOthFrdActFlagEv=0 => -99998,
																					ALL(PersonEvent.Transaction,T1_IdIsKrOthFrdFlag=-99997) => -99997,
																					INTEGER(Subject.AotIdKrOthFrdActOldDtEv));
Event: => P1_AotIdKrOthFrdActNewDtEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
																		      T_SrcClassType <2 OR P1_AotIdKrOthFrdActFlagEv=0 => -99998,
																					ALL(PersonEvent.Transaction,T1_IdIsKrOthFrdFlag=-99997) => -99997,
																					INTEGER(Subject.AotIdKrOthFrdActNewDtEv));
Event: => P1_AotIdKrOthFrdActShrdOldDtEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
																		      T_SrcClassType <2 OR P1_AotIdKrOthFrdActShrdFlagEv=0 => -99998,
																					ALL(PersonEvent.Transaction,T1_IdIsKrOthFrdFlag=-99997) => -99997,
																					INTEGER(Subject.AotIdKrOthFrdActShrdOldDtEv));
Event: => P1_AotIdKrOthFrdActShrdNewDtEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
																		      T_SrcClassType <2 OR P1_AotIdKrOthFrdActShrdFlagEv=0 => -99998,
																					ALL(PersonEvent.Transaction,T1_IdIsKrOthFrdFlag=-99997) => -99997,
																					INTEGER(Subject.AotIdKrOthFrdActShrdNewDtEv));
//ID KR Stolen Identity Attrs
Event: => P1_AotIdKrStolIdActCntEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
																		      T_SrcClassType <2 => -99998,
																					ALL(PersonEvent.Transaction,T1_IdIsKrStolIdFlag=-99997) => -99997,
																					Subject.AotIdKrStolIdActCntEv);
Event: => P1_AotIdKrStolIdActFlagEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
																		      T_SrcClassType <2 => -99998,
																					P1_AotIdKrStolIdActCntEv=-99997 => -99997,
																					P1_AotIdKrStolIdActCntEv>0 => 1, 0);
Event: => P1_AotIdKrStolIdActShrdCntEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
																		      T_SrcClassType <2 => -99998,
																					ALL(PersonEvent.Transaction,T1_IdIsKrStolIdFlag=-99997) => -99997,
																					Subject.AotIdKrStolIdActShrdCntEv);
Event: => P1_AotIdKrStolIdActShrdFlagEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
																		      T_SrcClassType <2 => -99998,
																					P1_AotIdKrStolIdActShrdCntEv=-99997 => -99997,
																					P1_AotIdKrStolIdActShrdCntEv>0 => 1, 0);
Event: => P1_AotIdKrStolIdActOldDtEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
																		      T_SrcClassType <2 OR P1_AotIdKrStolIdActFlagEv=0 => -99998,
																					ALL(PersonEvent.Transaction,T1_IdIsKrStolIdFlag=-99997) => -99997,
																					INTEGER(Subject.AotIdKrStolIdActOldDtEv));
Event: => P1_AotIdKrStolIdActNewDtEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
																		      T_SrcClassType <2 OR P1_AotIdKrStolIdActFlagEv=0 => -99998,
																					ALL(PersonEvent.Transaction,T1_IdIsKrStolIdFlag=-99997) => -99997,
																					INTEGER(Subject.AotIdKrStolIdActNewDtEv));
Event: => P1_AotIdKrStolIdActShrdOldDtEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
																		      T_SrcClassType <2 OR P1_AotIdKrStolIdActShrdFlagEv=0 => -99998,
																					ALL(PersonEvent.Transaction,T1_IdIsKrStolIdFlag=-99997) => -99997,
																					INTEGER(Subject.AotIdKrStolIdActShrdOldDtEv));
Event: => P1_AotIdKrStolIdActShrdNewDtEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
																		      T_SrcClassType <2 OR P1_AotIdKrStolIdActShrdFlagEv=0 => -99998,
																					ALL(PersonEvent.Transaction,T1_IdIsKrStolIdFlag=-99997) => -99997,
																					INTEGER(Subject.AotIdKrStolIdActShrdNewDtEv));

//Address KR Attrs
Event: => P9_AotAddrKrActCntEv := MAP(T9_AddrPopFlag=0 => -99999,
																			T_SrcClassType < 2 => -99998,
																			ALL(AddressEvent.Transaction,T9_AddrIsKrFlag=-99997) => -99997,
																			Location.AotAddrKrActCntEv);
Event: => P9_AotAddrKrActFlagEv := MAP(T9_AddrPopFlag=0 => -99999,
																			T_SrcClassType <2 => -99998,
																			P9_AotAddrKrActCntEv=-99997 => -99997,
																			P9_AotAddrKrActCntEv>0 => 1, 0);
Event: => P9_AotAddrKrActShrdCntEv := MAP(T9_AddrPopFlag=0 => -99999,
																			T_SrcClassType <2 => -99998,
																			ALL(AddressEvent.Transaction,T9_AddrIsKrFlag=-99997) => -99997,
																			Location.AotAddrKrActShrdCntEv);
Event: => P9_AotAddrKrActShrdFlagEv := MAP(T9_AddrPopFlag=0 => -99999,
																			T_SrcClassType <2 => -99998,
																			P9_AotAddrKrActShrdCntEv=-99997 => -99997,
																			P9_AotAddrKrActShrdCntEv>0 => 1, 0);
Event: => P9_AotAddrKrActOldDtEv := MAP(T9_AddrPopFlag=0 => -99999,
																			T_SrcClassType <2 OR P9_AotAddrKrActFlagEv=0 => -99998,
																			ALL(AddressEvent.Transaction,T9_AddrIsKrFlag=-99997) => -99997,
																			INTEGER(Location.AotAddrKrActOldDtEv));
Event: => P9_AotAddrKrActNewDtEv := MAP(T9_AddrPopFlag=0 => -99999,
																			T_SrcClassType <2 OR P9_AotAddrKrActFlagEv=0 => -99998,
																			ALL(AddressEvent.Transaction,T9_AddrIsKrFlag=-99997) => -99997,
																			INTEGER(Location.AotAddrKrActNewDtEv));
Event: => P9_AotAddrKrActShrdOldDtEv := MAP(T9_AddrPopFlag=0 => -99999,
																			T_SrcClassType <2 OR P9_AotAddrKrActShrdFlagEv=0 => -99998,
																			ALL(AddressEvent.Transaction,T9_AddrIsKrFlag=-99997) => -99997,
																			INTEGER(Location.AotAddrKrActShrdOldDtEv));
Event: => P9_AotAddrKrActShrdNewDtEv := MAP(T9_AddrPopFlag=0 => -99999,
																			T_SrcClassType <2 OR P9_AotAddrKrActShrdFlagEv=0 => -99998,
																			ALL(AddressEvent.Transaction,T9_AddrIsKrFlag=-99997) => -99997,
																			INTEGER(Location.AotAddrKrActShrdNewDtEv));

//SSN KR Attrs
Event: => P15_AotSsnKrActCntEv := MAP(T15_SsnPopFlag=0 => -99999,
																			T_SrcClassType <2 => -99998,
																			ALL(SsnEvent.Transaction,T15_SsnIsKrFlag=-99997) => -99997,
																			rSsn.AotSsnKrActCntEv);
Event: => P15_AotSsnKrActFlagEv := MAP(T15_SsnPopFlag=0 => -99999,
																			T_SrcClassType <2 => -99998,
																			P15_AotSsnKrActCntEv=-99997 => -99997,
																			P15_AotSsnKrActCntEv>0 => 1, 0);
Event: => P15_AotSsnKrActShrdCntEv := MAP(T15_SsnPopFlag=0 => -99999,
																			T_SrcClassType <2 => -99998,
																			ALL(SsnEvent.Transaction,T15_SsnIsKrFlag=-99997) => -99997,
																			rSsn.AotSsnKrActShrdCntEv);
Event: => P15_AotSsnKrActShrdFlagEv := MAP(T15_SsnPopFlag=0 => -99999,
																			T_SrcClassType <2 => -99998,
																			P15_AotSsnKrActShrdCntEv=-99997 => -99997,
																			P15_AotSsnKrActShrdCntEv>0 => 1, 0);
Event: => P15_AotSsnKrActOldDtEv := MAP(T15_SsnPopFlag=0 => -99999,
																			T_SrcClassType <2 OR P15_AotSsnKrActFlagEv=0 => -99998,
																			ALL(SsnEvent.Transaction,T15_SsnIsKrFlag=-99997) => -99997,
																			INTEGER(rSsn.AotSsnKrActOldDtEv));
Event: => P15_AotSsnKrActNewDtEv := MAP(T15_SsnPopFlag=0 => -99999,
																			T_SrcClassType <2 OR P15_AotSsnKrActFlagEv=0 => -99998,
																			ALL(SsnEvent.Transaction,T15_SsnIsKrFlag=-99997) => -99997,
																			INTEGER(rSsn.AotSsnKrActNewDtEv));
Event: => P15_AotSsnKrActShrdOldDtEv := MAP(T15_SsnPopFlag=0 => -99999,
																			T_SrcClassType <2 OR P15_AotSsnKrActShrdFlagEv=0 => -99998,
																			ALL(SsnEvent.Transaction,T15_SsnIsKrFlag=-99997) => -99997,
																			INTEGER(rSsn.AotSsnKrActShrdOldDtEv));
Event: => P15_AotSsnKrActShrdNewDtEv := MAP(T15_SsnPopFlag=0 => -99999,
																			T_SrcClassType <2 OR P15_AotSsnKrActShrdFlagEv=0 => -99998,
																			ALL(SsnEvent.Transaction,T15_SsnIsKrFlag=-99997) => -99997,
																			INTEGER(rSsn.AotSsnKrActShrdNewDtEv));

//Phone KR Attrs
Event: => P16_AotPhnKrActCntEv := MAP(T16_PhnPopFlag=0 => -99999,
																			T_SrcClassType <2 => -99998,
																			ALL(PhoneEvent.Transaction,T16_PhnIsKrFlag=-99997) => -99997,
																			rPhone.AotPhnKrActCntEv);
Event: => P16_AotPhnKrActFlagEv := MAP(T16_PhnPopFlag=0 => -99999,
																			T_SrcClassType <2 => -99998,
																			P16_AotPhnKrActCntEv=-99997 => -99997,
																			P16_AotPhnKrActCntEv>0 => 1, 0);
Event: => P16_AotPhnKrActShrdCntEv := MAP(T16_PhnPopFlag=0 => -99999,
																			T_SrcClassType <2 => -99998,
																			ALL(PhoneEvent.Transaction,T16_PhnIsKrFlag=-99997) => -99997,
																			rPhone.AotPhnKrActShrdCntEv);
Event: => P16_AotPhnKrActShrdFlagEv := MAP(T16_PhnPopFlag=0 => -99999,
																			T_SrcClassType <2 => -99998,
																			P16_AotPhnKrActShrdCntEv=-99997 => -99997,
																			P16_AotPhnKrActShrdCntEv>0 => 1, 0);
Event: => P16_AotPhnKrActOldDtEv := MAP(T16_PhnPopFlag=0 => -99999,
																			T_SrcClassType <2 OR P16_AotPhnKrActFlagEv=0 => -99998,
																			ALL(PhoneEvent.Transaction,T16_PhnIsKrFlag=-99997) => -99997,
																			INTEGER(rPhone.AotPhnKrActOldDtEv));
Event: => P16_AotPhnKrActNewDtEv := MAP(T16_PhnPopFlag=0 => -99999,
																			T_SrcClassType <2 OR P16_AotPhnKrActFlagEv=0 => -99998,
																			ALL(PhoneEvent.Transaction,T16_PhnIsKrFlag=-99997) => -99997,
																			INTEGER(rPhone.AotPhnKrActNewDtEv));
Event: => P16_AotPhnKrActShrdOldDtEv := MAP(T16_PhnPopFlag=0 => -99999,
																			T_SrcClassType <2 OR P16_AotPhnKrActShrdFlagEv=0 => -99998,
																			ALL(PhoneEvent.Transaction,T16_PhnIsKrFlag=-99997) => -99997,
																			INTEGER(rPhone.AotPhnKrActShrdOldDtEv));
Event: => P16_AotPhnKrActShrdNewDtEv := MAP(T16_PhnPopFlag=0 => -99999,
																			T_SrcClassType <2 OR P16_AotPhnKrActShrdFlagEv=0 => -99998,
																			ALL(PhoneEvent.Transaction,T16_PhnIsKrFlag=-99997) => -99997,
																			INTEGER(rPhone.AotPhnKrActShrdNewDtEv));
													
//email KR Attrs													
Event: => P17_AotEmailKrActCntEv := MAP(T17_EmailPopFlag=0 => -99999,
																				T_SrcClassType <2 => -99998,
																				ALL(EmailEvent.Transaction,T17_EmailIsKrFlag=-99997) => -99997,
																				rEmail.AotEmailKrActCntEv);
Event: => P17_AotEmailKrActFlagEv := MAP(T17_EmailPopFlag=0 => -99999,
																				T_SrcClassType <2 => -99998,
																				P17_AotEmailKrActCntEv=-99997 => -99997,
																				P17_AotEmailKrActCntEv>0 => 1, 0);
Event: => P17_AotEmailKrActShrdCntEv := MAP(T17_EmailPopFlag=0 => -99999,
																				T_SrcClassType <2 => -99998,
																				ALL(EmailEvent.Transaction,T17_EmailIsKrFlag=-99997) => -99997,
																				rEmail.AotEmailKrActShrdCntEv);
Event: => P17_AotEmailKrActShrdFlagEv := MAP(T17_EmailPopFlag=0 => -99999,
																				T_SrcClassType <2 => -99998,
																				P17_AotEmailKrActShrdCntEv=-99997 => -99997,
																				P17_AotEmailKrActShrdCntEv>0 => 1, 0);
Event: => P17_AotEmailKrActOldDtEv := MAP(T17_EmailPopFlag=0 => -99999,
																				T_SrcClassType <2 OR P17_AotEmailKrActFlagEv=0 => -99998,
																				ALL(EmailEvent.Transaction,T17_EmailIsKrFlag=-99997) => -99997,
																				INTEGER(rEmail.AotEmailKrActOldDtEv));
Event: => P17_AotEmailKrActNewDtEv := MAP(T17_EmailPopFlag=0 => -99999,
																				T_SrcClassType <2 OR P17_AotEmailKrActFlagEv=0 => -99998,
																				ALL(EmailEvent.Transaction,T17_EmailIsKrFlag=-99997) => -99997,
																				INTEGER(rEmail.AotEmailKrActNewDtEv));
Event: => P17_AotEmailKrActShrdOldDtEv := MAP(T17_EmailPopFlag=0 => -99999,
																				T_SrcClassType <2 OR P17_AotEmailKrActShrdFlagEv=0 => -99998,
																				ALL(EmailEvent.Transaction,T17_EmailIsKrFlag=-99997) => -99997,
																				INTEGER(rEmail.AotEmailKrActShrdOldDtEv));
Event: => P17_AotEmailKrActShrdNewDtEv := MAP(T17_EmailPopFlag=0 => -99999,
																				T_SrcClassType <2 OR P17_AotEmailKrActShrdFlagEv=0 => -99998,
																				ALL(EmailEvent.Transaction,T17_EmailIsKrFlag=-99997) => -99997,
																				INTEGER(rEmail.AotEmailKrActShrdNewDtEv));
								
//IP Addr KR Attrs
Event: => P18_AotIpAddrKrActCntEv := MAP(T18_IpAddrPopFlag=0 => -99999,
																				 T_SrcClassType <2 => -99998,
																				 ALL(InternetProtocolEvent.Transaction,T18_IpAddrIsKrFlag=-99997) => -99997,
																				 rInternetProtocol.AotIpAddrKrActCntEv);
Event: => P18_AotIpAddrKrActFlagEv := MAP(T18_IpAddrPopFlag=0 => -99999,
																				 T_SrcClassType <2 => -99998,
																				 P18_AotIpAddrKrActCntEv=-99997 => -99997,
																				 P18_AotIpAddrKrActCntEv>0 => 1, 0);
Event: => P18_AotIpAddrKrActShrdCntEv := MAP(T18_IpAddrPopFlag=0 => -99999,
																				 T_SrcClassType <2 => -99998,
																				 ALL(InternetProtocolEvent.Transaction,T18_IpAddrIsKrFlag=-99997) => -99997,
																				 rInternetProtocol.AotIpAddrKrActShrdCntEv);
Event: => P18_AotIpAddrKrActShrdFlagEv := MAP(T18_IpAddrPopFlag=0 => -99999,
																				 T_SrcClassType <2 => -99998,
																				 P18_AotIpAddrKrActShrdCntEv=-99997 => -99997,
																				 P18_AotIpAddrKrActShrdCntEv>0 => 1, 0);
Event: => P18_AotIpAddrKrActOldDtEv := MAP(T18_IpAddrPopFlag=0 => -99999,
																				 T_SrcClassType <2 OR P18_AotIpAddrKrActFlagEv=0 => -99998,
																				 ALL(InternetProtocolEvent.Transaction,T18_IpAddrIsKrFlag=-99997) => -99997,
																				 INTEGER(rInternetProtocol.AotIpAddrKrActOldDtEv));
Event: => P18_AotIpAddrKrActNewDtEv := MAP(T18_IpAddrPopFlag=0 => -99999,
																				 T_SrcClassType <2 OR P18_AotIpAddrKrActFlagEv=0 => -99998,
																				 ALL(InternetProtocolEvent.Transaction,T18_IpAddrIsKrFlag=-99997) => -99997,
																				 INTEGER(rInternetProtocol.AotIpAddrKrActNewDtEv));
Event: => P18_AotIpAddrKrActShrdOldDtEv := MAP(T18_IpAddrPopFlag=0 => -99999,
																				 T_SrcClassType <2 OR P18_AotIpAddrKrActShrdFlagEv=0 => -99998,
																				 ALL(InternetProtocolEvent.Transaction,T18_IpAddrIsKrFlag=-99997) => -99997,
																				 INTEGER(rInternetProtocol.AotIpAddrKrActShrdOldDtEv));
Event: => P18_AotIpAddrKrActShrdNewDtEv := MAP(T18_IpAddrPopFlag=0 => -99999,
																				 T_SrcClassType <2 OR P18_AotIpAddrKrActShrdFlagEv=0 => -99998,
																				 ALL(InternetProtocolEvent.Transaction,T18_IpAddrIsKrFlag=-99997) => -99997,
																				 INTEGER(rInternetProtocol.AotIpAddrKrActShrdNewDtEv));

//Bank KR Attrs
Event: => P19_AotBnkAcctKrActCntEv := MAP(T19_BnkAcctPopFlag=0 => -99999,
																					T_SrcClassType <2 => -99998,
																					ALL(BankAccountEvent.Transaction,T19_BnkAcctIsKrFlag=-99997) => -99997,
																					rBankAccount.AotBnkAcctKrActCntEv);
Event: => P19_AotBnkAcctKrActFlagEv := MAP(T19_BnkAcctPopFlag=0 => -99999,
																					T_SrcClassType <2 => -99998,
																					P19_AotBnkAcctKrActCntEv=-99997 => -99997,
																					P19_AotBnkAcctKrActCntEv>0 => 1, 0);	
Event: => P19_AotBnkAcctKrActShrdCntEv := MAP(T19_BnkAcctPopFlag=0 => -99999,
																					T_SrcClassType <2 => -99998,
																					ALL(BankAccountEvent.Transaction,T19_BnkAcctIsKrFlag=-99997) => -99997,
																					rBankAccount.AotBnkAcctKrActShrdCntEv);
Event: => P19_AotBnkAcctKrActShrdFlagEv := MAP(T19_BnkAcctPopFlag=0 => -99999,
																					T_SrcClassType <2 => -99998,
																					P19_AotBnkAcctKrActShrdCntEv=-99997 => -99997,
																					P19_AotBnkAcctKrActShrdCntEv>0 => 1, 0);
Event: => P19_AotBnkAcctKrActOldDtEv := MAP(T19_BnkAcctPopFlag=0 => -99999,
																					T_SrcClassType <2 OR P19_AotBnkAcctKrActFlagEv=0 => -99998,
																					ALL(BankAccountEvent.Transaction,T19_BnkAcctIsKrFlag=-99997) => -99997,
																					INTEGER(rBankAccount.AotBnkAcctKrActOldDtEv));
Event: => P19_AotBnkAcctKrActNewDtEv := MAP(T19_BnkAcctPopFlag=0 => -99999,
																					T_SrcClassType <2 OR P19_AotBnkAcctKrActFlagEv=0 => -99998,
																					ALL(BankAccountEvent.Transaction,T19_BnkAcctIsKrFlag=-99997) => -99997,
																					INTEGER(rBankAccount.AotBnkAcctKrActNewDtEv));
Event: => P19_AotBnkAcctKrActShrdOldDtEv := MAP(T19_BnkAcctPopFlag=0 => -99999,
																					T_SrcClassType <2 OR P19_AotBnkAcctKrActShrdFlagEv=0 => -99998,
																					ALL(BankAccountEvent.Transaction,T19_BnkAcctIsKrFlag=-99997) => -99997,
																					INTEGER(rBankAccount.AotBnkAcctKrActShrdOldDtEv));
Event: => P19_AotBnkAcctKrActShrdNewDtEv := MAP(T19_BnkAcctPopFlag=0 => -99999,
																					T_SrcClassType <2 OR P19_AotBnkAcctKrActShrdFlagEv=0 => -99998,
																					ALL(BankAccountEvent.Transaction,T19_BnkAcctIsKrFlag=-99997) => -99997,
																					INTEGER(rBankAccount.AotBnkAcctKrActShrdNewDtEv));

//DL KR Attrs
Event: => P20_AotDlKrActCntEv := MAP(T20_DlPopFlag=0 => -99999,
																		 T_SrcClassType <2 => -99998,
																		 ALL(DriversLicenseEvent.Transaction,T20_DlIsKrFlag=-99997) => -99997,
																		 rDriversLicense.AotDlKrActCntEv);
Event: => P20_AotDlKrActFlagEv := MAP(T20_DlPopFlag=0 => -99999,
																		 T_SrcClassType <2 => -99998,
																		 P20_AotDlKrActCntEv = -99997 => -99997,
																		 P20_AotDlKrActCntEv>0 => 1, 0);
Event: => P20_AotDlKrActShrdCntEv := MAP(T20_DlPopFlag=0 => -99999,
																		 T_SrcClassType <2 => -99998,
																		 ALL(DriversLicenseEvent.Transaction,T20_DlIsKrFlag=-99997) => -99997,
																		 rDriversLicense.AotDlKrActShrdCntEv);
Event: => P20_AotDlKrActShrdFlagEv := MAP(T20_DlPopFlag=0 => -99999,
																		 T_SrcClassType <2 => -99998,
																		 P20_AotDlKrActShrdCntEv = -99997 => -99997,
																		 P20_AotDlKrActShrdCntEv>0 => 1, 0);
Event: => P20_AotDlKrActOldDtEv := MAP(T20_DlPopFlag=0 => -99999,
																		 T_SrcClassType <2 OR P20_AotDlKrActFlagEv=0 => -99998,
																		 ALL(DriversLicenseEvent.Transaction,T20_DlIsKrFlag=-99997) => -99997,
																		 INTEGER(rDriversLicense.AotDlKrActOldDtEv));
Event: => P20_AotDlKrActNewDtEv := MAP(T20_DlPopFlag=0 => -99999,
																		 T_SrcClassType <2 OR P20_AotDlKrActFlagEv=0 => -99998,
																		 ALL(DriversLicenseEvent.Transaction,T20_DlIsKrFlag=-99997) => -99997,
																		 INTEGER(rDriversLicense.AotDlKrActNewDtEv));
Event: => P20_AotDlKrActShrdOldDtEv := MAP(T20_DlPopFlag=0 => -99999,
																		 T_SrcClassType <2 OR P20_AotDlKrActShrdFlagEv=0 => -99998,
																		 ALL(DriversLicenseEvent.Transaction,T20_DlIsKrFlag=-99997) => -99997,
																		 INTEGER(rDriversLicense.AotDlKrActShrdOldDtEv));
Event: => P20_AotDlKrActShrdNewDtEv := MAP(T20_DlPopFlag=0 => -99999,
																		 T_SrcClassType <2 OR P20_AotDlKrActShrdFlagEv=0 => -99998,
																		 ALL(DriversLicenseEvent.Transaction,T20_DlIsKrFlag=-99997) => -99997,
																		 INTEGER(rDriversLicense.AotDlKrActShrdNewDtEv));

//Safe List Attrs
Event: => T9_AddrIsSafeFlag := MAP(T9_AddrPopFlag=0 => -99999,
																	 T_SrcClassType !=2 => -99998,
																	 T_AddrStatusCodeEcho=-99997 => 0,
																	 T_AddrStatusCodeEcho IN [5300, 5301, 5302, 5303, 5390] => 1, -99997);
Event: => T16_PhnIsSafeFlag := MAP(T16_PhnPopFlag=0 => -99999,
																	 T_SrcClassType !=2 => -99998,
																	 T_PhnStatusCodeEcho=-99997 => 0,
																	 T_PhnStatusCodeEcho IN [5400, 5401, 5490] => 1, -99997);
Event: => T18_IpAddrIsSafeFlag := MAP(T18_IpAddrPopFlag=0 => -99999,
																			T_SrcClassType !=2 => -99998,
																			T_IpAddrStatusCodeEcho=-99997 => 0,
																			T_IpAddrStatusCodeEcho IN [5600, 5601, 5690] => 1, -99997);
//AOT addr Safe Attrs
Event: => P9_AotAddrSafeActCntEv := MAP(T9_AddrPopFlag=0 => -99999,
																				T_SrcClassType <2 => -99998,
																				ALL(AddressEvent.Transaction,T9_AddrIsSafeFlag=-99997) => -99997,
																				Location.AotAddrSafeActCntEv);
Event: => P9_AotAddrSafeActFlagEv := MAP(T9_AddrPopFlag=0 => -99999,
																				T_SrcClassType <2 => -99998,
																				P9_AotAddrSafeActCntEv = -99997 => -99997,
																				P9_AotAddrSafeActCntEv > 0 => 1, 0);
Event: => P9_AotAddrSafeActOldDtEv := MAP(T9_AddrPopFlag=0 => -99999,
																				T_SrcClassType <2 OR P9_AotAddrSafeActFlagEv=0 => -99998,
																				ALL(AddressEvent.Transaction,T9_AddrIsSafeFlag=-99997) => -99997,
																				INTEGER(Location.AotAddrSafeActOldDtEv));
Event: => P9_AotAddrSafeActNewDtEv := MAP(T9_AddrPopFlag=0 => -99999,
																				T_SrcClassType <2 OR P9_AotAddrSafeActFlagEv=0 => -99998,
																				ALL(AddressEvent.Transaction,T9_AddrIsSafeFlag=-99997) => -99997,
																				INTEGER(Location.AotAddrSafeActNewDtEv));
//AOT Phone Safe Attrs
Event: => P16_AotPhnSafeActCntEv := MAP(T16_PhnPopFlag=0 => -99999,
																				T_SrcClassType <2 => -99998,
																				ALL(PhoneEvent.Transaction,T16_PhnIsSafeFlag=-99997) => -99997,
																				rPhone.AotPhnSafeActCntEv);
Event: => P16_AotPhnSafeActFlagEv := MAP(T16_PhnPopFlag=0 => -99999,
																				T_SrcClassType <2 => -99998,
																				P16_AotPhnSafeActCntEv = -99997=> -99997,
																				P16_AotPhnSafeActCntEv>0 => 1, 0);
Event: => P16_AotPhnSafeActOldDtEv := MAP(T16_PhnPopFlag=0 => -99999,
																				T_SrcClassType <2 OR P16_AotPhnSafeActFlagEv=0 => -99998,
																				ALL(PhoneEvent.Transaction,T16_PhnIsSafeFlag=-99997) => -99997,
																				INTEGER(rPhone.AotPhnSafeActOldDtEv));
Event: => P16_AotPhnSafeActNewDtEv := MAP(T16_PhnPopFlag=0 => -99999,
																				T_SrcClassType <2 OR P16_AotPhnSafeActFlagEv=0 => -99998,
																				ALL(PhoneEvent.Transaction,T16_PhnIsSafeFlag=-99997) => -99997,
																				INTEGER(rPhone.AotPhnSafeActNewDtEv));								
//AOT IP Addr Safe Attrs
Event: => P18_AotIpAddrSafeActCntEv := MAP(T18_IpAddrPopFlag=0 => -99999,
																					 T_SrcClassType <2 => -99998,
																					 ALL(InternetProtocolEvent.Transaction,T18_IpAddrIsSafeFlag=-99997) => -99997,
																					 rInternetProtocol.AotIpAddrSafeActCntEv);
Event: => P18_AotIpAddrSafeActFlagEv := MAP(T18_IpAddrPopFlag=0 => -99999,
																					 T_SrcClassType <2 => -99998,
																					 P18_AotIpAddrSafeActCntEv = -99997 => -99997,
																					 P18_AotIpAddrSafeActCntEv>0 => 1, 0);
Event: => P18_AotIpAddrSafeActOldDtEv := MAP(T18_IpAddrPopFlag=0 => -99999,
																					 T_SrcClassType <2 OR P18_AotIpAddrSafeActFlagEv=0  => -99998,
																					 ALL(InternetProtocolEvent.Transaction,T18_IpAddrIsSafeFlag=-99997) => -99997,
																					 INTEGER(rInternetProtocol.AotIpAddrSafeActOldDtEv));
Event: => P18_AotIpAddrSafeActNewDtEv := MAP(T18_IpAddrPopFlag=0 => -99999,
																					 T_SrcClassType <2 OR P18_AotIpAddrSafeActFlagEv=0  => -99998,
																					 ALL(InternetProtocolEvent.Transaction,T18_IpAddrIsSafeFlag=-99997) => -99997,
																					 INTEGER(rInternetProtocol.AotIpAddrSafeActNewDtEv));

//Identity Risk Attributes
Event: => T_IsBcShllHitFlag := MAP(BocashellHit=TRUE => 1, 0);
Event: => T_BcShllLexIdEcho := MAP(T_IsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																	 BocashellLexId = 0 => -99997,
																	 BocashellLexId); 
Event: => T1L_LexIdSeenFlag := MAP(T1_LexIdPopFlag = 0 => -99999,
																	 T_IsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																	 ALL(PersonEvent.Transaction,T_BcShllLexIdEcho=-99997) => -99997,
																	 truedid=TRUE => 1, 0);
Event: => T1L_BcShllLexIdMatchesInpFlag := MAP(T1_LexIdPopFlag=0 => -99999,
																							 T_IsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																							 ALL(PersonEvent.Transaction,T_BcShllLexIdEcho=-99997) => -99997,
																							 T_BcShllLexIdEcho = T_PersonUidEcho => 1, 0);
Event: => T1L_IdIsBcShllHitFlag := MAP(T1_LexIdPopFlag=0 => -99999,
																			 T_IsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																			 ALL(PersonEvent.Transaction,T1L_BcShllLexIdMatchesInpFlag=-99997) OR ALL(PersonEvent.Transaction,T1L_LexIdSeenFlag=-99997) => -99997,
																			 T1L_BcShllLexIdMatchesInpFlag=1 AND T1L_LexIdSeenFlag=1 => 1, 0);
Event: => T1_IdAge := MAP((T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0) OR T_DobPopFlag=0 => -99999,
													T_SrcClassType < 4 => -99998,
													INTEGER(T_InpClnDobEcho) > INTEGER(T_ActDtEcho) => -99997,
													MIN(FLOOR(DAYSBETWEEN(DATE(T_InpClnDobEcho),T_ActDtEcho)/365.25),200));
Event: => T1L_DobVerIndx := MAP(T1_LexIdPopFlag=0 OR T_DobPopFlag=0 => -99999,
                                T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																dobmatchlevel:Null OR dobmatchlevel=0 => -99997,
																dobmatchlevel);
Event: => T1_NapSummary := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
                           T_IsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
													 nap_summary:Null => -99997,
													 nap_summary);
Event: => T1L_NasSummary := MAP(T1_LexIdPopFlag=0 => -99999,
                            T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
														nas_summary:Null => -99997,
														nas_summary);
Event: => T1_Cvi := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
                    T_IsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
										cvi);
Event: => T1_Fp3 := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
                    T_IsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
										fraudpoint_v3='' OR fraudpoint_v3:Null OR fraudpoint_v3=0 => -99997,
										fraudpoint_v3);
Event: => T1_Fp3_StolenIdentityIndex := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
                                            T_IsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																						fp3_stolenidentityindex='' OR fp3_stolenidentityindex:Null OR fp3_stolenidentityindex=0 => -99997,
																						fp3_stolenidentityindex);
Event: => T1_Fp3_SyntheticIdentityIndex := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
                                           T_IsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																					 syntheticidentityindex_v3='' OR syntheticidentityindex_v3:Null OR syntheticidentityindex_v3=0 => -99997,
																					 syntheticidentityindex_v3);
Event: => T1_Fp3_ManipIdentityIndex := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
                                           T_IsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																					 manipulatedidentityindex_v3='' OR manipulatedidentityindex_v3:Null OR manipulatedidentityindex_v3=0 => -99997,
																					 manipulatedidentityindex_v3);
Event: => T1L_Fp_SourceRiskLevel := MAP(T1_LexIdPopFlag=0 => -99999,
                                        T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																				sourcerisklevel < 1 => -99997,
																				sourcerisklevel);
Event: => T1_AdultIdNotSeenFlag := MAP((T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0) OR T_DobPopFlag=0 => -99999,
                                        T_IsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																				ALL(PersonEvent.Transaction,T1_IdAge=-99997) => -99997,
																				T1_IdAge >= 18 AND ((T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=1) OR (T1_LexIdPopFlag=1 AND T1L_IdIsBcShllHitFlag=0)) => 1, 0);
Event: => T1_MinorWLexIDFlag := MAP((T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0) OR T_DobPopFlag=0 => -99999,
                                     T_IsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																		 ALL(PersonEvent.Transaction,T1_IdAge=-99997) => -99997,
																		 T1_IdAge < 18 AND T1L_IdIsBcShllHitFlag=1 AND T1_LexIdPopFlag=1 => 1,0);
Event: => T1_SsnPriorDOBFlag := MAP((T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0) OR T15_SsnPopFlag=0 OR T_DobPopFlag=0 => -99999,
                                     T_IsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																		 socsdobflag='' OR INTEGER(socsdobflag) > 1 => -99997,
																		 socsdobflag);
Event: => T1_FirstNmNotVerFlag := MAP((T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0) OR T_FirstNmPopFlag=0 => -99999,
                                       T_IsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																			 T1_NapSummary < 1 AND T1L_NasSummary < 1 => -99997,
																			 (T1_NapSummary IN [1,5,6,7,11]) AND (T1L_NasSummary IN [1,5,6,7,11]) => 1, 0);
Event: => T1_LastNmNotVerFlag := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 OR T_LastNmPopFlag=0 => -99999,
                                     T_IsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																		 T1_NapSummary < 1 AND T1L_NasSummary < 1 => -99997,
																		 T1_NapSummary IN [1,3,4,6,10] AND T1L_NasSummary IN [1,3,4,6,10] => 1, 0);
Event: => T1_AddrNotVerFlag := MAP((T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0) OR T9_AddrPopFlag=0 => -99999,
                                    T_IsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																		T1_NapSummary  < 1 AND T1L_NasSummary < 1 => -99997,
																		T1_NapSummary IN [1,2,4,7,9] AND T1L_NasSummary IN [1,2,4,7,9] => 1, 0);
Event: => T1L_SsnNotVerFlag := MAP(T1_LexIdPopFlag=0 OR T15_SsnPopFlag=0 => -99999,
                                   T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																	 T1L_NasSummary < 1 => -99997,
																	 T1L_NasSummary IN [2,3,5,8] => 1, 
																	 T1L_NasSummary IN [1,4,6,7,9,10,11,12] => 0);
Event: => T1L_SsnWAltNAVerFlag := MAP(T1_LexIdPopFlag=0 OR T15_SsnPopFlag=0 => -99999,
                                      T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																			T1L_NasSummary < 1 => -99997,
																			T1L_NasSummary = 1 => 1, 
																			T1L_NasSummary IN [2,3,4,5,6,7,8,9,10,11,12] => 0);
Event: => T1L_SsnWAddrNotVerFlag := MAP(T1_LexIdPopFlag=0 OR T15_SsnPopFlag=0 OR T9_AddrPopFlag=0 => -99999,
                                        T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																				T1L_NasSummary < 1 => -99997,
																				T1L_NasSummary IN [4,7,9] => 1, 
																				T1L_NasSummary IN [1,2,3,5,6,8,10,11,12] => 0);
Event: => T1_PhnNotVerFlag := MAP((T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0) OR T16_PhnPopFlag=0 => -99999,
                                   T_IsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																	 T1_NapSummary < 1 => -99997,
																	 T1_NapSummary IN [2,3,5,8] => 1, 
																	 T1_NapSummary IN [1,4,6,7,9,10,11,12] => 0);
Event: => T1L_DobNotVerFlag := MAP(T1_LexIdPopFlag=0 OR T_DobPopFlag=0 => -99999,
                                   T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																	 ALL(PersonEvent.Transaction,T1L_DobVerIndx=-99997) => -99997,
																	 T1L_DobVerIndx < 7 => 1, 0);
Event: => T1_HiRiskCviFlag :=  MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999, 
                                    T_IsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																		T1_NapSummary < 1 AND T1L_NasSummary < 1 => -99997,
																		T1_Cvi <= 20 => 1, 0);
Event: => T1_MedRiskCviFlag := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
                                    T_IsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																		T1_NapSummary < 1 AND T1L_NasSummary < 1 => -99997,
																		T1_Cvi IN [30,40] => 1, 0);
Event: => T1L_HdrSrcCatCntLwFlag := MAP(T1_LexIdPopFlag=0 => -99999,
                                       T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																			 ALL(PersonEvent.Transaction,T1L_Fp_SourceRiskLevel=-99997) => -99997,
																			 T1L_Fp_SourceRiskLevel >=7 => 1, 0);
Event: => T1_StolIdFlag := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
                               T_IsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
															 ALL(PersonEvent.Transaction,T1_Fp3_StolenIdentityIndex=-99997) => -99997,
															 T1_Fp3_StolenIdentityIndex >=7 => 1, 0);
Event: => T1_SynthIdFlag := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
                                T_IsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																ALL(PersonEvent.Transaction,T1_Fp3_SyntheticIdentityIndex=-99997) => -99997,
																T1_Fp3_SyntheticIdentityIndex >=7 => 1, 0);
Event: => T1_ManipIDFlag := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
                                T_IsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																ALL(PersonEvent.Transaction,T1_Fp3_ManipIdentityIndex=-99997) => -99997,
																T1_Fp3_ManipIdentityIndex >=7 => 1, 0);
Event: => T1L_IdDtOfDeathAftIdActCntEv := MAP(T1_LexIdPopFlag=0 => -99999,
                                              T1L_IdDeceasedFlag < 1 OR T_SrcClassType < 4 => -99998, 
																							T1L_IdDtOfDeath=-99997 => -99997,
																							COUNT(Subject.PersonEvent(EventDate <= Event.EventDate AND EventDate > Event.diddeceaseddate)));
Event: => T1L_IdDtOfDeathAftIdActFlagEv := MAP(T1_LexIdPopFlag=0 => -99999,
                                               T1L_IdDeceasedFlag < 1 OR T_SrcClassType < 4 => -99998,
																							 T1L_IdDtOfDeath=-99997 => -99997,
																							 T1L_IdDtOfDeathAftIdActCntEv>0 => 1, 0);

//best pii attributes
Event: => T_BcShllArchDtEcho := MAP(T_IsBcShllHitFlag < 1 => -99998,
																		historydatetimestamp); 
Event: => T1L_BestFirstNmEcho := MAP(T1_LexIdPopFlag=0 => -99999,
																		 T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																		 best_fname = '' OR best_fname:Null => -99997,
																		 best_fname);
Event: => T1L_BestLastNmEcho := MAP(T1_LexIdPopFlag=0 => -99999,
																		T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																		best_lname = '' OR best_lname:Null => -99997,
																		best_lname);
Event: => T1L_BestFirstNmPopFlag := MAP(T1_LexIdPopFlag=0 => -99999,
																				T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																				T1L_BestFirstNmEcho = -99997 => 0, 1);
Event: => T1L_BestLastNmPopFlag := MAP(T1_LexIdPopFlag=0 => -99999,
																				T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																				T1L_BestLastNmEcho = -99997 => 0, 1);
Event: => T1L_BestFullNmEcho := MAP(T1_LexIdPopFlag=0 => -99999,
																		T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																		T1L_BestFirstNmPopFlag=0 OR T1L_BestLastNmPopFlag=0 => -99997,
																	 TRIM(T1L_BestLastNmEcho) + ', ' + TRIM(T1L_BestFirstNmEcho));
Event: => T1L_CurrAddrPrimRangeEcho := MAP(T1_LexIdPopFlag=0 => -99999,
																					 T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																					 add_curr_prim_range = '' OR add_curr_prim_range:Null => -99997,
																					 add_curr_prim_range);
Event: => T1L_CurrAddrPreDirEcho := MAP(T1_LexIdPopFlag=0 => -99999,
																					 T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																					 add_curr_predir = '' OR add_curr_predir:Null => -99997,
																					 add_curr_predir);
Event: => T1L_CurrAddrPrimNmEcho := MAP(T1_LexIdPopFlag=0 => -99999,
																					 T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																					 add_curr_prim_name = '' OR add_curr_prim_name:Null => -99997,
																					 add_curr_prim_name);
Event: => T1L_CurrAddrSuffixEcho := MAP(T1_LexIdPopFlag=0 => -99999,
																					 T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																					 add_curr_addr_suffix = '' OR add_curr_addr_suffix:Null => -99997,
																					 add_curr_addr_suffix);
Event: => T1L_CurrAddrPostDirEcho := MAP(T1_LexIdPopFlag=0 => -99999,
																					 T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																					 add_curr_postdir = '' OR add_curr_postdir:Null => -99997,
																					 add_curr_postdir);
Event: => T1L_CurrAddrUnitDesigEcho := MAP(T1_LexIdPopFlag=0 => -99999,
																					 T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																					 add_curr_unit_desig = '' OR add_curr_unit_desig:Null => -99997,
																					 add_curr_unit_desig);
Event: => T1L_CurrAddrSecRangeEcho := MAP(T1_LexIdPopFlag=0 => -99999,
																					 T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																					 add_curr_sec_range = '' OR add_curr_sec_range:Null => -99997,
																					 add_curr_sec_range);
Event: => T1L_CurrAddrCityEcho := MAP(T1_LexIdPopFlag=0 => -99999,
																					 T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																					 add_curr_city_name = '' OR add_curr_city_name:Null => -99997,
																					 add_curr_city_name);
Event: => T1L_CurrAddrStEcho := MAP(T1_LexIdPopFlag=0 => -99999,
																					 T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																					 add_curr_st = '' OR add_curr_st:Null => -99997,
																					 add_curr_st);
Event: => T1L_CurrAddrZip5Echo := MAP(T1_LexIdPopFlag=0 => -99999,
																					 T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																					 add_curr_zip5 = '' OR add_curr_zip5:Null => -99997,
																					 add_curr_zip5);
Event: => T1L_CurrAddrPopFlag := MAP(T1_LexIdPopFlag=0 => -99999,
																		T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																		add_curr_pop=TRUE => 1, 0);
Event: => T1L_CurrAddrFullEcho := MAP(T1_LexIdPopFlag=0 => -99999,
																			T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																			T1L_CurrAddrPopFlag=0 => -99997,
																			IF(T1L_CurrAddrPrimRangeEcho IN ['-99999','-99998','-99997'],'',TRIM(T1L_CurrAddrPrimRangeEcho)) +
																			IF(T1L_CurrAddrPreDirEcho IN ['-99999','-99998','-99997'],'',TRIM(' ' + T1L_CurrAddrPreDirEcho)) +
																			IF(T1L_CurrAddrPrimNmEcho IN ['-99999','-99998','-99997'],'',TRIM(' ' + T1L_CurrAddrPrimNmEcho)) +
																			IF(T1L_CurrAddrSuffixEcho IN ['-99999','-99998','-99997'],'',TRIM(' ' + T1L_CurrAddrSuffixEcho)) +
																			IF(T1L_CurrAddrUnitDesigEcho IN ['-99999','-99998','-99997'],'',TRIM(' ' + T1L_CurrAddrUnitDesigEcho)) +
																			IF(T1L_CurrAddrSecRangeEcho IN ['-99999','-99998','-99997'],'',TRIM(' ' + T1L_CurrAddrSecRangeEcho)) +
																			IF(T1L_CurrAddrCityEcho IN ['-99999','-99998','-99997'],'',TRIM(', ' + T1L_CurrAddrCityEcho)) +
																			IF(T1L_CurrAddrStEcho IN ['-99999','-99998','-99997'],'',TRIM(', ' + T1L_CurrAddrStEcho)) +
																			IF(T1L_CurrAddrZip5Echo IN ['-99999','-99998','-99997'],'',TRIM(' ' + T1L_CurrAddrZip5Echo)));
Event: => T1L_CurrAddrOldDt := MAP(T1_LexIdPopFlag=0 => -99999,
																   T1L_CurrAddrPopFlag < 1 OR T_SrcClassType < 4 => -99998,
																	 bocashell_addr1_dt_first_seen:Null OR NOT ISVALIDDATE(bocashell_addr1_dt_first_seen) => -99997,
																	 INTEGER(bocashell_addr1_dt_first_seen));
Event: => T1L_CurrAddrNewDt := MAP(T1_LexIdPopFlag=0 => -99999,
																   T1L_CurrAddrPopFlag < 1 OR T_SrcClassType < 4 => -99998,
																	 bocashell_addr1_date_last_seen:Null OR NOT ISVALIDDATE(bocashell_addr1_date_last_seen) => -99997,
																	 INTEGER(bocashell_addr1_date_last_seen));
Event: => T1L_BestSsnEcho := MAP(T1_LexIdPopFlag=0 => -99999, 
                             T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
                             best_ssn = '' OR best_ssn:Null OR LENGTH(TRIM(best_ssn))<9 => -99997,
														 TRIM(best_ssn));
Event: => T1L_BestSsnPopFlag := MAP(T1_LexIdPopFlag=0 => -99999, 
                             T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
														 T1L_BestSsnEcho = -99997 => 0, 1);
Event: => T1L_BestDobEcho := MAP(T1_LexIdPopFlag=0 => -99999, 
                             T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
														 /*reported_dob = '' OR reported_dob:Null OR */ reported_dob:Null OR (NOT ISVALIDDATE(reported_dob)) => -99997,
														 INTEGER(reported_dob));
Event: => T1L_BestDobPopFlag := MAP(T1_LexIdPopFlag=0 => -99999, 
                             T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
														 T1L_BestDobEcho = -99997 => 0, 1);
Event: => T1L_BestPhnEcho := MAP(T1_LexIdPopFlag=0 => -99999, 
                             T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
														 best_phone = '' OR best_phone:Null OR LENGTH(best_phone)<0 OR STARTSWITH(best_phone,'0') => -99997,
														 best_phone);
Event: => T1L_BestPhnPopFlag := MAP(T1_LexIdPopFlag=0 => -99999, 
                             T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
														 T1L_BestPhnEcho = -99997 => 0, 1);
Event: => T1L_BestDlEcho := MAP(T1_LexIdPopFlag=0 => -99999, 
                             T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
														 best_drivers_license = '' OR best_drivers_license:Null => -99997,
														 best_drivers_license);
Event: => T1L_BestDlStEcho := MAP(T1_LexIdPopFlag=0 => -99999, 
                             T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
														 best_drivers_license_state = '' OR best_drivers_license_state:Null => -99997,
														 best_drivers_license_state);
Event: => T1L_BestDlPopFlag := MAP(T1_LexIdPopFlag=0 => -99999, 
                             T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
														 T1L_BestDlEcho = -99997 OR T1L_BestDlStEcho = -99997 => 0, 1);
Event: => T1L_BestDlExpDt := MAP(T1_LexIdPopFlag=0 => -99999, 
                             T1L_BestDlPopFlag < 1 OR T_SrcClassType < 4 => -99998,
														 best_drivers_license_exp = '' OR best_drivers_license_exp:Null OR best_drivers_license_exp=0 => -99997,
														 best_drivers_license_exp);
Event: => T1L_BestFirstNmMatchesInpFlag := MAP(T1_LexIdPopFlag=0 OR T_FirstNmPopFlag=0 => -99999,
                                           T1L_BestFirstNmPopFlag < 1 OR T_SrcClassType < 4 => -99998,
																					 input_fname_isbestmatch);
Event: => T1L_BestLastNmMatchesInpFlag := MAP(T1_LexIdPopFlag=0 OR T_LastNmPopFlag=0 => -99999,
                                           T1L_BestLastNmPopFlag < 1 OR T_SrcClassType < 4 => -99998,
																					 input_lname_isbestmatch);
Event: => T1L_BestFullNmMatchesInpFlag := MAP(T1_LexIdPopFlag=0 OR T_FirstNmPopFlag=0 OR T_LastNmPopFlag=0 => -99999,
                                              T1L_BestFirstNmPopFlag < 1 OR T1L_BestLastNmPopFlag < 1 OR T_SrcClassType < 4 => -99998,
																							T1L_BestFirstNmMatchesInpFlag=1 AND T1L_BestLastNmMatchesInpFlag=1 => 1, 0);
Event: => T1L_CurrAddrMatchesInpFlag := MAP(T1_LexIdPopFlag=0 OR T9_AddrPopFlag=0 => -99999,
                                            T1L_CurrAddrPopFlag < 1 OR T_SrcClassType < 4 => -99998,
																						add_input_isbestmatch=TRUE => 1, 0); //might need to change this -- waiting for response from Jo
Event: => T1L_BestSsnMatchesInpFlag := MAP(T1_LexIdPopFlag=0 OR T15_SsnPopFlag=0 => -99999,
                                           T1L_BestSsnPopFlag < 1 OR T_SrcClassType < 4 => -99998,
																					 input_ssn_isbestmatch);
Event: => T1L_BestDobMatchesInpFlag := MAP(T1_LexIdPopFlag=0 OR T_DobPopFlag=0 => -99999,
                                           T1L_BestDobPopFlag < 1 OR T_SrcClassType < 4 => -99998,
																					 T1L_DobVerIndx >= 7 => 1, 0); // need to add this 
Event: => T1L_BestPhnMatchesInpFlag := MAP(T1_LexIdPopFlag=0 OR T16_PhnPopFlag=0 => -99999,
                                           T1L_BestPhnPopFlag < 1 OR T_SrcClassType < 4 => -99998,
																					 (T_InpClnPhnEcho=T1L_BestPhnEcho) => 1, 0); //how do I do this?
Event: => T1L_BestDlMatchesInpFlag := MAP(T1_LexIdPopFlag=0 OR T20_DlPopFlag=0 => -99999,
                                          T1L_BestDlPopFlag < 1 OR T_SrcClassType < 4 => -99998,
																					T_InpClnDlStEcho=T1L_BestDlStEcho AND T_InpClnDlEcho=T1L_BestDlEcho => 1, 0); //string comparison?
Event: => T1L_CurrAddrNotInAgcyJurStFlag := MAP(T1_LexIdPopFlag=0 => -99999,
                                                T1L_CurrAddrPopFlag < 1 OR T_SrcClassType < 4 => -99998,
																								T1L_CurrAddrStEcho != AgencyProgJurSt => 1, 0);
Event: => T1L_BestDlNotInAgcyJurStFlag := MAP(T1_LexIdPopFlag=0 => -99999,
                                              T1L_BestDlPopFlag < 1 OR T_SrcClassType < 4 => -99998,
																							T1L_BestDlStEcho != AgencyProgJurSt => 1, 0);

//web echo attributes
Event: => T_ActTmEcho := MAP(reported_time:Null OR reported_time=0 => -99997, reported_time); 
Event: => T_InpAddrTypeEcho := MAP(Location.TypeCode	= '' OR Location.TypeCode:Null => -99999, Location.TypeCode);
Event: => T_InpClnAddrStreetEcho := MAP(StreetAddress ='' OR StreetAddress :Null => -99999, StreetAddress );
Event: => T_InpClnMailingAddrStreetEcho := MAP(MailingStreetAddress='' OR MailingStreetAddress:Null => -99999, MailingStreetAddress);
Event: => T_InpClnMailingAddrCityEcho := MAP(MailingCity='' OR MailingCity:Null => -99999, MailingCity);
Event: => T_InpClnMailingAddrStEcho := MAP(MailingState='' OR MailingState:Null => -99999, MailingState);
Event: => T_InpClnMailingAddrZipEcho := MAP(MailingZip='' OR MailingZip:Null => -99999, MailingZip);

Event: => T_InpPhnContactTypeEcho := MAP(Contact_Type= '' OR Contact_Type:Null => -99999, Contact_Type);
Event: => T_InpClnCellPhnEcho := MAP(PhoneFormatted='' OR PhoneFormatted:Null => -99999, PhoneFormatted);
Event: => T_InpClnWorkPhnEcho := MAP(CellPhoneFormatted='' OR CellPhoneFormatted:Null => -99999, CellPhoneFormatted);
Event: => T_InpClnBnkAcct2Echo := MAP(AccountNumber2='' OR AccountNumber2:Null => -99999, AccountNumber2 );
Event: => T_InpClnBnkAcctRtg2Echo := MAP(RoutingNumber2='' OR RoutingNumber2:Null => -99999, RoutingNumber2);
Event: => T_InpEthnicityEcho := MAP(ethnicity='' OR ethnicity:Null => -99999, ethnicity);
Event: => T_InpRaceEcho := MAP(race='' OR race:Null => -99999, race);
Event: => T_InpHeadOfHHEcho := MAP(head_of_household_indicator='' OR head_of_household_indicator:Null => -99999, head_of_household_indicator);
Event: => T_InpRelationshipEcho := MAP(relationship_indicator='' OR relationship_indicator:Null => -99999, relationship_indicator);
Event: => T_InpDvcIDEcho := MAP(Device_ID='' OR Device_ID:Null => -99999, Device_ID);
Event: => T_InpDvcUniqueNumEcho := MAP(unique_number='' OR unique_number:Null => -99999, unique_number);
Event: => T_InpDvcMacAddrEcho := MAP(mac_address='' OR mac_address:Null => -99999, mac_address);
Event: => T_InpDvcSerialNumEcho := MAP(serial_number='' OR serial_number:Null => -99999, serial_number);
Event: => T_InpDvcTypeEcho := MAP(device_type='' OR device_type:Null => -99999, device_type);
Event: => T_InpDvcIdProvEcho := MAP(device_identification_provider='' OR device_identification_provider:Null => -99999, device_identification_provider);
Event: => T_InpDvcLatEcho := MAP(geo_lat:Null OR geo_lat=0 => -99999, geo_lat);
Event: => T_InpDvcLongEcho := MAP(geo_long:Null OR geo_long=0 => -99999, geo_long);								 
Event: => T_InpInvestigatorIdEcho := MAP(investigator_id='' OR investigator_id:Null => -99999, investigator_id);
Event: => T_InpReferralCaseIdEcho := MAP(investigation_referral_case_id='' OR investigation_referral_case_id:Null => -99999, investigation_referral_case_id);
Event: => T_InpReferralTypeDescEcho := MAP(type_of_referral='' OR type_of_referral:Null => -99999, type_of_referral);
Event: => T_InpReferralReasonDescEcho := MAP(referral_reason='' OR referral_reason:Null => -99999, referral_reason);
Event: => T_InpReferralDispositionEcho := MAP(disposition='' OR disposition:Null => -99999, disposition);
Event: => T_InpClearedFraudEcho := MAP(cleared_fraud='' OR cleared_fraud:Null => -99999, cleared_fraud);
Event: => T_InpClearedReasonEcho := MAP(reason_cleared_code='' OR reason_cleared_code:Null => -99999, reason_cleared_code);

Event: => T_InpCaseIdEcho := MAP(CaseId='' OR CaseId:Null => -99999, CaseId);
Event: => T_InpClientIdEcho := MAP(ClientId='' OR ClientId:Null OR ClientId=0 => -99999, ClientId);
Event: => T_InpReasonDescEcho := MAP(reason_description='' OR reason_description:Null => -99999, reason_description);
Event: => T_AgencyUserNm := MAP(reported_by='' OR reported_by:Null => -99999, reported_by);

//web counters/dates -- placeholders
Event: => ActAge := DAYSBETWEEN(T_ActDtEcho,CURRENTDATE());

Event: => T1_IdInvUpdFlag := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
                                 T_SrcClassType !=0 => -99998,
																 ALL(PersonEvent.Transaction,T_IdStatusCodeEcho=-99997) => -99997,
																 T_IdStatusCodeEcho IN [10,20,30,40,50] => 1, 0);
Event: => T1L_IdDeceasedFlag := MAP(T1_LexIdPopFlag=0 => -99999,
                                    T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																		diddeceased:Null => -99997,
																		diddeceased=TRUE => 1, 0);
Event: => T1L_IdDtOfDeath := MAP(T1_LexIdPopFlag=0 => -99999,
                             T1L_IdDeceasedFlag < 1 OR T_SrcClassType < 4 => -99998,
														 diddeceaseddate:Null OR NOT ISVALIDDATE(diddeceaseddate) => -99997,
														 INTEGER(diddeceaseddate));
Event: => T1L_IdCrimFlSdMatchFlag := MAP(T1_LexIdPopFlag=0 => -99999,
                                     T1L_IdCrimHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																		 T_FirstNmPopFlag=0 OR T_LastNmPopFlag=0 OR T15_SsnPopFlag=0 OR T_DobPopFlag=0 => -99997,
																		 name_ssn_dob_match);
Event: => T1L_IdCrimHitFlag := MAP(T1_LexIdPopFlag=0 => -99999,
                                  T1L_IdIsBcShllHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																	CrimHit=TRUE => 1, 0);
Event: => T1L_IdCurrIncarcFlag := MAP(T1_LexIdPopFlag=0 => -99999,
                                  T1L_IdCrimHitFlag < 1 OR T_SrcClassType < 4 => -99998,
																	T1L_IdCrimFlSdMatchFlag=-99997 OR curr_incar_flag='' OR curr_incar_flag:Null => -99997,
																	T1L_IdCrimFlSdMatchFlag=1 AND curr_incar_flag='Y' => 1, 0);
Event: => P1_AotIdActCntEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
                                  T_SrcClassType < 2 => -99998,
																	Subject.AotIdActCntEv);
Event: => P1_AotIdActCnt30D := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
                                   T_SrcClassType < 2 => -99998,
																	 Subject.AotIdActCnt30D);
Event: => P9_AotIdActCntEv := MAP(T9_AddrPopFlag=0 => -99999,
                              T_SrcClassType < 2 => -99998,
															Location.AotIdActCntEv);
Event: => P9_AotIdActCnt30D := MAP(T9_AddrPopFlag=0 => -99999,
                              T_SrcClassType < 2 => -99998,
															Location.AotIdActCnt30D);
Event: => P15_AotIdActCntEv := MAP(T15_SsnPopFlag=0 => -99999,
                                   T_SrcClassType < 2 => -99998,
																	 rSsn.AotIdActCntEv);
Event: => P15_AotIdActCnt30D := MAP(T15_SsnPopFlag=0 => -99999,
                                   T_SrcClassType < 2 => -99998,
																	 rSsn.AotIdActCnt30D);
Event: => P16_AotIdActCntEv := MAP(T16_PhnPopFlag=0 => -99999,
                                   T_SrcClassType < 2 => -99998,
																	 rPhone.AotIdActCntEv);
Event: => P16_AotIdActCnt30D := MAP(T16_PhnPopFlag=0 => -99999,
                                   T_SrcClassType < 2 => -99998,
																	 rPhone.AotIdActCnt30D);
Event: => P17_AotIdActCntEv := MAP(T17_EmailPopFlag=0 => -99999,
                                   T_SrcClassType < 2 => -99998,
																	 rEmail.AotIdActCntEv);
Event: => P17_AotIdActCnt30D := MAP(T17_EmailPopFlag=0 => -99999,
                                   T_SrcClassType < 2 => -99998,
																	 rEmail.AotIdActCnt30D);
Event: => P18_AotIdActCntEv := MAP(T18_IpAddrPopFlag=0 => -99999,
                                   T_SrcClassType < 2 => -99998,
																	 rInternetProtocol.AotIdActCntEv);
Event: => P18_AotIdActCnt30D := MAP(T18_IpAddrPopFlag=0 => -99999,
                                   T_SrcClassType < 2 => -99998,
																	 rInternetProtocol.AotIdActCnt30D);
Event: => P19_AotIdActCntEv := MAP(T19_BnkAcctPopFlag=0 => -99999,
                               T_SrcClassType < 2 => -99998,
															 rBankAccount.AotIdActCntEv);
Event: => P19_AotIdActCnt30D := MAP(T19_BnkAcctPopFlag=0 => -99999,
                               T_SrcClassType < 2 => -99998,
															 rBankAccount.AotIdActCnt30D);
Event: => P20_AotIdActCntEv := MAP(T20_DlPopFlag=0 => -99999,
                                   T_SrcClassType < 2 => -99998,
																	 rDriversLicense.AotIdActCntEv);
Event: => P20_AotIdActCnt30D := MAP(T20_DlPopFlag=0 => -99999,
                                   T_SrcClassType < 2 => -99998,
																	 rDriversLicense.AotIdActCnt30D);
Event: => P1_AotAddActCntEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
                               T_SrcClassType < 2 => -99998,
															 Subject.AotAddActCntEv);
Event: => P1_AoTAddActCnt30D := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
                               T_SrcClassType < 2 => -99998,
															 Subject.AotAddActCnt30D);
Event: => P9_AoTAddActCntEv := MAP(T9_AddrPopFlag=0 => -99999,
                               T_SrcClassType < 2 => -99998,
															 Location.AoTAddActCntEv);
Event: => P9_AotAddActCnt30D := MAP(T9_AddrPopFlag=0 => -99999,
                               T_SrcClassType < 2 => -99998,
															 Location.AoTAddActCnt30D);
Event: => P15_AotAddActCntEv := MAP(T15_SsnPopFlag=0 => -99999,
                                    T_SrcClassType < 2 => -99998,
																		rSsn.AotAddActCntEv);
Event: => P15_AotAddActCnt30D := MAP(T15_SsnPopFlag=0 => -99999,
                                    T_SrcClassType < 2 => -99998,
																		rSsn.AotAddActCnt30D);
Event: => P16_AotAddActCntEv := MAP(T16_PhnPopFlag=0 => -99999,
                                T_SrcClassType < 2 => -99998,
																rPhone.AotAddActCntEv);
Event: => P16_AotAddActCnt30D := MAP(T16_PhnPopFlag=0 => -99999,
                                T_SrcClassType < 2 => -99998,
																rPhone.AotAddActCnt30D);
Event: => P17_AotAddActCntEv := MAP(T17_EmailPopFlag=0 => -99999,
                                T_SrcClassType < 2 => -99998,
																rEmail.AotAddActCntEv);
Event: => P17_AotAddActCnt30D := MAP(T17_EmailPopFlag=0 => -99999,
                                T_SrcClassType < 2 => -99998,
																rEmail.AotAddActCnt30D);
Event: => P18_AotAddActCntEv := MAP(T18_IpAddrPopFlag=0 => -99999,
                                T_SrcClassType < 2 => -99998,
																rInternetProtocol.AotAddActCntEv);
Event: => P18_AotAddActCnt30D := MAP(T18_IpAddrPopFlag=0 => -99999,
                                T_SrcClassType < 2 => -99998,
																rInternetProtocol.AotAddActCnt30D);
Event: => P19_AotAddActCntEv := MAP(T19_BnkAcctPopFlag=0 => -99999,
                                    T_SrcClassType < 2 => -99998,
																		rBankAccount.AotAddActCntEv);
Event: => P19_AotAddActCnt30D := MAP(T19_BnkAcctPopFlag=0 => -99999,
                                    T_SrcClassType < 2 => -99998,
																		rBankAccount.AotAddActCnt30D);
Event: => P20_AotAddActCntEv := MAP(T20_DlPopFlag=0 => -99999,
                                    T_SrcClassType < 2 => -99998,
																		rDriversLicense.AotAddActCntEv);
Event: => P20_AotAddActCnt30D := MAP(T20_DlPopFlag=0 => -99999,
                                    T_SrcClassType < 2 => -99998,
																		rDriversLicense.AotAddActCnt30D);
Event: => P1_AotNonStActCntEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
                                     T_SrcClassType < 2 => -99998,
																		 Subject.AotNonStActCntEv);
Event: => P1_AotNonStActCnt30D := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
                                     T_SrcClassType < 2 => -99998,
																		 Subject.AotNonStActCnt30D);
Event: => P9_AotNonStActCntEv := MAP(T9_AddrPopFlag=0 => -99999,
                                     T_SrcClassType < 2 => -99998,
																		 Location.AotNonStActCntEv);
Event: => P9_AotNonStActCnt30D := MAP(T9_AddrPopFlag=0 => -99999,
                                     T_SrcClassType < 2 => -99998,
																		 Location.AotNonStActCnt30D);
Event: => P15_AotNonStActCntEv := MAP(T15_SsnPopFlag=0 => -99999,
                                      T_SrcClassType < 2 => -99998,
																			rSsn.AotNonStActCntEv);
Event: => P15_AotNonStActCnt30D := MAP(T15_SsnPopFlag=0 => -99999,
                                      T_SrcClassType < 2 => -99998,
																			rSsn.AotNonStActCnt30D);
Event: => P16_AotNonStActCntEv := MAP(T16_PhnPopFlag=0 => -99999,
                                  T_SrcClassType < 2 => -99998,
																	rPhone.AotNonStActCntEv);
Event: => P16_AotNonStActCnt30D := MAP(T16_PhnPopFlag=0 => -99999,
                                  T_SrcClassType < 2 => -99998,
																	rPhone.AotNonStActCnt30D);
Event: => P17_AotNonStActCntEv := MAP(T17_EmailPopFlag=0 => -99999,
                                      T_SrcClassType < 2 => -99998,
																			rEmail.AotNonStActCntEv);
Event: => P17_AotNonStActCnt30D := MAP(T17_EmailPopFlag=0 => -99999,
                                      T_SrcClassType < 2 => -99998,
																			rEmail.AotNonStActCnt30D);
Event: => P18_AotNonStActCntEv := MAP(T18_IpAddrPopFlag=0 => -99999,
                                      T_SrcClassType < 2 => -99998,
																			rInternetProtocol.AotNonStActCntEv);
Event: => P18_AotNonStActCnt30D := MAP(T18_IpAddrPopFlag=0 => -99999,
                                      T_SrcClassType < 2 => -99998,
																			rInternetProtocol.AotNonStActCnt30D);
Event: => P19_AotNonStActCntEv := MAP(T19_BnkAcctPopFlag=0 => -99999,
                                      T_SrcClassType < 2 => -99998,
																			rBankAccount.AotNonStActCntEv);
Event: => P19_AotNonStActCnt30D := MAP(T19_BnkAcctPopFlag=0 => -99999,
                                      T_SrcClassType < 2 => -99998,
																			rBankAccount.AotNonStActCnt30D);
Event: => P20_AotNonStActCntEv := MAP(T20_DlPopFlag=0 => -99999,
                                      T_SrcClassType < 2 => -99998,
																			rDriversLicense.AotNonStActCntEv);
Event: => P20_AotNonStActCnt30D := MAP(T20_DlPopFlag=0 => -99999,
                                      T_SrcClassType < 2 => -99998,
																			rDriversLicense.AotNonStActCnt30D);
Event: => P1_AotIdNewKrAftIdActCntEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
                                            T_SrcClassType < 2 OR P1_AotIdKrActFlagEv < 1 => -99998,
																						P1_AotIdKrActNewDtEv < 0 => -99997,
																						Subject.AotIdNewKrAftIdActCntEv);
Event: => P9_AotAddrNewKrAftIdActCntEv := MAP(T9_AddrPopFlag=0 => -99999,
                                              T_SrcClassType < 2 OR P9_AotAddrKrActFlagEv < 1 => -99998,
																							P9_AotAddrKrActNewDtEv < 0 => -99997,
																							Location.AotAddrNewKrAftIdActCntEv);
Event: => P15_AotSsnNewKrAftIdActCntEv := MAP(T15_SsnPopFlag=0 => -99999,
                                              T_SrcClassType < 2 OR P15_AotSsnKrActFlagEv < 1 => -99998,
																							P15_AotSsnKrActNewDtEv < 0 => -99997,
																							rSsn.AotSsnNewKrAftIdActCntEv);
Event: => P16_AotPhnNewKrAftIdActCntEv := MAP(T16_PhnPopFlag=0 => -99999,
                                              T_SrcClassType < 2 OR P16_AotPhnKrActFlagEv < 1 => -99998,
																							P16_AotPhnKrActNewDtEv < 0 => -99997,
																							rPhone.AotPhnNewKrAftIdActCntEv);
Event: => P17_AotEmlNewKrAftIdActCntEv := MAP(T17_EmailPopFlag=0 => -99999,
                                              T_SrcClassType < 2 OR P17_AotEmailKrActFlagEv < 1 => -99998,
																							P17_AotEmailKrActNewDtEv < 0 => -99997,
																							rEmail.AotEmlNewKrAftIdActCntEv);
Event: => P18_AotIpNewKrAftIdActCntEv := MAP(T18_IpAddrPopFlag=0 => -99999,
                                             T_SrcClassType < 2 OR P18_AotIpAddrKrActFlagEv < 1 => -99998,
																						 P18_AotIpAddrKrActNewDtEv < 0 => -99997,
																						 rInternetProtocol.AotIpNewKrAftIdActCntEv);
Event: => P19_AotBkAcNewKrAftIdActCntEv := MAP(T19_BnkAcctPopFlag=0 => -99999,
                                               T_SrcClassType < 2 OR P19_AotBnkAcctKrActFlagEv < 1 => -99998,
																							 P19_AotBnkAcctKrActNewDtEv < 0 => -99997,
																							 rBankAccount.AotBkAcNewKrAftIdActCntEv);
Event: => P20_AotDlNewKrAftIdActCntEv := MAP(T20_DlPopFlag=0 => -99999,
                                             T_SrcClassType < 2 OR P20_AotDlKrActFlagEv < 1 => -99998,
																						 P20_AotDlKrActNewDtEv < 0 => -99997,
																						 rDriversLicense.AotDlNewKrAftIdActCntEv);
Event: => P1_AotIdNewKrAftAddActCntEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
                                         T_SrcClassType < 2 OR P1_AotIdKrActFlagEv < 1 => -99998,
																				 P1_AotIdKrActNewDtEv < 0 => -99997,
																				 Subject.AotIdNewKrAftAddActCntEv);
Event: => P9_AotAddrNewKrAftAddActCntEv := MAP(T9_AddrPopFlag=0 => -99999,
                                               T_SrcClassType < 2 OR P9_AotAddrKrActFlagEv < 1 => -99998,
																							 P9_AotAddrKrActNewDtEv < 0 => -99997,
																							 Location.AotAddrNewKrAftAddActCntEv);
Event: => P15_AotSsnNewKrAftAddActCntEv := MAP(T15_SsnPopFlag=0 => -99999,
                                               T_SrcClassType < 2 OR P15_AotSsnKrActFlagEv < 1 => -99998,
																							 P15_AotSsnKrActNewDtEv < 0 => -99997,
																							 rSsn.AotSsnNewKrAftAddActCntEv);
Event: => P16_AotPhnNewKrAftAddActCntEv := MAP(T16_PhnPopFlag=0 => -99999,
                                               T_SrcClassType < 2 OR P16_AotPhnKrActFlagEv < 1 => -99998,
																							 P16_AotPhnKrActNewDtEv < 0 => -99997,
																							 rPhone.AotPhnNewKrAftAddActCntEv);
Event: => P17_AotEmlNewKrAftAddActCntEv := MAP(T17_EmailPopFlag=0 => -99999,
                                               T_SrcClassType < 2 OR P17_AotEmailKrActFlagEv < 1 => -99998,
																							 P17_AotEmailKrActNewDtEv < 0 => -99997,
																							 rEmail.AotEmlNewKrAftAddActCntEv);
Event: => P18_AotIpNewKrAftAddActCntEv := MAP(T18_IpAddrPopFlag=0 => -99999,
                                               T_SrcClassType < 2 OR P18_AotIpAddrKrActFlagEv < 1 => -99998,
																							 P18_AotIpAddrKrActNewDtEv < 0 => -99997,
																							 rInternetProtocol.AotIpNewKrAftAddActCntEv);
Event: => P19_AotBkAcNewKrAftAddActCntEv := MAP(T19_BnkAcctPopFlag=0 => -99999,
                                               T_SrcClassType < 2 OR P19_AotBnkAcctKrActFlagEv < 1 => -99998,
																							 P19_AotBnkAcctKrActNewDtEv < 0 => -99997,
																							 rBankAccount.AotBkAcNewKrAftAddActCntEv);
Event: => P20_AotDlNewKrAftAddActCntEv := MAP(T20_DlPopFlag=0 => -99999,
                                          T_SrcClassType < 2 OR P20_AotDlKrActFlagEv < 1 => -99998,
																					P20_AotDlKrActNewDtEv < 0 => -99997,
																					rDriversLicense.AotDlNewKrAftAddActCntEv);
Event: => P1_AotIdNewKrAftNonStActCntEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
                                               T_SrcClassType < 2 OR P1_AotIdKrActFlagEv < 1 => -99998,
																							 P1_AotIdKrActNewDtEv < 0 => -99997,
																							 Subject.AotIdNewKrAftNonStActCntEv);
Event: => P9_AotAddrNewKrAftNonStActCntEv := MAP(T9_AddrPopFlag=0 => -99999,
                                                 T_SrcClassType < 2 OR P9_AotAddrKrActFlagEv < 1 => -99998,
																								 P9_AotAddrKrActNewDtEv < 0 => -99997,
																								 Location.AotAddrNewKrAftNonStActCntEv);
Event: => P15_AotSsnNewKrAftNonStActCntEv := MAP(T15_SsnPopFlag=0 => -99999,
                                                 T_SrcClassType < 2 OR P15_AotSsnKrActFlagEv < 1 => -99998,
																								 P15_AotSsnKrActNewDtEv < 0 => -99997,
																								 rSsn.AotSsnNewKrAftNonStActCntEv);
Event: => P16_AotPhnNewKrAftNonStActCntEv := MAP(T16_PhnPopFlag=0 => -99999,
                                                 T_SrcClassType < 2 OR P16_AotPhnKrActFlagEv < 1 => -99998,
																								 P16_AotPhnKrActNewDtEv < 0 => -99997,
																								 rPhone.AotPhnNewKrAftNonStActCntEv);
Event: => P17_AotEmlNewKrAftNonStActCntEv := MAP(T17_EmailPopFlag=0 => -99999,
                                                 T_SrcClassType < 2 OR P17_AotEmailKrActFlagEv < 1 => -99998,
																								 P17_AotEmailKrActNewDtEv < 0 => -99997,
																								 rEmail.AotEmlNewKrAftNonStActCntEv);
Event: => P18_AotIpNewKrAftNonStActCntEv := MAP(T18_IpAddrPopFlag=0 => -99999,
                                                T_SrcClassType < 2 OR P18_AotIpAddrKrActFlagEv < 1 => -99998,
																								P18_AotIpAddrKrActNewDtEv < 0 => -99997,
																								rInternetProtocol.AotIpNewKrAftNonStActCntEv);
Event: => P19_AotBkAcNewKrAftNonStActCntEv := MAP(T19_BnkAcctPopFlag=0 => -99999,
                                                  T_SrcClassType < 2 OR P19_AotBnkAcctKrActFlagEv < 1 => -99998,
																									P19_AotBnkAcctKrActNewDtEv < 0 => -99997,
																									rBankAccount.AotBkAcNewKrAftNonStActCntEv);
Event: => P20_AotDlNewKrAftNonStActCntEv := MAP(T20_DlPopFlag=0 =>  -99999,
                                                T_SrcClassType < 2 OR P20_AotDlKrActFlagEv < 1 => -99998,
																								P20_AotDlKrActNewDtEv < 0 => -99997,
																								rDriversLicense.AotDlNewKrAftNonStActCntEv);
Event: => P9_AotIdCurrProfUsngAddrCntEv := MAP(T9_AddrPopFlag=0 => -99999,
                                               T_SrcClassType < 2 => -99998,
																							 ALL(AddressEvent.Transaction,P1_AotIdCurrProfFlag < 0) => -99997,
																							 Location.AotIdCurrProfUsngAddrCntEv);
Event: => P15_AotIdCurrProfUsngSsnCntEv := MAP(T15_SsnPopFlag=0 => -99999,
                                               T_SrcClassType < 2 => -99998,
																							 ALL(SsnEvent.Transaction,P1_AotIdCurrProfFlag < 0) => -99997,
																							 rSsn.AotIdCurrProfUsngSsnCntEv);
Event: => P16_AotIdCurrProfUsngPhnCntEv := MAP(T16_PhnPopFlag=0 => -99999,
                                               T_SrcClassType < 2 => -99998,
																							 ALL(PhoneEvent.Transaction,P1_AotIdCurrProfFlag < 0) => -99997,
																							 rPhone.AotIdCurrProfUsngPhnCntEv);
Event: => P17_AotIdCurrProfUsngEmlCntEv := MAP(T17_EmailPopFlag=0 => -99999,
                                               T_SrcClassType < 2 => -99998,
																							 ALL(EmailEvent.Transaction,P1_AotIdCurrProfFlag < 0) => -99997,
																							 rEmail.AotIdCurrProfUsngEmlCntEv);
Event: => P18_AotIdCurrProfUsngIpCntEv := MAP(T18_IpAddrPopFlag=0 => -99999,
                                              T_SrcClassType < 2 => -99998,
																							ALL(InternetProtocolEvent.Transaction,P1_AotIdCurrProfFlag < 0) => -99997,
																							rInternetProtocol.AotIdCurrProfUsngIpCntEv);
Event: => P19_AotIdCurrProfUsngBkAcCntEv := MAP(T19_BnkAcctPopFlag=0 => -99999,
                                                T_SrcClassType < 2 => -99998,
																								ALL(BankAccountEvent.Transaction,P1_AotIdCurrProfFlag < 0) => -99997,
																								rBankAccount.AotIdCurrProfUsngBkAcCntEv);
Event: => P20_AotIdCurrProfUsngDlCntEv := MAP(T20_DlPopFlag=0 => -99999,
                                              T_SrcClassType < 2 => -99998,
																							ALL(DriversLicenseEvent.Transaction,P1_AotIdCurrProfFlag < 0) => -99997,
																							rDriversLicense.AotIdCurrProfUsngDlCntEv);
Event: => P9_AotIdHistProfUsngAddrCntEv := MAP(T9_AddrPopFlag=0 => -99999,
                                               T_SrcClassType < 2 => -99998,
																							 ALL(AddressEvent.Transaction,P1_AotIdCurrProfFlag < 0)  => -99997,
																							 Location.AotIdHistProfUsngAddrCntEv);
Event: => P15_AotIdHistProfUsngSsnCntEv := MAP(T15_SsnPopFlag=0 => -99999,
                                               T_SrcClassType < 2 => -99998,
																							 ALL(SsnEvent.Transaction,P1_AotIdCurrProfFlag < 0) => -99997,
																							 rSsn.AotIdHistProfUsngSsnCntEv);
Event: => P16_AotIdHistProfUsngPhnCntEv := MAP(T16_PhnPopFlag=0 => -99999,
                                               T_SrcClassType < 2 => -99998,
																							 ALL(PhoneEvent.Transaction,P1_AotIdCurrProfFlag < 0) => -99997,
																							 rPhone.AotIdHistProfUsngPhnCntEv);
Event: => P17_AotIdHistProfUsngEmlCntEv := MAP(T17_EmailPopFlag=0 => -99999,
                                               T_SrcClassType < 2 => -99998,
																							 ALL(EmailEvent.Transaction,P1_AotIdCurrProfFlag < 0) => -99997,
																							 rEmail.AotIdHistProfUsngEmlCntEv);
Event: => P18_AotIdHistProfUsngIpCntEv := MAP(T18_IpAddrPopFlag=0 => -99999,
                                              T_SrcClassType < 2 => -99998,
																							ALL(InternetProtocolEvent.Transaction,P1_AotIdCurrProfFlag < 0) => -99997,
																							rInternetProtocol.AotIdHistProfUsngIpCntEv);
Event: => P19_AotIdHistProfUsngBkAcCntEv := MAP(T19_BnkAcctPopFlag=0 => -99999,
                                            T_SrcClassType < 2 => -99998,
																						ALL(BankAccountEvent.Transaction,P1_AotIdCurrProfFlag < 0) => -99997,
																						rBankAccount.AotIdHistProfUsngBkAcCntEv);
Event: => P20_AotIdHistProfUsngDlCntEv := MAP(T20_DlPopFlag=0 => -99999,
                                              T_SrcClassType < 2 => -99998,
																							ALL(DriversLicenseEvent.Transaction,P1_AotIdCurrProfFlag < 0) => -99997,
																							rDriversLicense.AotIdHistProfUsngDlCntEv);
Event: => P9_AotIdUsngAddrCntEv := MAP(T9_AddrPopFlag=0 => -99999,
                                       T_SrcClassType < 2 => -99998,
																			 ALL(AddressEvent.Transaction,P1_AotIdCurrProfFlag < 0) => -99997,
																			 Location.AotIdUsngAddrCntEv);
Event: => P15_AotIdUsngSsnCntEv := MAP(T15_SsnPopFlag=0 => -99999,
                                       T_SrcClassType < 2 => -99998,
																			 ALL(SsnEvent.Transaction,P1_AotIdCurrProfFlag < 0) => -99997,
																			 rSsn.AotIdUsngSsnCntEv);
Event: => P16_AotIdUsngPhnCntEv := MAP(T16_PhnPopFlag=0 => -99999,
                                       T_SrcClassType < 2 => -99998,
																			 ALL(PhoneEvent.Transaction,P1_AotIdCurrProfFlag < 0) => -99997,
																			 rPhone.AotIdUsngPhnCntEv);
Event: => P17_AotIdUsngEmailCntEv := MAP(T17_EmailPopFlag=0 => -99999,
                                         T_SrcClassType < 2 => -99998,
																				 ALL(EmailEvent.Transaction,P1_AotIdCurrProfFlag < 0) => -99997,
																				 rEmail.AotIdUsngEmailCntEv);
Event: => P18_AotIdUsngIpAddrCntEv := MAP(T18_IpAddrPopFlag=0 => -99999,
                                          T_SrcClassType < 2 => -99998,
																					ALL(InternetProtocolEvent.Transaction,P1_AotIdCurrProfFlag < 0) => -99997,
																					rInternetProtocol.AotIdUsngIpAddrCntEv);
Event: => P19_AotIdUsngBnkAcctCntEv := MAP(T19_BnkAcctPopFlag=0 => -99999,
                                            T_SrcClassType < 2 => -99998,
																						ALL(BankAccountEvent.Transaction,P1_AotIdCurrProfFlag < 0) => -99997,
																						rBankAccount.AotIdUsingBnkAcctCntEv);
Event: => P20_AotIdUsngDlCntEv := MAP(T20_DlPopFlag=0 => -99999,
                                      T_SrcClassType < 2 => -99998,
																			ALL(DriversLicenseEvent.Transaction,P1_AotIdCurrProfFlag < 0) => -99997,
																			rDriversLicense.AotIdUsngDlCntEv);
// Event: => P9_AotHiIdCurrProfUsngAddrCntEv := MAP(T9_AddrPopFlag=0 => -99999,
                                                 // T_SrcClassType < 2 OR P9_AotIdCurrProfUsngAddrCntEv < 1 => -99998,
																								 // Location.AotHiIdCurrProfUsngAddrCntEv);
// Event: => P15_AotHiIdCurrProfUsngSsnCntEv := MAP(T15_SsnPopFlag=0 => -99999,
                                                 // T_SrcClassType < 2 OR P15_AotIdCurrProfUsngSsnCntEv < 1 => -99998,
																								 // rSsn.AotHiIdCurrProfUsngSsnCntEv);
// Event: => P16_AotHiIdCurrProfUsngPhnCntEv := MAP(T16_PhnPopFlag=0 => -99999,
                                                 // T_SrcClassType < 2 OR P16_AotIdCurrProfUsngPhnCntEv < 1 => -99998,
																								 // rPhone.AotHiIdCurrProfUsngPhnCntEv);
// Event: => P17_AotHiIdCurrProfUsngEmlCntEv := MAP(T17_EmailPopFlag=0 => -99999,
                                                 // T_SrcClassType < 2 OR P17_AotIdCurrProfUsngEmlCntEv < 1 => -99998,
																								 // rEmail.AotHiIdCurrProfUsngEmlCntEv);
// Event: => P18_AotHiIdCurrProfUsngIpCntEv := MAP(T18_IPAddrPopFlag=0 => -99999,
                                                // T_SrcClassType < 2 OR P18_AotIdCurrProfUsngIpCntEv < 1 => -99998,
																								// rInternetProtocol.AotHiIdCurrProfUsngIpCntEv);
// Event: => P19_AotHiIdCurrProfUsngBkAcCntEv := MAP(T19_BnkAcctPopFlag=0 => -99999,
                                                  // T_SrcClassType < 2 OR P19_AotIdCurrProfUsngBkAcCntEv < 1 => -99998,
																									// rBankAccount.AotHiIdCurrProfUsngBkAcCntEv);
// Event: => P20_AotHiIdCurrProfUsngDlCntEv := MAP(T20_DlPopFlag=0 => -99999,
                                                // T_SrcClassType < 2 OR P20_AotIdCurrProfUsngDlCntEv < 1 => -99998,
																								// rDriversLIcense.AotHiIdCurrProfUsngDlCntEv);

//Web NAC Collision Attribues
Event: => P1_AotIdNacCollActCntEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
                                         T_SrcClassType < 2 => -99998,
                                         ALL(PersonEvent.Transaction,T_SrcType=-99997) => -99997,
																				 Subject.AotIdNacCollActCntEv);
Event: => P1_AotIdNacCollFlagEv := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
                                       T_SrcClassType < 2 => -99998,
																			 ALL(PersonEvent.Transaction,T_SrcType=-99997)=>-99997,
																			 P1_AotIdNacCollActCntEv > 0 => 1, 0);
Event: => P1_AotIdNacCollNewDt := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
                                      T_SrcClassType < 2 OR P1_AotIdNacCollFlagEv < 1 => -99998,
																			INTEGER(Subject.SrcType11.T_ActDtEcho));
Event: => P1_AotIdNacCollNewType := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
                                        T_SrcClassType < 2 OR P1_AotIdNacCollFlagEv < 1 => -99998,
																				ALL(PersonEvent.Transaction,T_InpReasonDescEcho=-99999) => -99997,
																				Subject.SrcType11.T_InpReasonDescEcho = 'Identity associated with NAC level 1 collision' => 1,
																				Subject.SrcType11.T_InpReasonDescEcho = 'Identity associated with NAC level 2 collision' => 2);

//Unscorable Attributes
Event: => P1_IdRiskUnscrbleFlag := MAP((T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0) OR T_SrcClassType < 2 => 1, 0);
Event: => P9_AddrRiskUnscrbleFlag := 1;
Event: => P15_SsnRiskUnscrbleFlag := 1;
Event: => P16_PhnRiskUnscrbleFlag := 1;
Event: => P17_EmailRiskUnscrbleFlag := 1;
Event: => P18_IpAddrRiskUnscrbleFlag := 1;
Event: => P19_BnkAcctRiskUnscrbleFlag := 1;
Event: => P20_DlRiskUnscrbleFlag := 1;

//Element Risk Attributes
Event: => T1_MinorIdFlag := MAP((T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0) OR T_DobPopFlag=0 => -99999,
                                T_SrcClassType < 4 => -99998,
																ALL(PersonEvent.Transaction,T1_IdAge=-99997) => -99997,
																T1_IdAge < 18 => 1, 0);
Event: => T9_IdCurrProfUsngAddrCntEv := MAP(T9_AddrPopFlag=0 => -99999,
                                            T_SrcClassType < 4 => -99998,
																						COUNT(Location.AddressEvent(EventDate <= Event.EventDate AND Transaction.T_SrcClassType IN [2,3,4]).Transaction{T_PersonUidEcho}));
Event: => T15_IdCurrProfUsngSsnCntEv := MAP(T15_SsnPopFlag=0 => -99999,
                                            T_SrcClassType < 4 => -99998,
																					  COUNT(rSsn.SsnEvent(EventDate<=Event.EventDate AND Event.T_SrcClassType IN [2,3,4]).Transaction{T_PersonUidEcho}));
Event: => T20_IdCurrProfUsngDLCntEv := MAP(T20_DlPopFlag=0 => -99999,
                                           T_SrcClassType < 4 => -99998,
																					 COUNT(rDriversLicense.DriversLicenseEvent(EventDate<=Event.EventDate AND Event.T_SrcClassType IN [2,3,4]).Transaction{T_PersonUidEcho}));
Event: => T19_IdCurrProfUsngBnkAcctCntEv := MAP(T19_BnkAcctPopFlag=0 => -99999,
                                                T_SrcClassType < 4 => -99998,
																								COUNT(rBankAccount.BankAccountEvent(EventDate<=Event.EventDate AND Event.T_SrcClassType IN [2,3,4]).Transaction{T_PersonUidEcho}));
Event: => T9_AddrValType := MAP(T9_AddrPopFlag=0 => -99999,
                                T_SrcClassType < 4 OR T_IsBcShllHitFlag < 1 => -99998,
																addrvalflag = '' => -99997,
																addrvalflag);
Event: => T9_AddrMailDropType := MAP(T9_AddrPopFlag=0 => -99999,
                                     T_SrcClassType < 4 OR T_IsBcShllHitFlag < 1 => -99998,
                                     drop_indicator:Null OR drop_indicator='' => -99997,
																		 drop_indicator);
Event: => T15_SsnValType := MAP(T15_SsnPopFlag=0 => -99999,
                                T_SrcClassType < 4 OR T_IsBcShllHitFlag < 1 => -99998,
																STRING(socsvalflag)=''=> -99997,
																STRING(socsvalflag));
Event: => T20_DlValType := MAP(T20_DlPopFlag=0 => -99999,
                               T_SrcClassType < 4 OR T_IsBcShllHitFlag < 1 => -99998,
															 STRING(drlcvalflag)='' => -99997,
															 STRING(drlcvalflag));
Event: => T16_PhnValType := MAP(T16_PhnPopFlag=0 => -99999,
                                T_SrcClassType < 4 OR T_IsBcShllHitFlag < 1 => -99998,
																hphonevalflag='' => -99997,
																hphonevalflag);
Event: => T16_IsPhnMetaHitFlag := MAP(T16_PhnPopFlag=0 => -99999,
                                      PhonesMetaHit=TRUE => 1, 0);
Event: => T16_PhnMetaNewVendDt := MAP(T16_PhnPopFlag=0 => -99999,
                                      T_SrcClassType < 4 OR T16_IsPhnMetaHitFlag < 1 => -99998,
																			phone_vendor_first_reported_dt:Null OR NOT ISVALIDDATE(phone_vendor_first_reported_dt) => -99997,
																			INTEGER(phone_vendor_first_reported_dt));
Event: => T16_PhnMetaOldVendDt := MAP(T16_PhnPopFlag=0 => -99999,
                                      T_SrcClassType < 4 OR T16_IsPhnMetaHitFlag < 1 => -99998,
																			phone_vendor_last_reported_dt:Null OR NOT ISVALIDDATE(phone_vendor_last_reported_dt) => -99997,
																			phone_vendor_last_reported_dt > T_ActDtEcho => INTEGER(T_ActDtEcho),
																			INTEGER(phone_vendor_last_reported_dt));
Event: => T9_AddrPoBoxMultCurrIdFlagEv := MAP(T9_AddrPopFlag=0 => -99999,
                                              T_SrcClassType < 4 => -99998,
																							T9_AddrType != 'P' => -99997,
																							T9_AddrType='P' AND T9_IdCurrProfUsngAddrCntEv >= 2 => 1,0);
Event: => T9_AddrIsVacantFlag := MAP(T9_AddrPopFlag=0 => -99999,
                                     T_SrcClassType < 4 OR T_IsBcShllHitFlag < 1 => -99998,
																		 address_vacancy_indicator:Null OR address_vacancy_indicator='' => -99997,
																		 address_vacancy_indicator='Y' => 1, 0);	
Event: => T9_AddrIsInvalidFlag := MAP(T9_AddrPopFlag=0 => -99999,
                                      T_SrcClassType < 4 OR T_IsBcShllHitFlag < 1 => -99998,
																			T9_AddrValType=-99997=> -99997,
																			TRIM(T9_AddrValType) = 'N' => 1, 0);
Event: => T9_AddrIsCmraFlag := MAP(T9_AddrPopFlag=0 => -99999,
                                   T_SrcClassType < 4 OR T_IsBcShllHitFlag < 1 => -99998,
																	 T9_AddrMailDropType=-99997 => -99997,
																	 T9_AddrMailDropType = 'C' => 1, 0);
Event: => T15_SsnMultCurrIDFlagEv := MAP(T15_SsnPopFlag=0 => -99999,
                                         T_SrcClassType < 4 => -99998,
																				 T15_IdCurrProfUsngSsnCntEv >= 2 => 1, 0);
Event: => T15_SsnIsInvalidFlag := MAP(T15_SsnPopFlag=0 => -99999,
                                      T_SrcClassType < 4 OR T_IsBcShllHitFlag < 1 => -99998,
																			ALL(SsnEvent.Transaction,T15_SsnValType=-99997) => -99997,
																			T15_SsnValType = 1 => 1, 0);
Event: => T20_DlMultCurrIdFlagEv := MAP(T20_DlPopFlag=0 => -99999,
                                        T_SrcClassType < 4 => -99998,
																				T20_IdCurrProfUsngDLCntEv >=2 => 1, 0);
Event: => T20_DlIsInvalidFlag := MAP(T20_DlPopFlag=0 => -99999,
                                     T_SrcClassType < 4 OR T_IsBcShllHitFlag < 1 => -99998,
																		 ALL(DriversLicenseEvent.Transaction,T20_DlValType=-99997) => -99997,
																		 T20_DlValType IN ['1','3'] => 1, 0);
Event: => T16_PhnPrePdFlag := MAP(T16_PhnPopFlag=0 => -99999,
                                  T_SrcClassType < 4 OR T16_IsPhnMetaHitFlag < 1 => -99998,
																	phone_prepaid='' OR phone_prepaid:Null => -99997,
																	phone_prepaid); 
Event: => T16_PhnIsInvalidFlag := MAP(T16_PhnPopFlag=0 => -99999,
                                  T_SrcClassType < 4 OR T_IsBcShllHitFlag < 1 => -99998,
																	T16_PhnValType=-99997 => -99997,
																	T16_PhnValType = '0' => 1, 0);
Event: => T19_BnkAcctMultCurrIDFlagEv := MAP(T19_BnkAcctPopFlag=0 => -99999,
                                             T_SrcClassType < 4 => -99998,
																						 T19_IdCurrProfUsngBnkAcctCntEv >=2 => 1, 0);

//first act date attributes
Event: => P1_IdActOldDt := MAP(T1_LexIdPopFlag=0 AND T1_RinIdPopFlag=0 => -99999,
                               T_SrcClassType < 2 OR P1_AotIdActCntEv=0 => -99998,
															 MIN(Subject.PersonEvent.Transaction(T_SrcClassType=4),INTEGER(T_ActDtEcho)));
Event: => P9_IdActOldDt := MAP(T9_AddrPopFlag=0 => -99999,
                               T_SrcClassType < 2 OR P9_AotIdActCntEv=0 => -99998,
															 MIN(Location.AddressEvent.Transaction(T_SrcClassType=4),INTEGER(T_ActDtEcho)));
Event: => P15_IDActOldDt := MAP(T15_SsnPopFlag=0 => -99999,
                                T_SrcClassType < 2 OR P15_AotIdActCntEv=0 => -99998,
															  MIN(rSsn.SsnEvent.Transaction(T_SrcClassType=4),INTEGER(T_ActDtEcho)));
Event: => P16_IDActOldDt := MAP(T16_PhnPopFlag=0 => -99999,
                                T_SrcClassType < 2 OR P16_AotIdActCntEv=0 => -99998,
															  MIN(rPhone.PhoneEvent.Transaction(T_SrcClassType=4),INTEGER(T_ActDtEcho)));
Event: => P17_IDActOldDt := MAP(T17_EmailPopFlag=0 => -99999,
                                T_SrcClassType < 2 OR P17_AotIdActCntEv=0 => -99998,
															  MIN(rEmail.EmailEvent.Transaction(T_SrcClassType=4),INTEGER(T_ActDtEcho)));
Event: => P18_IDActOldDt := MAP(T18_IpAddrPopFlag=0 => -99999,
                                T_SrcClassType < 2 OR P18_AotIdActCntEv=0 => -99998,
															  MIN(rInternetProtocol.InternetProtocolEvent.Transaction(T_SrcClassType=4),INTEGER(T_ActDtEcho)));
Event: => P19_IDActOldDt := MAP(T19_BnkAcctPopFlag=0 => -99999,
                                T_SrcClassType < 2 OR P19_AotIdActCntEv=0 => -99998,
															  MIN(rBankAccount.BankAccountEvent.Transaction(T_SrcClassType=4),INTEGER(T_ActDtEcho)));
Event: => P20_IDActOldDt := MAP(T20_DlPopFlag=0 => -99999,
                                T_SrcClassType < 2 OR P20_AotIdActCntEv=0 => -99998,
															  MIN(rDriversLicense.DriversLicenseEvent.Transaction(T_SrcClassType=4),INTEGER(T_ActDtEcho)));


//DL Attributes
DriversLicense: => AotActCntEv := COUNT(DriversLicenseEvent.Transaction);
DriversLicense: => AotSrc1ActCntEv := COUNT(DriversLicenseEvent.Transaction(T_SrcClassType<2));
DriversLicense: => AotSrc1ActOnlyFlag := AotActCntEv = AotSrc1ActCntEv; // if the count of src 1 = the transaction count

DriversLicense: => AotDlKrActCntEv := MIN(COUNT(DriversLicenseEvent.Transaction(T20_DlIsKrFlag=1 AND T_InAgencyFlag=1)),9999);
DriversLicense: => AotDlKrActShrdCntEv := MIN(COUNT(DriversLicenseEvent.Transaction(T20_DlIsKrFlag=1 AND T_InAgencyFlag=0)),9999);
DriversLicense: => AotDlKrActOldDtEv := MIN(DriversLicenseEvent.Transaction(T20_DlIsKrFlag=1 AND T_InAgencyFlag=1),T_ActDtEcho);
DriversLicense: => AotDlKrActNewDtEv := MAX(DriversLicenseEvent.Transaction(T20_DlIsKrFlag=1 AND T_InAgencyFlag=1),T_ActDtEcho);
DriversLicense: => AotDlKrActShrdOldDtEv := MIN(DriversLicenseEvent.Transaction(T20_DlIsKrFlag=1 AND T_InAgencyFlag=0),T_ActDtEcho);
DriversLicense: => AotDlKrActShrdNewDtEv := MAX(DriversLicenseEvent.Transaction(T20_DlIsKrFlag=1 AND T_InAgencyFlag=0),T_ActDtEcho);

DriversLicense: => AotIdActCntEv := MIN(COUNT(DriversLicenseEvent.Transaction(T_SrcClassType=4 AND ActAge>0)),999);
DriversLicense: => AotIdActCnt30D := MIN(COUNT(DriversLicenseEvent.Transaction(T_SrcClassType=4 AND ActAge>0 AND ActAge<=30)),999);
DriversLicense: => AotAddActCntEv := MIN(COUNT(DriversLicenseEvent.Transaction(T_SrcClassType=1 AND ActAge>0)),999);
DriversLicense: => AotAddActCnt30D := MIN(COUNT(DriversLicenseEvent.Transaction(T_SrcClassType=1 AND ActAge>0 AND ActAge<=30)),999);
DriversLicense: => AotNonStActCntEv := MIN(COUNT(DriversLicenseEvent.Transaction((T_SrcClassType=1 OR T_SrcClassType=4) AND ActAge>0)),999);
DriversLicense: => AotNonStActCnt30D := MIN(COUNT(DriversLicenseEvent.Transaction((T_SrcClassType=1 OR T_SrcClassType=4) AND ActAge>0 AND ActAge<=30)),999);

DriversLicense: => AotDlNewKrAftIdActCntEv := MIN(COUNT(DriversLicenseEvent.Transaction(T_SrcClassType=4 AND T_ActDtEcho > DATE(P20_AotDlKrActNewDtEv))),999);
DriversLicense: => AotDlNewKrAftAddActCntEv := MIN(COUNT(DriversLicenseEvent.Transaction(T_SrcClassType=1 AND T_ActDtEcho > DATE(P20_AotDlKrActNewDtEv))),999);
DriversLicense: => AotDlNewKrAftNonStActCntEv := MIN(COUNT(DriversLicenseEvent.Transaction((T_SrcClassType=1 OR T_SrcClassType=4) AND T_ActDtEcho > DATE(P20_AotDlKrActNewDtEv))),999);

DriversLicense: => AotIdCurrProfUsngDlCntEv := MIN(COUNT(DriversLicenseEvent.Transaction(P1_AotIdCurrProfFlag=1){T_PersonUidEcho}),999);
DriversLicense: => AotIdHistProfUsngDlCntEv := MIN(COUNT(DriversLicenseEvent.Transaction(P1_AotIdCurrProfFlag=0){T_PersonUidEcho}),999);
DriversLicense: => AotIdUsngDlCntEv := MIN(COUNT(DriversLicenseEvent.Transaction(P1_AotIdCurrProfFlag=0 OR P1_AotIdCurrProfFlag=1){T_PersonUidEcho}),999);
// DriversLicense: => AotHiIdCurrProfUsngDlCntEv := MIN(COUNT(DriversLicenseEvent.Transaction((P1_AotIdCurrProfFlag=0 OR P1_AotIdCurrProfFlag=1) AND P1_IDRiskIndx=3){T_PersonUidEcho}),999);

//Bank Account Attributes
BankAccount: => AotActCntEv := COUNT(BankAccountEvent.Transaction);
BankAccount: => AotSrc1ActCntEv := COUNT(BankAccountEvent.Transaction(T_SrcClassType<2));
BankAccount: => AotSrc1ActOnlyFlag := AotActCntEv = AotSrc1ActCntEv; // if the count of src 1 = the transaction count

BankAccount: => AotBnkAcctKrActCntEv := MIN(COUNT(BankAccountEvent.Transaction(T19_BnkAcctIsKrFlag=1 AND T_InAgencyFlag=1)),9999);
BankAccount: => AotBnkAcctKrActShrdCntEv := MIN(COUNT(BankAccountEvent.Transaction(T19_BnkAcctIsKrFlag=1 AND T_InAgencyFlag=0)),9999);
BankAccount: => AotBnkAcctKrActOldDtEv := MIN(BankAccountEvent.Transaction(T19_BnkAcctIsKrFlag=1 AND T_InAgencyFlag=1),T_ActDtEcho);
BankAccount: => AotBnkAcctKrActNewDtEv := MAX(BankAccountEvent.Transaction(T19_BnkAcctIsKrFlag=1 AND T_InAgencyFlag=1),T_ActDtEcho);
BankAccount: => AotBnkAcctKrActShrdOldDtEv := MIN(BankAccountEvent.Transaction(T19_BnkAcctIsKrFlag=1 AND T_InAgencyFlag=0),T_ActDtEcho);
BankAccount: => AotBnkAcctKrActShrdNewDtEv := MAX(BankAccountEvent.Transaction(T19_BnkAcctIsKrFlag=1 AND T_InAgencyFlag=0),T_ActDtEcho);

BankAccount: => AotIdActCntEv := MIN(COUNT(BankAccountEvent.Transaction(T_SrcClassType=4 AND ActAge>0)),999);
BankAccount: => AotIdActCnt30D := MIN(COUNT(BankAccountEvent.Transaction(T_SrcClassType=4 AND ActAge>0 AND ActAge<=30)),999);
BankAccount: => AotAddActCntEv := MIN(COUNT(BankAccountEvent.Transaction(T_SrcClassType=1 AND ActAge>0)),999);
BankAccount: => AotAddActCnt30D := MIN(COUNT(BankAccountEvent.Transaction(T_SrcClassType=1 AND ActAge>0 AND ActAge<=30)),999);
BankAccount: => AotNonStActCntEv := MIN(COUNT(BankAccountEvent.Transaction((T_SrcClassType=1 OR T_SrcClassType=4) AND ActAge>0)),999);
BankAccount: => AotNonStActCnt30D := MIN(COUNT(BankAccountEvent.Transaction((T_SrcClassType=1 OR T_SrcClassType=4) AND ActAge>0 AND ActAge<=30)),999);

BankAccount: => AotBkAcNewKrAftIdActCntEv := MIN(COUNT(BankAccountEvent.Transaction(T_SrcClassType=4 AND T_ActDtEcho > DATE(P19_AotBnkAcctKrActNewDtEv))),999);
BankAccount: => AotBkAcNewKrAftAddActCntEv := MIN(COUNT(BankAccountEvent.Transaction(T_SrcClassType=1 AND T_ActDtEcho > DATE(P19_AotBnkAcctKrActNewDtEv))),999);
BankAccount: => AotBkAcNewKrAftNonStActCntEv := MIN(COUNT(BankAccountEvent.Transaction((T_SrcClassType=1 OR T_SrcClassType=4) AND T_ActDtEcho > DATE(P19_AotBnkAcctKrActNewDtEv))),999);

BankAccount: => AotIdCurrProfUsngBkAcCntEv := MIN(COUNT(BankAccountEvent.Transaction(P1_AotIdCurrProfFlag=1){T_PersonUidEcho}),999);
BankAccount: => AotIdHistProfUsngBkAcCntEv := MIN(COUNT(BankAccountEvent.Transaction(P1_AotIdCurrProfFlag=0){T_PersonUidEcho}),999);
BankAccount: => AotIdUsingBnkAcctCntEv := MIN(COUNT(BankAccountEvent.Transaction(P1_AotIdCurrProfFlag=0 OR P1_AotIdCurrProfFlag=1){T_PersonUidEcho}),999);
// BankAccount: => AotHiIdCurrProfUsngBkAcCntEv := MIN(COUNT(BankAccountEvent.Transaction((P1_AotIdCurrProfFlag=0 OR P1_AotIdCurrProfFlag=1) AND P1_IDRiskIndx=3){T_PersonUidEcho}),999);

//Ip Attributes
InternetProtocol: => AotActCntEv := COUNT(InternetProtocolEvent.Transaction);
InternetProtocol: => AotSrc1ActCntEv := COUNT(InternetProtocolEvent.Transaction(T_SrcClassType<2));
InternetProtocol: => AotSrc1ActOnlyFlag := AotActCntEv = AotSrc1ActCntEv; // if the count of src 1 = the transaction count

InternetProtocol: => AotIpAddrKrActCntEv := MIN(COUNT(InternetProtocolEvent.Transaction(T18_IpAddrIsKrFlag=1 AND T_InAgencyFlag=1)),9999);
InternetProtocol: => AotIpAddrKrActShrdCntEv := MIN(COUNT(InternetProtocolEvent.Transaction(T18_IpAddrIsKrFlag=1 AND T_InAgencyFlag=0)),9999);
InternetProtocol: => AotIpAddrKrActOldDtEv := MIN(InternetProtocolEvent.Transaction(T18_IpAddrIsKrFlag=1 AND T_InAgencyFlag=1),T_ActDtEcho);
InternetProtocol: => AotIpAddrKrActNewDtEv := MAX(InternetProtocolEvent.Transaction(T18_IpAddrIsKrFlag=1 AND T_InAgencyFlag=1),T_ActDtEcho);
InternetProtocol: => AotIpAddrKrActShrdOldDtEv := MIN(InternetProtocolEvent.Transaction(T18_IpAddrIsKrFlag=1 AND T_InAgencyFlag=0),T_ActDtEcho);
InternetProtocol: => AotIpAddrKrActShrdNewDtEv := MAX(InternetProtocolEvent.Transaction(T18_IpAddrIsKrFlag=1 AND T_InAgencyFlag=0),T_ActDtEcho);

InternetProtocol: => AotIpAddrSafeActCntEv := MIN(COUNT(InternetProtocolEvent.Transaction(T18_IpAddrIsSafeFlag=1 AND T_InAgencyFlag=1)),9999);
InternetProtocol: => AotIpAddrSafeActOldDtEv := MIN(InternetProtocolEvent.Transaction(T18_IpAddrIsSafeFlag=1 AND T_InAgencyFlag=1),T_ActDtEcho);	
InternetProtocol: => AotIpAddrSafeActNewDtEv := MAX(InternetProtocolEvent.Transaction(T18_IpAddrIsSafeFlag=1 AND T_InAgencyFlag=1),T_ActDtEcho);	

InternetProtocol: => AotIdActCntEv := MIN(COUNT(InternetProtocolEvent.Transaction(T_SrcClassType=4 AND ActAge>0)),999);
InternetProtocol: => AotIdActCnt30D := MIN(COUNT(InternetProtocolEvent.Transaction(T_SrcClassType=4 AND ActAge>0 AND ActAge<=30)),999);
InternetProtocol: => AotAddActCntEv := MIN(COUNT(InternetProtocolEvent.Transaction(T_SrcClassType=1 AND ActAge>0)),999);
InternetProtocol: => AotAddActCnt30D := MIN(COUNT(InternetProtocolEvent.Transaction(T_SrcClassType=1 AND ActAge>0 AND ActAge<=30)),999);
InternetProtocol: => AotNonStActCntEv := MIN(COUNT(InternetProtocolEvent.Transaction((T_SrcClassType=1 OR T_SrcClassType=4) AND ActAge>0)),999);
InternetProtocol: => AotNonStActCnt30D := MIN(COUNT(InternetProtocolEvent.Transaction((T_SrcClassType=1 OR T_SrcClassType=4) AND ActAge>0 AND ActAge<=30)),999);

InternetProtocol: => AotIpNewKrAftIdActCntEv := MIN(COUNT(InternetProtocolEvent.Transaction(T_SrcClassType=4 AND T_ActDtEcho > DATE(P18_AotIpAddrKrActNewDtEv))),999);
InternetProtocol: => AotIpNewKrAftAddActCntEv := MIN(COUNT(InternetProtocolEvent.Transaction(T_SrcClassType=1 AND T_ActDtEcho > DATE(P18_AotIpAddrKrActNewDtEv))),999);
InternetProtocol: => AotIpNewKrAftNonStActCntEv := MIN(COUNT(InternetProtocolEvent.Transaction((T_SrcClassType=1 OR T_SrcClassType=4) AND T_ActDtEcho > DATE(P18_AotIpAddrKrActNewDtEv))),999);

InternetProtocol: => AotIdCurrProfUsngIpCntEv := MIN(COUNT(InternetProtocolEvent.Transaction(P1_AotIdCurrProfFlag=1){T_PersonUidEcho}),999);
InternetProtocol: => AotIdHistProfUsngIpCntEv := MIN(COUNT(InternetProtocolEvent.Transaction(P1_AotIdCurrProfFlag=0){T_PersonUidEcho}),999);
InternetProtocol: => AotIdUsngIpAddrCntEv :=  MIN(COUNT(InternetProtocolEvent.Transaction(P1_AotIdCurrProfFlag=0 OR P1_AotIdCurrProfFlag=1){T_PersonUidEcho}),999);
// InternetProtocol: => AotIdCurrProfUsngIpCntEv := MIN(COUNT(InternetProtocolEvent.Transaction((P1_AotIdCurrProfFlag=0 OR P1_AotIdCurrProfFlag=1) AND P1_IDRiskIndx=3){T_PersonUidEcho}),999);

//Email Attributes
Email: => AotActCntEv := COUNT(EmailEvent.Transaction);
Email: => AotSrc1ActCntEv := COUNT(EmailEvent.Transaction(T_SrcClassType<2));
Email: => AotSrc1ActOnlyFlag := AotActCntEv = AotSrc1ActCntEv; // if the count of src 1 = the transaction count

Email: => AotEmailKrActCntEv := MIN(COUNT(EmailEvent.Transaction(T17_EmailIsKrFlag=1 AND T_InAgencyFlag=1)),9999);
Email: => AotEmailKrActShrdCntEv := MIN(COUNT(EmailEvent.Transaction(T17_EmailIsKrFlag=1 AND T_InAgencyFlag=0)),9999);
Email: => AotEmailKrActOldDtEv := MIN(EmailEvent.Transaction(T17_EmailIsKrFlag=1 AND T_InAgencyFlag=1),T_ActDtEcho);
Email: => AotEmailKrActNewDtEv := MAX(EmailEvent.Transaction(T17_EmailIsKrFlag=1 AND T_InAgencyFlag=1),T_ActDtEcho);
Email: => AotEmailKrActShrdOldDtEv := MIN(EmailEvent.Transaction(T17_EmailIsKrFlag=1 AND T_InAgencyFlag=0),T_ActDtEcho);
Email: => AotEmailKrActShrdNewDtEv := MAX(EmailEvent.Transaction(T17_EmailIsKrFlag=1 AND T_InAgencyFlag=0),T_ActDtEcho);
							
Email: => AotIdActCntEv := MIN(COUNT(EmailEvent.Transaction(T_SrcClassType=4 AND ActAge>0)),999);
Email: => AotIdActCnt30D := MIN(COUNT(EmailEvent.Transaction(T_SrcClassType=4 AND ActAge>0 AND ActAge<=30)),999);
Email: => AotAddActCntEv := MIN(COUNT(EmailEvent.Transaction(T_SrcClassType=1 AND ActAge>0)),999);
Email: => AotAddActCnt30D := MIN(COUNT(EmailEvent.Transaction(T_SrcClassType=1 AND ActAge>0 AND ActAge<=30)),999);
Email: => AotNonStActCntEv := MIN(COUNT(EmailEvent.Transaction((T_SrcClassType=1 OR T_SrcClassType=4) AND ActAge>0)),999);
Email: => AotNonStActCnt30D := MIN(COUNT(EmailEvent.Transaction((T_SrcClassType=1 OR T_SrcClassType=4) AND ActAge>0 AND ActAge<=30)),999);

Email: => AotEmlNewKrAftIdActCntEv := MIN(COUNT(EmailEvent.Transaction(T_SrcClassType=4 AND T_ActDtEcho > DATE(P17_AotEmailKrActNewDtEv))),999);
Email: => AotEmlNewKrAftAddActCntEv := MIN(COUNT(EmailEvent.Transaction(T_SrcClassType=1 AND T_ActDtEcho > DATE(P17_AotEmailKrActNewDtEv))),999);
Email: => AotEmlNewKrAftNonStActCntEv := MIN(COUNT(EmailEvent.Transaction((T_SrcClassType=1 OR T_SrcClassType=4) AND T_ActDtEcho > DATE(P17_AotEmailKrActNewDtEv))),999);		
							
Email: => AotIdCurrProfUsngEmlCntEv := MIN(COUNT(EmailEvent.Transaction(P1_AotIdCurrProfFlag=1){T_PersonUidEcho}),999);
Email: => AotIdHistProfUsngEmlCntEv := MIN(COUNT(EmailEvent.Transaction(P1_AotIdCurrProfFlag=0){T_PersonUidEcho}),999);
Email: => AotIdUsngEmailCntEv := MIN(COUNT(EmailEvent.Transaction(P1_AotIdCurrProfFlag=0 OR P1_AotIdCurrProfFlag=1){T_PersonUidEcho}),999);
// Email: => AotHiIdCurrProfUsngEmlCntEv := MIN(COUNT(EmailEvent.Transaction((P1_AotIdCurrProfFlag=0 OR P1_AotIdCurrProfFlag=1) AND P1_IDRiskIndx=3){T_PersonUidEcho}),999);
							
//Phone attributes
Phone: => AotActCntEv := COUNT(PhoneEvent.Transaction);
Phone: => AotSrc1ActCntEv := COUNT(PhoneEvent.Transaction(T_SrcClassType<2));
Phone: => AotSrc1ActOnlyFlag := AotActCntEv = AotSrc1ActCntEv; // if the count of src 1 = the transaction count

Phone: => AotPhnKrActCntEv := MIN(COUNT(PhoneEvent.Transaction(T16_PhnIsKrFlag=1 AND T_InAgencyFlag=1)),9999);
Phone: => AotPhnKrActShrdCntEv := MIN(COUNT(PhoneEvent.Transaction(T16_PhnIsKrFlag=1 AND T_InAgencyFlag=0)),9999);
Phone: => AotPhnKrActOldDtEv := MIN(PhoneEvent.Transaction(T16_PhnIsKrFlag=1 AND T_InAgencyFlag=1),T_ActDtEcho);
Phone: => AotPhnKrActNewDtEv := MAX(PhoneEvent.Transaction(T16_PhnIsKrFlag=1 AND T_InAgencyFlag=1),T_ActDtEcho);
Phone: => AotPhnKrActShrdOldDtEv := MIN(PhoneEvent.Transaction(T16_PhnIsKrFlag=1 AND T_InAgencyFlag=0),T_ActDtEcho);
Phone: => AotPhnKrActShrdNewDtEv := MAX(PhoneEvent.Transaction(T16_PhnIsKrFlag=1 AND T_InAgencyFlag=0),T_ActDtEcho);

Phone: => AotPhnSafeActCntEv := MIN(COUNT(PhoneEvent.Transaction(T16_PhnIsSafeFlag=1 AND T_InAgencyFlag=1)),9999);
Phone: => AotPhnSafeActOldDtEv := MIN(PhoneEvent.Transaction(T16_PhnIsSafeFlag=1 AND T_InAgencyFlag=0),T_ActDtEcho);
Phone: => AotPhnSafeActNewDtEv := MAX(PhoneEvent.Transaction(T16_PhnIsSafeFlag=1 AND T_InAgencyFlag=0),T_ActDtEcho);

Phone: => AotIdActCntEv := MIN(COUNT(PhoneEvent.Transaction(T_SrcClassType=4 AND ActAge>0)),999);
Phone: => AotIdActCnt30D := MIN(COUNT(PhoneEvent.Transaction(T_SrcClassType=4 AND ActAge>0 AND ActAge<=30)),999);
Phone: => AotAddActCntEv := MIN(COUNT(PhoneEvent.Transaction(T_SrcClassType=1 AND ActAge>0)),999);
Phone: => AotAddActCnt30D := MIN(COUNT(PhoneEvent.Transaction(T_SrcClassType=1 AND ActAge>0 AND ActAge<=30)),999);
Phone: => AotNonStActCntEv  := MIN(COUNT(PhoneEvent.Transaction((T_SrcClassType=1 OR T_SrcClassType=4) AND ActAge>0)),999);
Phone: => AotNonStActCnt30D  := MIN(COUNT(PhoneEvent.Transaction((T_SrcClassType=1 OR T_SrcClassType=4) AND ActAge>0 AND ActAge<=30)),999);

Phone: => AotPhnNewKrAftIdActCntEv := MIN(COUNT(PhoneEvent.Transaction(T_SrcClassType=4 AND T_ActDtEcho > DATE(P16_AotPhnKrActNewDtEv))),999);
Phone: => AotPhnNewKrAftAddActCntEv := MIN(COUNT(PhoneEvent.Transaction(T_SrcClassType=1 AND T_ActDtEcho > DATE(P16_AotPhnKrActNewDtEv))),999);
Phone: => AotPhnNewKrAftNonStActCntEv := MIN(COUNT(PhoneEvent.Transaction((T_SrcClassType=1 OR T_SrcClassType=4) AND T_ActDtEcho > DATE(P16_AotPhnKrActNewDtEv))),999);

Phone: => AotIdCurrProfUsngPhnCntEv := MIN(COUNT(PhoneEvent.Transaction(P1_AotIdCurrProfFlag=1){T_PersonUidEcho}),999);			
Phone: => AotIdHistProfUsngPhnCntEv := MIN(COUNT(PhoneEvent.Transaction(P1_AotIdCurrProfFlag=0){T_PersonUidEcho}),999);			
Phone: => AotIdUsngPhnCntEv := MIN(COUNT(PhoneEvent.Transaction(P1_AotIdCurrProfFlag=0 OR P1_AotIdCurrProfFlag=1){T_PersonUidEcho}),999);			
// Phone: => AotHiIdCurrProfUsngPhnCntEv := MIN(COUNT(PhoneEvent.Transaction((P1_AotIdCurrProfFlag=0 OR P1_AotIdCurrProfFlag=1) AND P1_IDRiskIndx=3){T_PersonUidEcho}),999);			


//SSN attributes
SocialSecurityNumber: => AotActCntEv := COUNT(SsnEvent.Transaction);
SocialSecurityNumber: => AotSrc1ActCntEv := COUNT(SsnEvent.Transaction(T_SrcClassType<2));
SocialSecurityNumber: => AotSrc1ActOnlyFlag := AotActCntEv = AotSrc1ActCntEv; // if the count of src 1 = the transaction count

SocialSecurityNumber: => AotSsnKrActCntEv := MIN(COUNT(SsnEvent.Transaction(T15_SsnIsKrFlag=1 AND T_InAgencyFlag=1)),9999);
SocialSecurityNumber: => AotSsnKrActShrdCntEv := MIN(COUNT(SsnEvent.Transaction(T15_SsnIsKrFlag=1 AND T_InAgencyFlag=0)),9999);
SocialSecurityNumber: => AotSsnKrActOldDtEv := MIN(SsnEvent.Transaction(T15_SsnIsKrFlag=1 AND T_InAgencyFlag=1),T_ActDtEcho);
SocialSecurityNumber: => AotSsnKrActNewDtEv := MAX(SsnEvent.Transaction(T15_SsnIsKrFlag=1 AND T_InAgencyFlag=1),T_ActDtEcho);
SocialSecurityNumber: => AotSsnKrActShrdOldDtEv := MIN(SsnEvent.Transaction(T15_SsnIsKrFlag=1 AND T_InAgencyFlag=0),T_ActDtEcho);
SocialSecurityNumber: => AotSsnKrActShrdNewDtEv := MAX(SsnEvent.Transaction(T15_SsnIsKrFlag=1 AND T_InAgencyFlag=0),T_ActDtEcho);

SocialSecurityNumber: => AotIdActCntEv := MIN(COUNT(SsnEvent.Transaction(T_SrcClassType=4 AND ActAge>0)),999);
SocialSecurityNumber: => AotIdActCnt30D := MIN(COUNT(SsnEvent.Transaction(T_SrcClassType=4 AND ActAge<=30)),999);
SocialSecurityNumber: => AotAddActCntEv := MIN(COUNT(SsnEvent.Transaction(T_SrcClassType=1 AND ActAge>0)),999);
SocialSecurityNumber: => AotAddActCnt30D := MIN(COUNT(SsnEvent.Transaction(T_SrcClassType=1 AND ActAge>0 AND ActAge<=30)),999);
SocialSecurityNumber: => AotNonStActCntEv := MIN(COUNT(SsnEvent.Transaction((T_SrcClassType=1 OR T_SrcClassType=4) AND ActAge>0)),999);
SocialSecurityNumber: => AotNonStActCnt30D := MIN(COUNT(SsnEvent.Transaction((T_SrcClassType=1 OR T_SrcClassType=4) AND ActAge>0 AND ActAge<=30)),999);

SocialSecurityNumber: => AotSsnNewKrAftIdActCntEv := MIN(COUNT(SsnEvent.Transaction(T_SrcClassType=4 AND T_ActDtEcho > DATE(P15_AotSsnKrActNewDtEv))),999);
SocialSecurityNumber: => AotSsnNewKrAftAddActCntEv := MIN(COUNT(SsnEvent.Transaction(T_SrcClassType=1 AND T_ActDtEcho > DATE(P15_AotSsnKrActNewDtEv))),999);
SocialSecurityNumber: => AotSsnNewKrAftNonStActCntEv  := MIN(COUNT(SsnEvent.Transaction((T_SrcClassType=1 OR T_SrcClassType=4) AND T_ActDtEcho > DATE(P15_AotSsnKrActNewDtEv))),999);

SocialSecurityNumber: => AotIdCurrProfUsngSsnCntEv := MIN(COUNT(SsnEvent.Transaction(P1_AotIdCurrProfFlag=1){T_PersonUidEcho}),999);
SocialSecurityNumber: => AotIdHistProfUsngSsnCntEv := MIN(COUNT(SsnEvent.Transaction(P1_AotIdCurrProfFlag=0){T_PersonUidEcho}),999);
SocialSecurityNumber: => AotIdUsngSsnCntEv := MIN(COUNT(SsnEvent.Transaction(P1_AotIdCurrProfFlag=0 OR P1_AotIdCurrProfFlag=1){T_PersonUidEcho}),999);
// SocialSecurityNumber: => AotHiIdCurrProfUsngSsnCntEv := MIN(COUNT(SsnEvent.Transaction((P1_AotIdCurrProfFlag=0 OR P1_AotIdCurrProfFlag=1) AND P1_IDRiskIndx=3){T_PersonUidEcho}),999);

//address attributes
Address: => AotActCntEv := COUNT(AddressEvent);
Address: => AotSrc1ActCntEv := COUNT(AddressEvent(Transaction.T_SrcClassType<2));
Address: => AotSrc1ActOnlyFlag := AotActCntEv = AotSrc1ActCntEv; // if the count of src 1 = the transaction count

Address: => AotAddrKrActCntEv := MIN(COUNT(AddressEvent.Transaction(T9_AddrIsKrFlag=1 AND T_InAgencyFlag=1)),9999);
Address: => AotAddrKrActShrdCntEv := MIN(COUNT(AddressEvent.Transaction(T9_AddrIsKrFlag=1 AND T_InAgencyFlag=0)),9999);
Address: => AotAddrKrActOldDtEv := MIN(AddressEvent.Transaction(T9_AddrIsKrFlag=1 AND T_InAgencyFlag=1),T_ActDtEcho);
Address: => AotAddrKrActNewDtEv := MAX(AddressEvent.Transaction(T9_AddrIsKrFlag=1 AND T_InAgencyFlag=1),T_ActDtEcho);
Address: => AotAddrKrActShrdOldDtEv := MIN(AddressEvent.Transaction(T9_AddrIsKrFlag=1 AND T_InAgencyFlag=0),T_ActDtEcho);
Address: => AotAddrKrActShrdNewDtEv := MAX(AddressEvent.Transaction(T9_AddrIsKrFlag=1 AND T_InAgencyFlag=0),T_ActDtEcho);

Address: => AotAddrSafeActCntEv := MIN(COUNT(AddressEvent.Transaction(T9_AddrIsSafeFlag=1 AND T_InAgencyFlag=1)),9999);
Address: => AotAddrSafeActOldDtEv := MIN(AddressEvent.Transaction(T9_AddrIsSafeFlag=1 AND T_InAgencyFlag=0),T_ActDtEcho);
Address: => AotAddrSafeActNewDtEv := MAX(AddressEvent.Transaction(T9_AddrIsSafeFlag=1 AND T_InAgencyFlag=0),T_ActDtEcho);

Address: => AotIdActCntEv := MIN(COUNT(AddressEvent.Transaction(T_SrcClassType=4 AND ActAge>0)),999);
Address: => AotIdActCnt30D := MIN(COUNT(AddressEvent.Transaction(T_SrcClassType=4 AND ActAge>0 AND ActAge<=30)),999);
Address: => AoTAddActCntEv := MIN(COUNT(AddressEvent.Transaction(T_SrcClassType=1 AND ActAge>0)),999);
Address: => AoTAddActCnt30D := MIN(COUNT(AddressEvent.Transaction(T_SrcClassType=1 AND ActAge>0 AND ActAge<=30)),999);
Address: => AotNonStActCntEv := MIN(COUNT(AddressEvent.Transaction((T_SrcClassType=1 OR T_SrcClassType=4) AND ActAge>0)),999);
Address: => AotNonStActCnt30D := MIN(COUNT(AddressEvent.Transaction((T_SrcClassType=1 OR T_SrcClassType=4) AND ActAge>0 AND ActAge<=30)),999);

Address: => AotAddrNewKrAftIdActCntEv := MIN(COUNT(AddressEvent.Transaction(T_SrcClassType=4 AND T_ActDtEcho > DATE(P9_AotAddrKrActNewDtEv))),999);
Address: => AotAddrNewKrAftAddActCntEv := MIN(COUNT(AddressEvent.Transaction(T_SrcClassType=1 AND T_ActDtEcho > DATE(P9_AotAddrKrActNewDtEv))),999);
Address: => AotAddrNewKrAftNonStActCntEv := MIN(COUNT(AddressEvent.Transaction((T_SrcClassType=1 OR T_SrcClassType=4) AND T_ActDtEcho > DATE(P9_AotAddrKrActNewDtEv))),999);

Address: => AotIdCurrProfUsngAddrCntEv := MIN(COUNT(AddressEvent.Transaction(P1_AotIdCurrProfFlag=1){T_PersonUidEcho}),999);
Address: => AotIdHistProfUsngAddrCntEv := MIN(COUNT(AddressEvent.Transaction(P1_AotIdCurrProfFlag=0){T_PersonUidEcho}),999);
Address: => AotIdUsngAddrCntEv := MIN(COUNT(AddressEvent.Transaction(P1_AotIdCurrProfFlag=0 OR P1_AotIdCurrProfFlag=1){T_PersonUidEcho}),999);
// Address: => AotHiIdCurrProfUsngAddrCntEv := MIN(COUNT(AddressEvent.Transaction((P1_AotIdCurrProfFlag=0 OR P1_AotIdCurrProfFlag=1) AND P1_IDRiskIndx=3){T_PersonUidEcho}),999);

// person attributes
Person: => AotActCntEv := COUNT(PersonEvent.Transaction);
Person: => AotSrc1ActCntEv := COUNT(PersonEvent.Transaction(T_SrcClassType<2));
Person: => AotSrc1ActOnlyFlag := AotActCntEv = AotSrc1ActCntEv; // if the count of src 1 = the transaction count

Person: => AotIdKrActCntEv := MIN(COUNT(PersonEvent.Transaction(T1_IdIsKrFlag=1 AND T_InAgencyFlag=1)),9999);
Person: => AotIdKrActShrdCntEv := MIN(COUNT(PersonEvent.Transaction(T1_IdIsKrFlag=1 AND T_InAgencyFlag=0)),9999);
Person: => AotIdKrActOldDtEv := MIN(PersonEvent.Transaction(T1_IdIsKrFlag=1 AND T_InAgencyFlag=1),T_ActDtEcho);
Person: => AotIdKrActNewDtEv := MAX(PersonEvent.Transaction(T1_IdIsKrFlag=1 AND T_InAgencyFlag=1),T_ActDtEcho);
Person: => AotIdKrActShrdOldDtEv := MIN(PersonEvent.Transaction(T1_IdIsKrFlag=1 AND T_InAgencyFlag=0),T_ActDtEcho);
Person: => AotIdKrActShrdNewDtEv := MAX(PersonEvent.Transaction(T1_IdIsKrFlag=1 AND T_InAgencyFlag=0),T_ActDtEcho);

Person: => AotIdKrAppFrdActCntEv := MIN(COUNT(PersonEvent.Transaction(T1_IdIsKrAppFrdFlag=1 AND T_InAgencyFlag=1)),9999);
Person: => AotIdKrAppFrdActShrdCntEv := MIN(COUNT(PersonEvent.Transaction(T1_IdIsKrAppFrdFlag=1 AND T_InAgencyFlag=0)),9999);
Person: => AotIdKrAppFrdActOldDtEv := MIN(PersonEvent.Transaction(T1_IdIsKrAppFrdFlag=1 AND T_InAgencyFlag=1),T_ActDtEcho);
Person: => AotIdKrAppFrdActNewDtEv := MAX(PersonEvent.Transaction(T1_IdIsKrAppFrdFlag=1 AND T_InAgencyFlag=1),T_ActDtEcho);
Person: => AotIdKrAppFrdActShrdOldDtEv := MIN(PersonEvent.Transaction(T1_IdIsKrAppFrdFlag=1 AND T_InAgencyFlag=0),T_ActDtEcho);
Person: => AotIdKrAppFrdActShrdNewDtEv := MAX(PersonEvent.Transaction(T1_IdIsKrAppFrdFlag=1 AND T_InAgencyFlag=0),T_ActDtEcho);

Person: => AotIdKrGenFrdActCntEv := MIN(COUNT(PersonEvent.Transaction(T1_IdIsKrGenFrdFlag=1 AND T_InAgencyFlag=1)),9999);
Person: => AotIdKrGenFrdActShrdCntEv := MIN(COUNT(PersonEvent.Transaction(T1_IdIsKrGenFrdFlag=1 AND T_InAgencyFlag=0)),9999);
Person: => AotIdKrGenFrdActOldDtEv := MIN(PersonEvent.Transaction(T1_IdIsKrGenFrdFlag=1 AND T_InAgencyFlag=1),T_ActDtEcho);
Person: => AotIdKrGenFrdActNewDtEv := MAX(PersonEvent.Transaction(T1_IdIsKrGenFrdFlag=1 AND T_InAgencyFlag=1),T_ActDtEcho);
Person: => AotIdKrGenFrdActShrdOldDtEv := MIN(PersonEvent.Transaction(T1_IdIsKrGenFrdFlag=1 AND T_InAgencyFlag=0),T_ActDtEcho);
Person: => AotIdKrGenFrdActShrdNewDtEv := MAX(PersonEvent.Transaction(T1_IdIsKrGenFrdFlag=1 AND T_InAgencyFlag=0),T_ActDtEcho);

Person: => AotIdKrOthFrdActCntEv := MIN(COUNT(PersonEvent.Transaction(T1_IdIsKrOthFrdFlag=1 AND T_InAgencyFlag=1)),9999);
Person: => AotIdKrOthFrdActShrdCntEv := MIN(COUNT(PersonEvent.Transaction(T1_IdIsKrOthFrdFlag=1 AND T_InAgencyFlag=0)),9999);
Person: => AotIdKrOthFrdActOldDtEv := MIN(PersonEvent.Transaction(T1_IdIsKrOthFrdFlag=1 AND T_InAgencyFlag=1),T_ActDtEcho);
Person: => AotIdKrOthFrdActNewDtEv := MAX(PersonEvent.Transaction(T1_IdIsKrOthFrdFlag=1 AND T_InAgencyFlag=1),T_ActDtEcho);
Person: => AotIdKrOthFrdActShrdOldDtEv := MIN(PersonEvent.Transaction(T1_IdIsKrOthFrdFlag=1 AND T_InAgencyFlag=0),T_ActDtEcho);
Person: => AotIdKrOthFrdActShrdNewDtEv := MAX(PersonEvent.Transaction(T1_IdIsKrOthFrdFlag=1 AND T_InAgencyFlag=0),T_ActDtEcho);

Person: => AotIdKrStolIdActCntEv := MIN(COUNT(PersonEvent.Transaction(T1_IdIsKrStolIdFlag=1 AND T_InAgencyFlag=1)),9999);
Person: => AotIdKrStolIdActShrdCntEv := MIN(COUNT(PersonEvent.Transaction(T1_IdIsKrStolIdFlag=1 AND T_InAgencyFlag=0)),9999);
Person: => AotIdKrStolIdActOldDtEv := MIN(PersonEvent.Transaction(T1_IdIsKrStolIdFlag=1 AND T_InAgencyFlag=1),T_ActDtEcho);
Person: => AotIdKrStolIdActNewDtEv := MAX(PersonEvent.Transaction(T1_IdIsKrStolIdFlag=1 AND T_InAgencyFlag=1),T_ActDtEcho);
Person: => AotIdKrStolIdActShrdOldDtEv := MIN(PersonEvent.Transaction(T1_IdIsKrStolIdFlag=1 AND T_InAgencyFlag=0),T_ActDtEcho);
Person: => AotIdKrStolIdActShrdNewDtEv := MAX(PersonEvent.Transaction(T1_IdIsKrStolIdFlag=1 AND T_InAgencyFlag=0),T_ActDtEcho);

Person: => AotIdActCntEv := MIN(COUNT(PersonEvent.Transaction(T_SrcClassType=4 AND ActAge>0)),999);
Person: => AotIdActCnt30D := MIN(COUNT(PersonEvent.Transaction(T_SrcClassType=4 AND ActAge>0 AND ActAge<=30)),999);
Person: => AotAddActCntEv := MIN(COUNT(PersonEvent.Transaction(T_SrcClassType=1 AND ActAge>0)),999);
Person: => AotAddActCnt30D := MIN(COUNT(PersonEvent.Transaction(T_SrcClassType=1 AND ActAge>0 AND ActAge<=30)),999);
Person: => AotNonStActCntEv := MIN(COUNT(PersonEvent.Transaction((T_SrcClassType=1 OR T_SrcClassType=4) AND ActAge>0)),999);
Person: => AotNonStActCnt30D := MIN(COUNT(PersonEvent.Transaction((T_SrcClassType=1 OR T_SrcClassType=4) AND ActAge>0 AND ActAge<=30)),999);

Person: => AotIdNewKrAftIdActCntEv := MIN(COUNT(PersonEvent.Transaction(T_SrcClassType=4 AND T_ActDtEcho > DATE(P1_AotIdKrActNewDtEv))),999);
Person: => AotIdNewKrAftAddActCntEv := MIN(COUNT(PersonEvent.Transaction(T_SrcClassType=1 AND T_ActDtEcho > DATE(P1_AotIdKrActNewDtEv))),999);
Person: => AotIdNewKrAftNonStActCntEv := MIN(COUNT(PersonEvent.Transaction((T_SrcClassType=1 OR T_SrcClassType=4) AND T_ActDtEcho > DATE(P1_AotIdKrActNewDtEv))),999);


Person: => AotIdNacCollActCntEv := MIN(COUNT(PersonEvent.Transaction(T_SrcType=11 AND ActAge>0)),999);
Person: => SrcType11 := ONLY(TOPN(PersonEvent.Transaction(T_SrcType=11){T_ActDtEcho,T_InpReasonDescEcho},1,-T_ActDtEcho));

Person: => DtOfDeath := PersonEvent.Transaction(T_SrcClassType=4){T_SrcAgencyUid,T_ActUid,T_ActDtEcho,T1L_IdDtOfDeath};



//Jo don't edit above here ---------------

Event: => IdIsLastEventId := MAP(Subject.LastRecordId = RecordId => 1, 0);
Event: => EmlIsLastEventId := MAP(rEmail.LastRecordId = RecordId => 1, 0);
Event: => AddrIsLastEventId := MAP(Location.LastRecordId = RecordId => 1, 0);
Event: => SsnIsLastEventId := MAP(rSsn.LastRecordId = RecordId => 1, 0);
Event: => PhIsLastEventId:= MAP(rPhone.LastRecordId = RecordId => 1, 0);
Event: => IpIsLastEventId := MAP(rInternetProtocol.LastRecordId = RecordId => 1, 0);
Event: => BnkIsLastEventId := MAP(rBankAccount.LastRecordId = RecordId => 1, 0);
Event: => DlIsLastEventId := MAP(rDriversLicense.LastRecordId = RecordId => 1, 0);

Event: => PersonLabel := TRIM(LastName) + ', ' + TRIM(FirstName) + TRIM(' ' + SUBSTR(MiddleName,1, 1));
Event: => EmailLabel := EmailAddress;
Event: => AddressLabel := CleanSpaces(TRIM(TRIM(TRIM(PrimaryRange) + ' ' + TRIM(Predirectional) + ' ' + TRIM(TRIM(PrimaryName) + ' ' + TRIM(Suffix) + ' ' + TRIM(Postdirectional) + ' ' + TRIM(UnitDesignation) + ' ' + TRIM(SecondaryRange)) + ', ' + TRIM(TRIM(VanityCity) + ', ' + TRIM(State)) + ' ' + TRIM(Zip))));
Event: => IpLabel := IpAddress;
Event: => SsnLabel := SsnFormatted;
Event: => PhoneLabel := PhoneFormatted;
Event: => BankAccountLabel := AccountNumber;
Event: => DriversLicenseLabel := LicenseNumber;

Event: => AddressEntityContextUid := '_09' + OttoAddressId;
Event: => SsnEntityContextUid := '_15' + OttoSSNId;
Event: => PersonEntityContextUid := '_01' + LexId;
Event: => PhoneEntityContextUid := '_16' + PhoneNumber;
Event: => EmailEntityContextUid := '_17' + OttoEmailId;
Event: => IpEntityContextUid := '_18' + OttoIpAddressId;
Event: => BankAccountEntityContextUid := '_19' + OttoBankAccountId;
Event: => DriversLicenseEntityContextUid := '_20' + OttoDriversLicenseId;

Event: => AddrEventCount := Location.EventCount;
Event: => SsnEventCount := rSsn.EventCount;
Event: => PersonEventCount := Subject.EventCount;
Event: => PhoneEventCount := rPhone.EventCount;
Event: => EmailEventCount := rEmail.EventCount;
Event: => IpEventCount := rInternetProtocol.EventCount;
Event: => BankAccountEventCount := rBankAccount.EventCount;
Event: => DriversLicenseEventCount := rDriversLicense.EventCount;

Event: => AddrEvent30Count := Location.VlEvent30Count;
Event: => SsnEvent30Count := rSsn.VlEvent30Count;
Event: => PersonEvent30Count := Subject.VlEvent30Count;
Event: => PhoneEvent30Count := rPhone.VlEvent30Count;
Event: => EmailEvent30Count := rEmail.VlEvent30Count;
Event: => IpEvent30Count := rInternetProtocol.VlEvent30Count;
Event: => BankAccountEvent30Count := rBankAccount.VlEvent30Count;
Event: => DriversLicenseEvent30Count := rDriversLicense.VlEvent30Count;

Event: => AddrEvent365Count := Location.VlEvent365Count;
Event: => SsnEvent365Count := rSsn.VlEvent365Count;
Event: => PersonEvent365Count := Subject.VlEvent365Count;
Event: => PhoneEvent365Count := rPhone.VlEvent365Count;
Event: => EmailEvent365Count := rEmail.VlEvent365Count;
Event: => IpEvent365Count := rInternetProtocol.VlEvent365Count;
Event: => BankAccountEvent365Count := rBankAccount.VlEvent365Count;
Event: => DriversLicenseEvent365Count := rDriversLicense.VlEvent365Count;

Event: => AddrEventAfterKrFlag := Location.KrEventAfterLastKnownRiskFlag;
Event: => SsnEventAfterKrFlag := rSsn.KrEventAfterLastKnownRiskFlag;
Event: => PersonEventAfterKrFlag := Subject.KrEventAfterLastKnownRiskFlag;
Event: => PhoneEventAfterKrFlag := rPhone.KrEventAfterLastKnownRiskFlag;
Event: => EmailEventAfterKrFlag := rEmail.KrEventAfterLastKnownRiskFlag;
Event: => IpEventAfterKrFlag := rInternetProtocol.KrEventAfterLastKnownRiskFlag;
Event: => BankAccountEventAfterKrFlag := rBankAccount.KrEventAfterLastKnownRiskFlag;
Event: => DriversLicenseEventAfterKrFlag := rDriversLicense.KrEventAfterLastKnownRiskFlag;

Event: => AddrEventAfterKrCount := Location.KrEventAfterLastKnownRiskCount;
Event: => SsnEventAfterKrCount := rSsn.KrEventAfterLastKnownRiskCount;
Event: => PersonEventAfterKrCount := Subject.KrEventAfterLastKnownRiskCount;
Event: => PhoneEventAfterKrCount := rPhone.KrEventAfterLastKnownRiskCount;
Event: => EmailEventAfterKrCount := rEmail.KrEventAfterLastKnownRiskCount;
Event: => IpEventAfterKrCount := rInternetProtocol.KrEventAfterLastKnownRiskCount;
Event: => BankAccountEventAfterKrCount := rBankAccount.KrEventAfterLastKnownRiskCount;
Event: => DriversLicenseEventAfterKrCount := rDriversLicense.KrEventAfterLastKnownRiskCount;

// this is the example for counting number of identitities at the associated address BEFORE the date of this transaction
Event: => AddrIdentityCount := COUNT(Location.PersonAddress(EventDates.EventDate < Event.EventDate){Subject});
// this is the example for counting number of identitities at the associated address EVER (including the future)
Event: => AddrIdentityFullCount := COUNT(Location.PersonAddress{Subject});

// this is the example for counting number of identitities at the associated address BEFORE the date of this transaction
Event: => SubjectPostDeathTransactionCount := COUNT(Subject.PersonEvent(EventDate < Event.EventDate AND EventDate > Event.diddeceaseddate));


/*
Event: => KrEventAfterKnownRisk := MAP(Location.KrLastEventDate < EventDate OR 
                                       rPhone.KrLastEventDate < EventDate OR 
                                       rEmail.KrLastEventDate < EventDate OR 
                                       rInternetProtocol.KrLastEventDate < EventDate OR 
                                       rBankAccount.KrLastEventDate < EventDate OR 
                                       rDriversLicense.KrLastEventDate < EventDate => 1, 0);
*/


/* ASSOCIATION LOGIC STATEMENTS */

//PersonPerson: => DtFirstSeen := MIN(EventDates, EventDate);
//PersonPerson: => DtLastSeen := MAX(EventDates, EventDate);
PersonAddress: => DtFirstSeen := MIN(EventDates, EventDate);
PersonAddress: => DtLastSeen := MAX(EventDates, EventDate);
PersonSSN: => DtFirstSeen := MIN(EventDates, EventDate);
PersonSSN: => DtLastSeen := MAX(EventDates, EventDate);
PersonIpAddress: => DtFirstSeen := MIN(EventDates, EventDate);
PersonIpAddress: => DtLastSeen := MAX(EventDates, EventDate);
PersonPhone: => DtFirstSeen := MIN(EventDates, EventDate);
PersonPhone: => DtLastSeen := MAX(EventDates, EventDate);
PersonBankAccount: => DtFirstSeen := MIN(EventDates, EventDate);
PersonBankAccount: => DtLastSeen := MAX(EventDates, EventDate);
PersonDriversLicense: => DtFirstSeen := MIN(EventDates, EventDate);
PersonDriversLicense: => DtLastSeen := MAX(EventDates, EventDate);
PersonEmail: => DtFirstSeen := MIN(EventDates, EventDate);
PersonEmail: => DtLastSeen := MAX(EventDates, EventDate);

/* PERSON ENTITY */

Person: => CustomerId := rCustomer.CustomerId;
Person: => IndustryType := rCustomer.IndustryType;
Person: => SourceCustomerCount := COUNT(SourceCustomers);
Person: => EntityContextUid := '_01' + LexId;
Person: => EntityType := 1;
Person: => AgeAtLastEvent := MAX(PersonEvent, Transaction.IdAge);
Person: => DtFirstSeen := MIN(PersonEvent.Transaction, EventDate);
Person: => DtLastSeen := MAX(PersonEvent.Transaction, EventDate);
Person: => IdActivityDtFirstSeen := MIN(PersonEvent.Transaction(T_SrcClassType = 4), EventDate);
Person: => IdActivityDtLastSeen := MAX(PersonEvent.Transaction(T_SrcClassType = 4), EventDate);
Person: => LastRecordId := MAP(ALL(PersonEvent.Transaction,T_SrcClassType IN [2,3]) => MIN(PersonEvent.Transaction(T_SrcClassType IN [2,3] AND EventDate=Person.DtFirstSeen), RecordId),
                  MAX(PersonEvent.Transaction(T_SrcClassType = 4 AND EventDate=Person.IdActivityDtLastSeen), RecordId));

Person: => NoLexId := MAP(LexId > 900000000000 => 1, 0);
Person: => DateOfBirth := MAX(ReportedDateOfBirth, DateOfBirth);
Person: => Age := YEARSBETWEEN(DateOfBirth, rCustomer.EventDateMax);

Person: => IsMinor := MAP(Age < 18 => 1, 0);

Person: => NoLexIdGt22 := MAP(NoLexId = 1 AND Age > 22 => 1, 0);
Person: => EventCount := COUNT(PersonEvent{Transaction});
Person: => Deceased := MAP(ISVALIDDATE(DeceasedDate) => 1, 0);
Person: => DeceasedNameMatch := MAP(COUNT(FullName(FirstName=DeceasedFirst AND LastName=DeceasedLast))>0 => 1, 0);
Person: => DeceasedDobMatch := MAP(COUNT(ReportedDateOfBirth(DeceasedDateOfBirth=DateOfBirth))>0 => 1, 0);
Person: => DeceasedMatch := MAP(Deceased=1 AND DeceasedNameMatch=1 AND DeceasedDobMatch=1 => 1, 0);
Person: => DeceasedMatchDescription := MAP(DeceasedMatch=1 => 'Full Matched Deceased Identity', '');
Person: => DeceasedMatchDateOfDeath := MAP(DeceasedMatch=1 => STRING(DeceasedDate), '');


Person: => CurrentlyIncarceratedFlag := MAP(name_ssn_dob_match = 1 AND curr_incar_flag='Y' => 1, 0);
Person: => FraudOffenseCount := COUNT(Offenses(CONTAINS(off_cat_list,'FRAUD')));
Person: => FraudOffensesFlag := MAP(name_ssn_dob_match = 1 AND FraudOffenseCount > 0 => 1, 0);
Person: => AssociatedWithIncarceratedFlag := MAP(name_ssn_dob_match = 0 AND curr_incar_flag='Y' => 1, 0);
Person: => AssociatedWithFraudOffensesFlag := MAP(name_ssn_dob_match = 0 AND FraudOffenseCount > 0 => 1, 0);

Person: => AddressIsCmra30Count := COUNT(PersonEvent.Transaction(AddressIsCmra=1 AND EventAge < 30));
Person: => AddressIsCmra30Flag := MAP(AddressIsCmra30Count>0 => 1, 0);
Person: => AddressIsOutOfState30Count := COUNT(PersonEvent.Transaction(AddressOutOfState=1 AND EventAge < 30));
Person: => AddressIsOfState30Flag := MAP(AddressIsOutOfState30Count>0 => 1, 0);
 
// NOTE: This is "best" from the contributed not Best Best.

Person: => BestFullName := ONLY(TOPN(FullName(TRIM(FirstName) != '' AND TRIM(LastName) != ''), 1, -EventDate));
Person: => Label := TRIM(BestFullName.LastName) + ', ' + TRIM(BestFullName.FirstName);
Person: => BestFirstName := BestFullName.FirstName;
Person: => BestMiddleName := BestFullName.MiddleName;
Person: => BestLastName := BestFullName.LastName;
Person: => BestNameSuffix := BestFullName.NameSuffix;

// Joe fill this in
//Person: => LastAddress
//Person: => LastSSN
Person: => BestReportedSsn := ONLY(TOPN(ReportedSsn(TRIM(Ssn) != ''), 1, -EventDate){Ssn});
Person: => BestSsn := BestReportedSsn.Ssn;
Person: => BestReportedEmail := ONLY(TOPN(ReportedEmailAddress(TRIM(EmailAddress) != ''), 1, -EventDate){EmailAddress});
Person: => BestEmail := BestReportedEmail.EmailAddress;
Person: => BestReportedAddress := ONLY(TOPN(Address((TRIM(PrimaryName) != '' AND TRIM(PostalCity) != '' AND TRIM(State) != '') OR TRIM(Zip) != ''), 1, -EventDate));
Person: => BestStreetAddress := CleanSpaces(TRIM(TRIM(BestReportedAddress.PrimaryRange) + ' ' + TRIM(TRIM(BestReportedAddress.Predirectional) + ' ' + TRIM(TRIM(BestReportedAddress.PrimaryName) + ' ' + TRIM(TRIM(BestReportedAddress.Suffix) + ' ' + TRIM(TRIM(BestReportedAddress.Postdirectional) + ' ' + TRIM(TRIM(BestReportedAddress.UnitDesignation) + ' ' + TRIM(TRIM(BestReportedAddress.SecondaryRange)))))))));
Person: => BestCity := BestReportedAddress.PostalCity;
Person: => BestState := BestReportedAddress.State;
Person: => BestZip := BestReportedAddress.Zip;
//    Address {EventDate, PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, UnitDesignation, SecondaryRange, PostalCity, VanityCity, State, Zip, Zip4}				


Person: => InCustomerPopulation := MAP(COUNT(SourceCustomers(rSourceCustomer=rCustomer))>0 => 1, 0);
Person: => OtherCustomerPersonCustomerCount := COUNT(SourceCustomers(rSourceCustomer != rCustomer));

Person: => IdSsnIdentityCountMax := MAX(PersonSSN.Social, IdentityCount); 
                                                   
Person: => MaxDeceasedToEventDiff := MAX(PersonEvent.Transaction(InCustomerPopulation=1), DeceasedToEventYearDiff);
Person: => AllMaxDeceasedToEventDiff := MAX(PersonEvent.Transaction, DeceasedToEventYearDiff);

Person: => DeceasedEventCount := SUM(PersonEvent.Transaction(InCustomerPopulation=1), DeceasedPriorToEvent);
Person: => DeceasedEventPercent := AVE(PersonEvent.Transaction(InCustomerPopulation=1), DeceasedPriorToEvent);

Person: => AllDeceasedEventCount := SUM(PersonEvent.Transaction, DeceasedPriorToEvent);
Person: => AllDeceasedEventPercent := AVE(PersonEvent.Transaction, DeceasedPriorToEvent);

Person: => DeathPriorToAllEvents := MAP(DeceasedEventPercent = 1 => 1, 0);
Person: => AllDeathPriorToAllEvents := MAP(AllDeceasedEventPercent = 1 => 1, 0);
Person: => HighRiskDeathPriorToAllEvents := MAP(DeathPriorToAllEvents = 1 AND MaxDeceasedToEventDiff < -4 => 1, 0);
Person: => AllHighRiskDeathPriorToAllEvents := MAP(AllDeathPriorToAllEvents = 1 AND AllMaxDeceasedToEventDiff < -4 => 1, 0);
Person: => AddressCount := COUNT(PersonAddress);

// Second Order Features

//Person: => Nas9Flag := MAP(COUNT(PersonEvent.Transaction(IdNas9Flag=1)) > 0 => 1, 0); // SSN and Last Name not associated with identity per public records
//Person: => Nap3Flag := MAP(nap_summary = '3' => 1, 0); // Phone and Lastname not associated with identity per public records

Person: => IpNotUs := MAP(COUNT(PersonEvent.Transaction(IpNotUs=1))>0 => 1, 0); 
Person: => IpVpn := MAP(COUNT(PersonEvent.Transaction(IpVpn=1))>0 => 1, 0); 
Person: => IpHighRiskCity := MAP(COUNT(PersonEvent.Transaction(IpHighRiskCity=1))>0 => 1, 0); 
Person: => IpHosted := MAP(COUNT(PersonEvent.Transaction(IpHosted=1))>0 => 1, 0);
Person: => IpTor := MAP(COUNT(PersonEvent.Transaction(IpTor=1))>0 => 1, 0); 


// Known Risk \ Safe
Person: => KrHighRiskFlag := MAP(COUNT(PersonEvent.Transaction(KrHighRiskIdentityFlag=1)) > 0 => 1, 0);
Person: => KrMediumRiskFlag := MAP(COUNT(PersonEvent.Transaction(KrMediumRiskIdentityFlag=1))>0 => 1, 0);
Person: => KrLowRiskFlag := MAP(COUNT(PersonEvent.Transaction(KrLowRiskIdentityFlag=1))>0 => 1, 0);
Person: => KrFlag := MAP(COUNT(PersonEvent.Transaction(KrIdentityFlag=1))>0 => 1, 0);

Person: => KrHighRiskRouting := MAP(COUNT(PersonBankAccount.Account(HighRiskRouting=1))>0 => 1, 0);

Person: => LastEventDate := MAX(PersonEvent.Transaction, EventDate); // last transaction date
Person: => KrLastEventDate := MAX(PersonEvent.Transaction(KrIdentityFlag=1), EventDate); // last known risk IDENTITY transaction date
Person: => KrLastElementEventDate := MAX(PersonEvent(Transaction.FlagsKnownRiskElement=1), Transaction.EventDate); // last transaction date that involved a known risk ELEMENT
Person: => KrHasKnownRiskElementFlag := MAX(PersonEvent, Transaction.FlagsKnownRiskElement);

Person: => KrEventAfterLastKnownRiskCount := COUNT(PersonEvent(Transaction.EventDate > Person.KrLastEventDate)); // identity transaction count after the last known risk transaction
Person: => KrEventAfterLastKnownRiskFlag := MAP(KrEventAfterLastKnownRiskCount>0=>1, 0); // flags if there are any transactions after the last known risk transaction.

Person: => KrHasKnownRiskElementCount := COUNT(PersonEvent(Transaction.FlagsKnownRiskElement=1)); // Identity transaction count where an element was flagged as known risk element.
Person: => KrEventAfterKnownRiskCount := COUNT(PersonEvent(Transaction.KrEventAfterKnownRisk=1)); // count of transactions involving a known risk element after the date of the last known risk transaction
Person: => KrEventAfterKnownRiskFlag := MAP((KrHighRiskFlag = 1 OR KrMediumRiskFlag = 1) AND KrEventAfterKnownRiskCount > 0 => 1, 0); // for a known risk identity the count of transactions involving a known risk element after the date of the last known risk transaction
Person: => KrNotKnownRiskHasKnownRiskElementFlag := MAP((KrHighRiskFlag = 0 OR KrMediumRiskFlag = 0) AND KrEventAfterKnownRiskFlag = 1 =>1,0); // identity is not known risk but is connected to known risk elements

Person: => KrId1010Flag := MAP(COUNT(PersonEvent.Transaction(KrId1010Flag=1))>0 => 1, 0);
Person: => KrId2025Flag := MAP(COUNT(PersonEvent.Transaction(KrId2025Flag=1))>0 => 1, 0);
Person: => KrId10000Flag := MAP(COUNT(PersonEvent.Transaction(KrId10000Flag=1))>0 => 1, 0);
Person: => KrId10001Flag := MAP(COUNT(PersonEvent.Transaction(KrId10001Flag=1))>0 => 1, 0);
Person: => KrId10002Flag := MAP(COUNT(PersonEvent.Transaction(KrId10002Flag=1))>0 => 1, 0);
Person: => KrId10003Flag := MAP(COUNT(PersonEvent.Transaction(KrId10003Flag=1))>0 => 1, 0);
Person: => KrId10004Flag := MAP(COUNT(PersonEvent.Transaction(KrId10004Flag=1))>0 => 1, 0);
Person: => KrId10005Flag := MAP(COUNT(PersonEvent.Transaction(KrId10005Flag=1))>0 => 1, 0);
Person: => KrId10006Flag := MAP(COUNT(PersonEvent.Transaction(KrId10006Flag=1))>0 => 1, 0);
Person: => KrId10007Flag := MAP(COUNT(PersonEvent.Transaction(KrId10007Flag=1))>0 => 1, 0);
Person: => KrId11000Flag := MAP(COUNT(PersonEvent.Transaction(KrId11000Flag=1))>0 => 1, 0);
Person: => KrId11001Flag := MAP(COUNT(PersonEvent.Transaction(KrId11001Flag=1))>0 => 1, 0);
Person: => KrId11002Flag := MAP(COUNT(PersonEvent.Transaction(KrId11002Flag=1))>0 => 1, 0);
Person: => KrId11003Flag := MAP(COUNT(PersonEvent.Transaction(KrId11003Flag=1))>0 => 1, 0);
Person: => KrId11004Flag := MAP(COUNT(PersonEvent.Transaction(KrId11004Flag=1))>0 => 1, 0);
Person: => KrId11005Flag := MAP(COUNT(PersonEvent.Transaction(KrId11005Flag=1))>0 => 1, 0);
Person: => KrId11006Flag := MAP(COUNT(PersonEvent.Transaction(KrId11006Flag=1))>0 => 1, 0);
Person: => KrId11007Flag := MAP(COUNT(PersonEvent.Transaction(KrId11007Flag=1))>0 => 1, 0);
Person: => KrId11008Flag := MAP(COUNT(PersonEvent.Transaction(KrId11008Flag=1))>0 => 1, 0);
Person: => KrId11009Flag := MAP(COUNT(PersonEvent.Transaction(KrId11009Flag=1))>0 => 1, 0);
Person: => KrId11010Flag := MAP(COUNT(PersonEvent.Transaction(KrId11010Flag=1))>0 => 1, 0);
Person: => KrId11011Flag := MAP(COUNT(PersonEvent.Transaction(KrId11011Flag=1))>0 => 1, 0);
Person: => KrId11012Flag := MAP(COUNT(PersonEvent.Transaction(KrId11012Flag=1))>0 => 1, 0);
Person: => KrId11013Flag := MAP(COUNT(PersonEvent.Transaction(KrId11013Flag=1))>0 => 1, 0);
Person: => KrId11014Flag := MAP(COUNT(PersonEvent.Transaction(KrId11014Flag=1))>0 => 1, 0);
Person: => KrId11015Flag := MAP(COUNT(PersonEvent.Transaction(KrId11015Flag=1))>0 => 1, 0);
Person: => KrId11016Flag := MAP(COUNT(PersonEvent.Transaction(KrId11016Flag=1))>0 => 1, 0);
Person: => KrId11017Flag := MAP(COUNT(PersonEvent.Transaction(KrId11017Flag=1))>0 => 1, 0);
Person: => KrId11018Flag := MAP(COUNT(PersonEvent.Transaction(KrId11018Flag=1))>0 => 1, 0);
Person: => KrId11019Flag := MAP(COUNT(PersonEvent.Transaction(KrId11019Flag=1))>0 => 1, 0);
Person: => KrId12000Flag := MAP(COUNT(PersonEvent.Transaction(KrId12000Flag=1))>0 => 1, 0);
Person: => KrId12001Flag := MAP(COUNT(PersonEvent.Transaction(KrId12001Flag=1))>0 => 1, 0);
Person: => KrId12002Flag := MAP(COUNT(PersonEvent.Transaction(KrId12002Flag=1))>0 => 1, 0);
Person: => KrId12003Flag := MAP(COUNT(PersonEvent.Transaction(KrId12003Flag=1))>0 => 1, 0);
Person: => KrId12004Flag := MAP(COUNT(PersonEvent.Transaction(KrId12004Flag=1))>0 => 1, 0);
Person: => KrId12006Flag := MAP(COUNT(PersonEvent.Transaction(KrId12006Flag=1))>0 => 1, 0);
Person: => KrId12007Flag := MAP(COUNT(PersonEvent.Transaction(KrId12007Flag=1))>0 => 1, 0);
Person: => KrId13000Flag := MAP(COUNT(PersonEvent.Transaction(KrId13000Flag=1))>0 => 1, 0);
Person: => KrId13001Flag := MAP(COUNT(PersonEvent.Transaction(KrId13001Flag=1))>0 => 1, 0);
Person: => KrId13002Flag := MAP(COUNT(PersonEvent.Transaction(KrId13002Flag=1))>0 => 1, 0);
Person: => KrId13003Flag := MAP(COUNT(PersonEvent.Transaction(KrId13003Flag=1))>0 => 1, 0);
Person: => KrId13005Flag := MAP(COUNT(PersonEvent.Transaction(KrId13005Flag=1))>0 => 1, 0);
Person: => KrId13006Flag := MAP(COUNT(PersonEvent.Transaction(KrId13006Flag=1))>0 => 1, 0);
Person: => KrId13007Flag := MAP(COUNT(PersonEvent.Transaction(KrId13007Flag=1))>0 => 1, 0);
Person: => KrId14000Flag := MAP(COUNT(PersonEvent.Transaction(KrId14000Flag=1))>0 => 1, 0);
Person: => KrId14001Flag := MAP(COUNT(PersonEvent.Transaction(KrId14001Flag=1))>0 => 1, 0);
Person: => KrId14900Flag := MAP(COUNT(PersonEvent.Transaction(KrId14900Flag=1))>0 => 1, 0);
Person: => KrId14901Flag := MAP(COUNT(PersonEvent.Transaction(KrId14901Flag=1))>0 => 1, 0);
Person: => KrId14902Flag := MAP(COUNT(PersonEvent.Transaction(KrId14902Flag=1))>0 => 1, 0);
Person: => KrId14903Flag := MAP(COUNT(PersonEvent.Transaction(KrId14903Flag=1))>0 => 1, 0);

Person: => SafeFlagLastDate := MAX(PersonEvent.Transaction(SafeFlag=1), EventDate); 
Person: => SafeFlagTransactionCount := COUNT(PersonEvent.Transaction(SafeFlag=1));
Person: => SafeFlag := MAP(SafeFlagTransactionCount>0 AND SafeFlagLastDate > KrLastEventDate => 1, 0);

Person: => ContributorSafeFlag := MAP(COUNT(PersonEvent.Transaction(ContributorSafeFlag=1))>0 => 1, 0);

// Velocity

Person: => VlEvent1AllCount := COUNT(PersonEvent.Transaction(EventAge<2));
Person: => VlEvent7AllCount := COUNT(PersonEvent.Transaction(EventAge<8));
Person: => VlEvent30AllDayCount := COUNT(PersonEvent.Transaction(EventAge<31));
Person: => VlEvent365AllDayCount := COUNT(PersonEvent.Transaction(EventAge<366));

Person: => VlEvent7AllActiveFlag := MAP(VlEvent7AllCount > 0 => 1, 0);
Person: => VlEvent30AllActiveFlag := MAP(VlEvent30AllDayCount > 0 => 1, 0);

Person: => VlEvent1Count := COUNT(PersonEvent.Transaction(InCustomerPopulation = 1 AND EventAge<2));
Person: => VlEvent7Count := COUNT(PersonEvent.Transaction(InCustomerPopulation = 1 AND EventAge<8));
Person: => VlEvent30Count := COUNT(PersonEvent.Transaction(InCustomerPopulation = 1 AND EventAge<31));
Person: => VlEvent365Count := COUNT(PersonEvent.Transaction(InCustomerPopulation = 1 AND EventAge<366));

Person: => VlEvent7ActiveFlag := MAP(VlEvent7Count > 0 => 1, 0);
Person: => VlEvent30ActiveFlag := MAP(VlEvent30Count > 0 => 1, 0);


SocialSecurityNumber: => CustomerId := rCustomer.CustomerId;
SocialSecurityNumber: => IndustryType := rCustomer.IndustryType;
SocialSecurityNumber: => SourceCustomerCount := COUNT(SourceCustomers);
SocialSecurityNumber: => EntityContextUid := '_15' + OttoSSNId;
SocialSecurityNumber: => EntityType := 15;
SocialSecurityNumber: => Label := SsnFormatted;
SocialSecurityNumber: => InCustomerPopulation := MAP(COUNT(SourceCustomers(rSourceCustomer=rCustomer))>0 => 1, 0);
SocialSecurityNumber: => DtFirstSeen := MIN(SsnEvent.Transaction, EventDate);
SocialSecurityNumber: => DtLastSeen := MAX(SsnEvent.Transaction, EventDate);
SocialSecurityNumber: => IdActivityDtFirstSeen := MIN(SsnEvent.Transaction(T_SrcClassType = 4), EventDate);
SocialSecurityNumber: => IdActivityDtLastSeen := MAX(SsnEvent.Transaction(T_SrcClassType = 4), EventDate);
SocialSecurityNumber: => LastRecordId := MAP(ALL(SsnEvent.Transaction,T_SrcClassType IN [2,3]) => MIN(SsnEvent.Transaction(T_SrcClassType IN [2,3] AND EventDate=SocialSecurityNumber.DtFirstSeen), RecordId),
                  MAX(SsnEvent.Transaction(T_SrcClassType = 4 AND EventDate=SocialSecurityNumber.IdActivityDtLastSeen), RecordId));

SocialSecurityNumber: => IdentityCount := COUNT(PersonSSN{Subject});
SocialSecurityNumber: => IdentityCountGt2 := MAP(IdentityCount > 2 => 1, 0);
SocialSecurityNumber: => EventCount := COUNT(SsnEvent);

// Known Risk 
SocialSecurityNumber: => KrHighRiskFlag := MAP(COUNT(SsnEvent.Transaction(KrHighRiskSsnFlag=1)) > 0 => 1, 0);
SocialSecurityNumber: => KrMediumRiskFlag := MAP(COUNT(SsnEvent.Transaction(KrMediumRiskSsnFlag=1)) > 0 => 1, 0);
SocialSecurityNumber: => KrLowRiskFlag := MAP(COUNT(SsnEvent.Transaction(KrLowRiskSsnFlag=1)) > 0 => 1, 0);
SocialSecurityNumber: => KrFlag := MAP(COUNT(SsnEvent.Transaction(KrSsnFlag=1)) > 0 => 1, 0);

SocialSecurityNumber: => SafeFlag := MAP(COUNT(SsnEvent.Transaction(SafeFlag=1))>0 => 1, 0);
SocialSecurityNumber: => ContributorSafeFlag := MAP(COUNT(SsnEvent.Transaction(ContributorSafeFlag=1))>0 => 1, 0);

SocialSecurityNumber: => LastEventDate := MAX(SsnEvent.Transaction, EventDate); 
SocialSecurityNumber: => KrLastEventDate := MAX(SsnEvent.Transaction(KrHighRiskSsnFlag=1 OR KrMediumRiskSsnFlag=1 OR KrLowRiskSsnFlag=1), EventDate);
SocialSecurityNumber: => KrEventAfterLastKnownRiskCount := COUNT(SsnEvent(Transaction.EventDate > SocialSecurityNumber.KrLastEventDate));
SocialSecurityNumber: => KrEventAfterLastKnownRiskFlag := MAP(KrEventAfterLastKnownRiskCount>0=>1, 0);

SocialSecurityNumber: => KrSsn100Flag := MAP(COUNT(SsnEvent.Transaction(KrSsn100Flag=1))>0 => 1, 0);
SocialSecurityNumber: => KrSsn101Flag := MAP(COUNT(SsnEvent.Transaction(KrSsn101Flag=1))>0 => 1, 0);
SocialSecurityNumber: => KrSsn103Flag := MAP(COUNT(SsnEvent.Transaction(KrSsn103Flag=1))>0 => 1, 0);
SocialSecurityNumber: => KrSsn104Flag := MAP(COUNT(SsnEvent.Transaction(KrSsn104Flag=1))>0 => 1, 0);
SocialSecurityNumber: => KrSsn105Flag := MAP(COUNT(SsnEvent.Transaction(KrSsn105Flag=1))>0 => 1, 0);
SocialSecurityNumber: => KrSsn190Flag := MAP(COUNT(SsnEvent.Transaction(KrSsn190Flag=1))>0 => 1, 0);
SocialSecurityNumber: => KrSsn191Flag := MAP(COUNT(SsnEvent.Transaction(KrSsn191Flag=1))>0 => 1, 0);
SocialSecurityNumber: => KrSsn192Flag := MAP(COUNT(SsnEvent.Transaction(KrSsn192Flag=1))>0 => 1, 0);
SocialSecurityNumber: => KrSsn193Flag := MAP(COUNT(SsnEvent.Transaction(KrSsn193Flag=1))>0 => 1, 0);



// Velocity

SocialSecurityNumber: => VlEvent1AllCount := COUNT(SsnEvent.Transaction(EventAge<2));
SocialSecurityNumber: => VlEvent7AllCount := COUNT(SsnEvent.Transaction(EventAge<8));
SocialSecurityNumber: => VlEvent30AllDayCount := COUNT(SsnEvent.Transaction(EventAge<31));
SocialSecurityNumber: => VlEvent365AllDayCount := COUNT(SsnEvent.Transaction(EventAge<366));
SocialSecurityNumber: => VlEvent7AllActiveFlag := MAP(VlEvent7AllCount > 0 => 1, 0);
SocialSecurityNumber: => VlEvent30AllActiveFlag := MAP(VlEvent30AllDayCount > 0 => 1, 0);
SocialSecurityNumber: => VlEvent1Count := COUNT(SsnEvent.Transaction(InCustomerPopulation = 1 AND EventAge<2));
SocialSecurityNumber: => VlEvent7Count := COUNT(SsnEvent.Transaction(InCustomerPopulation = 1 AND EventAge<8));
SocialSecurityNumber: => VlEvent30Count := COUNT(SsnEvent.Transaction(InCustomerPopulation = 1 AND EventAge<31));
SocialSecurityNumber: => VlEvent365Count := COUNT(SsnEvent.Transaction(InCustomerPopulation = 1 AND EventAge<366));

SocialSecurityNumber: => VlEvent7ActiveFlag := MAP(VlEvent7Count > 0 => 1, 0);
SocialSecurityNumber: => VlEvent30ActiveFlag := MAP(VlEvent30Count > 0 => 1, 0);

Phone: => CustomerId := rCustomer.CustomerId;
Phone: => IndustryType := rCustomer.IndustryType;
Phone: => SourceCustomerCount := COUNT(SourceCustomers);
Phone: => EntityContextUid := '_16' + PhoneNumber;
Phone: => EntityType := 16;
Phone: => Label := PhoneFormatted;
Phone: => InCustomerPopulation := MAP(COUNT(SourceCustomers(rSourceCustomer=rCustomer))>0 => 1, 0);
Phone: => DtFirstSeen := MIN(PhoneEvent.Transaction, EventDate);
Phone: => DtLastSeen := MAX(PhoneEvent.Transaction, EventDate);
Phone: => IdActivityDtFirstSeen := MIN(PhoneEvent.Transaction(T_SrcClassType = 4), EventDate);
Phone: => IdActivityDtLastSeen := MAX(PhoneEvent.Transaction(T_SrcClassType = 4), EventDate);
Phone: => LastRecordId := MAP(ALL(PhoneEvent.Transaction,T_SrcClassType IN [2,3]) => MIN(PhoneEvent.Transaction(T_SrcClassType IN [2,3] AND EventDate=Phone.DtFirstSeen), RecordId),
                  MAX(PhoneEvent.Transaction(T_SrcClassType = 4 AND EventDate=Phone.IdActivityDtLastSeen), RecordId));

Phone: => IdentityCount := COUNT(PersonPhone{Subject});
Phone: => IdentityCountGt2 := MAP(IdentityCount > 2 => 1, 0);
Phone: => EventCount := COUNT(PhoneEvent);

// Known Risk 
Phone: => KrHighRiskFlag := MAP(COUNT(PhoneEvent.Transaction(KrHighRiskPhoneFlag=1)) > 0 => 1, 0);
Phone: => KrMediumRiskFlag := MAP(COUNT(PhoneEvent.Transaction(KrMediumRiskPhoneFlag=1)) > 0 => 1, 0);
Phone: => KrLowRiskFlag := MAP(COUNT(PhoneEvent.Transaction(KrLowRiskPhoneFlag=1)) > 0 => 1, 0);
Phone: => KrFlag := MAP(COUNT(PhoneEvent.Transaction(KrPhoneFlag=1)) > 0 => 1, 0);

Phone: => SafeFlag := MAP(COUNT(PhoneEvent.Transaction(SafeFlag=1))>0 => 1, 0);
Phone: => ContributorSafeFlag := MAP(COUNT(PhoneEvent.Transaction(ContributorSafeFlag=1))>0 => 1, 0);

Phone: => LastEventDate := MAX(PhoneEvent.Transaction, EventDate);
Phone: => KrLastEventDate := MAX(PhoneEvent.Transaction(KrHighRiskPhoneFlag=1 OR KrMediumRiskPhoneFlag=1 OR KrLowRiskPhoneFlag=1), EventDate);
Phone: => KrEventAfterLastKnownRiskCount := COUNT(PhoneEvent(Transaction.EventDate > Phone.KrLastEventDate));
Phone: => KrEventAfterLastKnownRiskFlag := MAP(KrEventAfterLastKnownRiskCount>0=>1, 0);

Phone: => KrPhn400Flag := MAP(COUNT(PhoneEvent.Transaction(KrPhn400Flag=1))>0 => 1, 0);
Phone: => KrPhn401Flag := MAP(COUNT(PhoneEvent.Transaction(KrPhn401Flag=1))>0 => 1, 0);
Phone: => KrPhn402Flag := MAP(COUNT(PhoneEvent.Transaction(KrPhn402Flag=1))>0 => 1, 0);
Phone: => KrPhn490Flag := MAP(COUNT(PhoneEvent.Transaction(KrPhn490Flag=1))>0 => 1, 0);
Phone: => KrPhn491Flag := MAP(COUNT(PhoneEvent.Transaction(KrPhn491Flag=1))>0 => 1, 0);
Phone: => KrPhn492Flag := MAP(COUNT(PhoneEvent.Transaction(KrPhn492Flag=1))>0 => 1, 0);
Phone: => KrPhn493Flag := MAP(COUNT(PhoneEvent.Transaction(KrPhn493Flag=1))>0 => 1, 0);


// Velocity

Phone: => VlEvent1AllCount := COUNT(PhoneEvent.Transaction(EventAge<2));
Phone: => VlEvent7AllCount := COUNT(PhoneEvent.Transaction(EventAge<8));
Phone: => VlEvent30AllDayCount := COUNT(PhoneEvent.Transaction(EventAge<31));
Phone: => VlEvent365AllDayCount := COUNT(PhoneEvent.Transaction(EventAge<366));

Phone: => VlEvent7AllActiveFlag := MAP(VlEvent7AllCount > 0 => 1, 0);
Phone: => VlEvent30AllActiveFlag := MAP(VlEvent30AllDayCount > 0 => 1, 0);

Phone: => VlEvent1Count := COUNT(PhoneEvent.Transaction(InCustomerPopulation = 1 AND EventAge<2));
Phone: => VlEvent7Count := COUNT(PhoneEvent.Transaction(InCustomerPopulation = 1 AND EventAge<8));
Phone: => VlEvent30Count := COUNT(PhoneEvent.Transaction(InCustomerPopulation = 1 AND EventAge<31));
Phone: => VlEvent365Count := COUNT(PhoneEvent.Transaction(InCustomerPopulation = 1 AND EventAge<366));

Phone: => VlEvent7ActiveFlag := MAP(VlEvent7Count > 0 => 1, 0);
Phone: => VlEvent30ActiveFlag := MAP(VlEvent30Count > 0 => 1, 0);

Email: => CustomerId := rCustomer.CustomerId;
Email: => IndustryType := rCustomer.IndustryType;
Email: => SourceCustomerCount := COUNT(SourceCustomers);
Email: => EntityContextUid := '_17' + OttoEmailId;
Email: => EntityType := 17;
Email: => Label := EmailAddress;
Email: => InCustomerPopulation := MAP(COUNT(SourceCustomers(rSourceCustomer=rCustomer))>0 => 1, 0);
Email: => DtFirstSeen := MIN(EmailEvent.Transaction, EventDate);
Email: => DtLastSeen := MAX(EmailEvent.Transaction, EventDate);
Email: => IdActivityDtFirstSeen := MIN(EmailEvent.Transaction(T_SrcClassType = 4), EventDate);
Email: => IdActivityDtLastSeen := MAX(EmailEvent.Transaction(T_SrcClassType = 4), EventDate);
Email: => LastRecordId := MAP(ALL(EmailEvent.Transaction,T_SrcClassType IN [2,3]) => MIN(EmailEvent.Transaction(T_SrcClassType IN [2,3] AND EventDate=Email.DtFirstSeen), RecordId),
                  MAX(EmailEvent.Transaction(T_SrcClassType = 4 AND EventDate=Email.IdActivityDtLastSeen), RecordId));



Email: => IdentityCount := COUNT(PersonEmail{Subject});
Email: => IdentityCountGt2 := MAP(IdentityCount > 2 => 1, 0);
Email: => EventCount := COUNT(EmailEvent);

Email: => NotSafeLastDomainGt2 := MAP(EmailLastDomain IN ['GOV','ORG'] AND IdentityCountGt2 = 1 => 1, 0);

// Known Risk 
Email: => KrHighRiskFlag := MAP(COUNT(EmailEvent.Transaction(KrHighRiskEmailFlag=1)) > 0 => 1, 0);
Email: => KrMediumRiskFlag := MAP(COUNT(EmailEvent.Transaction(KrMediumRiskEmailFlag=1)) > 0 => 1, 0);
Email: => KrLowRiskFlag := MAP(COUNT(EmailEvent.Transaction(KrLowRiskEmailFlag=1)) > 0 => 1, 0);
Email: => KrFlag := MAP(COUNT(EmailEvent.Transaction(KrEmailFlag=1)) > 0 => 1, 0);

Email: => SafeFlag := MAP(COUNT(EmailEvent.Transaction(SafeFlag=1))>0 => 1, 0);
Email: => ContributorSafeFlag := MAP(COUNT(EmailEvent.Transaction(ContributorSafeFlag=1))>0 => 1, 0);

Email: => LastEventDate := MAX(EmailEvent.Transaction, EventDate);
Email: => KrLastEventDate := MAX(EmailEvent.Transaction(KrHighRiskEmailFlag=1 OR KrMediumRiskEmailFlag=1 OR KrLowRiskEmailFlag=1), EventDate);
Email: => KrEventAfterLastKnownRiskCount := COUNT(EmailEvent(Transaction.EventDate > Email.KrLastEventDate));
Email: => KrEventAfterLastKnownRiskFlag := MAP(KrEventAfterLastKnownRiskCount>0=>1, 0);

Email: => KrEml500Flag := MAP(COUNT(EmailEvent.Transaction(KrEml500Flag=1))>0 => 1, 0);
Email: => KrEml501Flag := MAP(COUNT(EmailEvent.Transaction(KrEml501Flag=1))>0 => 1, 0);
Email: => KrEml502Flag := MAP(COUNT(EmailEvent.Transaction(KrEml502Flag=1))>0 => 1, 0);
Email: => KrEml590Flag := MAP(COUNT(EmailEvent.Transaction(KrEml590Flag=1))>0 => 1, 0);
Email: => KrEml591Flag := MAP(COUNT(EmailEvent.Transaction(KrEml591Flag=1))>0 => 1, 0);
Email: => KrEml592Flag := MAP(COUNT(EmailEvent.Transaction(KrEml592Flag=1))>0 => 1, 0);
Email: => KrEml593Flag := MAP(COUNT(EmailEvent.Transaction(KrEml593Flag=1))>0 => 1, 0);

// Velocity

Email: => VlEvent1AllCount := COUNT(EmailEvent.Transaction(EventAge<2));
Email: => VlEvent7AllCount := COUNT(EmailEvent.Transaction(EventAge<8));
Email: => VlEvent30AllDayCount := COUNT(EmailEvent.Transaction(EventAge<31));
Email: => VlEvent365AllDayCount := COUNT(EmailEvent.Transaction(EventAge<366));

Email: => VlEvent7AllActiveFlag := MAP(VlEvent7AllCount > 0 => 1, 0);
Email: => VlEvent30AllActiveFlag := MAP(VlEvent30AllDayCount > 0 => 1, 0);

Email: => VlEvent1Count := COUNT(EmailEvent.Transaction(InCustomerPopulation = 1 AND EventAge<2));
Email: => VlEvent7Count := COUNT(EmailEvent.Transaction(InCustomerPopulation = 1 AND EventAge<8));
Email: => VlEvent30Count := COUNT(EmailEvent.Transaction(InCustomerPopulation = 1 AND EventAge<31));
Email: => VlEvent365Count := COUNT(EmailEvent.Transaction(InCustomerPopulation = 1 AND EventAge<366));

Email: => VlEvent7ActiveFlag := MAP(VlEvent7Count > 0 => 1, 0);
Email: => VlEvent30ActiveFlag := MAP(VlEvent30Count > 0 => 1, 0);
 

/* Bank */ 
Bank: => HighRiskRouting := MAP(RoutingNumber IN ['031101169','124071889','124303120','073972181','084003997','114924742','031101169','063115194'] => 1, 0);

/* Bank Account */ 

BankAccount: => CustomerId := rCustomer.CustomerId;
BankAccount: => IndustryType := rCustomer.IndustryType;
BankAccount: => SourceCustomerCount := COUNT(SourceCustomers);
BankAccount: => EntityContextUid := '_19' + OttoBankAccountId;
BankAccount: => EntityType := 19;
BankAccount: => Label := AccountNumber;
BankAccount: => AbbreviatedBankname := rBank.AbbreviatedBankname;
BankAccount: => InCustomerPopulation := MAP(COUNT(SourceCustomers(rSourceCustomer=rCustomer))>0 => 1, 0);
BankAccount: => DtFirstSeen := MIN(BankAccountEvent.Transaction, EventDate);
BankAccount: => DtLastSeen := MAX(BankAccountEvent.Transaction, EventDate);

BankAccount: => IdActivityDtFirstSeen := MIN(BankAccountEvent.Transaction(T_SrcClassType = 4), EventDate);
BankAccount: => IdActivityDtLastSeen := MAX(BankAccountEvent.Transaction(T_SrcClassType = 4), EventDate);
BankAccount: => LastRecordId := MAP(ALL(BankAccountEvent.Transaction,T_SrcClassType IN [2,3]) => MIN(BankAccountEvent.Transaction(T_SrcClassType IN [2,3] AND EventDate=BankAccount.DtFirstSeen), RecordId),
                  MAX(BankAccountEvent.Transaction(T_SrcClassType = 4 AND EventDate=BankAccount.IdActivityDtLastSeen), RecordId));

BankAccount: => IdentityCount := COUNT(PersonBankAccount{Subject});
BankAccount: => IdentityCountGt2 := MAP(IdentityCount > 2 => 1, 0);

BankAccount: => EventCount := COUNT(BankAccountEvent);

// Known Risk 

BankAccount: => HighRiskRouting := rBank.HighRiskRouting;
BankAccount: => KrHighRiskFlag := MAP(COUNT(BankAccountEvent.Transaction(KrHighRiskBankFlag=1)) > 0 => 1, 0);
BankAccount: => KrMediumRiskFlag := MAP(COUNT(BankAccountEvent.Transaction(KrMediumRiskBankFlag=1))>0 => 1, 0);
BankAccount: => KrLowRiskFlag := MAP(COUNT(BankAccountEvent.Transaction(KrLowRiskBankFlag=1))>0 => 1, 0);
BankAccount: => KrFlag := MAP(COUNT(BankAccountEvent.Transaction(KrBankFlag=1))>0 => 1, 0);

BankAccount: => SafeFlag := MAP(COUNT(BankAccountEvent.Transaction(SafeFlag=1))>0 => 1, 0);
BankAccount: => ContributorSafeFlag := MAP(COUNT(BankAccountEvent.Transaction(ContributorSafeFlag=1))>0 => 1, 0);

BankAccount: => LastEventDate := MAX(BankAccountEvent.Transaction, EventDate);
BankAccount: => KrLastEventDate := MAX(BankAccountEvent.Transaction(KrHighRiskBankFlag=1 OR KrMediumRiskBankFlag = 1 OR KrLowRiskBankFlag=1), EventDate);
BankAccount: => KrEventAfterLastKnownRiskCount := COUNT(BankAccountEvent(Transaction.EventDate > BankAccount.KrLastEventDate));
BankAccount: => KrEventAfterLastKnownRiskFlag := MAP(KrEventAfterLastKnownRiskCount>0=>1, 0);

BankAccount: => KrBnk800Flag := MAP(COUNT(BankAccountEvent.Transaction(KrBnk800Flag=1))>0 => 1, 0);
BankAccount: => KrBnk801Flag := MAP(COUNT(BankAccountEvent.Transaction(KrBnk801Flag=1))>0 => 1, 0);
BankAccount: => KrBnk802Flag := MAP(COUNT(BankAccountEvent.Transaction(KrBnk802Flag=1))>0 => 1, 0);
BankAccount: => KrBnk890Flag := MAP(COUNT(BankAccountEvent.Transaction(KrBnk890Flag=1))>0 => 1, 0);
BankAccount: => KrBnk891Flag := MAP(COUNT(BankAccountEvent.Transaction(KrBnk891Flag=1))>0 => 1, 0);
BankAccount: => KrBnk892Flag := MAP(COUNT(BankAccountEvent.Transaction(KrBnk892Flag=1))>0 => 1, 0);
BankAccount: => KrBnk893Flag := MAP(COUNT(BankAccountEvent.Transaction(KrBnk893Flag=1))>0 => 1, 0);

// Velocity
BankAccount: => VlEvent1AllCount := COUNT(BankAccountEvent.Transaction(EventAge<2));
BankAccount: => VlEvent7AllCount := COUNT(BankAccountEvent.Transaction(EventAge<8));
BankAccount: => VlEvent30AllDayCount := COUNT(BankAccountEvent.Transaction(EventAge<31));
BankAccount: => VlEvent365AllDayCount := COUNT(BankAccountEvent.Transaction(EventAge<366));

BankAccount: => VlEvent7AllActiveFlag := MAP(VlEvent7AllCount > 0 => 1, 0);
BankAccount: => VlEvent30AllActiveFlag := MAP(VlEvent30AllDayCount > 0 => 1, 0);

BankAccount: => VlEvent1Count := COUNT(BankAccountEvent.Transaction(InCustomerPopulation = 1 AND EventAge<2));
BankAccount: => VlEvent7Count := COUNT(BankAccountEvent.Transaction(InCustomerPopulation = 1 AND EventAge<8));
BankAccount: => VlEvent30Count := COUNT(BankAccountEvent.Transaction(InCustomerPopulation = 1 AND EventAge<31));
BankAccount: => VlEvent365Count := COUNT(BankAccountEvent.Transaction(InCustomerPopulation = 1 AND EventAge<366));

BankAccount: => VlEvent7ActiveFlag := MAP(VlEvent7Count > 0 => 1, 0);
BankAccount: => VlEvent30ActiveFlag := MAP(VlEvent30Count > 0 => 1, 0);


/* DRIVERS LICENCE */

DriversLicense: => CustomerId := rCustomer.CustomerId;
DriversLicense: => IndustryType := rCustomer.IndustryType;
DriversLicense: => SourceCustomerCount := COUNT(SourceCustomers);
DriversLicense: => EntityContextUid := '_20' + OttoDriversLicenseId;
DriversLicense: => EntityType := 20;
DriversLicense: => Label := LicenseNumber;
DriversLicense: => InCustomerPopulation := MAP(COUNT(SourceCustomers(rSourceCustomer=rCustomer))>0 => 1, 0);
DriversLicense: => DtFirstSeen := MIN(DriversLicenseEvent.Transaction, EventDate);
DriversLicense: => DtLastSeen := MAX(DriversLicenseEvent.Transaction, EventDate);
DriversLicense: => IdActivityDtFirstSeen := MIN(DriversLicenseEvent.Transaction(T_SrcClassType = 4), EventDate);
DriversLicense: => IdActivityDtLastSeen := MAX(DriversLicenseEvent.Transaction(T_SrcClassType = 4), EventDate);
DriversLicense: => LastRecordId := MAP(ALL(DriversLicenseEvent.Transaction,T_SrcClassType IN [2,3]) => MIN(DriversLicenseEvent.Transaction(T_SrcClassType IN [2,3] AND EventDate=DriversLicense.DtFirstSeen), RecordId),
                  MAX(DriversLicenseEvent.Transaction(T_SrcClassType = 4 AND EventDate=DriversLicense.IdActivityDtLastSeen), RecordId));


DriversLicense: => IdentityCount := COUNT(PersonDriversLicense{Subject});
DriversLicense: => IdentityCountGt2 := MAP(IdentityCount > 2 => 1, 0);
DriversLicense: => EventCount := COUNT(DriversLicenseEvent);


// Known Risk 
DriversLicense: => KrHighRiskFlag := MAP(COUNT(DriversLicenseEvent.Transaction(KrHighRiskDlFlag=1)) > 0 => 1, 0);
DriversLicense: => KrMediumRiskFlag := MAP(COUNT(DriversLicenseEvent.Transaction(KrMediumRiskDlFlag=1))>0 => 1, 0);
DriversLicense: => KrLowRiskFlag := MAP(COUNT(DriversLicenseEvent.Transaction(KrLowRiskDlFlag=1))>0 => 1, 0);
DriversLicense: => KrFlag := MAP(COUNT(DriversLicenseEvent.Transaction(KrDlFlag=1))>0 => 1, 0);

DriversLicense: => SafeFlag := MAP(COUNT(DriversLicenseEvent.Transaction(SafeFlag=1))>0 => 1, 0);
DriversLicense: => ContributorSafeFlag := MAP(COUNT(DriversLicenseEvent.Transaction(ContributorSafeFlag=1))>0 => 1, 0);

DriversLicense: => LastEventDate := MAX(DriversLicenseEvent.Transaction, EventDate);
DriversLicense: => KrLastEventDate := MAX(DriversLicenseEvent.Transaction(KrHighRiskDlFlag=1 OR KrMediumRiskDlFlag = 1 OR KrLowRiskDlFlag=1), EventDate);
DriversLicense: => KrEventAfterLastKnownRiskCount := COUNT(DriversLicenseEvent(Transaction.EventDate > DriversLicense.KrLastEventDate));
DriversLicense: => KrEventAfterLastKnownRiskFlag := MAP(KrEventAfterLastKnownRiskCount>0=>1, 0);

DriversLicense: => KrDl200Flag := MAP(COUNT(DriversLicenseEvent.Transaction(KrDl200Flag=1)) > 0 => 1, 0);
DriversLicense: => KrDl201Flag := MAP(COUNT(DriversLicenseEvent.Transaction(KrDl201Flag=1)) > 0 => 1, 0);
DriversLicense: => KrDl202Flag := MAP(COUNT(DriversLicenseEvent.Transaction(KrDl202Flag=1)) > 0 => 1, 0);
DriversLicense: => KrDl203Flag := MAP(COUNT(DriversLicenseEvent.Transaction(KrDl203Flag=1)) > 0 => 1, 0);
DriversLicense: => KrDl204Flag := MAP(COUNT(DriversLicenseEvent.Transaction(KrDl204Flag=1)) > 0 => 1, 0);
DriversLicense: => KrDl290Flag := MAP(COUNT(DriversLicenseEvent.Transaction(KrDl290Flag=1)) > 0 => 1, 0);
DriversLicense: => KrDl291Flag := MAP(COUNT(DriversLicenseEvent.Transaction(KrDl291Flag=1)) > 0 => 1, 0);
DriversLicense: => KrDl292Flag := MAP(COUNT(DriversLicenseEvent.Transaction(KrDl292Flag=1)) > 0 => 1, 0);
DriversLicense: => KrDl293Flag := MAP(COUNT(DriversLicenseEvent.Transaction(KrDl293Flag=1)) > 0 => 1, 0);


// Velocity
DriversLicense: => VlEvent1AllCount := COUNT(DriversLicenseEvent.Transaction(EventAge<2));
DriversLicense: => VlEvent7AllCount := COUNT(DriversLicenseEvent.Transaction(EventAge<8));
DriversLicense: => VlEvent30AllDayCount := COUNT(DriversLicenseEvent.Transaction(EventAge<31));
DriversLicense: => VlEvent365AllDayCount := COUNT(DriversLicenseEvent.Transaction(EventAge<366));

DriversLicense: => VlEvent7AllActiveFlag := MAP(VlEvent7AllCount > 0 => 1, 0);
DriversLicense: => VlEvent30AllActiveFlag := MAP(VlEvent30AllDayCount > 0 => 1, 0);

DriversLicense: => VlEvent1Count := COUNT(DriversLicenseEvent.Transaction(InCustomerPopulation = 1 AND EventAge<2));
DriversLicense: => VlEvent7Count := COUNT(DriversLicenseEvent.Transaction(InCustomerPopulation = 1 AND EventAge<8));
DriversLicense: => VlEvent30Count := COUNT(DriversLicenseEvent.Transaction(InCustomerPopulation = 1 AND EventAge<31));
DriversLicense: => VlEvent365Count := COUNT(DriversLicenseEvent.Transaction(InCustomerPopulation = 1 AND EventAge<366));

DriversLicense: => VlEvent7ActiveFlag := MAP(VlEvent7Count > 0 => 1, 0);
DriversLicense: => VlEvent30ActiveFlag := MAP(VlEvent30Count > 0 => 1, 0);

/* IP ADDRESS */

InternetProtocol: => CustomerId := rCustomer.CustomerId;
InternetProtocol: => IndustryType := rCustomer.IndustryType;
InternetProtocol: => SourceCustomerCount := COUNT(SourceCustomers);
InternetProtocol: => EntityContextUid := '_18' + OttoIpAddressId;
InternetProtocol: => Label := IpAddress;
InternetProtocol: => EntityType := 18;
InternetProtocol: => InCustomerPopulation := MAP(COUNT(SourceCustomers(rSourceCustomer=rCustomer))>0 => 1, 0);
InternetProtocol: => DtFirstSeen := MIN(InternetProtocolEvent.Transaction, EventDate);
InternetProtocol: => DtLastSeen := MAX(InternetProtocolEvent.Transaction, EventDate);
InternetProtocol: => IdActivityDtFirstSeen := MIN(InternetProtocolEvent.Transaction(T_SrcClassType = 4), EventDate);
InternetProtocol: => IdActivityDtLastSeen := MAX(InternetProtocolEvent.Transaction(T_SrcClassType = 4), EventDate);
InternetProtocol: => LastRecordId := MAP(ALL(InternetProtocolEvent.Transaction,T_SrcClassType IN [2,3]) => MIN(InternetProtocolEvent.Transaction(T_SrcClassType IN [2,3] AND EventDate=InternetProtocol.DtFirstSeen), RecordId),
                  MAX(InternetProtocolEvent.Transaction(T_SrcClassType = 4 AND EventDate=InternetProtocol.IdActivityDtLastSeen), RecordId));


InternetProtocol: => IdentityCount := COUNT(PersonIpAddress{Subject});
InternetProtocol: => EventCount := COUNT(InternetProtocolEvent);

InternetProtocol: => IpNotUs := MAP(COUNT(InternetProtocolEvent.Transaction(IpNotUs=1))>0 => 1, 0); 
InternetProtocol: => IpVpn := MAP(COUNT(InternetProtocolEvent.Transaction(IpVpn=1))>0 => 1, 0); 
InternetProtocol: => IpHighRiskCity := MAP(COUNT(InternetProtocolEvent.Transaction(IpHighRiskCity=1))>0 => 1, 0); 
InternetProtocol: => IpHosted := MAP(COUNT(InternetProtocolEvent.Transaction(IpHosted=1))>0 => 1, 0); 
InternetProtocol: => IpTor := MAP(COUNT(InternetProtocolEvent.Transaction(IpTor=1))>0 => 1, 0); 

// Known Risk 
InternetProtocol: => KrHighRiskFlag := MAP(COUNT(InternetProtocolEvent.Transaction(KrHighRiskIpAddressFlag=1)) > 0 => 1, 0);
InternetProtocol: => KrMediumRiskFlag := MAP(COUNT(InternetProtocolEvent.Transaction(KrMediumRiskIpAddressFlag=1)) > 0 => 1, 0);
InternetProtocol: => KrLowRiskFlag := MAP(COUNT(InternetProtocolEvent.Transaction(KrLowRiskIpAddressFlag=1)) > 0 => 1, 0);
InternetProtocol: => KrFlag := MAP(COUNT(InternetProtocolEvent.Transaction(KrIpFlag=1)) > 0 => 1, 0);

InternetProtocol: => SafeFlag := MAP(COUNT(InternetProtocolEvent.Transaction(SafeFlag=1))>0 => 1, 0);
InternetProtocol: => ContributorSafeFlag := MAP(COUNT(InternetProtocolEvent.Transaction(ContributorSafeFlag=1))>0 => 1, 0);

InternetProtocol: => KrIp600Flag := MAP(COUNT(InternetProtocolEvent.Transaction(KrIp600Flag=1))>0 => 1, 0);
InternetProtocol: => KrIp601Flag := MAP(COUNT(InternetProtocolEvent.Transaction(KrIp601Flag=1))>0 => 1, 0);
InternetProtocol: => KrIp602Flag := MAP(COUNT(InternetProtocolEvent.Transaction(KrIp602Flag=1))>0 => 1, 0);
InternetProtocol: => KrIp603Flag := MAP(COUNT(InternetProtocolEvent.Transaction(KrIp603Flag=1))>0 => 1, 0);
InternetProtocol: => KrIp604Flag := MAP(COUNT(InternetProtocolEvent.Transaction(KrIp604Flag=1))>0 => 1, 0);
InternetProtocol: => KrIp605Flag := MAP(COUNT(InternetProtocolEvent.Transaction(KrIp605Flag=1))>0 => 1, 0);
InternetProtocol: => KrIp690Flag := MAP(COUNT(InternetProtocolEvent.Transaction(KrIp690Flag=1))>0 => 1, 0);
InternetProtocol: => KrIp691Flag := MAP(COUNT(InternetProtocolEvent.Transaction(KrIp691Flag=1))>0 => 1, 0);
InternetProtocol: => KrIp692Flag := MAP(COUNT(InternetProtocolEvent.Transaction(KrIp692Flag=1))>0 => 1, 0);
InternetProtocol: => KrIp693Flag := MAP(COUNT(InternetProtocolEvent.Transaction(KrIp693Flag=1))>0 => 1, 0);
InternetProtocol: => KrIp1000Flag := MAP(COUNT(InternetProtocolEvent.Transaction(KrIp1000Flag=1))>0 => 1, 0);
InternetProtocol: => KrIp1001Flag := MAP(COUNT(InternetProtocolEvent.Transaction(KrIp1001Flag=1))>0 => 1, 0);
InternetProtocol: => KrIp1090Flag := MAP(COUNT(InternetProtocolEvent.Transaction(KrIp1090Flag=1))>0 => 1, 0);
InternetProtocol: => KrIp1091Flag := MAP(COUNT(InternetProtocolEvent.Transaction(KrIp1091Flag=1))>0 => 1, 0);
InternetProtocol: => KrIp1092Flag := MAP(COUNT(InternetProtocolEvent.Transaction(KrIp1092Flag=1))>0 => 1, 0);
InternetProtocol: => KrIp1093Flag := MAP(COUNT(InternetProtocolEvent.Transaction(KrIp1093Flag=1))>0 => 1, 0);


InternetProtocol: => LastEventDate := MAX(InternetProtocolEvent.Transaction, EventDate);
InternetProtocol: => KrLastEventDate := MAX(InternetProtocolEvent.Transaction(KrHighRiskIpAddressFlag=1 OR KrMediumRiskIpAddressFlag=1 OR KrLowRiskIpAddressFlag=1), EventDate);
InternetProtocol: => KrEventAfterLastKnownRiskCount := COUNT(InternetProtocolEvent(Transaction.EventDate > InternetProtocol.KrLastEventDate));
InternetProtocol: => KrEventAfterLastKnownRiskFlag := MAP(KrEventAfterLastKnownRiskCount>0=>1, 0);

// Velocity

InternetProtocol: => VlEvent1AllCount := COUNT(InternetProtocolEvent.Transaction(EventAge<2));
InternetProtocol: => VlEvent7AllCount := COUNT(InternetProtocolEvent.Transaction(EventAge<8));
InternetProtocol: => VlEvent30AllDayCount := COUNT(InternetProtocolEvent.Transaction(EventAge<31));
InternetProtocol: => VlEvent365AllDayCount := COUNT(InternetProtocolEvent.Transaction(EventAge<366));

InternetProtocol: => VlEvent7AllActiveFlag := MAP(VlEvent7AllCount > 0 => 1, 0);
InternetProtocol: => VlEvent30AllActiveFlag := MAP(VlEvent30AllDayCount > 0 => 1, 0);

InternetProtocol: => VlEvent1Count := COUNT(InternetProtocolEvent.Transaction(InCustomerPopulation = 1 AND EventAge<2));
InternetProtocol: => VlEvent7Count := COUNT(InternetProtocolEvent.Transaction(InCustomerPopulation = 1 AND EventAge<8));
InternetProtocol: => VlEvent30Count := COUNT(InternetProtocolEvent.Transaction(InCustomerPopulation = 1 AND EventAge<31));
InternetProtocol: => VlEvent365Count := COUNT(InternetProtocolEvent.Transaction(InCustomerPopulation = 1 AND EventAge<366));

InternetProtocol: => VlEvent7ActiveFlag := MAP(VlEvent7Count > 0 => 1, 0);
InternetProtocol: => VlEvent30ActiveFlag := MAP(VlEvent30Count > 0 => 1, 0);
   

Address: => CustomerId := rCustomer.CustomerId;
Address: => IndustryType := rCustomer.IndustryType;
Address: => InCustomerPopulation := MAP(COUNT(SourceCustomers(rSourceCustomer=rCustomer))>0 => 1, 0);
Address: => SourceCustomerCount := COUNT(SourceCustomers);
Address: => FullAddress := CleanSpaces(TRIM(TRIM(PrimaryRange) + ' ' + TRIM(TRIM(Predirectional) + ' ' + TRIM(TRIM(PrimaryName) + ' ' + TRIM(TRIM(Suffix) + ' ' + TRIM(TRIM(Postdirectional) + ' ' + TRIM(TRIM(UnitDesignation) + ' ' + TRIM(TRIM(SecondaryRange) + ' ' + TRIM(TRIM(VanityCity) + ' ' + TRIM(State))))))))));
Address: => StreetAddress := CleanSpaces(TRIM(TRIM(PrimaryRange) + ' ' + TRIM(TRIM(Predirectional) + ' ' + TRIM(TRIM(PrimaryName) + ' ' + TRIM(TRIM(Suffix) + ' ' + TRIM(TRIM(Postdirectional) + ' ' + TRIM(TRIM(UnitDesignation) + ' ' + TRIM(TRIM(SecondaryRange)))))))));
Address: => EntityContextUid := '_09' + OttoAddressId;
Address: => EntityType := 9;
Address: => DtFirstSeen := MIN(AddressEvent.Transaction, EventDate);
Address: => DtLastSeen := MAX(AddressEvent.Transaction, EventDate);

Address: => IdActivityDtFirstSeen := MIN(AddressEvent.Transaction(T_SrcClassType = 4), EventDate);
Address: => IdActivityDtLastSeen := MAX(AddressEvent.Transaction(T_SrcClassType = 4), EventDate);
Address: => LastRecordId := MAP(ALL(AddressEvent.Transaction,T_SrcClassType IN [2,3]) => MIN(AddressEvent.Transaction(T_SrcClassType IN [2,3] AND EventDate=Address.DtFirstSeen), RecordId),
                  MAX(AddressEvent.Transaction(T_SrcClassType = 4 AND EventDate=Address.IdActivityDtLastSeen), RecordId));

Address: => NotInJurisdictionState := MAP(State != rCustomer.JurisdictionState => 1, 0);
Address: => InvalidAddress := MAP(ACECleanerErrorCode IN ['E101','E212','E213','E214','E216','E302','E412','E413','E420','E421','E422','E423','E425','E427','E428','E429','E430','E431','E439','E500','E501','E502','E503','E504','E505','E600'] => 1, 0);
Address: => AddressIsVacant := MAX(AddressEvent, Transaction.AddressIsVacant);
Address: => AddressIsCmra := MAX(AddressEvent, Transaction.AddressIsCmra);
Address: => AddressIsPoBox := MAX(AddressEvent, Transaction.AddressIsPoBox);

Address: => EventCount := COUNT(AddressEvent);

Address: => IdentityCount := COUNT(PersonAddress{Subject});
Address: => HighFrequencyFlag := MAP(IdentityCount >= 20 => 1, 0);

Address: => AllPersonCount := COUNT(PersonAddress);
Address: => AllHighFrequencyFlag := MAP(AllPersonCount >= 20 => 1, 0);

Address: => DeceasedPersonCount := COUNT(PersonAddress(Subject.Deceased = 1 AND Subject.InCustomerPopulation=1));
Address: => DeceasedPersonPercent := DeceasedPersonCount / IdentityCount;

Address: => AllDeceasedPersonCount := COUNT(PersonAddress(Subject.Deceased = 1));
Address: => AllDeceasedPersonPercent := AllDeceasedPersonCount / AllPersonCount;

Address: => DeceasedMatchPersonCount := COUNT(PersonAddress(Subject.Deceased = 1 AND Subject.InCustomerPopulation=1 AND Subject.DeceasedMatch = 1));
Address: => DeceasedMatchPersonPercent := DeceasedMatchPersonCount / IdentityCount;               

Address: => AllDeceasedMatchPersonCount := COUNT(PersonAddress(Subject.Deceased = 1 AND Subject.DeceasedMatch = 1));
Address: => AllDeceasedMatchPersonPercent := AllDeceasedMatchPersonCount / AllPersonCount;               

Address: => HighRiskDeathPriorToAllEventsPersonCount := SUM(PersonAddress(Subject.InCustomerPopulation=1), Subject.HighRiskDeathPriorToAllEvents); 
Address: => HighRiskDeathPriorToAllEventsPersonPercent := HighRiskDeathPriorToAllEventsPersonCount / IdentityCount;

Address: => HighRiskDeathPriorToAllEventsPercentFlag := MAP(HighRiskDeathPriorToAllEventsPersonPercent > 0.10 => 1, 0);

Address: => AllHighRiskDeathPriorToAllEventsPersonCount := SUM(PersonAddress, Subject.HighRiskDeathPriorToAllEvents); 
Address: => AllHighRiskDeathPriorToAllEventsPersonPercent := AllHighRiskDeathPriorToAllEventsPersonCount / IdentityCount;

Address: => AllHighRiskDeathPriorToAllEventsPersonPercentFlag := MAP(AllHighRiskDeathPriorToAllEventsPersonPercent > 0.10 => 1, 0);

// Velocity

Address: => VlEvent1AllCount := COUNT(AddressEvent.Transaction(EventAge<2));
Address: => VlEvent7AllCount := COUNT(AddressEvent.Transaction(EventAge<8));
Address: => VlEvent30AllDayCount := COUNT(AddressEvent.Transaction(EventAge<31));
Address: => VlEvent365AllDayCount := COUNT(AddressEvent.Transaction(EventAge<366));

Address: => VlEvent7AllActiveFlag := MAP(VlEvent7AllCount > 0 => 1, 0);
Address: => VlEvent30AllActiveFlag := MAP(VlEvent30AllDayCount > 0 => 1, 0);

Address: => VlEvent1Count := COUNT(AddressEvent.Transaction(InCustomerPopulation = 1 AND EventAge<2));
Address: => VlEvent7Count := COUNT(AddressEvent.Transaction(InCustomerPopulation = 1 AND EventAge<8));
Address: => VlEvent30Count := COUNT(AddressEvent.Transaction(InCustomerPopulation = 1 AND EventAge<31));
Address: => VlEvent365Count := COUNT(AddressEvent.Transaction(InCustomerPopulation = 1 AND EventAge<366));

Address: => VlEvent7ActiveFlag := MAP(VlEvent7Count > 0 => 1, 0);
Address: => VlEvent30ActiveFlag := MAP(VlEvent30Count > 0 => 1, 0);


// Known Risk  
Address: => KrHighRiskFlag := MAP(COUNT(AddressEvent.Transaction(KrHighRiskAddressFlag=1))>0 => 1, 0);
Address: => KrMediumRiskFlag := MAP(COUNT(AddressEvent.Transaction(KrMediumRiskAddressFlag=1))>0 => 1, 0);
Address: => KrLowRiskFlag := MAP(COUNT(AddressEvent.Transaction(KrLowRiskAddressFlag=1))>0 => 1, 0);
Address: => KrFlag := MAP(COUNT(AddressEvent.Transaction(KrAddressFlag=1))>0 => 1, 0);

Address: => SafeFlag := MAP(COUNT(AddressEvent.Transaction(SafeFlag=1))>0 => 1, 0);
Address: => ContributorSafeFlag := MAP(COUNT(AddressEvent.Transaction(ContributorSafeFlag=1))>0 => 1, 0);

Address: => KrAddr300Flag := MAP(COUNT(AddressEvent.Transaction(KrAddr300Flag=1))>0 => 1, 0);
Address: => KrAddr301Flag := MAP(COUNT(AddressEvent.Transaction(KrAddr301Flag=1))>0 => 1, 0);
Address: => KrAddr302Flag := MAP(COUNT(AddressEvent.Transaction(KrAddr302Flag=1))>0 => 1, 0);
Address: => KrAddr303Flag := MAP(COUNT(AddressEvent.Transaction(KrAddr303Flag=1))>0 => 1, 0);
Address: => KrAddr390Flag := MAP(COUNT(AddressEvent.Transaction(KrAddr390Flag=1))>0 => 1, 0);
Address: => KrAddr391Flag := MAP(COUNT(AddressEvent.Transaction(KrAddr391Flag=1))>0 => 1, 0);
Address: => KrAddr392Flag := MAP(COUNT(AddressEvent.Transaction(KrAddr392Flag=1))>0 => 1, 0);
Address: => KrAddr393Flag := MAP(COUNT(AddressEvent.Transaction(KrAddr393Flag=1))>0 => 1, 0);

Address: => LastEventDate := MAX(AddressEvent.Transaction, EventDate);
Address: => KrLastEventDate := MAX(AddressEvent.Transaction(KrHighRiskAddressFlag=1 OR KrMediumRiskAddressFlag=1 OR KrLowRiskAddressFlag=1), EventDate);
Address: => KrEventAfterLastKnownRiskCount := COUNT(AddressEvent(Transaction.EventDate > Address.KrLastEventDate));
Address: => KrEventAfterLastKnownRiskFlag := MAP(KrEventAfterLastKnownRiskCount>0=>1, 0);

Customer: => PersonCount := COUNT(PersonAddress(Subject.InCustomerPopulation=1){Subject});
Customer: => AllPersonCount := COUNT(PersonAddress{Subject});
Customer: => DeceasedPersonCount := COUNT(PersonAddress(Subject.InCustomerPopulation=1 AND Subject.Deceased=1){Subject});
Customer: => DeceasedPersonPercent := DeceasedPersonCount / PersonCount;
Customer: => AllDeceasedPersonCount := COUNT(PersonAddress(Subject.Deceased=1){Subject});
Customer: => AllDeceasedPersonPercent := AllDeceasedPersonCount / AllPersonCount;

Customer: => AllDeceasedMatchedPersonCount := COUNT(PersonAddress(Subject.DeceasedMatch=1));
Customer: => AllDeceasedMatchedPercent := AllDeceasedMatchedPersonCount / AllPersonCount;

Customer: => AddressCount := COUNT(PersonAddress(Location.InCustomerPopulation=1){Location});
Customer: => AllAddressCount := COUNT(PersonAddress{Location});
Customer: => HighFrequencyAddressCount := SUM(PersonAddress(Location.InCustomerPopulation=1){Location}, Location.HighFrequencyFlag);
Customer: => AllHighFrequencyAddressCount := SUM(PersonAddress{Location}, Location.HighFrequencyFlag);
Customer: => HighFrequencyAddressPercent := HighFrequencyAddressCount / AddressCount;
Customer: => AllHighFrequencyAddressPercent := AllHighFrequencyAddressCount / AllAddressCount;
Customer: => PersonEventCountAverage := CustomerPerson.Subject.EventCount$Ave;
Customer: => PersonEventCountMedian := CustomerPerson.Subject.EventCount$Median;
Customer: => PersonAddressCountAverage := CustomerPerson.Subject.AddressCount$Ave;
Customer: => PersonAddressCountMedian := CustomerPerson.Subject.AddressCount$Median;

Customer: => JurisdictionStateTop := ONLY(TOPN(States, 1, -StateCount));
Customer: => JurisdictionState := JurisdictionStateTop.State;

Customer: => EventDateMax := MAX(PersonEvent/*(Transaction.EventTypeCount=0)*/, EventDate); // only count non-performance data rows. The reason is that after the fact people will be validating and that will move the max date.


QUERY: showCustomerPersonEvent <= Event;
QUERY: showCustomerPerson <= Person;
QUERY: showCustomer <= Customer;
QUERY: showCustomerAddress <= Address;
QUERY: showCustomerAddressPerson <= PersonAddress;
QUERY: showCustomerEmail <= Email;
QUERY: showCustomerInternetProtocol <= InternetProtocol;
QUERY: showCustomerPhone <= Phone;
QUERY: showCustomerSocialSecurityNumber <= SocialSecurityNumber;
QUERY: showCustomerBank <= Bank;
QUERY: showCustomerBankAccount <= BankAccount;
QUERY: showCustomerDriversLicense <= DriversLicense;


// Entities in the correct shape with labels etc..
  // These need to be joined first before the entities are appended together.
//QUERY: showCustomerPersonGraphEntities <= Person{Subject.EntityContextUid, Subject.Label, EntityType := 1}; 
// edges are drawn ONLY FROM PERSON to other entities.

QUERY: showCustomerPersonEntities <= Person
                            {
                              SourceCustomer := rCustomer,
                              rCustomer.CustomerId,
                              rCustomer.IndustryType,
                              EntityContextUid,
                              EntityType,
                              Label,

                              InCustomerPopulation,
                              ContributorSafeFlag,
                              SafeFlag,

                              KrHighRiskFlag,
                              KrMediumRiskFlag,
                              KrLowRiskFlag,

                              CurrentlyIncarceratedFlag,
                              FraudOffensesFlag,
                              AssociatedWithIncarceratedFlag,
                              AssociatedWithFraudOffensesFlag,
                              
                              DeceasedMatch,
															DateOfBirth,
															DeceasedMatchDateOfDeath,
															Age,
															IsMinor,
															
															
                              DeathPriorToAllEvents,
															DtFirstSeen,
															DtLastSeen,
                              
                              {
                                // Make this unidirectional so we only draw one edge in the graph between people.
                                PersonPerson(FromPerson < ToPerson).ToPerson.EntityContextUid, PersonPerson(FromPerson < ToPerson).ToPerson.DtFirstSeen, PersonPerson(FromPerson < ToPerson).ToPerson.DtLastSeen
                              },
															
                              {
                                PersonAddress.Location.EntityContextUid, PersonAddress.DtFirstSeen, PersonAddress.DtLastSeen
                              },
															{
															  PersonIpAddress.Ip.EntityContextUid, PersonIpAddress.DtFirstSeen, PersonIpAddress.DtLastSeen
															},
                              {
															  PersonSSN.Social.EntityContextUid, PersonSSN.DtFirstSeen, PersonSSN.DtLastSeen
															},
															{
															 PersonPhone.PhoneNumber.EntityContextUid, PersonPhone.DtFirstSeen, PersonPhone.DtLastSeen
															},
                              {
                               PersonEmail.Emailof.EntityContextUid, PersonEmail.DtFirstSeen, PersonEmail.DtLastSeen
                              },
                              {
                               PersonBankAccount.Account.EntityContextUid, PersonBankAccount.DtFirstSeen, PersonBankAccount.DtLastSeen
                              },
                              {
                               PersonDriversLicense.License.EntityContextUid, PersonDriversLicense.DtFirstSeen, PersonDriversLicense.DtLastSeen
                              }
                              /*
                              {
                                PersonAddress.Location.EntityContextUid
                              },
															{
															  PersonIpAddress.Ip.EntityContextUid
															},
                              {
															  PersonSSN.Social.EntityContextUid
															},
															{
															 PersonPhone.PhoneNumber.EntityContextUid
															},
                              {
                               PersonEmail.Emailof.EntityContextUid
                              },
                              {
                               PersonBankAccount.Account.EntityContextUid
                              },
                              {
                               PersonDriversLicense.License.EntityContextUid
                              }   
                              */                           
                            };

QUERY: showCustomerAddressEntities <= Address
                            {
                              SourceCustomer := rCustomer, 
                              rCustomer.CustomerId,
                              rCustomer.IndustryType,
                              EntityContextUid,
                              Label := StreetAddress,
                              EntityType,
                              Latitude,
                              Longitude,
															StreetAddress,
															VanityCity,
															State,
															Zip,
															
                              InCustomerPopulation,
                              ContributorSafeFlag,
                              SafeFlag,
                              
                              KrHighRiskFlag,
                              KrMediumRiskFlag,
                              KrLowRiskFlag,
                              
                              PersonCount := IdentityCount,
                              HighFrequencyFlag,
                              HighRiskDeathPriorToAllEventsPercentFlag,
                              AllHighRiskDeathPriorToAllEventsPersonPercentFlag,
                              DeceasedPersonCount,
															DtFirstSeen,
															DtLastSeen

                            };

QUERY: showCustomerIpAddressEntities <= InternetProtocol
                            {
                              SourceCustomer := rCustomer, 
                              rCustomer.CustomerId,
                              rCustomer.IndustryType,
                              EntityContextUid,
                              Label,
                              EntityType,

                              PersonCount := IdentityCount,												

                              InCustomerPopulation,
                              ContributorSafeFlag,
                              SafeFlag,

															DtFirstSeen,
															DtLastSeen,
                              
                              KrHighRiskFlag,
                              KrMediumRiskFlag,
                              KrLowRiskFlag
/*                              
                              PersonCount := IdentityCount,
                              HighFrequencyFlag,
                              HighRiskDeathPriorToAllEventsPercentFlag,
                              AllHighRiskDeathPriorToAllEventsPersonPercentFlag,
                              DeceasedPersonCount
*/                              

                            };

QUERY: showCustomerSsnEntities <= SocialSecurityNumber 
                            {
                              SourceCustomer := rCustomer, 
                              rCustomer.CustomerId,
                              rCustomer.IndustryType,
                              EntityContextUid,
                              Label,
                              EntityType,

                              PersonCount := IdentityCount,											

                              InCustomerPopulation,
                              ContributorSafeFlag,
                              SafeFlag,

															DtFirstSeen,
															DtLastSeen,
                              
                              KrHighRiskFlag,
                              KrMediumRiskFlag,
                              KrLowRiskFlag

                            };

QUERY: showCustomerPhoneEntities <= Phone 
                            {
                              SourceCustomer := rCustomer, 
                              rCustomer.CustomerId,
                              rCustomer.IndustryType,
                              EntityContextUid,
                              Label,
                              
                              EntityType,

                              PersonCount := IdentityCount,
															
                              InCustomerPopulation,
                              ContributorSafeFlag,
                              SafeFlag,

                              KrHighRiskFlag,
                              KrMediumRiskFlag,
                              KrLowRiskFlag,
															

															DtFirstSeen,
															DtLastSeen
                              
                            };

QUERY: showCustomerEmailEntities <= Email 
                            {
                              SourceCustomer := rCustomer, 
                              rCustomer.CustomerId,
                              rCustomer.IndustryType,
                              EntityContextUid,
                              Label,
                              
                              EntityType,

                              PersonCount := IdentityCount,
															
                             

                              InCustomerPopulation,
                              ContributorSafeFlag,
                              SafeFlag,

                              KrHighRiskFlag,
                              KrMediumRiskFlag,
                              KrLowRiskFlag,

															DtFirstSeen,
															DtLastSeen
                              
                            };
                            
                            
QUERY: showCustomerBankAccountEntities <= BankAccount 
                            {
                              SourceCustomer := rCustomer, 
                              rCustomer.CustomerId,
                              rCustomer.IndustryType,
                              EntityContextUid,
                              Label,
                              
                              
                              EntityType,
                              rBank.RoutingNumber,
                              AccountNumber,
                              AbbreviatedBankname,
                              PersonCount := IdentityCount,
															

                              InCustomerPopulation,
                              ContributorSafeFlag,
                              SafeFlag,
                              
                              KrHighRiskFlag,
                              KrMediumRiskFlag,
                              KrLowRiskFlag,
															DtFirstSeen,
															DtLastSeen
                              
                              
/*
                              PersonCount := IdentityCount,
                              HighFrequencyFlag,
                              HighRiskDeathPriorToAllEventsPercentFlag,
                              AllHighRiskDeathPriorToAllEventsPersonPercentFlag,
                              DeceasedPersonCount
*/                              

                            };
                            
QUERY: showCustomerDriversLicenseEntities <= DriversLicense 
                            {
                              SourceCustomer := rCustomer, 
                              rCustomer.CustomerId,
                              rCustomer.IndustryType,
                              EntityContextUid,
                              Label,
                              
                              
                              EntityType,

                              PersonCount := IdentityCount,
															                            
                              InCustomerPopulation,
                              ContributorSafeFlag,
                              SafeFlag,
                              
                              LicenseState := State,
                              InCustomerPopulation,
                              ContributorSafeFlag,
                              SafeFlag,
                              
                              KrHighRiskFlag,
                              KrMediumRiskFlag,
                              KrLowRiskFlag,
															DtFirstSeen,
															DtLastSeen

                            };                            
                                                        
QUERY: showCustomerPersonTreeEntities <= PersonPerson
                            {
                              SourceCustomer := rCustomer,
                              rCustomer.CustomerId,
                              rCustomer.IndustryType,
                              TreeUid := FromPerson.EntityContextUid,
                              // need to exclude self here.
                              ToPerson.EntityContextUid
                            };

QUERY: showCustomerAddressPersonTreeEntities <= PersonAddress
                            {
                              SourceCustomer := rCustomer,
                              rCustomer.CustomerId,
                              rCustomer.IndustryType,
                              TreeUid := Location.EntityContextUid,
                              // need to exclude self here.
                              Subject.EntityContextUid
                            };

QUERY: showCustomerPersonAddressTreeEntities <= PersonAddress
                            {
                              SourceCustomer := rCustomer,
                              rCustomer.CustomerId,
                              rCustomer.IndustryType,
                              TreeUid := Location.EntityContextUid,
                              // need to exclude self here.
                              Subject.EntityContextUid
                            };                            



QUERY: showCustomerPersonSSNTreeEntities <= PersonSSN 
                            {
                              SourceCustomer := rCustomer,
                              rCustomer.CustomerId,
                              rCustomer.IndustryType,
                              TreeUid := Social.EntityContextUid,
                              // need to exclude self here.
                              Subject.EntityContextUid
													  };

QUERY: showCustomerPersonIpTreeEntities <= PersonIpAddress 
                            {
                              SourceCustomer := rCustomer,
                              rCustomer.CustomerId,
                              rCustomer.IndustryType,
                              TreeUid := Ip.EntityContextUid,
                              // need to exclude self here.
                              Subject.EntityContextUid
													  };

QUERY: showCustomerPersonPhoneTreeEntities <= PersonPhone 
                            {
                              SourceCustomer := rCustomer,
                              rCustomer.CustomerId,
                              rCustomer.IndustryType,
                              TreeUid := PhoneNumber.EntityContextUid,
                              // need to exclude self here.
                              Subject.EntityContextUid
													  };

// In Progress...
QUERY: showCustomerPersonEmailTreeEntities <= PersonEmail 
                            {
                              SourceCustomer := rCustomer,
                              rCustomer.CustomerId,
                              rCustomer.IndustryType,
                              TreeUid := Emailof.EntityContextUid,
                              // need to exclude self here.
                              Subject.EntityContextUid
													  };

QUERY: showCustomerPersonBankAccountTreeEntities <= PersonBankAccount 
                            {
                              SourceCustomer := rCustomer,
                              rCustomer.CustomerId,
                              rCustomer.IndustryType,
                              TreeUid := Account.EntityContextUid,
                              // need to exclude self here.
                              Subject.EntityContextUid
													  };

QUERY: showCustomerPersonDriversLicenseTreeEntities <= PersonDriversLicense
                            {
                              SourceCustomer := rCustomer,
                              rCustomer.CustomerId,
                              rCustomer.IndustryType,
                              TreeUid := License.EntityContextUid,
                              // need to exclude self here.
                              Subject.EntityContextUid
													  };
