import _Control, BuildLogger, PromoteSupers, RoxieKeybuild, Scrubs_IP_Metadata, Std;

EXPORT Proc_Build_IP_Metadata(string version, const varstring eclsourceip):= function

	#workunit('name', 'IP Metadata Build - ' + version);

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//Spray IP_Metadata Files to Thor////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		sprayRaw 				:= IP_Metadata.Spray_IP_Metadata(version, eclsourceip);
		
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//Build/Move IP_Metadata Base////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
		bldBase					:= output(IP_Metadata.Map_IP_Metadata(version),,'~thor_data400::base::ip_metadata_main_'+version, overwrite, __compressed__);

		clrDelete 			:= sequential(nothor(fileservices.clearsuperfile('~thor_data400::base::ip_metadata_main_delete', true)),
																	nothor(fileservices.clearsuperfile('~thor_data400::in::ip_metadata_history_delete', true)));		
		
		mvBase					:= Std.File.PromoteSuperFileList(['~thor_data400::base::ip_metadata_main',
																											'~thor_data400::base::ip_metadata_main_father',
																											'~thor_data400::base::ip_metadata_main_grandfather',
																											'~thor_data400::base::ip_metadata_main_delete'], 
																											'~thor_data400::base::ip_metadata_main_'+version, true);		
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//Build/Move Raw IP_Metadata History Files///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	
		reformDaily 		:= project(distribute(IP_Metadata.File_IP_Metadata.Raw), IP_Metadata.Layout_IP_Metadata.History);													
		ccatRawHistory	:= output(dedup(sort(distribute(reformDaily + IP_Metadata.File_IP_Metadata.History, hash(ip_rng_beg, ip_rng_end)), record, local), record, local),,'~thor_data400::in::ip_metadata_history_'+version,__compressed__);
	
		mvRawHistory		:= Std.File.PromoteSuperFileList(['~thor_data400::in::ip_metadata_history',
																											'~thor_data400::in::ip_metadata_history_father',
																											'~thor_data400::in::ip_metadata_history_grandfather',
																											'~thor_data400::in::ip_metadata_history_delete'], '~thor_data400::in::ip_metadata_history_'+version, true);																					
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//Build IP_Metadata Keys/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
		RoxieKeyBuild.Mac_SK_BuildProcess_v2_local(IP_Metadata.Key_IP_Metadata_IPv4
																								,'~thor_data400::key::ip_metadata_ipv4'
																								,'~thor_data400::key::'+version+'::ip_metadata_ipv4'
																								,bldIPMetadata);	

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//Move IP_Metadata Keys to Superfiles////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		RoxieKeybuild.Mac_SK_Move_to_Built_v2('~thor_data400::key::ip_metadata_ipv4'
																					,'~thor_data400::key::'+version+'::ip_metadata_ipv4'
																					,mvBldIPMetadata);
	
		PromoteSupers.Mac_SK_Move_v2('~thor_data400::key::ip_metadata_ipv4','Q',mvQAIPMetadata,'3');

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//Update DOPs Page///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		dopsUpdate 			:= RoxieKeybuild.updateversion('IP_MetadataKeys', version, _control.MyInfo.EmailAddressNotify + ';judy.tao@lexisnexis.com', , 'N');
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//Build Strata Reports for Build/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
		IP_Metadata.Out_Strata_Population_Stats(IP_Metadata.File_IP_Metadata.Base
																						,version
																						,buildStrata);
																						
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//Build Scrubs Reports for Build/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
																						
		scrubsRuns		:= sequential(Scrubs_IP_Metadata.RawFileScrubs(version, _control.MyInfo.EmailAddressNotify + ';judy.tao@lexisnexis.com'), 
																Scrubs_IP_Metadata.BaseFileScrubs(version, _control.MyInfo.EmailAddressNotify + ';judy.tao@lexisnexis.com')
																);

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//Run Build, Add Logger, & Provide Email on Build Status/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
		sendEmail			:=  sequential(BuildLogger.BuildStart(false),
																													BuildLogger.PrepStart(false), 
																													sprayRaw, 
																													BuildLogger.PrepEnd(false),
																													BuildLogger.BaseStart(False), 
																													bldBase, 
																													BuildLogger.BaseEnd(False),
																													clrDelete, mvBase, ccatRawHistory, mvRawHistory,
																													BuildLogger.KeyStart(false), 
																													bldIPMetadata, mvBldIPMetadata, mvQAIPMetadata, 
																													BuildLogger.KeyEnd(false),
																													BuildLogger.PostStart(False),
																													dopsUpdate, buildStrata, scrubsRuns, 
																													BuildLogger.PostEnd(False), 
																													BuildLogger.BuildEnd(false)):
																													Success(FileServices.SendEmail(_control.MyInfo.EmailAddressNotify + ';judy.tao@lexisnexis.com', 'PhonesInfo Ported & Metadata Key Build Succeeded', workunit + ': Build complete.')),
																													Failure(FileServices.SendEmail(_control.MyInfo.EmailAddressNotify + ';judy.tao@lexisnexis.com', 'PhonesInfo Ported & Metadata Key Build Failed', workunit + '\n' + FAILMESSAGE));					
																												
	return sendEmail;

end;