Generated by SALT V3.7.0
Command line options: -MLocationID_iLink -eC:\Users\wilmotkx\AppData\Local\Temp\TFR6906.tmp 
File being processed :-
OPTIONS:-ga -gs2 -p0
MODULE:LocationId_iLink
FILENAME:LocationId
// Uncomment up to NINES for internal or external adl
IDFIELD:EXISTS:LocId
RIDFIELD:rid
RECORDS:50000000
POPULATION:5000000
NINES:3
 
FIELDTYPE:alpha:CAPS:ALLOW(ABCDEFGHIJKLMNOPQRSTUVWXYZ)
FIELDTYPE:number:ALLOW(0123456789)
FIELDTYPE:upper:CAPS:ONFAIL(CLEAN)
FIELDTYPE:zip5:ALLOW(0123456789):LENGTHS(0,5):ONFAIL(IGNORE)
FIELDTYPE:hasZip4:ALLOW(0123456789):LENGTHS(0,4):ONFAIL(IGNORE)
FIELDTYPE:alpha_st:ALLOW(ABCDEFGHIJKLMNOPQRSTUVWXYZ):LENGTHS(0,2):ONFAIL(IGNORE)
 
FUZZY:ErrStat:RS:CUSTOM(CustomErrStat):TYPE(STRING4)
FUZZY:PrimNameCountCheck:RS:CUSTOM(PrimNameCount):TYPE(UNSIGNED8)
FUZZY:PrimNameFuzzCheck:RS:CUSTOM(PrimNameMatch):TYPE(STRING28)
 
FIELD:aid:CARRY:0,0
FIELD:prim_range:FORCE(+):13,0
FIELD:predir:FORCE(--):7,0
FIELD:prim_name:EDIT1:HYPHEN1:PrimNameFuzzCheck:14,0  
FIELD:addr_suffix:FORCE(--):4,0
FIELD:postdir:FORCE(--):6,0
FIELD:unit_desig:CARRY:0,0
FIELD:sec_range:HYPHEN1:FORCE(--):14,0
FIELD:v_city_name:CONTEXT(st):FORCE(+):7,0
FIELD:st:LIKE(alpha_st):FORCE(+):1,0
FIELD:zip5:LIKE(zip5):FORCE(+):9,0
FIELD:rec_type:CARRY:0,0  
FIELD:err_stat:ErrStat:FORCE(--):3,0 
FIELD:cntprimname:PrimNameCountCheck:FORCE(+, OR (prim_name)):10,0 
 
 
Total available specificity:88
Specificity number that should imply one record specified 22.
Assuming an average of 10 records per cluster
Specificity value at which N^2 joins will be tolerated: 19
Recommended matching threshold 32
Search Threshold set at 14
Use of PERSISTs in code set at:0
 
______________________________English Description of Matching Process___________________________
 
A SALT generated matching process really only contains one single matching rule.
SALT compares every record to every possible matching record and then allocates a score to how well
the records match. SALT then pairs those clusters which have the highest match scores provided the scores
meet or exceed the matching threshold. The scoring process is highly sophisticated and detailed below
however it can essentially be thought of as allocating points for every pair of fields that match
and subtracting points for every pair of fields that do not match.
This process was told to produce 3 nines of accuracy on a population of 5000000 with    50000000 records.
The matching threshold is therefore set at 32.
 
___Field by Field Breakdown of Scoring Method___
 
aid Scoring: This field is not used for scoring; rather it is carried along for context and debugging
prim_range Scoring: In order for two records to be a match it is also required that the prim_range fields match.
Two prim_range fields will be considered to match if:
  - they are identical
The exact number of points allocated to a match will depend upon the global scarcity of the prim_range
but should average 13 points with a failed match substracting 13 points.
(This subtraction estimate is based upon 0% of clusters with 2 or more records have 2 or more values for prim_range.)
 
predir Scoring: In order for two records to be a match it is also required that the predir fields not not match.
Two predir fields will be considered to match if:
  - they are identical
The exact number of points allocated to a match will depend upon the global scarcity of the predir
but should average 7 points with a failed match substracting 7 points.
(This subtraction estimate is based upon 0% of clusters with 2 or more records have 2 or more values for predir.)
 
prim_name Scoring: Two prim_name fields will be considered to match if:
  - they are identical
  - if the two strings are identical if hypens and spaces are ignored
  - if one is the leading or trailing part of the otherand a hypen or space indicates a logical break in the shorter string
  - one can be turned into the other with 1 edit (see Glossary)
  - if the two fields have the same value for the function PrimNameFuzzCheck
The exact number of points allocated to a match will depend upon the global scarcity of the prim_name
and the degree of fuzziness required but should average 14 points with a failed match substracting 14 points.
(This subtraction estimate is based upon 0% of clusters with 2 or more records have 2 or more values for prim_name.)
 
addr_suffix Scoring: In order for two records to be a match it is also required that the addr_suffix fields not not match.
Two addr_suffix fields will be considered to match if:
  - they are identical
The exact number of points allocated to a match will depend upon the global scarcity of the addr_suffix
but should average 4 points with a failed match substracting 4 points.
(This subtraction estimate is based upon 0% of clusters with 2 or more records have 2 or more values for addr_suffix.)
 
postdir Scoring: In order for two records to be a match it is also required that the postdir fields not not match.
Two postdir fields will be considered to match if:
  - they are identical
The exact number of points allocated to a match will depend upon the global scarcity of the postdir
but should average 6 points with a failed match substracting 6 points.
(This subtraction estimate is based upon 0% of clusters with 2 or more records have 2 or more values for postdir.)
 
unit_desig Scoring: This field is not used for scoring; rather it is carried along for context and debugging
sec_range Scoring: In order for two records to be a match it is also required that the sec_range fields not not match.
Two sec_range fields will be considered to match if:
  - they are identical
  - if the two strings are identical if hypens and spaces are ignored
  - if one is the leading or trailing part of the otherand a hypen or space indicates a logical break in the shorter string
The exact number of points allocated to a match will depend upon the global scarcity of the sec_range
and the degree of fuzziness required but should average 14 points with a failed match substracting 14 points.
(This subtraction estimate is based upon 0% of clusters with 2 or more records have 2 or more values for sec_range.)
 
v_city_name Scoring: In order for two records to be a match it is also required that the v_city_name fields match.
 
The scoring for this field is ignored unless the st fields are identical.
Two v_city_name fields will be considered to match if:
  - they are identical
The exact number of points allocated to a match will depend upon the global scarcity of the v_city_name
but should average 7 points with a failed match substracting 7 points.
(This subtraction estimate is based upon 0% of clusters with 2 or more records have 2 or more values for v_city_name.)
 
st Scoring: In order for two records to be a match it is also required that the st fields match.
Two st fields will be considered to match if:
  - they are identical
The exact number of points allocated to a match will depend upon the global scarcity of the st
but should average 1 points with a failed match substracting 1 points.
(This subtraction estimate is based upon 0% of clusters with 2 or more records have 2 or more values for st.)
 
zip5 Scoring: In order for two records to be a match it is also required that the zip5 fields match.
Two zip5 fields will be considered to match if:
  - they are identical
The exact number of points allocated to a match will depend upon the global scarcity of the zip5
but should average 9 points with a failed match substracting 9 points.
(This subtraction estimate is based upon 0% of clusters with 2 or more records have 2 or more values for zip5.)
 
rec_type Scoring: This field is not used for scoring; rather it is carried along for context and debugging
err_stat Scoring: In order for two records to be a match it is also required that the err_stat fields not not match.
Two err_stat fields will be considered to match if:
  - they are identical
  - if the two fields have the same value for the function ErrStat
The exact number of points allocated to a match will depend upon the global scarcity of the err_stat
but should average 3 points with a failed match substracting 3 points.
(This subtraction estimate is based upon 0% of clusters with 2 or more records have 2 or more values for err_stat.)
 
cntprimname Scoring: In order for two records to be a match it is also required that the cntprimname fields match.
Two cntprimname fields will be considered to match if:
  - they are identical
  - if the two fields have the same value for the function PrimNameCountCheck
The exact number of points allocated to a match will depend upon the global scarcity of the cntprimname
but should average 10 points with a failed match substracting 10 points.
(This subtraction estimate is based upon 0% of clusters with 2 or more records have 2 or more values for cntprimname.)
 
 
__Glossary__
Edit Distance: An edit distance of (say) one implies that one string can be converted into another by doing one of
  - Changing one character
  - Deleting one character
  - Transposing two characters
 
Forcing Criteria: In addition to the general 'best match' logic it is possible to insist that
one particular field must match to some degree or the whole record is considered a bad match.
The criterial applied to that one field is the forcing criteria.
 
Cascade: Best Type rules are applied in such a way that the rules are applied one by one UNTIL the first rule succeeds; subsequent rules are then skipped.
 
__General Notes__
How is it decided how much to subtract for a bad match?
SALT computes for each field the percentage likelihood that a valid cluster will have two or more values for a given field
this value (called the switch value in the SALT literature) is then used to produce the subtraction value from the match value.
The value in this document is the one typed into the SPC file; the code will use a value computed at run-time.
 
