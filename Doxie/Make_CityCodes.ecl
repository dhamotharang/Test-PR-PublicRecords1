/*
Problem:
OSS will return a different value for hash(qstring) than legacy builds.  We store city codes (at least) in our indexes that are a hash of a qstring.
Prod Thor will go to OSS before Prod Roxie.  Thor(OSS) will build a city_code into and index and Roxie(Legacy) will not recognize it.
The value OSS will produce for hash(qstring) is the value Legacy produces for hash(string).

Solution:
Let Roxie look for the set, [hash(qstring), hash(string)] in the index.
Then, Legacy Roxie will be compatible with Legacy and OSS thor.

Important Note:
Roxie OSS will not recognize a city code built by Legacy Thor.  We don't anticipate this situation will arise.

Later:
Once Roxie has this fix (RR bug 102619), Thor can build keys (see scope below) with either Legacy or OSS.
Once Thor is on OSS, it should probably be switched over to use v2. (though it will give the same answer as v1).  Thor often gets here via doxie.Make_CityCode.
Once all Thor keys have been built on OSS, Roxie can just look for v2.

Alpharetta:
A quick glance suggests that autokeys are the only exposure.  we can take the same fix over there.  this needs coordination.

Scope:  (grown since this was written)
Here, we are just addressing
 Now
	1) autokey search
	2) header search
 LAter
	1) autokey build
	2) header build

Testing:
	1) need to test that new performs ok (seeks and scans vs orig code) - these run on legacy
		W20120507-124649 - new code
			id label seek scan
			611 Keyed Join '~foreign::prod_dali.br.seisint.com::thor_data400::key::new_suppression::QA::link_type_link_id' 113 0
			605 Keyed Join '~foreign::prod_dali.br.seisint.com::thor_data400::key::header.minors_hash_QA' 40 0
			489 Limited Index Read '...::header.wild.st.city.fname.lname_QA' 4 32     //**** SEEK GOES UP FROM 1 TO 4 ****
			2  Index Count '...::link_type_link_id' 3 0
		W20120507-114111 - old code
			id label seek scan
			611 Keyed Join '~foreign::prod_dali.br.seisint.com::thor_data400::key::new_suppression::QA::link_type_link_id' 113 0
			605 Keyed Join '~foreign::prod_dali.br.seisint.com::thor_data400::key::header.minors_hash_QA' 40 0
			2  Index Count '...::link_type_link_id' 3 0
			489 Limited Index Read '...::header.wild.st.city.fname.lname_QA' 1 32

		thus, latency test to compare.  .0 is new  .1 is old (backwards, i know)
			http://10.241.3.232:8010/?inner=/WsWorkunits/WUInfo?Wuid=W20120507-145651
				new code, 4 iterations of avg latency across 1K inputs, running 50 at a time against roxie 192
					819
					824
					783
					839
				old code
					1003
					825
					834
					827



	2) need to test that new actually recognizes hash generated by legacy and OSS
		legacy search - W20120507-162936
			old code finds oss key    false
			old code finds leg key    true
			new code finds oss key    true
			new code finds leg key    true  **

		oss search - W20120507-163143
			old code finds oss key    true
			old code finds leg key    false
			new code finds oss key    true
			new code finds leg key    false **

		**These results are good and as expected, but they also demonstrate why Roxie cannot go to OSS until all keys are built by OSS thor

Examples and Attributes below ECL
*/

EXPORT Make_CityCodes(string city_name) :=
MODULE

export v1 := HASH((qstring25)city_name); //taken from doxie.Make_CityCode
export v2 := HASH(city_name);

export v1v2 :=
if(	//this if just avoids dups in my set
	v1 = v2,
	[v1],
	[v1, v2]
);

export tho 				:= v1;		//FOR USE BY THOR FOR NOW - see comments above
export rox 				:= v1v2;	//FOR USE BY ROXIE FOR NOW - see comments above

END;

/*
Examples

// OSS
qstring25 cn := 'WACO';
hash((qstring25)cn);                       			//1161881894
hash((string)cn);                              	//1161881894
hash((string)((qstring25)cn));     							//1161881894
output(doxie.Make_CityCodes(cn));
// v1    1161881894
// v1v2    ['1161881894']
// v2    1161881894

// Legacy
qstring25 cn := 'WACO';
hash((qstring25)cn);                       			//957042457
hash((string)cn);                              	//1161881894
hash((string)((qstring25)cn));     							//1161881894
output(doxie.Make_CityCodes(cn));
// v1    957042457
// v1v2    ['957042457', '1161881894']
// v2    1161881894

really, you only care about Roxie calls to 'Make_CityCode' or hash(qstring



*/
