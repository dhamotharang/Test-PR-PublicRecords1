ID "b50026be-1a87-46e9-b055-b2f79393256e";
NAME AppendCleanAddress;
LABEL "Clean Addresses";
VERSION "2.0";
DESCRIPTION "Clean a file";
AUTHOR "CarmigJX";
CATEGORY CLEAN;
PERMISSIONS
VIEW:PUBLIC;
EDIT:PRIVATE;
RUN:PUBLIC;
END

INPUTS
	STRING Prefix: LABEL("Append Column Prefix"),DEFAULT("Address");
	DATASET dsInput: MAPBYNAME
	FIELD AddressLine1: LABEL("Address Line 1"),DESCRIPTION("Address Line 1 field with number, street etc.");
	FIELD AddressLine2: LABEL("Address Line 2"),DESCRIPTION("Address Line 2 with Apartment, Suite number"),OPTIONAL,NULL("");
	FIELD AddressLine2WithCity: LABEL("Address Line 2, City, St, Zip"),DESCRIPTION("Address Line 2 with City, State, Zip"),OPTIONAL,NULL("");
	FIELD City: LABEL("City"),OPTIONAL,NULL("");
	FIELD State: LABEL("State"),OPTIONAL,NULL("");
	FIELD Zip: LABEL("Zip Code"),OPTIONAL,NULL("");
END
	ENUM("False","True") EnableSearchLink: LABEL("Enable Search Link"),DESCRIPTION("Enables search link for the formatted raw and cleaned addresses"),OPTIONAL,DEFAULT("False");
	ENUM("Google","Bing","Yahoo") SearchEngine: LABEL("Search Engine"),DESCRIPTION("List of supported Search Engines"),OPTIONAL,DEFAULT("Google");
END

OUTPUTS
	DATASET dsOutput(dsInput): PREFIX(INPUTS.Prefix),APPEND
		STRING PrimaryRange;
	STRING PreDirectional;
	STRING PrimaryName;
	STRING AddressSuffix;
	STRING PostDirectional;
	STRING UnitDesignation;
	STRING SecondaryRange;
	STRING PostalCity;
	STRING VanityCity;
	STRING State;
	STRING Zip;
	STRING Zip4;
	STRING DBPC;
	STRING CheckDigit;
	STRING RecordType;
	STRING County;
	STRING Latitude;
	STRING Longitude;
	STRING Msa;
	STRING GeoBlock;
	STRING GeoMatchCode;
	STRING ErrorStatus;
	BOOLEAN CacheHit;
	BOOLEAN CleanerHit;
	STRING CleanedAddress;
	STRING InputAddress;
  BOOLEAN NoAddressInput;
  BOOLEAN NoAddressCleanerError;
  STRING ErrorCodeDescription;
END
	DATASET CleanStats: PREFIX(INPUTS.Prefix),WUID,SIDE
		STRING State: FEW;
	STRING ErrorCodeDescription: FEW;
	BOOLEAN CacheHit: FEW;
	STRING GeoMatchCode: FEW;
	INTEGER Cnt;
END
END
VISUALIZE ErrorsAndGeo: LABEL("Address Clean")
	  CHORO RecordDensity(CleanStats{State,SUM(Cnt)}): STATE(State),WEIGHT(SUM(Cnt)),COLOR("Red_Yellow_Blue"),SELECTS(State->SelectedStateStats);
	  BAR SelectedStateStats(CleanStats{State,ErrorCodeDescription,SUM(Cnt)}): FILTER(State),LABEL(ErrorCodeDescription),WEIGHT(SUM(Cnt));
	  BAR ErrorTypes(CleanStats{ErrorCodeDescription,SUM(Cnt)}): LABEL(ErrorCodeDescription),WEIGHT(SUM(Cnt)),SELECTS(ErrorCodeDescription->ErrorDensity);
	  CHORO ErrorDensity(CleanStats{ErrorCodeDescription,State,SUM(Cnt)}): FILTER(ErrorCodeDescription),STATE(State),WEIGHT(SUM(Cnt)),COLOR("Red_Yellow_Blue");
	  BAR CacheHits(CleanStats{CacheHit,SUM(Cnt)}): LABEL(CacheHit),WEIGHT(SUM(Cnt));
	  BAR GeoMatchStats(CleanStats{GeoMatchCode,SUM(Cnt)}): LABEL(GeoMatchCode),WEIGHT(SUM(Cnt));
END

GENERATES INLINE
	IMPORT AppendCleanAddress, Address, ComputeSearchString, Std;

   CleanedAddresses  := AppendCleanAddress.mac_CleanAddress(%dsInput%, 20000000, %AddressLine1%, %AddressLine2WithCity%, %AddressLine2%, %City%, %State%, %Zip%, '%Prefix%');
   CleanedAddressesWithSearchLink := PROJECT(CleanedAddresses, TRANSFORM(RECORDOF(LEFT),
    SELF.%Prefix%CleanedAddress := ComputeSearchString.macComputeSearchString(LEFT.%Prefix%CleanedAddress, ComputeSearchString.Constants.SearchEngineOptions.%SearchEngine%),
    SELF.%Prefix%InputAddress := ComputeSearchString.macComputeSearchString(LEFT.%Prefix%InputAddress, ComputeSearchString.Constants.SearchEngineOptions.%SearchEngine%),
    SELF := LEFT));
   isEnableSearchLink := '%EnableSearchLink%'='True';
   CleanedAddressesPreFinal := IF(isEnableSearchLink, CleanedAddressesWithSearchLink, CleanedAddresses);
   CleanedAddressesFinal := AppendCleanAddress.macComputeAddressErrorCategory(CleanedAddressesPreFinal,%Prefix%ErrorStatus, %AddressLine1%, %City%, %State%, %Zip%, '%Prefix%', %AddressLine2WithCity%);
   
   %^edsOutput% := CleanedAddressesFinal %^p%;
   %^eCleanStats% := TABLE(%dsOutput%, {%Prefix%State, %Prefix%ErrorCodeDescription, %Prefix%CacheHit, %Prefix%GeoMatchCode, %Prefix%Cnt := COUNT(GROUP)}, %Prefix%State, %Prefix%ErrorCodeDescription, %Prefix%CacheHit, %Prefix%GeoMatchCode, MERGE);
ENDGENERATES


RESOURCES
	INDEX Key_RawACE: FILENAME("~thor_data400::key::address_clean::clean_qa"),URL("http://10.241.100.157:8010"),DALIIP("10.241.100.157"),CLUSTER("thor100_100dev");
	LOGICALFILE testinput: FILENAME("~qa::appendcleanaddress::appendcleanaddress::input"),URL("http://10.241.100.157:8010"),DALIIP("10.241.100.157"),CLUSTER("thor100_100cert");
	ECL AppendCleanAddress: FILENAME("AppendCleanAddress"),URL("http:// 10.241.100.153:8010");
	ECL Address: FILENAME("Address"),URL("http:// 10.241.100.153:8010");
	ECL BO_Address: FILENAME("BO_Address"),URL("http:// 10.241.100.153:8010");
	ECL UT: FILENAME("ut"),URL("http:// 10.241.100.153:8010");
	ECL ComputeSearchString: FILENAME("ComputeSearchString"),URL("http:// 10.241.100.153:8010");
	FILE readme: FILENAME("AppendCleanAddress_2.0_ReadMe.txt"),LABEL("Plugin Readme File");
	FILE AppendCleanAddress_2.0_BuildTestDataset: FILENAME("AppendCleanAddress_2.0_BuildTestDataset.ecl"),LABEL("BWR to create data for test composition");
	FILE AppendCleanAddress_2.0_testcmp: FILENAME("AppendCleanAddress_2.0_testcmp.txt"),LABEL("Plugin Test Composition");
END
