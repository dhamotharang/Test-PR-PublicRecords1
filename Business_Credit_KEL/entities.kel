#OPTION(configmod)
#OPTION(persist, 0)

Business := ENTITY(FLAT(UID=seq), MODEL(*));	

Account := ENTITY(FLAT(
							UID= contractacc_num, 
							seq,
							ultid,
							orgid,
							seleid,
							proxid,
							powid,
							empid,
							dotid,
							ultscore,
							orgscore,
							selescore,
							proxscore,
							powscore,
							empscore,
							dotscore,
							ultweight,
							orgweight,
							seleweight,
							proxweight,
							powweight,
							empweight,
							dotweight,
							sbfe_contributor_num,
							//contractacc_num,
							DATE dt_first_seen,
							DATE dt_last_seen,
							DATE dt_vendor_first_reported,
							DATE dt_vendor_last_reported,
							DATE dt_datawarehouse_first_reported,
							DATE dt_datawarehouse_last_reported,
							did,
							did_score),
					MODEL(*));
					
Tradeline := ENTITY(FLAT(
							UID=seq_num,
							DATE load_date=temp_load_date,
							sbfe_contributor_num,
							contractacc_num,
							DATE cycleend_date=NULL(''),
							segment_identifier,
							file_segment_num,
							parent_sequence_number,
							accholder_businessname,
							dba,
							comp_website,
							legal_busi_structure,
							busi_established_date,
							INTEGER accounttypereported, //this is in string format in the key (001, 002, etc, but for calculations below we declare it an integer
							acc_status1,
							acc_status2,
							DATE dateaccopened=NULL(''),
							DATE dateaccclosed=NULL(''),
							accountcloseurebasis,
							accexpirationdate,
							lastactivitydate,
							lastactivitytype,
							recentactivityindicator,
							origcreditlimit,
							highestcreditused,
							currentcreditlimit,
							reporterindicatorlength,
							paymentinterval,
							paymentstatuscategory,
							termofacc_months,
							firstpymtduedate,
							finalpymtduedate,
							origrate,
							floatingrate, 
							graceperiod,
							paymentcategory,
							pymthistprofile12,
							pymthistprofile13_24,
							pymthistprofile25_36,
							pymthistprofile37_48,
							pymthistlength,
							ytd_purchasescount,
							ltd_purchasescount,
							ytd_purchasessumamt,
							ltd_purchasessumamt,
							pymtamtscheduled,
							recentpymtamt,
							recentpaymentdate,
							remainingbalance,
							carriedoveramt,
							newappliedcharges,
							balloonpymtdue,
							balloonpymtduedate,
							delinquencydate,
							daysdelinquent,
							pastdueamt,
							maximum_number_of_past_due_aging_amounts_buckets_provided,
							past_due_aging_bucket_type,
							past_due_aging_amount_bucket_1,
							past_due_aging_amount_bucket_2,
							past_due_aging_amount_bucket_3,
							past_due_aging_amount_bucket_4,
							past_due_aging_amount_bucket_5,
							past_due_aging_amount_bucket_6,
							past_due_aging_amount_bucket_7,
							maximum_number_of_payment_tracking_cycle_periods_provided,
							payment_tracking_cycle_type,
							payment_tracking_cycle_0_current,
							payment_tracking_cycle_1_1_30_days,
							payment_tracking_cycle_2_31_60_days,
							payment_tracking_cycle_3_61_90_days,
							payment_tracking_cycle_4_91_120_days,
							payment_tracking_cycle_5_121_150days,
							payment_tracking_number_of_times_cycle_6_151_180_days,
							payment_tracking_number_of_times_cycle_7_181_or_greater_days,
							DATE date_account_was_charged_off=NULL(''),
							INTEGER amount_charged_off_by_creditor,
							charge_off_type_indicator,
							INTEGER total_charge_off_recoveries_to_date,
							government_guarantee_flag,
							government_guarantee_category,
							portion_of_account_guaranteed_by_government,
							guarantors_indicator,
							number_of_guarantors,
							owners_indicator,
							number_of_principals,
							account_update_deletion_indicator),
						MODEL(*));


BusinessAccount := ASSOCIATION(FLAT(Business bus=seq, Account acc=contractacc_num));
AccountTradeline := ASSOCIATION(FLAT(Account acc=contractacc_num, Tradeline trade=seq_num));

USE Business_Credit_KEL.File_SBFE_temp(FDC, Business,
																						Linkids(Account),
																						Tradelines(Tradeline),
																						Linkids(BusinessAccount),
																						Tradelines(AccountTradeline)); 