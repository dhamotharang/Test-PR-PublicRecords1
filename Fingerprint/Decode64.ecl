// temporary home for Nigel's code, until it gets added as a library attribute
export STRING Decode64(STRING input) := BEGINC++


static const unsigned char BASE64_dec[256] =
{
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x3f,
0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e,
0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28,
0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

static const char pad = '=';



	#body
	
				size32_t len = lenInput;
				__result = (char*) rtlMalloc((len+3)/4*3);
				unsigned char* out = (unsigned char*)__result;
				unsigned char* in = (unsigned char *)input;
				while (len>=4) {
					unsigned char c1 = *in++;
					if (isspace(c1))
						len--;
					else {
						unsigned char c2 = *in++;
						unsigned char c3 = *in++;
						unsigned char c4 = *in++;
						unsigned char d1 = BASE64_dec[c1];
						unsigned char d2 = BASE64_dec[c2];
						unsigned char d3 = BASE64_dec[c3];
						unsigned char d4 = BASE64_dec[c4];
						len -= 4;
						*(out++) = (d1 << 2) | (d2 >> 4);
						if(c3 == pad)
							break;
						*(out++) = (d2 << 4) | (d3 >> 2);
						if(c4 == pad)
							break;
						*(out++) = (d3 << 6) | d4;
					}
				}	
				__lenResult = (char *)out-__result;	
	ENDC++;

STRING Encode64(STRING input) := BEGINC++

static const char BASE64_enc[65] =  "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                                    "abcdefghijklmnopqrstuvwxyz"
                                    "0123456789+/";
static const char pade = '=';

        #body
				size32_t len = lenInput;
				__result = (char*) rtlMalloc((len+2)/3*4);
				unsigned char* out = (unsigned char*)__result;
				unsigned char* in = (unsigned char *)input;
				unsigned i = 0;
				while (len>=3) {
					unsigned char one = in[i++];
					unsigned char two = in[i++];
					unsigned char three = in[i++];
					*(out++) = BASE64_enc[one >> 2];
					*(out++) = BASE64_enc[((one << 4) & 0x30) | (two >> 4)];
					*(out++) = BASE64_enc[((two << 2)  & 0x3c) | (three >> 6)];
					*(out++) = BASE64_enc[three & 0x3f];
#if 0					
					if(addLineBreaks && (i % 54 == 0)) {
					    *(out++) = '\n'; 
					    NB if enabled will need call to rtlRealloc here
					}
#endif
					len -= 3;
				}

				switch(len) {
				case 2: {
						unsigned char one = in[i++];
				    		unsigned char two = in[i++];
						*(out++) = BASE64_enc[one >> 2];
						*(out++) = BASE64_enc[((one << 4) & 0x30) | (two >> 4)];
						*(out++) = BASE64_enc[((two << 2)  & 0x3c)];
						*(out++) = pade;
					}
					break;
				case 1: {
						unsigned char one = in[i++];
						*(out++) = BASE64_enc[one >> 2];
						*(out++) = BASE64_enc[((one << 4) & 0x30)];
						*(out++) = pade;
						*(out++) = pade;
					}
					break;
				}
				__lenResult = (char *)out-__result;	
	ENDC++;



