#workunit('name', 'CreditReportService_volume_test');

eyeball := 10;

RecordsToRun := 1000; // Set to 0 to run all

TestFile := '~hmccarl::in::bshell_test_inputs_201503_with_BIPIDs'; // Generated by RiskProcessing.BWR_hmccarl_in_Append_BIPIDs

OutputFile := '~bkarnatz::out::sbfe::creditreportservice_volume_test'; // + '_' + WORKUNIT;

// RoxieIP := RiskWise.shortcuts.Dev190;
// RoxieIP := RiskWise.shortcuts.Dev192;
RoxieIP := RiskWise.shortcuts.Dev194;
// RoxieIP := RiskWise.shortcuts.staging_neutral_roxieIP;
// RoxieIP := RiskWise.shortcuts.prod_batch_neutral;

threads := 2;

// Not used here:
	mod_BusinessCredit_constants := MODULE
		export unsigned2 MaxReasons 			:= 200;
		export unsigned2 MaxScores 				:= 50;
		export unsigned2 MaxPaymentHistory:= 10000;
		export unsigned2 MaxSection 			:= 100;
		export unsigned2 MaxCodes 				:= 100;
		export unsigned2 MaxVariation 		:= 100;
	END; 
	
InputFileLayout_with_BIPIDs := RECORD
	STRING AccountNumber;
  STRING UltID;
	STRING OrgID;
  STRING SeleID;
	STRING ProxID;  
	STRING PowID;
	STRING EmpID;
	STRING DotID;
	STRING CompanyName;
	STRING AlternateCompanyName;
	STRING Addr;
	STRING City;
	STRING State;
	STRING Zip;
	STRING BusinessPhone;
	STRING TaxIdNumber;
	STRING BusinessIPAddress;
	STRING RepresentativeUniqueID;
	STRING RepresentativeFirstName;
	STRING RepresentativeMiddleName;
	STRING RepresentativeLastName;
	STRING RepresentativeNameSuffix;
	STRING RepresentativeAddr;
	STRING RepresentativeCity;
	STRING RepresentativeState;
	STRING RepresentativeZip;
	STRING RepresentativeSSN;
	STRING RepresentativeDOB;
	STRING RepresentativeAge;
	STRING RepresentativeDLNumber;
	STRING RepresentativeDLState;
	STRING RepresentativeHomePhone;
	STRING RepresentativeEmailAddress;
	STRING RepresentativeFormerLastName;
	INTEGER HistoryDateYYYYMM;
	STRING File_Ind; 
END;

InputFile := 
	IF(
			RecordsToRun <= 0, 
			DATASET(TestFile, InputFileLayout_with_BIPIDs, CSV(HEADING(SINGLE), QUOTE('"'))),
			CHOOSEN(DATASET(TestFile, InputFileLayout_with_BIPIDs, CSV(HEADING(SINGLE), QUOTE('"'))), RecordsToRun)
	);

OUTPUT(CHOOSEN(InputFile, eyeball), NAMED('Sample_Raw_Input'));

// Configuration:
_GLBPurpose          := 1;
_DPPAPurpose         := 1;	
_DataRestrictionMask := '00000000000000000000';
_DataPermissionMask  := '00000000000100000000';
_IncludeSBFEData     := TRUE;
_BusinessReportFetchLevel := BIPV2.IDconstants.Fetch_Level_SELEID;

layout_soap_Credit_Report := RECORD
	// UNSIGNED GLBPurpose;
	// UNSIGNED DPPAPurpose;
	// STRING DataRestrictionMask;
	// STRING DataPermissionMask;
  // STRING UltID;
	// STRING OrgID;
  // STRING SeleID;
	// STRING ProxID;  
	// STRING PowID;
	// STRING EmpID;
	// STRING DotID;
	// STRING DID;
	BOOLEAN IncludeBusinessCredit;
	// STRING BusinessReportFetchLevel;
	DATASET(iesp.businesscreditreport.t_BusinessCreditReportRequest) BusinessCreditReportRequest;
END;

layout_soap_Credit_Report transform_input_request(InputFileLayout_with_BIPIDs le, UNSIGNED8 c) := TRANSFORM
	_user := PROJECT(ut.ds_oneRecord, TRANSFORM(iesp.share.t_User, 
			SELF.AccountNumber       := le.accountnumber; 
			SELF.QueryId             := (STRING)c;
			SELF.DLPurpose           := (STRING)_DPPAPurpose; 
			SELF.GLBPurpose          := (STRING)_GLBPurpose; 
			SELF.DataRestrictionMask := _DataRestrictionMask; 
			SELF.DataPermissionMask  := _DataPermissionMask; 
			SELF := []));	
	_company := PROJECT(ut.ds_oneRecord, TRANSFORM(iesp.businesscreditreport.t_BusinessCreditReportCompany, 
			SELF.BusinessIds := PROJECT(ut.ds_oneRecord, TRANSFORM(iesp.share.t_BusinessIdentity,
						SELF.DotID  := 0; // Force zero
						SELF.EmpID  := 0; // Force zero
						SELF.POWID  := 0; // Force zero
						SELF.ProxID := 0; // Force zero
						SELF.SeleID := (UNSIGNED6)le.SeleID;
						SELF.OrgID  := (UNSIGNED6)le.OrgID;
						SELF.UltID  := (UNSIGNED6)le.UltID;
						SELF := []))[1];
			SELF.CompanyName := le.CompanyName; 
			SELF.Address := PROJECT(ut.ds_oneRecord, TRANSFORM(iesp.share.t_Address, 
						SELF.StreetAddress1 := le.Addr; 
						SELF.City           := le.City; 
						SELF.State          := le.State; 
						SELF.Zip5           := le.Zip[1..5]; 
						SELF.Zip4           := le.Zip[6..9]; 
						SELF := []))[1];
			SELF.Radius  := 0;          // What's the default value here?
			SELF.Phone10 := le.BusinessPhone;
			SELF.TIN     := le.TaxIdNumber;
			SELF.URL     := le.BusinessIPAddress;
			SELF.Email   := '';
			SELF := []));
	_authorizedrep := PROJECT(ut.ds_oneRecord, TRANSFORM(iesp.businesscreditreport.t_BusinessCreditReportAuthRep, 
			SELF.UniqueId := le.RepresentativeUniqueId,
			SELF.SSN      := le.RepresentativeSSN,
			SELF.Name := PROJECT(ut.ds_oneRecord, TRANSFORM(iesp.share.t_Name, 
						SELF.First  := le.RepresentativeFirstName; 
						SELF.Middle := le.RepresentativeMiddleName; 
						SELF.Last   := le.RepresentativeLastName; 
						SELF.Suffix := le.RepresentativeNameSuffix; 
						SELF := []))[1]; 
			SELF.Address := PROJECT(ut.ds_oneRecord, TRANSFORM(iesp.share.t_Address, 
						SELF.StreetAddress1 := le.RepresentativeAddr; 
						SELF.City           := le.RepresentativeCity; 
						SELF.State          := le.RepresentativeState; 
						SELF.Zip5           := le.RepresentativeZip[1..5]; 
						SELF.Zip4           := le.RepresentativeZip[6..9]; 
						SELF := []))[1];
			SELF.Phone10 := le.RepresentativeHomePhone; 
			SELF.DOB := PROJECT(ut.ds_oneRecord, TRANSFORM(iesp.share.t_Date, 
						SELF.Year  := (INTEGER)le.RepresentativeDOB[1..4];
						SELF.Month := (INTEGER)le.RepresentativeDOB[5..6];
						SELF.Day   := (INTEGER)le.RepresentativeDOB[7..8];
						SELF := []))[1]; 
			SELF.DLNumber := le.RepresentativeDLNumber; 
			SELF.DLState  := le.RepresentativeDLState; 
			SELF := []));
		
	_options := PROJECT(ut.ds_oneRecord, TRANSFORM(iesp.businesscreditreport.t_BusinessCreditReportOption, 
			SELF.IncludeBusinessCredit := _IncludeSBFEData; 
			SELF := []));
	_reportby := PROJECT(ut.ds_oneRecord, TRANSFORM(iesp.businesscreditreport.t_BusinessCreditReportBy, 
			SELF.Company       := _company[1];       // layout: t_BusinessCreditReportCompany
			SELF.AuthorizedRep := _authorizedrep[1]; // layout: t_BusinessCreditReportAuthRep
			SELF := []));	
	_request := PROJECT(ut.ds_oneRecord, TRANSFORM(iesp.businesscreditreport.t_BusinessCreditReportRequest, 
			SELF.User     := _user[1];
			SELF.Options  := _options[1]; 
			SELF.ReportBy := _reportby[1]; 
			SELF := []));
	SELF.BusinessCreditReportRequest := _request[1];

	// SELF.DotID  := le.DotID;
	// SELF.EmpID  := le.EmpID;
	// SELF.POWID  := le.POWID;
	// SELF.ProxID := le.ProxID;
	// SELF.SeleID := le.SeleID;
	// SELF.OrgID  := le.OrgID;
	// SELF.UltID  := le.UltID;
	// SELF.DID    := le.RepresentativeUniqueId;

	// SELF.GLBPurpose               := _GLBPurpose;
	// SELF.DPPAPurpose              := _DPPAPurpose;	
	// SELF.DataRestrictionMask      := _DataRestrictionMask;
	// SELF.DataPermissionMask       := _DataPermissionMask;
	SELF.IncludeBusinessCredit    := _IncludeSBFEData;
	// SELF.BusinessReportFetchLevel := _BusinessReportFetchLevel;
	
	SELF := [];
END;

CreditReport_input := 
		DISTRIBUTE(PROJECT(InputFile, transform_input_request(LEFT, COUNTER)), RANDOM());

// Run SoapCall.
xLayout := RECORD
	iesp.businesscreditreport.t_BusinessCreditReportResponse;
	STRING200 ErrorCode := '';
END;

xLayout myFail(layout_soap_Credit_Report le) := TRANSFORM
	SELF.ErrorCode := FAILCODE + ' ' + FAILMESSAGE;
	SELF := [];
END;

SOAPCreditReport := SOAPCALL(CreditReport_input,
												RoxieIP,
												'BusinessCredit_Services.CreditReportService',
												{CreditReport_input},
												DATASET(xLayout),
												PARALLEL(threads),
												RETRY(3), TIMEOUT(300),
												XPATH('BusinessCredit_Services.CreditReportServiceResponse/Results/Result/Dataset[@name=\'Results\']/Row'),
												onFail(myFail(LEFT)));

Passed := SOAPCreditReport(TRIM(ErrorCode)  = '');
Failed := SOAPCreditReport(TRIM(ErrorCode) != '');

OUTPUT( CHOOSEN(CreditReport_input,eyeball), NAMED('Sample_CreditReport_input') );
OUTPUT( CHOOSEN(Passed,eyeball), NAMED('Sample_Passed') );
OUTPUT( CHOOSEN(Failed,eyeball), NAMED('Sample_Failed') );

OUTPUT( Passed, , OutputFile, XML, OVERWRITE );
