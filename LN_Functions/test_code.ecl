//export test_code := 'todo';
import LN_Property, LN_Functions, lib_AddrClean, lib_stringlib;

//source_file := LN_Property.File_PROPWYLARAMIE;

source_file :=  LN_Property.File_PROPALAUTAUGA
              + LN_Property.File_PROPALJEFFERSON
			  + LN_Property.File_PROPDC
			  + LN_Property.File_PROPGABARROW
			  + LN_Property.File_PROPGADEKALB
			  + LN_Property.File_PROPMTGALLATIN
			  + LN_Property.File_PROPNJUNION
			  + LN_Property.File_PROPOHMONTGOMERY
			  + LN_Property.File_PROPVAMANASSASPARK
			  + LN_Property.File_PROPWYLARAMIE;

//filter_file := source_file(stringlib.stringfind(MAILING_ADDRESS,',',5)!=0);
//output_file := '~thor_data400::out::LN_FARES_PROPERTY_DAYTN_DATA';

CommonModel := RECORD
  LN_Property.Layout_Property_Common_Model;
END;

/*
string fCleanRecordingDate(string pStringIn) := if(stringlib.stringfind(pStringIn,'/',1)!=0 AND stringlib.stringfind(pStringIn,'/',2)=0,
                                                 '00' +
												 intformat((integer)trim(pStringIn[1..stringlib.stringfind(pStringIn,'/',1)],left,right),2,1) +
                                                 intformat((integer)trim(pStringIn[stringlib.stringfind(pStringIn,'/',1)+1..stringlib.stringfind(pStringIn,'/',1)+5],left,right),4,1),
                                                if(stringlib.stringfind(pStringIn,'/',1)!=0 AND stringlib.stringfind(pStringIn,'/',2)!=0,
                                                 intformat((integer)trim(pStringIn[1..stringlib.stringfind(pStringIn,'/',1)-1],left,right),2,1) +
                                                 intformat((integer)trim(pStringIn[stringlib.stringfind(pStringIn,'/',1)+1..stringlib.stringfind(pStringIn,'/',2)-1],left,right),2,1) +
                                                 intformat((integer)trim(pStringIn[stringlib.stringfind(pStringIn,'/',2)+1..stringlib.stringfind(pStringIn,'/',2)+5],left,right),4,1),
                                                if(stringlib.stringfind(pStringIn,'/',1)=0,
                                                 '00' +
												 '00' +
												 intformat((integer)trim(pStringIn,left,right),4,1),
							                    '')));
*/												
/*
string fMailingStreet(string pStringIn) := if(stringlib.stringfind(pStringIn,',',6)!=0,
                                            trim(pStringIn[stringlib.stringfind(pStringIn,',',4)+2..stringlib.stringfind(pStringIn,',',5)-1],left,right),
                                           if(stringlib.stringfind(pStringIn,',',5)!=0 AND stringlib.stringfind(pStringIn[stringlib.stringfind(pStringIn,',',3)..stringlib.stringfind(pStringIn,',',4)],'#',1)!=0,
										    trim(pStringIn[stringlib.stringfind(pStringIn,',',2)+2..stringlib.stringfind(pStringIn,',',4)-1],left,right),
								           if(stringlib.stringfind(pStringIn,',',5)!=0,
								            trim(pStringIn[stringlib.stringfind(pStringIn,',',3)+2..stringlib.stringfind(pStringIn,',',4)-1],left,right),
                                           if(stringlib.stringfind(pStringIn,',',4)!=0 AND stringlib.stringfind(pStringIn[stringlib.stringfind(pStringIn,',',2)..stringlib.stringfind(pStringIn,',',3)],'#',1)!=0,
										    trim(pStringIn[stringlib.stringfind(pStringIn,',',1)+2..stringlib.stringfind(pStringIn,',',3)-1],left,right),
								           if(stringlib.stringfind(pStringIn,',',4)!=0,
								            trim(pStringIn[stringlib.stringfind(pStringIn,',',2)+2..stringlib.stringfind(pStringIn,',',3)-1],left,right),
								           if(stringlib.stringfind(pStringIn,',',3)!=0,
									        trim(pStringIn[stringlib.stringfind(pStringIn,',',1)+2..stringlib.stringfind(pStringIn,',',2)-1],left,right),
									       if(stringlib.stringfind(pStringIn,',',2)!=0,
									        trim(pStringIn[1..stringlib.stringfind(pStringIn,',',1)-1],left,right),
									       '')))))));
*/
/*
string fMailingCSZ(string pStringIn) := if(stringlib.stringfind(pStringIn,',',6)!=0,
                                         trim(pStringIn[stringlib.stringfind(pStringIn,',',5)+2..stringlib.stringfind(pStringIn,',',5)+52],left,right),
								        if(stringlib.stringfind(pStringIn,',',5)!=0,
								         trim(pStringIn[stringlib.stringfind(pStringIn,',',4)+2..stringlib.stringfind(pStringIn,',',4)+52],left,right),
								        if(stringlib.stringfind(pStringIn,',',4)!=0,
								         trim(pStringIn[stringlib.stringfind(pStringIn,',',3)+2..stringlib.stringfind(pStringIn,',',3)+52],left,right),
								        if(stringlib.stringfind(pStringIn,',',3)!=0,
									     trim(pStringIn[stringlib.stringfind(pStringIn,',',2)+2..stringlib.stringfind(pStringIn,',',2)+52],left,right),
									    if(stringlib.stringfind(pStringIn,',',2)!=0,
									     trim(pStringIn[stringlib.stringfind(pStringIn,',',1)+2..stringlib.stringfind(pStringIn,',',1)+52],left,right),
									    if(stringlib.stringfind(pStringIn,',',1)!=0,
									     trim(pStringIn,left,right),
								        ''))))));
*/
/*
string fPropertyStreet(string pStringIn1, string pStringIn2) := if(trim(pStringIn1,left,right)!='',
                                                                 if(stringlib.stringfind(pStringIn1,',',4)!=0,
									                              trim(pStringIn1[1..stringlib.stringfind(pStringIn1,',',3)-1],left,right),
                                                                 if(stringlib.stringfind(pStringIn1,',',3)!=0,
									                              trim(pStringIn1[1..stringlib.stringfind(pStringIn1,',',2)-1],left,right),
										                         if(stringlib.stringfind(pStringIn1,',',2)!=0,
										                          trim(pStringIn1[1..stringlib.stringfind(pStringIn1,',',1)-1],left,right),
										                         if(stringlib.stringfind(pStringIn1,',',1)!=0,
										                          '',pStringIn1)))),
									                            if(trim(pStringIn2,left,right)!='',
                                                                 if(stringlib.stringfind(pStringIn2,',',4)!=0,
									                              trim(pStringIn2[1..stringlib.stringfind(pStringIn2,',',3)-1],left,right),
									                             if(stringlib.stringfind(pStringIn2,',',3)!=0,
									                              trim(pStringIn2[1..stringlib.stringfind(pStringIn2,',',2)-1],left,right),
										                         if(stringlib.stringfind(pStringIn2,',',2)!=0,
										                          trim(pStringIn2[1..stringlib.stringfind(pStringIn2,',',1)-1],left,right),
										                         if(stringlib.stringfind(pStringIn2,',',1)!=0,
										                          '',pStringIn2)))),										
											                    ''));
*/
/*
string fPropertyCSZ(string pStringIn1, string pStringIn2) := if(trim(pStringIn1,left,right)!='',
                                                              if(stringlib.stringfind(pStringIn1,',',3)!=0,
									                           trim(pStringIn1[stringlib.stringfind(pStringIn1,',',2)+1..stringlib.stringfind(pStringIn1,',',2)+51],left,right),
									                          if(stringlib.stringfind(pStringIn1,',',2)!=0,
									                           trim(pStringIn1[stringlib.stringfind(pStringIn1,',',1)+1..stringlib.stringfind(pStringIn1,',',1)+51],left,right),
									                          if(stringlib.stringfind(pStringIn1,',',1)!=0,
									                           trim(pStringIn1,left,right),''))),
								                             if(trim(pStringIn2,left,right)!='',
								                              if(stringlib.stringfind(pStringIn2,',',3)!=0,
									                           trim(pStringIn2[stringlib.stringfind(pStringIn2,',',2)+1..stringlib.stringfind(pStringIn2,',',2)+51],left,right),
									                          if(stringlib.stringfind(pStringIn2,',',2)!=0,
									                           trim(pStringIn2[stringlib.stringfind(pStringIn2,',',1)+1..stringlib.stringfind(pStringIn2,',',1)+51],left,right),
									                          if(stringlib.stringfind(pStringIn2,',',1)!=0,
									                           trim(pStringIn2,left,right),''))),
								                             ''));
*/
/*
string fLotCode(string pStringIn) := if(stringlib.stringfind(pStringIn,'MULTIPLE LOTS, INCLUDING A PORTION OF ONE OR MORE LOTS',1)!=0,
                                      'MP',
						             if(stringlib.stringfind(pStringIn,'MULTIPLE LOTS',1)!=0,
						              'M',
						             if(stringlib.stringfind(pStringIn,'PARTIAL LOT',1)!=0,
						              'P',
						             '')));
*/
/*							   
string fLotNumber(string pStringIn) := if(stringlib.stringfind(pStringIn,'LOT:',1)!=0,
                                        if(stringlib.stringfind(pStringIn,'BLOCK:',1)!=0,
							             trim(pStringIn[stringlib.stringfind(pStringIn,'LOT:',1)+4..stringlib.stringfind(pStringIn,'BLOCK:',1)-1],left,right),
							            if(stringlib.stringfind(pStringIn,'SECTION:',1)!=0,
							             trim(pStringIn[stringlib.stringfind(pStringIn,'LOT:',1)+4..stringlib.stringfind(pStringIn,'SECTION:',1)-1],left,right),
                                        if(stringlib.stringfind(pStringIn,'DISTRICT:',1)!=0,
							             trim(pStringIn[stringlib.stringfind(pStringIn,'LOT:',1)+4..stringlib.stringfind(pStringIn,'DISTRICT:',1)-1],left,right),
                                        if(stringlib.stringfind(pStringIn,'LAND LOT:',1)!=0,
							             trim(pStringIn[stringlib.stringfind(pStringIn,'LOT:',1)+4..stringlib.stringfind(pStringIn,'LAND LOT:',1)-1],left,right),
                                        if(stringlib.stringfind(pStringIn,'UNIT:',1)!=0,
							             trim(pStringIn[stringlib.stringfind(pStringIn,'LOT:',1)+4..stringlib.stringfind(pStringIn,'UNIT:',1)-1],left,right),
                                        if(stringlib.stringfind(pStringIn,'CITY:',1)!=0,
							             trim(pStringIn[stringlib.stringfind(pStringIn,'LOT:',1)+4..stringlib.stringfind(pStringIn,'CITY:',1)-1],left,right),
                                        if(stringlib.stringfind(pStringIn,'SUBDIVISION:',1)!=0,
							             trim(pStringIn[stringlib.stringfind(pStringIn,'LOT:',1)+4..stringlib.stringfind(pStringIn,'SUBDIVISION:',1)-1],left,right),
                                        if(stringlib.stringfind(pStringIn,'PHASE NUMBER:',1)!=0,
							             trim(pStringIn[stringlib.stringfind(pStringIn,'LOT:',1)+4..stringlib.stringfind(pStringIn,'PHASE NUMBER:',1)-1],left,right),
                                        if(stringlib.stringfind(pStringIn,'TRACT NUMBER:',1)!=0,
							             trim(pStringIn[stringlib.stringfind(pStringIn,'LOT:',1)+4..stringlib.stringfind(pStringIn,'TRACT NUMBER:',1)-1],left,right),
                                        if(stringlib.stringfind(pStringIn,'SEC/TWN/RNG/MERIDIAN:',1)!=0,
							             trim(pStringIn[stringlib.stringfind(pStringIn,'LOT:',1)+4..stringlib.stringfind(pStringIn,'SEC/TWN/RNG/MERIDIAN:',1)-1],left,right),
                                        if(stringlib.stringfind(pStringIn,'ASSESSOR'+'\'S MAP REFERENCE:',1)!=0,
							             trim(pStringIn[stringlib.stringfind(pStringIn,'LOT:',1)+4..stringlib.stringfind(pStringIn,'ASSESSOR'+'\'S MAP REFERENCE:',1)-1],left,right),
                                        if(stringlib.stringfind(pStringIn,'CENSUS TRACT:',1)!=0,
							             trim(pStringIn[stringlib.stringfind(pStringIn,'LOT:',1)+4..stringlib.stringfind(pStringIn,'CENSUS TRACT:',1)-1],left,right),
                                        if(stringlib.stringfind(pStringIn,'OWNERSHIP RECORD TYPE:',1)!=0,
							             trim(pStringIn[stringlib.stringfind(pStringIn,'LOT:',1)+4..stringlib.stringfind(pStringIn,'OWNERSHIP RECORD TYPE:',1)-1],left,right),
                                        if(stringlib.stringfind(pStringIn,'Brief Description:',1)!=0,
							             trim(pStringIn[stringlib.stringfind(pStringIn,'LOT:',1)+4..stringlib.stringfind(pStringIn,'Brief Description:',1)-1],left,right),
							           trim(pStringIn[stringlib.stringfind(pStringIn,'LOT:',1)+4..stringlib.stringfind(pStringIn,'LOT:',1)+11],left,right))))))))))))))),
						               '');
*/
/*
string fBlock(string pStringIn) := if(stringlib.stringfind(pStringIn,'BLOCK:',1)!=0,
                                    if(stringlib.stringfind(pStringIn,'SECTION:',1)!=0,
							         trim(pStringIn[stringlib.stringfind(pStringIn,'BLOCK:',1)+6..stringlib.stringfind(pStringIn,'SECTION:',1)-1],left,right),
                                    if(stringlib.stringfind(pStringIn,'DISTRICT:',1)!=0,
							         trim(pStringIn[stringlib.stringfind(pStringIn,'BLOCK:',1)+6..stringlib.stringfind(pStringIn,'DISTRICT:',1)-1],left,right),
                                    if(stringlib.stringfind(pStringIn,'LAND LOT:',1)!=0,
							         trim(pStringIn[stringlib.stringfind(pStringIn,'BLOCK:',1)+6..stringlib.stringfind(pStringIn,'LAND LOT:',1)-1],left,right),
                                    if(stringlib.stringfind(pStringIn,'UNIT:',1)!=0,
							         trim(pStringIn[stringlib.stringfind(pStringIn,'BLOCK:',1)+6..stringlib.stringfind(pStringIn,'UNIT:',1)-1],left,right),
                                    if(stringlib.stringfind(pStringIn,'CITY:',1)!=0,
							         trim(pStringIn[stringlib.stringfind(pStringIn,'BLOCK:',1)+6..stringlib.stringfind(pStringIn,'CITY:',1)-1],left,right),
                                    if(stringlib.stringfind(pStringIn,'SUBDIVISION:',1)!=0,
							         trim(pStringIn[stringlib.stringfind(pStringIn,'BLOCK:',1)+6..stringlib.stringfind(pStringIn,'SUBDIVISION:',1)-1],left,right),
                                    if(stringlib.stringfind(pStringIn,'PHASE NUMBER:',1)!=0,
							         trim(pStringIn[stringlib.stringfind(pStringIn,'BLOCK:',1)+6..stringlib.stringfind(pStringIn,'PHASE NUMBER:',1)-1],left,right),
                                    if(stringlib.stringfind(pStringIn,'TRACT NUMBER:',1)!=0,
							         trim(pStringIn[stringlib.stringfind(pStringIn,'BLOCK:',1)+6..stringlib.stringfind(pStringIn,'TRACT NUMBER:',1)-1],left,right),
                                    if(stringlib.stringfind(pStringIn,'SEC/TWN/RNG/MERIDIAN:',1)!=0,
							         trim(pStringIn[stringlib.stringfind(pStringIn,'BLOCK:',1)+6..stringlib.stringfind(pStringIn,'SEC/TWN/RNG/MERIDIAN:',1)-1],left,right),
                                    if(stringlib.stringfind(pStringIn,'ASSESSOR'+'\'S MAP REFERENCE:',1)!=0,
							         trim(pStringIn[stringlib.stringfind(pStringIn,'BLOCK:',1)+6..stringlib.stringfind(pStringIn,'ASSESSOR'+'\'S MAP REFERENCE:',1)-1],left,right),
                                    if(stringlib.stringfind(pStringIn,'CENSUS TRACT:',1)!=0,
							         trim(pStringIn[stringlib.stringfind(pStringIn,'BLOCK:',1)+6..stringlib.stringfind(pStringIn,'CENSUS TRACT:',1)-1],left,right),
                                    if(stringlib.stringfind(pStringIn,'OWNERSHIP RECORD TYPE:',1)!=0,
							         trim(pStringIn[stringlib.stringfind(pStringIn,'BLOCK:',1)+6..stringlib.stringfind(pStringIn,'OWNERSHIP RECORD TYPE:',1)-1],left,right),
                                    if(stringlib.stringfind(pStringIn,'Brief Description:',1)!=0,
							         trim(pStringIn[stringlib.stringfind(pStringIn,'BLOCK:',1)+6..stringlib.stringfind(pStringIn,'Brief Description:',1)-1],left,right),
							       trim(pStringIn[stringlib.stringfind(pStringIn,'BLOCK:',1)+6..stringlib.stringfind(pStringIn,'BLOCK:',1)+13],left,right)))))))))))))),
						           '');
*/
/*
string fSection(string pStringIn) := if(stringlib.stringfind(pStringIn,'SECTION:',1)!=0,
                                      if(stringlib.stringfind(pStringIn,'DISTRICT:',1)!=0,
							           trim(pStringIn[stringlib.stringfind(pStringIn,'SECTION:',1)+8..stringlib.stringfind(pStringIn,'DISTRICT:',1)-1],left,right),
                                      if(stringlib.stringfind(pStringIn,'LAND LOT:',1)!=0,
							           trim(pStringIn[stringlib.stringfind(pStringIn,'SECTION:',1)+8..stringlib.stringfind(pStringIn,'LAND LOT:',1)-1],left,right),
                                      if(stringlib.stringfind(pStringIn,'UNIT:',1)!=0,
							           trim(pStringIn[stringlib.stringfind(pStringIn,'SECTION:',1)+8..stringlib.stringfind(pStringIn,'UNIT:',1)-1],left,right),
                                      if(stringlib.stringfind(pStringIn,'CITY:',1)!=0,
							           trim(pStringIn[stringlib.stringfind(pStringIn,'SECTION:',1)+8..stringlib.stringfind(pStringIn,'CITY:',1)-1],left,right),
                                      if(stringlib.stringfind(pStringIn,'SUBDIVISION:',1)!=0,
							           trim(pStringIn[stringlib.stringfind(pStringIn,'SECTION:',1)+8..stringlib.stringfind(pStringIn,'SUBDIVISION:',1)-1],left,right),
                                      if(stringlib.stringfind(pStringIn,'PHASE NUMBER:',1)!=0,
							           trim(pStringIn[stringlib.stringfind(pStringIn,'SECTION:',1)+8..stringlib.stringfind(pStringIn,'PHASE NUMBER:',1)-1],left,right),
                                      if(stringlib.stringfind(pStringIn,'TRACT NUMBER:',1)!=0,
							           trim(pStringIn[stringlib.stringfind(pStringIn,'SECTION:',1)+8..stringlib.stringfind(pStringIn,'TRACT NUMBER:',1)-1],left,right),
                                      if(stringlib.stringfind(pStringIn,'SEC/TWN/RNG/MERIDIAN:',1)!=0,
							           trim(pStringIn[stringlib.stringfind(pStringIn,'SECTION:',1)+8..stringlib.stringfind(pStringIn,'SEC/TWN/RNG/MERIDIAN:',1)-1],left,right),
                                      if(stringlib.stringfind(pStringIn,'ASSESSOR'+'\'S MAP REFERENCE:',1)!=0,
							           trim(pStringIn[stringlib.stringfind(pStringIn,'SECTION:',1)+8..stringlib.stringfind(pStringIn,'ASSESSOR'+'\'S MAP REFERENCE:',1)-1],left,right),
                                      if(stringlib.stringfind(pStringIn,'CENSUS TRACT:',1)!=0,
							           trim(pStringIn[stringlib.stringfind(pStringIn,'SECTION:',1)+8..stringlib.stringfind(pStringIn,'CENSUS TRACT:',1)-1],left,right),
                                      if(stringlib.stringfind(pStringIn,'OWNERSHIP RECORD TYPE:',1)!=0,
							           trim(pStringIn[stringlib.stringfind(pStringIn,'SECTION:',1)+8..stringlib.stringfind(pStringIn,'OWNERSHIP RECORD TYPE:',1)-1],left,right),
                                      if(stringlib.stringfind(pStringIn,'Brief Description:',1)!=0,
							           trim(pStringIn[stringlib.stringfind(pStringIn,'SECTION:',1)+8..stringlib.stringfind(pStringIn,'Brief Description:',1)-1],left,right),
							         trim(pStringIn[stringlib.stringfind(pStringIn,'SECTION:',1)+8..stringlib.stringfind(pStringIn,'SECTION:',1)+15],left,right))))))))))))),
						             '');
*/
/*
string fDistrict(string pStringIn) := if(stringlib.stringfind(pStringIn,'DISTRICT:',1)!=0,
                                       if(stringlib.stringfind(pStringIn,'LAND LOT:',1)!=0,
							            trim(pStringIn[stringlib.stringfind(pStringIn,'DISTRICT:',1)+9..stringlib.stringfind(pStringIn,'LAND LOT:',1)-1],left,right),
                                       if(stringlib.stringfind(pStringIn,'UNIT:',1)!=0,
							            trim(pStringIn[stringlib.stringfind(pStringIn,'DISTRICT:',1)+9..stringlib.stringfind(pStringIn,'UNIT:',1)-1],left,right),
                                       if(stringlib.stringfind(pStringIn,'CITY:',1)!=0,
							            trim(pStringIn[stringlib.stringfind(pStringIn,'DISTRICT:',1)+9..stringlib.stringfind(pStringIn,'CITY:',1)-1],left,right),
                                       if(stringlib.stringfind(pStringIn,'SUBDIVISION:',1)!=0,
							            trim(pStringIn[stringlib.stringfind(pStringIn,'DISTRICT:',1)+9..stringlib.stringfind(pStringIn,'SUBDIVISION:',1)-1],left,right),
                                       if(stringlib.stringfind(pStringIn,'PHASE NUMBER:',1)!=0,
							            trim(pStringIn[stringlib.stringfind(pStringIn,'DISTRICT:',1)+9..stringlib.stringfind(pStringIn,'PHASE NUMBER:',1)-1],left,right),
                                       if(stringlib.stringfind(pStringIn,'TRACT NUMBER:',1)!=0,
							            trim(pStringIn[stringlib.stringfind(pStringIn,'DISTRICT:',1)+9..stringlib.stringfind(pStringIn,'TRACT NUMBER:',1)-1],left,right),
                                       if(stringlib.stringfind(pStringIn,'SEC/TWN/RNG/MERIDIAN:',1)!=0,
							            trim(pStringIn[stringlib.stringfind(pStringIn,'DISTRICT:',1)+9..stringlib.stringfind(pStringIn,'SEC/TWN/RNG/MERIDIAN:',1)-1],left,right),
                                       if(stringlib.stringfind(pStringIn,'ASSESSOR'+'\'S MAP REFERENCE:',1)!=0,
							            trim(pStringIn[stringlib.stringfind(pStringIn,'DISTRICT:',1)+9..stringlib.stringfind(pStringIn,'ASSESSOR'+'\'S MAP REFERENCE:',1)-1],left,right),
                                       if(stringlib.stringfind(pStringIn,'CENSUS TRACT:',1)!=0,
							            trim(pStringIn[stringlib.stringfind(pStringIn,'DISTRICT:',1)+9..stringlib.stringfind(pStringIn,'CENSUS TRACT:',1)-1],left,right),
                                       if(stringlib.stringfind(pStringIn,'OWNERSHIP RECORD TYPE:',1)!=0,
							            trim(pStringIn[stringlib.stringfind(pStringIn,'DISTRICT:',1)+9..stringlib.stringfind(pStringIn,'OWNERSHIP RECORD TYPE:',1)-1],left,right),
                                       if(stringlib.stringfind(pStringIn,'Brief Description:',1)!=0,
							            trim(pStringIn[stringlib.stringfind(pStringIn,'DISTRICT:',1)+9..stringlib.stringfind(pStringIn,'Brief Description:',1)-1],left,right),
							          trim(pStringIn[stringlib.stringfind(pStringIn,'DISTRICT:',1)+9..stringlib.stringfind(pStringIn,'DISTRICT:',1)+21],left,right)))))))))))),
						              '');
*/
/*									  
string fLandLot(string pStringIn) := if(stringlib.stringfind(pStringIn,'LAND LOT:',1)!=0,
                                      if(stringlib.stringfind(pStringIn,'UNIT:',1)!=0,
							           trim(pStringIn[stringlib.stringfind(pStringIn,'LAND LOT:',1)+9..stringlib.stringfind(pStringIn,'UNIT:',1)-1],left,right),
                                      if(stringlib.stringfind(pStringIn,'CITY:',1)!=0,
							           trim(pStringIn[stringlib.stringfind(pStringIn,'LAND LOT:',1)+9..stringlib.stringfind(pStringIn,'CITY:',1)-1],left,right),
                                      if(stringlib.stringfind(pStringIn,'SUBDIVISION:',1)!=0,
							           trim(pStringIn[stringlib.stringfind(pStringIn,'LAND LOT:',1)+9..stringlib.stringfind(pStringIn,'SUBDIVISION:',1)-1],left,right),
                                      if(stringlib.stringfind(pStringIn,'PHASE NUMBER:',1)!=0,
							           trim(pStringIn[stringlib.stringfind(pStringIn,'LAND LOT:',1)+9..stringlib.stringfind(pStringIn,'PHASE NUMBER:',1)-1],left,right),
                                      if(stringlib.stringfind(pStringIn,'TRACT NUMBER:',1)!=0,
							           trim(pStringIn[stringlib.stringfind(pStringIn,'LAND LOT:',1)+9..stringlib.stringfind(pStringIn,'TRACT NUMBER:',1)-1],left,right),
                                      if(stringlib.stringfind(pStringIn,'SEC/TWN/RNG/MERIDIAN:',1)!=0,
							           trim(pStringIn[stringlib.stringfind(pStringIn,'LAND LOT:',1)+9..stringlib.stringfind(pStringIn,'SEC/TWN/RNG/MERIDIAN:',1)-1],left,right),
                                      if(stringlib.stringfind(pStringIn,'ASSESSOR'+'\'S MAP REFERENCE:',1)!=0,
							           trim(pStringIn[stringlib.stringfind(pStringIn,'LAND LOT:',1)+9..stringlib.stringfind(pStringIn,'ASSESSOR'+'\'S MAP REFERENCE:',1)-1],left,right),
                                      if(stringlib.stringfind(pStringIn,'CENSUS TRACT:',1)!=0,
							           trim(pStringIn[stringlib.stringfind(pStringIn,'LAND LOT:',1)+9..stringlib.stringfind(pStringIn,'CENSUS TRACT:',1)-1],left,right),
                                      if(stringlib.stringfind(pStringIn,'OWNERSHIP RECORD TYPE:',1)!=0,
							           trim(pStringIn[stringlib.stringfind(pStringIn,'LAND LOT:',1)+9..stringlib.stringfind(pStringIn,'OWNERSHIP RECORD TYPE:',1)-1],left,right),
                                      if(stringlib.stringfind(pStringIn,'Brief Description:',1)!=0,
							           trim(pStringIn[stringlib.stringfind(pStringIn,'LAND LOT:',1)+9..stringlib.stringfind(pStringIn,'Brief Description:',1)-1],left,right),
							         trim(pStringIn[stringlib.stringfind(pStringIn,'LAND LOT:',1)+9..stringlib.stringfind(pStringIn,'LAND LOT:',1)+19],left,right))))))))))),
						             '');
*/
/*
string fUnit(string pStringIn) := if(stringlib.stringfind(pStringIn,'UNIT:',1)!=0,
                                   if(stringlib.stringfind(pStringIn,'CITY:',1)!=0,
							        trim(pStringIn[stringlib.stringfind(pStringIn,'UNIT:',1)+5..stringlib.stringfind(pStringIn,'CITY:',1)-1],left,right),
                                   if(stringlib.stringfind(pStringIn,'SUBDIVISION:',1)!=0,
							        trim(pStringIn[stringlib.stringfind(pStringIn,'UNIT:',1)+5..stringlib.stringfind(pStringIn,'SUBDIVISION:',1)-1],left,right),
                                   if(stringlib.stringfind(pStringIn,'PHASE NUMBER:',1)!=0,
							        trim(pStringIn[stringlib.stringfind(pStringIn,'UNIT:',1)+5..stringlib.stringfind(pStringIn,'PHASE NUMBER:',1)-1],left,right),
                                   if(stringlib.stringfind(pStringIn,'TRACT NUMBER:',1)!=0,
							        trim(pStringIn[stringlib.stringfind(pStringIn,'UNIT:',1)+5..stringlib.stringfind(pStringIn,'TRACT NUMBER:',1)-1],left,right),
                                   if(stringlib.stringfind(pStringIn,'SEC/TWN/RNG/MERIDIAN:',1)!=0,
							        trim(pStringIn[stringlib.stringfind(pStringIn,'UNIT:',1)+5..stringlib.stringfind(pStringIn,'SEC/TWN/RNG/MERIDIAN:',1)-1],left,right),
                                   if(stringlib.stringfind(pStringIn,'ASSESSOR'+'\'S MAP REFERENCE:',1)!=0,
							        trim(pStringIn[stringlib.stringfind(pStringIn,'UNIT:',1)+5..stringlib.stringfind(pStringIn,'ASSESSOR'+'\'S MAP REFERENCE:',1)-1],left,right),
                                   if(stringlib.stringfind(pStringIn,'CENSUS TRACT:',1)!=0,
							        trim(pStringIn[stringlib.stringfind(pStringIn,'UNIT:',1)+5..stringlib.stringfind(pStringIn,'CENSUS TRACT:',1)-1],left,right),
                                   if(stringlib.stringfind(pStringIn,'OWNERSHIP RECORD TYPE:',1)!=0,
							        trim(pStringIn[stringlib.stringfind(pStringIn,'UNIT:',1)+5..stringlib.stringfind(pStringIn,'OWNERSHIP RECORD TYPE:',1)-1],left,right),
                                   if(stringlib.stringfind(pStringIn,'Brief Description:',1)!=0,
							        trim(pStringIn[stringlib.stringfind(pStringIn,'UNIT:',1)+5..stringlib.stringfind(pStringIn,'Brief Description:',1)-1],left,right),
							      trim(pStringIn[stringlib.stringfind(pStringIn,'UNIT:',1)+5..stringlib.stringfind(pStringIn,'UNIT:',1)+11],left,right)))))))))),
						          '');						   
*/
/*
string fCity(string pStringIn) := if(stringlib.stringfind(pStringIn,'CITY:',1)!=0,
                                   if(stringlib.stringfind(pStringIn,'SUBDIVISION:',1)!=0,
							        trim(pStringIn[stringlib.stringfind(pStringIn,'CITY:',1)+5..stringlib.stringfind(pStringIn,'SUBDIVISION:',1)-1],left,right),
                                   if(stringlib.stringfind(pStringIn,'PHASE NUMBER:',1)!=0,
							        trim(pStringIn[stringlib.stringfind(pStringIn,'CITY:',1)+5..stringlib.stringfind(pStringIn,'PHASE NUMBER:',1)-1],left,right),
                                   if(stringlib.stringfind(pStringIn,'TRACT NUMBER:',1)!=0,
							        trim(pStringIn[stringlib.stringfind(pStringIn,'CITY:',1)+5..stringlib.stringfind(pStringIn,'TRACT NUMBER:',1)-1],left,right),
                                   if(stringlib.stringfind(pStringIn,'SEC/TWN/RNG/MERIDIAN:',1)!=0,
							        trim(pStringIn[stringlib.stringfind(pStringIn,'CITY:',1)+5..stringlib.stringfind(pStringIn,'SEC/TWN/RNG/MERIDIAN:',1)-1],left,right),
                                   if(stringlib.stringfind(pStringIn,'ASSESSOR'+'\'S MAP REFERENCE:',1)!=0,
							        trim(pStringIn[stringlib.stringfind(pStringIn,'CITY:',1)+5..stringlib.stringfind(pStringIn,'ASSESSOR'+'\'S MAP REFERENCE:',1)-1],left,right),
                                   if(stringlib.stringfind(pStringIn,'CENSUS TRACT:',1)!=0,
							        trim(pStringIn[stringlib.stringfind(pStringIn,'CITY:',1)+5..stringlib.stringfind(pStringIn,'CENSUS TRACT:',1)-1],left,right),
                                   if(stringlib.stringfind(pStringIn,'OWNERSHIP RECORD TYPE:',1)!=0,
							        trim(pStringIn[stringlib.stringfind(pStringIn,'CITY:',1)+5..stringlib.stringfind(pStringIn,'OWNERSHIP RECORD TYPE:',1)-1],left,right),
                                   if(stringlib.stringfind(pStringIn,'Brief Description:',1)!=0,
							        trim(pStringIn[stringlib.stringfind(pStringIn,'CITY:',1)+5..stringlib.stringfind(pStringIn,'Brief Description:',1)-1],left,right),
						       	  trim(pStringIn[stringlib.stringfind(pStringIn,'CITY:',1)+5..stringlib.stringfind(pStringIn,'CITY:',1)+35],left,right))))))))),
						          '');
*/
/*
string fSubdivision(string pStringIn) := if(stringlib.stringfind(pStringIn,'SUBDIVISION:',1)!=0,
                                          if(stringlib.stringfind(pStringIn,'PHASE NUMBER:',1)!=0,
							               trim(pStringIn[stringlib.stringfind(pStringIn,'SUBDIVISION:',1)+12..stringlib.stringfind(pStringIn,'PHASE NUMBER:',1)-1],left,right),
                                          if(stringlib.stringfind(pStringIn,'TRACT NUMBER:',1)!=0,
							               trim(pStringIn[stringlib.stringfind(pStringIn,'SUBDIVISION:',1)+12..stringlib.stringfind(pStringIn,'TRACT NUMBER:',1)-1],left,right),
                                          if(stringlib.stringfind(pStringIn,'SEC/TWN/RNG/MERIDIAN:',1)!=0,
							               trim(pStringIn[stringlib.stringfind(pStringIn,'SUBDIVISION:',1)+12..stringlib.stringfind(pStringIn,'SEC/TWN/RNG/MERIDIAN:',1)-1],left,right),
                                          if(stringlib.stringfind(pStringIn,'ASSESSOR'+'\'S MAP REFERENCE:',1)!=0,
							               trim(pStringIn[stringlib.stringfind(pStringIn,'SUBDIVISION:',1)+12..stringlib.stringfind(pStringIn,'ASSESSOR'+'\'S MAP REFERENCE:',1)-1],left,right),
                                          if(stringlib.stringfind(pStringIn,'CENSUS TRACT:',1)!=0,
							               trim(pStringIn[stringlib.stringfind(pStringIn,'SUBDIVISION:',1)+12..stringlib.stringfind(pStringIn,'CENSUS TRACT:',1)-1],left,right),
                                          if(stringlib.stringfind(pStringIn,'OWNERSHIP RECORD TYPE:',1)!=0,
							               trim(pStringIn[stringlib.stringfind(pStringIn,'SUBDIVISION:',1)+12..stringlib.stringfind(pStringIn,'OWNERSHIP RECORD TYPE:',1)-1],left,right),
                                          if(stringlib.stringfind(pStringIn,'Brief Description:',1)!=0,
							               trim(pStringIn[stringlib.stringfind(pStringIn,'SUBDIVISION:',1)+12..stringlib.stringfind(pStringIn,'Brief Description:',1)-1],left,right),
							             trim(pStringIn[stringlib.stringfind(pStringIn,'SUBDIVISION:',1)+12..stringlib.stringfind(pStringIn,'SUBDIVISION:',1)+52],left,right)))))))),
						                 '');							   
*/
/*						   
string fPhase(string pStringIn) := if(stringlib.stringfind(pStringIn,'PHASE NUMBER:',1)!=0,
                                    if(stringlib.stringfind(pStringIn,'TRACT NUMBER:',1)!=0,
							         trim(pStringIn[stringlib.stringfind(pStringIn,'PHASE NUMBER:',1)+13..stringlib.stringfind(pStringIn,'TRACT NUMBER:',1)-1],left,right),
                                    if(stringlib.stringfind(pStringIn,'SEC/TWN/RNG/MERIDIAN:',1)!=0,
							         trim(pStringIn[stringlib.stringfind(pStringIn,'PHASE NUMBER:',1)+13..stringlib.stringfind(pStringIn,'SEC/TWN/RNG/MERIDIAN:',1)-1],left,right),
                                    if(stringlib.stringfind(pStringIn,'ASSESSOR'+'\'S MAP REFERENCE:',1)!=0,
							         trim(pStringIn[stringlib.stringfind(pStringIn,'PHASE NUMBER:',1)+13..stringlib.stringfind(pStringIn,'ASSESSOR'+'\'S MAP REFERENCE:',1)-1],left,right),
                                    if(stringlib.stringfind(pStringIn,'CENSUS TRACT:',1)!=0,
							         trim(pStringIn[stringlib.stringfind(pStringIn,'PHASE NUMBER:',1)+13..stringlib.stringfind(pStringIn,'CENSUS TRACT:',1)-1],left,right),
                                    if(stringlib.stringfind(pStringIn,'OWNERSHIP RECORD TYPE:',1)!=0,
							         trim(pStringIn[stringlib.stringfind(pStringIn,'PHASE NUMBER:',1)+13..stringlib.stringfind(pStringIn,'OWNERSHIP RECORD TYPE:',1)-1],left,right),
                                    if(stringlib.stringfind(pStringIn,'Brief Description:',1)!=0,
							         trim(pStringIn[stringlib.stringfind(pStringIn,'PHASE NUMBER:',1)+13..stringlib.stringfind(pStringIn,'Brief Description:',1)-1],left,right),
							       trim(pStringIn[stringlib.stringfind(pStringIn,'PHASE NUMBER:',1)+13..stringlib.stringfind(pStringIn,'PHASE NUMBER:',1)+20],left,right))))))),
						           '');						   
*/
/*						   
string fTract(string pStringIn) := if(stringlib.stringfind(pStringIn,'TRACT NUMBER:',1)!=0,
                                    if(stringlib.stringfind(pStringIn,'SEC/TWN/RNG/MERIDIAN:',1)!=0,
							         trim(pStringIn[stringlib.stringfind(pStringIn,'TRACT NUMBER:',1)+13..stringlib.stringfind(pStringIn,'SEC/TWN/RNG/MERIDIAN:',1)-1],left,right),
                                    if(stringlib.stringfind(pStringIn,'ASSESSOR'+'\'S MAP REFERENCE:',1)!=0,
							         trim(pStringIn[stringlib.stringfind(pStringIn,'TRACT NUMBER:',1)+13..stringlib.stringfind(pStringIn,'ASSESSOR'+'\'S MAP REFERENCE:',1)-1],left,right),
                                    if(stringlib.stringfind(pStringIn,'CENSUS TRACT:',1)!=0,
							         trim(pStringIn[stringlib.stringfind(pStringIn,'TRACT NUMBER:',1)+13..stringlib.stringfind(pStringIn,'CENSUS TRACT:',1)-1],left,right),
                                    if(stringlib.stringfind(pStringIn,'OWNERSHIP RECORD TYPE:',1)!=0,
							         trim(pStringIn[stringlib.stringfind(pStringIn,'TRACT NUMBER:',1)+13..stringlib.stringfind(pStringIn,'OWNERSHIP RECORD TYPE:',1)-1],left,right),
                                    if(stringlib.stringfind(pStringIn,'Brief Description:',1)!=0,
							         trim(pStringIn[stringlib.stringfind(pStringIn,'TRACT NUMBER:',1)+13..stringlib.stringfind(pStringIn,'Brief Description:',1)-1],left,right),
							       trim(pStringIn[stringlib.stringfind(pStringIn,'TRACT NUMBER:',1)+13..stringlib.stringfind(pStringIn,'TRACT NUMBER:',1)+23],left,right)))))),
						           '');
*/
/*						   
string fSecTwnRngMer(string pStringIn) := if(stringlib.stringfind(pStringIn,'SEC/TWN/RNG/MERIDIAN:',1)!=0,
                                           if(stringlib.stringfind(pStringIn,'ASSESSOR'+'\'S MAP REFERENCE:',1)!=0,
							                trim(pStringIn[stringlib.stringfind(pStringIn,'SEC/TWN/RNG/MERIDIAN:',1)+21..stringlib.stringfind(pStringIn,'ASSESSOR'+'\'S MAP REFERENCE:',1)-1],left,right),
                                           if(stringlib.stringfind(pStringIn,'CENSUS TRACT:',1)!=0,
							                trim(pStringIn[stringlib.stringfind(pStringIn,'SEC/TWN/RNG/MERIDIAN:',1)+21..stringlib.stringfind(pStringIn,'CENSUS TRACT:',1)-1],left,right),
                                           if(stringlib.stringfind(pStringIn,'OWNERSHIP RECORD TYPE:',1)!=0,
							                trim(pStringIn[stringlib.stringfind(pStringIn,'SEC/TWN/RNG/MERIDIAN:',1)+21..stringlib.stringfind(pStringIn,'OWNERSHIP RECORD TYPE:',1)-1],left,right),
                                           if(stringlib.stringfind(pStringIn,'Brief Description:',1)!=0,
							                trim(pStringIn[stringlib.stringfind(pStringIn,'SEC/TWN/RNG/MERIDIAN:',1)+21..stringlib.stringfind(pStringIn,'Brief Description:',1)-1],left,right),
							              trim(pStringIn[stringlib.stringfind(pStringIn,'SEC/TWN/RNG/MERIDIAN:',1)+21..stringlib.stringfind(pStringIn,'SEC/TWN/RNG/MERIDIAN:',1)+23],left,right))))),
						                  '');						   
*/
/*						   
string fMapRef(string pStringIn) := if(stringlib.stringfind(pStringIn,'ASSESSOR'+'\'S MAP REFERENCE:',1)!=0,
                                     if(stringlib.stringfind(pStringIn,'CENSUS TRACT:',1)!=0,
							          trim(pStringIn[stringlib.stringfind(pStringIn,'ASSESSOR'+'\'S MAP REFERENCE:',1)+25..stringlib.stringfind(pStringIn,'CENSUS TRACT:',1)-1],left,right),
                                     if(stringlib.stringfind(pStringIn,'OWNERSHIP RECORD TYPE:',1)!=0,
							          trim(pStringIn[stringlib.stringfind(pStringIn,'ASSESSOR'+'\'S MAP REFERENCE:',1)+25..stringlib.stringfind(pStringIn,'OWNERSHIP RECORD TYPE:',1)-1],left,right),
                                     if(stringlib.stringfind(pStringIn,'Brief Description:',1)!=0,
							          trim(pStringIn[stringlib.stringfind(pStringIn,'ASSESSOR'+'\'S MAP REFERENCE:',1)+25..stringlib.stringfind(pStringIn,'Brief Description:',1)-1],left,right),
							        trim(pStringIn[stringlib.stringfind(pStringIn,'ASSESSOR'+'\'S MAP REFERENCE:',1)+25..stringlib.stringfind(pStringIn,'ASSESSOR'+'\'S MAP REFERENCE:',1)+40],left,right)))),
						            '');
*/						   
string fCensus(string pStringIn) := if(stringlib.stringfind(pStringIn,'CENSUS TRACT:',1)!=0,
                                     if(stringlib.stringfind(pStringIn,'OWNERSHIP RECORD TYPE:',1)!=0,
							          trim(pStringIn[stringlib.stringfind(pStringIn,'CENSUS TRACT:',1)+13..stringlib.stringfind(pStringIn,'OWNERSHIP RECORD TYPE:',1)-1],left,right),
                                     if(stringlib.stringfind(pStringIn,'Brief Description:',1)!=0,
							          trim(pStringIn[stringlib.stringfind(pStringIn,'CENSUS TRACT:',1)+13..stringlib.stringfind(pStringIn,'Brief Description:',1)-1],left,right),
							        trim(pStringIn[stringlib.stringfind(pStringIn,'CENSUS TRACT:',1)+13..stringlib.stringfind(pStringIn,'CENSUS TRACT:',1)+19],left,right))),
						            '');
						   
string fRHO(string pStringIn) := stringlib.stringfindreplace(pStringIn,'HOMEOWNER; ','');						   
						   
						   
CommonModel MapToCommonModel(source_file L) := TRANSFORM
  self.process_date       := '20050210';
  self.vendor_source_flag := 'DAYTN';
  self.state_code         := map(stringlib.stringfind(L.PUBLICATION,',',1)!=0                    => L.PUBLICATION[stringlib.stringfind(L.PUBLICATION,',',1)+2..stringlib.stringfind(L.PUBLICATION,',',1)+4],
                                 stringlib.stringfind(L.PUBLICATION,'DISTRICT OF COLUMBIA',1)!=0 => 'DC',
								 stringlib.stringfind(L.PUBLICATION,'PUERTO RICO',1)!=0          => 'PR',
								 stringlib.stringfind(L.PUBLICATION,'AMERICAN SAMOA',1)!=0       => 'AS',
								 stringlib.stringfind(L.PUBLICATION,'GUAM',1)!=0                 => 'GU',
								 stringlib.stringfind(L.PUBLICATION,'MARIANA ISLANDS',1)!=0      => 'MP',
								 stringlib.stringfind(L.PUBLICATION,'MIDWAY ISLANDS',1)!=0       => 'XX',
								 stringlib.stringfind(L.PUBLICATION,'VIRGIN ISLANDS',1)!=0       => 'VI',
						     '');
  self.county_name        := trim(stringlib.stringfindreplace
                                  (stringlib.stringfindreplace(
						           stringlib.stringtouppercase(L.COUNTY),
						          'PARISH',''),
						         'COUNTY',''),left,right);
						  
  self.apna_or_pin_number := L.APN;
  
  //self.visf_owner_1       := L.OWNER_1;
  
  self.assessee_name := if(stringlib.stringfind(L.OWNER_1,';',1)!=0,
                         LN_Functions.test_fnc_remove_afterwards(trim(source_file.OWNER_1[1..stringlib.stringfind(source_file.OWNER_1,';',1)])),
						LN_Functions.test_fnc_remove_afterwards(trim(source_file.OWNER_1)));
  //self.assessee_name := if(stringlib.stringfind(L.OWNER_1,'(',1)!=0,
  //                       L.OWNER_1[1..stringlib.stringfind(L.OWNER_1,'(',1)-1],
  //						if(stringlib.stringfind(L.OWNER_1,';',1)!=0,
  //						 L.OWNER_1[1..stringlib.stringfind(L.OWNER_1,';',1)-1],
  //						trim(L.OWNER_1,left,right)));
  self.second_assessee_name := if(stringlib.stringfind(L.OWNER_1,';',1)!=0,
                                LN_Functions.test_fnc_remove_afterwards(trim(source_file.OWNER_1[stringlib.stringfind(source_file.OWNER_1,';',1)+1..stringlib.stringfind(source_file.OWNER_1,';',1)+501])),
							   '');
  							   
  //self.second_assessee_name := if(stringlib.stringfind(L.OWNER_1,';',1)!=0 AND stringlib.stringfind(L.OWNER_1,'(',1)!=0,
  //                              L.OWNER_1[stringlib.stringfind(L.OWNER_1,';',1)+1..stringlib.stringfind(L.OWNER_1,'(',1)-1],
  //							   if(stringlib.stringfind(L.OWNER_1,';',1)!=0 AND stringlib.stringfind(L.OWNER_1,'; Owner Occupied',1)!=0,
  //								L.OWNER_1[stringlib.stringfind(L.OWNER_1,';',1)+1..stringlib.stringfind(L.OWNER_1,'; Owner Occupied',1)-1],
  //							   if(stringlib.stringfind(L.OWNER_1,';',1)!=0 AND stringlib.stringfind(L.OWNER_1,'(',1)=0 AND stringlib.stringfind(L.OWNER_1,'Owner Occupied',1)=0,
  //							    trim(L.OWNER_1[stringlib.stringfind(L.OWNER_1,';',1)+1..stringlib.stringfind(L.OWNER_1,';',1)+61],left,right),
  //							   '')));
  self.assessee_ownership_rights_code := map(stringlib.stringfind(stringlib.stringtouppercase(L.OWNER_1),' (COMMUNITY PROPERTY)',1)   !=0 => 'CP',
                                             stringlib.stringfind(stringlib.stringtouppercase(L.OWNER_1),' ETAL',1)                   !=0 => 'EA',
											 stringlib.stringfind(stringlib.stringtouppercase(L.OWNER_1),' (ESTATE)',1)               !=0 => 'ES',
											 stringlib.stringfind(stringlib.stringtouppercase(L.OWNER_1),' ETUX',1)                   !=0 => 'EU',
											 stringlib.stringfind(stringlib.stringtouppercase(L.OWNER_1),' (FAMILY TRUST)',1)         !=0 => 'FM',
											 stringlib.stringfind(stringlib.stringtouppercase(L.OWNER_1),' (IRREVOCABLE TRUST)',1)    !=0 => 'IR',
											 stringlib.stringfind(stringlib.stringtouppercase(L.OWNER_1),' (JOINT TENANCY)',1)        !=0 => 'JT',
											 stringlib.stringfind(stringlib.stringtouppercase(L.OWNER_1),' (JOINT VENTURE)',1)        !=0 => 'JV',
											 stringlib.stringfind(stringlib.stringtouppercase(L.OWNER_1),' (LIFE ESTATE)',1)          !=0 => 'LE',
											 stringlib.stringfind(stringlib.stringtouppercase(L.OWNER_1),' (LIVING TRUST)',1)         !=0 => 'LV',
											 stringlib.stringfind(stringlib.stringtouppercase(L.OWNER_1),' (REVOCABLE TRUST)',1)      !=0 => 'RT',
											 stringlib.stringfind(stringlib.stringtouppercase(L.OWNER_1),' (TENANTS IN COMMON)',1)    !=0 => 'TC',
											 stringlib.stringfind(stringlib.stringtouppercase(L.OWNER_1),' (TENANTS BY ENTIRETY)',1)  !=0 => 'TE',
											 stringlib.stringfind(stringlib.stringtouppercase(L.OWNER_1),' (TRUSTEE/CONSERVATOR)',1)  !=0 => 'TR',
											 stringlib.stringfind(stringlib.stringtouppercase(L.OWNER_1),' (CONTRACT OWNER)',1)       !=0 => 'CT',
											 stringlib.stringfind(stringlib.stringtouppercase(L.OWNER_1),' (JOINT SURVIVORSHIP)',1)   !=0 => 'JS',
											 stringlib.stringfind(stringlib.stringtouppercase(L.OWNER_1),' (TRUST)',1)                !=0 => 'TS',
											 stringlib.stringfind(stringlib.stringtouppercase(L.OWNER_1),' (RIGHT OF SURVIVORSHIP)',1)!=0 => 'RS',
                                             '');
  self.assessee_relationship_code := map(stringlib.stringfind(stringlib.stringtouppercase(L.OWNER_1),' (HUSBAND AND WIFE)',1)                               !=0 => 'HW',
                                         stringlib.stringfind(stringlib.stringtouppercase(L.OWNER_1),' (SINGLE OR UNMARRIED MAN)',1)                        !=0 => 'SM',
										 stringlib.stringfind(stringlib.stringtouppercase(L.OWNER_1),' (MARRIED MAN AS HIS SOLE AND SEPARATE PROPERTY)',1)  !=0 => 'MM',
										 stringlib.stringfind(stringlib.stringtouppercase(L.OWNER_1),' (SINGLE OR UNMARRIED WOMAN)',1)                      !=0 => 'SW',
										 stringlib.stringfind(stringlib.stringtouppercase(L.OWNER_1),' (MARRIED WOMAN AS HER SOLE AND SEPARATE PROPERTY)',1)!=0 => 'MW',
										 stringlib.stringfind(stringlib.stringtouppercase(L.OWNER_1),' A/K/A',1)                                            !=0 => 'AK',
										 stringlib.stringfind(stringlib.stringtouppercase(L.OWNER_1),' D/B/A',1)                                            !=0 => 'DB',
										 stringlib.stringfind(stringlib.stringtouppercase(L.OWNER_1),' F/K/A',1)                                            !=0 => 'FK',
										 stringlib.stringfind(stringlib.stringtouppercase(L.OWNER_1),' (EXECUTOR)',1)                                       !=0 => 'EX',
										 stringlib.stringfind(stringlib.stringtouppercase(L.OWNER_1),' (MINOR/GUARDIAN)',1)                                 !=0 => 'MI',
										 stringlib.stringfind(stringlib.stringtouppercase(L.OWNER_1),' (GOVERNMENT)',1)                                     !=0 => 'GV',
										 stringlib.stringfind(stringlib.stringtouppercase(L.OWNER_1),' (PARTNERSHIP)',1)                                    !=0 => 'PA',
										 stringlib.stringfind(stringlib.stringtouppercase(L.OWNER_1),' (WIDOW/WIDOWER)',1)                                  !=0 => 'WD',
										 stringlib.stringfind(stringlib.stringtouppercase(L.OWNER_1),' (COMPANY/CORPORATION)',1)                            !=0 => 'CO',
										 stringlib.stringfind(stringlib.stringtouppercase(L.OWNER_1),' (HER HUSBAND)',1)                                    !=0 => 'HH',
										 stringlib.stringfind(stringlib.stringtouppercase(L.OWNER_1),' (SOLE OWNER)',1)                                     !=0 => 'SO',
										 stringlib.stringfind(stringlib.stringtouppercase(L.OWNER_1),' (TENANT)',1)                                         !=0 => 'TN',
										 '');
  self.assessee_phone_number      := L.PHONE_NUMBER;
  self.contract_owner             := L.OWNER_3;
  
  self.visf_mailing_address := L.MAILING_ADDRESS;
  self.mailing_care_of_name := if(stringlib.stringfind(L.MAILING_ADDRESS,'C/O',1)!=0 AND stringlib.stringfind(L.MAILING_ADDRESS,',',6)!=0,
                                trim(L.MAILING_ADDRESS[stringlib.stringfind(L.MAILING_ADDRESS,'C/O',1)+4..stringlib.stringfind(L.MAILING_ADDRESS,',',4)-1],left,right),
							   if(stringlib.stringfind(L.MAILING_ADDRESS,'C/O',1)!=0 AND stringlib.stringfind(L.MAILING_ADDRESS,',',5)!=0,
								trim(L.MAILING_ADDRESS[stringlib.stringfind(L.MAILING_ADDRESS,'C/O',1)+4..stringlib.stringfind(L.MAILING_ADDRESS,',',3)-1],left,right),
							   if(stringlib.stringfind(L.MAILING_ADDRESS,'C/O',1)!=0 AND stringlib.stringfind(L.MAILING_ADDRESS,',',4)!=0,
								trim(L.MAILING_ADDRESS[stringlib.stringfind(L.MAILING_ADDRESS,'C/O',1)+4..stringlib.stringfind(L.MAILING_ADDRESS,',',2)-1],left,right),
							   if(stringlib.stringfind(L.MAILING_ADDRESS,'C/O',1)!=0 AND stringlib.stringfind(L.MAILING_ADDRESS,',',3)!=0,
							    trim(L.MAILING_ADDRESS[stringlib.stringfind(L.MAILING_ADDRESS,'C/O',1)+4..stringlib.stringfind(L.MAILING_ADDRESS,',',1)-1],left,right),
							   if(stringlib.stringfind(L.MAILING_ADDRESS,'C/O',1)!=0 AND stringlib.stringfind(L.MAILING_ADDRESS,',',2)!=0,
							    trim(L.MAILING_ADDRESS[stringlib.stringfind(L.MAILING_ADDRESS,'C/O',1)+4..stringlib.stringfind(L.MAILING_ADDRESS,',',1)-1],left,right),
							   '')))));
  self.mailing_full_street_address := LN_Functions.Function_FullStreetAddress(L.MAILING_ADDRESS);
  /*
  self.mailing_full_street_address := if(stringlib.stringfind(L.MAILING_ADDRESS,',',6)!=0,
                                      trim(L.MAILING_ADDRESS[stringlib.stringfind(L.MAILING_ADDRESS,',',4)+2..stringlib.stringfind(L.MAILING_ADDRESS,',',5)-1],left,right),
								       if(stringlib.stringfind(L.MAILING_ADDRESS,',',5)!=0,
								       trim(L.MAILING_ADDRESS[stringlib.stringfind(L.MAILING_ADDRESS,',',3)+2..stringlib.stringfind(L.MAILING_ADDRESS,',',4)-1],left,right),
								        if(stringlib.stringfind(L.MAILING_ADDRESS,',',4)!=0,
								        trim(L.MAILING_ADDRESS[stringlib.stringfind(L.MAILING_ADDRESS,',',2)+2..stringlib.stringfind(L.MAILING_ADDRESS,',',3)-1],left,right),
								         if(stringlib.stringfind(L.MAILING_ADDRESS,',',3)!=0,
									     trim(L.MAILING_ADDRESS[stringlib.stringfind(L.MAILING_ADDRESS,',',1)+2..stringlib.stringfind(L.MAILING_ADDRESS,',',2)-1],left,right),
									      if(stringlib.stringfind(L.MAILING_ADDRESS,',',2)!=0,
									      trim(L.MAILING_ADDRESS[1..stringlib.stringfind(L.MAILING_ADDRESS,',',1)-1],left,right),
									  '')))));
  */
  self.mailing_city_state_zip := LN_Functions.Function_CityStateZip(L.MAILING_ADDRESS);
  /*
  self.mailing_city_state_zip := if(stringlib.stringfind(L.MAILING_ADDRESS,',',6)!=0,
                                 trim(L.MAILING_ADDRESS[stringlib.stringfind(L.MAILING_ADDRESS,',',5)+2..stringlib.stringfind(L.MAILING_ADDRESS,',',5)+52],left,right),
								  if(stringlib.stringfind(L.MAILING_ADDRESS,',',5)!=0,
								  trim(L.MAILING_ADDRESS[stringlib.stringfind(L.MAILING_ADDRESS,',',4)+2..stringlib.stringfind(L.MAILING_ADDRESS,',',4)+52],left,right),
								   if(stringlib.stringfind(L.MAILING_ADDRESS,',',4)!=0,
								   trim(L.MAILING_ADDRESS[stringlib.stringfind(L.MAILING_ADDRESS,',',3)+2..stringlib.stringfind(L.MAILING_ADDRESS,',',3)+52],left,right),
								    if(stringlib.stringfind(L.MAILING_ADDRESS,',',3)!=0,
									trim(L.MAILING_ADDRESS[stringlib.stringfind(L.MAILING_ADDRESS,',',2)+2..stringlib.stringfind(L.MAILING_ADDRESS,',',2)+52],left,right),
									 if(stringlib.stringfind(L.MAILING_ADDRESS,',',2)!=0,
									 trim(L.MAILING_ADDRESS[stringlib.stringfind(L.MAILING_ADDRESS,',',1)+2..stringlib.stringfind(L.MAILING_ADDRESS,',',1)+52],left,right),
									  if(stringlib.stringfind(L.MAILING_ADDRESS,',',1)!=0,
									  trim(L.MAILING_ADDRESS,left,right),
								 ''))))));
  */								 
  self.visf_prop_address := if(trim(L.PROP_ADDRESS_1,left,right)!='',
                             trim(L.PROP_ADDRESS_1,left,right),
                            if(trim(L.PROP_ADDRESS_2,left,right)!='',
							 trim(L.PROP_ADDRESS_2,left,right),
							''));
  self.property_full_street_address := LN_Functions.Function_Property_FullStreetAddress(L.PROP_ADDRESS_1, L.PROP_ADDRESS_2);
  /*
  self.property_full_Street_address := if(trim(L.PROP_ADDRESS_1,left,right)!='',
                                          if(stringlib.stringfind(L.PROP_ADDRESS_1,',',3)!=0,
									        trim(L.PROP_ADDRESS_1[1..stringlib.stringfind(L.PROP_ADDRESS_1,',',2)-1],left,right),
										  if(stringlib.stringfind(L.PROP_ADDRESS_1,',',2)!=0,
										    trim(L.PROP_ADDRESS_1[1..stringlib.stringfind(L.PROP_ADDRESS_1,',',1)-1],left,right),
										  if(stringlib.stringfind(L.PROP_ADDRESS_1,',',1)!=0,
										    '',L.PROP_ADDRESS_1))),
									   if(trim(L.PROP_ADDRESS_2,left,right)!='',
									      if(stringlib.stringfind(L.PROP_ADDRESS_2,',',3)!=0,
									        trim(L.PROP_ADDRESS_2[1..stringlib.stringfind(L.PROP_ADDRESS_2,',',2)-1],left,right),
										  if(stringlib.stringfind(L.PROP_ADDRESS_2,',',2)!=0,
										    trim(L.PROP_ADDRESS_2[1..stringlib.stringfind(L.PROP_ADDRESS_2,',',1)-1],left,right),
										  if(stringlib.stringfind(L.PROP_ADDRESS_2,',',1)!=0,
										    '',L.PROP_ADDRESS_2))),										
											''));
  */
  self.property_city_state_zip := LN_Functions.Function_Property_CityStateZip(L.PROP_ADDRESS_1, L.PROP_ADDRESS_2);
  /*
  self.property_city_state_zip := if(trim(L.PROP_ADDRESS_1,left,right)!='',
                                     if(stringlib.stringfind(L.PROP_ADDRESS_1,',',3)!=0,
									    trim(L.PROP_ADDRESS_1[stringlib.stringfind(L.PROP_ADDRESS_1,',',2)+1..stringlib.stringfind(L.PROP_ADDRESS_1,',',2)+51],left,right),
									 if(stringlib.stringfind(L.PROP_ADDRESS_1,',',2)!=0,
									    trim(L.PROP_ADDRESS_1[stringlib.stringfind(L.PROP_ADDRESS_1,',',1)+1..stringlib.stringfind(L.PROP_ADDRESS_1,',',1)+51],left,right),
									 if(stringlib.stringfind(L.PROP_ADDRESS_1,',',1)!=0,
									    trim(L.PROP_ADDRESS_1,left,right),''))),
								  if(trim(L.PROP_ADDRESS_2,left,right)!='',
								     if(stringlib.stringfind(L.PROP_ADDRESS_2,',',3)!=0,
									    trim(L.PROP_ADDRESS_2[stringlib.stringfind(L.PROP_ADDRESS_2,',',2)+1..stringlib.stringfind(L.PROP_ADDRESS_2,',',2)+51],left,right),
									 if(stringlib.stringfind(L.PROP_ADDRESS_2,',',2)!=0,
									    trim(L.PROP_ADDRESS_2[stringlib.stringfind(L.PROP_ADDRESS_2,',',1)+1..stringlib.stringfind(L.PROP_ADDRESS_2,',',1)+51],left,right),
									 if(stringlib.stringfind(L.PROP_ADDRESS_2,',',1)!=0,
									    trim(L.PROP_ADDRESS_2,left,right),''))),
								  ''));
  */								  
  //self.visf_brief_legal                 := L.BRIEF_LEGAL;
  self.legal_lot_code                   := stringlib.stringfilterout(LN_Functions.Function_Parse_LotCode(L.BRIEF_LEGAL),';');
  self.legal_lot_number                 := stringlib.stringfilterout(LN_Functions.Function_Parse_LotNumber(L.BRIEF_LEGAL),';');
  self.legal_block                      := stringlib.stringfilterout(LN_Functions.Function_Parse_Block(L.BRIEF_LEGAL),';');
  self.legal_section                    := stringlib.stringfilterout(LN_Functions.Function_Parse_Section(L.BRIEF_LEGAL),';');
  self.legal_district                   := stringlib.stringfilterout(LN_Functions.Function_Parse_District(L.BRIEF_LEGAL),';');
  self.legal_land_lot                   := stringlib.stringfilterout(LN_Functions.Function_Parse_LandLot(L.BRIEF_LEGAL),';');
  self.legal_unit                       := stringlib.stringfilterout(LN_Functions.Function_Parse_Unit(L.BRIEF_LEGAL),';');
  self.legal_city_municipality_township := stringlib.stringfilterout(LN_Functions.Function_Parse_City(L.BRIEF_LEGAL),';');
  self.legal_subdivision_name           := stringlib.stringfilterout(LN_Functions.Function_Parse_Subdivision(L.BRIEF_LEGAL),';');		
  self.legal_phase_number               := stringlib.stringfilterout(LN_Functions.Function_Parse_PhaseNumber(L.BRIEF_LEGAL),';');	
  self.legal_tract_number               := stringlib.stringfilterout(LN_Functions.Function_Parse_TractNumber(L.BRIEF_LEGAL),';');
  self.legal_sec_twn_rng_mer            := stringlib.stringfilterout(LN_Functions.Function_Parse_SecTwnRngMer(L.BRIEF_LEGAL),';');
  self.legal_assessor_map_ref           := stringlib.stringfilterout(LN_Functions.Function_Parse_RecorderMapReference(L.BRIEF_LEGAL),';');		
  self.census_tract                     := stringlib.stringfilterout(fCensus(L.BRIEF_LEGAL),';');		
  self.record_type_code := if(stringlib.stringfind(L.BRIEF_LEGAL,'OWNERSHIP RECORD TYPE:',1)!=0,
                                        if(stringlib.stringfind(L.BRIEF_LEGAL,'Brief Description:',1)!=0,
							            map(stringlib.stringfind(L.BRIEF_LEGAL[stringlib.stringfind(L.BRIEF_LEGAL,'OWNERSHIP RECORD TYPE:',1)+22..stringlib.stringfind(L.BRIEF_LEGAL,'Brief Description:',1)-1],'EASEMENT',1)!=0                                                            => 'EM',
                                            stringlib.stringfind(L.BRIEF_LEGAL[stringlib.stringfind(L.BRIEF_LEGAL,'OWNERSHIP RECORD TYPE:',1)+22..stringlib.stringfind(L.BRIEF_LEGAL,'Brief Description:',1)-1],'LEASEHOLD',1)!=0                                                           => 'LH',
											stringlib.stringfind(L.BRIEF_LEGAL[stringlib.stringfind(L.BRIEF_LEGAL,'OWNERSHIP RECORD TYPE:',1)+22..stringlib.stringfind(L.BRIEF_LEGAL,'Brief Description:',1)-1],'MULTIPLE ADDRESSES',1)!=0                                                  => 'MA',
											stringlib.stringfind(L.BRIEF_LEGAL[stringlib.stringfind(L.BRIEF_LEGAL,'OWNERSHIP RECORD TYPE:',1)+22..stringlib.stringfind(L.BRIEF_LEGAL,'Brief Description:',1)-1],'MOBILE HOME',1)!=0                                                         => 'MH',
											stringlib.stringfind(L.BRIEF_LEGAL[stringlib.stringfind(L.BRIEF_LEGAL,'OWNERSHIP RECORD TYPE:',1)+22..stringlib.stringfind(L.BRIEF_LEGAL,'Brief Description:',1)-1],'MINERAL RIGHTS',1)!=0                                                      => 'MI',
											stringlib.stringfind(L.BRIEF_LEGAL[stringlib.stringfind(L.BRIEF_LEGAL,'OWNERSHIP RECORD TYPE:',1)+22..stringlib.stringfind(L.BRIEF_LEGAL,'Brief Description:',1)-1],'MULTIPLE OWNERS',1)!=0                                                     => 'MO',
											stringlib.stringfind(L.BRIEF_LEGAL[stringlib.stringfind(L.BRIEF_LEGAL,'OWNERSHIP RECORD TYPE:',1)+22..stringlib.stringfind(L.BRIEF_LEGAL,'Brief Description:',1)-1],'MULTIPLE RECORDS EXIST FOR THIS PARCEL',1)!=0                              => 'MP',
											stringlib.stringfind(L.BRIEF_LEGAL[stringlib.stringfind(L.BRIEF_LEGAL,'OWNERSHIP RECORD TYPE:',1)+22..stringlib.stringfind(L.BRIEF_LEGAL,'Brief Description:',1)-1],'THE VALUES INDICATED IN THIS RECORD ARE THE SUM OF MULTIPLE PARCELS',1)!=0 => 'MR',
											stringlib.stringfind(L.BRIEF_LEGAL[stringlib.stringfind(L.BRIEF_LEGAL,'OWNERSHIP RECORD TYPE:',1)+22..stringlib.stringfind(L.BRIEF_LEGAL,'Brief Description:',1)-1],'PERSONAL PROPERTY',1)!=0                                                   => 'PP',
											stringlib.stringfind(L.BRIEF_LEGAL[stringlib.stringfind(L.BRIEF_LEGAL,'OWNERSHIP RECORD TYPE:',1)+22..stringlib.stringfind(L.BRIEF_LEGAL,'Brief Description:',1)-1],'SPLIT PARCEL',1)!=0                                                        => 'SP',
											stringlib.stringfind(L.BRIEF_LEGAL[stringlib.stringfind(L.BRIEF_LEGAL,'OWNERSHIP RECORD TYPE:',1)+22..stringlib.stringfind(L.BRIEF_LEGAL,'Brief Description:',1)-1],'SURFACE RIGHTS',1)!=0                                                      => 'SR',
											stringlib.stringfind(L.BRIEF_LEGAL[stringlib.stringfind(L.BRIEF_LEGAL,'OWNERSHIP RECORD TYPE:',1)+22..stringlib.stringfind(L.BRIEF_LEGAL,'Brief Description:',1)-1],'TIMBER RIGHTS',1)!=0                                                       => 'TR',
											''),
							map(stringlib.stringfind(L.BRIEF_LEGAL[stringlib.stringfind(L.BRIEF_LEGAL,'OWNERSHIP RECORD TYPE:',1)+22..stringlib.stringfind(L.BRIEF_LEGAL,'OWNERSHIP RECORD TYPE:',1)+122],'EASEMENT',1)!=0                                                            => 'EM',
							    stringlib.stringfind(L.BRIEF_LEGAL[stringlib.stringfind(L.BRIEF_LEGAL,'OWNERSHIP RECORD TYPE:',1)+22..stringlib.stringfind(L.BRIEF_LEGAL,'OWNERSHIP RECORD TYPE:',1)+122],'LEASEHOLD',1)!=0                                                           => 'LH',
								stringlib.stringfind(L.BRIEF_LEGAL[stringlib.stringfind(L.BRIEF_LEGAL,'OWNERSHIP RECORD TYPE:',1)+22..stringlib.stringfind(L.BRIEF_LEGAL,'OWNERSHIP RECORD TYPE:',1)+122],'MULTIPLE ADDRESSES',1)!=0                                                  => 'MA',
								stringlib.stringfind(L.BRIEF_LEGAL[stringlib.stringfind(L.BRIEF_LEGAL,'OWNERSHIP RECORD TYPE:',1)+22..stringlib.stringfind(L.BRIEF_LEGAL,'OWNERSHIP RECORD TYPE:',1)+122],'MOBILE HOME',1)!=0                                                         => 'MH',
								stringlib.stringfind(L.BRIEF_LEGAL[stringlib.stringfind(L.BRIEF_LEGAL,'OWNERSHIP RECORD TYPE:',1)+22..stringlib.stringfind(L.BRIEF_LEGAL,'OWNERSHIP RECORD TYPE:',1)+122],'MINERAL RIGHTS',1)!=0                                                      => 'MI',
								stringlib.stringfind(L.BRIEF_LEGAL[stringlib.stringfind(L.BRIEF_LEGAL,'OWNERSHIP RECORD TYPE:',1)+22..stringlib.stringfind(L.BRIEF_LEGAL,'OWNERSHIP RECORD TYPE:',1)+122],'MULTIPLE OWNERS',1)!=0                                                     => 'MO',
								stringlib.stringfind(L.BRIEF_LEGAL[stringlib.stringfind(L.BRIEF_LEGAL,'OWNERSHIP RECORD TYPE:',1)+22..stringlib.stringfind(L.BRIEF_LEGAL,'OWNERSHIP RECORD TYPE:',1)+122],'MULTIPLE RECORDS EXIST FOR THIS PARCEL',1)!=0                              => 'MP',
								stringlib.stringfind(L.BRIEF_LEGAL[stringlib.stringfind(L.BRIEF_LEGAL,'OWNERSHIP RECORD TYPE:',1)+22..stringlib.stringfind(L.BRIEF_LEGAL,'OWNERSHIP RECORD TYPE:',1)+122],'THE VALUES INDICATED IN THIS RECORD ARE THE SUM OF MULTIPLE PARCELS',1)!=0 => 'MR',
								stringlib.stringfind(L.BRIEF_LEGAL[stringlib.stringfind(L.BRIEF_LEGAL,'OWNERSHIP RECORD TYPE:',1)+22..stringlib.stringfind(L.BRIEF_LEGAL,'OWNERSHIP RECORD TYPE:',1)+122],'PERSONAL PROPERTY',1)!=0                                                   => 'PP',
								stringlib.stringfind(L.BRIEF_LEGAL[stringlib.stringfind(L.BRIEF_LEGAL,'OWNERSHIP RECORD TYPE:',1)+22..stringlib.stringfind(L.BRIEF_LEGAL,'OWNERSHIP RECORD TYPE:',1)+122],'SPLIT PARCEL',1)!=0                                                        => 'SP',
								stringlib.stringfind(L.BRIEF_LEGAL[stringlib.stringfind(L.BRIEF_LEGAL,'OWNERSHIP RECORD TYPE:',1)+22..stringlib.stringfind(L.BRIEF_LEGAL,'OWNERSHIP RECORD TYPE:',1)+122],'SURFACE RIGHTS',1)!=0                                                      => 'SR',
								stringlib.stringfind(L.BRIEF_LEGAL[stringlib.stringfind(L.BRIEF_LEGAL,'OWNERSHIP RECORD TYPE:',1)+22..stringlib.stringfind(L.BRIEF_LEGAL,'OWNERSHIP RECORD TYPE:',1)+122],'TIMBER RIGHTS',1)!=0                                                       => 'TR',					
								'')),
						   '');		
  self.legal_brief_description := if(stringlib.stringfind(L.BRIEF_LEGAL,'Brief Description:',1)!=0,
                                   trim(L.BRIEF_LEGAL[stringlib.stringfind(L.BRIEF_LEGAL,'Brief Description:',1)+18..stringlib.stringfind(L.BRIEF_LEGAL,'Brief Description:',1)+143],left,right),
								  '');
								  
  //self.visf_land_use := L.LAND_USE;
  self.county_land_use_description := if(stringlib.stringfind(L.LAND_USE,';',1)!=0,
                                       trim(L.LAND_USE[1..stringlib.stringfind(L.LAND_USE,';',1)-1],left,right),
									  trim(L.LAND_USE));
  self.standardized_land_use_code := map(
			trim(L.LAND_USE_LN,left,right)='MISCELLANEOUS (GENERAL)'                     =>	'0010',
			trim(L.LAND_USE_LN,left,right)='PIPELINE OR RIGHT-OF-WAY'                    =>	'0011',
			trim(L.LAND_USE_LN,left,right)='RAIL (RIGHT OF WAY & TRACK)'                 =>	'0012',
			trim(L.LAND_USE_LN,left,right)='ROAD (RIGHT OF WAY)'                         =>	'0013',
			trim(L.LAND_USE_LN,left,right)='UTILITIES (RIGHT-OF-WAY ONLY)'               =>	'0014',
			trim(L.LAND_USE_LN,left,right)='MINERAL RIGHTS'                              =>	'0015',
			trim(L.LAND_USE_LN,left,right)='SURFACE RIGHTS (GRAZING; TIMBER)'            =>	'0016',
			trim(L.LAND_USE_LN,left,right)='LEASEHOLD RIGHTS'                            =>	'0017',
			trim(L.LAND_USE_LN,left,right)='POSSESSORY INTEREST'                         =>	'0018',
			trim(L.LAND_USE_LN,left,right)='PETROLEUM & GAS WELLS'                       =>	'0019',
			trim(L.LAND_USE_LN,left,right)='WATER RIGHTS'                                =>	'0020',
			trim(L.LAND_USE_LN,left,right)='RIGHT-OF-WAY (NOT RAIL, ROAD OR UTILITY)'    =>	'0021',
			trim(L.LAND_USE_LN,left,right)='EASEMENT'                                    =>	'0022',
			trim(L.LAND_USE_LN,left,right)='HOMESTEAD'                                   =>	'0023',
			trim(L.LAND_USE_LN,left,right)='COMMON AREA'                                 =>	'0024',
			trim(L.LAND_USE_LN,left,right)='ROYALTY INTEREST'                            =>	'0025',
			trim(L.LAND_USE_LN,left,right)='WORKING INTEREST'                            =>	'0026',
			trim(L.LAND_USE_LN,left,right)='IMPROVED - USE NOT SPECIFIED'                =>	'0027',
			trim(L.LAND_USE_LN,left,right)='RESIDENTIAL (GENERAL) (SINGLE FAMILY)'       =>	'1000',
			trim(L.LAND_USE_LN,left,right)='SINGLE FAMILY RESIDENTIAL'                   =>	'1001',
			trim(L.LAND_USE_LN,left,right)='TOWNHOUSE'                                   =>	'1002',
			trim(L.LAND_USE_LN,left,right)='CLUSTER HOME'                                =>	'1003',
			trim(L.LAND_USE_LN,left,right)='CONDOMINIUM'                                 =>	'1004',
			trim(L.LAND_USE_LN,left,right)='COOPERATIVE'                                 =>	'1005',
			trim(L.LAND_USE_LN,left,right)='MOBILE HOME'                                 =>	'1006',
			trim(L.LAND_USE_LN,left,right)='ROW HOUSE'                                   =>	'1007',
			trim(L.LAND_USE_LN,left,right)='RURAL RESIDENCE (AGRICULTURAL)'              =>	'1008',
			trim(L.LAND_USE_LN,left,right)='PLANNED UNIT DEVELOPMENT (PUD)'              =>	'1009',
			trim(L.LAND_USE_LN,left,right)='RES COMMON AREA (CONDO/PUD/ETC.)'            =>	'1010',
			trim(L.LAND_USE_LN,left,right)='RESIDENTIAL TIMESHARE'                       =>	'1011',
			trim(L.LAND_USE_LN,left,right)='CABIN'                                       =>	'1012',
			trim(L.LAND_USE_LN,left,right)='BUNGALOW'                                    =>	'1013',
			trim(L.LAND_USE_LN,left,right)='ZERO LOT LINE'                               =>	'1014',
			trim(L.LAND_USE_LN,left,right)='MISC RESIDENTIAL IMPROVEMENT'                =>	'1015',
			trim(L.LAND_USE_LN,left,right)='MANUFACTURED, MODULAR, PRE-FABRICATED HOMES' =>	'1016',
			trim(L.LAND_USE_LN,left,right)='RESIDENTIAL INCOME (GENERAL) (MULTI-FAMILY)' =>	'1100',
			trim(L.LAND_USE_LN,left,right)='DUPLEX (2 UNITS, ANY COMBINATION)'           =>	'1101',
			trim(L.LAND_USE_LN,left,right)='TRIPLEX (3 UNITS, ANY COMBINATION)'          =>	'1102',
			trim(L.LAND_USE_LN,left,right)='QUADRUPLEX (4 UNITS, ANY COMBINATION)'       =>	'1103',
			trim(L.LAND_USE_LN,left,right)='APARTMENT HOUSE (5+ UNITS)'                  =>	'1104',
			trim(L.LAND_USE_LN,left,right)='APARTMENT HOUSE (100+ UNITS)'                =>	'1105',
			trim(L.LAND_USE_LN,left,right)='GARDEN APARTMENTS (5+ UNITS)'                =>	'1106',
			trim(L.LAND_USE_LN,left,right)='HIGHRISE APARTMENTS'                         =>	'1107',
			trim(L.LAND_USE_LN,left,right)='BOARDING HOUSE, ROOMING HOUSE, APT HOTEL, TRANSIENT LODGINGS' =>	'1108',
			trim(L.LAND_USE_LN,left,right)='MOBILE HOME PARK'                            =>	'1109',
			trim(L.LAND_USE_LN,left,right)='MULTI-FAMILY DWELLINGS (2+ UNITS)'           =>	'1110',
			trim(L.LAND_USE_LN,left,right)='FRATERNITY/SORORITY HOUSE'                   =>	'1111',
			trim(L.LAND_USE_LN,left,right)='APARTMENTS (GENERIC)'                        =>	'1112',
			trim(L.LAND_USE_LN,left,right)='GROUP QUARTERS'                              =>	'1113',
			trim(L.LAND_USE_LN,left,right)='RESIDENTIAL CONDOMINIUM DEVELOPMENT'         =>	'1114',
			trim(L.LAND_USE_LN,left,right)='COMMERCIAL (GENERAL)'                        =>	'2000',
			trim(L.LAND_USE_LN,left,right)='RETAIL STORES (PERSONAL SERVICES, PHOTOGRAPHY, TRAVEL)' =>	'2001',
			trim(L.LAND_USE_LN,left,right)='STORE (MULTI-STORY)'                         =>	'2002',
			trim(L.LAND_USE_LN,left,right)='STORE/OFFICE COMBO'                          =>	'2003',
			trim(L.LAND_USE_LN,left,right)='DEPARTMENT STORE (APPAREL, HOUSEHOLD GOODS, FURNITURE)' =>	'2004',
			trim(L.LAND_USE_LN,left,right)='DEPARTMENT STORE (MULTI-STORY)'              =>	'2005',
			trim(L.LAND_USE_LN,left,right)='GROCERY (SUPERMARKET)'                       =>	'2006',
			trim(L.LAND_USE_LN,left,right)='SHOPPING CENTER (REGIONAL, MALL, W/ANCHOR)'  =>	'2007',
			trim(L.LAND_USE_LN,left,right)='SHOPPING CENTER (COMMUNITY - OPEN PLAZA)'    =>	'2008',
			trim(L.LAND_USE_LN,left,right)='SHOPPING CENTER (NEIGHBORHOOD - STRIP)'      =>	'2009',
			trim(L.LAND_USE_LN,left,right)='SHOPPING CENTER COMMON AREA (PARKING, ETC.)' =>	'2010',
			trim(L.LAND_USE_LN,left,right)='VETERINARY/ANIMAL HOSPITAL'                  =>	'2011',
			trim(L.LAND_USE_LN,left,right)='RESTAURANT'                                  =>	'2012',
			trim(L.LAND_USE_LN,left,right)='FAST FOOD/DRIVE-THRU'                        =>	'2013',
			trim(L.LAND_USE_LN,left,right)='FOOD PREPARATION (TAKE OUT)'                 =>	'2014',
			trim(L.LAND_USE_LN,left,right)='BAKERY'                                      =>	'2015',
			trim(L.LAND_USE_LN,left,right)='BAR / TAVERN'                                =>	'2016',
			trim(L.LAND_USE_LN,left,right)='LIQUOR STORE'                                =>	'2017',
			trim(L.LAND_USE_LN,left,right)='CONVENIENCE STORE (7-11)'                    =>	'2018',
			trim(L.LAND_USE_LN,left,right)='CONVENIENCE STORE (WITH FUEL PUMP)'          =>	'2019',
			trim(L.LAND_USE_LN,left,right)='SERVICE STATION (FULL SERVICE)'              =>	'2020',
			trim(L.LAND_USE_LN,left,right)='SERVICE STATION WITH CONVENIENCE STORE/FOOD MART' =>	'2021',
			trim(L.LAND_USE_LN,left,right)='TRUCK STOP'                                  =>	'2022',
			trim(L.LAND_USE_LN,left,right)='VEHICLE SALES/RENTAL (AUTO; TRUCK; RV; BOAT; ETC.)' =>	'2023',
			trim(L.LAND_USE_LN,left,right)='GARAGE/AUTO REPAIR & RELATED'                =>	'2024',
			trim(L.LAND_USE_LN,left,right)='CAR WASH'                                    =>	'2025',
			trim(L.LAND_USE_LN,left,right)='DRY CLEANER (LAUNDRY)'                       =>	'2026',
			trim(L.LAND_USE_LN,left,right)='SERVICE SHOP (TV; RADIO; ELECTRIC; PLUMBING)' =>	'2027',
			trim(L.LAND_USE_LN,left,right)='NURSERY/GREENHOUSE (RETAIL/WHOLESALE)'       =>	'2028',
			trim(L.LAND_USE_LN,left,right)='WHOLESALE OUTLET, DISCOUNT STORE (FRANCHISE)' =>	'2029',
			trim(L.LAND_USE_LN,left,right)='PRINTER (RETAIL)'                            =>	'2030',
			trim(L.LAND_USE_LN,left,right)='STORAGE (MINI-WAREHOUSE)'                    =>	'2031',
			trim(L.LAND_USE_LN,left,right)='PRE-SCHOOL/DAY CARE (PRIVATE)'               =>	'2032',
			trim(L.LAND_USE_LN,left,right)='MOTEL'                                       =>	'2033',
			trim(L.LAND_USE_LN,left,right)='HOTEL'                                       =>	'2034',
			trim(L.LAND_USE_LN,left,right)='PARKING GARAGE'                              =>	'2035',
			trim(L.LAND_USE_LN,left,right)='PARKING LOT'                                 =>	'2036',
			trim(L.LAND_USE_LN,left,right)='FUNERAL HOME (MORTUARY)'                     =>	'2037',
			trim(L.LAND_USE_LN,left,right)='CASINO'                                      =>	'2038',
			trim(L.LAND_USE_LN,left,right)='HOTEL-RESORT'                                =>	'2039',
			trim(L.LAND_USE_LN,left,right)='HOTEL/MOTEL'                                 =>	'2040',
			trim(L.LAND_USE_LN,left,right)='GAS STATION'                                 =>	'2041',
			trim(L.LAND_USE_LN,left,right)='STORES & APARTMENTS'                         =>	'2042',
			trim(L.LAND_USE_LN,left,right)='COMMERCIAL BUILDING/WAREHOUSE, MAIL ORDER, SHOW ROOM(NON-AUTO)' =>	'2043',
			trim(L.LAND_USE_LN,left,right)='COMM/RES MIXED USE'                          =>	'2044',
			trim(L.LAND_USE_LN,left,right)='APPLIANCE STORE'                             =>	'2045',
			trim(L.LAND_USE_LN,left,right)='KENNEL'                                      =>	'2046',
			trim(L.LAND_USE_LN,left,right)='LAUNDROMAT (SELF-SERVICE)'                   =>	'2047',
			trim(L.LAND_USE_LN,left,right)='NIGHTCLUB (COCKTAIL LOUNGE)'                 =>	'2048',
			trim(L.LAND_USE_LN,left,right)='FARM SUPPLY & EQUIPMENT'                     =>	'2050',
			trim(L.LAND_USE_LN,left,right)='HOME IMPROVEMENT, GARDEN CENTER'             =>	'2051',
			trim(L.LAND_USE_LN,left,right)='COMMERCIAL CONDO (NOT OFC)'                  =>	'2052',
			trim(L.LAND_USE_LN,left,right)='DRUG STORE/PHARMACY'                         =>	'2053',
			trim(L.LAND_USE_LN,left,right)='BED & BREAKFAST'                             =>	'2054',
			trim(L.LAND_USE_LN,left,right)='COMMERCIAL OFFICE (GENERAL)'                 =>	'3000',
			trim(L.LAND_USE_LN,left,right)='PROFESSIONAL BLDG (LEGAL, INSURANCE, REAL ESTATE)' =>	'3001',
			trim(L.LAND_USE_LN,left,right)='PROFESSIONAL BLDG (MULTI-STORY)'             =>	'3002',
			trim(L.LAND_USE_LN,left,right)='OFFICE BLDG (GENERAL)'                       =>	'3003',
			trim(L.LAND_USE_LN,left,right)='OFFICE BLDG (MULTI-STORY)'                   =>	'3004',
			trim(L.LAND_USE_LN,left,right)='DENTAL BLDG'                                 =>	'3005',
			trim(L.LAND_USE_LN,left,right)='MEDICAL BLDG'                                =>	'3006',
			trim(L.LAND_USE_LN,left,right)='FINANCIAL BLDG (BANK; S&L; MTGE; LOAN; CREDIT)' =>	'3007',
			trim(L.LAND_USE_LN,left,right)='CONDOMINIUM OFFICES'                         =>	'3008',
			trim(L.LAND_USE_LN,left,right)='SKYSCRAPER (HIGHRISE)'                       =>	'3009',
			trim(L.LAND_USE_LN,left,right)='MIXED USE (COMM/IND)'                        =>	'3010',
			trim(L.LAND_USE_LN,left,right)='COMMON AREA (COMMERCIAL, NOT SHOPPING CENTER)' =>	'3011',
			trim(L.LAND_USE_LN,left,right)='MOBILE COMMERCIAL UNITS'                     =>	'3012',
			trim(L.LAND_USE_LN,left,right)='RECREATIONAL/ENTERTAINMENT (GENERAL)'        =>	'4000',
			trim(L.LAND_USE_LN,left,right)='RECREATION CENTER'                           =>	'4001',
			trim(L.LAND_USE_LN,left,right)='PUBLIC SWIMMING POOL'                        =>	'4002',
			trim(L.LAND_USE_LN,left,right)='BOAT SLIPS, MARINA, YACHT CLUB (RECREATION/PLEASURE), BOAT LANDING' =>	'4003',
			trim(L.LAND_USE_LN,left,right)='BOWLING ALLEY'                               =>	'4004',
			trim(L.LAND_USE_LN,left,right)='ARCADES'                                     =>	'4005',
			trim(L.LAND_USE_LN,left,right)='SKATING RINK (ICE; ROLLER)'                  =>	'4006',
			trim(L.LAND_USE_LN,left,right)='CLUBS, LODGES, PROFESSIONAL ASSOCIATIONS'    =>	'4007',
			trim(L.LAND_USE_LN,left,right)='MUSEUMS/LIBRARY'                             =>	'4008',
			trim(L.LAND_USE_LN,left,right)='COUNTRY CLUB (GOLF; TENNIS)'                 =>	'4009',
			trim(L.LAND_USE_LN,left,right)='STADIUMS'                                    =>	'4010',
			trim(L.LAND_USE_LN,left,right)='ARENAS/CONVENTION CENTER'                    =>	'4011',
			trim(L.LAND_USE_LN,left,right)='AUDITORIUMS'                                 =>	'4012',
			trim(L.LAND_USE_LN,left,right)='DRIVING RANGE'                               =>	'4013',
			trim(L.LAND_USE_LN,left,right)='RACE TRACK (AUTO; DOG; HORSE)'               =>	'4014',
			trim(L.LAND_USE_LN,left,right)='GYM (HEALTH SPA)'                            =>	'4015',
			trim(L.LAND_USE_LN,left,right)='DANCE HALL'                                  =>	'4016',
			trim(L.LAND_USE_LN,left,right)='RIDING STABLE/TRAILS'                        =>	'4017',
			trim(L.LAND_USE_LN,left,right)='RV PARK OR CAMPGROUND'                       =>	'4018',
			trim(L.LAND_USE_LN,left,right)='FAIRGROUNDS'                                 =>	'4019',
			trim(L.LAND_USE_LN,left,right)='THEATER (MOVIE AND LEGITIMATE)'              =>	'4020',
			trim(L.LAND_USE_LN,left,right)='THEATER (DRIVE-IN)'                          =>	'4021',
			trim(L.LAND_USE_LN,left,right)='AMUSEMENT PARK'                              =>	'4022',
			trim(L.LAND_USE_LN,left,right)='PIERS'                                       =>	'4023',
			trim(L.LAND_USE_LN,left,right)='FISH CAMPS, GAME CLUB, TARGET SHOOTING'      =>	'4024',
			trim(L.LAND_USE_LN,left,right)='OUTDOOR RECREATION: BEACH, MOUNTAIN, DESERT' =>	'4025',
			trim(L.LAND_USE_LN,left,right)='BILLIARD PARLOR'                             =>	'4026',
			trim(L.LAND_USE_LN,left,right)='PARK, PLAYGROUND, PICNIC AREA'               =>	'4027',
			trim(L.LAND_USE_LN,left,right)='GOLF COURSE'                                 =>	'4028',
			trim(L.LAND_USE_LN,left,right)='TENNIS/RACQUET COURTS'                       =>	'4029',
			trim(L.LAND_USE_LN,left,right)='ZOO'                                         =>	'4030',
			trim(L.LAND_USE_LN,left,right)='MINIATURE GOLF, GO-CARTS, WATER SLIDES'      =>	'4031',
			trim(L.LAND_USE_LN,left,right)='INDUSTRIAL (GENERAL)'                        =>	'5000',
			trim(L.LAND_USE_LN,left,right)='MANUFACTURING (LIGHT)'                       =>	'5001',
			trim(L.LAND_USE_LN,left,right)='LIGHT INDUSTRIAL (10% IMPROVED OFFICE SPACE, MACHINE SHOP)' =>	'5002',
			trim(L.LAND_USE_LN,left,right)='WAREHOUSE'                                   =>	'5003',
			trim(L.LAND_USE_LN,left,right)='STORAGE YARD (LIGHT EQUIPMENT/MATERIAL)'     =>	'5004',
			trim(L.LAND_USE_LN,left,right)='PACKING PLANT (FRUIT; VEGETABLE; MEAT; DAIRY)'=>	'5005',
			trim(L.LAND_USE_LN,left,right)='ASSEMBLY (LIGHT)'                            =>	'5006',
			trim(L.LAND_USE_LN,left,right)='FOOD PROCESSING (CANDY; BAKERY; POTATO CHIPS)' =>	'5007',
			trim(L.LAND_USE_LN,left,right)='RECYCLING (METAL; PAPER; GLASS; ETC.)'       =>	'5008',
			trim(L.LAND_USE_LN,left,right)='COMMUNICATION'                               =>	'5009',
			trim(L.LAND_USE_LN,left,right)='INDUSTRIAL CONDO'                            =>	'5010',
			trim(L.LAND_USE_LN,left,right)='R&D FACILITY (LABORATORY, RESEARCH)'         =>	'5011',
			trim(L.LAND_USE_LN,left,right)='INDUSTRIAL PARK'                             =>	'5012',
			trim(L.LAND_USE_LN,left,right)='MULTI-TENANT INDUSTRIAL BLDG'                =>	'5013',
			trim(L.LAND_USE_LN,left,right)='MARINE FACILITY/BOAT REPAIRS (SMALL CRAFT OR SAILBOAT)' =>	'5014',
			trim(L.LAND_USE_LN,left,right)='LUMBER & WOOD PRODUCT MFG (INCLUDING FURNITURE)' =>	'5015',
			trim(L.LAND_USE_LN,left,right)='PAPER PRODUCT MFG & RELATED PRODUCTS'        =>	'5016',
			trim(L.LAND_USE_LN,left,right)='PRINTING & PUBLISHING'                       =>	'5017',
			trim(L.LAND_USE_LN,left,right)='INDUSTRIAL LOFT BUILDING'                    =>	'5018',
			trim(L.LAND_USE_LN,left,right)='CONTRACTING SERVICES'                        =>	'5019',
			trim(L.LAND_USE_LN,left,right)='INDUSTRIAL, COMMON AREA'                     =>	'5020',
			trim(L.LAND_USE_LN,left,right)='HEAVY INDUSTRIAL (GENERAL)'                  =>	'6000',
			trim(L.LAND_USE_LN,left,right)='TRANSPORTATION (ALSO SEE 6500 SERIES)'       =>	'6001',
			trim(L.LAND_USE_LN,left,right)='DISTRIBUTION (INDUSTRIAL SALES)'             =>	'6002',
			trim(L.LAND_USE_LN,left,right)='MINING (OIL; GAS; MINERAL)'                  =>	'6003',
			trim(L.LAND_USE_LN,left,right)='STORAGE YARD (JUNK; AUTO WRECKING; SALVAGE)' =>	'6004',
			trim(L.LAND_USE_LN,left,right)='DISTILLERY, BREWERY, BOTTLING'               =>	'6005',
			trim(L.LAND_USE_LN,left,right)='REFINERY, PETROLEUM PRODUCTS'                =>	'6006',
			trim(L.LAND_USE_LN,left,right)='MILL (FEED; GRAIN; PAPER; LUMBER; TEXTILE)'  =>	'6007',
			trim(L.LAND_USE_LN,left,right)='FACTORY (APPAREL, TEXTILE PRODUCTS)'         =>	'6008',
			trim(L.LAND_USE_LN,left,right)='PROCESSING PLANT (MINERALS; CEMENT; ROCK; GRAVEL)' =>	'6009',
			trim(L.LAND_USE_LN,left,right)='LUMBERYARD, BUILDING MATERIALS'              =>	'6010',
			trim(L.LAND_USE_LN,left,right)='SHIPYARD/STORAGE - BUILT OR REPAIRED (SEAGOING VESSELS)' =>	'6011',
			trim(L.LAND_USE_LN,left,right)='STOCKYARD'                                   =>	'6012',
			trim(L.LAND_USE_LN,left,right)='WASTE DISPOSAL, SEWAGE (PROCESSING, DISPOSAL, STORAGE, TREATMENT)' =>	'6013',
			trim(L.LAND_USE_LN,left,right)='QUARRIES (SAND; GRAVEL; ROCK)'               =>	'6014',
			trim(L.LAND_USE_LN,left,right)='HEAVY MANUFACTURING'                         =>	'6015',
			trim(L.LAND_USE_LN,left,right)='LABOR CAMPS'                                 =>	'6016',
			trim(L.LAND_USE_LN,left,right)='WINERY'                                      =>	'6017',
			trim(L.LAND_USE_LN,left,right)='CHEMICAL'                                    =>	'6018',
			trim(L.LAND_USE_LN,left,right)='INDUSTRIAL PLANT (METAL, RUBBER, PLASTIC)'   =>	'6019',
			trim(L.LAND_USE_LN,left,right)='CANNERY'                                     =>	'6020',
			trim(L.LAND_USE_LN,left,right)='TANKS/BULK STORAGE (GASOLINE, FUEL, ETC.)'   =>	'6021',
			trim(L.LAND_USE_LN,left,right)='GRAIN ELEVATOR'                              =>	'6022',
			trim(L.LAND_USE_LN,left,right)='DUMP SITE'                                   =>	'6023',
			trim(L.LAND_USE_LN,left,right)='COLD STORAGE'                                =>	'6024',
			trim(L.LAND_USE_LN,left,right)='SUGAR REFINERY'                              =>	'6025',
			trim(L.LAND_USE_LN,left,right)='TRANSPORTATION & COMMUNICATIONS, UTILITIES (GENERAL)' =>	'6500',
			trim(L.LAND_USE_LN,left,right)='AIRPORT AND RELATED'                         =>	'6501',
			trim(L.LAND_USE_LN,left,right)='RAILROAD AND RELATED'                        =>	'6502',
			trim(L.LAND_USE_LN,left,right)='STATE HWYS/FREEWAYS'                         =>	'6503',
			trim(L.LAND_USE_LN,left,right)='ROADS/STREETS'                               =>	'6504',
			trim(L.LAND_USE_LN,left,right)='BUS TERMINAL'                                =>	'6505',
			trim(L.LAND_USE_LN,left,right)='TELEPHONE, TELEGRAPH'                        =>	'6506',
			trim(L.LAND_USE_LN,left,right)='RADIO OR TV STATION'                         =>	'6507',
			trim(L.LAND_USE_LN,left,right)='TRUCK TERMINAL (MOTOR FREIGHT)'              =>	'6508',
			trim(L.LAND_USE_LN,left,right)='CABLE TV STATION'                            =>	'6509',
			trim(L.LAND_USE_LN,left,right)='HARBOR & MARINE TRANSPORTATION'              =>	'6510',
			trim(L.LAND_USE_LN,left,right)='MICROWAVE TRANSMISSION'                      =>	'6511',
			trim(L.LAND_USE_LN,left,right)='COMMERICAL AUTO TRANSPORTATION/STORAGE'      =>	'6512',
			trim(L.LAND_USE_LN,left,right)='POLLUTION CONTROL'                           =>	'6513',
			trim(L.LAND_USE_LN,left,right)='AGRICULTURAL/RURAL (GENERAL)'                =>	'7000',
			trim(L.LAND_USE_LN,left,right)='FARM (IRRIGATED OR DRY)'                     =>	'7001',
			trim(L.LAND_USE_LN,left,right)='RANCH'                                       =>	'7002',
			trim(L.LAND_USE_LN,left,right)='RANGE LAND (GRAZING)'                        =>	'7003',
			trim(L.LAND_USE_LN,left,right)='CROP LAND/FIELD CROPS/ROW CROPS (ALL SOIL CLASSES)' =>	'7004',
			trim(L.LAND_USE_LN,left,right)='ORCHARD (FRUIT; NUT)'                        =>	'7005',
			trim(L.LAND_USE_LN,left,right)='VINEYARD'                                    =>	'7006',
			trim(L.LAND_USE_LN,left,right)='POULTRY (CHICKEN; TURKEY; FISH; BEES; RABBITS)' =>	'7007',
			trim(L.LAND_USE_LN,left,right)='DAIRY'                                       =>	'7008',
			trim(L.LAND_USE_LN,left,right)='TIMBERLAND/FOREST/TREES'                     =>	'7009',
			trim(L.LAND_USE_LN,left,right)='WILDLIFE (REFUGE)'                           =>	'7010',
			trim(L.LAND_USE_LN,left,right)='DESERT OR BARREN LAND'                       =>	'7011',
			trim(L.LAND_USE_LN,left,right)='PASTURE/MEADOW'                              =>	'7012',
			trim(L.LAND_USE_LN,left,right)='MISC. STRUCTURES - FARM, RANCH, FIXTURES'    =>	'7013',
			trim(L.LAND_USE_LN,left,right)='GROVE'                                       =>	'7014',
			trim(L.LAND_USE_LN,left,right)='FEEDLOTS'                                    =>	'7015',
			trim(L.LAND_USE_LN,left,right)='LIVESTOCK'                                   =>	'7016',
			trim(L.LAND_USE_LN,left,right)='HORTICULTURE/GROWING HOUSES'                 =>	'7017',
			trim(L.LAND_USE_LN,left,right)='WELL SITE'                                   =>	'7018',
			trim(L.LAND_USE_LN,left,right)='TRUCK CROPS'                                 =>	'7019',
			trim(L.LAND_USE_LN,left,right)='RESERVOIR/WATER SUPPLY'                      =>	'7020',
			trim(L.LAND_USE_LN,left,right)='IRRIGATION, FLOOD CONTROL'                   =>	'7021',
			trim(L.LAND_USE_LN,left,right)='NATURAL RESOURCES'                           =>	'7022',
			trim(L.LAND_USE_LN,left,right)='RURAL IMPROVED (NON-RESIDENTIAL)'            =>	'7023',
			trim(L.LAND_USE_LN,left,right)='VACANT (GENERAL)'                            =>	'8000',
			trim(L.LAND_USE_LN,left,right)='RESIDENTIAL VACANT'                          =>	'8001',
			trim(L.LAND_USE_LN,left,right)='COMMERCIAL VACANT'                           =>	'8002',
			trim(L.LAND_USE_LN,left,right)='INDUSTRIAL VACANT'                           =>	'8003',
			trim(L.LAND_USE_LN,left,right)='PRESERVE, OPEN SPACE-VACANT'                 =>	'8004',
			trim(L.LAND_USE_LN,left,right)='INSTITUTIONAL VACANT'                        =>	'8005',
			trim(L.LAND_USE_LN,left,right)='GOVERNMENT VACANT'                           =>	'8006',
			trim(L.LAND_USE_LN,left,right)='MULTI-FAMILY VACANT'                         =>	'8007',
			trim(L.LAND_USE_LN,left,right)='AGRICULTURAL-UNIMPROVED VACANT'              =>	'8008',
			trim(L.LAND_USE_LN,left,right)='SUBMERGED, WASTE LAND, MARSH, SWAMP-VACANT'  =>	'8009',
			trim(L.LAND_USE_LN,left,right)='RECREATIONAL VACANT'                         =>	'8010',
			trim(L.LAND_USE_LN,left,right)='WATER AREA VACANT'                           =>	'8011',
			trim(L.LAND_USE_LN,left,right)='UNUSABLE LAND (REMNANT, STEEP, ETC.)'        =>	'8012',
			trim(L.LAND_USE_LN,left,right)='ABANDONED OR CONTAMINATED SITE'              =>	'8013',
			trim(L.LAND_USE_LN,left,right)='UNDER CONSTRUCTION'                          =>	'8014',
			trim(L.LAND_USE_LN,left,right)='SPECIAL PURPOSE'                             =>	'8500',
			trim(L.LAND_USE_LN,left,right)='SBE - SPECIAL ASSESSMENTS'                   =>	'8501',
			trim(L.LAND_USE_LN,left,right)='REGULATING DISTRICTS & ASSESSMENTS; TAX ABATEMENT' =>	'8502',
			trim(L.LAND_USE_LN,left,right)='REDEVELOPMENT AGENGY OR ZONE'                =>	'8503',
			trim(L.LAND_USE_LN,left,right)='CENTRALLY ASSESSED'                          =>	'8504',
			trim(L.LAND_USE_LN,left,right)='EXEMPT (FULL OR PARTIAL)'                    =>	'9000',
			trim(L.LAND_USE_LN,left,right)='INDIAN/TRIBAL LANDS'                         =>	'9001',
			trim(L.LAND_USE_LN,left,right)='INSTITUTIONAL (GENERAL)'                     =>	'9100',
			trim(L.LAND_USE_LN,left,right)='RELIGIOUS (CHURCH, SYNAGOGUE; TEMPLE; CHAPEL AND RELATED)' =>	'9101',
			trim(L.LAND_USE_LN,left,right)='PRIVATE SCHOOL (PAROCHIAL, SPECIAL EDUCATION)' =>	'9102',
			trim(L.LAND_USE_LN,left,right)='PRIVATE COLLEGE, UNIVERSITY, VOCATIONAL'     =>	'9103',
			trim(L.LAND_USE_LN,left,right)='HOSPITAL (PRIVATE)'                          =>	'9104',
			trim(L.LAND_USE_LN,left,right)='MEDICAL CLINIC'                              =>	'9105',
			trim(L.LAND_USE_LN,left,right)='HOMES (RETIRED; HANDICAP; REST; CONVALESCENT)' =>	'9106',
			trim(L.LAND_USE_LN,left,right)='CHILDREN'+'\'S HOME, ORPHANAGE'              =>	'9107',
			trim(L.LAND_USE_LN,left,right)='CEMETERY (EXEMPT)'                           =>	'9108',
			trim(L.LAND_USE_LN,left,right)='CREMATORIUM, MORTUARY (EXEMPT)'              =>	'9109',
			trim(L.LAND_USE_LN,left,right)='CHARITABLE ORGANIZATION, FRATERNAL'          =>	'9110',
			trim(L.LAND_USE_LN,left,right)='RECREATIONAL NON-TAXABLE (CAMPS, BOY SCOUTS)' =>	'9111',
			trim(L.LAND_USE_LN,left,right)='PRIVATE UTILITY (ELECTRIC, WATER, GAS, ETC.)' =>	'9112',
			trim(L.LAND_USE_LN,left,right)='GOVERNMENTAL/PUBLIC USE (GENERAL)'           =>	'9200',
			trim(L.LAND_USE_LN,left,right)='MILITARY (OFFICE; BASE; POST; PORT; CAMP; RESERVE; WEAPON RANGE; TEST SITES)' =>	'9201',
			trim(L.LAND_USE_LN,left,right)='FOREST (PARK; RESERVE; RECREATION)'          =>	'9202',
			trim(L.LAND_USE_LN,left,right)='PUBLIC SCHOOL (ADMINISTRATION; CAMPUS; DORMS; INSTRUCTION)' =>	'9203',
			trim(L.LAND_USE_LN,left,right)='PUBLIC UNIVERSITY (COLLEGES)'                =>	'9204',
			trim(L.LAND_USE_LN,left,right)='POST OFFICE'                                 =>	'9205',
			trim(L.LAND_USE_LN,left,right)='HISTORICAL/CULTURAL (MONUMENTS; HOMES; MUSEUMS; OTHER)' =>	'9206',
			trim(L.LAND_USE_LN,left,right)='ADMINISTRATIVE OFFICE (FEDERAL/STATE/LOCAL/COURT HOUSE)' =>	'9207',
			trim(L.LAND_USE_LN,left,right)='EMERGENCY (POLICE; FIRE; RESCUE; SHELTERS; ANIMAL SHELTER)' =>	'9208',
			trim(L.LAND_USE_LN,left,right)='OTHER EXEMPT PROPERTY'                        =>	'9209',
			trim(L.LAND_USE_LN,left,right)='CITY, MUNICIPAL, TOWN, VILLAGE OWNED (EXEMPT)' =>	'9210',
			trim(L.LAND_USE_LN,left,right)='COUNTY OWNED (EXEMPT)'                        =>	'9211',
			trim(L.LAND_USE_LN,left,right)='STATE OWNED (EXEMPT)'                         =>	'9212',
			trim(L.LAND_USE_LN,left,right)='FEDERAL PROPERTY (EXEMPT)'                    =>	'9213',
			trim(L.LAND_USE_LN,left,right)='PUBLIC HEALTH CARE FACILITY (EXEMPT)'         =>	'9214',
			trim(L.LAND_USE_LN,left,right)='COMMUNITY CENTER (EXEMPT)'                    =>	'9215',
			trim(L.LAND_USE_LN,left,right)='PUBLIC UTILITY (ELECTRIC, WATER, GAS, ETC.)'  =>	'9216',
			trim(L.LAND_USE_LN,left,right)='WELFARE, SOCIAL SERVICE, LOW INCOME HOUSING (EXEMPT)' =>	'9217',
			trim(L.LAND_USE_LN,left,right)='CORRECTIONAL FACILITY, JAILS, PRISON, ISANE ASYLUM' =>	'9218',
			trim(L.LAND_USE_LN,left,right)='PUBLIC HOSPITAL'                              =>	'9219',
			trim(L.LAND_USE_LN,left,right)='HISTORICAL-PRIVATE (GENERAL)'                 =>	'9300',
			trim(L.LAND_USE_LN,left,right)='HISTORICAL RESIDENCE'                         =>	'9301',
			trim(L.LAND_USE_LN,left,right)='HISTORICAL RETAIL'                            =>	'9302',
			trim(L.LAND_USE_LN,left,right)='HISTORICAL WAREHOUSE'                         =>	'9303',
			trim(L.LAND_USE_LN,left,right)='HISTORICAL OFFICE'                            =>	'9304',
			trim(L.LAND_USE_LN,left,right)='HISTORICAL TRANSIENT LODGING (HOTEL/MOTEL)'   =>	'9305',
			trim(L.LAND_USE_LN,left,right)='HISTORICAL RECREATION/ENTERTAINMENT'          =>	'9307',
			trim(L.LAND_USE_LN,left,right)='HISTORICAL SITE, PARK, MISC.'                 =>	'9308',
			trim(L.LAND_USE_LN,left,right)='HISTORICAL DISTRICT'                          =>	'9309',
			L.LAND_USE_LN);
  self.timeshare_code := if(stringlib.stringfind(L.LAND_USE,'TIMESHARE',1)!=0,'Y','');
  self.zoning         := if(stringlib.stringfind(L.LAND_USE,'Zoning:',1)!=0,
                          trim(L.LAND_USE[stringlib.stringfind(L.LAND_USE,'Zoning:',1)+7..stringlib.stringfind(L.LAND_USE,'Zoning:',1)+32],left,right),
				         '');
  self.owner_occupied := if(stringlib.stringfind(L.OWNER_1,'Owner Occupied',1)!=0,'Y','');
  
  self.recorder_document_number := L.NUMBER_1;
  self.recorder_book_number     := LN_Functions.Function_BookPage(L.BOOK_PAGE)[1..10];
  self.recorder_page_number     := LN_Functions.Function_BookPage(L.BOOK_PAGE)[11..20];
  self.recording_date           := LN_Functions.Function_ReformatDate(L.REC_DATE);
  self.document_type            := L.DEED_TYPE;
  //self.visf_sale_price          := L.SALE_PRICE;
  self.sales_price              := LN_Functions.Function_SalePrice(L.SALE_PRICE,10);
  //self.sales_price              := if(stringlib.stringfind(L.SALE_PRICE,'(',1)!=0,
  //                                  stringlib.stringfilterout(trim(L.SALE_PRICE[1..stringlib.stringfind(L.SALE_PRICE,'(',1)-1],left,right),'$, '),
  //    			                 stringlib.stringfilterout(trim(L.SALE_PRICE,left,right),'$, '));
  //There are actually 2 codes (D and A) that denote 'Full Amount'.
  //The code Z has been derived to handle the ambiguity of the
  //'Full Amount' description.
  self.sales_price_code := map(stringlib.stringfind(stringlib.stringtouppercase(L.SALE_PRICE),'(FULL AMOUNT)',1)!=0                               => 'Z',
                               stringlib.stringfind(stringlib.stringtouppercase(L.SALE_PRICE),'(FULL AMOUNT COMPUTED FROM TRANSFER TAX)',1)!=0    => 'F',
							   stringlib.stringfind(stringlib.stringtouppercase(L.SALE_PRICE),'(PARTIAL AMOUNT COMPUTED FROM TRANSFER TAX)',1)!=0 => 'P',
							   stringlib.stringfind(stringlib.stringtouppercase(L.SALE_PRICE),'(SALES PRICE COMPUTED FROM TRANSFER TAX)',1)!=0    => 'U',
							   stringlib.stringfind(stringlib.stringtouppercase(L.SALE_PRICE),'(PRICE NOT AVAILABLE)',1)!=0                       => 'X',
							   stringlib.stringfind(stringlib.stringtouppercase(L.SALE_PRICE),'(ASSESSOR QUALIFIED AS A COMPARABLE SALE)',1)!=0   => 'Q',
							   '');
  
  //self.visf_prior_info := L.PRIOR_INFO;
  self.prior_recording_date := if(stringlib.stringfind(L.PRIOR_INFO,'Prior Sales Date:',1)!=0,
                                L.PRIOR_INFO[19..20]+L.PRIOR_INFO[22..23]+L.PRIOR_INFO[25..28],
							   '');
  self.prior_sales_price := if(stringlib.stringfind(L.PRIOR_INFO,'Prior Sales Price:',1)!=0 AND stringlib.stringfind(L.PRIOR_INFO,'(',1)!=0,
							 stringlib.stringfilterout(trim(L.PRIOR_INFO[stringlib.stringfind(L.PRIOR_INFO,'Prior Sales Price:',1)+18..stringlib.stringfind(L.PRIOR_INFO,'(',1)-1],left,right),'$, '),
	                        if(stringlib.stringfind(L.PRIOR_INFO,'Prior Sales Price:',1)!=0 AND stringlib.stringfind(L.PRIOR_INFO,'(',1)=0, 
							 stringlib.stringfilterout(trim(L.PRIOR_INFO[stringlib.stringfind(L.PRIOR_INFO,'Prior Sales Price:',1)+18..stringlib.stringfind(L.PRIOR_INFO,'Prior Sales Price:',1)+34],left,right),'$, '),
							''));
  self.prior_sales_price_code := map(stringlib.stringfind(stringlib.stringtouppercase(L.PRIOR_INFO),'(FULL AMOUNT)',1)!=0                               => 'Z',
                                     stringlib.stringfind(stringlib.stringtouppercase(L.PRIOR_INFO),'(FULL AMOUNT COMPUTED FROM TRANSFER TAX)',1)!=0    => 'F',
							         stringlib.stringfind(stringlib.stringtouppercase(L.PRIOR_INFO),'(PARTIAL AMOUNT COMPUTED FROM TRANSFER TAX)',1)!=0 => 'P',
							         stringlib.stringfind(stringlib.stringtouppercase(L.PRIOR_INFO),'(SALES PRICE COMPUTED FROM TRANSFER TAX)',1)!=0    => 'U',
							         stringlib.stringfind(stringlib.stringtouppercase(L.PRIOR_INFO),'(PRICE NOT AVAILABLE)',1)!=0                       => 'X',
							         stringlib.stringfind(stringlib.stringtouppercase(L.PRIOR_INFO),'(ASSESSOR QUALIFIED AS A COMPARABLE SALE)',1)!=0   => 'Q',
							         '');

  self.assessed_land_value        := LN_Functions.Function_ReformatCurrency(L.LAND_VALUE,10);									 
  //self.assessed_land_value        := stringlib.stringfilterout(L.LAND_VALUE, '$, ');
  self.assessed_improvement_value := LN_Functions.Function_ReformatCurrency(L.VALUE_2,10);
  //self.assessed_improvement_value := stringlib.stringfilterout(L.VALUE_2, '$, ');
  self.assessed_total_value       := LN_Functions.Function_ReformatCurrency(L.TOTAL_VALUE,11);
  //self.assessed_total_value       := stringlib.stringfilterout(L.TOTAL_VALUE, '$, ');
  self.assessed_value_year        := L.FY_ASSESSMENT;
  self.market_land_value          := LN_Functions.Function_ReformatCurrency(L.MAR_LAND_VALUE,10);
  //self.market_land_value          := stringlib.stringfilterout(L.MAR_LAND_VALUE, '$, ');
  self.market_improvement_value   := LN_Functions.Function_ReformatCurrency(L.MAR_IMP_VALUE,10);
  //self.market_improvement_value   := stringlib.stringfilterout(L.MAR_IMP_VALUE, '$, ');
  self.market_total_value         := LN_Functions.Function_ReformatCurrency(L.TOT_MAR_VALUE,11);
  //self.market_total_value         := stringlib.stringfilterout(L.TOT_MAR_VALUE, '$, ');
  self.market_value_year          := L.MAR_YEAR_ASSESS;
  //self.visf_exemption := L.EXEMPTION;
  self.homestead_homeowner_exemption := if(stringlib.stringfind(stringlib.stringtouppercase(L.EXEMPTION),'HOMEOWNER',1)!=0,'H','');

  self.tax_exemption1_code := if(stringlib.stringfind(fRHO(L.EXEMPTION),';',1)!=0,
                              map(stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[1..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)]),'AGRICULTURAL',1)         !=0 => 'A',
                                  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[1..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)]),'CHARITY/FRATERNAL ORG',1)!=0 => 'Q',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[1..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)]),'CEMETERY',1)             !=0 => 'C',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[1..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)]),'DISABLED',1)             !=0 => 'B',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[1..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)]),'GOVERNMENT',1)           !=0 => 'G',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[1..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)]),'HEAD OF HOUSEHOLD',1)    !=0 => 'K',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[1..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)]),'HISTORICAL',1)           !=0 => 'H',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[1..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)]),'HOMESTEAD',1)            !=0 => 'D',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[1..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)]),'HOSPITAL',1)             !=0 => 'T',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[1..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)]),'LIBRARY/MUSEUM',1)       !=0 => 'L',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[1..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)]),'LOW INCOME',1)           !=0 => 'I',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[1..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)]),'MISCELLANEOUS',1)        !=0 => 'M',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[1..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)]),'NATIVE AMERICAN',1)      !=0 => 'Y',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[1..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)]),'NON-PROFIT',1)           !=0 => 'N',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[1..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)]),'ORPHANAGE',1)            !=0 => 'O',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[1..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)]),'PARTIAL EXEMPT',1)       !=0 => 'J',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[1..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)]),'PUBLIC UTILITIES',1)     !=0 => 'P',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[1..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)]),'REDEVELOPMENT AGENCY',1) !=0 => 'U',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[1..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)]),'RELIGIOUS/CHURCH',1)     !=0 => 'R',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[1..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)]),'OVER 65',1)              !=0 => 'F',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[1..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)]),'SCHOOL/COLLEGE',1)       !=0 => 'S',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[1..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)]),'TAX EXEMPT',1)           !=0 => 'E',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[1..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)]),'VETERAN',1)              !=0 => 'V',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[1..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)]),'WELFARE',1)              !=0 => 'W',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[1..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)]),'WIDOW/WIDOWER',1)        !=0 => 'Z',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[1..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)]),'RAILROAD',1)             !=0 => 'X',
                                  ''),
  							  map(stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)),'AGRICULTURAL',1)     !=0 => 'A',
                                  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)),'CHARITY/FRATERNAL ORG',1)!=0 => 'Q',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)),'CEMETERY',1)             !=0 => 'C',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)),'DISABLED',1)             !=0 => 'B',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)),'GOVERNMENT',1)           !=0 => 'G',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)),'HEAD OF HOUSEHOLD',1)    !=0 => 'K',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)),'HISTORICAL',1)           !=0 => 'H',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)),'HOMESTEAD',1)            !=0 => 'D',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)),'HOSPITAL',1)             !=0 => 'T',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)),'LIBRARY/MUSEUM',1)       !=0 => 'L',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)),'LOW INCOME',1)           !=0 => 'I',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)),'MISCELLANEOUS',1)        !=0 => 'M',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)),'NATIVE AMERICAN',1)      !=0 => 'Y',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)),'NON-PROFIT',1)           !=0 => 'N',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)),'ORPHANAGE',1)            !=0 => 'O',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)),'PARTIAL EXEMPT',1)       !=0 => 'J',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)),'PUBLIC UTILITIES',1)     !=0 => 'P',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)),'REDEVELOPMENT AGENCY',1) !=0 => 'U',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)),'RELIGIOUS/CHURCH',1)     !=0 => 'R',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)),'OVER 65',1)              !=0 => 'F',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)),'SCHOOL/COLLEGE',1)       !=0 => 'S',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)),'TAX EXEMPT',1)           !=0 => 'E',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)),'VETERAN',1)              !=0 => 'V',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)),'WELFARE',1)              !=0 => 'W',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)),'WIDOW/WIDOWER',1)        !=0 => 'Z',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)),'RAILROAD',1)             !=0 => 'X',''));
  self.tax_exemption2_code := if(stringlib.stringfind(fRHO(L.EXEMPTION),';',1)!=0 AND stringlib.stringfind(fRHO(L.EXEMPTION),';',2)!=0,
                              map(stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)]),'AGRICULTURAL',1)         !=0 => 'A',
							      stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)]),'CHARITY/FRATERNAL ORG',1)!=0 => 'Q',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)]),'CEMETERY',1)             !=0 => 'C',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)]),'DISABLED',1)             !=0 => 'B',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)]),'GOVERNMENT',1)           !=0 => 'G',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)]),'HEAD OF HOUSEHOLD',1)    !=0 => 'K',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)]),'HISTORICAL',1)           !=0 => 'H',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)]),'HOMESTEAD',1)            !=0 => 'D',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)]),'HOSPITAL',1)             !=0 => 'T',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)]),'LIBRARY/MUSEUM',1)       !=0 => 'L',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)]),'LOW INCOME',1)           !=0 => 'I',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)]),'MISCELLANEOUS',1)        !=0 => 'M',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)]),'NATIVE AMERICAN',1)      !=0 => 'Y',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)]),'NON-PROFIT',1)           !=0 => 'N',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)]),'ORPHANAGE',1)            !=0 => 'O',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)]),'PARTIAL EXEMPT',1)       !=0 => 'J',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)]),'PUBLIC UTILITIES',1)     !=0 => 'P',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)]),'REDEVELOPMENT AGENCY',1) !=0 => 'U',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)]),'RELIGIOUS/CHURCH',1)     !=0 => 'R',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)]),'OVER 65',1)              !=0 => 'F',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)]),'SCHOOL/COLLEGE',1)       !=0 => 'S',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)]),'TAX EXEMPT',1)           !=0 => 'E',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)]),'VETERAN',1)              !=0 => 'V',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)]),'WELFARE',1)              !=0 => 'W',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)]),'WIDOW/WIDOWER',1)        !=0 => 'Z',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)]),'RAILROAD',1)             !=0 => 'X',
							      ''),
								  if(stringlib.stringfind(fRHO(L.EXEMPTION),';',1)!=0 AND stringlib.stringfind(fRHO(L.EXEMPTION),';',2)=0,
								  map(stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)+21]),'AGRICULTURAL',1)         !=0 => 'A',
								      stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)+21]),'CHARITY/FRATERNAL ORG',1)!=0 => 'Q',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)+21]),'CEMETERY',1)             !=0 => 'C',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)+21]),'DISABLED',1)             !=0 => 'B',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)+21]),'GOVERNMENT',1)           !=0 => 'G',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)+21]),'HEAD OF HOUSEHOLD',1)    !=0 => 'K',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)+21]),'HISTORICAL',1)           !=0 => 'H',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)+21]),'HOMESTEAD',1)            !=0 => 'D',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)+21]),'HOSPITAL',1)             !=0 => 'T',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)+21]),'LIBRARY/MUSEUM',1)       !=0 => 'L',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)+21]),'LOW INCOME',1)           !=0 => 'I',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)+21]),'MISCELLANEOUS',1)        !=0 => 'M',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)+21]),'NATIVE AMERICAN',1)      !=0 => 'Y',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)+21]),'NON-PROFIT',1)           !=0 => 'N',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)+21]),'ORPHANAGE',1)            !=0 => 'O',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)+21]),'PARTIAL EXEMPT',1)       !=0 => 'J',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)+21]),'PUBLIC UTILITIES',1)     !=0 => 'P',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)+21]),'REDEVELOPMENT AGENCY',1) !=0 => 'U',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)+21]),'RELIGIOUS/CHURCH',1)     !=0 => 'R',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)+21]),'OVER 65',1)              !=0 => 'F',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)+21]),'SCHOOL/COLLEGE',1)       !=0 => 'S',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)+21]),'TAX EXEMPT',1)           !=0 => 'E',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)+21]),'VETERAN',1)              !=0 => 'V',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)+21]),'WELFARE',1)              !=0 => 'W',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)+21]),'WIDOW/WIDOWER',1)        !=0 => 'Z',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',1)..stringlib.stringfind(fRHO(L.EXEMPTION),';',1)+21]),'RAILROAD',1)             !=0 => 'X',
								  	  ''),
								  '')
								  );
  self.tax_exemption3_code := if(stringlib.stringfind(fRHO(L.EXEMPTION),';',2)!=0 AND stringlib.stringfind(fRHO(L.EXEMPTION),';',3)!=0,
                              map(stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)]),'AGRICULTURAL',1)         !=0 => 'A',
							      stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)]),'CHARITY/FRATERNAL ORG',1)!=0 => 'Q',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)]),'CEMETERY',1)             !=0 => 'C',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)]),'DISABLED',1)             !=0 => 'B',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)]),'GOVERNMENT',1)           !=0 => 'G',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)]),'HEAD OF HOUSEHOLD',1)    !=0 => 'K',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)]),'HISTORICAL',1)           !=0 => 'H',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)]),'HOMESTEAD',1)            !=0 => 'D',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)]),'HOSPITAL',1)             !=0 => 'T',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)]),'LIBRARY/MUSEUM',1)       !=0 => 'L',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)]),'LOW INCOME',1)           !=0 => 'I',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)]),'MISCELLANEOUS',1)        !=0 => 'M',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)]),'NATIVE AMERICAN',1)      !=0 => 'Y',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)]),'NON-PROFIT',1)           !=0 => 'N',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)]),'ORPHANAGE',1)            !=0 => 'O',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)]),'PARTIAL EXEMPT',1)       !=0 => 'J',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)]),'PUBLIC UTILITIES',1)     !=0 => 'P',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)]),'REDEVELOPMENT AGENCY',1) !=0 => 'U',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)]),'RELIGIOUS/CHURCH',1)     !=0 => 'R',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)]),'OVER 65',1)              !=0 => 'F',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)]),'SCHOOL/COLLEGE',1)       !=0 => 'S',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)]),'TAX EXEMPT',1)           !=0 => 'E',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)]),'VETERAN',1)              !=0 => 'V',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)]),'WELFARE',1)              !=0 => 'W',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)]),'WIDOW/WIDOWER',1)        !=0 => 'Z',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)]),'RAILROAD',1)             !=0 => 'X',
							      ''),
								  if(stringlib.stringfind(fRHO(L.EXEMPTION),';',2)!=0 AND stringlib.stringfind(fRHO(L.EXEMPTION),';',3)=0,
								  map(stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)+21]),'AGRICULTURAL',1)         !=0 => 'A',
								      stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)+21]),'CHARITY/FRATERNAL ORG',1)!=0 => 'Q',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)+21]),'CEMETERY',1)             !=0 => 'C',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)+21]),'DISABLED',1)             !=0 => 'B',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)+21]),'GOVERNMENT',1)           !=0 => 'G',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)+21]),'HEAD OF HOUSEHOLD',1)    !=0 => 'K',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)+21]),'HISTORICAL',1)           !=0 => 'H',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)+21]),'HOMESTEAD',1)            !=0 => 'D',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)+21]),'HOSPITAL',1)             !=0 => 'T',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)+21]),'LIBRARY/MUSEUM',1)       !=0 => 'L',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)+21]),'LOW INCOME',1)           !=0 => 'I',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)+21]),'MISCELLANEOUS',1)        !=0 => 'M',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)+21]),'NATIVE AMERICAN',1)      !=0 => 'Y',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)+21]),'NON-PROFIT',1)           !=0 => 'N',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)+21]),'ORPHANAGE',1)            !=0 => 'O',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)+21]),'PARTIAL EXEMPT',1)       !=0 => 'J',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)+21]),'PUBLIC UTILITIES',1)     !=0 => 'P',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)+21]),'REDEVELOPMENT AGENCY',1) !=0 => 'U',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)+21]),'RELIGIOUS/CHURCH',1)     !=0 => 'R',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)+21]),'OVER 65',1)              !=0 => 'F',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)+21]),'SCHOOL/COLLEGE',1)       !=0 => 'S',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)+21]),'TAX EXEMPT',1)           !=0 => 'E',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)+21]),'VETERAN',1)              !=0 => 'V',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)+21]),'WELFARE',1)              !=0 => 'W',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)+21]),'WIDOW/WIDOWER',1)        !=0 => 'Z',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',2)..stringlib.stringfind(fRHO(L.EXEMPTION),';',2)+21]),'RAILROAD',1)             !=0 => 'X',
								  	  ''),
								  '')
								  );
  self.tax_exemption4_code := if(stringlib.stringfind(fRHO(L.EXEMPTION),';',3)!=0 AND stringlib.stringfind(fRHO(L.EXEMPTION),';',4)!=0,
                              map(stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',4)]),'AGRICULTURAL',1)         !=0 => 'A',
							      stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',4)]),'CHARITY/FRATERNAL ORG',1)!=0 => 'Q',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',4)]),'CEMETERY',1)             !=0 => 'C',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',4)]),'DISABLED',1)             !=0 => 'B',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',4)]),'GOVERNMENT',1)           !=0 => 'G',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',4)]),'HEAD OF HOUSEHOLD',1)    !=0 => 'K',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',4)]),'HISTORICAL',1)           !=0 => 'H',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',4)]),'HOMESTEAD',1)            !=0 => 'D',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',4)]),'HOSPITAL',1)             !=0 => 'T',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',4)]),'LIBRARY/MUSEUM',1)       !=0 => 'L',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',4)]),'LOW INCOME',1)           !=0 => 'I',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',4)]),'MISCELLANEOUS',1)        !=0 => 'M',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',4)]),'NATIVE AMERICAN',1)      !=0 => 'Y',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',4)]),'NON-PROFIT',1)           !=0 => 'N',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',4)]),'ORPHANAGE',1)            !=0 => 'O',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',4)]),'PARTIAL EXEMPT',1)       !=0 => 'J',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',4)]),'PUBLIC UTILITIES',1)     !=0 => 'P',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',4)]),'REDEVELOPMENT AGENCY',1) !=0 => 'U',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',4)]),'RELIGIOUS/CHURCH',1)     !=0 => 'R',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',4)]),'OVER 65',1)              !=0 => 'F',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',4)]),'SCHOOL/COLLEGE',1)       !=0 => 'S',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',4)]),'TAX EXEMPT',1)           !=0 => 'E',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',4)]),'VETERAN',1)              !=0 => 'V',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',4)]),'WELFARE',1)              !=0 => 'W',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',4)]),'WIDOW/WIDOWER',1)        !=0 => 'Z',
								  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',4)]),'RAILROAD',1)             !=0 => 'X',
							      ''),
								  if(stringlib.stringfind(fRHO(L.EXEMPTION),';',3)!=0 AND stringlib.stringfind(fRHO(L.EXEMPTION),';',4)=0,
								  map(stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)+21]),'AGRICULTURAL',1)         !=0 => 'A',
								      stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)+21]),'CHARITY/FRATERNAL ORG',1)!=0 => 'Q',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)+21]),'CEMETERY',1)             !=0 => 'C',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)+21]),'DISABLED',1)             !=0 => 'B',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)+21]),'GOVERNMENT',1)           !=0 => 'G',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)+21]),'HEAD OF HOUSEHOLD',1)    !=0 => 'K',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)+21]),'HISTORICAL',1)           !=0 => 'H',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)+21]),'HOMESTEAD',1)            !=0 => 'D',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)+21]),'HOSPITAL',1)             !=0 => 'T',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)+21]),'LIBRARY/MUSEUM',1)       !=0 => 'L',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)+21]),'LOW INCOME',1)           !=0 => 'I',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)+21]),'MISCELLANEOUS',1)        !=0 => 'M',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)+21]),'NATIVE AMERICAN',1)      !=0 => 'Y',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)+21]),'NON-PROFIT',1)           !=0 => 'N',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)+21]),'ORPHANAGE',1)            !=0 => 'O',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)+21]),'PARTIAL EXEMPT',1)       !=0 => 'J',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)+21]),'PUBLIC UTILITIES',1)     !=0 => 'P',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)+21]),'REDEVELOPMENT AGENCY',1) !=0 => 'U',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)+21]),'RELIGIOUS/CHURCH',1)     !=0 => 'R',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)+21]),'OVER 65',1)              !=0 => 'F',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)+21]),'SCHOOL/COLLEGE',1)       !=0 => 'S',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)+21]),'TAX EXEMPT',1)           !=0 => 'E',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)+21]),'VETERAN',1)              !=0 => 'V',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)+21]),'WELFARE',1)              !=0 => 'W',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)+21]),'WIDOW/WIDOWER',1)        !=0 => 'Z',
									  stringlib.stringfind(stringlib.stringtouppercase(fRHO(L.EXEMPTION)[stringlib.stringfind(fRHO(L.EXEMPTION),';',3)..stringlib.stringfind(fRHO(L.EXEMPTION),';',3)+21]),'RAILROAD',1)             !=0 => 'X',
								  	  ''),
								  '')
								  );
								  
  self.tax_rate_code_area  := L.TAX_RATE;
  self.tax_amount          := LN_Functions.Function_ReformatCurrency(L.TAX_AMOUNT,10);
  //self.visf_tax_year       := L.TAX_YEAR;
  self.tax_year            := if(stringlib.stringfind(L.TAX_YEAR,'Tax Delinquent Year:',1)=0,
                               trim(L.TAX_YEAR,left,right),
							  trim(L.TAX_YEAR[1..stringlib.stringfind(L.TAX_YEAR,'Tax Delinquent Year:',1)],left,right));
  self.tax_delinquent_year := if(stringlib.stringfind(L.TAX_YEAR, 'Tax Delinquent Year:',1)!=0,
                               L.TAX_YEAR[stringlib.stringfind(L.TAX_YEAR, 'Tax Delinquent Year:',1)+21..stringlib.stringfind(L.TAX_YEAR, 'Tax Delinquent Year:',1)+25],
							  '');

  //self.visf_characteristics   := L.CHARACTERISTICS;
  self.year_built             := L.YEARBUILT_VALUE;
  self.no_of_buildings        := L.NOOFBUILD_VALUE;
  self.no_of_stories          := stringlib.stringfindreplace(
                                  stringlib.stringfindreplace(
                                   stringlib.stringfindreplace(
                                    stringlib.stringfindreplace(
                                     stringlib.stringfindreplace(
                                      stringlib.stringfindreplace(
                                       stringlib.stringfindreplace(
								        stringlib.stringfindreplace(
								               stringlib.stringfilterout(L.STORIES_VALUE,' '),
								        'WithAtticandBasement','+AB'),
								       'WithAttic','+A'),
								      'WithBasement','+B'),
								     'SplitFoyer','S/F'),
								    'SplitLevels','/L'),
								   'SplitLevel','S/L'),
								  'SplitEntry','S/E'),
								 'Bi-level','B/L');
  self.style_code             := map(stringlib.stringfind(stringlib.stringtouppercase(L.STYLE_VALUE),'FRAME',1)!=0         => 'A',
                                     stringlib.stringfind(stringlib.stringtouppercase(L.STYLE_VALUE),'BUNGALOW',1)!=0      => 'B',
									 stringlib.stringfind(stringlib.stringtouppercase(L.STYLE_VALUE),'CAPE COD',1)!=0      => 'C',
									 stringlib.stringfind(stringlib.stringtouppercase(L.STYLE_VALUE),'COLONIAL',1)!=0      => 'D',
									 stringlib.stringfind(stringlib.stringtouppercase(L.STYLE_VALUE),'ENGLISH',1)!=0       => 'E',
									 stringlib.stringfind(stringlib.stringtouppercase(L.STYLE_VALUE),'FRENCH',1)!=0        => 'F',
									 stringlib.stringfind(stringlib.stringtouppercase(L.STYLE_VALUE),'GEORGIAN',1)!=0      => 'G',
									 stringlib.stringfind(stringlib.stringtouppercase(L.STYLE_VALUE),'HIGHRISE',1)!=0      => 'H',
									 stringlib.stringfind(stringlib.stringtouppercase(L.STYLE_VALUE),'MODERN',1)!=0        => 'I',
									 stringlib.stringfind(stringlib.stringtouppercase(L.STYLE_VALUE),'RANCH/RAMBLER',1)!=0 => 'J',
									 stringlib.stringfind(stringlib.stringtouppercase(L.STYLE_VALUE),'SPANISH',1)!=0       => 'K',
									 stringlib.stringfind(stringlib.stringtouppercase(L.STYLE_VALUE),'TUDOR',1)!=0         => 'L',
									 stringlib.stringfind(stringlib.stringtouppercase(L.STYLE_VALUE),'MEDITERRANEAN',1)!=0 => 'M',
									 stringlib.stringfind(stringlib.stringtouppercase(L.STYLE_VALUE),'CONVENTIONAL',1)!=0  => 'N',
									 stringlib.stringfind(stringlib.stringtouppercase(L.STYLE_VALUE),'PREFAB',1)!=0        => 'P',
									 stringlib.stringfind(stringlib.stringtouppercase(L.STYLE_VALUE),'MANSION',1)!=0       => 'Q',
									 stringlib.stringfind(stringlib.stringtouppercase(L.STYLE_VALUE),'RAISED RANCH',1)!=0  => 'R',
									 stringlib.stringfind(stringlib.stringtouppercase(L.STYLE_VALUE),'DOME',1)!=0          => 'S',
									 stringlib.stringfind(stringlib.stringtouppercase(L.STYLE_VALUE),'CONTEMPORARY',1)!=0  => 'T',
									 stringlib.stringfind(stringlib.stringtouppercase(L.STYLE_VALUE),'UNFINISHED',1)!=0    => 'U',
									 stringlib.stringfind(stringlib.stringtouppercase(L.STYLE_VALUE),'VICTORIAN',1)!=0     => 'V',
									 stringlib.stringfind(stringlib.stringtouppercase(L.STYLE_VALUE),'COTTAGE',1)!=0       => 'W',
									 stringlib.stringfind(stringlib.stringtouppercase(L.STYLE_VALUE),'CUSTOM',1)!=0        => 'X',
									 stringlib.stringfind(stringlib.stringtouppercase(L.STYLE_VALUE),'LOG CABIN',1)!=0     => 'Y',
									 stringlib.stringfind(stringlib.stringtouppercase(L.STYLE_VALUE),'HISTORICAL',1)!=0    => 'Z',
									 stringlib.stringfind(stringlib.stringtouppercase(L.STYLE_VALUE),'TRADITIONAL',1)!=0   => '2',
									 trim(L.STYLE_VALUE,left,right)=''                                                     => 'O',
							         L.STYLE_VALUE);		 
  self.no_of_units            := L.UNITS_VALUE;
  self.air_conditioning_code  := map(stringlib.stringfind(stringlib.stringtouppercase(L.AIRCONDITIONING_VALUE),'CENTRAL',1)!=0       => 'C',
                                     stringlib.stringfind(stringlib.stringtouppercase(L.AIRCONDITIONING_VALUE),'EVAPORATIVE',1)!=0   => 'E',
									 stringlib.stringfind(stringlib.stringtouppercase(L.AIRCONDITIONING_VALUE),'OFFICE',1)!=0        => 'F',
									 stringlib.stringfind(stringlib.stringtouppercase(L.AIRCONDITIONING_VALUE),'WINDOW',1)!=0        => 'L',
									 stringlib.stringfind(stringlib.stringtouppercase(L.AIRCONDITIONING_VALUE),'NONE',1)!=0          => 'N',
									 stringlib.stringfind(stringlib.stringtouppercase(L.AIRCONDITIONING_VALUE),'PARTIAL',1)!=0       => 'P',
									 stringlib.stringfind(stringlib.stringtouppercase(L.AIRCONDITIONING_VALUE),'CHILLED',1)!=0       => 'Q',
									 stringlib.stringfind(stringlib.stringtouppercase(L.AIRCONDITIONING_VALUE),'REFRIGERATION',1)!=0 => 'R',
									 stringlib.stringfind(stringlib.stringtouppercase(L.AIRCONDITIONING_VALUE),'VENTILATION',1)!=0   => 'V',
									 stringlib.stringfind(stringlib.stringtouppercase(L.AIRCONDITIONING_VALUE),'WALL',1)!=0          => 'W',
									 stringlib.stringfind(stringlib.stringtouppercase(L.AIRCONDITIONING_VALUE),'YES',1)!=0           => 'Y',
									 trim(L.AIRCONDITIONING_VALUE,left,right)=''                                                     => 'O',
									 L.AIRCONDITIONING_VALUE);
  self.no_of_bedrooms         := L.BEDROOMS_VALUE;
  self.heating_code           := map(stringlib.stringfind(stringlib.stringtouppercase(L.HEATING_VALUE),'BASEBOARD',1)!=0 => 'A',
                                     stringlib.stringfind(stringlib.stringtouppercase(L.HEATING_VALUE),'ELECTRIC',1)!=0  => 'B',
									 stringlib.stringfind(stringlib.stringtouppercase(L.HEATING_VALUE),'CENTRAL',1)!=0   => 'A',
									 stringlib.stringfind(stringlib.stringtouppercase(L.HEATING_VALUE),'FORCED',1)!=0    => 'D',
									 stringlib.stringfind(stringlib.stringtouppercase(L.HEATING_VALUE),'OIL',1)!=0       => 'E',
									 stringlib.stringfind(stringlib.stringtouppercase(L.HEATING_VALUE),'FLOOR',1)!=0     => 'F',
									 stringlib.stringfind(stringlib.stringtouppercase(L.HEATING_VALUE),'GRAVITY',1)!=0   => 'G',
									 stringlib.stringfind(stringlib.stringtouppercase(L.HEATING_VALUE),'HEAT PUMP',1)!=0 => 'H',
									 stringlib.stringfind(stringlib.stringtouppercase(L.HEATING_VALUE),'HOT WATER',1)!=0 => 'J',
									 stringlib.stringfind(stringlib.stringtouppercase(L.HEATING_VALUE),'GAS',1)!=0       => 'G',
									 stringlib.stringfind(stringlib.stringtouppercase(L.HEATING_VALUE),'PARTIAL',1)!=0   => 'L',
									 stringlib.stringfind(stringlib.stringtouppercase(L.HEATING_VALUE),'RADIANT',1)!=0   => 'M',
									 stringlib.stringfind(stringlib.stringtouppercase(L.HEATING_VALUE),'NONE',1)!=0      => 'N',
									 stringlib.stringfind(stringlib.stringtouppercase(L.HEATING_VALUE),'STEAM',1)!=0     => 'P',
									 stringlib.stringfind(stringlib.stringtouppercase(L.HEATING_VALUE),'COAL',1)!=0      => 'Q',
									 stringlib.stringfind(stringlib.stringtouppercase(L.HEATING_VALUE),'SPACE',1)!=0     => 'R',
									 stringlib.stringfind(stringlib.stringtouppercase(L.HEATING_VALUE),'SOLAR',1)!=0     => 'T',
									 stringlib.stringfind(stringlib.stringtouppercase(L.HEATING_VALUE),'VENT',1)!=0      => 'V',
									 stringlib.stringfind(stringlib.stringtouppercase(L.HEATING_VALUE),'WOOD',1)!=0      => 'W',
									 stringlib.stringfind(stringlib.stringtouppercase(L.HEATING_VALUE),'PROPANE',1)!=0   => 'X',
									 stringlib.stringfind(stringlib.stringtouppercase(L.HEATING_VALUE),'YES',1)!=0       => 'Y',
									 stringlib.stringfind(stringlib.stringtouppercase(L.HEATING_VALUE),'ZONE',1)!=0      => 'Z',
									 trim(L.HEATING_VALUE,left,right)=''                                                 => 'O',
									 L.HEATING_VALUE);
  self.no_of_baths            := L.BATHS_VALUE;
  self.type_construction_code := map(stringlib.stringfind(stringlib.stringtouppercase(L.CONSTRUCTION_VALUE),'ADOBE',1)!=0          => 'A',
                                     stringlib.stringfind(stringlib.stringtouppercase(L.CONSTRUCTION_VALUE),'BRICK',1)!=0          => 'B',
									 stringlib.stringfind(stringlib.stringtouppercase(L.CONSTRUCTION_VALUE),'CONCRETE BLOCK',1)!=0 => 'D',
									 stringlib.stringfind(stringlib.stringtouppercase(L.CONSTRUCTION_VALUE),'CONCRETE',1)!=0       => 'C',
									 stringlib.stringfind(stringlib.stringtouppercase(L.CONSTRUCTION_VALUE),'DOME',1)!=0           => 'E',
									 stringlib.stringfind(stringlib.stringtouppercase(L.CONSTRUCTION_VALUE),'HEAVY',1)!=0          => 'H',
									 stringlib.stringfind(stringlib.stringtouppercase(L.CONSTRUCTION_VALUE),'LIGHT',1)!=0          => 'L',
									 stringlib.stringfind(stringlib.stringtouppercase(L.CONSTRUCTION_VALUE),'LOG',1)!=0            => 'M',
									 stringlib.stringfind(stringlib.stringtouppercase(L.CONSTRUCTION_VALUE),'MANUFACTURED',1)!=0   => 'N',
									 stringlib.stringfind(stringlib.stringtouppercase(L.CONSTRUCTION_VALUE),'MASONRY',1)!=0        => 'P',
									 stringlib.stringfind(stringlib.stringtouppercase(L.CONSTRUCTION_VALUE),'METAL',1)!=0          => 'Q',
									 stringlib.stringfind(stringlib.stringtouppercase(L.CONSTRUCTION_VALUE),'STEEL',1)!=0          => 'R',
									 stringlib.stringfind(stringlib.stringtouppercase(L.CONSTRUCTION_VALUE),'STONE',1)!=0          => 'S',
									 stringlib.stringfind(stringlib.stringtouppercase(L.CONSTRUCTION_VALUE),'TILT',1)!=0           => 'T',
									 stringlib.stringfind(stringlib.stringtouppercase(L.CONSTRUCTION_VALUE),'WOOD',1)!=0           => 'W',
									 trim(L.CONSTRUCTION_VALUE,left,right)=''                                                      => 'O',
									 L.CONSTRUCTION_VALUE);
  self.no_of_partial_baths    := L.PARTIALBATHS_VALUE;
  //Defined code 'Z' to handle the ambiguity due to 'YES' representing 2
  //coded values ('Y' and 'B').
  self.basement_code          := map(stringlib.stringfind(stringlib.stringtouppercase(L.BASEMENT_VALUE),'YES',1)!=0               => 'Z',
                                     stringlib.stringfind(stringlib.stringtouppercase(L.BASEMENT_VALUE),'DAYLIGHT, FULL',1)!=0    => 'D',
									 stringlib.stringfind(stringlib.stringtouppercase(L.BASEMENT_VALUE),'FULL',1)!=0              => 'F',
									 stringlib.stringfind(stringlib.stringtouppercase(L.BASEMENT_VALUE),'IMPROVED',1)!=0          => 'I',
									 stringlib.stringfind(stringlib.stringtouppercase(L.BASEMENT_VALUE),'DAYLIGHT, PARTIAL',1)!=0 => 'L',
									 stringlib.stringfind(stringlib.stringtouppercase(L.BASEMENT_VALUE),'NONE',1)!=0              => 'N',
									 stringlib.stringfind(stringlib.stringtouppercase(L.BASEMENT_VALUE),'PARTIAL',1)!=0           => 'P',
									 stringlib.stringfind(stringlib.stringtouppercase(L.BASEMENT_VALUE),'UNFINISHED',1)!=0        => 'U',
									 L.BASEMENT_VALUE);
  self.no_of_rooms            := L.TOTALROOMS_VALUE;
  self.exterior_walls_code    := map(stringlib.stringfind(stringlib.stringtouppercase(L.EXTERIORWALLS_VALUE),'ASBESTOS',1)!=0       => 'A',
                                     stringlib.stringfind(stringlib.stringtouppercase(L.EXTERIORWALLS_VALUE),'BRICK/STONE',1)!=0    => 'B',
									 stringlib.stringfind(stringlib.stringtouppercase(L.EXTERIORWALLS_VALUE),'BRICK VENEER',1)!=0   => 'C',
									 stringlib.stringfind(stringlib.stringtouppercase(L.EXTERIORWALLS_VALUE),'BLOCK',1)!=0          => 'D',
									 stringlib.stringfind(stringlib.stringtouppercase(L.EXTERIORWALLS_VALUE),'COMPOSITION',1)!=0    => 'E',
									 stringlib.stringfind(stringlib.stringtouppercase(L.EXTERIORWALLS_VALUE),'CONCRETE BLOCK',1)!=0 => 'G',
									 stringlib.stringfind(stringlib.stringtouppercase(L.EXTERIORWALLS_VALUE),'CONCRETE',1)!=0       => 'F',
									 stringlib.stringfind(stringlib.stringtouppercase(L.EXTERIORWALLS_VALUE),'GLASS',1)!=0          => 'H',
									 stringlib.stringfind(stringlib.stringtouppercase(L.EXTERIORWALLS_VALUE),'LOG',1)!=0            => 'I',
									 stringlib.stringfind(stringlib.stringtouppercase(L.EXTERIORWALLS_VALUE),'METAL',1)!=0          => 'J',
									 stringlib.stringfind(stringlib.stringtouppercase(L.EXTERIORWALLS_VALUE),'ROCK',1)!=0           => 'K',
									 stringlib.stringfind(stringlib.stringtouppercase(L.EXTERIORWALLS_VALUE),'STUCCO',1)!=0         => 'L',
									 stringlib.stringfind(stringlib.stringtouppercase(L.EXTERIORWALLS_VALUE),'TILE',1)!=0           => 'M',
									 stringlib.stringfind(stringlib.stringtouppercase(L.EXTERIORWALLS_VALUE),'TILT-UP',1)!=0        => 'N',
									 stringlib.stringfind(stringlib.stringtouppercase(L.EXTERIORWALLS_VALUE),'WOOD SHINGLE',1)!=0   => 'P',
									 stringlib.stringfind(stringlib.stringtouppercase(L.EXTERIORWALLS_VALUE),'WOOD SIDING',1)!=0    => 'R',
									 stringlib.stringfind(stringlib.stringtouppercase(L.EXTERIORWALLS_VALUE),'WOOD',1)!=0           => 'Q',
									 stringlib.stringfind(stringlib.stringtouppercase(L.EXTERIORWALLS_VALUE),'SIDING',1)!=0         => 'S',
									 stringlib.stringfind(stringlib.stringtouppercase(L.EXTERIORWALLS_VALUE),'ADOBE',1)!=0          => 'T',
									 stringlib.stringfind(stringlib.stringtouppercase(L.EXTERIORWALLS_VALUE),'SHINGLE',1)!=0        => 'V',
									 stringlib.stringfind(stringlib.stringtouppercase(L.EXTERIORWALLS_VALUE),'COMBINATION',1)!=0    => 'X',
									 stringlib.stringfind(stringlib.stringtouppercase(L.EXTERIORWALLS_VALUE),'MASONRY',1)!=0        => 'Y',
									 trim(L.EXTERIORWALLS_VALUE,left,right)=''                                                      => 'O',
									 L.EXTERIORWALLS_VALUE);
  self.fireplace_indicator    := if(trim(L.FIREPLACE_VALUE,left,right)='Yes','Y','');
  self.fireplace_number       := if(trim(L.FIREPLACE_VALUE,left,right)!='Yes',L.FIREPLACE_VALUE,'');
  self.foundation_code        := map(stringlib.stringfind(stringlib.stringtouppercase(L.FOUNDATION_VALUE),'CONCRETE BLOCK',1)!=0 => 'K',
                                     stringlib.stringfind(stringlib.stringtouppercase(L.FOUNDATION_VALUE),'CRAWL',1)!=0          => 'B',
									 stringlib.stringfind(stringlib.stringtouppercase(L.FOUNDATION_VALUE),'CROSSED WALLS',1)!=0  => 'C',
									 stringlib.stringfind(stringlib.stringtouppercase(L.FOUNDATION_VALUE),'MASONRY',1)!=0        => 'D',
									 stringlib.stringfind(stringlib.stringtouppercase(L.FOUNDATION_VALUE),'EARTH',1)!=0          => 'E',
									 stringlib.stringfind(stringlib.stringtouppercase(L.FOUNDATION_VALUE),'MUD',1)!=0            => 'F',
									 stringlib.stringfind(stringlib.stringtouppercase(L.FOUNDATION_VALUE),'STONE',1)!=0          => 'G',
									 stringlib.stringfind(stringlib.stringtouppercase(L.FOUNDATION_VALUE),'CONCRETE',1)!=0       => 'A',
									 stringlib.stringfind(stringlib.stringtouppercase(L.FOUNDATION_VALUE),'PILING',1)!=0         => 'L',
									 stringlib.stringfind(stringlib.stringtouppercase(L.FOUNDATION_VALUE),'PIERS',1)!=0          => 'P',
									 stringlib.stringfind(stringlib.stringtouppercase(L.FOUNDATION_VALUE),'RETAINING',1)!=0      => 'R',
									 stringlib.stringfind(stringlib.stringtouppercase(L.FOUNDATION_VALUE),'SLAB',1)!=0           => 'S',
									 stringlib.stringfind(stringlib.stringtouppercase(L.FOUNDATION_VALUE),'FOOTING',1)!=0        => 'T',
									 stringlib.stringfind(stringlib.stringtouppercase(L.FOUNDATION_VALUE),'WOOD',1)!=0           => 'W',
									 trim(L.FOUNDATION_VALUE,left,right)=''                                                      => 'O',
									 L.FOUNDATION_VALUE);
  //Defined code 'Z' to handle the ambiguity due to 'GARAGE' representing 2
  //coded values ('Y' and 'G').									 
  self.garage_type_code       := map(stringlib.stringfind(stringlib.stringtouppercase(L.GARAGETYPE_VALUE),'ATTACHED',1)!=0          => 'A',
                                     stringlib.stringfind(stringlib.stringtouppercase(L.GARAGETYPE_VALUE),'BUILT',1)!=0             => 'B',
									 stringlib.stringfind(stringlib.stringtouppercase(L.GARAGETYPE_VALUE),'CARPORT',1)!=0           => 'C',
									 stringlib.stringfind(stringlib.stringtouppercase(L.GARAGETYPE_VALUE),'DETACHED',1)!=0          => 'D',
									 stringlib.stringfind(stringlib.stringtouppercase(L.GARAGETYPE_VALUE),'POLE',1)!=0              => 'E',
									 stringlib.stringfind(stringlib.stringtouppercase(L.GARAGETYPE_VALUE),'OFFSITE',1)!=0           => 'F',
									 stringlib.stringfind(stringlib.stringtouppercase(L.GARAGETYPE_VALUE),'GARAGE',1)!=0            => 'Z',
									 stringlib.stringfind(stringlib.stringtouppercase(L.GARAGETYPE_VALUE),'UNIMPROVED',1)!=0        => 'K',
									 stringlib.stringfind(stringlib.stringtouppercase(L.GARAGETYPE_VALUE),'PARKING LOT',1)!=0       => 'L',
									 stringlib.stringfind(stringlib.stringtouppercase(L.GARAGETYPE_VALUE),'MIXED',1)!=0             => 'M',
									 stringlib.stringfind(stringlib.stringtouppercase(L.GARAGETYPE_VALUE),'NONE',1)!=0              => 'N',
									 stringlib.stringfind(stringlib.stringtouppercase(L.GARAGETYPE_VALUE),'OPEN',1)!=0              => 'O',
									 stringlib.stringfind(stringlib.stringtouppercase(L.GARAGETYPE_VALUE),'PAVED',1)!=0             => 'P',
									 stringlib.stringfind(stringlib.stringtouppercase(L.GARAGETYPE_VALUE),'RAMP',1)!=0              => 'R',
									 stringlib.stringfind(stringlib.stringtouppercase(L.GARAGETYPE_VALUE),'PARKING STRUCTURE',1)!=0 => 'S',
									 stringlib.stringfind(stringlib.stringtouppercase(L.GARAGETYPE_VALUE),'TUCKUNDER',1)!=0         => 'T',
									 stringlib.stringfind(stringlib.stringtouppercase(L.GARAGETYPE_VALUE),'UNDERGROUND',1)!=0       => 'U',
									 stringlib.stringfind(stringlib.stringtouppercase(L.GARAGETYPE_VALUE),'COVERED',1)!=0           => 'V',
									 L.GARAGETYPE_VALUE);
  self.roof_cover_code        := map(stringlib.stringfind(stringlib.stringtouppercase(L.ROOF_VALUE),'ASBESTOS',1)!=0            => 'A',
                                     stringlib.stringfind(stringlib.stringtouppercase(L.ROOF_VALUE),'BUILT',1)!=0               => 'B',
									 stringlib.stringfind(stringlib.stringtouppercase(L.ROOF_VALUE),'COMPOSITION SHINGLE',1)!=0 => 'C',
									 stringlib.stringfind(stringlib.stringtouppercase(L.ROOF_VALUE),'CONCRETE',1)!=0            => 'D',
									 stringlib.stringfind(stringlib.stringtouppercase(L.ROOF_VALUE),'METAL',1)!=0               => 'E',
									 stringlib.stringfind(stringlib.stringtouppercase(L.ROOF_VALUE),'SLATE',1)!=0               => 'F',
									 stringlib.stringfind(stringlib.stringtouppercase(L.ROOF_VALUE),'GRAVEL/ROCK',1)!=0         => 'G',
									 stringlib.stringfind(stringlib.stringtouppercase(L.ROOF_VALUE),'TAR & GRAVEL',1)!=0        => 'H',
									 stringlib.stringfind(stringlib.stringtouppercase(L.ROOF_VALUE),'MASONITE',1)!=0            => 'J',
									 stringlib.stringfind(stringlib.stringtouppercase(L.ROOF_VALUE),'ALUMINUM',1)!=0            => 'L',
									 stringlib.stringfind(stringlib.stringtouppercase(L.ROOF_VALUE),'WOOD SHAKE',1)!=0          => 'M',
									 stringlib.stringfind(stringlib.stringtouppercase(L.ROOF_VALUE),'ASPHALT',1)!=0             => 'P',
									 stringlib.stringfind(stringlib.stringtouppercase(L.ROOF_VALUE),'ROLL COMPOSITION',1)!=0    => 'R',
									 stringlib.stringfind(stringlib.stringtouppercase(L.ROOF_VALUE),'STEEL',1)!=0               => 'S',
									 stringlib.stringfind(stringlib.stringtouppercase(L.ROOF_VALUE),'TILE',1)!=0                => 'T',
									 stringlib.stringfind(stringlib.stringtouppercase(L.ROOF_VALUE),'URETHANE',1)!=0            => 'U',
									 stringlib.stringfind(stringlib.stringtouppercase(L.ROOF_VALUE),'SHINGLE (NOT WOOD)',1)!=0  => 'V',
									 stringlib.stringfind(stringlib.stringtouppercase(L.ROOF_VALUE),'WOOD',1)!=0                => 'W',
									 stringlib.stringfind(stringlib.stringtouppercase(L.ROOF_VALUE),'GYPSUM',1)!=0              => 'Y',
									 trim(L.ROOF_VALUE,left,right)=''                                                           => 'O',
							         L.ROOF_VALUE);									
  self.parking_no_of_cars     := L.GARAGESIZE_VALUE;
  self.elevator               := L.ELEVATOR_VALUE;
  //Defined code 'Z' to handle the ambiguity due to 'Pool' representing 2
  //coded values ('Y' and 'P').  
  self.pool_code              := map(stringlib.stringfind(stringlib.stringtouppercase(L.POOLSPA_VALUE),'ABOVE GROUND',1)!=0      => 'A',
                                     stringlib.stringfind(stringlib.stringtouppercase(L.POOLSPA_VALUE),'POOL & SPA',1)!=0        => 'B',
									 stringlib.stringfind(stringlib.stringtouppercase(L.POOLSPA_VALUE),'COMMUNITY',1)!=0         => 'C',
									 stringlib.stringfind(stringlib.stringtouppercase(L.POOLSPA_VALUE),'SOLAR HEATED POOL',1)!=0 => 'L',
									 stringlib.stringfind(stringlib.stringtouppercase(L.POOLSPA_VALUE),'INDOOR',1)!=0            => 'I',
									 stringlib.stringfind(stringlib.stringtouppercase(L.POOLSPA_VALUE),'HEATED POOL',1)!=0       => 'H',
									 stringlib.stringfind(stringlib.stringtouppercase(L.POOLSPA_VALUE),'SPA',1)!=0               => 'S',
									 stringlib.stringfind(stringlib.stringtouppercase(L.POOLSPA_VALUE),'POOL',1)!=0              => 'Z',
									 L.POOLSPA_VALUE);
  self.land_acres             := if(stringlib.stringfind(L.LOTSIZE_VALUE,'AC',1)!=0,L.LOTSIZE_VALUE,'');
  self.land_square_footage    := if(stringlib.stringfind(L.LOTSIZE_VALUE,'SF',1)!=0,L.LOTSIZE_VALUE,'');
  self.land_dimensions        := if(stringlib.stringfind(L.LOTSIZE_VALUE,'X',1)!=0,L.LOTSIZE_VALUE,'');
  self.building_area          := L.BUILDINGAREA_VALUE;

  self.building_class_code := map(stringlib.stringfind(stringlib.stringtouppercase(L.INSUR_CLASS),'FIREPROOFED STRUCTURAL STEEL FRAMES',1)!=0    => 'A',
                                  stringlib.stringfind(stringlib.stringtouppercase(L.INSUR_CLASS),'FIREPROOFED REINFORCED CONCRETE FRAMES',1)!=0 => 'B',
								  stringlib.stringfind(stringlib.stringtouppercase(L.INSUR_CLASS),'EXTERIOR WALLS BUILT OF A',1)!=0              => 'C',
								  stringlib.stringfind(stringlib.stringtouppercase(L.INSUR_CLASS),'WOOD OR WOOD AND STEEL FRAMES',1)!=0          => 'D',
								  trim(L.INSUR_CLASS,left,right)=''                                                                              => 'S',
								  '');
  
  self.dummy_seg               := L.DUMMY_SEG;
  self.lexis_no                := L.LEXIS_NO;
  self.page_no                 := L.PAGE_NO;
  self.owner_2                 := L.OWNER_2;
  self.message_1               := L.MESSAGE_1;
  self.message_2               := L.MESSAGE_2;
  self.vdi                     := L.VDI;
  self.audit_trail             := L.AUDIT_TRAIL;
  self.audit_1                 := L.AUDIT_1;
  self.audit_2                 := L.AUDIT_2;
  self.audit_3                 := L.AUDIT_3;
  self.file_code               := L.FILE_CODE;
  self.on_lexis                := L.ON_LEXIS;
  self.source                  := L.SOURCE;
  self.content                 := L.CONTENT;
  self.copy_2                  := L.COPY_2;
  self.lxdseg                  := L.LXDSEG;
  
  self.clean_property_address  := AddrCleanLib.CleanAddress182(LN_Functions.Function_Property_FullStreetAddress(L.PROP_ADDRESS_1, L.PROP_ADDRESS_2),
                                                               LN_Functions.Function_Property_CityStateZip(L.PROP_ADDRESS_1, L.PROP_ADDRESS_2));
  self.clean_mailing_address   := AddrCleanLib.CleanAddress182(LN_Functions.Function_FullStreetAddress(L.MAILING_ADDRESS),
                                                               LN_Functions.Function_CityStateZip(L.MAILING_ADDRESS));
  self := [];
END;

Result := project(source_file, MapToCommonModel(left));

//output(Result);
output(Result,,'~thor_data400::out::LN_FARES_PROPERTY_DAYTN_DATA',overwrite);


//export File_Out_DAYTN_AL_AUTAUGA := 'todo';