/* *************************************************************************************************************
PRTE2_Liens_Ins.U_fSpraySpecial
As a final step for new data generated by PRTE2_Liens_Ins_DataPrep.U_Generate_Secondary_Records
I need to spray, but during the spray in DEV - empty the tax_id and record_code columns and move them to ln_product_notes
************************************************************************************************************* */

IMPORT PRTE2_Liens_Ins,LiensV2,PromoteSupers,PRTE2_Common;

EXPORT U_fSpraySpecial := MODULE


	//***************************************************************************************************************************
	// PRTE2_Liens_Ins.fSprays.fSpray_Main()
	EXPORT fSpray_Main (STRING CSVName, STRING tcluster='') := FUNCTION
			TargetCluster := IF(tcluster='',ThorLib.Group(),tcluster);

			sprayFile    := FileServices.SprayVariable(Constants.LandingZoneIP,					// file LZ
																								Constants.SourcePathForCSV+CSVName, 			// path to file on landing zone
																								8192,																// maximum record size
																								Constants.CSVSprayFieldSeparator,		// field separator(s)
																								Constants.CSVSprayLineSeparator,		// line separator(s)
																								Constants.CSVSprayQuote,						// text quote character
																								TargetCluster,									// destination THOR cluster
																								Files.main_TmpFile_Name,
																								-1,												  				// -1 means no timeout
																									,													  			// use default ESP server IP port
																									,														 	 		// use default maximum connections
																								TRUE,												 		 		// allow overwrite
																								PRTE2_Common.Constants.SPRAY_REPLICATE,		// replicate if in PROD
																								TRUE												  			// compress
																								);																					 

			//**** Any preprocessing needed *****************************************************************
			newMainData1 := Files.main_TmpFile_DS;
			newMainData1 tBaseStatus(newMainData1 L) := TRANSFORM
					SELF.ln_product_notes := L.record_code;
					SELF.record_code := '';
					SELF.CUST_TEST_DATA_TYPE := 'PUBLIC';
					SELF.AGE_DATA_FLAG := 'Y';
					SELF := L;
			END;
			newMainData := PROJECT(newMainData1,tBaseStatus(LEFT));
			//TODO - I think we need to intialize some fields in there too.
			//TODO - absolutely need an "ADD" process to initialize the tnsid, rnsid, etc
			//***********************************************************************************************
			
			// No let's leave the "IN" file in the raw layout, then do the TRANSFORM above before writing the final base file.
			PromoteSupers.Mac_SF_BuildProcess(newMainData, Files.Main_IN_Name, build_main_in);
			delSprayedFile  := FileServices.DeleteLogicalFile (Files.main_TmpFile_Name);
			RETURN SEQUENTIAL( sprayFile, build_main_in, delSprayedFile );
			
	END;
	//***************************************************************************************************************************

	//***************************************************************************************************************************
	// PRTE2_Liens_Ins.fSprays.fSpray_Party()
	EXPORT fSpray_Party(STRING CSVName, STRING tcluster='')  := FUNCTION
			TargetCluster := IF(tcluster='',ThorLib.Group(),tcluster);

			sprayFile    := FileServices.SprayVariable(Constants.LandingZoneIP,					// file LZ
																								Constants.SourcePathForCSV+CSVName, 			// path to file on landing zone
																								8192,																// maximum record size
																								Constants.CSVSprayFieldSeparator,		// field separator(s)
																								Constants.CSVSprayLineSeparator,		// line separator(s)
																								Constants.CSVSprayQuote,						// text quote character
																								TargetCluster,															// destination THOR cluster
																								Files.party_TmpFile_Name,
																								-1,												  				// -1 means no timeout
																									,													  			// use default ESP server IP port
																									,														 	 		// use default maximum connections
																								TRUE,												 		 		// allow overwrite
																								PRTE2_Common.Constants.SPRAY_REPLICATE,		// replicate if in PROD
																								TRUE												  			// compress
																								);																					 

			//**** Any preprocessing needed *****************************************************************
			newpartyData1 := PRTE2_Common.mac_ConvertToUpperCase(Files.party_TmpFile_DS , fname, mname, lname);
			newpartyData1 tBaseParty(newpartyData1 L) := TRANSFORM
					SELF.ln_product_notes := L.tax_id;
					SELF.tax_id := '';
					SELF.CUST_TEST_DATA_TYPE := 'PUBLIC';
					SELF.AGE_DATA_FLAG := 'Y';
					SELF := L;
			END;
			newpartyData := PROJECT(newpartyData1,tBaseParty(LEFT));
			//***********************************************************************************************
			PromoteSupers.Mac_SF_BuildProcess(newpartyData, Files.party_IN_Name, build_party_in);
			// party_In := Files.Party_IN_DS;
			// PromoteSupers.Mac_SF_BuildProcess(party_In, Files.Party_Name_SF, build_party_base);
			delSprayedFile  := FileServices.DeleteLogicalFile (Files.party_TmpFile_Name);
			RETURN SEQUENTIAL( sprayFile, build_party_in, delSprayedFile );
	END;
	//***************************************************************************************************************************

// Not needed?
	// EXPORT fSpray_Status() := FUNCTION
	// END;

END;