IMPORT ut,SALT33;
IMPORT Scrubs; // Import modules for FieldTypes attribute definitions
EXPORT offense_Fields := MODULE
// Processing for each FieldType
EXPORT SALT33.StrType FieldTypeName(UNSIGNED2 i) := CHOOSE(i,'Invalid_Record_ID','Invalid_Char','Non_Blank','Invalid_Current_Date','Invalid_VictimUnder18','Invalid_Num');
EXPORT FieldTypeNum(SALT33.StrType fn) := CASE(fn,'Invalid_Record_ID' => 1,'Invalid_Char' => 2,'Non_Blank' => 3,'Invalid_Current_Date' => 4,'Invalid_VictimUnder18' => 5,'Invalid_Num' => 6,0);
EXPORT MakeFT_Invalid_Record_ID(SALT33.StrType s0) := FUNCTION
  s1 := SALT33.stringfilter(s0,'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_'); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_Invalid_Record_ID(SALT33.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT33.StringFilter(s,'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_'))));
EXPORT InValidMessageFT_Invalid_Record_ID(UNSIGNED1 wh) := CHOOSE(wh,SALT33.HygieneErrors.NotInChars('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_'),SALT33.HygieneErrors.Good);
EXPORT MakeFT_Invalid_Char(SALT33.StrType s0) := FUNCTION
  s1 := SALT33.stringfilter(s0,'ABCDEFGHIJKLMNOPQRSTUVWXYZ'); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_Invalid_Char(SALT33.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT33.StringFilter(s,'ABCDEFGHIJKLMNOPQRSTUVWXYZ'))));
EXPORT InValidMessageFT_Invalid_Char(UNSIGNED1 wh) := CHOOSE(wh,SALT33.HygieneErrors.NotInChars('ABCDEFGHIJKLMNOPQRSTUVWXYZ'),SALT33.HygieneErrors.Good);
EXPORT MakeFT_Non_Blank(SALT33.StrType s0) := FUNCTION
  RETURN  s0;
END;
EXPORT InValidFT_Non_Blank(SALT33.StrType s) := WHICH(~(LENGTH(TRIM(s)) >= 1));
EXPORT InValidMessageFT_Non_Blank(UNSIGNED1 wh) := CHOOSE(wh,SALT33.HygieneErrors.NotLength('1..'),SALT33.HygieneErrors.Good);
EXPORT MakeFT_Invalid_Current_Date(SALT33.StrType s0) := FUNCTION
  RETURN  s0;
END;
EXPORT InValidFT_Invalid_Current_Date(SALT33.StrType s) := WHICH(~Scrubs.fn_valid_date(s)>0);
EXPORT InValidMessageFT_Invalid_Current_Date(UNSIGNED1 wh) := CHOOSE(wh,SALT33.HygieneErrors.CustomFail('Scrubs.fn_valid_date'),SALT33.HygieneErrors.Good);
EXPORT MakeFT_Invalid_VictimUnder18(SALT33.StrType s0) := FUNCTION
  RETURN  s0;
END;
EXPORT InValidFT_Invalid_VictimUnder18(SALT33.StrType s) := WHICH(((SALT33.StrType) s) NOT IN ['Y','N','']);
EXPORT InValidMessageFT_Invalid_VictimUnder18(UNSIGNED1 wh) := CHOOSE(wh,SALT33.HygieneErrors.NotInEnum('Y|N|'),SALT33.HygieneErrors.Good);
EXPORT MakeFT_Invalid_Num(SALT33.StrType s0) := FUNCTION
  s1 := SALT33.stringfilter(s0,'0123456789'); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_Invalid_Num(SALT33.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT33.StringFilter(s,'0123456789'))));
EXPORT InValidMessageFT_Invalid_Num(UNSIGNED1 wh) := CHOOSE(wh,SALT33.HygieneErrors.NotInChars('0123456789'),SALT33.HygieneErrors.Good);
EXPORT SALT33.StrType FieldName(UNSIGNED2 i) := CHOOSE(i,'recordid','statecode','caseid','casenumber','casetitle','casetype','casestatus','casestatusdate','casecomments','fileddate','caseinfo','docketnumber','offensecode','offensedesc','offensedate','offensetype','offensedegree','offenseclass','dispositionstatus','dispositionstatusdate','disposition','dispositiondate','offenselocation','finaloffense','finaloffensedate','offensecount','victimunder18','prioroffenseflag','initialplea','initialpleadate','finalruling','finalrulingdate','appealstatus','appealdate','courtname','fineamount','courtfee','restitution','trialtype','courtdate','sourcename','sourceid','classification_code','sub_classification_code','unit','city','state','zip','county','institutionname','institutiondetails','institutionreceiptdate','releasetolocation','releasetodetails','deceasedflag','deceaseddate','healthflag','healthdesc','bloodtype','sexoffenderregistrydate','sexoffenderregexpirationdate','sexoffenderregistrynumber','sourceid2','vendor');
EXPORT FieldNum(SALT33.StrType fn) := CASE(fn,'recordid' => 0,'statecode' => 1,'caseid' => 2,'casenumber' => 3,'casetitle' => 4,'casetype' => 5,'casestatus' => 6,'casestatusdate' => 7,'casecomments' => 8,'fileddate' => 9,'caseinfo' => 10,'docketnumber' => 11,'offensecode' => 12,'offensedesc' => 13,'offensedate' => 14,'offensetype' => 15,'offensedegree' => 16,'offenseclass' => 17,'dispositionstatus' => 18,'dispositionstatusdate' => 19,'disposition' => 20,'dispositiondate' => 21,'offenselocation' => 22,'finaloffense' => 23,'finaloffensedate' => 24,'offensecount' => 25,'victimunder18' => 26,'prioroffenseflag' => 27,'initialplea' => 28,'initialpleadate' => 29,'finalruling' => 30,'finalrulingdate' => 31,'appealstatus' => 32,'appealdate' => 33,'courtname' => 34,'fineamount' => 35,'courtfee' => 36,'restitution' => 37,'trialtype' => 38,'courtdate' => 39,'sourcename' => 40,'sourceid' => 41,'classification_code' => 42,'sub_classification_code' => 43,'unit' => 44,'city' => 45,'state' => 46,'zip' => 47,'county' => 48,'institutionname' => 49,'institutiondetails' => 50,'institutionreceiptdate' => 51,'releasetolocation' => 52,'releasetodetails' => 53,'deceasedflag' => 54,'deceaseddate' => 55,'healthflag' => 56,'healthdesc' => 57,'bloodtype' => 58,'sexoffenderregistrydate' => 59,'sexoffenderregexpirationdate' => 60,'sexoffenderregistrynumber' => 61,'sourceid2' => 62,'vendor' => 63,0);
//Individual field level validation
EXPORT Make_recordid(SALT33.StrType s0) := MakeFT_Invalid_Record_ID(s0);
EXPORT InValid_recordid(SALT33.StrType s) := InValidFT_Invalid_Record_ID(s);
EXPORT InValidMessage_recordid(UNSIGNED1 wh) := InValidMessageFT_Invalid_Record_ID(wh);
EXPORT Make_statecode(SALT33.StrType s0) := MakeFT_Invalid_Char(s0);
EXPORT InValid_statecode(SALT33.StrType s) := InValidFT_Invalid_Char(s);
EXPORT InValidMessage_statecode(UNSIGNED1 wh) := InValidMessageFT_Invalid_Char(wh);
EXPORT Make_caseid(SALT33.StrType s0) := MakeFT_Non_Blank(s0);
EXPORT InValid_caseid(SALT33.StrType s) := InValidFT_Non_Blank(s);
EXPORT InValidMessage_caseid(UNSIGNED1 wh) := InValidMessageFT_Non_Blank(wh);
EXPORT Make_casenumber(SALT33.StrType s0) := s0;
EXPORT InValid_casenumber(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_casenumber(UNSIGNED1 wh) := '';
EXPORT Make_casetitle(SALT33.StrType s0) := s0;
EXPORT InValid_casetitle(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_casetitle(UNSIGNED1 wh) := '';
EXPORT Make_casetype(SALT33.StrType s0) := s0;
EXPORT InValid_casetype(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_casetype(UNSIGNED1 wh) := '';
EXPORT Make_casestatus(SALT33.StrType s0) := s0;
EXPORT InValid_casestatus(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_casestatus(UNSIGNED1 wh) := '';
EXPORT Make_casestatusdate(SALT33.StrType s0) := MakeFT_Invalid_Current_Date(s0);
EXPORT InValid_casestatusdate(SALT33.StrType s) := InValidFT_Invalid_Current_Date(s);
EXPORT InValidMessage_casestatusdate(UNSIGNED1 wh) := InValidMessageFT_Invalid_Current_Date(wh);
EXPORT Make_casecomments(SALT33.StrType s0) := s0;
EXPORT InValid_casecomments(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_casecomments(UNSIGNED1 wh) := '';
EXPORT Make_fileddate(SALT33.StrType s0) := MakeFT_Invalid_Current_Date(s0);
EXPORT InValid_fileddate(SALT33.StrType s) := InValidFT_Invalid_Current_Date(s);
EXPORT InValidMessage_fileddate(UNSIGNED1 wh) := InValidMessageFT_Invalid_Current_Date(wh);
EXPORT Make_caseinfo(SALT33.StrType s0) := s0;
EXPORT InValid_caseinfo(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_caseinfo(UNSIGNED1 wh) := '';
EXPORT Make_docketnumber(SALT33.StrType s0) := s0;
EXPORT InValid_docketnumber(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_docketnumber(UNSIGNED1 wh) := '';
EXPORT Make_offensecode(SALT33.StrType s0) := s0;
EXPORT InValid_offensecode(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_offensecode(UNSIGNED1 wh) := '';
EXPORT Make_offensedesc(SALT33.StrType s0) := s0;
EXPORT InValid_offensedesc(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_offensedesc(UNSIGNED1 wh) := '';
EXPORT Make_offensedate(SALT33.StrType s0) := MakeFT_Invalid_Current_Date(s0);
EXPORT InValid_offensedate(SALT33.StrType s) := InValidFT_Invalid_Current_Date(s);
EXPORT InValidMessage_offensedate(UNSIGNED1 wh) := InValidMessageFT_Invalid_Current_Date(wh);
EXPORT Make_offensetype(SALT33.StrType s0) := s0;
EXPORT InValid_offensetype(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_offensetype(UNSIGNED1 wh) := '';
EXPORT Make_offensedegree(SALT33.StrType s0) := s0;
EXPORT InValid_offensedegree(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_offensedegree(UNSIGNED1 wh) := '';
EXPORT Make_offenseclass(SALT33.StrType s0) := s0;
EXPORT InValid_offenseclass(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_offenseclass(UNSIGNED1 wh) := '';
EXPORT Make_dispositionstatus(SALT33.StrType s0) := s0;
EXPORT InValid_dispositionstatus(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_dispositionstatus(UNSIGNED1 wh) := '';
EXPORT Make_dispositionstatusdate(SALT33.StrType s0) := s0;
EXPORT InValid_dispositionstatusdate(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_dispositionstatusdate(UNSIGNED1 wh) := '';
EXPORT Make_disposition(SALT33.StrType s0) := s0;
EXPORT InValid_disposition(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_disposition(UNSIGNED1 wh) := '';
EXPORT Make_dispositiondate(SALT33.StrType s0) := MakeFT_Invalid_Current_Date(s0);
EXPORT InValid_dispositiondate(SALT33.StrType s) := InValidFT_Invalid_Current_Date(s);
EXPORT InValidMessage_dispositiondate(UNSIGNED1 wh) := InValidMessageFT_Invalid_Current_Date(wh);
EXPORT Make_offenselocation(SALT33.StrType s0) := s0;
EXPORT InValid_offenselocation(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_offenselocation(UNSIGNED1 wh) := '';
EXPORT Make_finaloffense(SALT33.StrType s0) := s0;
EXPORT InValid_finaloffense(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_finaloffense(UNSIGNED1 wh) := '';
EXPORT Make_finaloffensedate(SALT33.StrType s0) := MakeFT_Invalid_Current_Date(s0);
EXPORT InValid_finaloffensedate(SALT33.StrType s) := InValidFT_Invalid_Current_Date(s);
EXPORT InValidMessage_finaloffensedate(UNSIGNED1 wh) := InValidMessageFT_Invalid_Current_Date(wh);
EXPORT Make_offensecount(SALT33.StrType s0) := s0;
EXPORT InValid_offensecount(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_offensecount(UNSIGNED1 wh) := '';
EXPORT Make_victimunder18(SALT33.StrType s0) := MakeFT_Invalid_VictimUnder18(s0);
EXPORT InValid_victimunder18(SALT33.StrType s) := InValidFT_Invalid_VictimUnder18(s);
EXPORT InValidMessage_victimunder18(UNSIGNED1 wh) := InValidMessageFT_Invalid_VictimUnder18(wh);
EXPORT Make_prioroffenseflag(SALT33.StrType s0) := s0;
EXPORT InValid_prioroffenseflag(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_prioroffenseflag(UNSIGNED1 wh) := '';
EXPORT Make_initialplea(SALT33.StrType s0) := s0;
EXPORT InValid_initialplea(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_initialplea(UNSIGNED1 wh) := '';
EXPORT Make_initialpleadate(SALT33.StrType s0) := MakeFT_Invalid_Current_Date(s0);
EXPORT InValid_initialpleadate(SALT33.StrType s) := InValidFT_Invalid_Current_Date(s);
EXPORT InValidMessage_initialpleadate(UNSIGNED1 wh) := InValidMessageFT_Invalid_Current_Date(wh);
EXPORT Make_finalruling(SALT33.StrType s0) := s0;
EXPORT InValid_finalruling(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_finalruling(UNSIGNED1 wh) := '';
EXPORT Make_finalrulingdate(SALT33.StrType s0) := MakeFT_Invalid_Current_Date(s0);
EXPORT InValid_finalrulingdate(SALT33.StrType s) := InValidFT_Invalid_Current_Date(s);
EXPORT InValidMessage_finalrulingdate(UNSIGNED1 wh) := InValidMessageFT_Invalid_Current_Date(wh);
EXPORT Make_appealstatus(SALT33.StrType s0) := s0;
EXPORT InValid_appealstatus(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_appealstatus(UNSIGNED1 wh) := '';
EXPORT Make_appealdate(SALT33.StrType s0) := MakeFT_Invalid_Current_Date(s0);
EXPORT InValid_appealdate(SALT33.StrType s) := InValidFT_Invalid_Current_Date(s);
EXPORT InValidMessage_appealdate(UNSIGNED1 wh) := InValidMessageFT_Invalid_Current_Date(wh);
EXPORT Make_courtname(SALT33.StrType s0) := s0;
EXPORT InValid_courtname(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_courtname(UNSIGNED1 wh) := '';
EXPORT Make_fineamount(SALT33.StrType s0) := s0;
EXPORT InValid_fineamount(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_fineamount(UNSIGNED1 wh) := '';
EXPORT Make_courtfee(SALT33.StrType s0) := s0;
EXPORT InValid_courtfee(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_courtfee(UNSIGNED1 wh) := '';
EXPORT Make_restitution(SALT33.StrType s0) := s0;
EXPORT InValid_restitution(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_restitution(UNSIGNED1 wh) := '';
EXPORT Make_trialtype(SALT33.StrType s0) := s0;
EXPORT InValid_trialtype(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_trialtype(UNSIGNED1 wh) := '';
EXPORT Make_courtdate(SALT33.StrType s0) := MakeFT_Invalid_Current_Date(s0);
EXPORT InValid_courtdate(SALT33.StrType s) := InValidFT_Invalid_Current_Date(s);
EXPORT InValidMessage_courtdate(UNSIGNED1 wh) := InValidMessageFT_Invalid_Current_Date(wh);
EXPORT Make_sourcename(SALT33.StrType s0) := s0;
EXPORT InValid_sourcename(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_sourcename(UNSIGNED1 wh) := '';
EXPORT Make_sourceid(SALT33.StrType s0) := s0;
EXPORT InValid_sourceid(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_sourceid(UNSIGNED1 wh) := '';
EXPORT Make_classification_code(SALT33.StrType s0) := s0;
EXPORT InValid_classification_code(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_classification_code(UNSIGNED1 wh) := '';
EXPORT Make_sub_classification_code(SALT33.StrType s0) := s0;
EXPORT InValid_sub_classification_code(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_sub_classification_code(UNSIGNED1 wh) := '';
EXPORT Make_unit(SALT33.StrType s0) := s0;
EXPORT InValid_unit(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_unit(UNSIGNED1 wh) := '';
EXPORT Make_city(SALT33.StrType s0) := s0;
EXPORT InValid_city(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_city(UNSIGNED1 wh) := '';
EXPORT Make_state(SALT33.StrType s0) := s0;
EXPORT InValid_state(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_state(UNSIGNED1 wh) := '';
EXPORT Make_zip(SALT33.StrType s0) := s0;
EXPORT InValid_zip(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_zip(UNSIGNED1 wh) := '';
EXPORT Make_county(SALT33.StrType s0) := s0;
EXPORT InValid_county(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_county(UNSIGNED1 wh) := '';
EXPORT Make_institutionname(SALT33.StrType s0) := s0;
EXPORT InValid_institutionname(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_institutionname(UNSIGNED1 wh) := '';
EXPORT Make_institutiondetails(SALT33.StrType s0) := s0;
EXPORT InValid_institutiondetails(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_institutiondetails(UNSIGNED1 wh) := '';
EXPORT Make_institutionreceiptdate(SALT33.StrType s0) := s0;
EXPORT InValid_institutionreceiptdate(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_institutionreceiptdate(UNSIGNED1 wh) := '';
EXPORT Make_releasetolocation(SALT33.StrType s0) := s0;
EXPORT InValid_releasetolocation(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_releasetolocation(UNSIGNED1 wh) := '';
EXPORT Make_releasetodetails(SALT33.StrType s0) := s0;
EXPORT InValid_releasetodetails(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_releasetodetails(UNSIGNED1 wh) := '';
EXPORT Make_deceasedflag(SALT33.StrType s0) := s0;
EXPORT InValid_deceasedflag(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_deceasedflag(UNSIGNED1 wh) := '';
EXPORT Make_deceaseddate(SALT33.StrType s0) := MakeFT_Invalid_Current_Date(s0);
EXPORT InValid_deceaseddate(SALT33.StrType s) := InValidFT_Invalid_Current_Date(s);
EXPORT InValidMessage_deceaseddate(UNSIGNED1 wh) := InValidMessageFT_Invalid_Current_Date(wh);
EXPORT Make_healthflag(SALT33.StrType s0) := s0;
EXPORT InValid_healthflag(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_healthflag(UNSIGNED1 wh) := '';
EXPORT Make_healthdesc(SALT33.StrType s0) := s0;
EXPORT InValid_healthdesc(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_healthdesc(UNSIGNED1 wh) := '';
EXPORT Make_bloodtype(SALT33.StrType s0) := s0;
EXPORT InValid_bloodtype(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_bloodtype(UNSIGNED1 wh) := '';
EXPORT Make_sexoffenderregistrydate(SALT33.StrType s0) := s0;
EXPORT InValid_sexoffenderregistrydate(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_sexoffenderregistrydate(UNSIGNED1 wh) := '';
EXPORT Make_sexoffenderregexpirationdate(SALT33.StrType s0) := s0;
EXPORT InValid_sexoffenderregexpirationdate(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_sexoffenderregexpirationdate(UNSIGNED1 wh) := '';
EXPORT Make_sexoffenderregistrynumber(SALT33.StrType s0) := s0;
EXPORT InValid_sexoffenderregistrynumber(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_sexoffenderregistrynumber(UNSIGNED1 wh) := '';
EXPORT Make_sourceid2(SALT33.StrType s0) := s0;
EXPORT InValid_sourceid2(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_sourceid2(UNSIGNED1 wh) := '';
EXPORT Make_vendor(SALT33.StrType s0) := s0;
EXPORT InValid_vendor(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_vendor(UNSIGNED1 wh) := '';
// This macro will compute and count field level differences based upon a pivot expression
export MAC_CountDifferencesByPivot(in_left,in_right,pivot_exp,bad_pivots,out_counts) := MACRO
  IMPORT SALT33,Scrubs_Crim;
//Find those highly occuring pivot values to remove them from consideration
#uniquename(tr)
  %tr% := table(in_left+in_right,{ val := pivot_exp; });
#uniquename(r1)
  %r1% := record
    %tr%.val;    unsigned Cnt := COUNT(GROUP);
  end;
#uniquename(t1)
  %t1% := table(%tr%,%r1%,val,local); // Pre-aggregate before distribute
#uniquename(r2)
  %r2% := record
    %t1%.val;    unsigned Cnt := SUM(GROUP,%t1%.Cnt);
  end;
#uniquename(t2)
  %t2% := table(%t1%,%r2%,val); // Now do global aggregate
Bad_Pivots := %t2%(Cnt>100);
#uniquename(dl)
  %dl% := RECORD
    BOOLEAN Diff_recordid;
    BOOLEAN Diff_statecode;
    BOOLEAN Diff_caseid;
    BOOLEAN Diff_casenumber;
    BOOLEAN Diff_casetitle;
    BOOLEAN Diff_casetype;
    BOOLEAN Diff_casestatus;
    BOOLEAN Diff_casestatusdate;
    BOOLEAN Diff_casecomments;
    BOOLEAN Diff_fileddate;
    BOOLEAN Diff_caseinfo;
    BOOLEAN Diff_docketnumber;
    BOOLEAN Diff_offensecode;
    BOOLEAN Diff_offensedesc;
    BOOLEAN Diff_offensedate;
    BOOLEAN Diff_offensetype;
    BOOLEAN Diff_offensedegree;
    BOOLEAN Diff_offenseclass;
    BOOLEAN Diff_dispositionstatus;
    BOOLEAN Diff_dispositionstatusdate;
    BOOLEAN Diff_disposition;
    BOOLEAN Diff_dispositiondate;
    BOOLEAN Diff_offenselocation;
    BOOLEAN Diff_finaloffense;
    BOOLEAN Diff_finaloffensedate;
    BOOLEAN Diff_offensecount;
    BOOLEAN Diff_victimunder18;
    BOOLEAN Diff_prioroffenseflag;
    BOOLEAN Diff_initialplea;
    BOOLEAN Diff_initialpleadate;
    BOOLEAN Diff_finalruling;
    BOOLEAN Diff_finalrulingdate;
    BOOLEAN Diff_appealstatus;
    BOOLEAN Diff_appealdate;
    BOOLEAN Diff_courtname;
    BOOLEAN Diff_fineamount;
    BOOLEAN Diff_courtfee;
    BOOLEAN Diff_restitution;
    BOOLEAN Diff_trialtype;
    BOOLEAN Diff_courtdate;
    BOOLEAN Diff_sourcename;
    BOOLEAN Diff_sourceid;
    BOOLEAN Diff_classification_code;
    BOOLEAN Diff_sub_classification_code;
    BOOLEAN Diff_unit;
    BOOLEAN Diff_city;
    BOOLEAN Diff_state;
    BOOLEAN Diff_zip;
    BOOLEAN Diff_county;
    BOOLEAN Diff_institutionname;
    BOOLEAN Diff_institutiondetails;
    BOOLEAN Diff_institutionreceiptdate;
    BOOLEAN Diff_releasetolocation;
    BOOLEAN Diff_releasetodetails;
    BOOLEAN Diff_deceasedflag;
    BOOLEAN Diff_deceaseddate;
    BOOLEAN Diff_healthflag;
    BOOLEAN Diff_healthdesc;
    BOOLEAN Diff_bloodtype;
    BOOLEAN Diff_sexoffenderregistrydate;
    BOOLEAN Diff_sexoffenderregexpirationdate;
    BOOLEAN Diff_sexoffenderregistrynumber;
    BOOLEAN Diff_sourceid2;
    BOOLEAN Diff_vendor;
    SALT33.StrType SourceField {MAXLENGTH(30)};
    UNSIGNED Num_Diffs;
    SALT33.StrType Val {MAXLENGTH(1024)};
  END;
#uniquename(fd)
  %dl% %fd%(in_left le,in_right ri) := TRANSFORM
    SELF.Diff_recordid := le.recordid <> ri.recordid;
    SELF.Diff_statecode := le.statecode <> ri.statecode;
    SELF.Diff_caseid := le.caseid <> ri.caseid;
    SELF.Diff_casenumber := le.casenumber <> ri.casenumber;
    SELF.Diff_casetitle := le.casetitle <> ri.casetitle;
    SELF.Diff_casetype := le.casetype <> ri.casetype;
    SELF.Diff_casestatus := le.casestatus <> ri.casestatus;
    SELF.Diff_casestatusdate := le.casestatusdate <> ri.casestatusdate;
    SELF.Diff_casecomments := le.casecomments <> ri.casecomments;
    SELF.Diff_fileddate := le.fileddate <> ri.fileddate;
    SELF.Diff_caseinfo := le.caseinfo <> ri.caseinfo;
    SELF.Diff_docketnumber := le.docketnumber <> ri.docketnumber;
    SELF.Diff_offensecode := le.offensecode <> ri.offensecode;
    SELF.Diff_offensedesc := le.offensedesc <> ri.offensedesc;
    SELF.Diff_offensedate := le.offensedate <> ri.offensedate;
    SELF.Diff_offensetype := le.offensetype <> ri.offensetype;
    SELF.Diff_offensedegree := le.offensedegree <> ri.offensedegree;
    SELF.Diff_offenseclass := le.offenseclass <> ri.offenseclass;
    SELF.Diff_dispositionstatus := le.dispositionstatus <> ri.dispositionstatus;
    SELF.Diff_dispositionstatusdate := le.dispositionstatusdate <> ri.dispositionstatusdate;
    SELF.Diff_disposition := le.disposition <> ri.disposition;
    SELF.Diff_dispositiondate := le.dispositiondate <> ri.dispositiondate;
    SELF.Diff_offenselocation := le.offenselocation <> ri.offenselocation;
    SELF.Diff_finaloffense := le.finaloffense <> ri.finaloffense;
    SELF.Diff_finaloffensedate := le.finaloffensedate <> ri.finaloffensedate;
    SELF.Diff_offensecount := le.offensecount <> ri.offensecount;
    SELF.Diff_victimunder18 := le.victimunder18 <> ri.victimunder18;
    SELF.Diff_prioroffenseflag := le.prioroffenseflag <> ri.prioroffenseflag;
    SELF.Diff_initialplea := le.initialplea <> ri.initialplea;
    SELF.Diff_initialpleadate := le.initialpleadate <> ri.initialpleadate;
    SELF.Diff_finalruling := le.finalruling <> ri.finalruling;
    SELF.Diff_finalrulingdate := le.finalrulingdate <> ri.finalrulingdate;
    SELF.Diff_appealstatus := le.appealstatus <> ri.appealstatus;
    SELF.Diff_appealdate := le.appealdate <> ri.appealdate;
    SELF.Diff_courtname := le.courtname <> ri.courtname;
    SELF.Diff_fineamount := le.fineamount <> ri.fineamount;
    SELF.Diff_courtfee := le.courtfee <> ri.courtfee;
    SELF.Diff_restitution := le.restitution <> ri.restitution;
    SELF.Diff_trialtype := le.trialtype <> ri.trialtype;
    SELF.Diff_courtdate := le.courtdate <> ri.courtdate;
    SELF.Diff_sourcename := le.sourcename <> ri.sourcename;
    SELF.Diff_sourceid := le.sourceid <> ri.sourceid;
    SELF.Diff_classification_code := le.classification_code <> ri.classification_code;
    SELF.Diff_sub_classification_code := le.sub_classification_code <> ri.sub_classification_code;
    SELF.Diff_unit := le.unit <> ri.unit;
    SELF.Diff_city := le.city <> ri.city;
    SELF.Diff_state := le.state <> ri.state;
    SELF.Diff_zip := le.zip <> ri.zip;
    SELF.Diff_county := le.county <> ri.county;
    SELF.Diff_institutionname := le.institutionname <> ri.institutionname;
    SELF.Diff_institutiondetails := le.institutiondetails <> ri.institutiondetails;
    SELF.Diff_institutionreceiptdate := le.institutionreceiptdate <> ri.institutionreceiptdate;
    SELF.Diff_releasetolocation := le.releasetolocation <> ri.releasetolocation;
    SELF.Diff_releasetodetails := le.releasetodetails <> ri.releasetodetails;
    SELF.Diff_deceasedflag := le.deceasedflag <> ri.deceasedflag;
    SELF.Diff_deceaseddate := le.deceaseddate <> ri.deceaseddate;
    SELF.Diff_healthflag := le.healthflag <> ri.healthflag;
    SELF.Diff_healthdesc := le.healthdesc <> ri.healthdesc;
    SELF.Diff_bloodtype := le.bloodtype <> ri.bloodtype;
    SELF.Diff_sexoffenderregistrydate := le.sexoffenderregistrydate <> ri.sexoffenderregistrydate;
    SELF.Diff_sexoffenderregexpirationdate := le.sexoffenderregexpirationdate <> ri.sexoffenderregexpirationdate;
    SELF.Diff_sexoffenderregistrynumber := le.sexoffenderregistrynumber <> ri.sexoffenderregistrynumber;
    SELF.Diff_sourceid2 := le.sourceid2 <> ri.sourceid2;
    SELF.Diff_vendor := le.vendor <> ri.vendor;
    SELF.Val := (SALT33.StrType)evaluate(le,pivot_exp);
    SELF.SourceField := le.vendor;
    SELF.Num_Diffs := 0+ IF( SELF.Diff_recordid,1,0)+ IF( SELF.Diff_statecode,1,0)+ IF( SELF.Diff_caseid,1,0)+ IF( SELF.Diff_casenumber,1,0)+ IF( SELF.Diff_casetitle,1,0)+ IF( SELF.Diff_casetype,1,0)+ IF( SELF.Diff_casestatus,1,0)+ IF( SELF.Diff_casestatusdate,1,0)+ IF( SELF.Diff_casecomments,1,0)+ IF( SELF.Diff_fileddate,1,0)+ IF( SELF.Diff_caseinfo,1,0)+ IF( SELF.Diff_docketnumber,1,0)+ IF( SELF.Diff_offensecode,1,0)+ IF( SELF.Diff_offensedesc,1,0)+ IF( SELF.Diff_offensedate,1,0)+ IF( SELF.Diff_offensetype,1,0)+ IF( SELF.Diff_offensedegree,1,0)+ IF( SELF.Diff_offenseclass,1,0)+ IF( SELF.Diff_dispositionstatus,1,0)+ IF( SELF.Diff_dispositionstatusdate,1,0)+ IF( SELF.Diff_disposition,1,0)+ IF( SELF.Diff_dispositiondate,1,0)+ IF( SELF.Diff_offenselocation,1,0)+ IF( SELF.Diff_finaloffense,1,0)+ IF( SELF.Diff_finaloffensedate,1,0)+ IF( SELF.Diff_offensecount,1,0)+ IF( SELF.Diff_victimunder18,1,0)+ IF( SELF.Diff_prioroffenseflag,1,0)+ IF( SELF.Diff_initialplea,1,0)+ IF( SELF.Diff_initialpleadate,1,0)+ IF( SELF.Diff_finalruling,1,0)+ IF( SELF.Diff_finalrulingdate,1,0)+ IF( SELF.Diff_appealstatus,1,0)+ IF( SELF.Diff_appealdate,1,0)+ IF( SELF.Diff_courtname,1,0)+ IF( SELF.Diff_fineamount,1,0)+ IF( SELF.Diff_courtfee,1,0)+ IF( SELF.Diff_restitution,1,0)+ IF( SELF.Diff_trialtype,1,0)+ IF( SELF.Diff_courtdate,1,0)+ IF( SELF.Diff_sourcename,1,0)+ IF( SELF.Diff_sourceid,1,0)+ IF( SELF.Diff_classification_code,1,0)+ IF( SELF.Diff_sub_classification_code,1,0)+ IF( SELF.Diff_unit,1,0)+ IF( SELF.Diff_city,1,0)+ IF( SELF.Diff_state,1,0)+ IF( SELF.Diff_zip,1,0)+ IF( SELF.Diff_county,1,0)+ IF( SELF.Diff_institutionname,1,0)+ IF( SELF.Diff_institutiondetails,1,0)+ IF( SELF.Diff_institutionreceiptdate,1,0)+ IF( SELF.Diff_releasetolocation,1,0)+ IF( SELF.Diff_releasetodetails,1,0)+ IF( SELF.Diff_deceasedflag,1,0)+ IF( SELF.Diff_deceaseddate,1,0)+ IF( SELF.Diff_healthflag,1,0)+ IF( SELF.Diff_healthdesc,1,0)+ IF( SELF.Diff_bloodtype,1,0)+ IF( SELF.Diff_sexoffenderregistrydate,1,0)+ IF( SELF.Diff_sexoffenderregexpirationdate,1,0)+ IF( SELF.Diff_sexoffenderregistrynumber,1,0)+ IF( SELF.Diff_sourceid2,1,0)+ IF( SELF.Diff_vendor,1,0);
  END;
// Now need to remove bad pivots from comparison
#uniquename(L)
  %L% := JOIN(in_left,bad_pivots,evaluate(LEFT,pivot_exp)=right.val,transform(left),left only,lookup);
#uniquename(R)
  %R% := JOIN(in_right,bad_pivots,evaluate(LEFT,pivot_exp)=right.val,transform(left),left only,lookup);
#uniquename(DiffL)
  %DiffL% := JOIN(%L%,%R%,evaluate(left,pivot_exp)=evaluate(right,pivot_exp),%fd%(left,right),hash);
#uniquename(Closest)
  %Closest% := DEDUP(SORT(%DiffL%,Val,Num_Diffs,local),Val,local); // Join will have distributed by pivot_exp
#uniquename(AggRec)
  %AggRec% := RECORD
    Count_Diff_recordid := COUNT(GROUP,%Closest%.Diff_recordid);
    Count_Diff_statecode := COUNT(GROUP,%Closest%.Diff_statecode);
    Count_Diff_caseid := COUNT(GROUP,%Closest%.Diff_caseid);
    Count_Diff_casenumber := COUNT(GROUP,%Closest%.Diff_casenumber);
    Count_Diff_casetitle := COUNT(GROUP,%Closest%.Diff_casetitle);
    Count_Diff_casetype := COUNT(GROUP,%Closest%.Diff_casetype);
    Count_Diff_casestatus := COUNT(GROUP,%Closest%.Diff_casestatus);
    Count_Diff_casestatusdate := COUNT(GROUP,%Closest%.Diff_casestatusdate);
    Count_Diff_casecomments := COUNT(GROUP,%Closest%.Diff_casecomments);
    Count_Diff_fileddate := COUNT(GROUP,%Closest%.Diff_fileddate);
    Count_Diff_caseinfo := COUNT(GROUP,%Closest%.Diff_caseinfo);
    Count_Diff_docketnumber := COUNT(GROUP,%Closest%.Diff_docketnumber);
    Count_Diff_offensecode := COUNT(GROUP,%Closest%.Diff_offensecode);
    Count_Diff_offensedesc := COUNT(GROUP,%Closest%.Diff_offensedesc);
    Count_Diff_offensedate := COUNT(GROUP,%Closest%.Diff_offensedate);
    Count_Diff_offensetype := COUNT(GROUP,%Closest%.Diff_offensetype);
    Count_Diff_offensedegree := COUNT(GROUP,%Closest%.Diff_offensedegree);
    Count_Diff_offenseclass := COUNT(GROUP,%Closest%.Diff_offenseclass);
    Count_Diff_dispositionstatus := COUNT(GROUP,%Closest%.Diff_dispositionstatus);
    Count_Diff_dispositionstatusdate := COUNT(GROUP,%Closest%.Diff_dispositionstatusdate);
    Count_Diff_disposition := COUNT(GROUP,%Closest%.Diff_disposition);
    Count_Diff_dispositiondate := COUNT(GROUP,%Closest%.Diff_dispositiondate);
    Count_Diff_offenselocation := COUNT(GROUP,%Closest%.Diff_offenselocation);
    Count_Diff_finaloffense := COUNT(GROUP,%Closest%.Diff_finaloffense);
    Count_Diff_finaloffensedate := COUNT(GROUP,%Closest%.Diff_finaloffensedate);
    Count_Diff_offensecount := COUNT(GROUP,%Closest%.Diff_offensecount);
    Count_Diff_victimunder18 := COUNT(GROUP,%Closest%.Diff_victimunder18);
    Count_Diff_prioroffenseflag := COUNT(GROUP,%Closest%.Diff_prioroffenseflag);
    Count_Diff_initialplea := COUNT(GROUP,%Closest%.Diff_initialplea);
    Count_Diff_initialpleadate := COUNT(GROUP,%Closest%.Diff_initialpleadate);
    Count_Diff_finalruling := COUNT(GROUP,%Closest%.Diff_finalruling);
    Count_Diff_finalrulingdate := COUNT(GROUP,%Closest%.Diff_finalrulingdate);
    Count_Diff_appealstatus := COUNT(GROUP,%Closest%.Diff_appealstatus);
    Count_Diff_appealdate := COUNT(GROUP,%Closest%.Diff_appealdate);
    Count_Diff_courtname := COUNT(GROUP,%Closest%.Diff_courtname);
    Count_Diff_fineamount := COUNT(GROUP,%Closest%.Diff_fineamount);
    Count_Diff_courtfee := COUNT(GROUP,%Closest%.Diff_courtfee);
    Count_Diff_restitution := COUNT(GROUP,%Closest%.Diff_restitution);
    Count_Diff_trialtype := COUNT(GROUP,%Closest%.Diff_trialtype);
    Count_Diff_courtdate := COUNT(GROUP,%Closest%.Diff_courtdate);
    Count_Diff_sourcename := COUNT(GROUP,%Closest%.Diff_sourcename);
    Count_Diff_sourceid := COUNT(GROUP,%Closest%.Diff_sourceid);
    Count_Diff_classification_code := COUNT(GROUP,%Closest%.Diff_classification_code);
    Count_Diff_sub_classification_code := COUNT(GROUP,%Closest%.Diff_sub_classification_code);
    Count_Diff_unit := COUNT(GROUP,%Closest%.Diff_unit);
    Count_Diff_city := COUNT(GROUP,%Closest%.Diff_city);
    Count_Diff_state := COUNT(GROUP,%Closest%.Diff_state);
    Count_Diff_zip := COUNT(GROUP,%Closest%.Diff_zip);
    Count_Diff_county := COUNT(GROUP,%Closest%.Diff_county);
    Count_Diff_institutionname := COUNT(GROUP,%Closest%.Diff_institutionname);
    Count_Diff_institutiondetails := COUNT(GROUP,%Closest%.Diff_institutiondetails);
    Count_Diff_institutionreceiptdate := COUNT(GROUP,%Closest%.Diff_institutionreceiptdate);
    Count_Diff_releasetolocation := COUNT(GROUP,%Closest%.Diff_releasetolocation);
    Count_Diff_releasetodetails := COUNT(GROUP,%Closest%.Diff_releasetodetails);
    Count_Diff_deceasedflag := COUNT(GROUP,%Closest%.Diff_deceasedflag);
    Count_Diff_deceaseddate := COUNT(GROUP,%Closest%.Diff_deceaseddate);
    Count_Diff_healthflag := COUNT(GROUP,%Closest%.Diff_healthflag);
    Count_Diff_healthdesc := COUNT(GROUP,%Closest%.Diff_healthdesc);
    Count_Diff_bloodtype := COUNT(GROUP,%Closest%.Diff_bloodtype);
    Count_Diff_sexoffenderregistrydate := COUNT(GROUP,%Closest%.Diff_sexoffenderregistrydate);
    Count_Diff_sexoffenderregexpirationdate := COUNT(GROUP,%Closest%.Diff_sexoffenderregexpirationdate);
    Count_Diff_sexoffenderregistrynumber := COUNT(GROUP,%Closest%.Diff_sexoffenderregistrynumber);
    Count_Diff_sourceid2 := COUNT(GROUP,%Closest%.Diff_sourceid2);
    Count_Diff_vendor := COUNT(GROUP,%Closest%.Diff_vendor);
    %Closest%.SourceField;
  END;
  out_counts := table(%Closest%,%AggRec%,SourceField,few);
ENDMACRO;
END;
