IMPORT ut,SALT33;
IMPORT Scrubs_Crim,Scrubs; // Import modules for FieldTypes attribute definitions
EXPORT Moxie_Crim_Offender2_Dev_Fields := MODULE
// Processing for each FieldType
EXPORT SALT33.StrType FieldTypeName(UNSIGNED2 i) := CHOOSE(i,'Invalid_Current_DOB','Invalid_Current_Date','Invalid_Date_Type','Invalid_Case_Type','Invalid_State','Invalid_Case_Num','Invalid_Num','Invalid_Data_Type','Invalid_Offense_Score','Non_Blank');
EXPORT FieldTypeNum(SALT33.StrType fn) := CASE(fn,'Invalid_Current_DOB' => 1,'Invalid_Current_Date' => 2,'Invalid_Date_Type' => 3,'Invalid_Case_Type' => 4,'Invalid_State' => 5,'Invalid_Case_Num' => 6,'Invalid_Num' => 7,'Invalid_Data_Type' => 8,'Invalid_Offense_Score' => 9,'Non_Blank' => 10,0);
EXPORT MakeFT_Invalid_Current_DOB(SALT33.StrType s0) := FUNCTION
  RETURN  s0;
END;
EXPORT InValidFT_Invalid_Current_DOB(SALT33.StrType s) := WHICH(~Scrubs_Crim.fn_valid_dob(s)>0);
EXPORT InValidMessageFT_Invalid_Current_DOB(UNSIGNED1 wh) := CHOOSE(wh,SALT33.HygieneErrors.CustomFail('Scrubs_Crim.fn_valid_dob'),SALT33.HygieneErrors.Good);
EXPORT MakeFT_Invalid_Current_Date(SALT33.StrType s0) := FUNCTION
  RETURN  s0;
END;
EXPORT InValidFT_Invalid_Current_Date(SALT33.StrType s) := WHICH(~Scrubs.fn_valid_date(s)>0);
EXPORT InValidMessageFT_Invalid_Current_Date(UNSIGNED1 wh) := CHOOSE(wh,SALT33.HygieneErrors.CustomFail('Scrubs.fn_valid_date'),SALT33.HygieneErrors.Good);
EXPORT MakeFT_Invalid_Date_Type(SALT33.StrType s0) := FUNCTION
  s1 := SALT33.stringfilter(s0,'IPSROAFD '); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_Invalid_Date_Type(SALT33.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT33.StringFilter(s,'IPSROAFD '))));
EXPORT InValidMessageFT_Invalid_Date_Type(UNSIGNED1 wh) := CHOOSE(wh,SALT33.HygieneErrors.NotInChars('IPSROAFD '),SALT33.HygieneErrors.Good);
EXPORT MakeFT_Invalid_Case_Type(SALT33.StrType s0) := FUNCTION
  RETURN  s0;
END;
EXPORT InValidFT_Invalid_Case_Type(SALT33.StrType s) := WHICH(((SALT33.StrType) s) NOT IN ['TRF','CR','ADM','REL','RES','TR','JVTRF','MS','FE','BD','C','AW','AF','DF','DR','DW','SW','WF','DM','']);
EXPORT InValidMessageFT_Invalid_Case_Type(UNSIGNED1 wh) := CHOOSE(wh,SALT33.HygieneErrors.NotInEnum('TRF|CR|ADM|REL|RES|TR|JVTRF|MS|FE|BD|C|AW|AF|DF|DR|DW|SW|WF|DM|'),SALT33.HygieneErrors.Good);
EXPORT MakeFT_Invalid_State(SALT33.StrType s0) := FUNCTION
  s1 := SALT33.stringfilter(s0,'ABCDEFGHIJKLMNOPQRSTUVWXYZ'); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_Invalid_State(SALT33.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT33.StringFilter(s,'ABCDEFGHIJKLMNOPQRSTUVWXYZ'))));
EXPORT InValidMessageFT_Invalid_State(UNSIGNED1 wh) := CHOOSE(wh,SALT33.HygieneErrors.NotInChars('ABCDEFGHIJKLMNOPQRSTUVWXYZ'),SALT33.HygieneErrors.Good);
EXPORT MakeFT_Invalid_Case_Num(SALT33.StrType s0) := FUNCTION
  RETURN  s0;
END;
EXPORT InValidFT_Invalid_Case_Num(SALT33.StrType s) := WHICH(~(LENGTH(TRIM(s)) >= 1));
EXPORT InValidMessageFT_Invalid_Case_Num(UNSIGNED1 wh) := CHOOSE(wh,SALT33.HygieneErrors.NotLength('1..'),SALT33.HygieneErrors.Good);
EXPORT MakeFT_Invalid_Num(SALT33.StrType s0) := FUNCTION
  s1 := SALT33.stringfilter(s0,'0123456789'); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_Invalid_Num(SALT33.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT33.StringFilter(s,'0123456789'))));
EXPORT InValidMessageFT_Invalid_Num(UNSIGNED1 wh) := CHOOSE(wh,SALT33.HygieneErrors.NotInChars('0123456789'),SALT33.HygieneErrors.Good);
EXPORT MakeFT_Invalid_Data_Type(SALT33.StrType s0) := FUNCTION
  s1 := SALT33.stringfilter(s0,'215'); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_Invalid_Data_Type(SALT33.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT33.StringFilter(s,'215'))));
EXPORT InValidMessageFT_Invalid_Data_Type(UNSIGNED1 wh) := CHOOSE(wh,SALT33.HygieneErrors.NotInChars('215'),SALT33.HygieneErrors.Good);
EXPORT MakeFT_Invalid_Offense_Score(SALT33.StrType s0) := FUNCTION
  s1 := SALT33.stringfilter(s0,'MUFI '); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_Invalid_Offense_Score(SALT33.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT33.StringFilter(s,'MUFI '))));
EXPORT InValidMessageFT_Invalid_Offense_Score(UNSIGNED1 wh) := CHOOSE(wh,SALT33.HygieneErrors.NotInChars('MUFI '),SALT33.HygieneErrors.Good);
EXPORT MakeFT_Non_Blank(SALT33.StrType s0) := FUNCTION
  RETURN  s0;
END;
EXPORT InValidFT_Non_Blank(SALT33.StrType s) := WHICH(~(LENGTH(TRIM(s)) >= 1));
EXPORT InValidMessageFT_Non_Blank(UNSIGNED1 wh) := CHOOSE(wh,SALT33.HygieneErrors.NotLength('1..'),SALT33.HygieneErrors.Good);
EXPORT SALT33.StrType FieldName(UNSIGNED2 i) := CHOOSE(i,'process_date','file_date','offender_key','vendor','source_file','record_type','orig_state','id_num','pty_nm','pty_nm_fmt','orig_lname','orig_fname','orig_mname','orig_name_suffix','lname','fname','mname','name_suffix','pty_typ','nid','ntype','nindicator','nitro_flag','ssn','case_num','case_court','case_date','case_type','case_type_desc','county_of_origin','dle_num','fbi_num','doc_num','ins_num','dl_num','dl_state','citizenship','dob','dob_alias','county_of_birth','place_of_birth','street_address_1','street_address_2','street_address_3','street_address_4','street_address_5','current_residence_county','legal_residence_county','race','race_desc','sex','hair_color','hair_color_desc','eye_color','eye_color_desc','skin_color','skin_color_desc','scars_marks_tattoos_1','scars_marks_tattoos_2','scars_marks_tattoos_3','scars_marks_tattoos_4','scars_marks_tattoos_5','height','weight','party_status','party_status_desc','_3g_offender','violent_offender','sex_offender','vop_offender','data_type','record_setup_date','datasource','prim_range','predir','prim_name','addr_suffix','postdir','unit_desig','sec_range','p_city_name','v_city_name','st','zip5','zip4','cart','cr_sort_sz','lot','lot_order','dpbc','chk_digit','rec_type','ace_fips_st','ace_fips_county','geo_lat','geo_long','msa','geo_blk','geo_match','err_stat','clean_errors','county_name','did','score','ssn_appended','curr_incar_flag','curr_parole_flag','curr_probation_flag','src_upload_date','age','image_link','fcra_conviction_flag','fcra_traffic_flag','fcra_date','fcra_date_type','conviction_override_date','conviction_override_date_type','offense_score','offender_persistent_id');
EXPORT FieldNum(SALT33.StrType fn) := CASE(fn,'process_date' => 0,'file_date' => 1,'offender_key' => 2,'vendor' => 3,'source_file' => 4,'record_type' => 5,'orig_state' => 6,'id_num' => 7,'pty_nm' => 8,'pty_nm_fmt' => 9,'orig_lname' => 10,'orig_fname' => 11,'orig_mname' => 12,'orig_name_suffix' => 13,'lname' => 14,'fname' => 15,'mname' => 16,'name_suffix' => 17,'pty_typ' => 18,'nid' => 19,'ntype' => 20,'nindicator' => 21,'nitro_flag' => 22,'ssn' => 23,'case_num' => 24,'case_court' => 25,'case_date' => 26,'case_type' => 27,'case_type_desc' => 28,'county_of_origin' => 29,'dle_num' => 30,'fbi_num' => 31,'doc_num' => 32,'ins_num' => 33,'dl_num' => 34,'dl_state' => 35,'citizenship' => 36,'dob' => 37,'dob_alias' => 38,'county_of_birth' => 39,'place_of_birth' => 40,'street_address_1' => 41,'street_address_2' => 42,'street_address_3' => 43,'street_address_4' => 44,'street_address_5' => 45,'current_residence_county' => 46,'legal_residence_county' => 47,'race' => 48,'race_desc' => 49,'sex' => 50,'hair_color' => 51,'hair_color_desc' => 52,'eye_color' => 53,'eye_color_desc' => 54,'skin_color' => 55,'skin_color_desc' => 56,'scars_marks_tattoos_1' => 57,'scars_marks_tattoos_2' => 58,'scars_marks_tattoos_3' => 59,'scars_marks_tattoos_4' => 60,'scars_marks_tattoos_5' => 61,'height' => 62,'weight' => 63,'party_status' => 64,'party_status_desc' => 65,'_3g_offender' => 66,'violent_offender' => 67,'sex_offender' => 68,'vop_offender' => 69,'data_type' => 70,'record_setup_date' => 71,'datasource' => 72,'prim_range' => 73,'predir' => 74,'prim_name' => 75,'addr_suffix' => 76,'postdir' => 77,'unit_desig' => 78,'sec_range' => 79,'p_city_name' => 80,'v_city_name' => 81,'st' => 82,'zip5' => 83,'zip4' => 84,'cart' => 85,'cr_sort_sz' => 86,'lot' => 87,'lot_order' => 88,'dpbc' => 89,'chk_digit' => 90,'rec_type' => 91,'ace_fips_st' => 92,'ace_fips_county' => 93,'geo_lat' => 94,'geo_long' => 95,'msa' => 96,'geo_blk' => 97,'geo_match' => 98,'err_stat' => 99,'clean_errors' => 100,'county_name' => 101,'did' => 102,'score' => 103,'ssn_appended' => 104,'curr_incar_flag' => 105,'curr_parole_flag' => 106,'curr_probation_flag' => 107,'src_upload_date' => 108,'age' => 109,'image_link' => 110,'fcra_conviction_flag' => 111,'fcra_traffic_flag' => 112,'fcra_date' => 113,'fcra_date_type' => 114,'conviction_override_date' => 115,'conviction_override_date_type' => 116,'offense_score' => 117,'offender_persistent_id' => 118,0);
//Individual field level validation
EXPORT Make_process_date(SALT33.StrType s0) := MakeFT_Invalid_Current_Date(s0);
EXPORT InValid_process_date(SALT33.StrType s) := InValidFT_Invalid_Current_Date(s);
EXPORT InValidMessage_process_date(UNSIGNED1 wh) := InValidMessageFT_Invalid_Current_Date(wh);
EXPORT Make_file_date(SALT33.StrType s0) := MakeFT_Invalid_Current_Date(s0);
EXPORT InValid_file_date(SALT33.StrType s) := InValidFT_Invalid_Current_Date(s);
EXPORT InValidMessage_file_date(UNSIGNED1 wh) := InValidMessageFT_Invalid_Current_Date(wh);
EXPORT Make_offender_key(SALT33.StrType s0) := MakeFT_Non_Blank(s0);
EXPORT InValid_offender_key(SALT33.StrType s) := InValidFT_Non_Blank(s);
EXPORT InValidMessage_offender_key(UNSIGNED1 wh) := InValidMessageFT_Non_Blank(wh);
EXPORT Make_vendor(SALT33.StrType s0) := s0;
EXPORT InValid_vendor(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_vendor(UNSIGNED1 wh) := '';
EXPORT Make_source_file(SALT33.StrType s0) := s0;
EXPORT InValid_source_file(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_source_file(UNSIGNED1 wh) := '';
EXPORT Make_record_type(SALT33.StrType s0) := s0;
EXPORT InValid_record_type(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_record_type(UNSIGNED1 wh) := '';
EXPORT Make_orig_state(SALT33.StrType s0) := s0;
EXPORT InValid_orig_state(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_orig_state(UNSIGNED1 wh) := '';
EXPORT Make_id_num(SALT33.StrType s0) := s0;
EXPORT InValid_id_num(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_id_num(UNSIGNED1 wh) := '';
EXPORT Make_pty_nm(SALT33.StrType s0) := s0;
EXPORT InValid_pty_nm(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_pty_nm(UNSIGNED1 wh) := '';
EXPORT Make_pty_nm_fmt(SALT33.StrType s0) := s0;
EXPORT InValid_pty_nm_fmt(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_pty_nm_fmt(UNSIGNED1 wh) := '';
EXPORT Make_orig_lname(SALT33.StrType s0) := s0;
EXPORT InValid_orig_lname(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_orig_lname(UNSIGNED1 wh) := '';
EXPORT Make_orig_fname(SALT33.StrType s0) := s0;
EXPORT InValid_orig_fname(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_orig_fname(UNSIGNED1 wh) := '';
EXPORT Make_orig_mname(SALT33.StrType s0) := s0;
EXPORT InValid_orig_mname(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_orig_mname(UNSIGNED1 wh) := '';
EXPORT Make_orig_name_suffix(SALT33.StrType s0) := s0;
EXPORT InValid_orig_name_suffix(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_orig_name_suffix(UNSIGNED1 wh) := '';
EXPORT Make_lname(SALT33.StrType s0) := s0;
EXPORT InValid_lname(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_lname(UNSIGNED1 wh) := '';
EXPORT Make_fname(SALT33.StrType s0) := s0;
EXPORT InValid_fname(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_fname(UNSIGNED1 wh) := '';
EXPORT Make_mname(SALT33.StrType s0) := s0;
EXPORT InValid_mname(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_mname(UNSIGNED1 wh) := '';
EXPORT Make_name_suffix(SALT33.StrType s0) := s0;
EXPORT InValid_name_suffix(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_name_suffix(UNSIGNED1 wh) := '';
EXPORT Make_pty_typ(SALT33.StrType s0) := s0;
EXPORT InValid_pty_typ(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_pty_typ(UNSIGNED1 wh) := '';
EXPORT Make_nid(SALT33.StrType s0) := s0;
EXPORT InValid_nid(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_nid(UNSIGNED1 wh) := '';
EXPORT Make_ntype(SALT33.StrType s0) := s0;
EXPORT InValid_ntype(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_ntype(UNSIGNED1 wh) := '';
EXPORT Make_nindicator(SALT33.StrType s0) := s0;
EXPORT InValid_nindicator(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_nindicator(UNSIGNED1 wh) := '';
EXPORT Make_nitro_flag(SALT33.StrType s0) := s0;
EXPORT InValid_nitro_flag(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_nitro_flag(UNSIGNED1 wh) := '';
EXPORT Make_ssn(SALT33.StrType s0) := s0;
EXPORT InValid_ssn(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_ssn(UNSIGNED1 wh) := '';
EXPORT Make_case_num(SALT33.StrType s0) := s0;
EXPORT InValid_case_num(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_case_num(UNSIGNED1 wh) := '';
EXPORT Make_case_court(SALT33.StrType s0) := s0;
EXPORT InValid_case_court(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_case_court(UNSIGNED1 wh) := '';
EXPORT Make_case_date(SALT33.StrType s0) := MakeFT_Invalid_Current_Date(s0);
EXPORT InValid_case_date(SALT33.StrType s) := InValidFT_Invalid_Current_Date(s);
EXPORT InValidMessage_case_date(UNSIGNED1 wh) := InValidMessageFT_Invalid_Current_Date(wh);
EXPORT Make_case_type(SALT33.StrType s0) := s0;
EXPORT InValid_case_type(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_case_type(UNSIGNED1 wh) := '';
EXPORT Make_case_type_desc(SALT33.StrType s0) := s0;
EXPORT InValid_case_type_desc(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_case_type_desc(UNSIGNED1 wh) := '';
EXPORT Make_county_of_origin(SALT33.StrType s0) := s0;
EXPORT InValid_county_of_origin(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_county_of_origin(UNSIGNED1 wh) := '';
EXPORT Make_dle_num(SALT33.StrType s0) := s0;
EXPORT InValid_dle_num(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_dle_num(UNSIGNED1 wh) := '';
EXPORT Make_fbi_num(SALT33.StrType s0) := s0;
EXPORT InValid_fbi_num(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_fbi_num(UNSIGNED1 wh) := '';
EXPORT Make_doc_num(SALT33.StrType s0) := s0;
EXPORT InValid_doc_num(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_doc_num(UNSIGNED1 wh) := '';
EXPORT Make_ins_num(SALT33.StrType s0) := s0;
EXPORT InValid_ins_num(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_ins_num(UNSIGNED1 wh) := '';
EXPORT Make_dl_num(SALT33.StrType s0) := s0;
EXPORT InValid_dl_num(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_dl_num(UNSIGNED1 wh) := '';
EXPORT Make_dl_state(SALT33.StrType s0) := s0;
EXPORT InValid_dl_state(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_dl_state(UNSIGNED1 wh) := '';
EXPORT Make_citizenship(SALT33.StrType s0) := s0;
EXPORT InValid_citizenship(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_citizenship(UNSIGNED1 wh) := '';
EXPORT Make_dob(SALT33.StrType s0) := MakeFT_Invalid_Current_DOB(s0);
EXPORT InValid_dob(SALT33.StrType s) := InValidFT_Invalid_Current_DOB(s);
EXPORT InValidMessage_dob(UNSIGNED1 wh) := InValidMessageFT_Invalid_Current_DOB(wh);
EXPORT Make_dob_alias(SALT33.StrType s0) := s0;
EXPORT InValid_dob_alias(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_dob_alias(UNSIGNED1 wh) := '';
EXPORT Make_county_of_birth(SALT33.StrType s0) := s0;
EXPORT InValid_county_of_birth(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_county_of_birth(UNSIGNED1 wh) := '';
EXPORT Make_place_of_birth(SALT33.StrType s0) := s0;
EXPORT InValid_place_of_birth(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_place_of_birth(UNSIGNED1 wh) := '';
EXPORT Make_street_address_1(SALT33.StrType s0) := s0;
EXPORT InValid_street_address_1(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_street_address_1(UNSIGNED1 wh) := '';
EXPORT Make_street_address_2(SALT33.StrType s0) := s0;
EXPORT InValid_street_address_2(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_street_address_2(UNSIGNED1 wh) := '';
EXPORT Make_street_address_3(SALT33.StrType s0) := s0;
EXPORT InValid_street_address_3(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_street_address_3(UNSIGNED1 wh) := '';
EXPORT Make_street_address_4(SALT33.StrType s0) := s0;
EXPORT InValid_street_address_4(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_street_address_4(UNSIGNED1 wh) := '';
EXPORT Make_street_address_5(SALT33.StrType s0) := s0;
EXPORT InValid_street_address_5(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_street_address_5(UNSIGNED1 wh) := '';
EXPORT Make_current_residence_county(SALT33.StrType s0) := s0;
EXPORT InValid_current_residence_county(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_current_residence_county(UNSIGNED1 wh) := '';
EXPORT Make_legal_residence_county(SALT33.StrType s0) := s0;
EXPORT InValid_legal_residence_county(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_legal_residence_county(UNSIGNED1 wh) := '';
EXPORT Make_race(SALT33.StrType s0) := s0;
EXPORT InValid_race(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_race(UNSIGNED1 wh) := '';
EXPORT Make_race_desc(SALT33.StrType s0) := s0;
EXPORT InValid_race_desc(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_race_desc(UNSIGNED1 wh) := '';
EXPORT Make_sex(SALT33.StrType s0) := s0;
EXPORT InValid_sex(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_sex(UNSIGNED1 wh) := '';
EXPORT Make_hair_color(SALT33.StrType s0) := s0;
EXPORT InValid_hair_color(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_hair_color(UNSIGNED1 wh) := '';
EXPORT Make_hair_color_desc(SALT33.StrType s0) := s0;
EXPORT InValid_hair_color_desc(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_hair_color_desc(UNSIGNED1 wh) := '';
EXPORT Make_eye_color(SALT33.StrType s0) := s0;
EXPORT InValid_eye_color(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_eye_color(UNSIGNED1 wh) := '';
EXPORT Make_eye_color_desc(SALT33.StrType s0) := s0;
EXPORT InValid_eye_color_desc(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_eye_color_desc(UNSIGNED1 wh) := '';
EXPORT Make_skin_color(SALT33.StrType s0) := s0;
EXPORT InValid_skin_color(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_skin_color(UNSIGNED1 wh) := '';
EXPORT Make_skin_color_desc(SALT33.StrType s0) := s0;
EXPORT InValid_skin_color_desc(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_skin_color_desc(UNSIGNED1 wh) := '';
EXPORT Make_scars_marks_tattoos_1(SALT33.StrType s0) := s0;
EXPORT InValid_scars_marks_tattoos_1(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_scars_marks_tattoos_1(UNSIGNED1 wh) := '';
EXPORT Make_scars_marks_tattoos_2(SALT33.StrType s0) := s0;
EXPORT InValid_scars_marks_tattoos_2(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_scars_marks_tattoos_2(UNSIGNED1 wh) := '';
EXPORT Make_scars_marks_tattoos_3(SALT33.StrType s0) := s0;
EXPORT InValid_scars_marks_tattoos_3(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_scars_marks_tattoos_3(UNSIGNED1 wh) := '';
EXPORT Make_scars_marks_tattoos_4(SALT33.StrType s0) := s0;
EXPORT InValid_scars_marks_tattoos_4(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_scars_marks_tattoos_4(UNSIGNED1 wh) := '';
EXPORT Make_scars_marks_tattoos_5(SALT33.StrType s0) := s0;
EXPORT InValid_scars_marks_tattoos_5(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_scars_marks_tattoos_5(UNSIGNED1 wh) := '';
EXPORT Make_height(SALT33.StrType s0) := s0;
EXPORT InValid_height(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_height(UNSIGNED1 wh) := '';
EXPORT Make_weight(SALT33.StrType s0) := s0;
EXPORT InValid_weight(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_weight(UNSIGNED1 wh) := '';
EXPORT Make_party_status(SALT33.StrType s0) := s0;
EXPORT InValid_party_status(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_party_status(UNSIGNED1 wh) := '';
EXPORT Make_party_status_desc(SALT33.StrType s0) := s0;
EXPORT InValid_party_status_desc(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_party_status_desc(UNSIGNED1 wh) := '';
EXPORT Make__3g_offender(SALT33.StrType s0) := s0;
EXPORT InValid__3g_offender(SALT33.StrType s) := FALSE;
EXPORT InValidMessage__3g_offender(UNSIGNED1 wh) := '';
EXPORT Make_violent_offender(SALT33.StrType s0) := s0;
EXPORT InValid_violent_offender(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_violent_offender(UNSIGNED1 wh) := '';
EXPORT Make_sex_offender(SALT33.StrType s0) := s0;
EXPORT InValid_sex_offender(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_sex_offender(UNSIGNED1 wh) := '';
EXPORT Make_vop_offender(SALT33.StrType s0) := s0;
EXPORT InValid_vop_offender(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_vop_offender(UNSIGNED1 wh) := '';
EXPORT Make_data_type(SALT33.StrType s0) := s0;
EXPORT InValid_data_type(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_data_type(UNSIGNED1 wh) := '';
EXPORT Make_record_setup_date(SALT33.StrType s0) := s0;
EXPORT InValid_record_setup_date(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_record_setup_date(UNSIGNED1 wh) := '';
EXPORT Make_datasource(SALT33.StrType s0) := s0;
EXPORT InValid_datasource(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_datasource(UNSIGNED1 wh) := '';
EXPORT Make_prim_range(SALT33.StrType s0) := s0;
EXPORT InValid_prim_range(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_prim_range(UNSIGNED1 wh) := '';
EXPORT Make_predir(SALT33.StrType s0) := s0;
EXPORT InValid_predir(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_predir(UNSIGNED1 wh) := '';
EXPORT Make_prim_name(SALT33.StrType s0) := s0;
EXPORT InValid_prim_name(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_prim_name(UNSIGNED1 wh) := '';
EXPORT Make_addr_suffix(SALT33.StrType s0) := s0;
EXPORT InValid_addr_suffix(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_addr_suffix(UNSIGNED1 wh) := '';
EXPORT Make_postdir(SALT33.StrType s0) := s0;
EXPORT InValid_postdir(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_postdir(UNSIGNED1 wh) := '';
EXPORT Make_unit_desig(SALT33.StrType s0) := s0;
EXPORT InValid_unit_desig(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_unit_desig(UNSIGNED1 wh) := '';
EXPORT Make_sec_range(SALT33.StrType s0) := s0;
EXPORT InValid_sec_range(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_sec_range(UNSIGNED1 wh) := '';
EXPORT Make_p_city_name(SALT33.StrType s0) := s0;
EXPORT InValid_p_city_name(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_p_city_name(UNSIGNED1 wh) := '';
EXPORT Make_v_city_name(SALT33.StrType s0) := s0;
EXPORT InValid_v_city_name(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_v_city_name(UNSIGNED1 wh) := '';
EXPORT Make_st(SALT33.StrType s0) := s0;
EXPORT InValid_st(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_st(UNSIGNED1 wh) := '';
EXPORT Make_zip5(SALT33.StrType s0) := s0;
EXPORT InValid_zip5(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_zip5(UNSIGNED1 wh) := '';
EXPORT Make_zip4(SALT33.StrType s0) := s0;
EXPORT InValid_zip4(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_zip4(UNSIGNED1 wh) := '';
EXPORT Make_cart(SALT33.StrType s0) := s0;
EXPORT InValid_cart(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_cart(UNSIGNED1 wh) := '';
EXPORT Make_cr_sort_sz(SALT33.StrType s0) := s0;
EXPORT InValid_cr_sort_sz(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_cr_sort_sz(UNSIGNED1 wh) := '';
EXPORT Make_lot(SALT33.StrType s0) := s0;
EXPORT InValid_lot(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_lot(UNSIGNED1 wh) := '';
EXPORT Make_lot_order(SALT33.StrType s0) := s0;
EXPORT InValid_lot_order(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_lot_order(UNSIGNED1 wh) := '';
EXPORT Make_dpbc(SALT33.StrType s0) := s0;
EXPORT InValid_dpbc(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_dpbc(UNSIGNED1 wh) := '';
EXPORT Make_chk_digit(SALT33.StrType s0) := s0;
EXPORT InValid_chk_digit(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_chk_digit(UNSIGNED1 wh) := '';
EXPORT Make_rec_type(SALT33.StrType s0) := s0;
EXPORT InValid_rec_type(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_rec_type(UNSIGNED1 wh) := '';
EXPORT Make_ace_fips_st(SALT33.StrType s0) := s0;
EXPORT InValid_ace_fips_st(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_ace_fips_st(UNSIGNED1 wh) := '';
EXPORT Make_ace_fips_county(SALT33.StrType s0) := s0;
EXPORT InValid_ace_fips_county(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_ace_fips_county(UNSIGNED1 wh) := '';
EXPORT Make_geo_lat(SALT33.StrType s0) := s0;
EXPORT InValid_geo_lat(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_geo_lat(UNSIGNED1 wh) := '';
EXPORT Make_geo_long(SALT33.StrType s0) := s0;
EXPORT InValid_geo_long(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_geo_long(UNSIGNED1 wh) := '';
EXPORT Make_msa(SALT33.StrType s0) := s0;
EXPORT InValid_msa(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_msa(UNSIGNED1 wh) := '';
EXPORT Make_geo_blk(SALT33.StrType s0) := s0;
EXPORT InValid_geo_blk(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_geo_blk(UNSIGNED1 wh) := '';
EXPORT Make_geo_match(SALT33.StrType s0) := s0;
EXPORT InValid_geo_match(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_geo_match(UNSIGNED1 wh) := '';
EXPORT Make_err_stat(SALT33.StrType s0) := s0;
EXPORT InValid_err_stat(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_err_stat(UNSIGNED1 wh) := '';
EXPORT Make_clean_errors(SALT33.StrType s0) := MakeFT_Invalid_Num(s0);
EXPORT InValid_clean_errors(SALT33.StrType s) := InValidFT_Invalid_Num(s);
EXPORT InValidMessage_clean_errors(UNSIGNED1 wh) := InValidMessageFT_Invalid_Num(wh);
EXPORT Make_county_name(SALT33.StrType s0) := s0;
EXPORT InValid_county_name(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_county_name(UNSIGNED1 wh) := '';
EXPORT Make_did(SALT33.StrType s0) := s0;
EXPORT InValid_did(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_did(UNSIGNED1 wh) := '';
EXPORT Make_score(SALT33.StrType s0) := s0;
EXPORT InValid_score(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_score(UNSIGNED1 wh) := '';
EXPORT Make_ssn_appended(SALT33.StrType s0) := s0;
EXPORT InValid_ssn_appended(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_ssn_appended(UNSIGNED1 wh) := '';
EXPORT Make_curr_incar_flag(SALT33.StrType s0) := s0;
EXPORT InValid_curr_incar_flag(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_curr_incar_flag(UNSIGNED1 wh) := '';
EXPORT Make_curr_parole_flag(SALT33.StrType s0) := s0;
EXPORT InValid_curr_parole_flag(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_curr_parole_flag(UNSIGNED1 wh) := '';
EXPORT Make_curr_probation_flag(SALT33.StrType s0) := s0;
EXPORT InValid_curr_probation_flag(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_curr_probation_flag(UNSIGNED1 wh) := '';
EXPORT Make_src_upload_date(SALT33.StrType s0) := s0;
EXPORT InValid_src_upload_date(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_src_upload_date(UNSIGNED1 wh) := '';
EXPORT Make_age(SALT33.StrType s0) := s0;
EXPORT InValid_age(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_age(UNSIGNED1 wh) := '';
EXPORT Make_image_link(SALT33.StrType s0) := s0;
EXPORT InValid_image_link(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_image_link(UNSIGNED1 wh) := '';
EXPORT Make_fcra_conviction_flag(SALT33.StrType s0) := s0;
EXPORT InValid_fcra_conviction_flag(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_fcra_conviction_flag(UNSIGNED1 wh) := '';
EXPORT Make_fcra_traffic_flag(SALT33.StrType s0) := s0;
EXPORT InValid_fcra_traffic_flag(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_fcra_traffic_flag(UNSIGNED1 wh) := '';
EXPORT Make_fcra_date(SALT33.StrType s0) := MakeFT_Invalid_Current_Date(s0);
EXPORT InValid_fcra_date(SALT33.StrType s) := InValidFT_Invalid_Current_Date(s);
EXPORT InValidMessage_fcra_date(UNSIGNED1 wh) := InValidMessageFT_Invalid_Current_Date(wh);
EXPORT Make_fcra_date_type(SALT33.StrType s0) := s0;
EXPORT InValid_fcra_date_type(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_fcra_date_type(UNSIGNED1 wh) := '';
EXPORT Make_conviction_override_date(SALT33.StrType s0) := s0;
EXPORT InValid_conviction_override_date(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_conviction_override_date(UNSIGNED1 wh) := '';
EXPORT Make_conviction_override_date_type(SALT33.StrType s0) := s0;
EXPORT InValid_conviction_override_date_type(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_conviction_override_date_type(UNSIGNED1 wh) := '';
EXPORT Make_offense_score(SALT33.StrType s0) := s0;
EXPORT InValid_offense_score(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_offense_score(UNSIGNED1 wh) := '';
EXPORT Make_offender_persistent_id(SALT33.StrType s0) := MakeFT_Invalid_Num(s0);
EXPORT InValid_offender_persistent_id(SALT33.StrType s) := InValidFT_Invalid_Num(s);
EXPORT InValidMessage_offender_persistent_id(UNSIGNED1 wh) := InValidMessageFT_Invalid_Num(wh);
// This macro will compute and count field level differences based upon a pivot expression
export MAC_CountDifferencesByPivot(in_left,in_right,pivot_exp,bad_pivots,out_counts) := MACRO
  IMPORT SALT33,Scrubs_Crim;
//Find those highly occuring pivot values to remove them from consideration
#uniquename(tr)
  %tr% := table(in_left+in_right,{ val := pivot_exp; });
#uniquename(r1)
  %r1% := record
    %tr%.val;    unsigned Cnt := COUNT(GROUP);
  end;
#uniquename(t1)
  %t1% := table(%tr%,%r1%,val,local); // Pre-aggregate before distribute
#uniquename(r2)
  %r2% := record
    %t1%.val;    unsigned Cnt := SUM(GROUP,%t1%.Cnt);
  end;
#uniquename(t2)
  %t2% := table(%t1%,%r2%,val); // Now do global aggregate
Bad_Pivots := %t2%(Cnt>100);
#uniquename(dl)
  %dl% := RECORD
    BOOLEAN Diff_process_date;
    BOOLEAN Diff_file_date;
    BOOLEAN Diff_offender_key;
    BOOLEAN Diff_vendor;
    BOOLEAN Diff_source_file;
    BOOLEAN Diff_record_type;
    BOOLEAN Diff_orig_state;
    BOOLEAN Diff_id_num;
    BOOLEAN Diff_pty_nm;
    BOOLEAN Diff_pty_nm_fmt;
    BOOLEAN Diff_orig_lname;
    BOOLEAN Diff_orig_fname;
    BOOLEAN Diff_orig_mname;
    BOOLEAN Diff_orig_name_suffix;
    BOOLEAN Diff_lname;
    BOOLEAN Diff_fname;
    BOOLEAN Diff_mname;
    BOOLEAN Diff_name_suffix;
    BOOLEAN Diff_pty_typ;
    BOOLEAN Diff_nid;
    BOOLEAN Diff_ntype;
    BOOLEAN Diff_nindicator;
    BOOLEAN Diff_nitro_flag;
    BOOLEAN Diff_ssn;
    BOOLEAN Diff_case_num;
    BOOLEAN Diff_case_court;
    BOOLEAN Diff_case_date;
    BOOLEAN Diff_case_type;
    BOOLEAN Diff_case_type_desc;
    BOOLEAN Diff_county_of_origin;
    BOOLEAN Diff_dle_num;
    BOOLEAN Diff_fbi_num;
    BOOLEAN Diff_doc_num;
    BOOLEAN Diff_ins_num;
    BOOLEAN Diff_dl_num;
    BOOLEAN Diff_dl_state;
    BOOLEAN Diff_citizenship;
    BOOLEAN Diff_dob;
    BOOLEAN Diff_dob_alias;
    BOOLEAN Diff_county_of_birth;
    BOOLEAN Diff_place_of_birth;
    BOOLEAN Diff_street_address_1;
    BOOLEAN Diff_street_address_2;
    BOOLEAN Diff_street_address_3;
    BOOLEAN Diff_street_address_4;
    BOOLEAN Diff_street_address_5;
    BOOLEAN Diff_current_residence_county;
    BOOLEAN Diff_legal_residence_county;
    BOOLEAN Diff_race;
    BOOLEAN Diff_race_desc;
    BOOLEAN Diff_sex;
    BOOLEAN Diff_hair_color;
    BOOLEAN Diff_hair_color_desc;
    BOOLEAN Diff_eye_color;
    BOOLEAN Diff_eye_color_desc;
    BOOLEAN Diff_skin_color;
    BOOLEAN Diff_skin_color_desc;
    BOOLEAN Diff_scars_marks_tattoos_1;
    BOOLEAN Diff_scars_marks_tattoos_2;
    BOOLEAN Diff_scars_marks_tattoos_3;
    BOOLEAN Diff_scars_marks_tattoos_4;
    BOOLEAN Diff_scars_marks_tattoos_5;
    BOOLEAN Diff_height;
    BOOLEAN Diff_weight;
    BOOLEAN Diff_party_status;
    BOOLEAN Diff_party_status_desc;
    BOOLEAN Diff__3g_offender;
    BOOLEAN Diff_violent_offender;
    BOOLEAN Diff_sex_offender;
    BOOLEAN Diff_vop_offender;
    BOOLEAN Diff_data_type;
    BOOLEAN Diff_record_setup_date;
    BOOLEAN Diff_datasource;
    BOOLEAN Diff_prim_range;
    BOOLEAN Diff_predir;
    BOOLEAN Diff_prim_name;
    BOOLEAN Diff_addr_suffix;
    BOOLEAN Diff_postdir;
    BOOLEAN Diff_unit_desig;
    BOOLEAN Diff_sec_range;
    BOOLEAN Diff_p_city_name;
    BOOLEAN Diff_v_city_name;
    BOOLEAN Diff_st;
    BOOLEAN Diff_zip5;
    BOOLEAN Diff_zip4;
    BOOLEAN Diff_cart;
    BOOLEAN Diff_cr_sort_sz;
    BOOLEAN Diff_lot;
    BOOLEAN Diff_lot_order;
    BOOLEAN Diff_dpbc;
    BOOLEAN Diff_chk_digit;
    BOOLEAN Diff_rec_type;
    BOOLEAN Diff_ace_fips_st;
    BOOLEAN Diff_ace_fips_county;
    BOOLEAN Diff_geo_lat;
    BOOLEAN Diff_geo_long;
    BOOLEAN Diff_msa;
    BOOLEAN Diff_geo_blk;
    BOOLEAN Diff_geo_match;
    BOOLEAN Diff_err_stat;
    BOOLEAN Diff_clean_errors;
    BOOLEAN Diff_county_name;
    BOOLEAN Diff_did;
    BOOLEAN Diff_score;
    BOOLEAN Diff_ssn_appended;
    BOOLEAN Diff_curr_incar_flag;
    BOOLEAN Diff_curr_parole_flag;
    BOOLEAN Diff_curr_probation_flag;
    BOOLEAN Diff_src_upload_date;
    BOOLEAN Diff_age;
    BOOLEAN Diff_image_link;
    BOOLEAN Diff_fcra_conviction_flag;
    BOOLEAN Diff_fcra_traffic_flag;
    BOOLEAN Diff_fcra_date;
    BOOLEAN Diff_fcra_date_type;
    BOOLEAN Diff_conviction_override_date;
    BOOLEAN Diff_conviction_override_date_type;
    BOOLEAN Diff_offense_score;
    BOOLEAN Diff_offender_persistent_id;
    SALT33.StrType SourceField {MAXLENGTH(30)};
    UNSIGNED Num_Diffs;
    SALT33.StrType Val {MAXLENGTH(1024)};
  END;
#uniquename(fd)
  %dl% %fd%(in_left le,in_right ri) := TRANSFORM
    SELF.Diff_process_date := le.process_date <> ri.process_date;
    SELF.Diff_file_date := le.file_date <> ri.file_date;
    SELF.Diff_offender_key := le.offender_key <> ri.offender_key;
    SELF.Diff_vendor := le.vendor <> ri.vendor;
    SELF.Diff_source_file := le.source_file <> ri.source_file;
    SELF.Diff_record_type := le.record_type <> ri.record_type;
    SELF.Diff_orig_state := le.orig_state <> ri.orig_state;
    SELF.Diff_id_num := le.id_num <> ri.id_num;
    SELF.Diff_pty_nm := le.pty_nm <> ri.pty_nm;
    SELF.Diff_pty_nm_fmt := le.pty_nm_fmt <> ri.pty_nm_fmt;
    SELF.Diff_orig_lname := le.orig_lname <> ri.orig_lname;
    SELF.Diff_orig_fname := le.orig_fname <> ri.orig_fname;
    SELF.Diff_orig_mname := le.orig_mname <> ri.orig_mname;
    SELF.Diff_orig_name_suffix := le.orig_name_suffix <> ri.orig_name_suffix;
    SELF.Diff_lname := le.lname <> ri.lname;
    SELF.Diff_fname := le.fname <> ri.fname;
    SELF.Diff_mname := le.mname <> ri.mname;
    SELF.Diff_name_suffix := le.name_suffix <> ri.name_suffix;
    SELF.Diff_pty_typ := le.pty_typ <> ri.pty_typ;
    SELF.Diff_nid := le.nid <> ri.nid;
    SELF.Diff_ntype := le.ntype <> ri.ntype;
    SELF.Diff_nindicator := le.nindicator <> ri.nindicator;
    SELF.Diff_nitro_flag := le.nitro_flag <> ri.nitro_flag;
    SELF.Diff_ssn := le.ssn <> ri.ssn;
    SELF.Diff_case_num := le.case_num <> ri.case_num;
    SELF.Diff_case_court := le.case_court <> ri.case_court;
    SELF.Diff_case_date := le.case_date <> ri.case_date;
    SELF.Diff_case_type := le.case_type <> ri.case_type;
    SELF.Diff_case_type_desc := le.case_type_desc <> ri.case_type_desc;
    SELF.Diff_county_of_origin := le.county_of_origin <> ri.county_of_origin;
    SELF.Diff_dle_num := le.dle_num <> ri.dle_num;
    SELF.Diff_fbi_num := le.fbi_num <> ri.fbi_num;
    SELF.Diff_doc_num := le.doc_num <> ri.doc_num;
    SELF.Diff_ins_num := le.ins_num <> ri.ins_num;
    SELF.Diff_dl_num := le.dl_num <> ri.dl_num;
    SELF.Diff_dl_state := le.dl_state <> ri.dl_state;
    SELF.Diff_citizenship := le.citizenship <> ri.citizenship;
    SELF.Diff_dob := le.dob <> ri.dob;
    SELF.Diff_dob_alias := le.dob_alias <> ri.dob_alias;
    SELF.Diff_county_of_birth := le.county_of_birth <> ri.county_of_birth;
    SELF.Diff_place_of_birth := le.place_of_birth <> ri.place_of_birth;
    SELF.Diff_street_address_1 := le.street_address_1 <> ri.street_address_1;
    SELF.Diff_street_address_2 := le.street_address_2 <> ri.street_address_2;
    SELF.Diff_street_address_3 := le.street_address_3 <> ri.street_address_3;
    SELF.Diff_street_address_4 := le.street_address_4 <> ri.street_address_4;
    SELF.Diff_street_address_5 := le.street_address_5 <> ri.street_address_5;
    SELF.Diff_current_residence_county := le.current_residence_county <> ri.current_residence_county;
    SELF.Diff_legal_residence_county := le.legal_residence_county <> ri.legal_residence_county;
    SELF.Diff_race := le.race <> ri.race;
    SELF.Diff_race_desc := le.race_desc <> ri.race_desc;
    SELF.Diff_sex := le.sex <> ri.sex;
    SELF.Diff_hair_color := le.hair_color <> ri.hair_color;
    SELF.Diff_hair_color_desc := le.hair_color_desc <> ri.hair_color_desc;
    SELF.Diff_eye_color := le.eye_color <> ri.eye_color;
    SELF.Diff_eye_color_desc := le.eye_color_desc <> ri.eye_color_desc;
    SELF.Diff_skin_color := le.skin_color <> ri.skin_color;
    SELF.Diff_skin_color_desc := le.skin_color_desc <> ri.skin_color_desc;
    SELF.Diff_scars_marks_tattoos_1 := le.scars_marks_tattoos_1 <> ri.scars_marks_tattoos_1;
    SELF.Diff_scars_marks_tattoos_2 := le.scars_marks_tattoos_2 <> ri.scars_marks_tattoos_2;
    SELF.Diff_scars_marks_tattoos_3 := le.scars_marks_tattoos_3 <> ri.scars_marks_tattoos_3;
    SELF.Diff_scars_marks_tattoos_4 := le.scars_marks_tattoos_4 <> ri.scars_marks_tattoos_4;
    SELF.Diff_scars_marks_tattoos_5 := le.scars_marks_tattoos_5 <> ri.scars_marks_tattoos_5;
    SELF.Diff_height := le.height <> ri.height;
    SELF.Diff_weight := le.weight <> ri.weight;
    SELF.Diff_party_status := le.party_status <> ri.party_status;
    SELF.Diff_party_status_desc := le.party_status_desc <> ri.party_status_desc;
    SELF.Diff__3g_offender := le._3g_offender <> ri._3g_offender;
    SELF.Diff_violent_offender := le.violent_offender <> ri.violent_offender;
    SELF.Diff_sex_offender := le.sex_offender <> ri.sex_offender;
    SELF.Diff_vop_offender := le.vop_offender <> ri.vop_offender;
    SELF.Diff_data_type := le.data_type <> ri.data_type;
    SELF.Diff_record_setup_date := le.record_setup_date <> ri.record_setup_date;
    SELF.Diff_datasource := le.datasource <> ri.datasource;
    SELF.Diff_prim_range := le.prim_range <> ri.prim_range;
    SELF.Diff_predir := le.predir <> ri.predir;
    SELF.Diff_prim_name := le.prim_name <> ri.prim_name;
    SELF.Diff_addr_suffix := le.addr_suffix <> ri.addr_suffix;
    SELF.Diff_postdir := le.postdir <> ri.postdir;
    SELF.Diff_unit_desig := le.unit_desig <> ri.unit_desig;
    SELF.Diff_sec_range := le.sec_range <> ri.sec_range;
    SELF.Diff_p_city_name := le.p_city_name <> ri.p_city_name;
    SELF.Diff_v_city_name := le.v_city_name <> ri.v_city_name;
    SELF.Diff_st := le.st <> ri.st;
    SELF.Diff_zip5 := le.zip5 <> ri.zip5;
    SELF.Diff_zip4 := le.zip4 <> ri.zip4;
    SELF.Diff_cart := le.cart <> ri.cart;
    SELF.Diff_cr_sort_sz := le.cr_sort_sz <> ri.cr_sort_sz;
    SELF.Diff_lot := le.lot <> ri.lot;
    SELF.Diff_lot_order := le.lot_order <> ri.lot_order;
    SELF.Diff_dpbc := le.dpbc <> ri.dpbc;
    SELF.Diff_chk_digit := le.chk_digit <> ri.chk_digit;
    SELF.Diff_rec_type := le.rec_type <> ri.rec_type;
    SELF.Diff_ace_fips_st := le.ace_fips_st <> ri.ace_fips_st;
    SELF.Diff_ace_fips_county := le.ace_fips_county <> ri.ace_fips_county;
    SELF.Diff_geo_lat := le.geo_lat <> ri.geo_lat;
    SELF.Diff_geo_long := le.geo_long <> ri.geo_long;
    SELF.Diff_msa := le.msa <> ri.msa;
    SELF.Diff_geo_blk := le.geo_blk <> ri.geo_blk;
    SELF.Diff_geo_match := le.geo_match <> ri.geo_match;
    SELF.Diff_err_stat := le.err_stat <> ri.err_stat;
    SELF.Diff_clean_errors := le.clean_errors <> ri.clean_errors;
    SELF.Diff_county_name := le.county_name <> ri.county_name;
    SELF.Diff_did := le.did <> ri.did;
    SELF.Diff_score := le.score <> ri.score;
    SELF.Diff_ssn_appended := le.ssn_appended <> ri.ssn_appended;
    SELF.Diff_curr_incar_flag := le.curr_incar_flag <> ri.curr_incar_flag;
    SELF.Diff_curr_parole_flag := le.curr_parole_flag <> ri.curr_parole_flag;
    SELF.Diff_curr_probation_flag := le.curr_probation_flag <> ri.curr_probation_flag;
    SELF.Diff_src_upload_date := le.src_upload_date <> ri.src_upload_date;
    SELF.Diff_age := le.age <> ri.age;
    SELF.Diff_image_link := le.image_link <> ri.image_link;
    SELF.Diff_fcra_conviction_flag := le.fcra_conviction_flag <> ri.fcra_conviction_flag;
    SELF.Diff_fcra_traffic_flag := le.fcra_traffic_flag <> ri.fcra_traffic_flag;
    SELF.Diff_fcra_date := le.fcra_date <> ri.fcra_date;
    SELF.Diff_fcra_date_type := le.fcra_date_type <> ri.fcra_date_type;
    SELF.Diff_conviction_override_date := le.conviction_override_date <> ri.conviction_override_date;
    SELF.Diff_conviction_override_date_type := le.conviction_override_date_type <> ri.conviction_override_date_type;
    SELF.Diff_offense_score := le.offense_score <> ri.offense_score;
    SELF.Diff_offender_persistent_id := le.offender_persistent_id <> ri.offender_persistent_id;
    SELF.Val := (SALT33.StrType)evaluate(le,pivot_exp);
    SELF.SourceField := le.vendor;
    SELF.Num_Diffs := 0+ IF( SELF.Diff_process_date,1,0)+ IF( SELF.Diff_file_date,1,0)+ IF( SELF.Diff_offender_key,1,0)+ IF( SELF.Diff_vendor,1,0)+ IF( SELF.Diff_source_file,1,0)+ IF( SELF.Diff_record_type,1,0)+ IF( SELF.Diff_orig_state,1,0)+ IF( SELF.Diff_id_num,1,0)+ IF( SELF.Diff_pty_nm,1,0)+ IF( SELF.Diff_pty_nm_fmt,1,0)+ IF( SELF.Diff_orig_lname,1,0)+ IF( SELF.Diff_orig_fname,1,0)+ IF( SELF.Diff_orig_mname,1,0)+ IF( SELF.Diff_orig_name_suffix,1,0)+ IF( SELF.Diff_lname,1,0)+ IF( SELF.Diff_fname,1,0)+ IF( SELF.Diff_mname,1,0)+ IF( SELF.Diff_name_suffix,1,0)+ IF( SELF.Diff_pty_typ,1,0)+ IF( SELF.Diff_nid,1,0)+ IF( SELF.Diff_ntype,1,0)+ IF( SELF.Diff_nindicator,1,0)+ IF( SELF.Diff_nitro_flag,1,0)+ IF( SELF.Diff_ssn,1,0)+ IF( SELF.Diff_case_num,1,0)+ IF( SELF.Diff_case_court,1,0)+ IF( SELF.Diff_case_date,1,0)+ IF( SELF.Diff_case_type,1,0)+ IF( SELF.Diff_case_type_desc,1,0)+ IF( SELF.Diff_county_of_origin,1,0)+ IF( SELF.Diff_dle_num,1,0)+ IF( SELF.Diff_fbi_num,1,0)+ IF( SELF.Diff_doc_num,1,0)+ IF( SELF.Diff_ins_num,1,0)+ IF( SELF.Diff_dl_num,1,0)+ IF( SELF.Diff_dl_state,1,0)+ IF( SELF.Diff_citizenship,1,0)+ IF( SELF.Diff_dob,1,0)+ IF( SELF.Diff_dob_alias,1,0)+ IF( SELF.Diff_county_of_birth,1,0)+ IF( SELF.Diff_place_of_birth,1,0)+ IF( SELF.Diff_street_address_1,1,0)+ IF( SELF.Diff_street_address_2,1,0)+ IF( SELF.Diff_street_address_3,1,0)+ IF( SELF.Diff_street_address_4,1,0)+ IF( SELF.Diff_street_address_5,1,0)+ IF( SELF.Diff_current_residence_county,1,0)+ IF( SELF.Diff_legal_residence_county,1,0)+ IF( SELF.Diff_race,1,0)+ IF( SELF.Diff_race_desc,1,0)+ IF( SELF.Diff_sex,1,0)+ IF( SELF.Diff_hair_color,1,0)+ IF( SELF.Diff_hair_color_desc,1,0)+ IF( SELF.Diff_eye_color,1,0)+ IF( SELF.Diff_eye_color_desc,1,0)+ IF( SELF.Diff_skin_color,1,0)+ IF( SELF.Diff_skin_color_desc,1,0)+ IF( SELF.Diff_scars_marks_tattoos_1,1,0)+ IF( SELF.Diff_scars_marks_tattoos_2,1,0)+ IF( SELF.Diff_scars_marks_tattoos_3,1,0)+ IF( SELF.Diff_scars_marks_tattoos_4,1,0)+ IF( SELF.Diff_scars_marks_tattoos_5,1,0)+ IF( SELF.Diff_height,1,0)+ IF( SELF.Diff_weight,1,0)+ IF( SELF.Diff_party_status,1,0)+ IF( SELF.Diff_party_status_desc,1,0)+ IF( SELF.Diff__3g_offender,1,0)+ IF( SELF.Diff_violent_offender,1,0)+ IF( SELF.Diff_sex_offender,1,0)+ IF( SELF.Diff_vop_offender,1,0)+ IF( SELF.Diff_data_type,1,0)+ IF( SELF.Diff_record_setup_date,1,0)+ IF( SELF.Diff_datasource,1,0)+ IF( SELF.Diff_prim_range,1,0)+ IF( SELF.Diff_predir,1,0)+ IF( SELF.Diff_prim_name,1,0)+ IF( SELF.Diff_addr_suffix,1,0)+ IF( SELF.Diff_postdir,1,0)+ IF( SELF.Diff_unit_desig,1,0)+ IF( SELF.Diff_sec_range,1,0)+ IF( SELF.Diff_p_city_name,1,0)+ IF( SELF.Diff_v_city_name,1,0)+ IF( SELF.Diff_st,1,0)+ IF( SELF.Diff_zip5,1,0)+ IF( SELF.Diff_zip4,1,0)+ IF( SELF.Diff_cart,1,0)+ IF( SELF.Diff_cr_sort_sz,1,0)+ IF( SELF.Diff_lot,1,0)+ IF( SELF.Diff_lot_order,1,0)+ IF( SELF.Diff_dpbc,1,0)+ IF( SELF.Diff_chk_digit,1,0)+ IF( SELF.Diff_rec_type,1,0)+ IF( SELF.Diff_ace_fips_st,1,0)+ IF( SELF.Diff_ace_fips_county,1,0)+ IF( SELF.Diff_geo_lat,1,0)+ IF( SELF.Diff_geo_long,1,0)+ IF( SELF.Diff_msa,1,0)+ IF( SELF.Diff_geo_blk,1,0)+ IF( SELF.Diff_geo_match,1,0)+ IF( SELF.Diff_err_stat,1,0)+ IF( SELF.Diff_clean_errors,1,0)+ IF( SELF.Diff_county_name,1,0)+ IF( SELF.Diff_did,1,0)+ IF( SELF.Diff_score,1,0)+ IF( SELF.Diff_ssn_appended,1,0)+ IF( SELF.Diff_curr_incar_flag,1,0)+ IF( SELF.Diff_curr_parole_flag,1,0)+ IF( SELF.Diff_curr_probation_flag,1,0)+ IF( SELF.Diff_src_upload_date,1,0)+ IF( SELF.Diff_age,1,0)+ IF( SELF.Diff_image_link,1,0)+ IF( SELF.Diff_fcra_conviction_flag,1,0)+ IF( SELF.Diff_fcra_traffic_flag,1,0)+ IF( SELF.Diff_fcra_date,1,0)+ IF( SELF.Diff_fcra_date_type,1,0)+ IF( SELF.Diff_conviction_override_date,1,0)+ IF( SELF.Diff_conviction_override_date_type,1,0)+ IF( SELF.Diff_offense_score,1,0)+ IF( SELF.Diff_offender_persistent_id,1,0);
  END;
// Now need to remove bad pivots from comparison
#uniquename(L)
  %L% := JOIN(in_left,bad_pivots,evaluate(LEFT,pivot_exp)=right.val,transform(left),left only,lookup);
#uniquename(R)
  %R% := JOIN(in_right,bad_pivots,evaluate(LEFT,pivot_exp)=right.val,transform(left),left only,lookup);
#uniquename(DiffL)
  %DiffL% := JOIN(%L%,%R%,evaluate(left,pivot_exp)=evaluate(right,pivot_exp),%fd%(left,right),hash);
#uniquename(Closest)
  %Closest% := DEDUP(SORT(%DiffL%,Val,Num_Diffs,local),Val,local); // Join will have distributed by pivot_exp
#uniquename(AggRec)
  %AggRec% := RECORD
    Count_Diff_process_date := COUNT(GROUP,%Closest%.Diff_process_date);
    Count_Diff_file_date := COUNT(GROUP,%Closest%.Diff_file_date);
    Count_Diff_offender_key := COUNT(GROUP,%Closest%.Diff_offender_key);
    Count_Diff_vendor := COUNT(GROUP,%Closest%.Diff_vendor);
    Count_Diff_source_file := COUNT(GROUP,%Closest%.Diff_source_file);
    Count_Diff_record_type := COUNT(GROUP,%Closest%.Diff_record_type);
    Count_Diff_orig_state := COUNT(GROUP,%Closest%.Diff_orig_state);
    Count_Diff_id_num := COUNT(GROUP,%Closest%.Diff_id_num);
    Count_Diff_pty_nm := COUNT(GROUP,%Closest%.Diff_pty_nm);
    Count_Diff_pty_nm_fmt := COUNT(GROUP,%Closest%.Diff_pty_nm_fmt);
    Count_Diff_orig_lname := COUNT(GROUP,%Closest%.Diff_orig_lname);
    Count_Diff_orig_fname := COUNT(GROUP,%Closest%.Diff_orig_fname);
    Count_Diff_orig_mname := COUNT(GROUP,%Closest%.Diff_orig_mname);
    Count_Diff_orig_name_suffix := COUNT(GROUP,%Closest%.Diff_orig_name_suffix);
    Count_Diff_lname := COUNT(GROUP,%Closest%.Diff_lname);
    Count_Diff_fname := COUNT(GROUP,%Closest%.Diff_fname);
    Count_Diff_mname := COUNT(GROUP,%Closest%.Diff_mname);
    Count_Diff_name_suffix := COUNT(GROUP,%Closest%.Diff_name_suffix);
    Count_Diff_pty_typ := COUNT(GROUP,%Closest%.Diff_pty_typ);
    Count_Diff_nid := COUNT(GROUP,%Closest%.Diff_nid);
    Count_Diff_ntype := COUNT(GROUP,%Closest%.Diff_ntype);
    Count_Diff_nindicator := COUNT(GROUP,%Closest%.Diff_nindicator);
    Count_Diff_nitro_flag := COUNT(GROUP,%Closest%.Diff_nitro_flag);
    Count_Diff_ssn := COUNT(GROUP,%Closest%.Diff_ssn);
    Count_Diff_case_num := COUNT(GROUP,%Closest%.Diff_case_num);
    Count_Diff_case_court := COUNT(GROUP,%Closest%.Diff_case_court);
    Count_Diff_case_date := COUNT(GROUP,%Closest%.Diff_case_date);
    Count_Diff_case_type := COUNT(GROUP,%Closest%.Diff_case_type);
    Count_Diff_case_type_desc := COUNT(GROUP,%Closest%.Diff_case_type_desc);
    Count_Diff_county_of_origin := COUNT(GROUP,%Closest%.Diff_county_of_origin);
    Count_Diff_dle_num := COUNT(GROUP,%Closest%.Diff_dle_num);
    Count_Diff_fbi_num := COUNT(GROUP,%Closest%.Diff_fbi_num);
    Count_Diff_doc_num := COUNT(GROUP,%Closest%.Diff_doc_num);
    Count_Diff_ins_num := COUNT(GROUP,%Closest%.Diff_ins_num);
    Count_Diff_dl_num := COUNT(GROUP,%Closest%.Diff_dl_num);
    Count_Diff_dl_state := COUNT(GROUP,%Closest%.Diff_dl_state);
    Count_Diff_citizenship := COUNT(GROUP,%Closest%.Diff_citizenship);
    Count_Diff_dob := COUNT(GROUP,%Closest%.Diff_dob);
    Count_Diff_dob_alias := COUNT(GROUP,%Closest%.Diff_dob_alias);
    Count_Diff_county_of_birth := COUNT(GROUP,%Closest%.Diff_county_of_birth);
    Count_Diff_place_of_birth := COUNT(GROUP,%Closest%.Diff_place_of_birth);
    Count_Diff_street_address_1 := COUNT(GROUP,%Closest%.Diff_street_address_1);
    Count_Diff_street_address_2 := COUNT(GROUP,%Closest%.Diff_street_address_2);
    Count_Diff_street_address_3 := COUNT(GROUP,%Closest%.Diff_street_address_3);
    Count_Diff_street_address_4 := COUNT(GROUP,%Closest%.Diff_street_address_4);
    Count_Diff_street_address_5 := COUNT(GROUP,%Closest%.Diff_street_address_5);
    Count_Diff_current_residence_county := COUNT(GROUP,%Closest%.Diff_current_residence_county);
    Count_Diff_legal_residence_county := COUNT(GROUP,%Closest%.Diff_legal_residence_county);
    Count_Diff_race := COUNT(GROUP,%Closest%.Diff_race);
    Count_Diff_race_desc := COUNT(GROUP,%Closest%.Diff_race_desc);
    Count_Diff_sex := COUNT(GROUP,%Closest%.Diff_sex);
    Count_Diff_hair_color := COUNT(GROUP,%Closest%.Diff_hair_color);
    Count_Diff_hair_color_desc := COUNT(GROUP,%Closest%.Diff_hair_color_desc);
    Count_Diff_eye_color := COUNT(GROUP,%Closest%.Diff_eye_color);
    Count_Diff_eye_color_desc := COUNT(GROUP,%Closest%.Diff_eye_color_desc);
    Count_Diff_skin_color := COUNT(GROUP,%Closest%.Diff_skin_color);
    Count_Diff_skin_color_desc := COUNT(GROUP,%Closest%.Diff_skin_color_desc);
    Count_Diff_scars_marks_tattoos_1 := COUNT(GROUP,%Closest%.Diff_scars_marks_tattoos_1);
    Count_Diff_scars_marks_tattoos_2 := COUNT(GROUP,%Closest%.Diff_scars_marks_tattoos_2);
    Count_Diff_scars_marks_tattoos_3 := COUNT(GROUP,%Closest%.Diff_scars_marks_tattoos_3);
    Count_Diff_scars_marks_tattoos_4 := COUNT(GROUP,%Closest%.Diff_scars_marks_tattoos_4);
    Count_Diff_scars_marks_tattoos_5 := COUNT(GROUP,%Closest%.Diff_scars_marks_tattoos_5);
    Count_Diff_height := COUNT(GROUP,%Closest%.Diff_height);
    Count_Diff_weight := COUNT(GROUP,%Closest%.Diff_weight);
    Count_Diff_party_status := COUNT(GROUP,%Closest%.Diff_party_status);
    Count_Diff_party_status_desc := COUNT(GROUP,%Closest%.Diff_party_status_desc);
    Count_Diff__3g_offender := COUNT(GROUP,%Closest%.Diff__3g_offender);
    Count_Diff_violent_offender := COUNT(GROUP,%Closest%.Diff_violent_offender);
    Count_Diff_sex_offender := COUNT(GROUP,%Closest%.Diff_sex_offender);
    Count_Diff_vop_offender := COUNT(GROUP,%Closest%.Diff_vop_offender);
    Count_Diff_data_type := COUNT(GROUP,%Closest%.Diff_data_type);
    Count_Diff_record_setup_date := COUNT(GROUP,%Closest%.Diff_record_setup_date);
    Count_Diff_datasource := COUNT(GROUP,%Closest%.Diff_datasource);
    Count_Diff_prim_range := COUNT(GROUP,%Closest%.Diff_prim_range);
    Count_Diff_predir := COUNT(GROUP,%Closest%.Diff_predir);
    Count_Diff_prim_name := COUNT(GROUP,%Closest%.Diff_prim_name);
    Count_Diff_addr_suffix := COUNT(GROUP,%Closest%.Diff_addr_suffix);
    Count_Diff_postdir := COUNT(GROUP,%Closest%.Diff_postdir);
    Count_Diff_unit_desig := COUNT(GROUP,%Closest%.Diff_unit_desig);
    Count_Diff_sec_range := COUNT(GROUP,%Closest%.Diff_sec_range);
    Count_Diff_p_city_name := COUNT(GROUP,%Closest%.Diff_p_city_name);
    Count_Diff_v_city_name := COUNT(GROUP,%Closest%.Diff_v_city_name);
    Count_Diff_st := COUNT(GROUP,%Closest%.Diff_st);
    Count_Diff_zip5 := COUNT(GROUP,%Closest%.Diff_zip5);
    Count_Diff_zip4 := COUNT(GROUP,%Closest%.Diff_zip4);
    Count_Diff_cart := COUNT(GROUP,%Closest%.Diff_cart);
    Count_Diff_cr_sort_sz := COUNT(GROUP,%Closest%.Diff_cr_sort_sz);
    Count_Diff_lot := COUNT(GROUP,%Closest%.Diff_lot);
    Count_Diff_lot_order := COUNT(GROUP,%Closest%.Diff_lot_order);
    Count_Diff_dpbc := COUNT(GROUP,%Closest%.Diff_dpbc);
    Count_Diff_chk_digit := COUNT(GROUP,%Closest%.Diff_chk_digit);
    Count_Diff_rec_type := COUNT(GROUP,%Closest%.Diff_rec_type);
    Count_Diff_ace_fips_st := COUNT(GROUP,%Closest%.Diff_ace_fips_st);
    Count_Diff_ace_fips_county := COUNT(GROUP,%Closest%.Diff_ace_fips_county);
    Count_Diff_geo_lat := COUNT(GROUP,%Closest%.Diff_geo_lat);
    Count_Diff_geo_long := COUNT(GROUP,%Closest%.Diff_geo_long);
    Count_Diff_msa := COUNT(GROUP,%Closest%.Diff_msa);
    Count_Diff_geo_blk := COUNT(GROUP,%Closest%.Diff_geo_blk);
    Count_Diff_geo_match := COUNT(GROUP,%Closest%.Diff_geo_match);
    Count_Diff_err_stat := COUNT(GROUP,%Closest%.Diff_err_stat);
    Count_Diff_clean_errors := COUNT(GROUP,%Closest%.Diff_clean_errors);
    Count_Diff_county_name := COUNT(GROUP,%Closest%.Diff_county_name);
    Count_Diff_did := COUNT(GROUP,%Closest%.Diff_did);
    Count_Diff_score := COUNT(GROUP,%Closest%.Diff_score);
    Count_Diff_ssn_appended := COUNT(GROUP,%Closest%.Diff_ssn_appended);
    Count_Diff_curr_incar_flag := COUNT(GROUP,%Closest%.Diff_curr_incar_flag);
    Count_Diff_curr_parole_flag := COUNT(GROUP,%Closest%.Diff_curr_parole_flag);
    Count_Diff_curr_probation_flag := COUNT(GROUP,%Closest%.Diff_curr_probation_flag);
    Count_Diff_src_upload_date := COUNT(GROUP,%Closest%.Diff_src_upload_date);
    Count_Diff_age := COUNT(GROUP,%Closest%.Diff_age);
    Count_Diff_image_link := COUNT(GROUP,%Closest%.Diff_image_link);
    Count_Diff_fcra_conviction_flag := COUNT(GROUP,%Closest%.Diff_fcra_conviction_flag);
    Count_Diff_fcra_traffic_flag := COUNT(GROUP,%Closest%.Diff_fcra_traffic_flag);
    Count_Diff_fcra_date := COUNT(GROUP,%Closest%.Diff_fcra_date);
    Count_Diff_fcra_date_type := COUNT(GROUP,%Closest%.Diff_fcra_date_type);
    Count_Diff_conviction_override_date := COUNT(GROUP,%Closest%.Diff_conviction_override_date);
    Count_Diff_conviction_override_date_type := COUNT(GROUP,%Closest%.Diff_conviction_override_date_type);
    Count_Diff_offense_score := COUNT(GROUP,%Closest%.Diff_offense_score);
    Count_Diff_offender_persistent_id := COUNT(GROUP,%Closest%.Diff_offender_persistent_id);
    %Closest%.SourceField;
  END;
  out_counts := table(%Closest%,%AggRec%,SourceField,few);
ENDMACRO;
END;
