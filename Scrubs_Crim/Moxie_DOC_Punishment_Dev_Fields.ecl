IMPORT ut,SALT33;
IMPORT Scrubs; // Import modules for FieldTypes attribute definitions
EXPORT Moxie_DOC_Punishment_Dev_Fields := MODULE
// Processing for each FieldType
EXPORT SALT33.StrType FieldTypeName(UNSIGNED2 i) := CHOOSE(i,'Invalid_Current_Date','Invalid_Future_Date','Non_Blank','Invalid_Char','Invalid_Num','Invalid_Punishment_Type','Invalid_ConOverDateFlag','Invalid_FCRADateFlag');
EXPORT FieldTypeNum(SALT33.StrType fn) := CASE(fn,'Invalid_Current_Date' => 1,'Invalid_Future_Date' => 2,'Non_Blank' => 3,'Invalid_Char' => 4,'Invalid_Num' => 5,'Invalid_Punishment_Type' => 6,'Invalid_ConOverDateFlag' => 7,'Invalid_FCRADateFlag' => 8,0);
EXPORT MakeFT_Invalid_Current_Date(SALT33.StrType s0) := FUNCTION
  RETURN  s0;
END;
EXPORT InValidFT_Invalid_Current_Date(SALT33.StrType s) := WHICH(~Scrubs.fn_valid_date(s)>0);
EXPORT InValidMessageFT_Invalid_Current_Date(UNSIGNED1 wh) := CHOOSE(wh,SALT33.HygieneErrors.CustomFail('Scrubs.fn_valid_date'),SALT33.HygieneErrors.Good);
EXPORT MakeFT_Invalid_Future_Date(SALT33.StrType s0) := FUNCTION
  RETURN  s0;
END;
EXPORT InValidFT_Invalid_Future_Date(SALT33.StrType s) := WHICH(~Scrubs.fn_valid_date(s,'future')>0);
EXPORT InValidMessageFT_Invalid_Future_Date(UNSIGNED1 wh) := CHOOSE(wh,SALT33.HygieneErrors.CustomFail('Scrubs.fn_valid_date'),SALT33.HygieneErrors.Good);
EXPORT MakeFT_Non_Blank(SALT33.StrType s0) := FUNCTION
  RETURN  s0;
END;
EXPORT InValidFT_Non_Blank(SALT33.StrType s) := WHICH(~(LENGTH(TRIM(s)) >= 1));
EXPORT InValidMessageFT_Non_Blank(UNSIGNED1 wh) := CHOOSE(wh,SALT33.HygieneErrors.NotLength('1..'),SALT33.HygieneErrors.Good);
EXPORT MakeFT_Invalid_Char(SALT33.StrType s0) := FUNCTION
  s1 := SALT33.stringfilter(s0,'ABCDEFGHIJKLMNOPQRSTUVWXYZ '); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_Invalid_Char(SALT33.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT33.StringFilter(s,'ABCDEFGHIJKLMNOPQRSTUVWXYZ '))));
EXPORT InValidMessageFT_Invalid_Char(UNSIGNED1 wh) := CHOOSE(wh,SALT33.HygieneErrors.NotInChars('ABCDEFGHIJKLMNOPQRSTUVWXYZ '),SALT33.HygieneErrors.Good);
EXPORT MakeFT_Invalid_Num(SALT33.StrType s0) := FUNCTION
  s1 := SALT33.stringfilter(s0,'0123456789 '); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_Invalid_Num(SALT33.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT33.StringFilter(s,'0123456789 '))));
EXPORT InValidMessageFT_Invalid_Num(UNSIGNED1 wh) := CHOOSE(wh,SALT33.HygieneErrors.NotInChars('0123456789 '),SALT33.HygieneErrors.Good);
EXPORT MakeFT_Invalid_Punishment_Type(SALT33.StrType s0) := FUNCTION
  RETURN  s0;
END;
EXPORT InValidFT_Invalid_Punishment_Type(SALT33.StrType s) := WHICH(((SALT33.StrType) s) NOT IN ['I','P']);
EXPORT InValidMessageFT_Invalid_Punishment_Type(UNSIGNED1 wh) := CHOOSE(wh,SALT33.HygieneErrors.NotInEnum('I|P'),SALT33.HygieneErrors.Good);
EXPORT MakeFT_Invalid_ConOverDateFlag(SALT33.StrType s0) := FUNCTION
  RETURN  s0;
END;
EXPORT InValidFT_Invalid_ConOverDateFlag(SALT33.StrType s) := WHICH(((SALT33.StrType) s) NOT IN ['R','P','I','']);
EXPORT InValidMessageFT_Invalid_ConOverDateFlag(UNSIGNED1 wh) := CHOOSE(wh,SALT33.HygieneErrors.NotInEnum('R|P|I|'),SALT33.HygieneErrors.Good);
EXPORT MakeFT_Invalid_FCRADateFlag(SALT33.StrType s0) := FUNCTION
  RETURN  s0;
END;
EXPORT InValidFT_Invalid_FCRADateFlag(SALT33.StrType s) := WHICH(((SALT33.StrType) s) NOT IN ['L','R','P','']);
EXPORT InValidMessageFT_Invalid_FCRADateFlag(UNSIGNED1 wh) := CHOOSE(wh,SALT33.HygieneErrors.NotInEnum('L|R|P|'),SALT33.HygieneErrors.Good);
EXPORT SALT33.StrType FieldName(UNSIGNED2 i) := CHOOSE(i,'process_date','offender_key','event_dt','vendor','source_file','record_type','orig_state','offense_key','punishment_type','sent_date','sent_length','sent_length_desc','cur_stat_inm','cur_stat_inm_desc','cur_loc_inm_cd','cur_loc_inm','inm_com_cty_cd','inm_com_cty','cur_sec_class_dt','cur_loc_sec','gain_time','gain_time_eff_dt','latest_adm_dt','sch_rel_dt','act_rel_dt','ctl_rel_dt','presump_par_rel_dt','mutl_part_pgm_dt','release_type','office_region','par_cur_stat','par_cur_stat_desc','par_status_dt','par_st_dt','par_sch_end_dt','par_act_end_dt','par_cty_cd','par_cty','supv_office','supv_officer','office_phone','tdcjid_unit_type','tdcjid_unit_assigned','tdcjid_admit_date','prison_status','recv_dept_code','recv_dept_date','parole_active_flag','casepull_date','pro_st_dt','pro_end_dt','pro_status','conviction_override_date','conviction_override_date_type','punishment_persistent_id','fcra_date','fcra_date_type');
EXPORT FieldNum(SALT33.StrType fn) := CASE(fn,'process_date' => 0,'offender_key' => 1,'event_dt' => 2,'vendor' => 3,'source_file' => 4,'record_type' => 5,'orig_state' => 6,'offense_key' => 7,'punishment_type' => 8,'sent_date' => 9,'sent_length' => 10,'sent_length_desc' => 11,'cur_stat_inm' => 12,'cur_stat_inm_desc' => 13,'cur_loc_inm_cd' => 14,'cur_loc_inm' => 15,'inm_com_cty_cd' => 16,'inm_com_cty' => 17,'cur_sec_class_dt' => 18,'cur_loc_sec' => 19,'gain_time' => 20,'gain_time_eff_dt' => 21,'latest_adm_dt' => 22,'sch_rel_dt' => 23,'act_rel_dt' => 24,'ctl_rel_dt' => 25,'presump_par_rel_dt' => 26,'mutl_part_pgm_dt' => 27,'release_type' => 28,'office_region' => 29,'par_cur_stat' => 30,'par_cur_stat_desc' => 31,'par_status_dt' => 32,'par_st_dt' => 33,'par_sch_end_dt' => 34,'par_act_end_dt' => 35,'par_cty_cd' => 36,'par_cty' => 37,'supv_office' => 38,'supv_officer' => 39,'office_phone' => 40,'tdcjid_unit_type' => 41,'tdcjid_unit_assigned' => 42,'tdcjid_admit_date' => 43,'prison_status' => 44,'recv_dept_code' => 45,'recv_dept_date' => 46,'parole_active_flag' => 47,'casepull_date' => 48,'pro_st_dt' => 49,'pro_end_dt' => 50,'pro_status' => 51,'conviction_override_date' => 52,'conviction_override_date_type' => 53,'punishment_persistent_id' => 54,'fcra_date' => 55,'fcra_date_type' => 56,0);
//Individual field level validation
EXPORT Make_process_date(SALT33.StrType s0) := MakeFT_Invalid_Current_Date(s0);
EXPORT InValid_process_date(SALT33.StrType s) := InValidFT_Invalid_Current_Date(s);
EXPORT InValidMessage_process_date(UNSIGNED1 wh) := InValidMessageFT_Invalid_Current_Date(wh);
EXPORT Make_offender_key(SALT33.StrType s0) := MakeFT_Non_Blank(s0);
EXPORT InValid_offender_key(SALT33.StrType s) := InValidFT_Non_Blank(s);
EXPORT InValidMessage_offender_key(UNSIGNED1 wh) := InValidMessageFT_Non_Blank(wh);
EXPORT Make_event_dt(SALT33.StrType s0) := MakeFT_Invalid_Future_Date(s0);
EXPORT InValid_event_dt(SALT33.StrType s) := InValidFT_Invalid_Future_Date(s);
EXPORT InValidMessage_event_dt(UNSIGNED1 wh) := InValidMessageFT_Invalid_Future_Date(wh);
EXPORT Make_vendor(SALT33.StrType s0) := MakeFT_Non_Blank(s0);
EXPORT InValid_vendor(SALT33.StrType s) := InValidFT_Non_Blank(s);
EXPORT InValidMessage_vendor(UNSIGNED1 wh) := InValidMessageFT_Non_Blank(wh);
EXPORT Make_source_file(SALT33.StrType s0) := s0;
EXPORT InValid_source_file(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_source_file(UNSIGNED1 wh) := '';
EXPORT Make_record_type(SALT33.StrType s0) := s0;
EXPORT InValid_record_type(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_record_type(UNSIGNED1 wh) := '';
EXPORT Make_orig_state(SALT33.StrType s0) := MakeFT_Invalid_Char(s0);
EXPORT InValid_orig_state(SALT33.StrType s) := InValidFT_Invalid_Char(s);
EXPORT InValidMessage_orig_state(UNSIGNED1 wh) := InValidMessageFT_Invalid_Char(wh);
EXPORT Make_offense_key(SALT33.StrType s0) := s0;
EXPORT InValid_offense_key(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_offense_key(UNSIGNED1 wh) := '';
EXPORT Make_punishment_type(SALT33.StrType s0) := MakeFT_Invalid_Punishment_Type(s0);
EXPORT InValid_punishment_type(SALT33.StrType s) := InValidFT_Invalid_Punishment_Type(s);
EXPORT InValidMessage_punishment_type(UNSIGNED1 wh) := InValidMessageFT_Invalid_Punishment_Type(wh);
EXPORT Make_sent_date(SALT33.StrType s0) := MakeFT_Invalid_Current_Date(s0);
EXPORT InValid_sent_date(SALT33.StrType s) := InValidFT_Invalid_Current_Date(s);
EXPORT InValidMessage_sent_date(UNSIGNED1 wh) := InValidMessageFT_Invalid_Current_Date(wh);
EXPORT Make_sent_length(SALT33.StrType s0) := MakeFT_Invalid_Num(s0);
EXPORT InValid_sent_length(SALT33.StrType s) := InValidFT_Invalid_Num(s);
EXPORT InValidMessage_sent_length(UNSIGNED1 wh) := InValidMessageFT_Invalid_Num(wh);
EXPORT Make_sent_length_desc(SALT33.StrType s0) := s0;
EXPORT InValid_sent_length_desc(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_sent_length_desc(UNSIGNED1 wh) := '';
EXPORT Make_cur_stat_inm(SALT33.StrType s0) := s0;
EXPORT InValid_cur_stat_inm(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_cur_stat_inm(UNSIGNED1 wh) := '';
EXPORT Make_cur_stat_inm_desc(SALT33.StrType s0) := s0;
EXPORT InValid_cur_stat_inm_desc(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_cur_stat_inm_desc(UNSIGNED1 wh) := '';
EXPORT Make_cur_loc_inm_cd(SALT33.StrType s0) := s0;
EXPORT InValid_cur_loc_inm_cd(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_cur_loc_inm_cd(UNSIGNED1 wh) := '';
EXPORT Make_cur_loc_inm(SALT33.StrType s0) := s0;
EXPORT InValid_cur_loc_inm(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_cur_loc_inm(UNSIGNED1 wh) := '';
EXPORT Make_inm_com_cty_cd(SALT33.StrType s0) := s0;
EXPORT InValid_inm_com_cty_cd(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_inm_com_cty_cd(UNSIGNED1 wh) := '';
EXPORT Make_inm_com_cty(SALT33.StrType s0) := s0;
EXPORT InValid_inm_com_cty(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_inm_com_cty(UNSIGNED1 wh) := '';
EXPORT Make_cur_sec_class_dt(SALT33.StrType s0) := s0;
EXPORT InValid_cur_sec_class_dt(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_cur_sec_class_dt(UNSIGNED1 wh) := '';
EXPORT Make_cur_loc_sec(SALT33.StrType s0) := s0;
EXPORT InValid_cur_loc_sec(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_cur_loc_sec(UNSIGNED1 wh) := '';
EXPORT Make_gain_time(SALT33.StrType s0) := s0;
EXPORT InValid_gain_time(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_gain_time(UNSIGNED1 wh) := '';
EXPORT Make_gain_time_eff_dt(SALT33.StrType s0) := s0;
EXPORT InValid_gain_time_eff_dt(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_gain_time_eff_dt(UNSIGNED1 wh) := '';
EXPORT Make_latest_adm_dt(SALT33.StrType s0) := MakeFT_Invalid_Future_Date(s0);
EXPORT InValid_latest_adm_dt(SALT33.StrType s) := InValidFT_Invalid_Future_Date(s);
EXPORT InValidMessage_latest_adm_dt(UNSIGNED1 wh) := InValidMessageFT_Invalid_Future_Date(wh);
EXPORT Make_sch_rel_dt(SALT33.StrType s0) := MakeFT_Invalid_Future_Date(s0);
EXPORT InValid_sch_rel_dt(SALT33.StrType s) := InValidFT_Invalid_Future_Date(s);
EXPORT InValidMessage_sch_rel_dt(UNSIGNED1 wh) := InValidMessageFT_Invalid_Future_Date(wh);
EXPORT Make_act_rel_dt(SALT33.StrType s0) := MakeFT_Invalid_Future_Date(s0);
EXPORT InValid_act_rel_dt(SALT33.StrType s) := InValidFT_Invalid_Future_Date(s);
EXPORT InValidMessage_act_rel_dt(UNSIGNED1 wh) := InValidMessageFT_Invalid_Future_Date(wh);
EXPORT Make_ctl_rel_dt(SALT33.StrType s0) := MakeFT_Invalid_Future_Date(s0);
EXPORT InValid_ctl_rel_dt(SALT33.StrType s) := InValidFT_Invalid_Future_Date(s);
EXPORT InValidMessage_ctl_rel_dt(UNSIGNED1 wh) := InValidMessageFT_Invalid_Future_Date(wh);
EXPORT Make_presump_par_rel_dt(SALT33.StrType s0) := MakeFT_Invalid_Future_Date(s0);
EXPORT InValid_presump_par_rel_dt(SALT33.StrType s) := InValidFT_Invalid_Future_Date(s);
EXPORT InValidMessage_presump_par_rel_dt(UNSIGNED1 wh) := InValidMessageFT_Invalid_Future_Date(wh);
EXPORT Make_mutl_part_pgm_dt(SALT33.StrType s0) := MakeFT_Invalid_Current_Date(s0);
EXPORT InValid_mutl_part_pgm_dt(SALT33.StrType s) := InValidFT_Invalid_Current_Date(s);
EXPORT InValidMessage_mutl_part_pgm_dt(UNSIGNED1 wh) := InValidMessageFT_Invalid_Current_Date(wh);
EXPORT Make_release_type(SALT33.StrType s0) := s0;
EXPORT InValid_release_type(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_release_type(UNSIGNED1 wh) := '';
EXPORT Make_office_region(SALT33.StrType s0) := s0;
EXPORT InValid_office_region(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_office_region(UNSIGNED1 wh) := '';
EXPORT Make_par_cur_stat(SALT33.StrType s0) := s0;
EXPORT InValid_par_cur_stat(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_par_cur_stat(UNSIGNED1 wh) := '';
EXPORT Make_par_cur_stat_desc(SALT33.StrType s0) := s0;
EXPORT InValid_par_cur_stat_desc(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_par_cur_stat_desc(UNSIGNED1 wh) := '';
EXPORT Make_par_status_dt(SALT33.StrType s0) := MakeFT_Invalid_Current_Date(s0);
EXPORT InValid_par_status_dt(SALT33.StrType s) := InValidFT_Invalid_Current_Date(s);
EXPORT InValidMessage_par_status_dt(UNSIGNED1 wh) := InValidMessageFT_Invalid_Current_Date(wh);
EXPORT Make_par_st_dt(SALT33.StrType s0) := MakeFT_Invalid_Future_Date(s0);
EXPORT InValid_par_st_dt(SALT33.StrType s) := InValidFT_Invalid_Future_Date(s);
EXPORT InValidMessage_par_st_dt(UNSIGNED1 wh) := InValidMessageFT_Invalid_Future_Date(wh);
EXPORT Make_par_sch_end_dt(SALT33.StrType s0) := MakeFT_Invalid_Future_Date(s0);
EXPORT InValid_par_sch_end_dt(SALT33.StrType s) := InValidFT_Invalid_Future_Date(s);
EXPORT InValidMessage_par_sch_end_dt(UNSIGNED1 wh) := InValidMessageFT_Invalid_Future_Date(wh);
EXPORT Make_par_act_end_dt(SALT33.StrType s0) := MakeFT_Invalid_Future_Date(s0);
EXPORT InValid_par_act_end_dt(SALT33.StrType s) := InValidFT_Invalid_Future_Date(s);
EXPORT InValidMessage_par_act_end_dt(UNSIGNED1 wh) := InValidMessageFT_Invalid_Future_Date(wh);
EXPORT Make_par_cty_cd(SALT33.StrType s0) := MakeFT_Invalid_Num(s0);
EXPORT InValid_par_cty_cd(SALT33.StrType s) := InValidFT_Invalid_Num(s);
EXPORT InValidMessage_par_cty_cd(UNSIGNED1 wh) := InValidMessageFT_Invalid_Num(wh);
EXPORT Make_par_cty(SALT33.StrType s0) := s0;
EXPORT InValid_par_cty(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_par_cty(UNSIGNED1 wh) := '';
EXPORT Make_supv_office(SALT33.StrType s0) := s0;
EXPORT InValid_supv_office(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_supv_office(UNSIGNED1 wh) := '';
EXPORT Make_supv_officer(SALT33.StrType s0) := s0;
EXPORT InValid_supv_officer(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_supv_officer(UNSIGNED1 wh) := '';
EXPORT Make_office_phone(SALT33.StrType s0) := s0;
EXPORT InValid_office_phone(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_office_phone(UNSIGNED1 wh) := '';
EXPORT Make_tdcjid_unit_type(SALT33.StrType s0) := s0;
EXPORT InValid_tdcjid_unit_type(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_tdcjid_unit_type(UNSIGNED1 wh) := '';
EXPORT Make_tdcjid_unit_assigned(SALT33.StrType s0) := s0;
EXPORT InValid_tdcjid_unit_assigned(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_tdcjid_unit_assigned(UNSIGNED1 wh) := '';
EXPORT Make_tdcjid_admit_date(SALT33.StrType s0) := MakeFT_Invalid_Current_Date(s0);
EXPORT InValid_tdcjid_admit_date(SALT33.StrType s) := InValidFT_Invalid_Current_Date(s);
EXPORT InValidMessage_tdcjid_admit_date(UNSIGNED1 wh) := InValidMessageFT_Invalid_Current_Date(wh);
EXPORT Make_prison_status(SALT33.StrType s0) := s0;
EXPORT InValid_prison_status(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_prison_status(UNSIGNED1 wh) := '';
EXPORT Make_recv_dept_code(SALT33.StrType s0) := s0;
EXPORT InValid_recv_dept_code(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_recv_dept_code(UNSIGNED1 wh) := '';
EXPORT Make_recv_dept_date(SALT33.StrType s0) := MakeFT_Invalid_Current_Date(s0);
EXPORT InValid_recv_dept_date(SALT33.StrType s) := InValidFT_Invalid_Current_Date(s);
EXPORT InValidMessage_recv_dept_date(UNSIGNED1 wh) := InValidMessageFT_Invalid_Current_Date(wh);
EXPORT Make_parole_active_flag(SALT33.StrType s0) := s0;
EXPORT InValid_parole_active_flag(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_parole_active_flag(UNSIGNED1 wh) := '';
EXPORT Make_casepull_date(SALT33.StrType s0) := MakeFT_Invalid_Current_Date(s0);
EXPORT InValid_casepull_date(SALT33.StrType s) := InValidFT_Invalid_Current_Date(s);
EXPORT InValidMessage_casepull_date(UNSIGNED1 wh) := InValidMessageFT_Invalid_Current_Date(wh);
EXPORT Make_pro_st_dt(SALT33.StrType s0) := MakeFT_Invalid_Future_Date(s0);
EXPORT InValid_pro_st_dt(SALT33.StrType s) := InValidFT_Invalid_Future_Date(s);
EXPORT InValidMessage_pro_st_dt(UNSIGNED1 wh) := InValidMessageFT_Invalid_Future_Date(wh);
EXPORT Make_pro_end_dt(SALT33.StrType s0) := MakeFT_Invalid_Future_Date(s0);
EXPORT InValid_pro_end_dt(SALT33.StrType s) := InValidFT_Invalid_Future_Date(s);
EXPORT InValidMessage_pro_end_dt(UNSIGNED1 wh) := InValidMessageFT_Invalid_Future_Date(wh);
EXPORT Make_pro_status(SALT33.StrType s0) := s0;
EXPORT InValid_pro_status(SALT33.StrType s) := FALSE;
EXPORT InValidMessage_pro_status(UNSIGNED1 wh) := '';
EXPORT Make_conviction_override_date(SALT33.StrType s0) := MakeFT_Invalid_Future_Date(s0);
EXPORT InValid_conviction_override_date(SALT33.StrType s) := InValidFT_Invalid_Future_Date(s);
EXPORT InValidMessage_conviction_override_date(UNSIGNED1 wh) := InValidMessageFT_Invalid_Future_Date(wh);
EXPORT Make_conviction_override_date_type(SALT33.StrType s0) := MakeFT_Invalid_ConOverDateFlag(s0);
EXPORT InValid_conviction_override_date_type(SALT33.StrType s) := InValidFT_Invalid_ConOverDateFlag(s);
EXPORT InValidMessage_conviction_override_date_type(UNSIGNED1 wh) := InValidMessageFT_Invalid_ConOverDateFlag(wh);
EXPORT Make_punishment_persistent_id(SALT33.StrType s0) := MakeFT_Invalid_Num(s0);
EXPORT InValid_punishment_persistent_id(SALT33.StrType s) := InValidFT_Invalid_Num(s);
EXPORT InValidMessage_punishment_persistent_id(UNSIGNED1 wh) := InValidMessageFT_Invalid_Num(wh);
EXPORT Make_fcra_date(SALT33.StrType s0) := MakeFT_Invalid_Current_Date(s0);
EXPORT InValid_fcra_date(SALT33.StrType s) := InValidFT_Invalid_Current_Date(s);
EXPORT InValidMessage_fcra_date(UNSIGNED1 wh) := InValidMessageFT_Invalid_Current_Date(wh);
EXPORT Make_fcra_date_type(SALT33.StrType s0) := MakeFT_Invalid_FCRADateFlag(s0);
EXPORT InValid_fcra_date_type(SALT33.StrType s) := InValidFT_Invalid_FCRADateFlag(s);
EXPORT InValidMessage_fcra_date_type(UNSIGNED1 wh) := InValidMessageFT_Invalid_FCRADateFlag(wh);
// This macro will compute and count field level differences based upon a pivot expression
export MAC_CountDifferencesByPivot(in_left,in_right,pivot_exp,bad_pivots,out_counts) := MACRO
  IMPORT SALT33,Scrubs_Crim;
//Find those highly occuring pivot values to remove them from consideration
#uniquename(tr)
  %tr% := table(in_left+in_right,{ val := pivot_exp; });
#uniquename(r1)
  %r1% := record
    %tr%.val;    unsigned Cnt := COUNT(GROUP);
  end;
#uniquename(t1)
  %t1% := table(%tr%,%r1%,val,local); // Pre-aggregate before distribute
#uniquename(r2)
  %r2% := record
    %t1%.val;    unsigned Cnt := SUM(GROUP,%t1%.Cnt);
  end;
#uniquename(t2)
  %t2% := table(%t1%,%r2%,val); // Now do global aggregate
Bad_Pivots := %t2%(Cnt>100);
#uniquename(dl)
  %dl% := RECORD
    BOOLEAN Diff_process_date;
    BOOLEAN Diff_offender_key;
    BOOLEAN Diff_event_dt;
    BOOLEAN Diff_vendor;
    BOOLEAN Diff_source_file;
    BOOLEAN Diff_record_type;
    BOOLEAN Diff_orig_state;
    BOOLEAN Diff_offense_key;
    BOOLEAN Diff_punishment_type;
    BOOLEAN Diff_sent_date;
    BOOLEAN Diff_sent_length;
    BOOLEAN Diff_sent_length_desc;
    BOOLEAN Diff_cur_stat_inm;
    BOOLEAN Diff_cur_stat_inm_desc;
    BOOLEAN Diff_cur_loc_inm_cd;
    BOOLEAN Diff_cur_loc_inm;
    BOOLEAN Diff_inm_com_cty_cd;
    BOOLEAN Diff_inm_com_cty;
    BOOLEAN Diff_cur_sec_class_dt;
    BOOLEAN Diff_cur_loc_sec;
    BOOLEAN Diff_gain_time;
    BOOLEAN Diff_gain_time_eff_dt;
    BOOLEAN Diff_latest_adm_dt;
    BOOLEAN Diff_sch_rel_dt;
    BOOLEAN Diff_act_rel_dt;
    BOOLEAN Diff_ctl_rel_dt;
    BOOLEAN Diff_presump_par_rel_dt;
    BOOLEAN Diff_mutl_part_pgm_dt;
    BOOLEAN Diff_release_type;
    BOOLEAN Diff_office_region;
    BOOLEAN Diff_par_cur_stat;
    BOOLEAN Diff_par_cur_stat_desc;
    BOOLEAN Diff_par_status_dt;
    BOOLEAN Diff_par_st_dt;
    BOOLEAN Diff_par_sch_end_dt;
    BOOLEAN Diff_par_act_end_dt;
    BOOLEAN Diff_par_cty_cd;
    BOOLEAN Diff_par_cty;
    BOOLEAN Diff_supv_office;
    BOOLEAN Diff_supv_officer;
    BOOLEAN Diff_office_phone;
    BOOLEAN Diff_tdcjid_unit_type;
    BOOLEAN Diff_tdcjid_unit_assigned;
    BOOLEAN Diff_tdcjid_admit_date;
    BOOLEAN Diff_prison_status;
    BOOLEAN Diff_recv_dept_code;
    BOOLEAN Diff_recv_dept_date;
    BOOLEAN Diff_parole_active_flag;
    BOOLEAN Diff_casepull_date;
    BOOLEAN Diff_pro_st_dt;
    BOOLEAN Diff_pro_end_dt;
    BOOLEAN Diff_pro_status;
    BOOLEAN Diff_conviction_override_date;
    BOOLEAN Diff_conviction_override_date_type;
    BOOLEAN Diff_punishment_persistent_id;
    BOOLEAN Diff_fcra_date;
    BOOLEAN Diff_fcra_date_type;
    SALT33.StrType SourceField {MAXLENGTH(30)};
    UNSIGNED Num_Diffs;
    SALT33.StrType Val {MAXLENGTH(1024)};
  END;
#uniquename(fd)
  %dl% %fd%(in_left le,in_right ri) := TRANSFORM
    SELF.Diff_process_date := le.process_date <> ri.process_date;
    SELF.Diff_offender_key := le.offender_key <> ri.offender_key;
    SELF.Diff_event_dt := le.event_dt <> ri.event_dt;
    SELF.Diff_vendor := le.vendor <> ri.vendor;
    SELF.Diff_source_file := le.source_file <> ri.source_file;
    SELF.Diff_record_type := le.record_type <> ri.record_type;
    SELF.Diff_orig_state := le.orig_state <> ri.orig_state;
    SELF.Diff_offense_key := le.offense_key <> ri.offense_key;
    SELF.Diff_punishment_type := le.punishment_type <> ri.punishment_type;
    SELF.Diff_sent_date := le.sent_date <> ri.sent_date;
    SELF.Diff_sent_length := le.sent_length <> ri.sent_length;
    SELF.Diff_sent_length_desc := le.sent_length_desc <> ri.sent_length_desc;
    SELF.Diff_cur_stat_inm := le.cur_stat_inm <> ri.cur_stat_inm;
    SELF.Diff_cur_stat_inm_desc := le.cur_stat_inm_desc <> ri.cur_stat_inm_desc;
    SELF.Diff_cur_loc_inm_cd := le.cur_loc_inm_cd <> ri.cur_loc_inm_cd;
    SELF.Diff_cur_loc_inm := le.cur_loc_inm <> ri.cur_loc_inm;
    SELF.Diff_inm_com_cty_cd := le.inm_com_cty_cd <> ri.inm_com_cty_cd;
    SELF.Diff_inm_com_cty := le.inm_com_cty <> ri.inm_com_cty;
    SELF.Diff_cur_sec_class_dt := le.cur_sec_class_dt <> ri.cur_sec_class_dt;
    SELF.Diff_cur_loc_sec := le.cur_loc_sec <> ri.cur_loc_sec;
    SELF.Diff_gain_time := le.gain_time <> ri.gain_time;
    SELF.Diff_gain_time_eff_dt := le.gain_time_eff_dt <> ri.gain_time_eff_dt;
    SELF.Diff_latest_adm_dt := le.latest_adm_dt <> ri.latest_adm_dt;
    SELF.Diff_sch_rel_dt := le.sch_rel_dt <> ri.sch_rel_dt;
    SELF.Diff_act_rel_dt := le.act_rel_dt <> ri.act_rel_dt;
    SELF.Diff_ctl_rel_dt := le.ctl_rel_dt <> ri.ctl_rel_dt;
    SELF.Diff_presump_par_rel_dt := le.presump_par_rel_dt <> ri.presump_par_rel_dt;
    SELF.Diff_mutl_part_pgm_dt := le.mutl_part_pgm_dt <> ri.mutl_part_pgm_dt;
    SELF.Diff_release_type := le.release_type <> ri.release_type;
    SELF.Diff_office_region := le.office_region <> ri.office_region;
    SELF.Diff_par_cur_stat := le.par_cur_stat <> ri.par_cur_stat;
    SELF.Diff_par_cur_stat_desc := le.par_cur_stat_desc <> ri.par_cur_stat_desc;
    SELF.Diff_par_status_dt := le.par_status_dt <> ri.par_status_dt;
    SELF.Diff_par_st_dt := le.par_st_dt <> ri.par_st_dt;
    SELF.Diff_par_sch_end_dt := le.par_sch_end_dt <> ri.par_sch_end_dt;
    SELF.Diff_par_act_end_dt := le.par_act_end_dt <> ri.par_act_end_dt;
    SELF.Diff_par_cty_cd := le.par_cty_cd <> ri.par_cty_cd;
    SELF.Diff_par_cty := le.par_cty <> ri.par_cty;
    SELF.Diff_supv_office := le.supv_office <> ri.supv_office;
    SELF.Diff_supv_officer := le.supv_officer <> ri.supv_officer;
    SELF.Diff_office_phone := le.office_phone <> ri.office_phone;
    SELF.Diff_tdcjid_unit_type := le.tdcjid_unit_type <> ri.tdcjid_unit_type;
    SELF.Diff_tdcjid_unit_assigned := le.tdcjid_unit_assigned <> ri.tdcjid_unit_assigned;
    SELF.Diff_tdcjid_admit_date := le.tdcjid_admit_date <> ri.tdcjid_admit_date;
    SELF.Diff_prison_status := le.prison_status <> ri.prison_status;
    SELF.Diff_recv_dept_code := le.recv_dept_code <> ri.recv_dept_code;
    SELF.Diff_recv_dept_date := le.recv_dept_date <> ri.recv_dept_date;
    SELF.Diff_parole_active_flag := le.parole_active_flag <> ri.parole_active_flag;
    SELF.Diff_casepull_date := le.casepull_date <> ri.casepull_date;
    SELF.Diff_pro_st_dt := le.pro_st_dt <> ri.pro_st_dt;
    SELF.Diff_pro_end_dt := le.pro_end_dt <> ri.pro_end_dt;
    SELF.Diff_pro_status := le.pro_status <> ri.pro_status;
    SELF.Diff_conviction_override_date := le.conviction_override_date <> ri.conviction_override_date;
    SELF.Diff_conviction_override_date_type := le.conviction_override_date_type <> ri.conviction_override_date_type;
    SELF.Diff_punishment_persistent_id := le.punishment_persistent_id <> ri.punishment_persistent_id;
    SELF.Diff_fcra_date := le.fcra_date <> ri.fcra_date;
    SELF.Diff_fcra_date_type := le.fcra_date_type <> ri.fcra_date_type;
    SELF.Val := (SALT33.StrType)evaluate(le,pivot_exp);
    SELF.SourceField := le.vendor;
    SELF.Num_Diffs := 0+ IF( SELF.Diff_process_date,1,0)+ IF( SELF.Diff_offender_key,1,0)+ IF( SELF.Diff_event_dt,1,0)+ IF( SELF.Diff_vendor,1,0)+ IF( SELF.Diff_source_file,1,0)+ IF( SELF.Diff_record_type,1,0)+ IF( SELF.Diff_orig_state,1,0)+ IF( SELF.Diff_offense_key,1,0)+ IF( SELF.Diff_punishment_type,1,0)+ IF( SELF.Diff_sent_date,1,0)+ IF( SELF.Diff_sent_length,1,0)+ IF( SELF.Diff_sent_length_desc,1,0)+ IF( SELF.Diff_cur_stat_inm,1,0)+ IF( SELF.Diff_cur_stat_inm_desc,1,0)+ IF( SELF.Diff_cur_loc_inm_cd,1,0)+ IF( SELF.Diff_cur_loc_inm,1,0)+ IF( SELF.Diff_inm_com_cty_cd,1,0)+ IF( SELF.Diff_inm_com_cty,1,0)+ IF( SELF.Diff_cur_sec_class_dt,1,0)+ IF( SELF.Diff_cur_loc_sec,1,0)+ IF( SELF.Diff_gain_time,1,0)+ IF( SELF.Diff_gain_time_eff_dt,1,0)+ IF( SELF.Diff_latest_adm_dt,1,0)+ IF( SELF.Diff_sch_rel_dt,1,0)+ IF( SELF.Diff_act_rel_dt,1,0)+ IF( SELF.Diff_ctl_rel_dt,1,0)+ IF( SELF.Diff_presump_par_rel_dt,1,0)+ IF( SELF.Diff_mutl_part_pgm_dt,1,0)+ IF( SELF.Diff_release_type,1,0)+ IF( SELF.Diff_office_region,1,0)+ IF( SELF.Diff_par_cur_stat,1,0)+ IF( SELF.Diff_par_cur_stat_desc,1,0)+ IF( SELF.Diff_par_status_dt,1,0)+ IF( SELF.Diff_par_st_dt,1,0)+ IF( SELF.Diff_par_sch_end_dt,1,0)+ IF( SELF.Diff_par_act_end_dt,1,0)+ IF( SELF.Diff_par_cty_cd,1,0)+ IF( SELF.Diff_par_cty,1,0)+ IF( SELF.Diff_supv_office,1,0)+ IF( SELF.Diff_supv_officer,1,0)+ IF( SELF.Diff_office_phone,1,0)+ IF( SELF.Diff_tdcjid_unit_type,1,0)+ IF( SELF.Diff_tdcjid_unit_assigned,1,0)+ IF( SELF.Diff_tdcjid_admit_date,1,0)+ IF( SELF.Diff_prison_status,1,0)+ IF( SELF.Diff_recv_dept_code,1,0)+ IF( SELF.Diff_recv_dept_date,1,0)+ IF( SELF.Diff_parole_active_flag,1,0)+ IF( SELF.Diff_casepull_date,1,0)+ IF( SELF.Diff_pro_st_dt,1,0)+ IF( SELF.Diff_pro_end_dt,1,0)+ IF( SELF.Diff_pro_status,1,0)+ IF( SELF.Diff_conviction_override_date,1,0)+ IF( SELF.Diff_conviction_override_date_type,1,0)+ IF( SELF.Diff_punishment_persistent_id,1,0)+ IF( SELF.Diff_fcra_date,1,0)+ IF( SELF.Diff_fcra_date_type,1,0);
  END;
// Now need to remove bad pivots from comparison
#uniquename(L)
  %L% := JOIN(in_left,bad_pivots,evaluate(LEFT,pivot_exp)=right.val,transform(left),left only,lookup);
#uniquename(R)
  %R% := JOIN(in_right,bad_pivots,evaluate(LEFT,pivot_exp)=right.val,transform(left),left only,lookup);
#uniquename(DiffL)
  %DiffL% := JOIN(%L%,%R%,evaluate(left,pivot_exp)=evaluate(right,pivot_exp),%fd%(left,right),hash);
#uniquename(Closest)
  %Closest% := DEDUP(SORT(%DiffL%,Val,Num_Diffs,local),Val,local); // Join will have distributed by pivot_exp
#uniquename(AggRec)
  %AggRec% := RECORD
    Count_Diff_process_date := COUNT(GROUP,%Closest%.Diff_process_date);
    Count_Diff_offender_key := COUNT(GROUP,%Closest%.Diff_offender_key);
    Count_Diff_event_dt := COUNT(GROUP,%Closest%.Diff_event_dt);
    Count_Diff_vendor := COUNT(GROUP,%Closest%.Diff_vendor);
    Count_Diff_source_file := COUNT(GROUP,%Closest%.Diff_source_file);
    Count_Diff_record_type := COUNT(GROUP,%Closest%.Diff_record_type);
    Count_Diff_orig_state := COUNT(GROUP,%Closest%.Diff_orig_state);
    Count_Diff_offense_key := COUNT(GROUP,%Closest%.Diff_offense_key);
    Count_Diff_punishment_type := COUNT(GROUP,%Closest%.Diff_punishment_type);
    Count_Diff_sent_date := COUNT(GROUP,%Closest%.Diff_sent_date);
    Count_Diff_sent_length := COUNT(GROUP,%Closest%.Diff_sent_length);
    Count_Diff_sent_length_desc := COUNT(GROUP,%Closest%.Diff_sent_length_desc);
    Count_Diff_cur_stat_inm := COUNT(GROUP,%Closest%.Diff_cur_stat_inm);
    Count_Diff_cur_stat_inm_desc := COUNT(GROUP,%Closest%.Diff_cur_stat_inm_desc);
    Count_Diff_cur_loc_inm_cd := COUNT(GROUP,%Closest%.Diff_cur_loc_inm_cd);
    Count_Diff_cur_loc_inm := COUNT(GROUP,%Closest%.Diff_cur_loc_inm);
    Count_Diff_inm_com_cty_cd := COUNT(GROUP,%Closest%.Diff_inm_com_cty_cd);
    Count_Diff_inm_com_cty := COUNT(GROUP,%Closest%.Diff_inm_com_cty);
    Count_Diff_cur_sec_class_dt := COUNT(GROUP,%Closest%.Diff_cur_sec_class_dt);
    Count_Diff_cur_loc_sec := COUNT(GROUP,%Closest%.Diff_cur_loc_sec);
    Count_Diff_gain_time := COUNT(GROUP,%Closest%.Diff_gain_time);
    Count_Diff_gain_time_eff_dt := COUNT(GROUP,%Closest%.Diff_gain_time_eff_dt);
    Count_Diff_latest_adm_dt := COUNT(GROUP,%Closest%.Diff_latest_adm_dt);
    Count_Diff_sch_rel_dt := COUNT(GROUP,%Closest%.Diff_sch_rel_dt);
    Count_Diff_act_rel_dt := COUNT(GROUP,%Closest%.Diff_act_rel_dt);
    Count_Diff_ctl_rel_dt := COUNT(GROUP,%Closest%.Diff_ctl_rel_dt);
    Count_Diff_presump_par_rel_dt := COUNT(GROUP,%Closest%.Diff_presump_par_rel_dt);
    Count_Diff_mutl_part_pgm_dt := COUNT(GROUP,%Closest%.Diff_mutl_part_pgm_dt);
    Count_Diff_release_type := COUNT(GROUP,%Closest%.Diff_release_type);
    Count_Diff_office_region := COUNT(GROUP,%Closest%.Diff_office_region);
    Count_Diff_par_cur_stat := COUNT(GROUP,%Closest%.Diff_par_cur_stat);
    Count_Diff_par_cur_stat_desc := COUNT(GROUP,%Closest%.Diff_par_cur_stat_desc);
    Count_Diff_par_status_dt := COUNT(GROUP,%Closest%.Diff_par_status_dt);
    Count_Diff_par_st_dt := COUNT(GROUP,%Closest%.Diff_par_st_dt);
    Count_Diff_par_sch_end_dt := COUNT(GROUP,%Closest%.Diff_par_sch_end_dt);
    Count_Diff_par_act_end_dt := COUNT(GROUP,%Closest%.Diff_par_act_end_dt);
    Count_Diff_par_cty_cd := COUNT(GROUP,%Closest%.Diff_par_cty_cd);
    Count_Diff_par_cty := COUNT(GROUP,%Closest%.Diff_par_cty);
    Count_Diff_supv_office := COUNT(GROUP,%Closest%.Diff_supv_office);
    Count_Diff_supv_officer := COUNT(GROUP,%Closest%.Diff_supv_officer);
    Count_Diff_office_phone := COUNT(GROUP,%Closest%.Diff_office_phone);
    Count_Diff_tdcjid_unit_type := COUNT(GROUP,%Closest%.Diff_tdcjid_unit_type);
    Count_Diff_tdcjid_unit_assigned := COUNT(GROUP,%Closest%.Diff_tdcjid_unit_assigned);
    Count_Diff_tdcjid_admit_date := COUNT(GROUP,%Closest%.Diff_tdcjid_admit_date);
    Count_Diff_prison_status := COUNT(GROUP,%Closest%.Diff_prison_status);
    Count_Diff_recv_dept_code := COUNT(GROUP,%Closest%.Diff_recv_dept_code);
    Count_Diff_recv_dept_date := COUNT(GROUP,%Closest%.Diff_recv_dept_date);
    Count_Diff_parole_active_flag := COUNT(GROUP,%Closest%.Diff_parole_active_flag);
    Count_Diff_casepull_date := COUNT(GROUP,%Closest%.Diff_casepull_date);
    Count_Diff_pro_st_dt := COUNT(GROUP,%Closest%.Diff_pro_st_dt);
    Count_Diff_pro_end_dt := COUNT(GROUP,%Closest%.Diff_pro_end_dt);
    Count_Diff_pro_status := COUNT(GROUP,%Closest%.Diff_pro_status);
    Count_Diff_conviction_override_date := COUNT(GROUP,%Closest%.Diff_conviction_override_date);
    Count_Diff_conviction_override_date_type := COUNT(GROUP,%Closest%.Diff_conviction_override_date_type);
    Count_Diff_punishment_persistent_id := COUNT(GROUP,%Closest%.Diff_punishment_persistent_id);
    Count_Diff_fcra_date := COUNT(GROUP,%Closest%.Diff_fcra_date);
    Count_Diff_fcra_date_type := COUNT(GROUP,%Closest%.Diff_fcra_date_type);
    %Closest%.SourceField;
  END;
  out_counts := table(%Closest%,%AggRec%,SourceField,few);
ENDMACRO;
END;
