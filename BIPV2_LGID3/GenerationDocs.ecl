Generated by SALT V3.0 Gold
File being processed :-
OPTIONS:-gh -ga -p2 -gs2
MODULE:BIPV2_LGID3 
FILENAME:LGID3 
 
// ------------------------------------
//  IDs and Tuning
// ------------------------------------
IDFIELD:EXISTS:LGID3
RIDFIELD:rcid
IDPARENTS:seleid,orgid,ultid
IDCHILDREN:proxid,dotid
RECORDS:7108236038
POPULATION:225000000
NINES:3
BLOCKTHRESHOLD:5 
HACK:SLICETHRESHOLD:1 // No slices allowed!
THRESHOLD:40
// This won't be needed after GitHub issue 667 is fixed
HACK:CUSTOMINTERNALJOIN:_mj_extra
// ------------------------------------
//  Field validation/cleaning
// ------------------------------------
FIELDTYPE:multiword:CAPS:ALLOW(ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'):SPACES( <>{}[]-^=!+&,./):ONFAIL(CLEAN)
FIELDTYPE:Noblanks:LENGTHS(1..):ONFAIL(REJECT)
// ------------------------------------
//  Linking fields
// ------------------------------------
// Exclude clusters linked by Hrchy
//FIELDTYPE:not_hrchy:ENUM(0|1):ONFAIL(REJECT)
//FIELD:nodes_total:LIKE(not_hrchy):CARRY:0,0
FIELD:sbfe_id:WEIGHT(2.0):27,471
FIELDTYPE:not_hrchy_parent:ENUM('0'):ONFAIL(REJECT)
FIELD:nodes_below_st:LIKE(not_hrchy_parent):CARRY:0,0
FIELD:Lgid3IfHrchy:FORCE(--):PROP:27,0
//LGID3 iteration may split sele cluster, the following will be used to merge them back.
FIELD:OriginalSeleId:CARRY:0,0
FIELD:OriginalOrgId:CARRY:0,0
// Legal Name
// FIELD:company_name:LIKE(multiword):BAGOFWORDS(MOST):EDIT1(2):PROP:FORCE(+):TYPE(string250):25,147
FIELD:company_name:LIKE(multiword):LIKE(Noblanks):BAGOFWORDS(MOST):EDIT1(2):PROP:TYPE(string250):26,328
FIELD:cnp_number:PROP:FORCE(--,OR(sbfe_id)):13,1
// NOTE: This assumes we hack the data to blank company_name except when it's a Legal Name.
// Given field specificities and the THRESHOLD we've set above, we in-effect require
// a match on at least one of: duns_number, company_charter_number, or company_fein
// DUNS number (v2)
FIELD:active_duns_number:PROP:SWITCH0:27,55
FIELD:duns_number:PROP:SWITCH0:27,66
CONCEPT:duns_number_concept:active_duns_number:duns_number:27,110
//CONCEPT:company_csz:v_city_name:st:zip:FORCE(+-2):14,23
//FIELD:duns_number:PROP:25,260
// Company_charter_number or company_fein (v1)
FIELD:company_fein:26,184
FIELD:company_inc_state:PROP:FORCE(+,OR(active_duns_number),OR(duns_number),OR(duns_number_concept),OR(company_fein),OR(sbfe_id)):6,32
FIELD:company_charter_number:PROP:CONTEXT(company_inc_state):26,106
FIELD:cnp_btype:3,54
// ----------------------------------------------------
//  FYI -- no effect, but helpful during sample review
// ----------------------------------------------------
// FIELD:active_duns_number:CARRY:26,1
FIELD:company_name_type_derived:CARRY:0,0
FIELD:hist_duns_number:CARRY:0,0
FIELD:active_domestic_corp_key:CARRY:0,0
FIELD:hist_domestic_corp_key:CARRY:0,0
FIELD:foreign_corp_key:CARRY:0,0
FIELD:unk_corp_key:CARRY:0,0
FIELD:cnp_name:CARRY:0,0
FIELD:cnp_hasNumber:CARRY:0,0
// FIELD:cnp_number:CARRY:0,0
FIELD:cnp_lowv:CARRY:0,0
FIELD:cnp_translated:CARRY:0,0
FIELD:cnp_classid:CARRY:0,0
FIELD:prim_range:CARRY:0,0
FIELD:prim_name:CARRY:0,0
FIELD:sec_range:CARRY:0,0
FIELD:v_city_name:CARRY:0,0
FIELD:st:CARRY:0,0
FIELD:zip:CARRY:0,0
//For the postprocess update. HS added
FIELD:has_lgid:CARRY:0,0	
FIELD:is_sele_level:CARRY:0,0
FIELD:is_org_level:CARRY:0,0
FIELD:is_ult_level:CARRY:0,0
FIELD:parent_proxid:CARRY:0,0
FIELD:sele_proxid:CARRY:0,0
FIELD:org_proxid:CARRY:0,0
FIELD:ultimate_proxid:CARRY:0,0
FIELD:levels_from_top:CARRY:0,0
FIELD:nodes_total:CARRY:0,0
// ------------------------------------
//  Metadata
// ------------------------------------
FIELD:dt_first_seen:RECORDDATE(FIRST):0,0
FIELD:dt_last_seen:RECORDDATE(LAST):0,0
SOURCEFIELD:source:CONSISTENT(company_inc_state,company_charter_number,company_name,cnp_btype,company_fein):PARTITION(BIPV2.Mod_Sources.src2partition)
BLOCKLINK:NAMED(OverLinks):BASIS(company_name)
 
Total available specificity:235
User specified threshold 40
Recommended matching threshold 38
Search Threshold set at 21
Use of PERSISTs in code set at:2
 
______________________________English Description of Matching Process___________________________
 
A SALT generated matching process really only contains one single matching rule.
SALT compares every record to every possible matching record and then allocates a score to how well
the records match. SALT then pairs those clusters which have the highest match scores provided the scores
meet or exceed the matching threshold. The scoring process is highly sophisticated and detailed below
however it can essentially be thought of as allocating points for every pair of fields that match
and subtracting points for every pair of fields that do not match.
This process was told to produce 3 nines of accuracy on a population of 225000000 with  7108236288 records.
A matching threshold of 38 is recommended although this was overridden to 40.
 
___Field by Field Breakdown of Scoring Method___
 
sbfe_id Scoring: Two sbfe_id fields will be considered to match if:
  - they are identical
The exact number of points allocated to a match will depend upon the global scarcity of the sbfe_id
but should average 27 points with a failed match substracting 14 points.
(This subtraction estimate is based upon 47% of clusters with 2 or more records have 2 or more values for sbfe_id.)
The SPC file has specified that the weight should be multiplied by  2.00
 
nodes_below_st Scoring: This field is not used for scoring; rather it is carried along for context and debugging
Lgid3IfHrchy Scoring: In order for two records to be a match it is also required that the Lgid3IfHrchy fields not not match.
If a field is null and another record in the same cluster has a value for that field then the other records value will be used.
Two Lgid3IfHrchy fields will be considered to match if:
  - they are identical
The exact number of points allocated to a match will depend upon the global scarcity of the Lgid3IfHrchy
but should average 27 points with a failed match substracting 27 points.
(This subtraction estimate is based upon 0% of clusters with 2 or more records have 2 or more values for Lgid3IfHrchy.)
 
OriginalSeleId Scoring: This field is not used for scoring; rather it is carried along for context and debugging
OriginalOrgId Scoring: This field is not used for scoring; rather it is carried along for context and debugging
company_name Scoring: If a field is null and another record in the same cluster has a value for that field then the other records value will be used.
Two company_name fields will be considered to match if:
  - they are identical
  - one can be turned into the other with 1 edit (see Glossary)
  - if the space separated tokens in one match the other if re-arranged
The exact number of points allocated to a match will depend upon the global scarcity of the company_name
and the degree of fuzziness required but should average 26 points with a failed match substracting 17 points.
(This subtraction estimate is based upon 32% of clusters with 2 or more records have 2 or more values for company_name.)
 
cnp_number Scoring: In order for two records to be a match it is also required that the cnp_number fields not not match.
If a field is null and another record in the same cluster has a value for that field then the other records value will be used.
Two cnp_number fields will be considered to match if:
  - they are identical
The exact number of points allocated to a match will depend upon the global scarcity of the cnp_number
but should average 13 points with a failed match substracting 12 points.
(This subtraction estimate is based upon 0% of clusters with 2 or more records have 2 or more values for cnp_number.)
 
active_duns_number Scoring: If a field is null and another record in the same cluster has a value for that field then the other records value will be used.
Two active_duns_number fields will be considered to match if:
  - they are identical
The exact number of points allocated to a match will depend upon the global scarcity of the active_duns_number
but should average 27 points with a failed match substracting 25 points.
(This subtraction estimate is based upon 5% of clusters with 2 or more records have 2 or more values for active_duns_number.)
It should also be noted that active_duns_number is a child field of duns_number_concept. Therefore if duns_number_concept is a full match this field will score 0.
This field is scaled to match with its parent duns_number_concept, on average that will mean multiplying by 50%
 
duns_number Scoring: If a field is null and another record in the same cluster has a value for that field then the other records value will be used.
Two duns_number fields will be considered to match if:
  - they are identical
The exact number of points allocated to a match will depend upon the global scarcity of the duns_number
but should average 27 points with a failed match substracting 25 points.
(This subtraction estimate is based upon 6% of clusters with 2 or more records have 2 or more values for duns_number.)
It should also be noted that duns_number is a child field of duns_number_concept. Therefore if duns_number_concept is a full match this field will score 0.
This field is scaled to match with its parent duns_number_concept, on average that will mean multiplying by 50%
 
duns_number_concept Scoring: Two duns_number_concept fields will be considered to match if:
  - they are identical
Note: duns_number_concept is an amalgam of (active_duns_number,duns_number)
Points will only be allocated for a match, the amount depending upon the scarcity of duns_number_concept
but should average 27 points.
In the event of a non-match this field will score 0 (and the child fields will be allowed to score).
 
company_fein Scoring: Two company_fein fields will be considered to match if:
  - they are identical
The exact number of points allocated to a match will depend upon the global scarcity of the company_fein
but should average 26 points with a failed match substracting 21 points.
(This subtraction estimate is based upon 18% of clusters with 2 or more records have 2 or more values for company_fein.)
 
company_inc_state Scoring: In order for two records to be a match it is also required that the company_inc_state fields match.
If a field is null and another record in the same cluster has a value for that field then the other records value will be used.
Two company_inc_state fields will be considered to match if:
  - they are identical
The exact number of points allocated to a match will depend upon the global scarcity of the company_inc_state
but should average 6 points with a failed match substracting 5 points.
(This subtraction estimate is based upon 3% of clusters with 2 or more records have 2 or more values for company_inc_state.)
 
company_charter_number Scoring: 
The scoring for this field is ignored unless the company_inc_state fields are identical.
If a field is null and another record in the same cluster has a value for that field then the other records value will be used.
Two company_charter_number fields will be considered to match if:
  - they are identical
The exact number of points allocated to a match will depend upon the global scarcity of the company_charter_number
but should average 26 points with a failed match substracting 23 points.
(This subtraction estimate is based upon 10% of clusters with 2 or more records have 2 or more values for company_charter_number.)
 
cnp_btype Scoring: Two cnp_btype fields will be considered to match if:
  - they are identical
The exact number of points allocated to a match will depend upon the global scarcity of the cnp_btype
but should average 3 points with a failed match substracting 2 points.
(This subtraction estimate is based upon 5% of clusters with 2 or more records have 2 or more values for cnp_btype.)
 
company_name_type_derived Scoring: This field is not used for scoring; rather it is carried along for context and debugging
hist_duns_number Scoring: This field is not used for scoring; rather it is carried along for context and debugging
active_domestic_corp_key Scoring: This field is not used for scoring; rather it is carried along for context and debugging
hist_domestic_corp_key Scoring: This field is not used for scoring; rather it is carried along for context and debugging
foreign_corp_key Scoring: This field is not used for scoring; rather it is carried along for context and debugging
unk_corp_key Scoring: This field is not used for scoring; rather it is carried along for context and debugging
cnp_name Scoring: This field is not used for scoring; rather it is carried along for context and debugging
cnp_hasNumber Scoring: This field is not used for scoring; rather it is carried along for context and debugging
cnp_lowv Scoring: This field is not used for scoring; rather it is carried along for context and debugging
cnp_translated Scoring: This field is not used for scoring; rather it is carried along for context and debugging
cnp_classid Scoring: This field is not used for scoring; rather it is carried along for context and debugging
prim_range Scoring: This field is not used for scoring; rather it is carried along for context and debugging
prim_name Scoring: This field is not used for scoring; rather it is carried along for context and debugging
sec_range Scoring: This field is not used for scoring; rather it is carried along for context and debugging
v_city_name Scoring: This field is not used for scoring; rather it is carried along for context and debugging
st Scoring: This field is not used for scoring; rather it is carried along for context and debugging
zip Scoring: This field is not used for scoring; rather it is carried along for context and debugging
has_lgid Scoring: This field is not used for scoring; rather it is carried along for context and debugging
is_sele_level Scoring: This field is not used for scoring; rather it is carried along for context and debugging
is_org_level Scoring: This field is not used for scoring; rather it is carried along for context and debugging
is_ult_level Scoring: This field is not used for scoring; rather it is carried along for context and debugging
parent_proxid Scoring: This field is not used for scoring; rather it is carried along for context and debugging
sele_proxid Scoring: This field is not used for scoring; rather it is carried along for context and debugging
org_proxid Scoring: This field is not used for scoring; rather it is carried along for context and debugging
ultimate_proxid Scoring: This field is not used for scoring; rather it is carried along for context and debugging
levels_from_top Scoring: This field is not used for scoring; rather it is carried along for context and debugging
nodes_total Scoring: This field is not used for scoring; rather it is carried along for context and debugging
dt_first_seen Scoring: Date fields are not presently used for scoring but are carried along for debugging purposes
dt_last_seen Scoring: Date fields are not presently used for scoring but are carried along for debugging purposes
 
__Glossary__
Edit Distance: An edit distance of (say) one implies that one string can be converted into another by doing one of
  - Changing one character
  - Deleting one character
  - Transposing two characters
 
Forcing Criteria: In addition to the general 'best match' logic it is possible to insist that
one particular field must match to some degree or the whole record is considered a bad match.
The criterial applied to that one field is the forcing criteria.
 
Cascade: Best Type rules are applied in such a way that the rules are applied one by one UNTIL the first rule succeeds; subsequent rules are then skipped.
 
__General Notes__
How is it decided how much to subtract for a bad match?
SALT computes for each field the percentage likelihood that a valid cluster will have two or more values for a given field
this value (called the switch value in the SALT literature) is then used to produce the subtraction value from the match value.
The value in this document is the one typed into the SPC file; the code will use a value computed at run-time.
 
