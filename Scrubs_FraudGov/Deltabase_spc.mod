//Import:Scrubs_FraudGov.Deltabase_GenerationDocs
Generated by SALT V3.11.11
Command line options: -gh 
File being processed :-
ï»¿OPTIONS:-gh
MODULE:Scrubs_FraudGov
FILENAME:Deltabase
NAMESCOPE:Deltabase
// Uncomment up to NINES for internal or external adl
// IDFIELD:EXISTS:<NameOfIDField>
// RIDFIELD:<NameOfRidField>
// RECORDS:<NumberOfRecordsInDataFile>
// POPULATION:<ExpectedNumberOfEntitiesInDataFile>
// NINES:<Precision required 3 = 99.9%, 2 = 99% etc>
// Uncomment Process if doing external adl
// PROCESS:<ProcessName>
// FIELDTYPE statements can be used to clean up (or check the cleaning) of individual fields
// BESTTYPE statements declare methods of generating the best value for a given cluster; this can also improve linking
// FUZZY can be used to create new types of FUZZY linking
FIELDTYPE:invalid_alpha:ALLOW(\NABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz):ONFAIL(BLANK)
FIELDTYPE:invalid_alphanumeric:ALLOW(\ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789):SPACES( <>{}[]-^='`!+&,./#()_):ONFAIL(BLANK)
FIELDTYPE:invalid_email:ALLOW(\-_.0123456789@ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz):ONFAIL(BLANK) 
FIELDTYPE:invalid_date:ALLOW(\N0123456789):SPACES( ./:-):LEFTTRIM:ONFAIL(BLANK)
FIELDTYPE:invalid_numeric:ALLOW(0123456789):ONFAIL(BLANK)
FIELDTYPE:invalid_numeric_string:ALLOW(\N-0123456789):ONFAIL(BLANK) 
FIELDTYPE:invalid_real:ALLOW(-.,0123456789):ONFAIL(BLANK)
FIELDTYPE:invalid_real_string:ALLOW(\N-.,0123456789):ONFAIL(BLANK)
FIELDTYPE:invalid_zip:ALLOW(\N-0123456789):SPACES( -):LEFTTRIM:LENGTHS(0,2,5,9,10):ONFAIL(BLANK)
FIELDTYPE:invalid_state:ALLOW(\ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz):LEFTTRIM:LENGTHS(0,2):ONFAIL(BLANK)
FIELDTYPE:invalid_ssn:ALLOW(\N0123456789):SPACES( -):LEFTTRIM:LENGTHS(0,2,9..):ONFAIL(BLANK)
FIELDTYPE:invalid_phone:ALLOW(\N0123456789):SPACES( +#()-):LEFTTRIM:LENGTHS(0,2,10..):ONFAIL(BLANK)
FIELDTYPE:invalid_ip:ALLOW(\N.x0123456789):SPACES( .):LEFTTRIM:ONFAIL(BLANK)
FIELDTYPE:invalid_name:ALLOW(\NABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz):LEFTTRIM:SPACES( ',):ONFAIL(BLANK)
// Remember to generate specificities and update the 0,0 placeholders below before running any sort of linking.
// If the actual specificity for a field is <1, round it up to 1 rather than down to 0.  If your cluster is running
// a shared repository, calling SALTTOOLS30.mac_Patch_SPC from the bottom of BWR_Specificities may be a convenience.
FIELD:inqlog_id:TYPE(UNSIGNED6):LIKE(invalid_numeric):0,0
FIELD:customer_id:TYPE(STRING20):LIKE(invalid_numeric_string):0,0
FIELD:transaction_id:TYPE(STRING):LIKE(invalid_alphanumeric):0,0
FIELD:date_of_transaction:TYPE(STRING10):LIKE(invalid_date):0,0
FIELD:household_id:TYPE(STRING20):LIKE(invalid_alphanumeric):0,0
FIELD:customer_person_id:TYPE(STRING20):LIKE(invalid_alphanumeric):0,0
FIELD:customer_program:TYPE(STRING1):LIKE(invalid_alpha):0,0
FIELD:reason_for_transaction_activity:TYPE(STRING):LIKE(invalid_alphanumeric):0,0
FIELD:inquiry_source:TYPE(STRING100):LIKE(invalid_alphanumeric):0,0
FIELD:customer_county:TYPE(STRING3):LIKE(invalid_alphanumeric):0,0
FIELD:customer_state:TYPE(STRING2):LIKE(invalid_state):0,0
FIELD:customer_agency_vertical_type:TYPE(STRING):LIKE(invalid_alphanumeric):0,0
FIELD:ssn:TYPE(STRING10):LIKE(invalid_ssn):0,0
FIELD:dob:TYPE(STRING10):LIKE(invalid_date):0,0
FIELD:rawlinkid:TYPE(UNSIGNED6):LIKE(invalid_numeric):0,0
FIELD:raw_full_name:TYPE(STRING100):LIKE(invalid_name):0,0
FIELD:raw_title:TYPE(STRING50):LIKE(invalid_alphanumeric):0,0
FIELD:raw_first_name:TYPE(STRING100):LIKE(invalid_name):0,0
FIELD:raw_middle_name:TYPE(STRING60):LIKE(invalid_name):0,0
FIELD:raw_last_name:TYPE(STRING100):LIKE(invalid_name):0,0
FIELD:raw_orig_suffix:TYPE(STRING10):LIKE(invalid_alphanumeric):0,0
FIELD:full_address:TYPE(STRING):LIKE(invalid_alphanumeric):0,0
FIELD:street_1:TYPE(STRING100):LIKE(invalid_alphanumeric):0,0
FIELD:city:TYPE(STRING100):LIKE(invalid_name):0,0
FIELD:state:TYPE(STRING10):LIKE(invalid_state):0,0
FIELD:zip:TYPE(STRING10):LIKE(invalid_zip):0,0
FIELD:county:TYPE(STRING3):LIKE(invalid_alphanumeric):0,0
FIELD:mailing_street_1:TYPE(STRING100):LIKE(invalid_alphanumeric):0,0
FIELD:mailing_city:TYPE(STRING30):LIKE(invalid_name):0,0
FIELD:mailing_state:TYPE(STRING2):LIKE(invalid_state):0,0
FIELD:mailing_zip:TYPE(STRING9):LIKE(invalid_zip):0,0
FIELD:mailing_county:TYPE(STRING3):LIKE(invalid_alphanumeric):0,0 
FIELD:phone_number:TYPE(STRING10):LIKE(invalid_phone):0,0
FIELD:ultid:TYPE(UNSIGNED6):LIKE(invalid_numeric):0,0
FIELD:orgid:TYPE(UNSIGNED6):LIKE(invalid_numeric):0,0
FIELD:seleid:TYPE(UNSIGNED6):LIKE(invalid_numeric):0,0
FIELD:tin:TYPE(STRING10):LIKE(invalid_alphanumeric):0,0
FIELD:email_address:TYPE(STRING256):LIKE(invalid_email):0,0
FIELD:appended_provider_id:TYPE(UNSIGNED6):LIKE(invalid_numeric):0,0
FIELD:lnpid:TYPE(UNSIGNED6):LIKE(invalid_numeric):0,0
FIELD:npi:TYPE(STRING10):LIKE(invalid_alphanumeric):0,0
FIELD:ip_address:TYPE(STRING25):LIKE(invalid_ip):0,0
FIELD:device_id:TYPE(STRING50):LIKE(invalid_alphanumeric):0,0
FIELD:professional_id:TYPE(STRING12):LIKE(invalid_alphanumeric):0,0
FIELD:bank_routing_number_1:TYPE(STRING20):LIKE(invalid_alphanumeric):0,0
FIELD:bank_account_number_1:TYPE(STRING20):LIKE(invalid_alphanumeric):0,0
FIELD:drivers_license_state:TYPE(STRING2):LIKE(invalid_alphanumeric):0,0
FIELD:drivers_license:TYPE(STRING25):LIKE(invalid_alphanumeric):0,0
FIELD:geo_lat:TYPE(STRING10):LIKE(invalid_real_string):0,0
FIELD:geo_long:TYPE(STRING11):LIKE(invalid_real_string):0,0
FIELD:reported_date:TYPE(STRING75):LIKE(invalid_date):0,0
FIELD:file_type:TYPE(UNSIGNED3):LIKE(invalid_numeric):0,0
FIELD:deceitful_confidence:TYPE(STRING10):LIKE(invalid_numeric_string):0,0
FIELD:reported_by:TYPE(STRING30):LIKE(invalid_alphanumeric):0,0
FIELD:reason_description:TYPE(STRING250):LIKE(invalid_alphanumeric):0,0
FIELD:event_type_1:TYPE(STRING30):LIKE(invalid_numeric_string):0,0
FIELD:event_entity_1:TYPE(STRING30):LIKE(invalid_alphanumeric):0,0
// CONCEPT statements should be used to group together interellated fields; such as address
// RELATIONSHIP is used to find non-obvious relationships between the clusters
// SOURCEFIELD is used if a field of the file denotes a source of the records in that file
// LINKPATH is used to define access paths for external linking


Total available specificity:0
Search Threshold set at -4
Use of PERSISTs in code set at:3


__Glossary__
Edit Distance: An edit distance of (say) one implies that one string can be converted into another by doing one of
  - Changing one character
  - Deleting one character
  - Transposing two characters

Forcing Criteria: In addition to the general 'best match' logic it is possible to insist that
one particular field must match to some degree or the whole record is considered a bad match.
The criterial applied to that one field is the forcing criteria.

Cascade: Best Type rules are applied in such a way that the rules are applied one by one UNTIL the first rule succeeds; subsequent rules are then skipped.


__General Notes__
How is it decided how much to subtract for a bad match?
SALT computes for each field the percentage likelihood that a valid cluster will have two or more values for a given field
this value (called the switch value in the SALT literature) is then used to produce the subtraction value from the match value.
The value in this document is the one typed into the SPC file; the code will use a value computed at run-time.


//Import:Scrubs_FraudGov.Deltabase_Delta
IMPORT SALT311,STD;
EXPORT Deltabase_Delta(DATASET(Deltabase_Layout_Deltabase)old_s, DATASET(Deltabase_Layout_Deltabase) new_s) := MODULE//Routines to compute the differences between two instances of a file
  SHARED inFieldList := ['inqlog_id','customer_id','transaction_id','date_of_transaction','household_id','customer_person_id','customer_program','reason_for_transaction_activity','inquiry_source','customer_county','customer_state','customer_agency_vertical_type','ssn','dob','rawlinkid','raw_full_name','raw_title','raw_first_name','raw_middle_name','raw_last_name','raw_orig_suffix','full_address','street_1','city','state','zip','county','mailing_street_1','mailing_city','mailing_state','mailing_zip','mailing_county','phone_number','ultid','orgid','seleid','tin','email_address','appended_provider_id','lnpid','npi','ip_address','device_id','professional_id','bank_routing_number_1','bank_account_number_1','drivers_license_state','drivers_license','geo_lat','geo_long','reported_date','file_type','deceitful_confidence','reported_by','reason_description','event_type_1','event_entity_1'];
  EXPORT Differences := SALT311.mod_Delta.mac_DifferencesByFieldList(old_s, new_s, inFieldList);
  EXPORT DifferenceSummary := Deltabase_hygiene(old_s).Summary('Old') + Deltabase_hygiene(new_s).Summary('New') + Deltabase_hygiene(PROJECT(Differences(deleted), TRANSFORM(Deltabase_Layout_Deltabase, SELF := LEFT.old_rec))).Summary('Deletions') + Deltabase_hygiene(PROJECT(Differences(added), TRANSFORM(Deltabase_Layout_Deltabase, SELF := LEFT.new_rec))).Summary('Additions');
  EXPORT StandardStats(BOOLEAN doHygieneSummaryGlobal = TRUE) := FUNCTION
    myTimeStamp := (UNSIGNED6)SALT311.Fn_Now('YYYYMMDDHHMMSS') : INDEPENDENT;
    hygieneDiffOverall := DifferenceSummary;
    SALT311.mod_StandardStatsTransforms.mac_hygieneSummaryTransform(Scrubs_FraudGov, Deltabase_Fields, 'RECORDOF(hygieneDiffOverall)', FALSE);
    hygieneDiffOverall_Standard := IF(doHygieneSummaryGlobal, NORMALIZE(hygieneDiffOverall, COUNT(inFieldList) * 6, xSummary(LEFT, COUNTER, myTimeStamp, LEFT.txt + '_all', LEFT.txt + '_all')));


    RETURN hygieneDiffOverall_Standard;
  END;
END;
//Import:Scrubs_FraudGov.Deltabase_BWR_Delta
//This is the code to execute in a builder window
#OPTION('multiplePersistInstances', FALSE);
#workunit('name','Scrubs_FraudGov.Deltabase_BWR_Delta - Finding the Delta of Two Files - SALT V3.11.11');
IMPORT Scrubs_FraudGov,SALT311;
FilePrev := DATASET([], Scrubs_FraudGov.Deltabase_Layout_Deltabase);
FileNew := DATASET([], Scrubs_FraudGov.Deltabase_Layout_Deltabase);
d := Scrubs_FraudGov.Deltabase_Delta(FilePrev, FileNew); // Instantiate delta module
PARALLEL(OUTPUT(d.DifferenceSummary, NAMED('Summary'), ALL),
         // The below outputs some of the differences; you may wish to send this to a file for investigation
         OUTPUT(d.Differences, NAMED('SomeDifferences')),
         // Standard layout statistics
         OUTPUT(d.StandardStats(), NAMED('StandardStats'), ALL));
//Import:Scrubs_FraudGov.Deltabase_Scrubs
IMPORT SALT311,STD;
EXPORT Deltabase_Scrubs := MODULE

// The module to handle the case where no scrubs exist
  EXPORT NumRules := 81;
  EXPORT NumRulesFromFieldType := 81;
  EXPORT NumRulesFromRecordType := 0;
  EXPORT NumFieldsWithRules := 57;
  EXPORT NumFieldsWithPossibleEdits := 57;
  EXPORT NumRulesWithPossibleEdits := 81;
  EXPORT Expanded_Layout := RECORD(Deltabase_Layout_Deltabase)
    UNSIGNED1 inqlog_id_Invalid;
    BOOLEAN inqlog_id_wouldClean;
    UNSIGNED1 customer_id_Invalid;
    BOOLEAN customer_id_wouldClean;
    UNSIGNED1 transaction_id_Invalid;
    BOOLEAN transaction_id_wouldClean;
    UNSIGNED1 date_of_transaction_Invalid;
    BOOLEAN date_of_transaction_wouldClean;
    UNSIGNED1 household_id_Invalid;
    BOOLEAN household_id_wouldClean;
    UNSIGNED1 customer_person_id_Invalid;
    BOOLEAN customer_person_id_wouldClean;
    UNSIGNED1 customer_program_Invalid;
    BOOLEAN customer_program_wouldClean;
    UNSIGNED1 reason_for_transaction_activity_Invalid;
    BOOLEAN reason_for_transaction_activity_wouldClean;
    UNSIGNED1 inquiry_source_Invalid;
    BOOLEAN inquiry_source_wouldClean;
    UNSIGNED1 customer_county_Invalid;
    BOOLEAN customer_county_wouldClean;
    UNSIGNED1 customer_state_Invalid;
    BOOLEAN customer_state_wouldClean;
    UNSIGNED1 customer_agency_vertical_type_Invalid;
    BOOLEAN customer_agency_vertical_type_wouldClean;
    UNSIGNED1 ssn_Invalid;
    BOOLEAN ssn_wouldClean;
    UNSIGNED1 dob_Invalid;
    BOOLEAN dob_wouldClean;
    UNSIGNED1 rawlinkid_Invalid;
    BOOLEAN rawlinkid_wouldClean;
    UNSIGNED1 raw_full_name_Invalid;
    BOOLEAN raw_full_name_wouldClean;
    UNSIGNED1 raw_title_Invalid;
    BOOLEAN raw_title_wouldClean;
    UNSIGNED1 raw_first_name_Invalid;
    BOOLEAN raw_first_name_wouldClean;
    UNSIGNED1 raw_middle_name_Invalid;
    BOOLEAN raw_middle_name_wouldClean;
    UNSIGNED1 raw_last_name_Invalid;
    BOOLEAN raw_last_name_wouldClean;
    UNSIGNED1 raw_orig_suffix_Invalid;
    BOOLEAN raw_orig_suffix_wouldClean;
    UNSIGNED1 full_address_Invalid;
    BOOLEAN full_address_wouldClean;
    UNSIGNED1 street_1_Invalid;
    BOOLEAN street_1_wouldClean;
    UNSIGNED1 city_Invalid;
    BOOLEAN city_wouldClean;
    UNSIGNED1 state_Invalid;
    BOOLEAN state_wouldClean;
    UNSIGNED1 zip_Invalid;
    BOOLEAN zip_wouldClean;
    UNSIGNED1 county_Invalid;
    BOOLEAN county_wouldClean;
    UNSIGNED1 mailing_street_1_Invalid;
    BOOLEAN mailing_street_1_wouldClean;
    UNSIGNED1 mailing_city_Invalid;
    BOOLEAN mailing_city_wouldClean;
    UNSIGNED1 mailing_state_Invalid;
    BOOLEAN mailing_state_wouldClean;
    UNSIGNED1 mailing_zip_Invalid;
    BOOLEAN mailing_zip_wouldClean;
    UNSIGNED1 mailing_county_Invalid;
    BOOLEAN mailing_county_wouldClean;
    UNSIGNED1 phone_number_Invalid;
    BOOLEAN phone_number_wouldClean;
    UNSIGNED1 ultid_Invalid;
    BOOLEAN ultid_wouldClean;
    UNSIGNED1 orgid_Invalid;
    BOOLEAN orgid_wouldClean;
    UNSIGNED1 seleid_Invalid;
    BOOLEAN seleid_wouldClean;
    UNSIGNED1 tin_Invalid;
    BOOLEAN tin_wouldClean;
    UNSIGNED1 email_address_Invalid;
    BOOLEAN email_address_wouldClean;
    UNSIGNED1 appended_provider_id_Invalid;
    BOOLEAN appended_provider_id_wouldClean;
    UNSIGNED1 lnpid_Invalid;
    BOOLEAN lnpid_wouldClean;
    UNSIGNED1 npi_Invalid;
    BOOLEAN npi_wouldClean;
    UNSIGNED1 ip_address_Invalid;
    BOOLEAN ip_address_wouldClean;
    UNSIGNED1 device_id_Invalid;
    BOOLEAN device_id_wouldClean;
    UNSIGNED1 professional_id_Invalid;
    BOOLEAN professional_id_wouldClean;
    UNSIGNED1 bank_routing_number_1_Invalid;
    BOOLEAN bank_routing_number_1_wouldClean;
    UNSIGNED1 bank_account_number_1_Invalid;
    BOOLEAN bank_account_number_1_wouldClean;
    UNSIGNED1 drivers_license_state_Invalid;
    BOOLEAN drivers_license_state_wouldClean;
    UNSIGNED1 drivers_license_Invalid;
    BOOLEAN drivers_license_wouldClean;
    UNSIGNED1 geo_lat_Invalid;
    BOOLEAN geo_lat_wouldClean;
    UNSIGNED1 geo_long_Invalid;
    BOOLEAN geo_long_wouldClean;
    UNSIGNED1 reported_date_Invalid;
    BOOLEAN reported_date_wouldClean;
    UNSIGNED1 file_type_Invalid;
    BOOLEAN file_type_wouldClean;
    UNSIGNED1 deceitful_confidence_Invalid;
    BOOLEAN deceitful_confidence_wouldClean;
    UNSIGNED1 reported_by_Invalid;
    BOOLEAN reported_by_wouldClean;
    UNSIGNED1 reason_description_Invalid;
    BOOLEAN reason_description_wouldClean;
    UNSIGNED1 event_type_1_Invalid;
    BOOLEAN event_type_1_wouldClean;
    UNSIGNED1 event_entity_1_Invalid;
    BOOLEAN event_entity_1_wouldClean;
  END;
  EXPORT  Bitmap_Layout := RECORD(Deltabase_Layout_Deltabase)
    UNSIGNED8 ScrubsBits1;
    UNSIGNED8 ScrubsBits2;
    UNSIGNED8 ScrubsCleanBits1;
  END;
  EXPORT Rule_Layout := RECORD(Deltabase_Layout_Deltabase)
    STRING Rules {MAXLENGTH(1000)};
  END;
  SHARED toRuleDesc(UNSIGNED c) := CHOOSE(c
          ,'inqlog_id:invalid_numeric:ALLOW'
          ,'customer_id:invalid_numeric_string:ALLOW'
          ,'transaction_id:invalid_alphanumeric:ALLOW'
          ,'date_of_transaction:invalid_date:LEFTTRIM','date_of_transaction:invalid_date:ALLOW'
          ,'household_id:invalid_alphanumeric:ALLOW'
          ,'customer_person_id:invalid_alphanumeric:ALLOW'
          ,'customer_program:invalid_alpha:ALLOW'
          ,'reason_for_transaction_activity:invalid_alphanumeric:ALLOW'
          ,'inquiry_source:invalid_alphanumeric:ALLOW'
          ,'customer_county:invalid_alphanumeric:ALLOW'
          ,'customer_state:invalid_state:LEFTTRIM','customer_state:invalid_state:ALLOW','customer_state:invalid_state:LENGTHS'
          ,'customer_agency_vertical_type:invalid_alphanumeric:ALLOW'
          ,'ssn:invalid_ssn:LEFTTRIM','ssn:invalid_ssn:ALLOW','ssn:invalid_ssn:LENGTHS'
          ,'dob:invalid_date:LEFTTRIM','dob:invalid_date:ALLOW'
          ,'rawlinkid:invalid_numeric:ALLOW'
          ,'raw_full_name:invalid_name:LEFTTRIM','raw_full_name:invalid_name:ALLOW'
          ,'raw_title:invalid_alphanumeric:ALLOW'
          ,'raw_first_name:invalid_name:LEFTTRIM','raw_first_name:invalid_name:ALLOW'
          ,'raw_middle_name:invalid_name:LEFTTRIM','raw_middle_name:invalid_name:ALLOW'
          ,'raw_last_name:invalid_name:LEFTTRIM','raw_last_name:invalid_name:ALLOW'
          ,'raw_orig_suffix:invalid_alphanumeric:ALLOW'
          ,'full_address:invalid_alphanumeric:ALLOW'
          ,'street_1:invalid_alphanumeric:ALLOW'
          ,'city:invalid_name:LEFTTRIM','city:invalid_name:ALLOW'
          ,'state:invalid_state:LEFTTRIM','state:invalid_state:ALLOW','state:invalid_state:LENGTHS'
          ,'zip:invalid_zip:LEFTTRIM','zip:invalid_zip:ALLOW','zip:invalid_zip:LENGTHS'
          ,'county:invalid_alphanumeric:ALLOW'
          ,'mailing_street_1:invalid_alphanumeric:ALLOW'
          ,'mailing_city:invalid_name:LEFTTRIM','mailing_city:invalid_name:ALLOW'
          ,'mailing_state:invalid_state:LEFTTRIM','mailing_state:invalid_state:ALLOW','mailing_state:invalid_state:LENGTHS'
          ,'mailing_zip:invalid_zip:LEFTTRIM','mailing_zip:invalid_zip:ALLOW','mailing_zip:invalid_zip:LENGTHS'
          ,'mailing_county:invalid_alphanumeric:ALLOW'
          ,'phone_number:invalid_phone:LEFTTRIM','phone_number:invalid_phone:ALLOW','phone_number:invalid_phone:LENGTHS'
          ,'ultid:invalid_numeric:ALLOW'
          ,'orgid:invalid_numeric:ALLOW'
          ,'seleid:invalid_numeric:ALLOW'
          ,'tin:invalid_alphanumeric:ALLOW'
          ,'email_address:invalid_email:ALLOW'
          ,'appended_provider_id:invalid_numeric:ALLOW'
          ,'lnpid:invalid_numeric:ALLOW'
          ,'npi:invalid_alphanumeric:ALLOW'
          ,'ip_address:invalid_ip:LEFTTRIM','ip_address:invalid_ip:ALLOW'
          ,'device_id:invalid_alphanumeric:ALLOW'
          ,'professional_id:invalid_alphanumeric:ALLOW'
          ,'bank_routing_number_1:invalid_alphanumeric:ALLOW'
          ,'bank_account_number_1:invalid_alphanumeric:ALLOW'
          ,'drivers_license_state:invalid_alphanumeric:ALLOW'
          ,'drivers_license:invalid_alphanumeric:ALLOW'
          ,'geo_lat:invalid_real_string:ALLOW'
          ,'geo_long:invalid_real_string:ALLOW'
          ,'reported_date:invalid_date:LEFTTRIM','reported_date:invalid_date:ALLOW'
          ,'file_type:invalid_numeric:ALLOW'
          ,'deceitful_confidence:invalid_numeric_string:ALLOW'
          ,'reported_by:invalid_alphanumeric:ALLOW'
          ,'reason_description:invalid_alphanumeric:ALLOW'
          ,'event_type_1:invalid_numeric_string:ALLOW'
          ,'event_entity_1:invalid_alphanumeric:ALLOW'
          ,'field:Number_Errored_Fields:SUMMARY'
          ,'field:Number_Perfect_Fields:SUMMARY'
          ,'rule:Number_Errored_Rules:SUMMARY'
          ,'rule:Number_Perfect_Rules:SUMMARY'
          ,'rule:Number_OnFail_Rules:SUMMARY'
          ,'record:Number_Errored_Records:SUMMARY'
          ,'record:Number_Perfect_Records:SUMMARY'
          ,'record:Number_Edited_Records:SUMMARY'
          ,'rule:Number_Edited_Rules:SUMMARY','UNKNOWN');
  SHARED toErrorMessage(UNSIGNED c) := CHOOSE(c
          ,Deltabase_Fields.InvalidMessage_inqlog_id(1)
          ,Deltabase_Fields.InvalidMessage_customer_id(1)
          ,Deltabase_Fields.InvalidMessage_transaction_id(1)
          ,Deltabase_Fields.InvalidMessage_date_of_transaction(1),Deltabase_Fields.InvalidMessage_date_of_transaction(2)
          ,Deltabase_Fields.InvalidMessage_household_id(1)
          ,Deltabase_Fields.InvalidMessage_customer_person_id(1)
          ,Deltabase_Fields.InvalidMessage_customer_program(1)
          ,Deltabase_Fields.InvalidMessage_reason_for_transaction_activity(1)
          ,Deltabase_Fields.InvalidMessage_inquiry_source(1)
          ,Deltabase_Fields.InvalidMessage_customer_county(1)
          ,Deltabase_Fields.InvalidMessage_customer_state(1),Deltabase_Fields.InvalidMessage_customer_state(2),Deltabase_Fields.InvalidMessage_customer_state(3)
          ,Deltabase_Fields.InvalidMessage_customer_agency_vertical_type(1)
          ,Deltabase_Fields.InvalidMessage_ssn(1),Deltabase_Fields.InvalidMessage_ssn(2),Deltabase_Fields.InvalidMessage_ssn(3)
          ,Deltabase_Fields.InvalidMessage_dob(1),Deltabase_Fields.InvalidMessage_dob(2)
          ,Deltabase_Fields.InvalidMessage_rawlinkid(1)
          ,Deltabase_Fields.InvalidMessage_raw_full_name(1),Deltabase_Fields.InvalidMessage_raw_full_name(2)
          ,Deltabase_Fields.InvalidMessage_raw_title(1)
          ,Deltabase_Fields.InvalidMessage_raw_first_name(1),Deltabase_Fields.InvalidMessage_raw_first_name(2)
          ,Deltabase_Fields.InvalidMessage_raw_middle_name(1),Deltabase_Fields.InvalidMessage_raw_middle_name(2)
          ,Deltabase_Fields.InvalidMessage_raw_last_name(1),Deltabase_Fields.InvalidMessage_raw_last_name(2)
          ,Deltabase_Fields.InvalidMessage_raw_orig_suffix(1)
          ,Deltabase_Fields.InvalidMessage_full_address(1)
          ,Deltabase_Fields.InvalidMessage_street_1(1)
          ,Deltabase_Fields.InvalidMessage_city(1),Deltabase_Fields.InvalidMessage_city(2)
          ,Deltabase_Fields.InvalidMessage_state(1),Deltabase_Fields.InvalidMessage_state(2),Deltabase_Fields.InvalidMessage_state(3)
          ,Deltabase_Fields.InvalidMessage_zip(1),Deltabase_Fields.InvalidMessage_zip(2),Deltabase_Fields.InvalidMessage_zip(3)
          ,Deltabase_Fields.InvalidMessage_county(1)
          ,Deltabase_Fields.InvalidMessage_mailing_street_1(1)
          ,Deltabase_Fields.InvalidMessage_mailing_city(1),Deltabase_Fields.InvalidMessage_mailing_city(2)
          ,Deltabase_Fields.InvalidMessage_mailing_state(1),Deltabase_Fields.InvalidMessage_mailing_state(2),Deltabase_Fields.InvalidMessage_mailing_state(3)
          ,Deltabase_Fields.InvalidMessage_mailing_zip(1),Deltabase_Fields.InvalidMessage_mailing_zip(2),Deltabase_Fields.InvalidMessage_mailing_zip(3)
          ,Deltabase_Fields.InvalidMessage_mailing_county(1)
          ,Deltabase_Fields.InvalidMessage_phone_number(1),Deltabase_Fields.InvalidMessage_phone_number(2),Deltabase_Fields.InvalidMessage_phone_number(3)
          ,Deltabase_Fields.InvalidMessage_ultid(1)
          ,Deltabase_Fields.InvalidMessage_orgid(1)
          ,Deltabase_Fields.InvalidMessage_seleid(1)
          ,Deltabase_Fields.InvalidMessage_tin(1)
          ,Deltabase_Fields.InvalidMessage_email_address(1)
          ,Deltabase_Fields.InvalidMessage_appended_provider_id(1)
          ,Deltabase_Fields.InvalidMessage_lnpid(1)
          ,Deltabase_Fields.InvalidMessage_npi(1)
          ,Deltabase_Fields.InvalidMessage_ip_address(1),Deltabase_Fields.InvalidMessage_ip_address(2)
          ,Deltabase_Fields.InvalidMessage_device_id(1)
          ,Deltabase_Fields.InvalidMessage_professional_id(1)
          ,Deltabase_Fields.InvalidMessage_bank_routing_number_1(1)
          ,Deltabase_Fields.InvalidMessage_bank_account_number_1(1)
          ,Deltabase_Fields.InvalidMessage_drivers_license_state(1)
          ,Deltabase_Fields.InvalidMessage_drivers_license(1)
          ,Deltabase_Fields.InvalidMessage_geo_lat(1)
          ,Deltabase_Fields.InvalidMessage_geo_long(1)
          ,Deltabase_Fields.InvalidMessage_reported_date(1),Deltabase_Fields.InvalidMessage_reported_date(2)
          ,Deltabase_Fields.InvalidMessage_file_type(1)
          ,Deltabase_Fields.InvalidMessage_deceitful_confidence(1)
          ,Deltabase_Fields.InvalidMessage_reported_by(1)
          ,Deltabase_Fields.InvalidMessage_reason_description(1)
          ,Deltabase_Fields.InvalidMessage_event_type_1(1)
          ,Deltabase_Fields.InvalidMessage_event_entity_1(1)
          ,'Fields with errors'
          ,'Fields without errors'
          ,'Rules with errors'
          ,'Rules without errors'
          ,'Rules with possible edits'
          ,'Records with at least one error'
          ,'Records without errors'
          ,'Edited records'
          ,'Rules leading to edits','UNKNOWN');
EXPORT FromNone(DATASET(Deltabase_Layout_Deltabase) h) := MODULE
  SHARED Expanded_Layout toExpanded(h le, BOOLEAN withOnfail) := TRANSFORM
    SELF.inqlog_id_Invalid := Deltabase_Fields.InValid_inqlog_id((SALT311.StrType)le.inqlog_id);
    SELF.inqlog_id := IF(SELF.inqlog_id_Invalid=0 OR NOT withOnfail, le.inqlog_id, (TYPEOF(le.inqlog_id))''); // ONFAIL(BLANK)
    SELF.inqlog_id_wouldClean :=  SELF.inqlog_id_Invalid > 0;
    SELF.customer_id_Invalid := Deltabase_Fields.InValid_customer_id((SALT311.StrType)le.customer_id);
    SELF.customer_id := IF(SELF.customer_id_Invalid=0 OR NOT withOnfail, le.customer_id, (TYPEOF(le.customer_id))''); // ONFAIL(BLANK)
    SELF.customer_id_wouldClean :=  SELF.customer_id_Invalid > 0;
    SELF.transaction_id_Invalid := Deltabase_Fields.InValid_transaction_id((SALT311.StrType)le.transaction_id);
    SELF.transaction_id := IF(SELF.transaction_id_Invalid=0 OR NOT withOnfail, le.transaction_id, (TYPEOF(le.transaction_id))''); // ONFAIL(BLANK)
    SELF.transaction_id_wouldClean :=  SELF.transaction_id_Invalid > 0;
    SELF.date_of_transaction_Invalid := Deltabase_Fields.InValid_date_of_transaction((SALT311.StrType)le.date_of_transaction);
    SELF.date_of_transaction := IF(SELF.date_of_transaction_Invalid=0 OR NOT withOnfail, le.date_of_transaction, (TYPEOF(le.date_of_transaction))''); // ONFAIL(BLANK)
    SELF.date_of_transaction_wouldClean :=  SELF.date_of_transaction_Invalid > 0;
    SELF.household_id_Invalid := Deltabase_Fields.InValid_household_id((SALT311.StrType)le.household_id);
    SELF.household_id := IF(SELF.household_id_Invalid=0 OR NOT withOnfail, le.household_id, (TYPEOF(le.household_id))''); // ONFAIL(BLANK)
    SELF.household_id_wouldClean :=  SELF.household_id_Invalid > 0;
    SELF.customer_person_id_Invalid := Deltabase_Fields.InValid_customer_person_id((SALT311.StrType)le.customer_person_id);
    SELF.customer_person_id := IF(SELF.customer_person_id_Invalid=0 OR NOT withOnfail, le.customer_person_id, (TYPEOF(le.customer_person_id))''); // ONFAIL(BLANK)
    SELF.customer_person_id_wouldClean :=  SELF.customer_person_id_Invalid > 0;
    SELF.customer_program_Invalid := Deltabase_Fields.InValid_customer_program((SALT311.StrType)le.customer_program);
    SELF.customer_program := IF(SELF.customer_program_Invalid=0 OR NOT withOnfail, le.customer_program, (TYPEOF(le.customer_program))''); // ONFAIL(BLANK)
    SELF.customer_program_wouldClean :=  SELF.customer_program_Invalid > 0;
    SELF.reason_for_transaction_activity_Invalid := Deltabase_Fields.InValid_reason_for_transaction_activity((SALT311.StrType)le.reason_for_transaction_activity);
    SELF.reason_for_transaction_activity := IF(SELF.reason_for_transaction_activity_Invalid=0 OR NOT withOnfail, le.reason_for_transaction_activity, (TYPEOF(le.reason_for_transaction_activity))''); // ONFAIL(BLANK)
    SELF.reason_for_transaction_activity_wouldClean :=  SELF.reason_for_transaction_activity_Invalid > 0;
    SELF.inquiry_source_Invalid := Deltabase_Fields.InValid_inquiry_source((SALT311.StrType)le.inquiry_source);
    SELF.inquiry_source := IF(SELF.inquiry_source_Invalid=0 OR NOT withOnfail, le.inquiry_source, (TYPEOF(le.inquiry_source))''); // ONFAIL(BLANK)
    SELF.inquiry_source_wouldClean :=  SELF.inquiry_source_Invalid > 0;
    SELF.customer_county_Invalid := Deltabase_Fields.InValid_customer_county((SALT311.StrType)le.customer_county);
    SELF.customer_county := IF(SELF.customer_county_Invalid=0 OR NOT withOnfail, le.customer_county, (TYPEOF(le.customer_county))''); // ONFAIL(BLANK)
    SELF.customer_county_wouldClean :=  SELF.customer_county_Invalid > 0;
    SELF.customer_state_Invalid := Deltabase_Fields.InValid_customer_state((SALT311.StrType)le.customer_state);
    SELF.customer_state := IF(SELF.customer_state_Invalid=0 OR NOT withOnfail, le.customer_state, (TYPEOF(le.customer_state))''); // ONFAIL(BLANK)
    SELF.customer_state_wouldClean :=  SELF.customer_state_Invalid > 0;
    SELF.customer_agency_vertical_type_Invalid := Deltabase_Fields.InValid_customer_agency_vertical_type((SALT311.StrType)le.customer_agency_vertical_type);
    SELF.customer_agency_vertical_type := IF(SELF.customer_agency_vertical_type_Invalid=0 OR NOT withOnfail, le.customer_agency_vertical_type, (TYPEOF(le.customer_agency_vertical_type))''); // ONFAIL(BLANK)
    SELF.customer_agency_vertical_type_wouldClean :=  SELF.customer_agency_vertical_type_Invalid > 0;
    SELF.ssn_Invalid := Deltabase_Fields.InValid_ssn((SALT311.StrType)le.ssn);
    SELF.ssn := IF(SELF.ssn_Invalid=0 OR NOT withOnfail, le.ssn, (TYPEOF(le.ssn))''); // ONFAIL(BLANK)
    SELF.ssn_wouldClean :=  SELF.ssn_Invalid > 0;
    SELF.dob_Invalid := Deltabase_Fields.InValid_dob((SALT311.StrType)le.dob);
    SELF.dob := IF(SELF.dob_Invalid=0 OR NOT withOnfail, le.dob, (TYPEOF(le.dob))''); // ONFAIL(BLANK)
    SELF.dob_wouldClean :=  SELF.dob_Invalid > 0;
    SELF.rawlinkid_Invalid := Deltabase_Fields.InValid_rawlinkid((SALT311.StrType)le.rawlinkid);
    SELF.rawlinkid := IF(SELF.rawlinkid_Invalid=0 OR NOT withOnfail, le.rawlinkid, (TYPEOF(le.rawlinkid))''); // ONFAIL(BLANK)
    SELF.rawlinkid_wouldClean :=  SELF.rawlinkid_Invalid > 0;
    SELF.raw_full_name_Invalid := Deltabase_Fields.InValid_raw_full_name((SALT311.StrType)le.raw_full_name);
    SELF.raw_full_name := IF(SELF.raw_full_name_Invalid=0 OR NOT withOnfail, le.raw_full_name, (TYPEOF(le.raw_full_name))''); // ONFAIL(BLANK)
    SELF.raw_full_name_wouldClean :=  SELF.raw_full_name_Invalid > 0;
    SELF.raw_title_Invalid := Deltabase_Fields.InValid_raw_title((SALT311.StrType)le.raw_title);
    SELF.raw_title := IF(SELF.raw_title_Invalid=0 OR NOT withOnfail, le.raw_title, (TYPEOF(le.raw_title))''); // ONFAIL(BLANK)
    SELF.raw_title_wouldClean :=  SELF.raw_title_Invalid > 0;
    SELF.raw_first_name_Invalid := Deltabase_Fields.InValid_raw_first_name((SALT311.StrType)le.raw_first_name);
    SELF.raw_first_name := IF(SELF.raw_first_name_Invalid=0 OR NOT withOnfail, le.raw_first_name, (TYPEOF(le.raw_first_name))''); // ONFAIL(BLANK)
    SELF.raw_first_name_wouldClean :=  SELF.raw_first_name_Invalid > 0;
    SELF.raw_middle_name_Invalid := Deltabase_Fields.InValid_raw_middle_name((SALT311.StrType)le.raw_middle_name);
    SELF.raw_middle_name := IF(SELF.raw_middle_name_Invalid=0 OR NOT withOnfail, le.raw_middle_name, (TYPEOF(le.raw_middle_name))''); // ONFAIL(BLANK)
    SELF.raw_middle_name_wouldClean :=  SELF.raw_middle_name_Invalid > 0;
    SELF.raw_last_name_Invalid := Deltabase_Fields.InValid_raw_last_name((SALT311.StrType)le.raw_last_name);
    SELF.raw_last_name := IF(SELF.raw_last_name_Invalid=0 OR NOT withOnfail, le.raw_last_name, (TYPEOF(le.raw_last_name))''); // ONFAIL(BLANK)
    SELF.raw_last_name_wouldClean :=  SELF.raw_last_name_Invalid > 0;
    SELF.raw_orig_suffix_Invalid := Deltabase_Fields.InValid_raw_orig_suffix((SALT311.StrType)le.raw_orig_suffix);
    SELF.raw_orig_suffix := IF(SELF.raw_orig_suffix_Invalid=0 OR NOT withOnfail, le.raw_orig_suffix, (TYPEOF(le.raw_orig_suffix))''); // ONFAIL(BLANK)
    SELF.raw_orig_suffix_wouldClean :=  SELF.raw_orig_suffix_Invalid > 0;
    SELF.full_address_Invalid := Deltabase_Fields.InValid_full_address((SALT311.StrType)le.full_address);
    SELF.full_address := IF(SELF.full_address_Invalid=0 OR NOT withOnfail, le.full_address, (TYPEOF(le.full_address))''); // ONFAIL(BLANK)
    SELF.full_address_wouldClean :=  SELF.full_address_Invalid > 0;
    SELF.street_1_Invalid := Deltabase_Fields.InValid_street_1((SALT311.StrType)le.street_1);
    SELF.street_1 := IF(SELF.street_1_Invalid=0 OR NOT withOnfail, le.street_1, (TYPEOF(le.street_1))''); // ONFAIL(BLANK)
    SELF.street_1_wouldClean :=  SELF.street_1_Invalid > 0;
    SELF.city_Invalid := Deltabase_Fields.InValid_city((SALT311.StrType)le.city);
    SELF.city := IF(SELF.city_Invalid=0 OR NOT withOnfail, le.city, (TYPEOF(le.city))''); // ONFAIL(BLANK)
    SELF.city_wouldClean :=  SELF.city_Invalid > 0;
    SELF.state_Invalid := Deltabase_Fields.InValid_state((SALT311.StrType)le.state);
    SELF.state := IF(SELF.state_Invalid=0 OR NOT withOnfail, le.state, (TYPEOF(le.state))''); // ONFAIL(BLANK)
    SELF.state_wouldClean :=  SELF.state_Invalid > 0;
    SELF.zip_Invalid := Deltabase_Fields.InValid_zip((SALT311.StrType)le.zip);
    SELF.zip := IF(SELF.zip_Invalid=0 OR NOT withOnfail, le.zip, (TYPEOF(le.zip))''); // ONFAIL(BLANK)
    SELF.zip_wouldClean :=  SELF.zip_Invalid > 0;
    SELF.county_Invalid := Deltabase_Fields.InValid_county((SALT311.StrType)le.county);
    SELF.county := IF(SELF.county_Invalid=0 OR NOT withOnfail, le.county, (TYPEOF(le.county))''); // ONFAIL(BLANK)
    SELF.county_wouldClean :=  SELF.county_Invalid > 0;
    SELF.mailing_street_1_Invalid := Deltabase_Fields.InValid_mailing_street_1((SALT311.StrType)le.mailing_street_1);
    SELF.mailing_street_1 := IF(SELF.mailing_street_1_Invalid=0 OR NOT withOnfail, le.mailing_street_1, (TYPEOF(le.mailing_street_1))''); // ONFAIL(BLANK)
    SELF.mailing_street_1_wouldClean :=  SELF.mailing_street_1_Invalid > 0;
    SELF.mailing_city_Invalid := Deltabase_Fields.InValid_mailing_city((SALT311.StrType)le.mailing_city);
    SELF.mailing_city := IF(SELF.mailing_city_Invalid=0 OR NOT withOnfail, le.mailing_city, (TYPEOF(le.mailing_city))''); // ONFAIL(BLANK)
    SELF.mailing_city_wouldClean :=  SELF.mailing_city_Invalid > 0;
    SELF.mailing_state_Invalid := Deltabase_Fields.InValid_mailing_state((SALT311.StrType)le.mailing_state);
    SELF.mailing_state := IF(SELF.mailing_state_Invalid=0 OR NOT withOnfail, le.mailing_state, (TYPEOF(le.mailing_state))''); // ONFAIL(BLANK)
    SELF.mailing_state_wouldClean :=  SELF.mailing_state_Invalid > 0;
    SELF.mailing_zip_Invalid := Deltabase_Fields.InValid_mailing_zip((SALT311.StrType)le.mailing_zip);
    SELF.mailing_zip := IF(SELF.mailing_zip_Invalid=0 OR NOT withOnfail, le.mailing_zip, (TYPEOF(le.mailing_zip))''); // ONFAIL(BLANK)
    SELF.mailing_zip_wouldClean :=  SELF.mailing_zip_Invalid > 0;
    SELF.mailing_county_Invalid := Deltabase_Fields.InValid_mailing_county((SALT311.StrType)le.mailing_county);
    SELF.mailing_county := IF(SELF.mailing_county_Invalid=0 OR NOT withOnfail, le.mailing_county, (TYPEOF(le.mailing_county))''); // ONFAIL(BLANK)
    SELF.mailing_county_wouldClean :=  SELF.mailing_county_Invalid > 0;
    SELF.phone_number_Invalid := Deltabase_Fields.InValid_phone_number((SALT311.StrType)le.phone_number);
    SELF.phone_number := IF(SELF.phone_number_Invalid=0 OR NOT withOnfail, le.phone_number, (TYPEOF(le.phone_number))''); // ONFAIL(BLANK)
    SELF.phone_number_wouldClean :=  SELF.phone_number_Invalid > 0;
    SELF.ultid_Invalid := Deltabase_Fields.InValid_ultid((SALT311.StrType)le.ultid);
    SELF.ultid := IF(SELF.ultid_Invalid=0 OR NOT withOnfail, le.ultid, (TYPEOF(le.ultid))''); // ONFAIL(BLANK)
    SELF.ultid_wouldClean :=  SELF.ultid_Invalid > 0;
    SELF.orgid_Invalid := Deltabase_Fields.InValid_orgid((SALT311.StrType)le.orgid);
    SELF.orgid := IF(SELF.orgid_Invalid=0 OR NOT withOnfail, le.orgid, (TYPEOF(le.orgid))''); // ONFAIL(BLANK)
    SELF.orgid_wouldClean :=  SELF.orgid_Invalid > 0;
    SELF.seleid_Invalid := Deltabase_Fields.InValid_seleid((SALT311.StrType)le.seleid);
    SELF.seleid := IF(SELF.seleid_Invalid=0 OR NOT withOnfail, le.seleid, (TYPEOF(le.seleid))''); // ONFAIL(BLANK)
    SELF.seleid_wouldClean :=  SELF.seleid_Invalid > 0;
    SELF.tin_Invalid := Deltabase_Fields.InValid_tin((SALT311.StrType)le.tin);
    SELF.tin := IF(SELF.tin_Invalid=0 OR NOT withOnfail, le.tin, (TYPEOF(le.tin))''); // ONFAIL(BLANK)
    SELF.tin_wouldClean :=  SELF.tin_Invalid > 0;
    SELF.email_address_Invalid := Deltabase_Fields.InValid_email_address((SALT311.StrType)le.email_address);
    SELF.email_address := IF(SELF.email_address_Invalid=0 OR NOT withOnfail, le.email_address, (TYPEOF(le.email_address))''); // ONFAIL(BLANK)
    SELF.email_address_wouldClean :=  SELF.email_address_Invalid > 0;
    SELF.appended_provider_id_Invalid := Deltabase_Fields.InValid_appended_provider_id((SALT311.StrType)le.appended_provider_id);
    SELF.appended_provider_id := IF(SELF.appended_provider_id_Invalid=0 OR NOT withOnfail, le.appended_provider_id, (TYPEOF(le.appended_provider_id))''); // ONFAIL(BLANK)
    SELF.appended_provider_id_wouldClean :=  SELF.appended_provider_id_Invalid > 0;
    SELF.lnpid_Invalid := Deltabase_Fields.InValid_lnpid((SALT311.StrType)le.lnpid);
    SELF.lnpid := IF(SELF.lnpid_Invalid=0 OR NOT withOnfail, le.lnpid, (TYPEOF(le.lnpid))''); // ONFAIL(BLANK)
    SELF.lnpid_wouldClean :=  SELF.lnpid_Invalid > 0;
    SELF.npi_Invalid := Deltabase_Fields.InValid_npi((SALT311.StrType)le.npi);
    SELF.npi := IF(SELF.npi_Invalid=0 OR NOT withOnfail, le.npi, (TYPEOF(le.npi))''); // ONFAIL(BLANK)
    SELF.npi_wouldClean :=  SELF.npi_Invalid > 0;
    SELF.ip_address_Invalid := Deltabase_Fields.InValid_ip_address((SALT311.StrType)le.ip_address);
    SELF.ip_address := IF(SELF.ip_address_Invalid=0 OR NOT withOnfail, le.ip_address, (TYPEOF(le.ip_address))''); // ONFAIL(BLANK)
    SELF.ip_address_wouldClean :=  SELF.ip_address_Invalid > 0;
    SELF.device_id_Invalid := Deltabase_Fields.InValid_device_id((SALT311.StrType)le.device_id);
    SELF.device_id := IF(SELF.device_id_Invalid=0 OR NOT withOnfail, le.device_id, (TYPEOF(le.device_id))''); // ONFAIL(BLANK)
    SELF.device_id_wouldClean :=  SELF.device_id_Invalid > 0;
    SELF.professional_id_Invalid := Deltabase_Fields.InValid_professional_id((SALT311.StrType)le.professional_id);
    SELF.professional_id := IF(SELF.professional_id_Invalid=0 OR NOT withOnfail, le.professional_id, (TYPEOF(le.professional_id))''); // ONFAIL(BLANK)
    SELF.professional_id_wouldClean :=  SELF.professional_id_Invalid > 0;
    SELF.bank_routing_number_1_Invalid := Deltabase_Fields.InValid_bank_routing_number_1((SALT311.StrType)le.bank_routing_number_1);
    SELF.bank_routing_number_1 := IF(SELF.bank_routing_number_1_Invalid=0 OR NOT withOnfail, le.bank_routing_number_1, (TYPEOF(le.bank_routing_number_1))''); // ONFAIL(BLANK)
    SELF.bank_routing_number_1_wouldClean :=  SELF.bank_routing_number_1_Invalid > 0;
    SELF.bank_account_number_1_Invalid := Deltabase_Fields.InValid_bank_account_number_1((SALT311.StrType)le.bank_account_number_1);
    SELF.bank_account_number_1 := IF(SELF.bank_account_number_1_Invalid=0 OR NOT withOnfail, le.bank_account_number_1, (TYPEOF(le.bank_account_number_1))''); // ONFAIL(BLANK)
    SELF.bank_account_number_1_wouldClean :=  SELF.bank_account_number_1_Invalid > 0;
    SELF.drivers_license_state_Invalid := Deltabase_Fields.InValid_drivers_license_state((SALT311.StrType)le.drivers_license_state);
    SELF.drivers_license_state := IF(SELF.drivers_license_state_Invalid=0 OR NOT withOnfail, le.drivers_license_state, (TYPEOF(le.drivers_license_state))''); // ONFAIL(BLANK)
    SELF.drivers_license_state_wouldClean :=  SELF.drivers_license_state_Invalid > 0;
    SELF.drivers_license_Invalid := Deltabase_Fields.InValid_drivers_license((SALT311.StrType)le.drivers_license);
    SELF.drivers_license := IF(SELF.drivers_license_Invalid=0 OR NOT withOnfail, le.drivers_license, (TYPEOF(le.drivers_license))''); // ONFAIL(BLANK)
    SELF.drivers_license_wouldClean :=  SELF.drivers_license_Invalid > 0;
    SELF.geo_lat_Invalid := Deltabase_Fields.InValid_geo_lat((SALT311.StrType)le.geo_lat);
    SELF.geo_lat := IF(SELF.geo_lat_Invalid=0 OR NOT withOnfail, le.geo_lat, (TYPEOF(le.geo_lat))''); // ONFAIL(BLANK)
    SELF.geo_lat_wouldClean :=  SELF.geo_lat_Invalid > 0;
    SELF.geo_long_Invalid := Deltabase_Fields.InValid_geo_long((SALT311.StrType)le.geo_long);
    SELF.geo_long := IF(SELF.geo_long_Invalid=0 OR NOT withOnfail, le.geo_long, (TYPEOF(le.geo_long))''); // ONFAIL(BLANK)
    SELF.geo_long_wouldClean :=  SELF.geo_long_Invalid > 0;
    SELF.reported_date_Invalid := Deltabase_Fields.InValid_reported_date((SALT311.StrType)le.reported_date);
    SELF.reported_date := IF(SELF.reported_date_Invalid=0 OR NOT withOnfail, le.reported_date, (TYPEOF(le.reported_date))''); // ONFAIL(BLANK)
    SELF.reported_date_wouldClean :=  SELF.reported_date_Invalid > 0;
    SELF.file_type_Invalid := Deltabase_Fields.InValid_file_type((SALT311.StrType)le.file_type);
    SELF.file_type := IF(SELF.file_type_Invalid=0 OR NOT withOnfail, le.file_type, (TYPEOF(le.file_type))''); // ONFAIL(BLANK)
    SELF.file_type_wouldClean :=  SELF.file_type_Invalid > 0;
    SELF.deceitful_confidence_Invalid := Deltabase_Fields.InValid_deceitful_confidence((SALT311.StrType)le.deceitful_confidence);
    SELF.deceitful_confidence := IF(SELF.deceitful_confidence_Invalid=0 OR NOT withOnfail, le.deceitful_confidence, (TYPEOF(le.deceitful_confidence))''); // ONFAIL(BLANK)
    SELF.deceitful_confidence_wouldClean :=  SELF.deceitful_confidence_Invalid > 0;
    SELF.reported_by_Invalid := Deltabase_Fields.InValid_reported_by((SALT311.StrType)le.reported_by);
    SELF.reported_by := IF(SELF.reported_by_Invalid=0 OR NOT withOnfail, le.reported_by, (TYPEOF(le.reported_by))''); // ONFAIL(BLANK)
    SELF.reported_by_wouldClean :=  SELF.reported_by_Invalid > 0;
    SELF.reason_description_Invalid := Deltabase_Fields.InValid_reason_description((SALT311.StrType)le.reason_description);
    SELF.reason_description := IF(SELF.reason_description_Invalid=0 OR NOT withOnfail, le.reason_description, (TYPEOF(le.reason_description))''); // ONFAIL(BLANK)
    SELF.reason_description_wouldClean :=  SELF.reason_description_Invalid > 0;
    SELF.event_type_1_Invalid := Deltabase_Fields.InValid_event_type_1((SALT311.StrType)le.event_type_1);
    SELF.event_type_1 := IF(SELF.event_type_1_Invalid=0 OR NOT withOnfail, le.event_type_1, (TYPEOF(le.event_type_1))''); // ONFAIL(BLANK)
    SELF.event_type_1_wouldClean :=  SELF.event_type_1_Invalid > 0;
    SELF.event_entity_1_Invalid := Deltabase_Fields.InValid_event_entity_1((SALT311.StrType)le.event_entity_1);
    SELF.event_entity_1 := IF(SELF.event_entity_1_Invalid=0 OR NOT withOnfail, le.event_entity_1, (TYPEOF(le.event_entity_1))''); // ONFAIL(BLANK)
    SELF.event_entity_1_wouldClean :=  SELF.event_entity_1_Invalid > 0;
    SELF := le;
  END;
  EXPORT ExpandedInfile := PROJECT(h,toExpanded(LEFT,FALSE));
  EXPORT ProcessedInfile := PROJECT(PROJECT(h,toExpanded(LEFT,TRUE)),Deltabase_Layout_Deltabase);
  Bitmap_Layout Into(ExpandedInfile le) := TRANSFORM
    SELF.ScrubsBits1 := ( le.inqlog_id_Invalid << 0 ) + ( le.customer_id_Invalid << 1 ) + ( le.transaction_id_Invalid << 2 ) + ( le.date_of_transaction_Invalid << 3 ) + ( le.household_id_Invalid << 5 ) + ( le.customer_person_id_Invalid << 6 ) + ( le.customer_program_Invalid << 7 ) + ( le.reason_for_transaction_activity_Invalid << 8 ) + ( le.inquiry_source_Invalid << 9 ) + ( le.customer_county_Invalid << 10 ) + ( le.customer_state_Invalid << 11 ) + ( le.customer_agency_vertical_type_Invalid << 13 ) + ( le.ssn_Invalid << 14 ) + ( le.dob_Invalid << 16 ) + ( le.rawlinkid_Invalid << 18 ) + ( le.raw_full_name_Invalid << 19 ) + ( le.raw_title_Invalid << 21 ) + ( le.raw_first_name_Invalid << 22 ) + ( le.raw_middle_name_Invalid << 24 ) + ( le.raw_last_name_Invalid << 26 ) + ( le.raw_orig_suffix_Invalid << 28 ) + ( le.full_address_Invalid << 29 ) + ( le.street_1_Invalid << 30 ) + ( le.city_Invalid << 31 ) + ( le.state_Invalid << 33 ) + ( le.zip_Invalid << 35 ) + ( le.county_Invalid << 37 ) + ( le.mailing_street_1_Invalid << 38 ) + ( le.mailing_city_Invalid << 39 ) + ( le.mailing_state_Invalid << 41 ) + ( le.mailing_zip_Invalid << 43 ) + ( le.mailing_county_Invalid << 45 ) + ( le.phone_number_Invalid << 46 ) + ( le.ultid_Invalid << 48 ) + ( le.orgid_Invalid << 49 ) + ( le.seleid_Invalid << 50 ) + ( le.tin_Invalid << 51 ) + ( le.email_address_Invalid << 52 ) + ( le.appended_provider_id_Invalid << 53 ) + ( le.lnpid_Invalid << 54 ) + ( le.npi_Invalid << 55 ) + ( le.ip_address_Invalid << 56 ) + ( le.device_id_Invalid << 58 ) + ( le.professional_id_Invalid << 59 ) + ( le.bank_routing_number_1_Invalid << 60 ) + ( le.bank_account_number_1_Invalid << 61 ) + ( le.drivers_license_state_Invalid << 62 ) + ( le.drivers_license_Invalid << 63 );
    SELF.ScrubsBits2 := ( le.geo_lat_Invalid << 0 ) + ( le.geo_long_Invalid << 1 ) + ( le.reported_date_Invalid << 2 ) + ( le.file_type_Invalid << 4 ) + ( le.deceitful_confidence_Invalid << 5 ) + ( le.reported_by_Invalid << 6 ) + ( le.reason_description_Invalid << 7 ) + ( le.event_type_1_Invalid << 8 ) + ( le.event_entity_1_Invalid << 9 );
    SELF.ScrubsCleanBits1 := ( IF(le.inqlog_id_wouldClean, 1, 0) << 0 ) + ( IF(le.customer_id_wouldClean, 1, 0) << 1 ) + ( IF(le.transaction_id_wouldClean, 1, 0) << 2 ) + ( IF(le.date_of_transaction_wouldClean, 1, 0) << 3 ) + ( IF(le.household_id_wouldClean, 1, 0) << 4 ) + ( IF(le.customer_person_id_wouldClean, 1, 0) << 5 ) + ( IF(le.customer_program_wouldClean, 1, 0) << 6 ) + ( IF(le.reason_for_transaction_activity_wouldClean, 1, 0) << 7 ) + ( IF(le.inquiry_source_wouldClean, 1, 0) << 8 ) + ( IF(le.customer_county_wouldClean, 1, 0) << 9 ) + ( IF(le.customer_state_wouldClean, 1, 0) << 10 ) + ( IF(le.customer_agency_vertical_type_wouldClean, 1, 0) << 11 ) + ( IF(le.ssn_wouldClean, 1, 0) << 12 ) + ( IF(le.dob_wouldClean, 1, 0) << 13 ) + ( IF(le.rawlinkid_wouldClean, 1, 0) << 14 ) + ( IF(le.raw_full_name_wouldClean, 1, 0) << 15 ) + ( IF(le.raw_title_wouldClean, 1, 0) << 16 ) + ( IF(le.raw_first_name_wouldClean, 1, 0) << 17 ) + ( IF(le.raw_middle_name_wouldClean, 1, 0) << 18 ) + ( IF(le.raw_last_name_wouldClean, 1, 0) << 19 ) + ( IF(le.raw_orig_suffix_wouldClean, 1, 0) << 20 ) + ( IF(le.full_address_wouldClean, 1, 0) << 21 ) + ( IF(le.street_1_wouldClean, 1, 0) << 22 ) + ( IF(le.city_wouldClean, 1, 0) << 23 ) + ( IF(le.state_wouldClean, 1, 0) << 24 ) + ( IF(le.zip_wouldClean, 1, 0) << 25 ) + ( IF(le.county_wouldClean, 1, 0) << 26 ) + ( IF(le.mailing_street_1_wouldClean, 1, 0) << 27 ) + ( IF(le.mailing_city_wouldClean, 1, 0) << 28 ) + ( IF(le.mailing_state_wouldClean, 1, 0) << 29 ) + ( IF(le.mailing_zip_wouldClean, 1, 0) << 30 ) + ( IF(le.mailing_county_wouldClean, 1, 0) << 31 ) + ( IF(le.phone_number_wouldClean, 1, 0) << 32 ) + ( IF(le.ultid_wouldClean, 1, 0) << 33 ) + ( IF(le.orgid_wouldClean, 1, 0) << 34 ) + ( IF(le.seleid_wouldClean, 1, 0) << 35 ) + ( IF(le.tin_wouldClean, 1, 0) << 36 ) + ( IF(le.email_address_wouldClean, 1, 0) << 37 ) + ( IF(le.appended_provider_id_wouldClean, 1, 0) << 38 ) + ( IF(le.lnpid_wouldClean, 1, 0) << 39 ) + ( IF(le.npi_wouldClean, 1, 0) << 40 ) + ( IF(le.ip_address_wouldClean, 1, 0) << 41 ) + ( IF(le.device_id_wouldClean, 1, 0) << 42 ) + ( IF(le.professional_id_wouldClean, 1, 0) << 43 ) + ( IF(le.bank_routing_number_1_wouldClean, 1, 0) << 44 ) + ( IF(le.bank_account_number_1_wouldClean, 1, 0) << 45 ) + ( IF(le.drivers_license_state_wouldClean, 1, 0) << 46 ) + ( IF(le.drivers_license_wouldClean, 1, 0) << 47 ) + ( IF(le.geo_lat_wouldClean, 1, 0) << 48 ) + ( IF(le.geo_long_wouldClean, 1, 0) << 49 ) + ( IF(le.reported_date_wouldClean, 1, 0) << 50 ) + ( IF(le.file_type_wouldClean, 1, 0) << 51 ) + ( IF(le.deceitful_confidence_wouldClean, 1, 0) << 52 ) + ( IF(le.reported_by_wouldClean, 1, 0) << 53 ) + ( IF(le.reason_description_wouldClean, 1, 0) << 54 ) + ( IF(le.event_type_1_wouldClean, 1, 0) << 55 ) + ( IF(le.event_entity_1_wouldClean, 1, 0) << 56 );
    SELF := le;
  END;
  EXPORT BitmapInfile := PROJECT(ExpandedInfile,Into(LEFT));
  STRING escQuotes(STRING s) := STD.Str.FindReplace(s,'\'','\\\'');
  Rule_Layout IntoRule(BitmapInfile le, UNSIGNED c) := TRANSFORM
    mask := 1<<(c-1);
    hasError := (mask&le.ScrubsBits1)>0 OR (mask&le.ScrubsBits2)>0;
    SELF.Rules := IF(hasError,TRIM(toRuleDesc(c))+':\''+escQuotes(TRIM(toErrorMessage(c)))+'\'',IF(le.ScrubsBits1=0 AND le.ScrubsBits2=0 AND c=1,'',SKIP));
    SELF := le;
  END;
  unrolled := NORMALIZE(BitmapInfile,NumRules,IntoRule(LEFT,COUNTER));
  Rule_Layout toRoll(Rule_Layout le,Rule_Layout ri) := TRANSFORM
    SELF.Rules := TRIM(le.Rules) + IF(LENGTH(TRIM(le.Rules))>0 AND LENGTH(TRIM(ri.Rules))>0,',','') + TRIM(ri.Rules);
    SELF := le;
  END;
  EXPORT RulesInfile := ROLLUP(unrolled,toRoll(LEFT,RIGHT),EXCEPT Rules);
END;
// Module to use if you already have a scrubs bitmap you wish to expand or compare
EXPORT FromBits(DATASET(Bitmap_Layout) h) := MODULE
  EXPORT Infile := PROJECT(h,Deltabase_Layout_Deltabase);
  Expanded_Layout into(h le) := TRANSFORM
    SELF.inqlog_id_Invalid := (le.ScrubsBits1 >> 0) & 1;
    SELF.customer_id_Invalid := (le.ScrubsBits1 >> 1) & 1;
    SELF.transaction_id_Invalid := (le.ScrubsBits1 >> 2) & 1;
    SELF.date_of_transaction_Invalid := (le.ScrubsBits1 >> 3) & 3;
    SELF.household_id_Invalid := (le.ScrubsBits1 >> 5) & 1;
    SELF.customer_person_id_Invalid := (le.ScrubsBits1 >> 6) & 1;
    SELF.customer_program_Invalid := (le.ScrubsBits1 >> 7) & 1;
    SELF.reason_for_transaction_activity_Invalid := (le.ScrubsBits1 >> 8) & 1;
    SELF.inquiry_source_Invalid := (le.ScrubsBits1 >> 9) & 1;
    SELF.customer_county_Invalid := (le.ScrubsBits1 >> 10) & 1;
    SELF.customer_state_Invalid := (le.ScrubsBits1 >> 11) & 3;
    SELF.customer_agency_vertical_type_Invalid := (le.ScrubsBits1 >> 13) & 1;
    SELF.ssn_Invalid := (le.ScrubsBits1 >> 14) & 3;
    SELF.dob_Invalid := (le.ScrubsBits1 >> 16) & 3;
    SELF.rawlinkid_Invalid := (le.ScrubsBits1 >> 18) & 1;
    SELF.raw_full_name_Invalid := (le.ScrubsBits1 >> 19) & 3;
    SELF.raw_title_Invalid := (le.ScrubsBits1 >> 21) & 1;
    SELF.raw_first_name_Invalid := (le.ScrubsBits1 >> 22) & 3;
    SELF.raw_middle_name_Invalid := (le.ScrubsBits1 >> 24) & 3;
    SELF.raw_last_name_Invalid := (le.ScrubsBits1 >> 26) & 3;
    SELF.raw_orig_suffix_Invalid := (le.ScrubsBits1 >> 28) & 1;
    SELF.full_address_Invalid := (le.ScrubsBits1 >> 29) & 1;
    SELF.street_1_Invalid := (le.ScrubsBits1 >> 30) & 1;
    SELF.city_Invalid := (le.ScrubsBits1 >> 31) & 3;
    SELF.state_Invalid := (le.ScrubsBits1 >> 33) & 3;
    SELF.zip_Invalid := (le.ScrubsBits1 >> 35) & 3;
    SELF.county_Invalid := (le.ScrubsBits1 >> 37) & 1;
    SELF.mailing_street_1_Invalid := (le.ScrubsBits1 >> 38) & 1;
    SELF.mailing_city_Invalid := (le.ScrubsBits1 >> 39) & 3;
    SELF.mailing_state_Invalid := (le.ScrubsBits1 >> 41) & 3;
    SELF.mailing_zip_Invalid := (le.ScrubsBits1 >> 43) & 3;
    SELF.mailing_county_Invalid := (le.ScrubsBits1 >> 45) & 1;
    SELF.phone_number_Invalid := (le.ScrubsBits1 >> 46) & 3;
    SELF.ultid_Invalid := (le.ScrubsBits1 >> 48) & 1;
    SELF.orgid_Invalid := (le.ScrubsBits1 >> 49) & 1;
    SELF.seleid_Invalid := (le.ScrubsBits1 >> 50) & 1;
    SELF.tin_Invalid := (le.ScrubsBits1 >> 51) & 1;
    SELF.email_address_Invalid := (le.ScrubsBits1 >> 52) & 1;
    SELF.appended_provider_id_Invalid := (le.ScrubsBits1 >> 53) & 1;
    SELF.lnpid_Invalid := (le.ScrubsBits1 >> 54) & 1;
    SELF.npi_Invalid := (le.ScrubsBits1 >> 55) & 1;
    SELF.ip_address_Invalid := (le.ScrubsBits1 >> 56) & 3;
    SELF.device_id_Invalid := (le.ScrubsBits1 >> 58) & 1;
    SELF.professional_id_Invalid := (le.ScrubsBits1 >> 59) & 1;
    SELF.bank_routing_number_1_Invalid := (le.ScrubsBits1 >> 60) & 1;
    SELF.bank_account_number_1_Invalid := (le.ScrubsBits1 >> 61) & 1;
    SELF.drivers_license_state_Invalid := (le.ScrubsBits1 >> 62) & 1;
    SELF.drivers_license_Invalid := (le.ScrubsBits1 >> 63) & 1;
    SELF.geo_lat_Invalid := (le.ScrubsBits2 >> 0) & 1;
    SELF.geo_long_Invalid := (le.ScrubsBits2 >> 1) & 1;
    SELF.reported_date_Invalid := (le.ScrubsBits2 >> 2) & 3;
    SELF.file_type_Invalid := (le.ScrubsBits2 >> 4) & 1;
    SELF.deceitful_confidence_Invalid := (le.ScrubsBits2 >> 5) & 1;
    SELF.reported_by_Invalid := (le.ScrubsBits2 >> 6) & 1;
    SELF.reason_description_Invalid := (le.ScrubsBits2 >> 7) & 1;
    SELF.event_type_1_Invalid := (le.ScrubsBits2 >> 8) & 1;
    SELF.event_entity_1_Invalid := (le.ScrubsBits2 >> 9) & 1;
    SELF.inqlog_id_wouldClean := le.ScrubsCleanBits1 >> 0;
    SELF.customer_id_wouldClean := le.ScrubsCleanBits1 >> 1;
    SELF.transaction_id_wouldClean := le.ScrubsCleanBits1 >> 2;
    SELF.date_of_transaction_wouldClean := le.ScrubsCleanBits1 >> 3;
    SELF.household_id_wouldClean := le.ScrubsCleanBits1 >> 4;
    SELF.customer_person_id_wouldClean := le.ScrubsCleanBits1 >> 5;
    SELF.customer_program_wouldClean := le.ScrubsCleanBits1 >> 6;
    SELF.reason_for_transaction_activity_wouldClean := le.ScrubsCleanBits1 >> 7;
    SELF.inquiry_source_wouldClean := le.ScrubsCleanBits1 >> 8;
    SELF.customer_county_wouldClean := le.ScrubsCleanBits1 >> 9;
    SELF.customer_state_wouldClean := le.ScrubsCleanBits1 >> 10;
    SELF.customer_agency_vertical_type_wouldClean := le.ScrubsCleanBits1 >> 11;
    SELF.ssn_wouldClean := le.ScrubsCleanBits1 >> 12;
    SELF.dob_wouldClean := le.ScrubsCleanBits1 >> 13;
    SELF.rawlinkid_wouldClean := le.ScrubsCleanBits1 >> 14;
    SELF.raw_full_name_wouldClean := le.ScrubsCleanBits1 >> 15;
    SELF.raw_title_wouldClean := le.ScrubsCleanBits1 >> 16;
    SELF.raw_first_name_wouldClean := le.ScrubsCleanBits1 >> 17;
    SELF.raw_middle_name_wouldClean := le.ScrubsCleanBits1 >> 18;
    SELF.raw_last_name_wouldClean := le.ScrubsCleanBits1 >> 19;
    SELF.raw_orig_suffix_wouldClean := le.ScrubsCleanBits1 >> 20;
    SELF.full_address_wouldClean := le.ScrubsCleanBits1 >> 21;
    SELF.street_1_wouldClean := le.ScrubsCleanBits1 >> 22;
    SELF.city_wouldClean := le.ScrubsCleanBits1 >> 23;
    SELF.state_wouldClean := le.ScrubsCleanBits1 >> 24;
    SELF.zip_wouldClean := le.ScrubsCleanBits1 >> 25;
    SELF.county_wouldClean := le.ScrubsCleanBits1 >> 26;
    SELF.mailing_street_1_wouldClean := le.ScrubsCleanBits1 >> 27;
    SELF.mailing_city_wouldClean := le.ScrubsCleanBits1 >> 28;
    SELF.mailing_state_wouldClean := le.ScrubsCleanBits1 >> 29;
    SELF.mailing_zip_wouldClean := le.ScrubsCleanBits1 >> 30;
    SELF.mailing_county_wouldClean := le.ScrubsCleanBits1 >> 31;
    SELF.phone_number_wouldClean := le.ScrubsCleanBits1 >> 32;
    SELF.ultid_wouldClean := le.ScrubsCleanBits1 >> 33;
    SELF.orgid_wouldClean := le.ScrubsCleanBits1 >> 34;
    SELF.seleid_wouldClean := le.ScrubsCleanBits1 >> 35;
    SELF.tin_wouldClean := le.ScrubsCleanBits1 >> 36;
    SELF.email_address_wouldClean := le.ScrubsCleanBits1 >> 37;
    SELF.appended_provider_id_wouldClean := le.ScrubsCleanBits1 >> 38;
    SELF.lnpid_wouldClean := le.ScrubsCleanBits1 >> 39;
    SELF.npi_wouldClean := le.ScrubsCleanBits1 >> 40;
    SELF.ip_address_wouldClean := le.ScrubsCleanBits1 >> 41;
    SELF.device_id_wouldClean := le.ScrubsCleanBits1 >> 42;
    SELF.professional_id_wouldClean := le.ScrubsCleanBits1 >> 43;
    SELF.bank_routing_number_1_wouldClean := le.ScrubsCleanBits1 >> 44;
    SELF.bank_account_number_1_wouldClean := le.ScrubsCleanBits1 >> 45;
    SELF.drivers_license_state_wouldClean := le.ScrubsCleanBits1 >> 46;
    SELF.drivers_license_wouldClean := le.ScrubsCleanBits1 >> 47;
    SELF.geo_lat_wouldClean := le.ScrubsCleanBits1 >> 48;
    SELF.geo_long_wouldClean := le.ScrubsCleanBits1 >> 49;
    SELF.reported_date_wouldClean := le.ScrubsCleanBits1 >> 50;
    SELF.file_type_wouldClean := le.ScrubsCleanBits1 >> 51;
    SELF.deceitful_confidence_wouldClean := le.ScrubsCleanBits1 >> 52;
    SELF.reported_by_wouldClean := le.ScrubsCleanBits1 >> 53;
    SELF.reason_description_wouldClean := le.ScrubsCleanBits1 >> 54;
    SELF.event_type_1_wouldClean := le.ScrubsCleanBits1 >> 55;
    SELF.event_entity_1_wouldClean := le.ScrubsCleanBits1 >> 56;
    SELF := le;
  END;
  EXPORT ExpandedInfile := PROJECT(h,Into(LEFT));
END;
// This can be thought of as the 'reporting module' - if you don't have an expanded; the other two modules create them ...
EXPORT FromExpanded(DATASET(Expanded_Layout) h) := MODULE
  r := RECORD
    TotalCnt := COUNT(GROUP); // Number of records in total
    inqlog_id_ALLOW_ErrorCount := COUNT(GROUP,h.inqlog_id_Invalid=1);
    inqlog_id_ALLOW_WouldModifyCount := COUNT(GROUP,h.inqlog_id_Invalid=1 AND h.inqlog_id_wouldClean);
    customer_id_ALLOW_ErrorCount := COUNT(GROUP,h.customer_id_Invalid=1);
    customer_id_ALLOW_WouldModifyCount := COUNT(GROUP,h.customer_id_Invalid=1 AND h.customer_id_wouldClean);
    transaction_id_ALLOW_ErrorCount := COUNT(GROUP,h.transaction_id_Invalid=1);
    transaction_id_ALLOW_WouldModifyCount := COUNT(GROUP,h.transaction_id_Invalid=1 AND h.transaction_id_wouldClean);
    date_of_transaction_LEFTTRIM_ErrorCount := COUNT(GROUP,h.date_of_transaction_Invalid=1);
    date_of_transaction_LEFTTRIM_WouldModifyCount := COUNT(GROUP,h.date_of_transaction_Invalid=1 AND h.date_of_transaction_wouldClean);
    date_of_transaction_ALLOW_ErrorCount := COUNT(GROUP,h.date_of_transaction_Invalid=2);
    date_of_transaction_ALLOW_WouldModifyCount := COUNT(GROUP,h.date_of_transaction_Invalid=2 AND h.date_of_transaction_wouldClean);
    date_of_transaction_Total_ErrorCount := COUNT(GROUP,h.date_of_transaction_Invalid>0);
    household_id_ALLOW_ErrorCount := COUNT(GROUP,h.household_id_Invalid=1);
    household_id_ALLOW_WouldModifyCount := COUNT(GROUP,h.household_id_Invalid=1 AND h.household_id_wouldClean);
    customer_person_id_ALLOW_ErrorCount := COUNT(GROUP,h.customer_person_id_Invalid=1);
    customer_person_id_ALLOW_WouldModifyCount := COUNT(GROUP,h.customer_person_id_Invalid=1 AND h.customer_person_id_wouldClean);
    customer_program_ALLOW_ErrorCount := COUNT(GROUP,h.customer_program_Invalid=1);
    customer_program_ALLOW_WouldModifyCount := COUNT(GROUP,h.customer_program_Invalid=1 AND h.customer_program_wouldClean);
    reason_for_transaction_activity_ALLOW_ErrorCount := COUNT(GROUP,h.reason_for_transaction_activity_Invalid=1);
    reason_for_transaction_activity_ALLOW_WouldModifyCount := COUNT(GROUP,h.reason_for_transaction_activity_Invalid=1 AND h.reason_for_transaction_activity_wouldClean);
    inquiry_source_ALLOW_ErrorCount := COUNT(GROUP,h.inquiry_source_Invalid=1);
    inquiry_source_ALLOW_WouldModifyCount := COUNT(GROUP,h.inquiry_source_Invalid=1 AND h.inquiry_source_wouldClean);
    customer_county_ALLOW_ErrorCount := COUNT(GROUP,h.customer_county_Invalid=1);
    customer_county_ALLOW_WouldModifyCount := COUNT(GROUP,h.customer_county_Invalid=1 AND h.customer_county_wouldClean);
    customer_state_LEFTTRIM_ErrorCount := COUNT(GROUP,h.customer_state_Invalid=1);
    customer_state_LEFTTRIM_WouldModifyCount := COUNT(GROUP,h.customer_state_Invalid=1 AND h.customer_state_wouldClean);
    customer_state_ALLOW_ErrorCount := COUNT(GROUP,h.customer_state_Invalid=2);
    customer_state_ALLOW_WouldModifyCount := COUNT(GROUP,h.customer_state_Invalid=2 AND h.customer_state_wouldClean);
    customer_state_LENGTHS_ErrorCount := COUNT(GROUP,h.customer_state_Invalid=3);
    customer_state_LENGTHS_WouldModifyCount := COUNT(GROUP,h.customer_state_Invalid=3 AND h.customer_state_wouldClean);
    customer_state_Total_ErrorCount := COUNT(GROUP,h.customer_state_Invalid>0);
    customer_agency_vertical_type_ALLOW_ErrorCount := COUNT(GROUP,h.customer_agency_vertical_type_Invalid=1);
    customer_agency_vertical_type_ALLOW_WouldModifyCount := COUNT(GROUP,h.customer_agency_vertical_type_Invalid=1 AND h.customer_agency_vertical_type_wouldClean);
    ssn_LEFTTRIM_ErrorCount := COUNT(GROUP,h.ssn_Invalid=1);
    ssn_LEFTTRIM_WouldModifyCount := COUNT(GROUP,h.ssn_Invalid=1 AND h.ssn_wouldClean);
    ssn_ALLOW_ErrorCount := COUNT(GROUP,h.ssn_Invalid=2);
    ssn_ALLOW_WouldModifyCount := COUNT(GROUP,h.ssn_Invalid=2 AND h.ssn_wouldClean);
    ssn_LENGTHS_ErrorCount := COUNT(GROUP,h.ssn_Invalid=3);
    ssn_LENGTHS_WouldModifyCount := COUNT(GROUP,h.ssn_Invalid=3 AND h.ssn_wouldClean);
    ssn_Total_ErrorCount := COUNT(GROUP,h.ssn_Invalid>0);
    dob_LEFTTRIM_ErrorCount := COUNT(GROUP,h.dob_Invalid=1);
    dob_LEFTTRIM_WouldModifyCount := COUNT(GROUP,h.dob_Invalid=1 AND h.dob_wouldClean);
    dob_ALLOW_ErrorCount := COUNT(GROUP,h.dob_Invalid=2);
    dob_ALLOW_WouldModifyCount := COUNT(GROUP,h.dob_Invalid=2 AND h.dob_wouldClean);
    dob_Total_ErrorCount := COUNT(GROUP,h.dob_Invalid>0);
    rawlinkid_ALLOW_ErrorCount := COUNT(GROUP,h.rawlinkid_Invalid=1);
    rawlinkid_ALLOW_WouldModifyCount := COUNT(GROUP,h.rawlinkid_Invalid=1 AND h.rawlinkid_wouldClean);
    raw_full_name_LEFTTRIM_ErrorCount := COUNT(GROUP,h.raw_full_name_Invalid=1);
    raw_full_name_LEFTTRIM_WouldModifyCount := COUNT(GROUP,h.raw_full_name_Invalid=1 AND h.raw_full_name_wouldClean);
    raw_full_name_ALLOW_ErrorCount := COUNT(GROUP,h.raw_full_name_Invalid=2);
    raw_full_name_ALLOW_WouldModifyCount := COUNT(GROUP,h.raw_full_name_Invalid=2 AND h.raw_full_name_wouldClean);
    raw_full_name_Total_ErrorCount := COUNT(GROUP,h.raw_full_name_Invalid>0);
    raw_title_ALLOW_ErrorCount := COUNT(GROUP,h.raw_title_Invalid=1);
    raw_title_ALLOW_WouldModifyCount := COUNT(GROUP,h.raw_title_Invalid=1 AND h.raw_title_wouldClean);
    raw_first_name_LEFTTRIM_ErrorCount := COUNT(GROUP,h.raw_first_name_Invalid=1);
    raw_first_name_LEFTTRIM_WouldModifyCount := COUNT(GROUP,h.raw_first_name_Invalid=1 AND h.raw_first_name_wouldClean);
    raw_first_name_ALLOW_ErrorCount := COUNT(GROUP,h.raw_first_name_Invalid=2);
    raw_first_name_ALLOW_WouldModifyCount := COUNT(GROUP,h.raw_first_name_Invalid=2 AND h.raw_first_name_wouldClean);
    raw_first_name_Total_ErrorCount := COUNT(GROUP,h.raw_first_name_Invalid>0);
    raw_middle_name_LEFTTRIM_ErrorCount := COUNT(GROUP,h.raw_middle_name_Invalid=1);
    raw_middle_name_LEFTTRIM_WouldModifyCount := COUNT(GROUP,h.raw_middle_name_Invalid=1 AND h.raw_middle_name_wouldClean);
    raw_middle_name_ALLOW_ErrorCount := COUNT(GROUP,h.raw_middle_name_Invalid=2);
    raw_middle_name_ALLOW_WouldModifyCount := COUNT(GROUP,h.raw_middle_name_Invalid=2 AND h.raw_middle_name_wouldClean);
    raw_middle_name_Total_ErrorCount := COUNT(GROUP,h.raw_middle_name_Invalid>0);
    raw_last_name_LEFTTRIM_ErrorCount := COUNT(GROUP,h.raw_last_name_Invalid=1);
    raw_last_name_LEFTTRIM_WouldModifyCount := COUNT(GROUP,h.raw_last_name_Invalid=1 AND h.raw_last_name_wouldClean);
    raw_last_name_ALLOW_ErrorCount := COUNT(GROUP,h.raw_last_name_Invalid=2);
    raw_last_name_ALLOW_WouldModifyCount := COUNT(GROUP,h.raw_last_name_Invalid=2 AND h.raw_last_name_wouldClean);
    raw_last_name_Total_ErrorCount := COUNT(GROUP,h.raw_last_name_Invalid>0);
    raw_orig_suffix_ALLOW_ErrorCount := COUNT(GROUP,h.raw_orig_suffix_Invalid=1);
    raw_orig_suffix_ALLOW_WouldModifyCount := COUNT(GROUP,h.raw_orig_suffix_Invalid=1 AND h.raw_orig_suffix_wouldClean);
    full_address_ALLOW_ErrorCount := COUNT(GROUP,h.full_address_Invalid=1);
    full_address_ALLOW_WouldModifyCount := COUNT(GROUP,h.full_address_Invalid=1 AND h.full_address_wouldClean);
    street_1_ALLOW_ErrorCount := COUNT(GROUP,h.street_1_Invalid=1);
    street_1_ALLOW_WouldModifyCount := COUNT(GROUP,h.street_1_Invalid=1 AND h.street_1_wouldClean);
    city_LEFTTRIM_ErrorCount := COUNT(GROUP,h.city_Invalid=1);
    city_LEFTTRIM_WouldModifyCount := COUNT(GROUP,h.city_Invalid=1 AND h.city_wouldClean);
    city_ALLOW_ErrorCount := COUNT(GROUP,h.city_Invalid=2);
    city_ALLOW_WouldModifyCount := COUNT(GROUP,h.city_Invalid=2 AND h.city_wouldClean);
    city_Total_ErrorCount := COUNT(GROUP,h.city_Invalid>0);
    state_LEFTTRIM_ErrorCount := COUNT(GROUP,h.state_Invalid=1);
    state_LEFTTRIM_WouldModifyCount := COUNT(GROUP,h.state_Invalid=1 AND h.state_wouldClean);
    state_ALLOW_ErrorCount := COUNT(GROUP,h.state_Invalid=2);
    state_ALLOW_WouldModifyCount := COUNT(GROUP,h.state_Invalid=2 AND h.state_wouldClean);
    state_LENGTHS_ErrorCount := COUNT(GROUP,h.state_Invalid=3);
    state_LENGTHS_WouldModifyCount := COUNT(GROUP,h.state_Invalid=3 AND h.state_wouldClean);
    state_Total_ErrorCount := COUNT(GROUP,h.state_Invalid>0);
    zip_LEFTTRIM_ErrorCount := COUNT(GROUP,h.zip_Invalid=1);
    zip_LEFTTRIM_WouldModifyCount := COUNT(GROUP,h.zip_Invalid=1 AND h.zip_wouldClean);
    zip_ALLOW_ErrorCount := COUNT(GROUP,h.zip_Invalid=2);
    zip_ALLOW_WouldModifyCount := COUNT(GROUP,h.zip_Invalid=2 AND h.zip_wouldClean);
    zip_LENGTHS_ErrorCount := COUNT(GROUP,h.zip_Invalid=3);
    zip_LENGTHS_WouldModifyCount := COUNT(GROUP,h.zip_Invalid=3 AND h.zip_wouldClean);
    zip_Total_ErrorCount := COUNT(GROUP,h.zip_Invalid>0);
    county_ALLOW_ErrorCount := COUNT(GROUP,h.county_Invalid=1);
    county_ALLOW_WouldModifyCount := COUNT(GROUP,h.county_Invalid=1 AND h.county_wouldClean);
    mailing_street_1_ALLOW_ErrorCount := COUNT(GROUP,h.mailing_street_1_Invalid=1);
    mailing_street_1_ALLOW_WouldModifyCount := COUNT(GROUP,h.mailing_street_1_Invalid=1 AND h.mailing_street_1_wouldClean);
    mailing_city_LEFTTRIM_ErrorCount := COUNT(GROUP,h.mailing_city_Invalid=1);
    mailing_city_LEFTTRIM_WouldModifyCount := COUNT(GROUP,h.mailing_city_Invalid=1 AND h.mailing_city_wouldClean);
    mailing_city_ALLOW_ErrorCount := COUNT(GROUP,h.mailing_city_Invalid=2);
    mailing_city_ALLOW_WouldModifyCount := COUNT(GROUP,h.mailing_city_Invalid=2 AND h.mailing_city_wouldClean);
    mailing_city_Total_ErrorCount := COUNT(GROUP,h.mailing_city_Invalid>0);
    mailing_state_LEFTTRIM_ErrorCount := COUNT(GROUP,h.mailing_state_Invalid=1);
    mailing_state_LEFTTRIM_WouldModifyCount := COUNT(GROUP,h.mailing_state_Invalid=1 AND h.mailing_state_wouldClean);
    mailing_state_ALLOW_ErrorCount := COUNT(GROUP,h.mailing_state_Invalid=2);
    mailing_state_ALLOW_WouldModifyCount := COUNT(GROUP,h.mailing_state_Invalid=2 AND h.mailing_state_wouldClean);
    mailing_state_LENGTHS_ErrorCount := COUNT(GROUP,h.mailing_state_Invalid=3);
    mailing_state_LENGTHS_WouldModifyCount := COUNT(GROUP,h.mailing_state_Invalid=3 AND h.mailing_state_wouldClean);
    mailing_state_Total_ErrorCount := COUNT(GROUP,h.mailing_state_Invalid>0);
    mailing_zip_LEFTTRIM_ErrorCount := COUNT(GROUP,h.mailing_zip_Invalid=1);
    mailing_zip_LEFTTRIM_WouldModifyCount := COUNT(GROUP,h.mailing_zip_Invalid=1 AND h.mailing_zip_wouldClean);
    mailing_zip_ALLOW_ErrorCount := COUNT(GROUP,h.mailing_zip_Invalid=2);
    mailing_zip_ALLOW_WouldModifyCount := COUNT(GROUP,h.mailing_zip_Invalid=2 AND h.mailing_zip_wouldClean);
    mailing_zip_LENGTHS_ErrorCount := COUNT(GROUP,h.mailing_zip_Invalid=3);
    mailing_zip_LENGTHS_WouldModifyCount := COUNT(GROUP,h.mailing_zip_Invalid=3 AND h.mailing_zip_wouldClean);
    mailing_zip_Total_ErrorCount := COUNT(GROUP,h.mailing_zip_Invalid>0);
    mailing_county_ALLOW_ErrorCount := COUNT(GROUP,h.mailing_county_Invalid=1);
    mailing_county_ALLOW_WouldModifyCount := COUNT(GROUP,h.mailing_county_Invalid=1 AND h.mailing_county_wouldClean);
    phone_number_LEFTTRIM_ErrorCount := COUNT(GROUP,h.phone_number_Invalid=1);
    phone_number_LEFTTRIM_WouldModifyCount := COUNT(GROUP,h.phone_number_Invalid=1 AND h.phone_number_wouldClean);
    phone_number_ALLOW_ErrorCount := COUNT(GROUP,h.phone_number_Invalid=2);
    phone_number_ALLOW_WouldModifyCount := COUNT(GROUP,h.phone_number_Invalid=2 AND h.phone_number_wouldClean);
    phone_number_LENGTHS_ErrorCount := COUNT(GROUP,h.phone_number_Invalid=3);
    phone_number_LENGTHS_WouldModifyCount := COUNT(GROUP,h.phone_number_Invalid=3 AND h.phone_number_wouldClean);
    phone_number_Total_ErrorCount := COUNT(GROUP,h.phone_number_Invalid>0);
    ultid_ALLOW_ErrorCount := COUNT(GROUP,h.ultid_Invalid=1);
    ultid_ALLOW_WouldModifyCount := COUNT(GROUP,h.ultid_Invalid=1 AND h.ultid_wouldClean);
    orgid_ALLOW_ErrorCount := COUNT(GROUP,h.orgid_Invalid=1);
    orgid_ALLOW_WouldModifyCount := COUNT(GROUP,h.orgid_Invalid=1 AND h.orgid_wouldClean);
    seleid_ALLOW_ErrorCount := COUNT(GROUP,h.seleid_Invalid=1);
    seleid_ALLOW_WouldModifyCount := COUNT(GROUP,h.seleid_Invalid=1 AND h.seleid_wouldClean);
    tin_ALLOW_ErrorCount := COUNT(GROUP,h.tin_Invalid=1);
    tin_ALLOW_WouldModifyCount := COUNT(GROUP,h.tin_Invalid=1 AND h.tin_wouldClean);
    email_address_ALLOW_ErrorCount := COUNT(GROUP,h.email_address_Invalid=1);
    email_address_ALLOW_WouldModifyCount := COUNT(GROUP,h.email_address_Invalid=1 AND h.email_address_wouldClean);
    appended_provider_id_ALLOW_ErrorCount := COUNT(GROUP,h.appended_provider_id_Invalid=1);
    appended_provider_id_ALLOW_WouldModifyCount := COUNT(GROUP,h.appended_provider_id_Invalid=1 AND h.appended_provider_id_wouldClean);
    lnpid_ALLOW_ErrorCount := COUNT(GROUP,h.lnpid_Invalid=1);
    lnpid_ALLOW_WouldModifyCount := COUNT(GROUP,h.lnpid_Invalid=1 AND h.lnpid_wouldClean);
    npi_ALLOW_ErrorCount := COUNT(GROUP,h.npi_Invalid=1);
    npi_ALLOW_WouldModifyCount := COUNT(GROUP,h.npi_Invalid=1 AND h.npi_wouldClean);
    ip_address_LEFTTRIM_ErrorCount := COUNT(GROUP,h.ip_address_Invalid=1);
    ip_address_LEFTTRIM_WouldModifyCount := COUNT(GROUP,h.ip_address_Invalid=1 AND h.ip_address_wouldClean);
    ip_address_ALLOW_ErrorCount := COUNT(GROUP,h.ip_address_Invalid=2);
    ip_address_ALLOW_WouldModifyCount := COUNT(GROUP,h.ip_address_Invalid=2 AND h.ip_address_wouldClean);
    ip_address_Total_ErrorCount := COUNT(GROUP,h.ip_address_Invalid>0);
    device_id_ALLOW_ErrorCount := COUNT(GROUP,h.device_id_Invalid=1);
    device_id_ALLOW_WouldModifyCount := COUNT(GROUP,h.device_id_Invalid=1 AND h.device_id_wouldClean);
    professional_id_ALLOW_ErrorCount := COUNT(GROUP,h.professional_id_Invalid=1);
    professional_id_ALLOW_WouldModifyCount := COUNT(GROUP,h.professional_id_Invalid=1 AND h.professional_id_wouldClean);
    bank_routing_number_1_ALLOW_ErrorCount := COUNT(GROUP,h.bank_routing_number_1_Invalid=1);
    bank_routing_number_1_ALLOW_WouldModifyCount := COUNT(GROUP,h.bank_routing_number_1_Invalid=1 AND h.bank_routing_number_1_wouldClean);
    bank_account_number_1_ALLOW_ErrorCount := COUNT(GROUP,h.bank_account_number_1_Invalid=1);
    bank_account_number_1_ALLOW_WouldModifyCount := COUNT(GROUP,h.bank_account_number_1_Invalid=1 AND h.bank_account_number_1_wouldClean);
    drivers_license_state_ALLOW_ErrorCount := COUNT(GROUP,h.drivers_license_state_Invalid=1);
    drivers_license_state_ALLOW_WouldModifyCount := COUNT(GROUP,h.drivers_license_state_Invalid=1 AND h.drivers_license_state_wouldClean);
    drivers_license_ALLOW_ErrorCount := COUNT(GROUP,h.drivers_license_Invalid=1);
    drivers_license_ALLOW_WouldModifyCount := COUNT(GROUP,h.drivers_license_Invalid=1 AND h.drivers_license_wouldClean);
    geo_lat_ALLOW_ErrorCount := COUNT(GROUP,h.geo_lat_Invalid=1);
    geo_lat_ALLOW_WouldModifyCount := COUNT(GROUP,h.geo_lat_Invalid=1 AND h.geo_lat_wouldClean);
    geo_long_ALLOW_ErrorCount := COUNT(GROUP,h.geo_long_Invalid=1);
    geo_long_ALLOW_WouldModifyCount := COUNT(GROUP,h.geo_long_Invalid=1 AND h.geo_long_wouldClean);
    reported_date_LEFTTRIM_ErrorCount := COUNT(GROUP,h.reported_date_Invalid=1);
    reported_date_LEFTTRIM_WouldModifyCount := COUNT(GROUP,h.reported_date_Invalid=1 AND h.reported_date_wouldClean);
    reported_date_ALLOW_ErrorCount := COUNT(GROUP,h.reported_date_Invalid=2);
    reported_date_ALLOW_WouldModifyCount := COUNT(GROUP,h.reported_date_Invalid=2 AND h.reported_date_wouldClean);
    reported_date_Total_ErrorCount := COUNT(GROUP,h.reported_date_Invalid>0);
    file_type_ALLOW_ErrorCount := COUNT(GROUP,h.file_type_Invalid=1);
    file_type_ALLOW_WouldModifyCount := COUNT(GROUP,h.file_type_Invalid=1 AND h.file_type_wouldClean);
    deceitful_confidence_ALLOW_ErrorCount := COUNT(GROUP,h.deceitful_confidence_Invalid=1);
    deceitful_confidence_ALLOW_WouldModifyCount := COUNT(GROUP,h.deceitful_confidence_Invalid=1 AND h.deceitful_confidence_wouldClean);
    reported_by_ALLOW_ErrorCount := COUNT(GROUP,h.reported_by_Invalid=1);
    reported_by_ALLOW_WouldModifyCount := COUNT(GROUP,h.reported_by_Invalid=1 AND h.reported_by_wouldClean);
    reason_description_ALLOW_ErrorCount := COUNT(GROUP,h.reason_description_Invalid=1);
    reason_description_ALLOW_WouldModifyCount := COUNT(GROUP,h.reason_description_Invalid=1 AND h.reason_description_wouldClean);
    event_type_1_ALLOW_ErrorCount := COUNT(GROUP,h.event_type_1_Invalid=1);
    event_type_1_ALLOW_WouldModifyCount := COUNT(GROUP,h.event_type_1_Invalid=1 AND h.event_type_1_wouldClean);
    event_entity_1_ALLOW_ErrorCount := COUNT(GROUP,h.event_entity_1_Invalid=1);
    event_entity_1_ALLOW_WouldModifyCount := COUNT(GROUP,h.event_entity_1_Invalid=1 AND h.event_entity_1_wouldClean);
    AnyRule_WithErrorsCount := COUNT(GROUP, h.inqlog_id_Invalid > 0 OR h.customer_id_Invalid > 0 OR h.transaction_id_Invalid > 0 OR h.date_of_transaction_Invalid > 0 OR h.household_id_Invalid > 0 OR h.customer_person_id_Invalid > 0 OR h.customer_program_Invalid > 0 OR h.reason_for_transaction_activity_Invalid > 0 OR h.inquiry_source_Invalid > 0 OR h.customer_county_Invalid > 0 OR h.customer_state_Invalid > 0 OR h.customer_agency_vertical_type_Invalid > 0 OR h.ssn_Invalid > 0 OR h.dob_Invalid > 0 OR h.rawlinkid_Invalid > 0 OR h.raw_full_name_Invalid > 0 OR h.raw_title_Invalid > 0 OR h.raw_first_name_Invalid > 0 OR h.raw_middle_name_Invalid > 0 OR h.raw_last_name_Invalid > 0 OR h.raw_orig_suffix_Invalid > 0 OR h.full_address_Invalid > 0 OR h.street_1_Invalid > 0 OR h.city_Invalid > 0 OR h.state_Invalid > 0 OR h.zip_Invalid > 0 OR h.county_Invalid > 0 OR h.mailing_street_1_Invalid > 0 OR h.mailing_city_Invalid > 0 OR h.mailing_state_Invalid > 0 OR h.mailing_zip_Invalid > 0 OR h.mailing_county_Invalid > 0 OR h.phone_number_Invalid > 0 OR h.ultid_Invalid > 0 OR h.orgid_Invalid > 0 OR h.seleid_Invalid > 0 OR h.tin_Invalid > 0 OR h.email_address_Invalid > 0 OR h.appended_provider_id_Invalid > 0 OR h.lnpid_Invalid > 0 OR h.npi_Invalid > 0 OR h.ip_address_Invalid > 0 OR h.device_id_Invalid > 0 OR h.professional_id_Invalid > 0 OR h.bank_routing_number_1_Invalid > 0 OR h.bank_account_number_1_Invalid > 0 OR h.drivers_license_state_Invalid > 0 OR h.drivers_license_Invalid > 0 OR h.geo_lat_Invalid > 0 OR h.geo_long_Invalid > 0 OR h.reported_date_Invalid > 0 OR h.file_type_Invalid > 0 OR h.deceitful_confidence_Invalid > 0 OR h.reported_by_Invalid > 0 OR h.reason_description_Invalid > 0 OR h.event_type_1_Invalid > 0 OR h.event_entity_1_Invalid > 0);
    AnyRule_WithEditsCount := COUNT(GROUP, h.inqlog_id_wouldClean OR h.customer_id_wouldClean OR h.transaction_id_wouldClean OR h.date_of_transaction_wouldClean OR h.household_id_wouldClean OR h.customer_person_id_wouldClean OR h.customer_program_wouldClean OR h.reason_for_transaction_activity_wouldClean OR h.inquiry_source_wouldClean OR h.customer_county_wouldClean OR h.customer_state_wouldClean OR h.customer_agency_vertical_type_wouldClean OR h.ssn_wouldClean OR h.dob_wouldClean OR h.rawlinkid_wouldClean OR h.raw_full_name_wouldClean OR h.raw_title_wouldClean OR h.raw_first_name_wouldClean OR h.raw_middle_name_wouldClean OR h.raw_last_name_wouldClean OR h.raw_orig_suffix_wouldClean OR h.full_address_wouldClean OR h.street_1_wouldClean OR h.city_wouldClean OR h.state_wouldClean OR h.zip_wouldClean OR h.county_wouldClean OR h.mailing_street_1_wouldClean OR h.mailing_city_wouldClean OR h.mailing_state_wouldClean OR h.mailing_zip_wouldClean OR h.mailing_county_wouldClean OR h.phone_number_wouldClean OR h.ultid_wouldClean OR h.orgid_wouldClean OR h.seleid_wouldClean OR h.tin_wouldClean OR h.email_address_wouldClean OR h.appended_provider_id_wouldClean OR h.lnpid_wouldClean OR h.npi_wouldClean OR h.ip_address_wouldClean OR h.device_id_wouldClean OR h.professional_id_wouldClean OR h.bank_routing_number_1_wouldClean OR h.bank_account_number_1_wouldClean OR h.drivers_license_state_wouldClean OR h.drivers_license_wouldClean OR h.geo_lat_wouldClean OR h.geo_long_wouldClean OR h.reported_date_wouldClean OR h.file_type_wouldClean OR h.deceitful_confidence_wouldClean OR h.reported_by_wouldClean OR h.reason_description_wouldClean OR h.event_type_1_wouldClean OR h.event_entity_1_wouldClean);
    FieldsChecked_WithErrors := 0;
    FieldsChecked_NoErrors := 0;
    Rules_WithErrors := 0;
    Rules_NoErrors := 0;
    Rules_WithEdits := 0;
  END;
  SummaryStats0 := TABLE(h,r);
  SummaryStats0 xAddErrSummary(SummaryStats0 le) := TRANSFORM
    SELF.FieldsChecked_WithErrors := IF(le.inqlog_id_ALLOW_ErrorCount > 0, 1, 0) + IF(le.customer_id_ALLOW_ErrorCount > 0, 1, 0) + IF(le.transaction_id_ALLOW_ErrorCount > 0, 1, 0) + IF(le.date_of_transaction_Total_ErrorCount > 0, 1, 0) + IF(le.household_id_ALLOW_ErrorCount > 0, 1, 0) + IF(le.customer_person_id_ALLOW_ErrorCount > 0, 1, 0) + IF(le.customer_program_ALLOW_ErrorCount > 0, 1, 0) + IF(le.reason_for_transaction_activity_ALLOW_ErrorCount > 0, 1, 0) + IF(le.inquiry_source_ALLOW_ErrorCount > 0, 1, 0) + IF(le.customer_county_ALLOW_ErrorCount > 0, 1, 0) + IF(le.customer_state_Total_ErrorCount > 0, 1, 0) + IF(le.customer_agency_vertical_type_ALLOW_ErrorCount > 0, 1, 0) + IF(le.ssn_Total_ErrorCount > 0, 1, 0) + IF(le.dob_Total_ErrorCount > 0, 1, 0) + IF(le.rawlinkid_ALLOW_ErrorCount > 0, 1, 0) + IF(le.raw_full_name_Total_ErrorCount > 0, 1, 0) + IF(le.raw_title_ALLOW_ErrorCount > 0, 1, 0) + IF(le.raw_first_name_Total_ErrorCount > 0, 1, 0) + IF(le.raw_middle_name_Total_ErrorCount > 0, 1, 0) + IF(le.raw_last_name_Total_ErrorCount > 0, 1, 0) + IF(le.raw_orig_suffix_ALLOW_ErrorCount > 0, 1, 0) + IF(le.full_address_ALLOW_ErrorCount > 0, 1, 0) + IF(le.street_1_ALLOW_ErrorCount > 0, 1, 0) + IF(le.city_Total_ErrorCount > 0, 1, 0) + IF(le.state_Total_ErrorCount > 0, 1, 0) + IF(le.zip_Total_ErrorCount > 0, 1, 0) + IF(le.county_ALLOW_ErrorCount > 0, 1, 0) + IF(le.mailing_street_1_ALLOW_ErrorCount > 0, 1, 0) + IF(le.mailing_city_Total_ErrorCount > 0, 1, 0) + IF(le.mailing_state_Total_ErrorCount > 0, 1, 0) + IF(le.mailing_zip_Total_ErrorCount > 0, 1, 0) + IF(le.mailing_county_ALLOW_ErrorCount > 0, 1, 0) + IF(le.phone_number_Total_ErrorCount > 0, 1, 0) + IF(le.ultid_ALLOW_ErrorCount > 0, 1, 0) + IF(le.orgid_ALLOW_ErrorCount > 0, 1, 0) + IF(le.seleid_ALLOW_ErrorCount > 0, 1, 0) + IF(le.tin_ALLOW_ErrorCount > 0, 1, 0) + IF(le.email_address_ALLOW_ErrorCount > 0, 1, 0) + IF(le.appended_provider_id_ALLOW_ErrorCount > 0, 1, 0) + IF(le.lnpid_ALLOW_ErrorCount > 0, 1, 0) + IF(le.npi_ALLOW_ErrorCount > 0, 1, 0) + IF(le.ip_address_Total_ErrorCount > 0, 1, 0) + IF(le.device_id_ALLOW_ErrorCount > 0, 1, 0) + IF(le.professional_id_ALLOW_ErrorCount > 0, 1, 0) + IF(le.bank_routing_number_1_ALLOW_ErrorCount > 0, 1, 0) + IF(le.bank_account_number_1_ALLOW_ErrorCount > 0, 1, 0) + IF(le.drivers_license_state_ALLOW_ErrorCount > 0, 1, 0) + IF(le.drivers_license_ALLOW_ErrorCount > 0, 1, 0) + IF(le.geo_lat_ALLOW_ErrorCount > 0, 1, 0) + IF(le.geo_long_ALLOW_ErrorCount > 0, 1, 0) + IF(le.reported_date_Total_ErrorCount > 0, 1, 0) + IF(le.file_type_ALLOW_ErrorCount > 0, 1, 0) + IF(le.deceitful_confidence_ALLOW_ErrorCount > 0, 1, 0) + IF(le.reported_by_ALLOW_ErrorCount > 0, 1, 0) + IF(le.reason_description_ALLOW_ErrorCount > 0, 1, 0) + IF(le.event_type_1_ALLOW_ErrorCount > 0, 1, 0) + IF(le.event_entity_1_ALLOW_ErrorCount > 0, 1, 0);
    SELF.FieldsChecked_NoErrors := NumFieldsWithRules - SELF.FieldsChecked_WithErrors;
    SELF.Rules_WithErrors := IF(le.inqlog_id_ALLOW_ErrorCount > 0, 1, 0) + IF(le.customer_id_ALLOW_ErrorCount > 0, 1, 0) + IF(le.transaction_id_ALLOW_ErrorCount > 0, 1, 0) + IF(le.date_of_transaction_LEFTTRIM_ErrorCount > 0, 1, 0) + IF(le.date_of_transaction_ALLOW_ErrorCount > 0, 1, 0) + IF(le.household_id_ALLOW_ErrorCount > 0, 1, 0) + IF(le.customer_person_id_ALLOW_ErrorCount > 0, 1, 0) + IF(le.customer_program_ALLOW_ErrorCount > 0, 1, 0) + IF(le.reason_for_transaction_activity_ALLOW_ErrorCount > 0, 1, 0) + IF(le.inquiry_source_ALLOW_ErrorCount > 0, 1, 0) + IF(le.customer_county_ALLOW_ErrorCount > 0, 1, 0) + IF(le.customer_state_LEFTTRIM_ErrorCount > 0, 1, 0) + IF(le.customer_state_ALLOW_ErrorCount > 0, 1, 0) + IF(le.customer_state_LENGTHS_ErrorCount > 0, 1, 0) + IF(le.customer_agency_vertical_type_ALLOW_ErrorCount > 0, 1, 0) + IF(le.ssn_LEFTTRIM_ErrorCount > 0, 1, 0) + IF(le.ssn_ALLOW_ErrorCount > 0, 1, 0) + IF(le.ssn_LENGTHS_ErrorCount > 0, 1, 0) + IF(le.dob_LEFTTRIM_ErrorCount > 0, 1, 0) + IF(le.dob_ALLOW_ErrorCount > 0, 1, 0) + IF(le.rawlinkid_ALLOW_ErrorCount > 0, 1, 0) + IF(le.raw_full_name_LEFTTRIM_ErrorCount > 0, 1, 0) + IF(le.raw_full_name_ALLOW_ErrorCount > 0, 1, 0) + IF(le.raw_title_ALLOW_ErrorCount > 0, 1, 0) + IF(le.raw_first_name_LEFTTRIM_ErrorCount > 0, 1, 0) + IF(le.raw_first_name_ALLOW_ErrorCount > 0, 1, 0) + IF(le.raw_middle_name_LEFTTRIM_ErrorCount > 0, 1, 0) + IF(le.raw_middle_name_ALLOW_ErrorCount > 0, 1, 0) + IF(le.raw_last_name_LEFTTRIM_ErrorCount > 0, 1, 0) + IF(le.raw_last_name_ALLOW_ErrorCount > 0, 1, 0) + IF(le.raw_orig_suffix_ALLOW_ErrorCount > 0, 1, 0) + IF(le.full_address_ALLOW_ErrorCount > 0, 1, 0) + IF(le.street_1_ALLOW_ErrorCount > 0, 1, 0) + IF(le.city_LEFTTRIM_ErrorCount > 0, 1, 0) + IF(le.city_ALLOW_ErrorCount > 0, 1, 0) + IF(le.state_LEFTTRIM_ErrorCount > 0, 1, 0) + IF(le.state_ALLOW_ErrorCount > 0, 1, 0) + IF(le.state_LENGTHS_ErrorCount > 0, 1, 0) + IF(le.zip_LEFTTRIM_ErrorCount > 0, 1, 0) + IF(le.zip_ALLOW_ErrorCount > 0, 1, 0) + IF(le.zip_LENGTHS_ErrorCount > 0, 1, 0) + IF(le.county_ALLOW_ErrorCount > 0, 1, 0) + IF(le.mailing_street_1_ALLOW_ErrorCount > 0, 1, 0) + IF(le.mailing_city_LEFTTRIM_ErrorCount > 0, 1, 0) + IF(le.mailing_city_ALLOW_ErrorCount > 0, 1, 0) + IF(le.mailing_state_LEFTTRIM_ErrorCount > 0, 1, 0) + IF(le.mailing_state_ALLOW_ErrorCount > 0, 1, 0) + IF(le.mailing_state_LENGTHS_ErrorCount > 0, 1, 0) + IF(le.mailing_zip_LEFTTRIM_ErrorCount > 0, 1, 0) + IF(le.mailing_zip_ALLOW_ErrorCount > 0, 1, 0) + IF(le.mailing_zip_LENGTHS_ErrorCount > 0, 1, 0) + IF(le.mailing_county_ALLOW_ErrorCount > 0, 1, 0) + IF(le.phone_number_LEFTTRIM_ErrorCount > 0, 1, 0) + IF(le.phone_number_ALLOW_ErrorCount > 0, 1, 0) + IF(le.phone_number_LENGTHS_ErrorCount > 0, 1, 0) + IF(le.ultid_ALLOW_ErrorCount > 0, 1, 0) + IF(le.orgid_ALLOW_ErrorCount > 0, 1, 0) + IF(le.seleid_ALLOW_ErrorCount > 0, 1, 0) + IF(le.tin_ALLOW_ErrorCount > 0, 1, 0) + IF(le.email_address_ALLOW_ErrorCount > 0, 1, 0) + IF(le.appended_provider_id_ALLOW_ErrorCount > 0, 1, 0) + IF(le.lnpid_ALLOW_ErrorCount > 0, 1, 0) + IF(le.npi_ALLOW_ErrorCount > 0, 1, 0) + IF(le.ip_address_LEFTTRIM_ErrorCount > 0, 1, 0) + IF(le.ip_address_ALLOW_ErrorCount > 0, 1, 0) + IF(le.device_id_ALLOW_ErrorCount > 0, 1, 0) + IF(le.professional_id_ALLOW_ErrorCount > 0, 1, 0) + IF(le.bank_routing_number_1_ALLOW_ErrorCount > 0, 1, 0) + IF(le.bank_account_number_1_ALLOW_ErrorCount > 0, 1, 0) + IF(le.drivers_license_state_ALLOW_ErrorCount > 0, 1, 0) + IF(le.drivers_license_ALLOW_ErrorCount > 0, 1, 0) + IF(le.geo_lat_ALLOW_ErrorCount > 0, 1, 0) + IF(le.geo_long_ALLOW_ErrorCount > 0, 1, 0) + IF(le.reported_date_LEFTTRIM_ErrorCount > 0, 1, 0) + IF(le.reported_date_ALLOW_ErrorCount > 0, 1, 0) + IF(le.file_type_ALLOW_ErrorCount > 0, 1, 0) + IF(le.deceitful_confidence_ALLOW_ErrorCount > 0, 1, 0) + IF(le.reported_by_ALLOW_ErrorCount > 0, 1, 0) + IF(le.reason_description_ALLOW_ErrorCount > 0, 1, 0) + IF(le.event_type_1_ALLOW_ErrorCount > 0, 1, 0) + IF(le.event_entity_1_ALLOW_ErrorCount > 0, 1, 0);
    SELF.Rules_NoErrors := NumRules - SELF.Rules_WithErrors;
    SELF.Rules_WithEdits := IF(le.inqlog_id_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.customer_id_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.transaction_id_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.date_of_transaction_LEFTTRIM_WouldModifyCount > 0, 1, 0) + IF(le.date_of_transaction_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.household_id_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.customer_person_id_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.customer_program_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.reason_for_transaction_activity_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.inquiry_source_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.customer_county_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.customer_state_LEFTTRIM_WouldModifyCount > 0, 1, 0) + IF(le.customer_state_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.customer_state_LENGTHS_WouldModifyCount > 0, 1, 0) + IF(le.customer_agency_vertical_type_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.ssn_LEFTTRIM_WouldModifyCount > 0, 1, 0) + IF(le.ssn_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.ssn_LENGTHS_WouldModifyCount > 0, 1, 0) + IF(le.dob_LEFTTRIM_WouldModifyCount > 0, 1, 0) + IF(le.dob_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.rawlinkid_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.raw_full_name_LEFTTRIM_WouldModifyCount > 0, 1, 0) + IF(le.raw_full_name_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.raw_title_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.raw_first_name_LEFTTRIM_WouldModifyCount > 0, 1, 0) + IF(le.raw_first_name_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.raw_middle_name_LEFTTRIM_WouldModifyCount > 0, 1, 0) + IF(le.raw_middle_name_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.raw_last_name_LEFTTRIM_WouldModifyCount > 0, 1, 0) + IF(le.raw_last_name_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.raw_orig_suffix_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.full_address_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.street_1_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.city_LEFTTRIM_WouldModifyCount > 0, 1, 0) + IF(le.city_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.state_LEFTTRIM_WouldModifyCount > 0, 1, 0) + IF(le.state_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.state_LENGTHS_WouldModifyCount > 0, 1, 0) + IF(le.zip_LEFTTRIM_WouldModifyCount > 0, 1, 0) + IF(le.zip_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.zip_LENGTHS_WouldModifyCount > 0, 1, 0) + IF(le.county_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.mailing_street_1_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.mailing_city_LEFTTRIM_WouldModifyCount > 0, 1, 0) + IF(le.mailing_city_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.mailing_state_LEFTTRIM_WouldModifyCount > 0, 1, 0) + IF(le.mailing_state_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.mailing_state_LENGTHS_WouldModifyCount > 0, 1, 0) + IF(le.mailing_zip_LEFTTRIM_WouldModifyCount > 0, 1, 0) + IF(le.mailing_zip_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.mailing_zip_LENGTHS_WouldModifyCount > 0, 1, 0) + IF(le.mailing_county_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.phone_number_LEFTTRIM_WouldModifyCount > 0, 1, 0) + IF(le.phone_number_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.phone_number_LENGTHS_WouldModifyCount > 0, 1, 0) + IF(le.ultid_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.orgid_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.seleid_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.tin_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.email_address_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.appended_provider_id_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.lnpid_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.npi_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.ip_address_LEFTTRIM_WouldModifyCount > 0, 1, 0) + IF(le.ip_address_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.device_id_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.professional_id_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.bank_routing_number_1_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.bank_account_number_1_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.drivers_license_state_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.drivers_license_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.geo_lat_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.geo_long_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.reported_date_LEFTTRIM_WouldModifyCount > 0, 1, 0) + IF(le.reported_date_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.file_type_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.deceitful_confidence_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.reported_by_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.reason_description_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.event_type_1_ALLOW_WouldModifyCount > 0, 1, 0) + IF(le.event_entity_1_ALLOW_WouldModifyCount > 0, 1, 0);
    SELF := le;
  END;
  EXPORT SummaryStats := PROJECT(SummaryStats0, xAddErrSummary(LEFT));
  r := RECORD
    STRING10 Src;
    STRING FieldName;
    STRING FieldType;
    STRING ErrorType;
    SALT311.StrType ErrorMessage;
    SALT311.StrType FieldContents;
  END;
  r into(h le,UNSIGNED c) := TRANSFORM
    SELF.Src :=  ''; // Source not provided
    UNSIGNED1 ErrNum := CHOOSE(c,le.inqlog_id_Invalid,le.customer_id_Invalid,le.transaction_id_Invalid,le.date_of_transaction_Invalid,le.household_id_Invalid,le.customer_person_id_Invalid,le.customer_program_Invalid,le.reason_for_transaction_activity_Invalid,le.inquiry_source_Invalid,le.customer_county_Invalid,le.customer_state_Invalid,le.customer_agency_vertical_type_Invalid,le.ssn_Invalid,le.dob_Invalid,le.rawlinkid_Invalid,le.raw_full_name_Invalid,le.raw_title_Invalid,le.raw_first_name_Invalid,le.raw_middle_name_Invalid,le.raw_last_name_Invalid,le.raw_orig_suffix_Invalid,le.full_address_Invalid,le.street_1_Invalid,le.city_Invalid,le.state_Invalid,le.zip_Invalid,le.county_Invalid,le.mailing_street_1_Invalid,le.mailing_city_Invalid,le.mailing_state_Invalid,le.mailing_zip_Invalid,le.mailing_county_Invalid,le.phone_number_Invalid,le.ultid_Invalid,le.orgid_Invalid,le.seleid_Invalid,le.tin_Invalid,le.email_address_Invalid,le.appended_provider_id_Invalid,le.lnpid_Invalid,le.npi_Invalid,le.ip_address_Invalid,le.device_id_Invalid,le.professional_id_Invalid,le.bank_routing_number_1_Invalid,le.bank_account_number_1_Invalid,le.drivers_license_state_Invalid,le.drivers_license_Invalid,le.geo_lat_Invalid,le.geo_long_Invalid,le.reported_date_Invalid,le.file_type_Invalid,le.deceitful_confidence_Invalid,le.reported_by_Invalid,le.reason_description_Invalid,le.event_type_1_Invalid,le.event_entity_1_Invalid,100);
    SELF.ErrorMessage := IF ( ErrNum = 0, SKIP, CHOOSE(c,Deltabase_Fields.InvalidMessage_inqlog_id(le.inqlog_id_Invalid),Deltabase_Fields.InvalidMessage_customer_id(le.customer_id_Invalid),Deltabase_Fields.InvalidMessage_transaction_id(le.transaction_id_Invalid),Deltabase_Fields.InvalidMessage_date_of_transaction(le.date_of_transaction_Invalid),Deltabase_Fields.InvalidMessage_household_id(le.household_id_Invalid),Deltabase_Fields.InvalidMessage_customer_person_id(le.customer_person_id_Invalid),Deltabase_Fields.InvalidMessage_customer_program(le.customer_program_Invalid),Deltabase_Fields.InvalidMessage_reason_for_transaction_activity(le.reason_for_transaction_activity_Invalid),Deltabase_Fields.InvalidMessage_inquiry_source(le.inquiry_source_Invalid),Deltabase_Fields.InvalidMessage_customer_county(le.customer_county_Invalid),Deltabase_Fields.InvalidMessage_customer_state(le.customer_state_Invalid),Deltabase_Fields.InvalidMessage_customer_agency_vertical_type(le.customer_agency_vertical_type_Invalid),Deltabase_Fields.InvalidMessage_ssn(le.ssn_Invalid),Deltabase_Fields.InvalidMessage_dob(le.dob_Invalid),Deltabase_Fields.InvalidMessage_rawlinkid(le.rawlinkid_Invalid),Deltabase_Fields.InvalidMessage_raw_full_name(le.raw_full_name_Invalid),Deltabase_Fields.InvalidMessage_raw_title(le.raw_title_Invalid),Deltabase_Fields.InvalidMessage_raw_first_name(le.raw_first_name_Invalid),Deltabase_Fields.InvalidMessage_raw_middle_name(le.raw_middle_name_Invalid),Deltabase_Fields.InvalidMessage_raw_last_name(le.raw_last_name_Invalid),Deltabase_Fields.InvalidMessage_raw_orig_suffix(le.raw_orig_suffix_Invalid),Deltabase_Fields.InvalidMessage_full_address(le.full_address_Invalid),Deltabase_Fields.InvalidMessage_street_1(le.street_1_Invalid),Deltabase_Fields.InvalidMessage_city(le.city_Invalid),Deltabase_Fields.InvalidMessage_state(le.state_Invalid),Deltabase_Fields.InvalidMessage_zip(le.zip_Invalid),Deltabase_Fields.InvalidMessage_county(le.county_Invalid),Deltabase_Fields.InvalidMessage_mailing_street_1(le.mailing_street_1_Invalid),Deltabase_Fields.InvalidMessage_mailing_city(le.mailing_city_Invalid),Deltabase_Fields.InvalidMessage_mailing_state(le.mailing_state_Invalid),Deltabase_Fields.InvalidMessage_mailing_zip(le.mailing_zip_Invalid),Deltabase_Fields.InvalidMessage_mailing_county(le.mailing_county_Invalid),Deltabase_Fields.InvalidMessage_phone_number(le.phone_number_Invalid),Deltabase_Fields.InvalidMessage_ultid(le.ultid_Invalid),Deltabase_Fields.InvalidMessage_orgid(le.orgid_Invalid),Deltabase_Fields.InvalidMessage_seleid(le.seleid_Invalid),Deltabase_Fields.InvalidMessage_tin(le.tin_Invalid),Deltabase_Fields.InvalidMessage_email_address(le.email_address_Invalid),Deltabase_Fields.InvalidMessage_appended_provider_id(le.appended_provider_id_Invalid),Deltabase_Fields.InvalidMessage_lnpid(le.lnpid_Invalid),Deltabase_Fields.InvalidMessage_npi(le.npi_Invalid),Deltabase_Fields.InvalidMessage_ip_address(le.ip_address_Invalid),Deltabase_Fields.InvalidMessage_device_id(le.device_id_Invalid),Deltabase_Fields.InvalidMessage_professional_id(le.professional_id_Invalid),Deltabase_Fields.InvalidMessage_bank_routing_number_1(le.bank_routing_number_1_Invalid),Deltabase_Fields.InvalidMessage_bank_account_number_1(le.bank_account_number_1_Invalid),Deltabase_Fields.InvalidMessage_drivers_license_state(le.drivers_license_state_Invalid),Deltabase_Fields.InvalidMessage_drivers_license(le.drivers_license_Invalid),Deltabase_Fields.InvalidMessage_geo_lat(le.geo_lat_Invalid),Deltabase_Fields.InvalidMessage_geo_long(le.geo_long_Invalid),Deltabase_Fields.InvalidMessage_reported_date(le.reported_date_Invalid),Deltabase_Fields.InvalidMessage_file_type(le.file_type_Invalid),Deltabase_Fields.InvalidMessage_deceitful_confidence(le.deceitful_confidence_Invalid),Deltabase_Fields.InvalidMessage_reported_by(le.reported_by_Invalid),Deltabase_Fields.InvalidMessage_reason_description(le.reason_description_Invalid),Deltabase_Fields.InvalidMessage_event_type_1(le.event_type_1_Invalid),Deltabase_Fields.InvalidMessage_event_entity_1(le.event_entity_1_Invalid),'UNKNOWN'));
    SELF.ErrorType := IF ( ErrNum = 0, SKIP, CHOOSE(c
          ,CHOOSE(le.inqlog_id_Invalid,'ALLOW','UNKNOWN')
          ,CHOOSE(le.customer_id_Invalid,'ALLOW','UNKNOWN')
          ,CHOOSE(le.transaction_id_Invalid,'ALLOW','UNKNOWN')
          ,CHOOSE(le.date_of_transaction_Invalid,'LEFTTRIM','ALLOW','UNKNOWN')
          ,CHOOSE(le.household_id_Invalid,'ALLOW','UNKNOWN')
          ,CHOOSE(le.customer_person_id_Invalid,'ALLOW','UNKNOWN')
          ,CHOOSE(le.customer_program_Invalid,'ALLOW','UNKNOWN')
          ,CHOOSE(le.reason_for_transaction_activity_Invalid,'ALLOW','UNKNOWN')
          ,CHOOSE(le.inquiry_source_Invalid,'ALLOW','UNKNOWN')
          ,CHOOSE(le.customer_county_Invalid,'ALLOW','UNKNOWN')
          ,CHOOSE(le.customer_state_Invalid,'LEFTTRIM','ALLOW','LENGTHS','UNKNOWN')
          ,CHOOSE(le.customer_agency_vertical_type_Invalid,'ALLOW','UNKNOWN')
          ,CHOOSE(le.ssn_Invalid,'LEFTTRIM','ALLOW','LENGTHS','UNKNOWN')
          ,CHOOSE(le.dob_Invalid,'LEFTTRIM','ALLOW','UNKNOWN')
          ,CHOOSE(le.rawlinkid_Invalid,'ALLOW','UNKNOWN')
          ,CHOOSE(le.raw_full_name_Invalid,'LEFTTRIM','ALLOW','UNKNOWN')
          ,CHOOSE(le.raw_title_Invalid,'ALLOW','UNKNOWN')
          ,CHOOSE(le.raw_first_name_Invalid,'LEFTTRIM','ALLOW','UNKNOWN')
          ,CHOOSE(le.raw_middle_name_Invalid,'LEFTTRIM','ALLOW','UNKNOWN')
          ,CHOOSE(le.raw_last_name_Invalid,'LEFTTRIM','ALLOW','UNKNOWN')
          ,CHOOSE(le.raw_orig_suffix_Invalid,'ALLOW','UNKNOWN')
          ,CHOOSE(le.full_address_Invalid,'ALLOW','UNKNOWN')
          ,CHOOSE(le.street_1_Invalid,'ALLOW','UNKNOWN')
          ,CHOOSE(le.city_Invalid,'LEFTTRIM','ALLOW','UNKNOWN')
          ,CHOOSE(le.state_Invalid,'LEFTTRIM','ALLOW','LENGTHS','UNKNOWN')
          ,CHOOSE(le.zip_Invalid,'LEFTTRIM','ALLOW','LENGTHS','UNKNOWN')
          ,CHOOSE(le.county_Invalid,'ALLOW','UNKNOWN')
          ,CHOOSE(le.mailing_street_1_Invalid,'ALLOW','UNKNOWN')
          ,CHOOSE(le.mailing_city_Invalid,'LEFTTRIM','ALLOW','UNKNOWN')
          ,CHOOSE(le.mailing_state_Invalid,'LEFTTRIM','ALLOW','LENGTHS','UNKNOWN')
          ,CHOOSE(le.mailing_zip_Invalid,'LEFTTRIM','ALLOW','LENGTHS','UNKNOWN')
          ,CHOOSE(le.mailing_county_Invalid,'ALLOW','UNKNOWN')
          ,CHOOSE(le.phone_number_Invalid,'LEFTTRIM','ALLOW','LENGTHS','UNKNOWN')
          ,CHOOSE(le.ultid_Invalid,'ALLOW','UNKNOWN')
          ,CHOOSE(le.orgid_Invalid,'ALLOW','UNKNOWN')
          ,CHOOSE(le.seleid_Invalid,'ALLOW','UNKNOWN')
          ,CHOOSE(le.tin_Invalid,'ALLOW','UNKNOWN')
          ,CHOOSE(le.email_address_Invalid,'ALLOW','UNKNOWN')
          ,CHOOSE(le.appended_provider_id_Invalid,'ALLOW','UNKNOWN')
          ,CHOOSE(le.lnpid_Invalid,'ALLOW','UNKNOWN')
          ,CHOOSE(le.npi_Invalid,'ALLOW','UNKNOWN')
          ,CHOOSE(le.ip_address_Invalid,'LEFTTRIM','ALLOW','UNKNOWN')
          ,CHOOSE(le.device_id_Invalid,'ALLOW','UNKNOWN')
          ,CHOOSE(le.professional_id_Invalid,'ALLOW','UNKNOWN')
          ,CHOOSE(le.bank_routing_number_1_Invalid,'ALLOW','UNKNOWN')
          ,CHOOSE(le.bank_account_number_1_Invalid,'ALLOW','UNKNOWN')
          ,CHOOSE(le.drivers_license_state_Invalid,'ALLOW','UNKNOWN')
          ,CHOOSE(le.drivers_license_Invalid,'ALLOW','UNKNOWN')
          ,CHOOSE(le.geo_lat_Invalid,'ALLOW','UNKNOWN')
          ,CHOOSE(le.geo_long_Invalid,'ALLOW','UNKNOWN')
          ,CHOOSE(le.reported_date_Invalid,'LEFTTRIM','ALLOW','UNKNOWN')
          ,CHOOSE(le.file_type_Invalid,'ALLOW','UNKNOWN')
          ,CHOOSE(le.deceitful_confidence_Invalid,'ALLOW','UNKNOWN')
          ,CHOOSE(le.reported_by_Invalid,'ALLOW','UNKNOWN')
          ,CHOOSE(le.reason_description_Invalid,'ALLOW','UNKNOWN')
          ,CHOOSE(le.event_type_1_Invalid,'ALLOW','UNKNOWN')
          ,CHOOSE(le.event_entity_1_Invalid,'ALLOW','UNKNOWN'),'UNKNOWN'));
    SELF.FieldName := CHOOSE(c,'inqlog_id','customer_id','transaction_id','date_of_transaction','household_id','customer_person_id','customer_program','reason_for_transaction_activity','inquiry_source','customer_county','customer_state','customer_agency_vertical_type','ssn','dob','rawlinkid','raw_full_name','raw_title','raw_first_name','raw_middle_name','raw_last_name','raw_orig_suffix','full_address','street_1','city','state','zip','county','mailing_street_1','mailing_city','mailing_state','mailing_zip','mailing_county','phone_number','ultid','orgid','seleid','tin','email_address','appended_provider_id','lnpid','npi','ip_address','device_id','professional_id','bank_routing_number_1','bank_account_number_1','drivers_license_state','drivers_license','geo_lat','geo_long','reported_date','file_type','deceitful_confidence','reported_by','reason_description','event_type_1','event_entity_1','UNKNOWN');
    SELF.FieldType := CHOOSE(c,'invalid_numeric','invalid_numeric_string','invalid_alphanumeric','invalid_date','invalid_alphanumeric','invalid_alphanumeric','invalid_alpha','invalid_alphanumeric','invalid_alphanumeric','invalid_alphanumeric','invalid_state','invalid_alphanumeric','invalid_ssn','invalid_date','invalid_numeric','invalid_name','invalid_alphanumeric','invalid_name','invalid_name','invalid_name','invalid_alphanumeric','invalid_alphanumeric','invalid_alphanumeric','invalid_name','invalid_state','invalid_zip','invalid_alphanumeric','invalid_alphanumeric','invalid_name','invalid_state','invalid_zip','invalid_alphanumeric','invalid_phone','invalid_numeric','invalid_numeric','invalid_numeric','invalid_alphanumeric','invalid_email','invalid_numeric','invalid_numeric','invalid_alphanumeric','invalid_ip','invalid_alphanumeric','invalid_alphanumeric','invalid_alphanumeric','invalid_alphanumeric','invalid_alphanumeric','invalid_alphanumeric','invalid_real_string','invalid_real_string','invalid_date','invalid_numeric','invalid_numeric_string','invalid_alphanumeric','invalid_alphanumeric','invalid_numeric_string','invalid_alphanumeric','UNKNOWN');
    SELF.FieldContents := CHOOSE(c,(SALT311.StrType)le.inqlog_id,(SALT311.StrType)le.customer_id,(SALT311.StrType)le.transaction_id,(SALT311.StrType)le.date_of_transaction,(SALT311.StrType)le.household_id,(SALT311.StrType)le.customer_person_id,(SALT311.StrType)le.customer_program,(SALT311.StrType)le.reason_for_transaction_activity,(SALT311.StrType)le.inquiry_source,(SALT311.StrType)le.customer_county,(SALT311.StrType)le.customer_state,(SALT311.StrType)le.customer_agency_vertical_type,(SALT311.StrType)le.ssn,(SALT311.StrType)le.dob,(SALT311.StrType)le.rawlinkid,(SALT311.StrType)le.raw_full_name,(SALT311.StrType)le.raw_title,(SALT311.StrType)le.raw_first_name,(SALT311.StrType)le.raw_middle_name,(SALT311.StrType)le.raw_last_name,(SALT311.StrType)le.raw_orig_suffix,(SALT311.StrType)le.full_address,(SALT311.StrType)le.street_1,(SALT311.StrType)le.city,(SALT311.StrType)le.state,(SALT311.StrType)le.zip,(SALT311.StrType)le.county,(SALT311.StrType)le.mailing_street_1,(SALT311.StrType)le.mailing_city,(SALT311.StrType)le.mailing_state,(SALT311.StrType)le.mailing_zip,(SALT311.StrType)le.mailing_county,(SALT311.StrType)le.phone_number,(SALT311.StrType)le.ultid,(SALT311.StrType)le.orgid,(SALT311.StrType)le.seleid,(SALT311.StrType)le.tin,(SALT311.StrType)le.email_address,(SALT311.StrType)le.appended_provider_id,(SALT311.StrType)le.lnpid,(SALT311.StrType)le.npi,(SALT311.StrType)le.ip_address,(SALT311.StrType)le.device_id,(SALT311.StrType)le.professional_id,(SALT311.StrType)le.bank_routing_number_1,(SALT311.StrType)le.bank_account_number_1,(SALT311.StrType)le.drivers_license_state,(SALT311.StrType)le.drivers_license,(SALT311.StrType)le.geo_lat,(SALT311.StrType)le.geo_long,(SALT311.StrType)le.reported_date,(SALT311.StrType)le.file_type,(SALT311.StrType)le.deceitful_confidence,(SALT311.StrType)le.reported_by,(SALT311.StrType)le.reason_description,(SALT311.StrType)le.event_type_1,(SALT311.StrType)le.event_entity_1,'***SALTBUG***');
  END;
  EXPORT AllErrors := NORMALIZE(h,57,Into(LEFT,COUNTER));
   bv := TABLE(AllErrors,{FieldContents, FieldName, Cnt := COUNT(GROUP)},FieldContents, FieldName,MERGE);
  EXPORT BadValues := TOPN(bv,1000,-Cnt);
  // Particular form of stats required for Orbit
  EXPORT OrbitStats(UNSIGNED examples = 10, UNSIGNED Pdate=(UNSIGNED)StringLib.getdateYYYYMMDD(), DATASET(Deltabase_Layout_Deltabase) prevDS = DATASET([], Deltabase_Layout_Deltabase), STRING10 Src='UNK'):= FUNCTION
  // field error stats
    SALT311.ScrubsOrbitLayout Into(SummaryStats le, UNSIGNED c) := TRANSFORM
      SELF.recordstotal := le.TotalCnt;
      SELF.processdate := Pdate;
      SELF.sourcecode := src;
      SELF.ruledesc := toRuleDesc(c);
      SELF.ErrorMessage := toErrorMessage(c);
      SELF.rulecnt := CHOOSE(c
          ,le.inqlog_id_ALLOW_ErrorCount
          ,le.customer_id_ALLOW_ErrorCount
          ,le.transaction_id_ALLOW_ErrorCount
          ,le.date_of_transaction_LEFTTRIM_ErrorCount,le.date_of_transaction_ALLOW_ErrorCount
          ,le.household_id_ALLOW_ErrorCount
          ,le.customer_person_id_ALLOW_ErrorCount
          ,le.customer_program_ALLOW_ErrorCount
          ,le.reason_for_transaction_activity_ALLOW_ErrorCount
          ,le.inquiry_source_ALLOW_ErrorCount
          ,le.customer_county_ALLOW_ErrorCount
          ,le.customer_state_LEFTTRIM_ErrorCount,le.customer_state_ALLOW_ErrorCount,le.customer_state_LENGTHS_ErrorCount
          ,le.customer_agency_vertical_type_ALLOW_ErrorCount
          ,le.ssn_LEFTTRIM_ErrorCount,le.ssn_ALLOW_ErrorCount,le.ssn_LENGTHS_ErrorCount
          ,le.dob_LEFTTRIM_ErrorCount,le.dob_ALLOW_ErrorCount
          ,le.rawlinkid_ALLOW_ErrorCount
          ,le.raw_full_name_LEFTTRIM_ErrorCount,le.raw_full_name_ALLOW_ErrorCount
          ,le.raw_title_ALLOW_ErrorCount
          ,le.raw_first_name_LEFTTRIM_ErrorCount,le.raw_first_name_ALLOW_ErrorCount
          ,le.raw_middle_name_LEFTTRIM_ErrorCount,le.raw_middle_name_ALLOW_ErrorCount
          ,le.raw_last_name_LEFTTRIM_ErrorCount,le.raw_last_name_ALLOW_ErrorCount
          ,le.raw_orig_suffix_ALLOW_ErrorCount
          ,le.full_address_ALLOW_ErrorCount
          ,le.street_1_ALLOW_ErrorCount
          ,le.city_LEFTTRIM_ErrorCount,le.city_ALLOW_ErrorCount
          ,le.state_LEFTTRIM_ErrorCount,le.state_ALLOW_ErrorCount,le.state_LENGTHS_ErrorCount
          ,le.zip_LEFTTRIM_ErrorCount,le.zip_ALLOW_ErrorCount,le.zip_LENGTHS_ErrorCount
          ,le.county_ALLOW_ErrorCount
          ,le.mailing_street_1_ALLOW_ErrorCount
          ,le.mailing_city_LEFTTRIM_ErrorCount,le.mailing_city_ALLOW_ErrorCount
          ,le.mailing_state_LEFTTRIM_ErrorCount,le.mailing_state_ALLOW_ErrorCount,le.mailing_state_LENGTHS_ErrorCount
          ,le.mailing_zip_LEFTTRIM_ErrorCount,le.mailing_zip_ALLOW_ErrorCount,le.mailing_zip_LENGTHS_ErrorCount
          ,le.mailing_county_ALLOW_ErrorCount
          ,le.phone_number_LEFTTRIM_ErrorCount,le.phone_number_ALLOW_ErrorCount,le.phone_number_LENGTHS_ErrorCount
          ,le.ultid_ALLOW_ErrorCount
          ,le.orgid_ALLOW_ErrorCount
          ,le.seleid_ALLOW_ErrorCount
          ,le.tin_ALLOW_ErrorCount
          ,le.email_address_ALLOW_ErrorCount
          ,le.appended_provider_id_ALLOW_ErrorCount
          ,le.lnpid_ALLOW_ErrorCount
          ,le.npi_ALLOW_ErrorCount
          ,le.ip_address_LEFTTRIM_ErrorCount,le.ip_address_ALLOW_ErrorCount
          ,le.device_id_ALLOW_ErrorCount
          ,le.professional_id_ALLOW_ErrorCount
          ,le.bank_routing_number_1_ALLOW_ErrorCount
          ,le.bank_account_number_1_ALLOW_ErrorCount
          ,le.drivers_license_state_ALLOW_ErrorCount
          ,le.drivers_license_ALLOW_ErrorCount
          ,le.geo_lat_ALLOW_ErrorCount
          ,le.geo_long_ALLOW_ErrorCount
          ,le.reported_date_LEFTTRIM_ErrorCount,le.reported_date_ALLOW_ErrorCount
          ,le.file_type_ALLOW_ErrorCount
          ,le.deceitful_confidence_ALLOW_ErrorCount
          ,le.reported_by_ALLOW_ErrorCount
          ,le.reason_description_ALLOW_ErrorCount
          ,le.event_type_1_ALLOW_ErrorCount
          ,le.event_entity_1_ALLOW_ErrorCount
          ,le.FieldsChecked_WithErrors
          ,le.FieldsChecked_NoErrors
          ,le.Rules_WithErrors
          ,le.Rules_NoErrors
          ,NumRulesWithPossibleEdits
          ,le.AnyRule_WithErrorsCount
          ,SELF.recordstotal - le.AnyRule_WithErrorsCount
          ,le.AnyRule_WithEditsCount
          ,le.Rules_WithEdits,0);
      SELF.rulepcnt := IF(c <= NumRules, 100 * CHOOSE(c
          ,le.inqlog_id_ALLOW_ErrorCount
          ,le.customer_id_ALLOW_ErrorCount
          ,le.transaction_id_ALLOW_ErrorCount
          ,le.date_of_transaction_LEFTTRIM_ErrorCount,le.date_of_transaction_ALLOW_ErrorCount
          ,le.household_id_ALLOW_ErrorCount
          ,le.customer_person_id_ALLOW_ErrorCount
          ,le.customer_program_ALLOW_ErrorCount
          ,le.reason_for_transaction_activity_ALLOW_ErrorCount
          ,le.inquiry_source_ALLOW_ErrorCount
          ,le.customer_county_ALLOW_ErrorCount
          ,le.customer_state_LEFTTRIM_ErrorCount,le.customer_state_ALLOW_ErrorCount,le.customer_state_LENGTHS_ErrorCount
          ,le.customer_agency_vertical_type_ALLOW_ErrorCount
          ,le.ssn_LEFTTRIM_ErrorCount,le.ssn_ALLOW_ErrorCount,le.ssn_LENGTHS_ErrorCount
          ,le.dob_LEFTTRIM_ErrorCount,le.dob_ALLOW_ErrorCount
          ,le.rawlinkid_ALLOW_ErrorCount
          ,le.raw_full_name_LEFTTRIM_ErrorCount,le.raw_full_name_ALLOW_ErrorCount
          ,le.raw_title_ALLOW_ErrorCount
          ,le.raw_first_name_LEFTTRIM_ErrorCount,le.raw_first_name_ALLOW_ErrorCount
          ,le.raw_middle_name_LEFTTRIM_ErrorCount,le.raw_middle_name_ALLOW_ErrorCount
          ,le.raw_last_name_LEFTTRIM_ErrorCount,le.raw_last_name_ALLOW_ErrorCount
          ,le.raw_orig_suffix_ALLOW_ErrorCount
          ,le.full_address_ALLOW_ErrorCount
          ,le.street_1_ALLOW_ErrorCount
          ,le.city_LEFTTRIM_ErrorCount,le.city_ALLOW_ErrorCount
          ,le.state_LEFTTRIM_ErrorCount,le.state_ALLOW_ErrorCount,le.state_LENGTHS_ErrorCount
          ,le.zip_LEFTTRIM_ErrorCount,le.zip_ALLOW_ErrorCount,le.zip_LENGTHS_ErrorCount
          ,le.county_ALLOW_ErrorCount
          ,le.mailing_street_1_ALLOW_ErrorCount
          ,le.mailing_city_LEFTTRIM_ErrorCount,le.mailing_city_ALLOW_ErrorCount
          ,le.mailing_state_LEFTTRIM_ErrorCount,le.mailing_state_ALLOW_ErrorCount,le.mailing_state_LENGTHS_ErrorCount
          ,le.mailing_zip_LEFTTRIM_ErrorCount,le.mailing_zip_ALLOW_ErrorCount,le.mailing_zip_LENGTHS_ErrorCount
          ,le.mailing_county_ALLOW_ErrorCount
          ,le.phone_number_LEFTTRIM_ErrorCount,le.phone_number_ALLOW_ErrorCount,le.phone_number_LENGTHS_ErrorCount
          ,le.ultid_ALLOW_ErrorCount
          ,le.orgid_ALLOW_ErrorCount
          ,le.seleid_ALLOW_ErrorCount
          ,le.tin_ALLOW_ErrorCount
          ,le.email_address_ALLOW_ErrorCount
          ,le.appended_provider_id_ALLOW_ErrorCount
          ,le.lnpid_ALLOW_ErrorCount
          ,le.npi_ALLOW_ErrorCount
          ,le.ip_address_LEFTTRIM_ErrorCount,le.ip_address_ALLOW_ErrorCount
          ,le.device_id_ALLOW_ErrorCount
          ,le.professional_id_ALLOW_ErrorCount
          ,le.bank_routing_number_1_ALLOW_ErrorCount
          ,le.bank_account_number_1_ALLOW_ErrorCount
          ,le.drivers_license_state_ALLOW_ErrorCount
          ,le.drivers_license_ALLOW_ErrorCount
          ,le.geo_lat_ALLOW_ErrorCount
          ,le.geo_long_ALLOW_ErrorCount
          ,le.reported_date_LEFTTRIM_ErrorCount,le.reported_date_ALLOW_ErrorCount
          ,le.file_type_ALLOW_ErrorCount
          ,le.deceitful_confidence_ALLOW_ErrorCount
          ,le.reported_by_ALLOW_ErrorCount
          ,le.reason_description_ALLOW_ErrorCount
          ,le.event_type_1_ALLOW_ErrorCount
          ,le.event_entity_1_ALLOW_ErrorCount,0) / le.TotalCnt, CHOOSE(c - NumRules
          ,IF(NumFieldsWithRules = 0, 0, le.FieldsChecked_WithErrors/NumFieldsWithRules * 100)
          ,IF(NumFieldsWithRules = 0, 0, le.FieldsChecked_NoErrors/NumFieldsWithRules * 100)
          ,IF(NumRules = 0, 0, le.Rules_WithErrors/NumRules * 100)
          ,IF(NumRules = 0, 0, le.Rules_NoErrors/NumRules * 100)
          ,0
          ,IF(SELF.recordstotal = 0, 0, le.AnyRule_WithErrorsCount/SELF.recordstotal * 100)
          ,IF(SELF.recordstotal = 0, 0, (SELF.recordstotal - le.AnyRule_WithErrorsCount)/SELF.recordstotal * 100)
          ,IF(SELF.recordstotal = 0, 0, le.AnyRule_WithEditsCount/SELF.recordstotal * 100)
          ,IF(NumRulesWithPossibleEdits = 0, 0, le.Rules_WithEdits/NumRulesWithPossibleEdits * 100),0));
    END;
    SummaryInfo := NORMALIZE(SummaryStats,NumRules + 9,Into(LEFT,COUNTER));
    orb_r := RECORD
      AllErrors.Src;
      STRING RuleDesc := TRIM(AllErrors.FieldName)+':'+TRIM(AllErrors.FieldType)+':'+AllErrors.ErrorType;
      STRING ErrorMessage := TRIM(AllErrors.errormessage);
      SALT311.StrType RawCodeMissing := AllErrors.FieldContents;
    END;
    tab := TABLE(AllErrors,orb_r);
    orb_sum := TABLE(tab,{src,ruledesc,ErrorMessage,rawcodemissing,rawcodemissingcnt := COUNT(GROUP)},src,ruledesc,ErrorMessage,rawcodemissing,MERGE);
    gt := GROUP(TOPN(GROUP(orb_sum,src,ruledesc,ALL),examples,-rawcodemissingcnt));
    SALT311.ScrubsOrbitLayout jn(SummaryInfo le, gt ri) := TRANSFORM
      SELF.rawcodemissing := ri.rawcodemissing;
      SELF.rawcodemissingcnt := ri.rawcodemissingcnt;
      SELF := le;
    END;
    j := JOIN(SummaryInfo,gt,LEFT.ruledesc=RIGHT.ruledesc,jn(LEFT,RIGHT),HASH,LEFT OUTER);
    FieldErrorStats := IF(examples>0,j,SummaryInfo);

    // field population stats
    mod_hygiene := Deltabase_hygiene(PROJECT(h, Deltabase_Layout_Deltabase));
    hygiene_summaryStats := mod_hygiene.Summary('');
    getFieldTypeText(infield) := FUNCTIONMACRO
      isNumField := (STRING)((TYPEOF(infield))'') = '0';
      RETURN IF(isNumField, 'nonzero', 'nonblank');
    ENDMACRO;
    SALT311.ScrubsOrbitLayout xNormHygieneStats(hygiene_summaryStats le, UNSIGNED c, STRING suffix) := TRANSFORM
      SELF.recordstotal := le.NumberOfRecords;
      SELF.processdate := Pdate;
      SELF.sourcecode := src;
      SELF.ruledesc := CHOOSE(c
          ,'inqlog_id:' + getFieldTypeText(h.inqlog_id) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'customer_id:' + getFieldTypeText(h.customer_id) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'transaction_id:' + getFieldTypeText(h.transaction_id) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'date_of_transaction:' + getFieldTypeText(h.date_of_transaction) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'household_id:' + getFieldTypeText(h.household_id) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'customer_person_id:' + getFieldTypeText(h.customer_person_id) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'customer_program:' + getFieldTypeText(h.customer_program) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'reason_for_transaction_activity:' + getFieldTypeText(h.reason_for_transaction_activity) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'inquiry_source:' + getFieldTypeText(h.inquiry_source) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'customer_county:' + getFieldTypeText(h.customer_county) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'customer_state:' + getFieldTypeText(h.customer_state) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'customer_agency_vertical_type:' + getFieldTypeText(h.customer_agency_vertical_type) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'ssn:' + getFieldTypeText(h.ssn) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'dob:' + getFieldTypeText(h.dob) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'rawlinkid:' + getFieldTypeText(h.rawlinkid) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'raw_full_name:' + getFieldTypeText(h.raw_full_name) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'raw_title:' + getFieldTypeText(h.raw_title) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'raw_first_name:' + getFieldTypeText(h.raw_first_name) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'raw_middle_name:' + getFieldTypeText(h.raw_middle_name) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'raw_last_name:' + getFieldTypeText(h.raw_last_name) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'raw_orig_suffix:' + getFieldTypeText(h.raw_orig_suffix) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'full_address:' + getFieldTypeText(h.full_address) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'street_1:' + getFieldTypeText(h.street_1) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'city:' + getFieldTypeText(h.city) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'state:' + getFieldTypeText(h.state) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'zip:' + getFieldTypeText(h.zip) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'county:' + getFieldTypeText(h.county) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'mailing_street_1:' + getFieldTypeText(h.mailing_street_1) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'mailing_city:' + getFieldTypeText(h.mailing_city) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'mailing_state:' + getFieldTypeText(h.mailing_state) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'mailing_zip:' + getFieldTypeText(h.mailing_zip) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'mailing_county:' + getFieldTypeText(h.mailing_county) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'phone_number:' + getFieldTypeText(h.phone_number) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'ultid:' + getFieldTypeText(h.ultid) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'orgid:' + getFieldTypeText(h.orgid) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'seleid:' + getFieldTypeText(h.seleid) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'tin:' + getFieldTypeText(h.tin) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'email_address:' + getFieldTypeText(h.email_address) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'appended_provider_id:' + getFieldTypeText(h.appended_provider_id) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'lnpid:' + getFieldTypeText(h.lnpid) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'npi:' + getFieldTypeText(h.npi) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'ip_address:' + getFieldTypeText(h.ip_address) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'device_id:' + getFieldTypeText(h.device_id) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'professional_id:' + getFieldTypeText(h.professional_id) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'bank_routing_number_1:' + getFieldTypeText(h.bank_routing_number_1) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'bank_account_number_1:' + getFieldTypeText(h.bank_account_number_1) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'drivers_license_state:' + getFieldTypeText(h.drivers_license_state) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'drivers_license:' + getFieldTypeText(h.drivers_license) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'geo_lat:' + getFieldTypeText(h.geo_lat) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'geo_long:' + getFieldTypeText(h.geo_long) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'reported_date:' + getFieldTypeText(h.reported_date) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'file_type:' + getFieldTypeText(h.file_type) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'deceitful_confidence:' + getFieldTypeText(h.deceitful_confidence) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'reported_by:' + getFieldTypeText(h.reported_by) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'reason_description:' + getFieldTypeText(h.reason_description) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'event_type_1:' + getFieldTypeText(h.event_type_1) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix
          ,'event_entity_1:' + getFieldTypeText(h.event_entity_1) + IF(TRIM(le.txt) > '', '_' + TRIM(le.txt), '') + ':' + suffix,'UNKNOWN');
      SELF.rulecnt := CHOOSE(c
          ,le.populated_inqlog_id_cnt
          ,le.populated_customer_id_cnt
          ,le.populated_transaction_id_cnt
          ,le.populated_date_of_transaction_cnt
          ,le.populated_household_id_cnt
          ,le.populated_customer_person_id_cnt
          ,le.populated_customer_program_cnt
          ,le.populated_reason_for_transaction_activity_cnt
          ,le.populated_inquiry_source_cnt
          ,le.populated_customer_county_cnt
          ,le.populated_customer_state_cnt
          ,le.populated_customer_agency_vertical_type_cnt
          ,le.populated_ssn_cnt
          ,le.populated_dob_cnt
          ,le.populated_rawlinkid_cnt
          ,le.populated_raw_full_name_cnt
          ,le.populated_raw_title_cnt
          ,le.populated_raw_first_name_cnt
          ,le.populated_raw_middle_name_cnt
          ,le.populated_raw_last_name_cnt
          ,le.populated_raw_orig_suffix_cnt
          ,le.populated_full_address_cnt
          ,le.populated_street_1_cnt
          ,le.populated_city_cnt
          ,le.populated_state_cnt
          ,le.populated_zip_cnt
          ,le.populated_county_cnt
          ,le.populated_mailing_street_1_cnt
          ,le.populated_mailing_city_cnt
          ,le.populated_mailing_state_cnt
          ,le.populated_mailing_zip_cnt
          ,le.populated_mailing_county_cnt
          ,le.populated_phone_number_cnt
          ,le.populated_ultid_cnt
          ,le.populated_orgid_cnt
          ,le.populated_seleid_cnt
          ,le.populated_tin_cnt
          ,le.populated_email_address_cnt
          ,le.populated_appended_provider_id_cnt
          ,le.populated_lnpid_cnt
          ,le.populated_npi_cnt
          ,le.populated_ip_address_cnt
          ,le.populated_device_id_cnt
          ,le.populated_professional_id_cnt
          ,le.populated_bank_routing_number_1_cnt
          ,le.populated_bank_account_number_1_cnt
          ,le.populated_drivers_license_state_cnt
          ,le.populated_drivers_license_cnt
          ,le.populated_geo_lat_cnt
          ,le.populated_geo_long_cnt
          ,le.populated_reported_date_cnt
          ,le.populated_file_type_cnt
          ,le.populated_deceitful_confidence_cnt
          ,le.populated_reported_by_cnt
          ,le.populated_reason_description_cnt
          ,le.populated_event_type_1_cnt
          ,le.populated_event_entity_1_cnt,0);
      SELF.rulepcnt := CHOOSE(c
          ,le.populated_inqlog_id_pcnt
          ,le.populated_customer_id_pcnt
          ,le.populated_transaction_id_pcnt
          ,le.populated_date_of_transaction_pcnt
          ,le.populated_household_id_pcnt
          ,le.populated_customer_person_id_pcnt
          ,le.populated_customer_program_pcnt
          ,le.populated_reason_for_transaction_activity_pcnt
          ,le.populated_inquiry_source_pcnt
          ,le.populated_customer_county_pcnt
          ,le.populated_customer_state_pcnt
          ,le.populated_customer_agency_vertical_type_pcnt
          ,le.populated_ssn_pcnt
          ,le.populated_dob_pcnt
          ,le.populated_rawlinkid_pcnt
          ,le.populated_raw_full_name_pcnt
          ,le.populated_raw_title_pcnt
          ,le.populated_raw_first_name_pcnt
          ,le.populated_raw_middle_name_pcnt
          ,le.populated_raw_last_name_pcnt
          ,le.populated_raw_orig_suffix_pcnt
          ,le.populated_full_address_pcnt
          ,le.populated_street_1_pcnt
          ,le.populated_city_pcnt
          ,le.populated_state_pcnt
          ,le.populated_zip_pcnt
          ,le.populated_county_pcnt
          ,le.populated_mailing_street_1_pcnt
          ,le.populated_mailing_city_pcnt
          ,le.populated_mailing_state_pcnt
          ,le.populated_mailing_zip_pcnt
          ,le.populated_mailing_county_pcnt
          ,le.populated_phone_number_pcnt
          ,le.populated_ultid_pcnt
          ,le.populated_orgid_pcnt
          ,le.populated_seleid_pcnt
          ,le.populated_tin_pcnt
          ,le.populated_email_address_pcnt
          ,le.populated_appended_provider_id_pcnt
          ,le.populated_lnpid_pcnt
          ,le.populated_npi_pcnt
          ,le.populated_ip_address_pcnt
          ,le.populated_device_id_pcnt
          ,le.populated_professional_id_pcnt
          ,le.populated_bank_routing_number_1_pcnt
          ,le.populated_bank_account_number_1_pcnt
          ,le.populated_drivers_license_state_pcnt
          ,le.populated_drivers_license_pcnt
          ,le.populated_geo_lat_pcnt
          ,le.populated_geo_long_pcnt
          ,le.populated_reported_date_pcnt
          ,le.populated_file_type_pcnt
          ,le.populated_deceitful_confidence_pcnt
          ,le.populated_reported_by_pcnt
          ,le.populated_reason_description_pcnt
          ,le.populated_event_type_1_pcnt
          ,le.populated_event_entity_1_pcnt,0);
      SELF.ErrorMessage := '';
    END;
    FieldPopStats := NORMALIZE(hygiene_summaryStats,57,xNormHygieneStats(LEFT,COUNTER,'POP'));

  // record count stats
    SALT311.ScrubsOrbitLayout xTotalRecs(hygiene_summaryStats le, STRING inRuleDesc) := TRANSFORM
      SELF.recordstotal := le.NumberOfRecords;
      SELF.processdate := Pdate;
      SELF.sourcecode := src;
      SELF.ruledesc := inRuleDesc;
      SELF.ErrorMessage := '';
      SELF.rulecnt := le.NumberOfRecords;
      SELF.rulepcnt := 0;
    END;
    TotalRecsStats := PROJECT(hygiene_summaryStats, xTotalRecs(LEFT, 'records:total_records:POP'));

    mod_Delta := Deltabase_Delta(prevDS, PROJECT(h, Deltabase_Layout_Deltabase));
    deltaHygieneSummary := mod_Delta.DifferenceSummary;
    DeltaFieldPopStats := NORMALIZE(deltaHygieneSummary(txt <> 'New'),57,xNormHygieneStats(LEFT,COUNTER,'DELTA'));
    deltaStatName(STRING inTxt) := IF(STD.Str.Find(inTxt, 'Updates_') > 0,
                                      'Updates:count_Updates:DELTA',
                                      TRIM(inTxt) + ':count_' + TRIM(inTxt) + ':DELTA');
    DeltaTotalRecsStats := PROJECT(deltaHygieneSummary(txt <> 'Updates_OldFile'), xTotalRecs(LEFT, deltaStatName(LEFT.txt)));
    DeltaStats := IF(COUNT(prevDS) > 0, DeltaFieldPopStats + DeltaTotalRecsStats);

    RETURN FieldErrorStats & FieldPopStats & TotalRecsStats & DeltaStats;
  END;
END;

EXPORT StandardStats(DATASET(Deltabase_Layout_Deltabase) inFile, BOOLEAN doErrorOverall = TRUE) := FUNCTION
  myTimeStamp := (UNSIGNED6)SALT311.Fn_Now('YYYYMMDDHHMMSS') : INDEPENDENT;
  expandedFile := FromNone(inFile).ExpandedInfile;
  mod_fromexpandedOverall := FromExpanded(expandedFile);
  scrubsSummaryOverall := mod_fromexpandedOverall.SummaryStats;

  SALT311.mod_StandardStatsTransforms.mac_scrubsSummaryStatsFieldErrTransform(Scrubs_FraudGov, Deltabase_Fields, 'RECORDOF(scrubsSummaryOverall)', '');
  scrubsSummaryOverall_Standard := NORMALIZE(scrubsSummaryOverall, (NumRulesFromFieldType + NumFieldsWithRules) * 4, xSummaryStats(LEFT, COUNTER, myTimeStamp, 'all', 'all'));

  allErrsOverall := mod_fromexpandedOverall.AllErrors;
  tErrsOverall := TABLE(DISTRIBUTE(allErrsOverall, HASH(FieldName, ErrorType)), {FieldName, ErrorType, FieldContents, cntExamples := COUNT(GROUP)}, FieldName, ErrorType, FieldContents, LOCAL);

  scrubsSummaryOverall_Standard_addErr   := IF(doErrorOverall,
                                               DENORMALIZE(SORT(DISTRIBUTE(scrubsSummaryOverall_Standard, HASH(field, ruletype)), field, ruletype, LOCAL),
  	                                                       SORT(tErrsOverall, FieldName, ErrorType, -cntExamples, FieldContents, LOCAL),
  	                                                       LEFT.field = RIGHT.FieldName AND LEFT.ruletype = RIGHT.ErrorType AND LEFT.MeasureType = 'CntRecs',
  	                                                       TRANSFORM(RECORDOF(LEFT),
  	                                                       SELF.dsExamples := LEFT.dsExamples & DATASET([{RIGHT.FieldContents, RIGHT.cntExamples, IF(LEFT.StatValue > 0, RIGHT.cntExamples/LEFT.StatValue * 100, 0)}], SALT311.Layout_Stats_Standard.Examples);
  	                                                       SELF := LEFT),
  	                                                       KEEP(10), LEFT OUTER, LOCAL, NOSORT));
  scrubsSummaryOverall_Standard_GeneralErrs := IF(doErrorOverall, SALT311.mod_StandardStatsTransforms.scrubsSummaryStatsGeneral(scrubsSummaryOverall,, myTimeStamp, 'all', 'all'));

  RETURN scrubsSummaryOverall_Standard_addErr & scrubsSummaryOverall_Standard_GeneralErrs;
END;
END;
//Import:Scrubs_FraudGov.Deltabase_BWR_Scrubs
//This is the code to execute in a builder window
#OPTION('multiplePersistInstances', FALSE);
#workunit('name','Scrubs_FraudGov.Deltabase_BWR_Scrubs - Checking field validity in a file - SALT V3.11.11');
IMPORT Scrubs_FraudGov,SALT311;
infile := Scrubs_FraudGov.Deltabase_In_Deltabase;
mod_scrubs := Scrubs_FraudGov.Deltabase_Scrubs;
expandedfile := mod_scrubs.FromNone(infile).ExpandedInfile;
fromexpandedGlobal := mod_scrubs.FromExpanded(expandedfile);
// Summary of errors found across all sources
summaryGlobal := fromexpandedGlobal.SummaryStats;
// Specific error values across any source
errsGlobal := fromexpandedGlobal.AllErrors;
standardStats := mod_scrubs.StandardStats(infile);
PARALLEL(
         OUTPUT(summaryGlobal, ALL, NAMED('ScrubsSummaryStats')),
         OUTPUT(ENTH(errsGlobal, 1000), ALL, NAMED('ScrubsErrs')),
         OUTPUT(standardStats, ALL, NAMED('StandardStats'))
        );
//Import:Scrubs_FraudGov.Deltabase_Fields
IMPORT SALT311;
EXPORT Deltabase_Fields := MODULE

EXPORT NumFields := 57;

// Processing for each FieldType
EXPORT SALT311.StrType FieldTypeName(UNSIGNED2 i) := CHOOSE(i,'invalid_alpha','invalid_alphanumeric','invalid_email','invalid_date','invalid_numeric','invalid_numeric_string','invalid_real','invalid_real_string','invalid_zip','invalid_state','invalid_ssn','invalid_phone','invalid_ip','invalid_name');
EXPORT FieldTypeNum(SALT311.StrType fn) := CASE(fn,'invalid_alpha' => 1,'invalid_alphanumeric' => 2,'invalid_email' => 3,'invalid_date' => 4,'invalid_numeric' => 5,'invalid_numeric_string' => 6,'invalid_real' => 7,'invalid_real_string' => 8,'invalid_zip' => 9,'invalid_state' => 10,'invalid_ssn' => 11,'invalid_phone' => 12,'invalid_ip' => 13,'invalid_name' => 14,0);

EXPORT MakeFT_invalid_alpha(SALT311.StrType s0) := FUNCTION
  s1 := SALT311.stringfilter(s0,'\\NABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_invalid_alpha(SALT311.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT311.StringFilter(s,'\\NABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'))));
EXPORT InValidMessageFT_invalid_alpha(UNSIGNED1 wh) := CHOOSE(wh,SALT311.HygieneErrors.NotInChars('\\NABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'),SALT311.HygieneErrors.Good);

EXPORT MakeFT_invalid_alphanumeric(SALT311.StrType s0) := FUNCTION
  s1 := SALT311.stringfilter(s0,'\\ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 <>{}[]-^=\'`!+&,./#()_'); // Only allow valid symbols
  s2 := SALT311.stringcleanspaces( SALT311.stringsubstituteout(s1,' <>{}[]-^=\'`!+&,./#()_',' ') ); // Insert spaces but avoid doubles
  RETURN  s2;
END;
EXPORT InValidFT_invalid_alphanumeric(SALT311.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT311.StringFilter(s,'\\ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 <>{}[]-^=\'`!+&,./#()_'))));
EXPORT InValidMessageFT_invalid_alphanumeric(UNSIGNED1 wh) := CHOOSE(wh,SALT311.HygieneErrors.NotInChars('\\ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 <>{}[]-^=\'`!+&,./#()_'),SALT311.HygieneErrors.Good);

EXPORT MakeFT_invalid_email(SALT311.StrType s0) := FUNCTION
  s1 := SALT311.stringfilter(s0,'\\-_.0123456789@ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_invalid_email(SALT311.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT311.StringFilter(s,'\\-_.0123456789@ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'))));
EXPORT InValidMessageFT_invalid_email(UNSIGNED1 wh) := CHOOSE(wh,SALT311.HygieneErrors.NotInChars('\\-_.0123456789@ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'),SALT311.HygieneErrors.Good);

EXPORT MakeFT_invalid_date(SALT311.StrType s0) := FUNCTION
  s1 := SALT311.stringfilter(s0,'\\N0123456789 ./:-'); // Only allow valid symbols
  s2 := SALT311.stringcleanspaces( SALT311.stringsubstituteout(s1,' ./:-',' ') ); // Insert spaces but avoid doubles
  s3 := TRIM(s2,LEFT); // Left trim
  RETURN  s3;
END;
EXPORT InValidFT_invalid_date(SALT311.StrType s) := WHICH(s[1]=' ' AND LENGTH(TRIM(s))>0,LENGTH(TRIM(s))<>LENGTH(TRIM(SALT311.StringFilter(s,'\\N0123456789 ./:-'))));
EXPORT InValidMessageFT_invalid_date(UNSIGNED1 wh) := CHOOSE(wh,SALT311.HygieneErrors.NotLeft,SALT311.HygieneErrors.NotInChars('\\N0123456789 ./:-'),SALT311.HygieneErrors.Good);

EXPORT MakeFT_invalid_numeric(SALT311.StrType s0) := FUNCTION
  s1 := SALT311.stringfilter(s0,'0123456789'); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_invalid_numeric(SALT311.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT311.StringFilter(s,'0123456789'))));
EXPORT InValidMessageFT_invalid_numeric(UNSIGNED1 wh) := CHOOSE(wh,SALT311.HygieneErrors.NotInChars('0123456789'),SALT311.HygieneErrors.Good);

EXPORT MakeFT_invalid_numeric_string(SALT311.StrType s0) := FUNCTION
  s1 := SALT311.stringfilter(s0,'\\N-0123456789'); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_invalid_numeric_string(SALT311.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT311.StringFilter(s,'\\N-0123456789'))));
EXPORT InValidMessageFT_invalid_numeric_string(UNSIGNED1 wh) := CHOOSE(wh,SALT311.HygieneErrors.NotInChars('\\N-0123456789'),SALT311.HygieneErrors.Good);

EXPORT MakeFT_invalid_real(SALT311.StrType s0) := FUNCTION
  s1 := SALT311.stringfilter(s0,'-.,0123456789'); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_invalid_real(SALT311.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT311.StringFilter(s,'-.,0123456789'))));
EXPORT InValidMessageFT_invalid_real(UNSIGNED1 wh) := CHOOSE(wh,SALT311.HygieneErrors.NotInChars('-.,0123456789'),SALT311.HygieneErrors.Good);

EXPORT MakeFT_invalid_real_string(SALT311.StrType s0) := FUNCTION
  s1 := SALT311.stringfilter(s0,'\\N-.,0123456789'); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_invalid_real_string(SALT311.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT311.StringFilter(s,'\\N-.,0123456789'))));
EXPORT InValidMessageFT_invalid_real_string(UNSIGNED1 wh) := CHOOSE(wh,SALT311.HygieneErrors.NotInChars('\\N-.,0123456789'),SALT311.HygieneErrors.Good);

EXPORT MakeFT_invalid_zip(SALT311.StrType s0) := FUNCTION
  s1 := SALT311.stringfilter(s0,'\\N-0123456789 -'); // Only allow valid symbols
  s2 := SALT311.stringcleanspaces( SALT311.stringsubstituteout(s1,' -',' ') ); // Insert spaces but avoid doubles
  s3 := TRIM(s2,LEFT); // Left trim
  RETURN  s3;
END;
EXPORT InValidFT_invalid_zip(SALT311.StrType s) := WHICH(s[1]=' ' AND LENGTH(TRIM(s))>0,LENGTH(TRIM(s))<>LENGTH(TRIM(SALT311.StringFilter(s,'\\N-0123456789 -'))),~(LENGTH(TRIM(s)) = 0 OR LENGTH(TRIM(s)) = 2 OR LENGTH(TRIM(s)) = 5 OR LENGTH(TRIM(s)) = 9 OR LENGTH(TRIM(s)) = 10));
EXPORT InValidMessageFT_invalid_zip(UNSIGNED1 wh) := CHOOSE(wh,SALT311.HygieneErrors.NotLeft,SALT311.HygieneErrors.NotInChars('\\N-0123456789 -'),SALT311.HygieneErrors.NotLength('0,2,5,9,10'),SALT311.HygieneErrors.Good);

EXPORT MakeFT_invalid_state(SALT311.StrType s0) := FUNCTION
  s1 := SALT311.stringfilter(s0,'\\ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'); // Only allow valid symbols
  s2 := TRIM(s1,LEFT); // Left trim
  RETURN  s2;
END;
EXPORT InValidFT_invalid_state(SALT311.StrType s) := WHICH(s[1]=' ' AND LENGTH(TRIM(s))>0,LENGTH(TRIM(s))<>LENGTH(TRIM(SALT311.StringFilter(s,'\\ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'))),~(LENGTH(TRIM(s)) = 0 OR LENGTH(TRIM(s)) = 2));
EXPORT InValidMessageFT_invalid_state(UNSIGNED1 wh) := CHOOSE(wh,SALT311.HygieneErrors.NotLeft,SALT311.HygieneErrors.NotInChars('\\ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'),SALT311.HygieneErrors.NotLength('0,2'),SALT311.HygieneErrors.Good);

EXPORT MakeFT_invalid_ssn(SALT311.StrType s0) := FUNCTION
  s1 := SALT311.stringfilter(s0,'\\N0123456789 -'); // Only allow valid symbols
  s2 := SALT311.stringcleanspaces( SALT311.stringsubstituteout(s1,' -',' ') ); // Insert spaces but avoid doubles
  s3 := TRIM(s2,LEFT); // Left trim
  RETURN  s3;
END;
EXPORT InValidFT_invalid_ssn(SALT311.StrType s) := WHICH(s[1]=' ' AND LENGTH(TRIM(s))>0,LENGTH(TRIM(s))<>LENGTH(TRIM(SALT311.StringFilter(s,'\\N0123456789 -'))),~(LENGTH(TRIM(s)) = 0 OR LENGTH(TRIM(s)) = 2 OR LENGTH(TRIM(s)) >= 9));
EXPORT InValidMessageFT_invalid_ssn(UNSIGNED1 wh) := CHOOSE(wh,SALT311.HygieneErrors.NotLeft,SALT311.HygieneErrors.NotInChars('\\N0123456789 -'),SALT311.HygieneErrors.NotLength('0,2,9..'),SALT311.HygieneErrors.Good);

EXPORT MakeFT_invalid_phone(SALT311.StrType s0) := FUNCTION
  s1 := SALT311.stringfilter(s0,'\\N0123456789 +#()-'); // Only allow valid symbols
  s2 := SALT311.stringcleanspaces( SALT311.stringsubstituteout(s1,' +#()-',' ') ); // Insert spaces but avoid doubles
  s3 := TRIM(s2,LEFT); // Left trim
  RETURN  s3;
END;
EXPORT InValidFT_invalid_phone(SALT311.StrType s) := WHICH(s[1]=' ' AND LENGTH(TRIM(s))>0,LENGTH(TRIM(s))<>LENGTH(TRIM(SALT311.StringFilter(s,'\\N0123456789 +#()-'))),~(LENGTH(TRIM(s)) = 0 OR LENGTH(TRIM(s)) = 2 OR LENGTH(TRIM(s)) >= 10));
EXPORT InValidMessageFT_invalid_phone(UNSIGNED1 wh) := CHOOSE(wh,SALT311.HygieneErrors.NotLeft,SALT311.HygieneErrors.NotInChars('\\N0123456789 +#()-'),SALT311.HygieneErrors.NotLength('0,2,10..'),SALT311.HygieneErrors.Good);

EXPORT MakeFT_invalid_ip(SALT311.StrType s0) := FUNCTION
  s1 := SALT311.stringfilter(s0,'\\N.x0123456789 .'); // Only allow valid symbols
  s2 := SALT311.stringcleanspaces( SALT311.stringsubstituteout(s1,' .',' ') ); // Insert spaces but avoid doubles
  s3 := TRIM(s2,LEFT); // Left trim
  RETURN  s3;
END;
EXPORT InValidFT_invalid_ip(SALT311.StrType s) := WHICH(s[1]=' ' AND LENGTH(TRIM(s))>0,LENGTH(TRIM(s))<>LENGTH(TRIM(SALT311.StringFilter(s,'\\N.x0123456789 .'))));
EXPORT InValidMessageFT_invalid_ip(UNSIGNED1 wh) := CHOOSE(wh,SALT311.HygieneErrors.NotLeft,SALT311.HygieneErrors.NotInChars('\\N.x0123456789 .'),SALT311.HygieneErrors.Good);

EXPORT MakeFT_invalid_name(SALT311.StrType s0) := FUNCTION
  s1 := SALT311.stringfilter(s0,'\\NABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz \','); // Only allow valid symbols
  s2 := SALT311.stringcleanspaces( SALT311.stringsubstituteout(s1,' \',',' ') ); // Insert spaces but avoid doubles
  s3 := TRIM(s2,LEFT); // Left trim
  RETURN  s3;
END;
EXPORT InValidFT_invalid_name(SALT311.StrType s) := WHICH(s[1]=' ' AND LENGTH(TRIM(s))>0,LENGTH(TRIM(s))<>LENGTH(TRIM(SALT311.StringFilter(s,'\\NABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz \','))));
EXPORT InValidMessageFT_invalid_name(UNSIGNED1 wh) := CHOOSE(wh,SALT311.HygieneErrors.NotLeft,SALT311.HygieneErrors.NotInChars('\\NABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz \','),SALT311.HygieneErrors.Good);


EXPORT SALT311.StrType FieldName(UNSIGNED2 i) := CHOOSE(i,'inqlog_id','customer_id','transaction_id','date_of_transaction','household_id','customer_person_id','customer_program','reason_for_transaction_activity','inquiry_source','customer_county','customer_state','customer_agency_vertical_type','ssn','dob','rawlinkid','raw_full_name','raw_title','raw_first_name','raw_middle_name','raw_last_name','raw_orig_suffix','full_address','street_1','city','state','zip','county','mailing_street_1','mailing_city','mailing_state','mailing_zip','mailing_county','phone_number','ultid','orgid','seleid','tin','email_address','appended_provider_id','lnpid','npi','ip_address','device_id','professional_id','bank_routing_number_1','bank_account_number_1','drivers_license_state','drivers_license','geo_lat','geo_long','reported_date','file_type','deceitful_confidence','reported_by','reason_description','event_type_1','event_entity_1');
EXPORT SALT311.StrType FlatName(UNSIGNED2 i) := CHOOSE(i,'inqlog_id','customer_id','transaction_id','date_of_transaction','household_id','customer_person_id','customer_program','reason_for_transaction_activity','inquiry_source','customer_county','customer_state','customer_agency_vertical_type','ssn','dob','rawlinkid','raw_full_name','raw_title','raw_first_name','raw_middle_name','raw_last_name','raw_orig_suffix','full_address','street_1','city','state','zip','county','mailing_street_1','mailing_city','mailing_state','mailing_zip','mailing_county','phone_number','ultid','orgid','seleid','tin','email_address','appended_provider_id','lnpid','npi','ip_address','device_id','professional_id','bank_routing_number_1','bank_account_number_1','drivers_license_state','drivers_license','geo_lat','geo_long','reported_date','file_type','deceitful_confidence','reported_by','reason_description','event_type_1','event_entity_1');
EXPORT FieldNum(SALT311.StrType fn) := CASE(fn,'inqlog_id' => 0,'customer_id' => 1,'transaction_id' => 2,'date_of_transaction' => 3,'household_id' => 4,'customer_person_id' => 5,'customer_program' => 6,'reason_for_transaction_activity' => 7,'inquiry_source' => 8,'customer_county' => 9,'customer_state' => 10,'customer_agency_vertical_type' => 11,'ssn' => 12,'dob' => 13,'rawlinkid' => 14,'raw_full_name' => 15,'raw_title' => 16,'raw_first_name' => 17,'raw_middle_name' => 18,'raw_last_name' => 19,'raw_orig_suffix' => 20,'full_address' => 21,'street_1' => 22,'city' => 23,'state' => 24,'zip' => 25,'county' => 26,'mailing_street_1' => 27,'mailing_city' => 28,'mailing_state' => 29,'mailing_zip' => 30,'mailing_county' => 31,'phone_number' => 32,'ultid' => 33,'orgid' => 34,'seleid' => 35,'tin' => 36,'email_address' => 37,'appended_provider_id' => 38,'lnpid' => 39,'npi' => 40,'ip_address' => 41,'device_id' => 42,'professional_id' => 43,'bank_routing_number_1' => 44,'bank_account_number_1' => 45,'drivers_license_state' => 46,'drivers_license' => 47,'geo_lat' => 48,'geo_long' => 49,'reported_date' => 50,'file_type' => 51,'deceitful_confidence' => 52,'reported_by' => 53,'reason_description' => 54,'event_type_1' => 55,'event_entity_1' => 56,0);
EXPORT SET OF SALT311.StrType FieldRules(UNSIGNED2 i) := CHOOSE(i
EXPORT BOOLEAN InBaseLayout(UNSIGNED2 i) := CHOOSE(i,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,FALSE);

//Individual field level validation


EXPORT Make_inqlog_id(SALT311.StrType s0) := MakeFT_invalid_numeric(s0);
EXPORT InValid_inqlog_id(SALT311.StrType s) := InValidFT_invalid_numeric(s);
EXPORT InValidMessage_inqlog_id(UNSIGNED1 wh) := InValidMessageFT_invalid_numeric(wh);


EXPORT Make_customer_id(SALT311.StrType s0) := MakeFT_invalid_numeric_string(s0);
EXPORT InValid_customer_id(SALT311.StrType s) := InValidFT_invalid_numeric_string(s);
EXPORT InValidMessage_customer_id(UNSIGNED1 wh) := InValidMessageFT_invalid_numeric_string(wh);


EXPORT Make_transaction_id(SALT311.StrType s0) := MakeFT_invalid_alphanumeric(s0);
EXPORT InValid_transaction_id(SALT311.StrType s) := InValidFT_invalid_alphanumeric(s);
EXPORT InValidMessage_transaction_id(UNSIGNED1 wh) := InValidMessageFT_invalid_alphanumeric(wh);


EXPORT Make_date_of_transaction(SALT311.StrType s0) := MakeFT_invalid_date(s0);
EXPORT InValid_date_of_transaction(SALT311.StrType s) := InValidFT_invalid_date(s);
EXPORT InValidMessage_date_of_transaction(UNSIGNED1 wh) := InValidMessageFT_invalid_date(wh);


EXPORT Make_household_id(SALT311.StrType s0) := MakeFT_invalid_alphanumeric(s0);
EXPORT InValid_household_id(SALT311.StrType s) := InValidFT_invalid_alphanumeric(s);
EXPORT InValidMessage_household_id(UNSIGNED1 wh) := InValidMessageFT_invalid_alphanumeric(wh);


EXPORT Make_customer_person_id(SALT311.StrType s0) := MakeFT_invalid_alphanumeric(s0);
EXPORT InValid_customer_person_id(SALT311.StrType s) := InValidFT_invalid_alphanumeric(s);
EXPORT InValidMessage_customer_person_id(UNSIGNED1 wh) := InValidMessageFT_invalid_alphanumeric(wh);


EXPORT Make_customer_program(SALT311.StrType s0) := MakeFT_invalid_alpha(s0);
EXPORT InValid_customer_program(SALT311.StrType s) := InValidFT_invalid_alpha(s);
EXPORT InValidMessage_customer_program(UNSIGNED1 wh) := InValidMessageFT_invalid_alpha(wh);


EXPORT Make_reason_for_transaction_activity(SALT311.StrType s0) := MakeFT_invalid_alphanumeric(s0);
EXPORT InValid_reason_for_transaction_activity(SALT311.StrType s) := InValidFT_invalid_alphanumeric(s);
EXPORT InValidMessage_reason_for_transaction_activity(UNSIGNED1 wh) := InValidMessageFT_invalid_alphanumeric(wh);


EXPORT Make_inquiry_source(SALT311.StrType s0) := MakeFT_invalid_alphanumeric(s0);
EXPORT InValid_inquiry_source(SALT311.StrType s) := InValidFT_invalid_alphanumeric(s);
EXPORT InValidMessage_inquiry_source(UNSIGNED1 wh) := InValidMessageFT_invalid_alphanumeric(wh);


EXPORT Make_customer_county(SALT311.StrType s0) := MakeFT_invalid_alphanumeric(s0);
EXPORT InValid_customer_county(SALT311.StrType s) := InValidFT_invalid_alphanumeric(s);
EXPORT InValidMessage_customer_county(UNSIGNED1 wh) := InValidMessageFT_invalid_alphanumeric(wh);


EXPORT Make_customer_state(SALT311.StrType s0) := MakeFT_invalid_state(s0);
EXPORT InValid_customer_state(SALT311.StrType s) := InValidFT_invalid_state(s);
EXPORT InValidMessage_customer_state(UNSIGNED1 wh) := InValidMessageFT_invalid_state(wh);


EXPORT Make_customer_agency_vertical_type(SALT311.StrType s0) := MakeFT_invalid_alphanumeric(s0);
EXPORT InValid_customer_agency_vertical_type(SALT311.StrType s) := InValidFT_invalid_alphanumeric(s);
EXPORT InValidMessage_customer_agency_vertical_type(UNSIGNED1 wh) := InValidMessageFT_invalid_alphanumeric(wh);


EXPORT Make_ssn(SALT311.StrType s0) := MakeFT_invalid_ssn(s0);
EXPORT InValid_ssn(SALT311.StrType s) := InValidFT_invalid_ssn(s);
EXPORT InValidMessage_ssn(UNSIGNED1 wh) := InValidMessageFT_invalid_ssn(wh);


EXPORT Make_dob(SALT311.StrType s0) := MakeFT_invalid_date(s0);
EXPORT InValid_dob(SALT311.StrType s) := InValidFT_invalid_date(s);
EXPORT InValidMessage_dob(UNSIGNED1 wh) := InValidMessageFT_invalid_date(wh);


EXPORT Make_rawlinkid(SALT311.StrType s0) := MakeFT_invalid_numeric(s0);
EXPORT InValid_rawlinkid(SALT311.StrType s) := InValidFT_invalid_numeric(s);
EXPORT InValidMessage_rawlinkid(UNSIGNED1 wh) := InValidMessageFT_invalid_numeric(wh);


EXPORT Make_raw_full_name(SALT311.StrType s0) := MakeFT_invalid_name(s0);
EXPORT InValid_raw_full_name(SALT311.StrType s) := InValidFT_invalid_name(s);
EXPORT InValidMessage_raw_full_name(UNSIGNED1 wh) := InValidMessageFT_invalid_name(wh);


EXPORT Make_raw_title(SALT311.StrType s0) := MakeFT_invalid_alphanumeric(s0);
EXPORT InValid_raw_title(SALT311.StrType s) := InValidFT_invalid_alphanumeric(s);
EXPORT InValidMessage_raw_title(UNSIGNED1 wh) := InValidMessageFT_invalid_alphanumeric(wh);


EXPORT Make_raw_first_name(SALT311.StrType s0) := MakeFT_invalid_name(s0);
EXPORT InValid_raw_first_name(SALT311.StrType s) := InValidFT_invalid_name(s);
EXPORT InValidMessage_raw_first_name(UNSIGNED1 wh) := InValidMessageFT_invalid_name(wh);


EXPORT Make_raw_middle_name(SALT311.StrType s0) := MakeFT_invalid_name(s0);
EXPORT InValid_raw_middle_name(SALT311.StrType s) := InValidFT_invalid_name(s);
EXPORT InValidMessage_raw_middle_name(UNSIGNED1 wh) := InValidMessageFT_invalid_name(wh);


EXPORT Make_raw_last_name(SALT311.StrType s0) := MakeFT_invalid_name(s0);
EXPORT InValid_raw_last_name(SALT311.StrType s) := InValidFT_invalid_name(s);
EXPORT InValidMessage_raw_last_name(UNSIGNED1 wh) := InValidMessageFT_invalid_name(wh);


EXPORT Make_raw_orig_suffix(SALT311.StrType s0) := MakeFT_invalid_alphanumeric(s0);
EXPORT InValid_raw_orig_suffix(SALT311.StrType s) := InValidFT_invalid_alphanumeric(s);
EXPORT InValidMessage_raw_orig_suffix(UNSIGNED1 wh) := InValidMessageFT_invalid_alphanumeric(wh);


EXPORT Make_full_address(SALT311.StrType s0) := MakeFT_invalid_alphanumeric(s0);
EXPORT InValid_full_address(SALT311.StrType s) := InValidFT_invalid_alphanumeric(s);
EXPORT InValidMessage_full_address(UNSIGNED1 wh) := InValidMessageFT_invalid_alphanumeric(wh);


EXPORT Make_street_1(SALT311.StrType s0) := MakeFT_invalid_alphanumeric(s0);
EXPORT InValid_street_1(SALT311.StrType s) := InValidFT_invalid_alphanumeric(s);
EXPORT InValidMessage_street_1(UNSIGNED1 wh) := InValidMessageFT_invalid_alphanumeric(wh);


EXPORT Make_city(SALT311.StrType s0) := MakeFT_invalid_name(s0);
EXPORT InValid_city(SALT311.StrType s) := InValidFT_invalid_name(s);
EXPORT InValidMessage_city(UNSIGNED1 wh) := InValidMessageFT_invalid_name(wh);


EXPORT Make_state(SALT311.StrType s0) := MakeFT_invalid_state(s0);
EXPORT InValid_state(SALT311.StrType s) := InValidFT_invalid_state(s);
EXPORT InValidMessage_state(UNSIGNED1 wh) := InValidMessageFT_invalid_state(wh);


EXPORT Make_zip(SALT311.StrType s0) := MakeFT_invalid_zip(s0);
EXPORT InValid_zip(SALT311.StrType s) := InValidFT_invalid_zip(s);
EXPORT InValidMessage_zip(UNSIGNED1 wh) := InValidMessageFT_invalid_zip(wh);


EXPORT Make_county(SALT311.StrType s0) := MakeFT_invalid_alphanumeric(s0);
EXPORT InValid_county(SALT311.StrType s) := InValidFT_invalid_alphanumeric(s);
EXPORT InValidMessage_county(UNSIGNED1 wh) := InValidMessageFT_invalid_alphanumeric(wh);


EXPORT Make_mailing_street_1(SALT311.StrType s0) := MakeFT_invalid_alphanumeric(s0);
EXPORT InValid_mailing_street_1(SALT311.StrType s) := InValidFT_invalid_alphanumeric(s);
EXPORT InValidMessage_mailing_street_1(UNSIGNED1 wh) := InValidMessageFT_invalid_alphanumeric(wh);


EXPORT Make_mailing_city(SALT311.StrType s0) := MakeFT_invalid_name(s0);
EXPORT InValid_mailing_city(SALT311.StrType s) := InValidFT_invalid_name(s);
EXPORT InValidMessage_mailing_city(UNSIGNED1 wh) := InValidMessageFT_invalid_name(wh);


EXPORT Make_mailing_state(SALT311.StrType s0) := MakeFT_invalid_state(s0);
EXPORT InValid_mailing_state(SALT311.StrType s) := InValidFT_invalid_state(s);
EXPORT InValidMessage_mailing_state(UNSIGNED1 wh) := InValidMessageFT_invalid_state(wh);


EXPORT Make_mailing_zip(SALT311.StrType s0) := MakeFT_invalid_zip(s0);
EXPORT InValid_mailing_zip(SALT311.StrType s) := InValidFT_invalid_zip(s);
EXPORT InValidMessage_mailing_zip(UNSIGNED1 wh) := InValidMessageFT_invalid_zip(wh);


EXPORT Make_mailing_county(SALT311.StrType s0) := MakeFT_invalid_alphanumeric(s0);
EXPORT InValid_mailing_county(SALT311.StrType s) := InValidFT_invalid_alphanumeric(s);
EXPORT InValidMessage_mailing_county(UNSIGNED1 wh) := InValidMessageFT_invalid_alphanumeric(wh);


EXPORT Make_phone_number(SALT311.StrType s0) := MakeFT_invalid_phone(s0);
EXPORT InValid_phone_number(SALT311.StrType s) := InValidFT_invalid_phone(s);
EXPORT InValidMessage_phone_number(UNSIGNED1 wh) := InValidMessageFT_invalid_phone(wh);


EXPORT Make_ultid(SALT311.StrType s0) := MakeFT_invalid_numeric(s0);
EXPORT InValid_ultid(SALT311.StrType s) := InValidFT_invalid_numeric(s);
EXPORT InValidMessage_ultid(UNSIGNED1 wh) := InValidMessageFT_invalid_numeric(wh);


EXPORT Make_orgid(SALT311.StrType s0) := MakeFT_invalid_numeric(s0);
EXPORT InValid_orgid(SALT311.StrType s) := InValidFT_invalid_numeric(s);
EXPORT InValidMessage_orgid(UNSIGNED1 wh) := InValidMessageFT_invalid_numeric(wh);


EXPORT Make_seleid(SALT311.StrType s0) := MakeFT_invalid_numeric(s0);
EXPORT InValid_seleid(SALT311.StrType s) := InValidFT_invalid_numeric(s);
EXPORT InValidMessage_seleid(UNSIGNED1 wh) := InValidMessageFT_invalid_numeric(wh);


EXPORT Make_tin(SALT311.StrType s0) := MakeFT_invalid_alphanumeric(s0);
EXPORT InValid_tin(SALT311.StrType s) := InValidFT_invalid_alphanumeric(s);
EXPORT InValidMessage_tin(UNSIGNED1 wh) := InValidMessageFT_invalid_alphanumeric(wh);


EXPORT Make_email_address(SALT311.StrType s0) := MakeFT_invalid_email(s0);
EXPORT InValid_email_address(SALT311.StrType s) := InValidFT_invalid_email(s);
EXPORT InValidMessage_email_address(UNSIGNED1 wh) := InValidMessageFT_invalid_email(wh);


EXPORT Make_appended_provider_id(SALT311.StrType s0) := MakeFT_invalid_numeric(s0);
EXPORT InValid_appended_provider_id(SALT311.StrType s) := InValidFT_invalid_numeric(s);
EXPORT InValidMessage_appended_provider_id(UNSIGNED1 wh) := InValidMessageFT_invalid_numeric(wh);


EXPORT Make_lnpid(SALT311.StrType s0) := MakeFT_invalid_numeric(s0);
EXPORT InValid_lnpid(SALT311.StrType s) := InValidFT_invalid_numeric(s);
EXPORT InValidMessage_lnpid(UNSIGNED1 wh) := InValidMessageFT_invalid_numeric(wh);


EXPORT Make_npi(SALT311.StrType s0) := MakeFT_invalid_alphanumeric(s0);
EXPORT InValid_npi(SALT311.StrType s) := InValidFT_invalid_alphanumeric(s);
EXPORT InValidMessage_npi(UNSIGNED1 wh) := InValidMessageFT_invalid_alphanumeric(wh);


EXPORT Make_ip_address(SALT311.StrType s0) := MakeFT_invalid_ip(s0);
EXPORT InValid_ip_address(SALT311.StrType s) := InValidFT_invalid_ip(s);
EXPORT InValidMessage_ip_address(UNSIGNED1 wh) := InValidMessageFT_invalid_ip(wh);


EXPORT Make_device_id(SALT311.StrType s0) := MakeFT_invalid_alphanumeric(s0);
EXPORT InValid_device_id(SALT311.StrType s) := InValidFT_invalid_alphanumeric(s);
EXPORT InValidMessage_device_id(UNSIGNED1 wh) := InValidMessageFT_invalid_alphanumeric(wh);


EXPORT Make_professional_id(SALT311.StrType s0) := MakeFT_invalid_alphanumeric(s0);
EXPORT InValid_professional_id(SALT311.StrType s) := InValidFT_invalid_alphanumeric(s);
EXPORT InValidMessage_professional_id(UNSIGNED1 wh) := InValidMessageFT_invalid_alphanumeric(wh);


EXPORT Make_bank_routing_number_1(SALT311.StrType s0) := MakeFT_invalid_alphanumeric(s0);
EXPORT InValid_bank_routing_number_1(SALT311.StrType s) := InValidFT_invalid_alphanumeric(s);
EXPORT InValidMessage_bank_routing_number_1(UNSIGNED1 wh) := InValidMessageFT_invalid_alphanumeric(wh);


EXPORT Make_bank_account_number_1(SALT311.StrType s0) := MakeFT_invalid_alphanumeric(s0);
EXPORT InValid_bank_account_number_1(SALT311.StrType s) := InValidFT_invalid_alphanumeric(s);
EXPORT InValidMessage_bank_account_number_1(UNSIGNED1 wh) := InValidMessageFT_invalid_alphanumeric(wh);


EXPORT Make_drivers_license_state(SALT311.StrType s0) := MakeFT_invalid_alphanumeric(s0);
EXPORT InValid_drivers_license_state(SALT311.StrType s) := InValidFT_invalid_alphanumeric(s);
EXPORT InValidMessage_drivers_license_state(UNSIGNED1 wh) := InValidMessageFT_invalid_alphanumeric(wh);


EXPORT Make_drivers_license(SALT311.StrType s0) := MakeFT_invalid_alphanumeric(s0);
EXPORT InValid_drivers_license(SALT311.StrType s) := InValidFT_invalid_alphanumeric(s);
EXPORT InValidMessage_drivers_license(UNSIGNED1 wh) := InValidMessageFT_invalid_alphanumeric(wh);


EXPORT Make_geo_lat(SALT311.StrType s0) := MakeFT_invalid_real_string(s0);
EXPORT InValid_geo_lat(SALT311.StrType s) := InValidFT_invalid_real_string(s);
EXPORT InValidMessage_geo_lat(UNSIGNED1 wh) := InValidMessageFT_invalid_real_string(wh);


EXPORT Make_geo_long(SALT311.StrType s0) := MakeFT_invalid_real_string(s0);
EXPORT InValid_geo_long(SALT311.StrType s) := InValidFT_invalid_real_string(s);
EXPORT InValidMessage_geo_long(UNSIGNED1 wh) := InValidMessageFT_invalid_real_string(wh);


EXPORT Make_reported_date(SALT311.StrType s0) := MakeFT_invalid_date(s0);
EXPORT InValid_reported_date(SALT311.StrType s) := InValidFT_invalid_date(s);
EXPORT InValidMessage_reported_date(UNSIGNED1 wh) := InValidMessageFT_invalid_date(wh);


EXPORT Make_file_type(SALT311.StrType s0) := MakeFT_invalid_numeric(s0);
EXPORT InValid_file_type(SALT311.StrType s) := InValidFT_invalid_numeric(s);
EXPORT InValidMessage_file_type(UNSIGNED1 wh) := InValidMessageFT_invalid_numeric(wh);


EXPORT Make_deceitful_confidence(SALT311.StrType s0) := MakeFT_invalid_numeric_string(s0);
EXPORT InValid_deceitful_confidence(SALT311.StrType s) := InValidFT_invalid_numeric_string(s);
EXPORT InValidMessage_deceitful_confidence(UNSIGNED1 wh) := InValidMessageFT_invalid_numeric_string(wh);


EXPORT Make_reported_by(SALT311.StrType s0) := MakeFT_invalid_alphanumeric(s0);
EXPORT InValid_reported_by(SALT311.StrType s) := InValidFT_invalid_alphanumeric(s);
EXPORT InValidMessage_reported_by(UNSIGNED1 wh) := InValidMessageFT_invalid_alphanumeric(wh);


EXPORT Make_reason_description(SALT311.StrType s0) := MakeFT_invalid_alphanumeric(s0);
EXPORT InValid_reason_description(SALT311.StrType s) := InValidFT_invalid_alphanumeric(s);
EXPORT InValidMessage_reason_description(UNSIGNED1 wh) := InValidMessageFT_invalid_alphanumeric(wh);


EXPORT Make_event_type_1(SALT311.StrType s0) := MakeFT_invalid_numeric_string(s0);
EXPORT InValid_event_type_1(SALT311.StrType s) := InValidFT_invalid_numeric_string(s);
EXPORT InValidMessage_event_type_1(UNSIGNED1 wh) := InValidMessageFT_invalid_numeric_string(wh);


EXPORT Make_event_entity_1(SALT311.StrType s0) := MakeFT_invalid_alphanumeric(s0);
EXPORT InValid_event_entity_1(SALT311.StrType s) := InValidFT_invalid_alphanumeric(s);
EXPORT InValidMessage_event_entity_1(UNSIGNED1 wh) := InValidMessageFT_invalid_alphanumeric(wh);

// This macro will compute and count field level differences based upon a pivot expression
export MAC_CountDifferencesByPivot(in_left,in_right,pivot_exp,bad_pivots,out_counts) := MACRO
  IMPORT SALT311,Scrubs_FraudGov;
//Find those highly occuring pivot values to remove them from consideration
#uniquename(tr)
  %tr% := table(in_left+in_right,{ val := pivot_exp; });
#uniquename(r1)
  %r1% := record
    %tr%.val;    unsigned Cnt := COUNT(GROUP);
  end;
#uniquename(t1)
  %t1% := table(%tr%,%r1%,val,local); // Pre-aggregate before distribute
#uniquename(r2)
  %r2% := record
    %t1%.val;    unsigned Cnt := SUM(GROUP,%t1%.Cnt);
  end;
#uniquename(t2)
  %t2% := table(%t1%,%r2%,val); // Now do global aggregate
Bad_Pivots := %t2%(Cnt>100);
#uniquename(dl)
  %dl% := RECORD
    BOOLEAN Diff_inqlog_id;
    BOOLEAN Diff_customer_id;
    BOOLEAN Diff_transaction_id;
    BOOLEAN Diff_date_of_transaction;
    BOOLEAN Diff_household_id;
    BOOLEAN Diff_customer_person_id;
    BOOLEAN Diff_customer_program;
    BOOLEAN Diff_reason_for_transaction_activity;
    BOOLEAN Diff_inquiry_source;
    BOOLEAN Diff_customer_county;
    BOOLEAN Diff_customer_state;
    BOOLEAN Diff_customer_agency_vertical_type;
    BOOLEAN Diff_ssn;
    BOOLEAN Diff_dob;
    BOOLEAN Diff_rawlinkid;
    BOOLEAN Diff_raw_full_name;
    BOOLEAN Diff_raw_title;
    BOOLEAN Diff_raw_first_name;
    BOOLEAN Diff_raw_middle_name;
    BOOLEAN Diff_raw_last_name;
    BOOLEAN Diff_raw_orig_suffix;
    BOOLEAN Diff_full_address;
    BOOLEAN Diff_street_1;
    BOOLEAN Diff_city;
    BOOLEAN Diff_state;
    BOOLEAN Diff_zip;
    BOOLEAN Diff_county;
    BOOLEAN Diff_mailing_street_1;
    BOOLEAN Diff_mailing_city;
    BOOLEAN Diff_mailing_state;
    BOOLEAN Diff_mailing_zip;
    BOOLEAN Diff_mailing_county;
    BOOLEAN Diff_phone_number;
    BOOLEAN Diff_ultid;
    BOOLEAN Diff_orgid;
    BOOLEAN Diff_seleid;
    BOOLEAN Diff_tin;
    BOOLEAN Diff_email_address;
    BOOLEAN Diff_appended_provider_id;
    BOOLEAN Diff_lnpid;
    BOOLEAN Diff_npi;
    BOOLEAN Diff_ip_address;
    BOOLEAN Diff_device_id;
    BOOLEAN Diff_professional_id;
    BOOLEAN Diff_bank_routing_number_1;
    BOOLEAN Diff_bank_account_number_1;
    BOOLEAN Diff_drivers_license_state;
    BOOLEAN Diff_drivers_license;
    BOOLEAN Diff_geo_lat;
    BOOLEAN Diff_geo_long;
    BOOLEAN Diff_reported_date;
    BOOLEAN Diff_file_type;
    BOOLEAN Diff_deceitful_confidence;
    BOOLEAN Diff_reported_by;
    BOOLEAN Diff_reason_description;
    BOOLEAN Diff_event_type_1;
    BOOLEAN Diff_event_entity_1;
    UNSIGNED Num_Diffs;
    SALT311.StrType Val {MAXLENGTH(1024)};
  END;
#uniquename(fd)
  %dl% %fd%(in_left le,in_right ri) := TRANSFORM
    SELF.Diff_inqlog_id := le.inqlog_id <> ri.inqlog_id;
    SELF.Diff_customer_id := le.customer_id <> ri.customer_id;
    SELF.Diff_transaction_id := le.transaction_id <> ri.transaction_id;
    SELF.Diff_date_of_transaction := le.date_of_transaction <> ri.date_of_transaction;
    SELF.Diff_household_id := le.household_id <> ri.household_id;
    SELF.Diff_customer_person_id := le.customer_person_id <> ri.customer_person_id;
    SELF.Diff_customer_program := le.customer_program <> ri.customer_program;
    SELF.Diff_reason_for_transaction_activity := le.reason_for_transaction_activity <> ri.reason_for_transaction_activity;
    SELF.Diff_inquiry_source := le.inquiry_source <> ri.inquiry_source;
    SELF.Diff_customer_county := le.customer_county <> ri.customer_county;
    SELF.Diff_customer_state := le.customer_state <> ri.customer_state;
    SELF.Diff_customer_agency_vertical_type := le.customer_agency_vertical_type <> ri.customer_agency_vertical_type;
    SELF.Diff_ssn := le.ssn <> ri.ssn;
    SELF.Diff_dob := le.dob <> ri.dob;
    SELF.Diff_rawlinkid := le.rawlinkid <> ri.rawlinkid;
    SELF.Diff_raw_full_name := le.raw_full_name <> ri.raw_full_name;
    SELF.Diff_raw_title := le.raw_title <> ri.raw_title;
    SELF.Diff_raw_first_name := le.raw_first_name <> ri.raw_first_name;
    SELF.Diff_raw_middle_name := le.raw_middle_name <> ri.raw_middle_name;
    SELF.Diff_raw_last_name := le.raw_last_name <> ri.raw_last_name;
    SELF.Diff_raw_orig_suffix := le.raw_orig_suffix <> ri.raw_orig_suffix;
    SELF.Diff_full_address := le.full_address <> ri.full_address;
    SELF.Diff_street_1 := le.street_1 <> ri.street_1;
    SELF.Diff_city := le.city <> ri.city;
    SELF.Diff_state := le.state <> ri.state;
    SELF.Diff_zip := le.zip <> ri.zip;
    SELF.Diff_county := le.county <> ri.county;
    SELF.Diff_mailing_street_1 := le.mailing_street_1 <> ri.mailing_street_1;
    SELF.Diff_mailing_city := le.mailing_city <> ri.mailing_city;
    SELF.Diff_mailing_state := le.mailing_state <> ri.mailing_state;
    SELF.Diff_mailing_zip := le.mailing_zip <> ri.mailing_zip;
    SELF.Diff_mailing_county := le.mailing_county <> ri.mailing_county;
    SELF.Diff_phone_number := le.phone_number <> ri.phone_number;
    SELF.Diff_ultid := le.ultid <> ri.ultid;
    SELF.Diff_orgid := le.orgid <> ri.orgid;
    SELF.Diff_seleid := le.seleid <> ri.seleid;
    SELF.Diff_tin := le.tin <> ri.tin;
    SELF.Diff_email_address := le.email_address <> ri.email_address;
    SELF.Diff_appended_provider_id := le.appended_provider_id <> ri.appended_provider_id;
    SELF.Diff_lnpid := le.lnpid <> ri.lnpid;
    SELF.Diff_npi := le.npi <> ri.npi;
    SELF.Diff_ip_address := le.ip_address <> ri.ip_address;
    SELF.Diff_device_id := le.device_id <> ri.device_id;
    SELF.Diff_professional_id := le.professional_id <> ri.professional_id;
    SELF.Diff_bank_routing_number_1 := le.bank_routing_number_1 <> ri.bank_routing_number_1;
    SELF.Diff_bank_account_number_1 := le.bank_account_number_1 <> ri.bank_account_number_1;
    SELF.Diff_drivers_license_state := le.drivers_license_state <> ri.drivers_license_state;
    SELF.Diff_drivers_license := le.drivers_license <> ri.drivers_license;
    SELF.Diff_geo_lat := le.geo_lat <> ri.geo_lat;
    SELF.Diff_geo_long := le.geo_long <> ri.geo_long;
    SELF.Diff_reported_date := le.reported_date <> ri.reported_date;
    SELF.Diff_file_type := le.file_type <> ri.file_type;
    SELF.Diff_deceitful_confidence := le.deceitful_confidence <> ri.deceitful_confidence;
    SELF.Diff_reported_by := le.reported_by <> ri.reported_by;
    SELF.Diff_reason_description := le.reason_description <> ri.reason_description;
    SELF.Diff_event_type_1 := le.event_type_1 <> ri.event_type_1;
    SELF.Diff_event_entity_1 := le.event_entity_1 <> ri.event_entity_1;
    SELF.Val := (SALT311.StrType)evaluate(le,pivot_exp);
    SELF.Num_Diffs := 0+ IF( SELF.Diff_inqlog_id,1,0)+ IF( SELF.Diff_customer_id,1,0)+ IF( SELF.Diff_transaction_id,1,0)+ IF( SELF.Diff_date_of_transaction,1,0)+ IF( SELF.Diff_household_id,1,0)+ IF( SELF.Diff_customer_person_id,1,0)+ IF( SELF.Diff_customer_program,1,0)+ IF( SELF.Diff_reason_for_transaction_activity,1,0)+ IF( SELF.Diff_inquiry_source,1,0)+ IF( SELF.Diff_customer_county,1,0)+ IF( SELF.Diff_customer_state,1,0)+ IF( SELF.Diff_customer_agency_vertical_type,1,0)+ IF( SELF.Diff_ssn,1,0)+ IF( SELF.Diff_dob,1,0)+ IF( SELF.Diff_rawlinkid,1,0)+ IF( SELF.Diff_raw_full_name,1,0)+ IF( SELF.Diff_raw_title,1,0)+ IF( SELF.Diff_raw_first_name,1,0)+ IF( SELF.Diff_raw_middle_name,1,0)+ IF( SELF.Diff_raw_last_name,1,0)+ IF( SELF.Diff_raw_orig_suffix,1,0)+ IF( SELF.Diff_full_address,1,0)+ IF( SELF.Diff_street_1,1,0)+ IF( SELF.Diff_city,1,0)+ IF( SELF.Diff_state,1,0)+ IF( SELF.Diff_zip,1,0)+ IF( SELF.Diff_county,1,0)+ IF( SELF.Diff_mailing_street_1,1,0)+ IF( SELF.Diff_mailing_city,1,0)+ IF( SELF.Diff_mailing_state,1,0)+ IF( SELF.Diff_mailing_zip,1,0)+ IF( SELF.Diff_mailing_county,1,0)+ IF( SELF.Diff_phone_number,1,0)+ IF( SELF.Diff_ultid,1,0)+ IF( SELF.Diff_orgid,1,0)+ IF( SELF.Diff_seleid,1,0)+ IF( SELF.Diff_tin,1,0)+ IF( SELF.Diff_email_address,1,0)+ IF( SELF.Diff_appended_provider_id,1,0)+ IF( SELF.Diff_lnpid,1,0)+ IF( SELF.Diff_npi,1,0)+ IF( SELF.Diff_ip_address,1,0)+ IF( SELF.Diff_device_id,1,0)+ IF( SELF.Diff_professional_id,1,0)+ IF( SELF.Diff_bank_routing_number_1,1,0)+ IF( SELF.Diff_bank_account_number_1,1,0)+ IF( SELF.Diff_drivers_license_state,1,0)+ IF( SELF.Diff_drivers_license,1,0)+ IF( SELF.Diff_geo_lat,1,0)+ IF( SELF.Diff_geo_long,1,0)+ IF( SELF.Diff_reported_date,1,0)+ IF( SELF.Diff_file_type,1,0)+ IF( SELF.Diff_deceitful_confidence,1,0)+ IF( SELF.Diff_reported_by,1,0)+ IF( SELF.Diff_reason_description,1,0)+ IF( SELF.Diff_event_type_1,1,0)+ IF( SELF.Diff_event_entity_1,1,0);
  END;
// Now need to remove bad pivots from comparison
#uniquename(L)
  %L% := JOIN(in_left,bad_pivots,evaluate(LEFT,pivot_exp)=right.val,transform(left),left only,lookup);
#uniquename(R)
  %R% := JOIN(in_right,bad_pivots,evaluate(LEFT,pivot_exp)=right.val,transform(left),left only,lookup);
#uniquename(DiffL)
  %DiffL% := JOIN(%L%,%R%,evaluate(left,pivot_exp)=evaluate(right,pivot_exp),%fd%(left,right),hash);
#uniquename(Closest)
  %Closest% := DEDUP(SORT(%DiffL%,Val,Num_Diffs,local),Val,local); // Join will have distributed by pivot_exp
#uniquename(AggRec)
  %AggRec% := RECORD
    Count_Diff_inqlog_id := COUNT(GROUP,%Closest%.Diff_inqlog_id);
    Count_Diff_customer_id := COUNT(GROUP,%Closest%.Diff_customer_id);
    Count_Diff_transaction_id := COUNT(GROUP,%Closest%.Diff_transaction_id);
    Count_Diff_date_of_transaction := COUNT(GROUP,%Closest%.Diff_date_of_transaction);
    Count_Diff_household_id := COUNT(GROUP,%Closest%.Diff_household_id);
    Count_Diff_customer_person_id := COUNT(GROUP,%Closest%.Diff_customer_person_id);
    Count_Diff_customer_program := COUNT(GROUP,%Closest%.Diff_customer_program);
    Count_Diff_reason_for_transaction_activity := COUNT(GROUP,%Closest%.Diff_reason_for_transaction_activity);
    Count_Diff_inquiry_source := COUNT(GROUP,%Closest%.Diff_inquiry_source);
    Count_Diff_customer_county := COUNT(GROUP,%Closest%.Diff_customer_county);
    Count_Diff_customer_state := COUNT(GROUP,%Closest%.Diff_customer_state);
    Count_Diff_customer_agency_vertical_type := COUNT(GROUP,%Closest%.Diff_customer_agency_vertical_type);
    Count_Diff_ssn := COUNT(GROUP,%Closest%.Diff_ssn);
    Count_Diff_dob := COUNT(GROUP,%Closest%.Diff_dob);
    Count_Diff_rawlinkid := COUNT(GROUP,%Closest%.Diff_rawlinkid);
    Count_Diff_raw_full_name := COUNT(GROUP,%Closest%.Diff_raw_full_name);
    Count_Diff_raw_title := COUNT(GROUP,%Closest%.Diff_raw_title);
    Count_Diff_raw_first_name := COUNT(GROUP,%Closest%.Diff_raw_first_name);
    Count_Diff_raw_middle_name := COUNT(GROUP,%Closest%.Diff_raw_middle_name);
    Count_Diff_raw_last_name := COUNT(GROUP,%Closest%.Diff_raw_last_name);
    Count_Diff_raw_orig_suffix := COUNT(GROUP,%Closest%.Diff_raw_orig_suffix);
    Count_Diff_full_address := COUNT(GROUP,%Closest%.Diff_full_address);
    Count_Diff_street_1 := COUNT(GROUP,%Closest%.Diff_street_1);
    Count_Diff_city := COUNT(GROUP,%Closest%.Diff_city);
    Count_Diff_state := COUNT(GROUP,%Closest%.Diff_state);
    Count_Diff_zip := COUNT(GROUP,%Closest%.Diff_zip);
    Count_Diff_county := COUNT(GROUP,%Closest%.Diff_county);
    Count_Diff_mailing_street_1 := COUNT(GROUP,%Closest%.Diff_mailing_street_1);
    Count_Diff_mailing_city := COUNT(GROUP,%Closest%.Diff_mailing_city);
    Count_Diff_mailing_state := COUNT(GROUP,%Closest%.Diff_mailing_state);
    Count_Diff_mailing_zip := COUNT(GROUP,%Closest%.Diff_mailing_zip);
    Count_Diff_mailing_county := COUNT(GROUP,%Closest%.Diff_mailing_county);
    Count_Diff_phone_number := COUNT(GROUP,%Closest%.Diff_phone_number);
    Count_Diff_ultid := COUNT(GROUP,%Closest%.Diff_ultid);
    Count_Diff_orgid := COUNT(GROUP,%Closest%.Diff_orgid);
    Count_Diff_seleid := COUNT(GROUP,%Closest%.Diff_seleid);
    Count_Diff_tin := COUNT(GROUP,%Closest%.Diff_tin);
    Count_Diff_email_address := COUNT(GROUP,%Closest%.Diff_email_address);
    Count_Diff_appended_provider_id := COUNT(GROUP,%Closest%.Diff_appended_provider_id);
    Count_Diff_lnpid := COUNT(GROUP,%Closest%.Diff_lnpid);
    Count_Diff_npi := COUNT(GROUP,%Closest%.Diff_npi);
    Count_Diff_ip_address := COUNT(GROUP,%Closest%.Diff_ip_address);
    Count_Diff_device_id := COUNT(GROUP,%Closest%.Diff_device_id);
    Count_Diff_professional_id := COUNT(GROUP,%Closest%.Diff_professional_id);
    Count_Diff_bank_routing_number_1 := COUNT(GROUP,%Closest%.Diff_bank_routing_number_1);
    Count_Diff_bank_account_number_1 := COUNT(GROUP,%Closest%.Diff_bank_account_number_1);
    Count_Diff_drivers_license_state := COUNT(GROUP,%Closest%.Diff_drivers_license_state);
    Count_Diff_drivers_license := COUNT(GROUP,%Closest%.Diff_drivers_license);
    Count_Diff_geo_lat := COUNT(GROUP,%Closest%.Diff_geo_lat);
    Count_Diff_geo_long := COUNT(GROUP,%Closest%.Diff_geo_long);
    Count_Diff_reported_date := COUNT(GROUP,%Closest%.Diff_reported_date);
    Count_Diff_file_type := COUNT(GROUP,%Closest%.Diff_file_type);
    Count_Diff_deceitful_confidence := COUNT(GROUP,%Closest%.Diff_deceitful_confidence);
    Count_Diff_reported_by := COUNT(GROUP,%Closest%.Diff_reported_by);
    Count_Diff_reason_description := COUNT(GROUP,%Closest%.Diff_reason_description);
    Count_Diff_event_type_1 := COUNT(GROUP,%Closest%.Diff_event_type_1);
    Count_Diff_event_entity_1 := COUNT(GROUP,%Closest%.Diff_event_entity_1);
  END;
  out_counts := table(%Closest%,%AggRec%,true);
ENDMACRO;
END;
//Import:Scrubs_FraudGov.Deltabase_hygiene
IMPORT SALT311,STD;
EXPORT Deltabase_hygiene(dataset(Deltabase_layout_Deltabase) h) := MODULE

//A simple summary record
EXPORT Summary(SALT311.Str30Type  txt) := FUNCTION
  SummaryLayout := RECORD
    txt;
    NumberOfRecords := COUNT(GROUP);
    populated_inqlog_id_cnt := COUNT(GROUP,h.inqlog_id <> (TYPEOF(h.inqlog_id))'');
    populated_inqlog_id_pcnt := AVE(GROUP,IF(h.inqlog_id = (TYPEOF(h.inqlog_id))'',0,100));
    maxlength_inqlog_id := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.inqlog_id)));
    avelength_inqlog_id := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.inqlog_id)),h.inqlog_id<>(typeof(h.inqlog_id))'');
    populated_customer_id_cnt := COUNT(GROUP,h.customer_id <> (TYPEOF(h.customer_id))'');
    populated_customer_id_pcnt := AVE(GROUP,IF(h.customer_id = (TYPEOF(h.customer_id))'',0,100));
    maxlength_customer_id := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.customer_id)));
    avelength_customer_id := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.customer_id)),h.customer_id<>(typeof(h.customer_id))'');
    populated_transaction_id_cnt := COUNT(GROUP,h.transaction_id <> (TYPEOF(h.transaction_id))'');
    populated_transaction_id_pcnt := AVE(GROUP,IF(h.transaction_id = (TYPEOF(h.transaction_id))'',0,100));
    maxlength_transaction_id := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.transaction_id)));
    avelength_transaction_id := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.transaction_id)),h.transaction_id<>(typeof(h.transaction_id))'');
    populated_date_of_transaction_cnt := COUNT(GROUP,h.date_of_transaction <> (TYPEOF(h.date_of_transaction))'');
    populated_date_of_transaction_pcnt := AVE(GROUP,IF(h.date_of_transaction = (TYPEOF(h.date_of_transaction))'',0,100));
    maxlength_date_of_transaction := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.date_of_transaction)));
    avelength_date_of_transaction := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.date_of_transaction)),h.date_of_transaction<>(typeof(h.date_of_transaction))'');
    populated_household_id_cnt := COUNT(GROUP,h.household_id <> (TYPEOF(h.household_id))'');
    populated_household_id_pcnt := AVE(GROUP,IF(h.household_id = (TYPEOF(h.household_id))'',0,100));
    maxlength_household_id := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.household_id)));
    avelength_household_id := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.household_id)),h.household_id<>(typeof(h.household_id))'');
    populated_customer_person_id_cnt := COUNT(GROUP,h.customer_person_id <> (TYPEOF(h.customer_person_id))'');
    populated_customer_person_id_pcnt := AVE(GROUP,IF(h.customer_person_id = (TYPEOF(h.customer_person_id))'',0,100));
    maxlength_customer_person_id := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.customer_person_id)));
    avelength_customer_person_id := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.customer_person_id)),h.customer_person_id<>(typeof(h.customer_person_id))'');
    populated_customer_program_cnt := COUNT(GROUP,h.customer_program <> (TYPEOF(h.customer_program))'');
    populated_customer_program_pcnt := AVE(GROUP,IF(h.customer_program = (TYPEOF(h.customer_program))'',0,100));
    maxlength_customer_program := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.customer_program)));
    avelength_customer_program := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.customer_program)),h.customer_program<>(typeof(h.customer_program))'');
    populated_reason_for_transaction_activity_cnt := COUNT(GROUP,h.reason_for_transaction_activity <> (TYPEOF(h.reason_for_transaction_activity))'');
    populated_reason_for_transaction_activity_pcnt := AVE(GROUP,IF(h.reason_for_transaction_activity = (TYPEOF(h.reason_for_transaction_activity))'',0,100));
    maxlength_reason_for_transaction_activity := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.reason_for_transaction_activity)));
    avelength_reason_for_transaction_activity := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.reason_for_transaction_activity)),h.reason_for_transaction_activity<>(typeof(h.reason_for_transaction_activity))'');
    populated_inquiry_source_cnt := COUNT(GROUP,h.inquiry_source <> (TYPEOF(h.inquiry_source))'');
    populated_inquiry_source_pcnt := AVE(GROUP,IF(h.inquiry_source = (TYPEOF(h.inquiry_source))'',0,100));
    maxlength_inquiry_source := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.inquiry_source)));
    avelength_inquiry_source := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.inquiry_source)),h.inquiry_source<>(typeof(h.inquiry_source))'');
    populated_customer_county_cnt := COUNT(GROUP,h.customer_county <> (TYPEOF(h.customer_county))'');
    populated_customer_county_pcnt := AVE(GROUP,IF(h.customer_county = (TYPEOF(h.customer_county))'',0,100));
    maxlength_customer_county := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.customer_county)));
    avelength_customer_county := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.customer_county)),h.customer_county<>(typeof(h.customer_county))'');
    populated_customer_state_cnt := COUNT(GROUP,h.customer_state <> (TYPEOF(h.customer_state))'');
    populated_customer_state_pcnt := AVE(GROUP,IF(h.customer_state = (TYPEOF(h.customer_state))'',0,100));
    maxlength_customer_state := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.customer_state)));
    avelength_customer_state := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.customer_state)),h.customer_state<>(typeof(h.customer_state))'');
    populated_customer_agency_vertical_type_cnt := COUNT(GROUP,h.customer_agency_vertical_type <> (TYPEOF(h.customer_agency_vertical_type))'');
    populated_customer_agency_vertical_type_pcnt := AVE(GROUP,IF(h.customer_agency_vertical_type = (TYPEOF(h.customer_agency_vertical_type))'',0,100));
    maxlength_customer_agency_vertical_type := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.customer_agency_vertical_type)));
    avelength_customer_agency_vertical_type := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.customer_agency_vertical_type)),h.customer_agency_vertical_type<>(typeof(h.customer_agency_vertical_type))'');
    populated_ssn_cnt := COUNT(GROUP,h.ssn <> (TYPEOF(h.ssn))'');
    populated_ssn_pcnt := AVE(GROUP,IF(h.ssn = (TYPEOF(h.ssn))'',0,100));
    maxlength_ssn := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.ssn)));
    avelength_ssn := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.ssn)),h.ssn<>(typeof(h.ssn))'');
    populated_dob_cnt := COUNT(GROUP,h.dob <> (TYPEOF(h.dob))'');
    populated_dob_pcnt := AVE(GROUP,IF(h.dob = (TYPEOF(h.dob))'',0,100));
    maxlength_dob := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.dob)));
    avelength_dob := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.dob)),h.dob<>(typeof(h.dob))'');
    populated_rawlinkid_cnt := COUNT(GROUP,h.rawlinkid <> (TYPEOF(h.rawlinkid))'');
    populated_rawlinkid_pcnt := AVE(GROUP,IF(h.rawlinkid = (TYPEOF(h.rawlinkid))'',0,100));
    maxlength_rawlinkid := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.rawlinkid)));
    avelength_rawlinkid := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.rawlinkid)),h.rawlinkid<>(typeof(h.rawlinkid))'');
    populated_raw_full_name_cnt := COUNT(GROUP,h.raw_full_name <> (TYPEOF(h.raw_full_name))'');
    populated_raw_full_name_pcnt := AVE(GROUP,IF(h.raw_full_name = (TYPEOF(h.raw_full_name))'',0,100));
    maxlength_raw_full_name := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.raw_full_name)));
    avelength_raw_full_name := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.raw_full_name)),h.raw_full_name<>(typeof(h.raw_full_name))'');
    populated_raw_title_cnt := COUNT(GROUP,h.raw_title <> (TYPEOF(h.raw_title))'');
    populated_raw_title_pcnt := AVE(GROUP,IF(h.raw_title = (TYPEOF(h.raw_title))'',0,100));
    maxlength_raw_title := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.raw_title)));
    avelength_raw_title := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.raw_title)),h.raw_title<>(typeof(h.raw_title))'');
    populated_raw_first_name_cnt := COUNT(GROUP,h.raw_first_name <> (TYPEOF(h.raw_first_name))'');
    populated_raw_first_name_pcnt := AVE(GROUP,IF(h.raw_first_name = (TYPEOF(h.raw_first_name))'',0,100));
    maxlength_raw_first_name := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.raw_first_name)));
    avelength_raw_first_name := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.raw_first_name)),h.raw_first_name<>(typeof(h.raw_first_name))'');
    populated_raw_middle_name_cnt := COUNT(GROUP,h.raw_middle_name <> (TYPEOF(h.raw_middle_name))'');
    populated_raw_middle_name_pcnt := AVE(GROUP,IF(h.raw_middle_name = (TYPEOF(h.raw_middle_name))'',0,100));
    maxlength_raw_middle_name := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.raw_middle_name)));
    avelength_raw_middle_name := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.raw_middle_name)),h.raw_middle_name<>(typeof(h.raw_middle_name))'');
    populated_raw_last_name_cnt := COUNT(GROUP,h.raw_last_name <> (TYPEOF(h.raw_last_name))'');
    populated_raw_last_name_pcnt := AVE(GROUP,IF(h.raw_last_name = (TYPEOF(h.raw_last_name))'',0,100));
    maxlength_raw_last_name := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.raw_last_name)));
    avelength_raw_last_name := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.raw_last_name)),h.raw_last_name<>(typeof(h.raw_last_name))'');
    populated_raw_orig_suffix_cnt := COUNT(GROUP,h.raw_orig_suffix <> (TYPEOF(h.raw_orig_suffix))'');
    populated_raw_orig_suffix_pcnt := AVE(GROUP,IF(h.raw_orig_suffix = (TYPEOF(h.raw_orig_suffix))'',0,100));
    maxlength_raw_orig_suffix := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.raw_orig_suffix)));
    avelength_raw_orig_suffix := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.raw_orig_suffix)),h.raw_orig_suffix<>(typeof(h.raw_orig_suffix))'');
    populated_full_address_cnt := COUNT(GROUP,h.full_address <> (TYPEOF(h.full_address))'');
    populated_full_address_pcnt := AVE(GROUP,IF(h.full_address = (TYPEOF(h.full_address))'',0,100));
    maxlength_full_address := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.full_address)));
    avelength_full_address := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.full_address)),h.full_address<>(typeof(h.full_address))'');
    populated_street_1_cnt := COUNT(GROUP,h.street_1 <> (TYPEOF(h.street_1))'');
    populated_street_1_pcnt := AVE(GROUP,IF(h.street_1 = (TYPEOF(h.street_1))'',0,100));
    maxlength_street_1 := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.street_1)));
    avelength_street_1 := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.street_1)),h.street_1<>(typeof(h.street_1))'');
    populated_city_cnt := COUNT(GROUP,h.city <> (TYPEOF(h.city))'');
    populated_city_pcnt := AVE(GROUP,IF(h.city = (TYPEOF(h.city))'',0,100));
    maxlength_city := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.city)));
    avelength_city := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.city)),h.city<>(typeof(h.city))'');
    populated_state_cnt := COUNT(GROUP,h.state <> (TYPEOF(h.state))'');
    populated_state_pcnt := AVE(GROUP,IF(h.state = (TYPEOF(h.state))'',0,100));
    maxlength_state := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.state)));
    avelength_state := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.state)),h.state<>(typeof(h.state))'');
    populated_zip_cnt := COUNT(GROUP,h.zip <> (TYPEOF(h.zip))'');
    populated_zip_pcnt := AVE(GROUP,IF(h.zip = (TYPEOF(h.zip))'',0,100));
    maxlength_zip := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.zip)));
    avelength_zip := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.zip)),h.zip<>(typeof(h.zip))'');
    populated_county_cnt := COUNT(GROUP,h.county <> (TYPEOF(h.county))'');
    populated_county_pcnt := AVE(GROUP,IF(h.county = (TYPEOF(h.county))'',0,100));
    maxlength_county := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.county)));
    avelength_county := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.county)),h.county<>(typeof(h.county))'');
    populated_mailing_street_1_cnt := COUNT(GROUP,h.mailing_street_1 <> (TYPEOF(h.mailing_street_1))'');
    populated_mailing_street_1_pcnt := AVE(GROUP,IF(h.mailing_street_1 = (TYPEOF(h.mailing_street_1))'',0,100));
    maxlength_mailing_street_1 := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.mailing_street_1)));
    avelength_mailing_street_1 := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.mailing_street_1)),h.mailing_street_1<>(typeof(h.mailing_street_1))'');
    populated_mailing_city_cnt := COUNT(GROUP,h.mailing_city <> (TYPEOF(h.mailing_city))'');
    populated_mailing_city_pcnt := AVE(GROUP,IF(h.mailing_city = (TYPEOF(h.mailing_city))'',0,100));
    maxlength_mailing_city := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.mailing_city)));
    avelength_mailing_city := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.mailing_city)),h.mailing_city<>(typeof(h.mailing_city))'');
    populated_mailing_state_cnt := COUNT(GROUP,h.mailing_state <> (TYPEOF(h.mailing_state))'');
    populated_mailing_state_pcnt := AVE(GROUP,IF(h.mailing_state = (TYPEOF(h.mailing_state))'',0,100));
    maxlength_mailing_state := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.mailing_state)));
    avelength_mailing_state := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.mailing_state)),h.mailing_state<>(typeof(h.mailing_state))'');
    populated_mailing_zip_cnt := COUNT(GROUP,h.mailing_zip <> (TYPEOF(h.mailing_zip))'');
    populated_mailing_zip_pcnt := AVE(GROUP,IF(h.mailing_zip = (TYPEOF(h.mailing_zip))'',0,100));
    maxlength_mailing_zip := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.mailing_zip)));
    avelength_mailing_zip := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.mailing_zip)),h.mailing_zip<>(typeof(h.mailing_zip))'');
    populated_mailing_county_cnt := COUNT(GROUP,h.mailing_county <> (TYPEOF(h.mailing_county))'');
    populated_mailing_county_pcnt := AVE(GROUP,IF(h.mailing_county = (TYPEOF(h.mailing_county))'',0,100));
    maxlength_mailing_county := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.mailing_county)));
    avelength_mailing_county := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.mailing_county)),h.mailing_county<>(typeof(h.mailing_county))'');
    populated_phone_number_cnt := COUNT(GROUP,h.phone_number <> (TYPEOF(h.phone_number))'');
    populated_phone_number_pcnt := AVE(GROUP,IF(h.phone_number = (TYPEOF(h.phone_number))'',0,100));
    maxlength_phone_number := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.phone_number)));
    avelength_phone_number := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.phone_number)),h.phone_number<>(typeof(h.phone_number))'');
    populated_ultid_cnt := COUNT(GROUP,h.ultid <> (TYPEOF(h.ultid))'');
    populated_ultid_pcnt := AVE(GROUP,IF(h.ultid = (TYPEOF(h.ultid))'',0,100));
    maxlength_ultid := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.ultid)));
    avelength_ultid := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.ultid)),h.ultid<>(typeof(h.ultid))'');
    populated_orgid_cnt := COUNT(GROUP,h.orgid <> (TYPEOF(h.orgid))'');
    populated_orgid_pcnt := AVE(GROUP,IF(h.orgid = (TYPEOF(h.orgid))'',0,100));
    maxlength_orgid := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.orgid)));
    avelength_orgid := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.orgid)),h.orgid<>(typeof(h.orgid))'');
    populated_seleid_cnt := COUNT(GROUP,h.seleid <> (TYPEOF(h.seleid))'');
    populated_seleid_pcnt := AVE(GROUP,IF(h.seleid = (TYPEOF(h.seleid))'',0,100));
    maxlength_seleid := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.seleid)));
    avelength_seleid := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.seleid)),h.seleid<>(typeof(h.seleid))'');
    populated_tin_cnt := COUNT(GROUP,h.tin <> (TYPEOF(h.tin))'');
    populated_tin_pcnt := AVE(GROUP,IF(h.tin = (TYPEOF(h.tin))'',0,100));
    maxlength_tin := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.tin)));
    avelength_tin := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.tin)),h.tin<>(typeof(h.tin))'');
    populated_email_address_cnt := COUNT(GROUP,h.email_address <> (TYPEOF(h.email_address))'');
    populated_email_address_pcnt := AVE(GROUP,IF(h.email_address = (TYPEOF(h.email_address))'',0,100));
    maxlength_email_address := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.email_address)));
    avelength_email_address := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.email_address)),h.email_address<>(typeof(h.email_address))'');
    populated_appended_provider_id_cnt := COUNT(GROUP,h.appended_provider_id <> (TYPEOF(h.appended_provider_id))'');
    populated_appended_provider_id_pcnt := AVE(GROUP,IF(h.appended_provider_id = (TYPEOF(h.appended_provider_id))'',0,100));
    maxlength_appended_provider_id := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.appended_provider_id)));
    avelength_appended_provider_id := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.appended_provider_id)),h.appended_provider_id<>(typeof(h.appended_provider_id))'');
    populated_lnpid_cnt := COUNT(GROUP,h.lnpid <> (TYPEOF(h.lnpid))'');
    populated_lnpid_pcnt := AVE(GROUP,IF(h.lnpid = (TYPEOF(h.lnpid))'',0,100));
    maxlength_lnpid := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.lnpid)));
    avelength_lnpid := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.lnpid)),h.lnpid<>(typeof(h.lnpid))'');
    populated_npi_cnt := COUNT(GROUP,h.npi <> (TYPEOF(h.npi))'');
    populated_npi_pcnt := AVE(GROUP,IF(h.npi = (TYPEOF(h.npi))'',0,100));
    maxlength_npi := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.npi)));
    avelength_npi := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.npi)),h.npi<>(typeof(h.npi))'');
    populated_ip_address_cnt := COUNT(GROUP,h.ip_address <> (TYPEOF(h.ip_address))'');
    populated_ip_address_pcnt := AVE(GROUP,IF(h.ip_address = (TYPEOF(h.ip_address))'',0,100));
    maxlength_ip_address := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.ip_address)));
    avelength_ip_address := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.ip_address)),h.ip_address<>(typeof(h.ip_address))'');
    populated_device_id_cnt := COUNT(GROUP,h.device_id <> (TYPEOF(h.device_id))'');
    populated_device_id_pcnt := AVE(GROUP,IF(h.device_id = (TYPEOF(h.device_id))'',0,100));
    maxlength_device_id := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.device_id)));
    avelength_device_id := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.device_id)),h.device_id<>(typeof(h.device_id))'');
    populated_professional_id_cnt := COUNT(GROUP,h.professional_id <> (TYPEOF(h.professional_id))'');
    populated_professional_id_pcnt := AVE(GROUP,IF(h.professional_id = (TYPEOF(h.professional_id))'',0,100));
    maxlength_professional_id := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.professional_id)));
    avelength_professional_id := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.professional_id)),h.professional_id<>(typeof(h.professional_id))'');
    populated_bank_routing_number_1_cnt := COUNT(GROUP,h.bank_routing_number_1 <> (TYPEOF(h.bank_routing_number_1))'');
    populated_bank_routing_number_1_pcnt := AVE(GROUP,IF(h.bank_routing_number_1 = (TYPEOF(h.bank_routing_number_1))'',0,100));
    maxlength_bank_routing_number_1 := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.bank_routing_number_1)));
    avelength_bank_routing_number_1 := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.bank_routing_number_1)),h.bank_routing_number_1<>(typeof(h.bank_routing_number_1))'');
    populated_bank_account_number_1_cnt := COUNT(GROUP,h.bank_account_number_1 <> (TYPEOF(h.bank_account_number_1))'');
    populated_bank_account_number_1_pcnt := AVE(GROUP,IF(h.bank_account_number_1 = (TYPEOF(h.bank_account_number_1))'',0,100));
    maxlength_bank_account_number_1 := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.bank_account_number_1)));
    avelength_bank_account_number_1 := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.bank_account_number_1)),h.bank_account_number_1<>(typeof(h.bank_account_number_1))'');
    populated_drivers_license_state_cnt := COUNT(GROUP,h.drivers_license_state <> (TYPEOF(h.drivers_license_state))'');
    populated_drivers_license_state_pcnt := AVE(GROUP,IF(h.drivers_license_state = (TYPEOF(h.drivers_license_state))'',0,100));
    maxlength_drivers_license_state := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.drivers_license_state)));
    avelength_drivers_license_state := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.drivers_license_state)),h.drivers_license_state<>(typeof(h.drivers_license_state))'');
    populated_drivers_license_cnt := COUNT(GROUP,h.drivers_license <> (TYPEOF(h.drivers_license))'');
    populated_drivers_license_pcnt := AVE(GROUP,IF(h.drivers_license = (TYPEOF(h.drivers_license))'',0,100));
    maxlength_drivers_license := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.drivers_license)));
    avelength_drivers_license := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.drivers_license)),h.drivers_license<>(typeof(h.drivers_license))'');
    populated_geo_lat_cnt := COUNT(GROUP,h.geo_lat <> (TYPEOF(h.geo_lat))'');
    populated_geo_lat_pcnt := AVE(GROUP,IF(h.geo_lat = (TYPEOF(h.geo_lat))'',0,100));
    maxlength_geo_lat := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.geo_lat)));
    avelength_geo_lat := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.geo_lat)),h.geo_lat<>(typeof(h.geo_lat))'');
    populated_geo_long_cnt := COUNT(GROUP,h.geo_long <> (TYPEOF(h.geo_long))'');
    populated_geo_long_pcnt := AVE(GROUP,IF(h.geo_long = (TYPEOF(h.geo_long))'',0,100));
    maxlength_geo_long := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.geo_long)));
    avelength_geo_long := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.geo_long)),h.geo_long<>(typeof(h.geo_long))'');
    populated_reported_date_cnt := COUNT(GROUP,h.reported_date <> (TYPEOF(h.reported_date))'');
    populated_reported_date_pcnt := AVE(GROUP,IF(h.reported_date = (TYPEOF(h.reported_date))'',0,100));
    maxlength_reported_date := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.reported_date)));
    avelength_reported_date := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.reported_date)),h.reported_date<>(typeof(h.reported_date))'');
    populated_file_type_cnt := COUNT(GROUP,h.file_type <> (TYPEOF(h.file_type))'');
    populated_file_type_pcnt := AVE(GROUP,IF(h.file_type = (TYPEOF(h.file_type))'',0,100));
    maxlength_file_type := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.file_type)));
    avelength_file_type := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.file_type)),h.file_type<>(typeof(h.file_type))'');
    populated_deceitful_confidence_cnt := COUNT(GROUP,h.deceitful_confidence <> (TYPEOF(h.deceitful_confidence))'');
    populated_deceitful_confidence_pcnt := AVE(GROUP,IF(h.deceitful_confidence = (TYPEOF(h.deceitful_confidence))'',0,100));
    maxlength_deceitful_confidence := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.deceitful_confidence)));
    avelength_deceitful_confidence := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.deceitful_confidence)),h.deceitful_confidence<>(typeof(h.deceitful_confidence))'');
    populated_reported_by_cnt := COUNT(GROUP,h.reported_by <> (TYPEOF(h.reported_by))'');
    populated_reported_by_pcnt := AVE(GROUP,IF(h.reported_by = (TYPEOF(h.reported_by))'',0,100));
    maxlength_reported_by := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.reported_by)));
    avelength_reported_by := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.reported_by)),h.reported_by<>(typeof(h.reported_by))'');
    populated_reason_description_cnt := COUNT(GROUP,h.reason_description <> (TYPEOF(h.reason_description))'');
    populated_reason_description_pcnt := AVE(GROUP,IF(h.reason_description = (TYPEOF(h.reason_description))'',0,100));
    maxlength_reason_description := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.reason_description)));
    avelength_reason_description := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.reason_description)),h.reason_description<>(typeof(h.reason_description))'');
    populated_event_type_1_cnt := COUNT(GROUP,h.event_type_1 <> (TYPEOF(h.event_type_1))'');
    populated_event_type_1_pcnt := AVE(GROUP,IF(h.event_type_1 = (TYPEOF(h.event_type_1))'',0,100));
    maxlength_event_type_1 := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.event_type_1)));
    avelength_event_type_1 := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.event_type_1)),h.event_type_1<>(typeof(h.event_type_1))'');
    populated_event_entity_1_cnt := COUNT(GROUP,h.event_entity_1 <> (TYPEOF(h.event_entity_1))'');
    populated_event_entity_1_pcnt := AVE(GROUP,IF(h.event_entity_1 = (TYPEOF(h.event_entity_1))'',0,100));
    maxlength_event_entity_1 := MAX(GROUP,LENGTH(TRIM((SALT311.StrType)h.event_entity_1)));
    avelength_event_entity_1 := AVE(GROUP,LENGTH(TRIM((SALT311.StrType)h.event_entity_1)),h.event_entity_1<>(typeof(h.event_entity_1))'');
  END;
    T := TABLE(h,SummaryLayout);
  R1 := RECORD
    UNSIGNED LinkingPotential :=  + T.Populated_inqlog_id_pcnt *   0.00 / 100 + T.Populated_customer_id_pcnt *   0.00 / 100 + T.Populated_transaction_id_pcnt *   0.00 / 100 + T.Populated_date_of_transaction_pcnt *   0.00 / 100 + T.Populated_household_id_pcnt *   0.00 / 100 + T.Populated_customer_person_id_pcnt *   0.00 / 100 + T.Populated_customer_program_pcnt *   0.00 / 100 + T.Populated_reason_for_transaction_activity_pcnt *   0.00 / 100 + T.Populated_inquiry_source_pcnt *   0.00 / 100 + T.Populated_customer_county_pcnt *   0.00 / 100 + T.Populated_customer_state_pcnt *   0.00 / 100 + T.Populated_customer_agency_vertical_type_pcnt *   0.00 / 100 + T.Populated_ssn_pcnt *   0.00 / 100 + T.Populated_dob_pcnt *   0.00 / 100 + T.Populated_rawlinkid_pcnt *   0.00 / 100 + T.Populated_raw_full_name_pcnt *   0.00 / 100 + T.Populated_raw_title_pcnt *   0.00 / 100 + T.Populated_raw_first_name_pcnt *   0.00 / 100 + T.Populated_raw_middle_name_pcnt *   0.00 / 100 + T.Populated_raw_last_name_pcnt *   0.00 / 100 + T.Populated_raw_orig_suffix_pcnt *   0.00 / 100 + T.Populated_full_address_pcnt *   0.00 / 100 + T.Populated_street_1_pcnt *   0.00 / 100 + T.Populated_city_pcnt *   0.00 / 100 + T.Populated_state_pcnt *   0.00 / 100 + T.Populated_zip_pcnt *   0.00 / 100 + T.Populated_county_pcnt *   0.00 / 100 + T.Populated_mailing_street_1_pcnt *   0.00 / 100 + T.Populated_mailing_city_pcnt *   0.00 / 100 + T.Populated_mailing_state_pcnt *   0.00 / 100 + T.Populated_mailing_zip_pcnt *   0.00 / 100 + T.Populated_mailing_county_pcnt *   0.00 / 100 + T.Populated_phone_number_pcnt *   0.00 / 100 + T.Populated_ultid_pcnt *   0.00 / 100 + T.Populated_orgid_pcnt *   0.00 / 100 + T.Populated_seleid_pcnt *   0.00 / 100 + T.Populated_tin_pcnt *   0.00 / 100 + T.Populated_email_address_pcnt *   0.00 / 100 + T.Populated_appended_provider_id_pcnt *   0.00 / 100 + T.Populated_lnpid_pcnt *   0.00 / 100 + T.Populated_npi_pcnt *   0.00 / 100 + T.Populated_ip_address_pcnt *   0.00 / 100 + T.Populated_device_id_pcnt *   0.00 / 100 + T.Populated_professional_id_pcnt *   0.00 / 100 + T.Populated_bank_routing_number_1_pcnt *   0.00 / 100 + T.Populated_bank_account_number_1_pcnt *   0.00 / 100 + T.Populated_drivers_license_state_pcnt *   0.00 / 100 + T.Populated_drivers_license_pcnt *   0.00 / 100 + T.Populated_geo_lat_pcnt *   0.00 / 100 + T.Populated_geo_long_pcnt *   0.00 / 100 + T.Populated_reported_date_pcnt *   0.00 / 100 + T.Populated_file_type_pcnt *   0.00 / 100 + T.Populated_deceitful_confidence_pcnt *   0.00 / 100 + T.Populated_reported_by_pcnt *   0.00 / 100 + T.Populated_reason_description_pcnt *   0.00 / 100 + T.Populated_event_type_1_pcnt *   0.00 / 100 + T.Populated_event_entity_1_pcnt *   0.00 / 100;
    T;
  END;
  RETURN TABLE(T,R1);
END;

summary0 := Summary('Summary');
  invRec := RECORD
  UNSIGNED  FldNo;
  SALT311.StrType FieldName;
  UNSIGNED NumberOfRecords;
  REAL8  populated_pcnt;
  UNSIGNED  maxlength;
  REAL8  avelength;
END;
invRec invert(summary0 le, INTEGER C) := TRANSFORM
  SELF.FldNo := C;
  SELF.NumberOfRecords := le.NumberOfRecords;
  SELF.FieldName := CHOOSE(C,'inqlog_id','customer_id','transaction_id','date_of_transaction','household_id','customer_person_id','customer_program','reason_for_transaction_activity','inquiry_source','customer_county','customer_state','customer_agency_vertical_type','ssn','dob','rawlinkid','raw_full_name','raw_title','raw_first_name','raw_middle_name','raw_last_name','raw_orig_suffix','full_address','street_1','city','state','zip','county','mailing_street_1','mailing_city','mailing_state','mailing_zip','mailing_county','phone_number','ultid','orgid','seleid','tin','email_address','appended_provider_id','lnpid','npi','ip_address','device_id','professional_id','bank_routing_number_1','bank_account_number_1','drivers_license_state','drivers_license','geo_lat','geo_long','reported_date','file_type','deceitful_confidence','reported_by','reason_description','event_type_1','event_entity_1');
  SELF.populated_pcnt := CHOOSE(C,le.populated_inqlog_id_pcnt,le.populated_customer_id_pcnt,le.populated_transaction_id_pcnt,le.populated_date_of_transaction_pcnt,le.populated_household_id_pcnt,le.populated_customer_person_id_pcnt,le.populated_customer_program_pcnt,le.populated_reason_for_transaction_activity_pcnt,le.populated_inquiry_source_pcnt,le.populated_customer_county_pcnt,le.populated_customer_state_pcnt,le.populated_customer_agency_vertical_type_pcnt,le.populated_ssn_pcnt,le.populated_dob_pcnt,le.populated_rawlinkid_pcnt,le.populated_raw_full_name_pcnt,le.populated_raw_title_pcnt,le.populated_raw_first_name_pcnt,le.populated_raw_middle_name_pcnt,le.populated_raw_last_name_pcnt,le.populated_raw_orig_suffix_pcnt,le.populated_full_address_pcnt,le.populated_street_1_pcnt,le.populated_city_pcnt,le.populated_state_pcnt,le.populated_zip_pcnt,le.populated_county_pcnt,le.populated_mailing_street_1_pcnt,le.populated_mailing_city_pcnt,le.populated_mailing_state_pcnt,le.populated_mailing_zip_pcnt,le.populated_mailing_county_pcnt,le.populated_phone_number_pcnt,le.populated_ultid_pcnt,le.populated_orgid_pcnt,le.populated_seleid_pcnt,le.populated_tin_pcnt,le.populated_email_address_pcnt,le.populated_appended_provider_id_pcnt,le.populated_lnpid_pcnt,le.populated_npi_pcnt,le.populated_ip_address_pcnt,le.populated_device_id_pcnt,le.populated_professional_id_pcnt,le.populated_bank_routing_number_1_pcnt,le.populated_bank_account_number_1_pcnt,le.populated_drivers_license_state_pcnt,le.populated_drivers_license_pcnt,le.populated_geo_lat_pcnt,le.populated_geo_long_pcnt,le.populated_reported_date_pcnt,le.populated_file_type_pcnt,le.populated_deceitful_confidence_pcnt,le.populated_reported_by_pcnt,le.populated_reason_description_pcnt,le.populated_event_type_1_pcnt,le.populated_event_entity_1_pcnt);
  SELF.maxlength := CHOOSE(C,le.maxlength_inqlog_id,le.maxlength_customer_id,le.maxlength_transaction_id,le.maxlength_date_of_transaction,le.maxlength_household_id,le.maxlength_customer_person_id,le.maxlength_customer_program,le.maxlength_reason_for_transaction_activity,le.maxlength_inquiry_source,le.maxlength_customer_county,le.maxlength_customer_state,le.maxlength_customer_agency_vertical_type,le.maxlength_ssn,le.maxlength_dob,le.maxlength_rawlinkid,le.maxlength_raw_full_name,le.maxlength_raw_title,le.maxlength_raw_first_name,le.maxlength_raw_middle_name,le.maxlength_raw_last_name,le.maxlength_raw_orig_suffix,le.maxlength_full_address,le.maxlength_street_1,le.maxlength_city,le.maxlength_state,le.maxlength_zip,le.maxlength_county,le.maxlength_mailing_street_1,le.maxlength_mailing_city,le.maxlength_mailing_state,le.maxlength_mailing_zip,le.maxlength_mailing_county,le.maxlength_phone_number,le.maxlength_ultid,le.maxlength_orgid,le.maxlength_seleid,le.maxlength_tin,le.maxlength_email_address,le.maxlength_appended_provider_id,le.maxlength_lnpid,le.maxlength_npi,le.maxlength_ip_address,le.maxlength_device_id,le.maxlength_professional_id,le.maxlength_bank_routing_number_1,le.maxlength_bank_account_number_1,le.maxlength_drivers_license_state,le.maxlength_drivers_license,le.maxlength_geo_lat,le.maxlength_geo_long,le.maxlength_reported_date,le.maxlength_file_type,le.maxlength_deceitful_confidence,le.maxlength_reported_by,le.maxlength_reason_description,le.maxlength_event_type_1,le.maxlength_event_entity_1);
  SELF.avelength := CHOOSE(C,le.avelength_inqlog_id,le.avelength_customer_id,le.avelength_transaction_id,le.avelength_date_of_transaction,le.avelength_household_id,le.avelength_customer_person_id,le.avelength_customer_program,le.avelength_reason_for_transaction_activity,le.avelength_inquiry_source,le.avelength_customer_county,le.avelength_customer_state,le.avelength_customer_agency_vertical_type,le.avelength_ssn,le.avelength_dob,le.avelength_rawlinkid,le.avelength_raw_full_name,le.avelength_raw_title,le.avelength_raw_first_name,le.avelength_raw_middle_name,le.avelength_raw_last_name,le.avelength_raw_orig_suffix,le.avelength_full_address,le.avelength_street_1,le.avelength_city,le.avelength_state,le.avelength_zip,le.avelength_county,le.avelength_mailing_street_1,le.avelength_mailing_city,le.avelength_mailing_state,le.avelength_mailing_zip,le.avelength_mailing_county,le.avelength_phone_number,le.avelength_ultid,le.avelength_orgid,le.avelength_seleid,le.avelength_tin,le.avelength_email_address,le.avelength_appended_provider_id,le.avelength_lnpid,le.avelength_npi,le.avelength_ip_address,le.avelength_device_id,le.avelength_professional_id,le.avelength_bank_routing_number_1,le.avelength_bank_account_number_1,le.avelength_drivers_license_state,le.avelength_drivers_license,le.avelength_geo_lat,le.avelength_geo_long,le.avelength_reported_date,le.avelength_file_type,le.avelength_deceitful_confidence,le.avelength_reported_by,le.avelength_reason_description,le.avelength_event_type_1,le.avelength_event_entity_1);
END;
EXPORT invSummary := NORMALIZE(summary0, 57, invert(LEFT,COUNTER));
// The character counts
// Move everything into 'inverted list' form so processing can be done 'in library'
SALT311.MAC_Character_Counts.X_Data_Layout Into(h le,unsigned C) := TRANSFORM
  SELF.Fld := TRIM(CHOOSE(C,IF (le.inqlog_id <> 0,TRIM((SALT311.StrType)le.inqlog_id), ''),TRIM((SALT311.StrType)le.customer_id),TRIM((SALT311.StrType)le.transaction_id),TRIM((SALT311.StrType)le.date_of_transaction),TRIM((SALT311.StrType)le.household_id),TRIM((SALT311.StrType)le.customer_person_id),TRIM((SALT311.StrType)le.customer_program),TRIM((SALT311.StrType)le.reason_for_transaction_activity),TRIM((SALT311.StrType)le.inquiry_source),TRIM((SALT311.StrType)le.customer_county),TRIM((SALT311.StrType)le.customer_state),TRIM((SALT311.StrType)le.customer_agency_vertical_type),TRIM((SALT311.StrType)le.ssn),TRIM((SALT311.StrType)le.dob),IF (le.rawlinkid <> 0,TRIM((SALT311.StrType)le.rawlinkid), ''),TRIM((SALT311.StrType)le.raw_full_name),TRIM((SALT311.StrType)le.raw_title),TRIM((SALT311.StrType)le.raw_first_name),TRIM((SALT311.StrType)le.raw_middle_name),TRIM((SALT311.StrType)le.raw_last_name),TRIM((SALT311.StrType)le.raw_orig_suffix),TRIM((SALT311.StrType)le.full_address),TRIM((SALT311.StrType)le.street_1),TRIM((SALT311.StrType)le.city),TRIM((SALT311.StrType)le.state),TRIM((SALT311.StrType)le.zip),TRIM((SALT311.StrType)le.county),TRIM((SALT311.StrType)le.mailing_street_1),TRIM((SALT311.StrType)le.mailing_city),TRIM((SALT311.StrType)le.mailing_state),TRIM((SALT311.StrType)le.mailing_zip),TRIM((SALT311.StrType)le.mailing_county),TRIM((SALT311.StrType)le.phone_number),IF (le.ultid <> 0,TRIM((SALT311.StrType)le.ultid), ''),IF (le.orgid <> 0,TRIM((SALT311.StrType)le.orgid), ''),IF (le.seleid <> 0,TRIM((SALT311.StrType)le.seleid), ''),TRIM((SALT311.StrType)le.tin),TRIM((SALT311.StrType)le.email_address),IF (le.appended_provider_id <> 0,TRIM((SALT311.StrType)le.appended_provider_id), ''),IF (le.lnpid <> 0,TRIM((SALT311.StrType)le.lnpid), ''),TRIM((SALT311.StrType)le.npi),TRIM((SALT311.StrType)le.ip_address),TRIM((SALT311.StrType)le.device_id),TRIM((SALT311.StrType)le.professional_id),TRIM((SALT311.StrType)le.bank_routing_number_1),TRIM((SALT311.StrType)le.bank_account_number_1),TRIM((SALT311.StrType)le.drivers_license_state),TRIM((SALT311.StrType)le.drivers_license),TRIM((SALT311.StrType)le.geo_lat),TRIM((SALT311.StrType)le.geo_long),TRIM((SALT311.StrType)le.reported_date),IF (le.file_type <> 0,TRIM((SALT311.StrType)le.file_type), ''),TRIM((SALT311.StrType)le.deceitful_confidence),TRIM((SALT311.StrType)le.reported_by),TRIM((SALT311.StrType)le.reason_description),TRIM((SALT311.StrType)le.event_type_1),TRIM((SALT311.StrType)le.event_entity_1)));
  SELF.FldNo := C;
END;
SHARED FldInv0 := NORMALIZE(h,57,Into(LEFT,COUNTER));
// Move everything into 'pairs' form so processing can be done 'in library'
SALT311.MAC_Correlate.Data_Layout IntoP(h le,UNSIGNED C) := TRANSFORM
  SELF.FldNo1 := 1 + (C / 57);
  SELF.FldNo2 := 1 + (C % 57);
  SELF.Fld1 := TRIM(CHOOSE(SELF.FldNo1,IF (le.inqlog_id <> 0,TRIM((SALT311.StrType)le.inqlog_id), ''),TRIM((SALT311.StrType)le.customer_id),TRIM((SALT311.StrType)le.transaction_id),TRIM((SALT311.StrType)le.date_of_transaction),TRIM((SALT311.StrType)le.household_id),TRIM((SALT311.StrType)le.customer_person_id),TRIM((SALT311.StrType)le.customer_program),TRIM((SALT311.StrType)le.reason_for_transaction_activity),TRIM((SALT311.StrType)le.inquiry_source),TRIM((SALT311.StrType)le.customer_county),TRIM((SALT311.StrType)le.customer_state),TRIM((SALT311.StrType)le.customer_agency_vertical_type),TRIM((SALT311.StrType)le.ssn),TRIM((SALT311.StrType)le.dob),IF (le.rawlinkid <> 0,TRIM((SALT311.StrType)le.rawlinkid), ''),TRIM((SALT311.StrType)le.raw_full_name),TRIM((SALT311.StrType)le.raw_title),TRIM((SALT311.StrType)le.raw_first_name),TRIM((SALT311.StrType)le.raw_middle_name),TRIM((SALT311.StrType)le.raw_last_name),TRIM((SALT311.StrType)le.raw_orig_suffix),TRIM((SALT311.StrType)le.full_address),TRIM((SALT311.StrType)le.street_1),TRIM((SALT311.StrType)le.city),TRIM((SALT311.StrType)le.state),TRIM((SALT311.StrType)le.zip),TRIM((SALT311.StrType)le.county),TRIM((SALT311.StrType)le.mailing_street_1),TRIM((SALT311.StrType)le.mailing_city),TRIM((SALT311.StrType)le.mailing_state),TRIM((SALT311.StrType)le.mailing_zip),TRIM((SALT311.StrType)le.mailing_county),TRIM((SALT311.StrType)le.phone_number),IF (le.ultid <> 0,TRIM((SALT311.StrType)le.ultid), ''),IF (le.orgid <> 0,TRIM((SALT311.StrType)le.orgid), ''),IF (le.seleid <> 0,TRIM((SALT311.StrType)le.seleid), ''),TRIM((SALT311.StrType)le.tin),TRIM((SALT311.StrType)le.email_address),IF (le.appended_provider_id <> 0,TRIM((SALT311.StrType)le.appended_provider_id), ''),IF (le.lnpid <> 0,TRIM((SALT311.StrType)le.lnpid), ''),TRIM((SALT311.StrType)le.npi),TRIM((SALT311.StrType)le.ip_address),TRIM((SALT311.StrType)le.device_id),TRIM((SALT311.StrType)le.professional_id),TRIM((SALT311.StrType)le.bank_routing_number_1),TRIM((SALT311.StrType)le.bank_account_number_1),TRIM((SALT311.StrType)le.drivers_license_state),TRIM((SALT311.StrType)le.drivers_license),TRIM((SALT311.StrType)le.geo_lat),TRIM((SALT311.StrType)le.geo_long),TRIM((SALT311.StrType)le.reported_date),IF (le.file_type <> 0,TRIM((SALT311.StrType)le.file_type), ''),TRIM((SALT311.StrType)le.deceitful_confidence),TRIM((SALT311.StrType)le.reported_by),TRIM((SALT311.StrType)le.reason_description),TRIM((SALT311.StrType)le.event_type_1),TRIM((SALT311.StrType)le.event_entity_1)));
  SELF.Fld2 := TRIM(CHOOSE(SELF.FldNo2,IF (le.inqlog_id <> 0,TRIM((SALT311.StrType)le.inqlog_id), ''),TRIM((SALT311.StrType)le.customer_id),TRIM((SALT311.StrType)le.transaction_id),TRIM((SALT311.StrType)le.date_of_transaction),TRIM((SALT311.StrType)le.household_id),TRIM((SALT311.StrType)le.customer_person_id),TRIM((SALT311.StrType)le.customer_program),TRIM((SALT311.StrType)le.reason_for_transaction_activity),TRIM((SALT311.StrType)le.inquiry_source),TRIM((SALT311.StrType)le.customer_county),TRIM((SALT311.StrType)le.customer_state),TRIM((SALT311.StrType)le.customer_agency_vertical_type),TRIM((SALT311.StrType)le.ssn),TRIM((SALT311.StrType)le.dob),IF (le.rawlinkid <> 0,TRIM((SALT311.StrType)le.rawlinkid), ''),TRIM((SALT311.StrType)le.raw_full_name),TRIM((SALT311.StrType)le.raw_title),TRIM((SALT311.StrType)le.raw_first_name),TRIM((SALT311.StrType)le.raw_middle_name),TRIM((SALT311.StrType)le.raw_last_name),TRIM((SALT311.StrType)le.raw_orig_suffix),TRIM((SALT311.StrType)le.full_address),TRIM((SALT311.StrType)le.street_1),TRIM((SALT311.StrType)le.city),TRIM((SALT311.StrType)le.state),TRIM((SALT311.StrType)le.zip),TRIM((SALT311.StrType)le.county),TRIM((SALT311.StrType)le.mailing_street_1),TRIM((SALT311.StrType)le.mailing_city),TRIM((SALT311.StrType)le.mailing_state),TRIM((SALT311.StrType)le.mailing_zip),TRIM((SALT311.StrType)le.mailing_county),TRIM((SALT311.StrType)le.phone_number),IF (le.ultid <> 0,TRIM((SALT311.StrType)le.ultid), ''),IF (le.orgid <> 0,TRIM((SALT311.StrType)le.orgid), ''),IF (le.seleid <> 0,TRIM((SALT311.StrType)le.seleid), ''),TRIM((SALT311.StrType)le.tin),TRIM((SALT311.StrType)le.email_address),IF (le.appended_provider_id <> 0,TRIM((SALT311.StrType)le.appended_provider_id), ''),IF (le.lnpid <> 0,TRIM((SALT311.StrType)le.lnpid), ''),TRIM((SALT311.StrType)le.npi),TRIM((SALT311.StrType)le.ip_address),TRIM((SALT311.StrType)le.device_id),TRIM((SALT311.StrType)le.professional_id),TRIM((SALT311.StrType)le.bank_routing_number_1),TRIM((SALT311.StrType)le.bank_account_number_1),TRIM((SALT311.StrType)le.drivers_license_state),TRIM((SALT311.StrType)le.drivers_license),TRIM((SALT311.StrType)le.geo_lat),TRIM((SALT311.StrType)le.geo_long),TRIM((SALT311.StrType)le.reported_date),IF (le.file_type <> 0,TRIM((SALT311.StrType)le.file_type), ''),TRIM((SALT311.StrType)le.deceitful_confidence),TRIM((SALT311.StrType)le.reported_by),TRIM((SALT311.StrType)le.reason_description),TRIM((SALT311.StrType)le.event_type_1),TRIM((SALT311.StrType)le.event_entity_1)));
  END;
SHARED Pairs0 := NORMALIZE(ENTH(h,Config.CorrelateSampleSize),57*57,IntoP(LEFT,COUNTER))(FldNo1<FldNo2);
SHARED FldIds := DATASET([{1,'inqlog_id'}
      ,{2,'customer_id'}
      ,{3,'transaction_id'}
      ,{4,'date_of_transaction'}
      ,{5,'household_id'}
      ,{6,'customer_person_id'}
      ,{7,'customer_program'}
      ,{8,'reason_for_transaction_activity'}
      ,{9,'inquiry_source'}
      ,{10,'customer_county'}
      ,{11,'customer_state'}
      ,{12,'customer_agency_vertical_type'}
      ,{13,'ssn'}
      ,{14,'dob'}
      ,{15,'rawlinkid'}
      ,{16,'raw_full_name'}
      ,{17,'raw_title'}
      ,{18,'raw_first_name'}
      ,{19,'raw_middle_name'}
      ,{20,'raw_last_name'}
      ,{21,'raw_orig_suffix'}
      ,{22,'full_address'}
      ,{23,'street_1'}
      ,{24,'city'}
      ,{25,'state'}
      ,{26,'zip'}
      ,{27,'county'}
      ,{28,'mailing_street_1'}
      ,{29,'mailing_city'}
      ,{30,'mailing_state'}
      ,{31,'mailing_zip'}
      ,{32,'mailing_county'}
      ,{33,'phone_number'}
      ,{34,'ultid'}
      ,{35,'orgid'}
      ,{36,'seleid'}
      ,{37,'tin'}
      ,{38,'email_address'}
      ,{39,'appended_provider_id'}
      ,{40,'lnpid'}
      ,{41,'npi'}
      ,{42,'ip_address'}
      ,{43,'device_id'}
      ,{44,'professional_id'}
      ,{45,'bank_routing_number_1'}
      ,{46,'bank_account_number_1'}
      ,{47,'drivers_license_state'}
      ,{48,'drivers_license'}
      ,{49,'geo_lat'}
      ,{50,'geo_long'}
      ,{51,'reported_date'}
      ,{52,'file_type'}
      ,{53,'deceitful_confidence'}
      ,{54,'reported_by'}
      ,{55,'reason_description'}
      ,{56,'event_type_1'}
      ,{57,'event_entity_1'}],SALT311.MAC_Character_Counts.Field_Identification);
EXPORT AllProfiles := SALT311.MAC_Character_Counts.FN_Profile(FldInv0,FldIds);

EXPORT SrcProfiles := SALT311.MAC_Character_Counts.Src_Profile(FldInv0,FldIds);

EXPORT Correlations := SALT311.MAC_Correlate.Fn_Profile(Pairs0,FldIds);


ErrorRecord := RECORD
  UNSIGNED1 FieldNum;
  UNSIGNED1 ErrorNum;
END;
ErrorRecord NoteErrors(h le,UNSIGNED1 c) := TRANSFORM
  SELF.ErrorNum := CHOOSE(c,
    Deltabase_Fields.InValid_inqlog_id((SALT311.StrType)le.inqlog_id),
    Deltabase_Fields.InValid_customer_id((SALT311.StrType)le.customer_id),
    Deltabase_Fields.InValid_transaction_id((SALT311.StrType)le.transaction_id),
    Deltabase_Fields.InValid_date_of_transaction((SALT311.StrType)le.date_of_transaction),
    Deltabase_Fields.InValid_household_id((SALT311.StrType)le.household_id),
    Deltabase_Fields.InValid_customer_person_id((SALT311.StrType)le.customer_person_id),
    Deltabase_Fields.InValid_customer_program((SALT311.StrType)le.customer_program),
    Deltabase_Fields.InValid_reason_for_transaction_activity((SALT311.StrType)le.reason_for_transaction_activity),
    Deltabase_Fields.InValid_inquiry_source((SALT311.StrType)le.inquiry_source),
    Deltabase_Fields.InValid_customer_county((SALT311.StrType)le.customer_county),
    Deltabase_Fields.InValid_customer_state((SALT311.StrType)le.customer_state),
    Deltabase_Fields.InValid_customer_agency_vertical_type((SALT311.StrType)le.customer_agency_vertical_type),
    Deltabase_Fields.InValid_ssn((SALT311.StrType)le.ssn),
    Deltabase_Fields.InValid_dob((SALT311.StrType)le.dob),
    Deltabase_Fields.InValid_rawlinkid((SALT311.StrType)le.rawlinkid),
    Deltabase_Fields.InValid_raw_full_name((SALT311.StrType)le.raw_full_name),
    Deltabase_Fields.InValid_raw_title((SALT311.StrType)le.raw_title),
    Deltabase_Fields.InValid_raw_first_name((SALT311.StrType)le.raw_first_name),
    Deltabase_Fields.InValid_raw_middle_name((SALT311.StrType)le.raw_middle_name),
    Deltabase_Fields.InValid_raw_last_name((SALT311.StrType)le.raw_last_name),
    Deltabase_Fields.InValid_raw_orig_suffix((SALT311.StrType)le.raw_orig_suffix),
    Deltabase_Fields.InValid_full_address((SALT311.StrType)le.full_address),
    Deltabase_Fields.InValid_street_1((SALT311.StrType)le.street_1),
    Deltabase_Fields.InValid_city((SALT311.StrType)le.city),
    Deltabase_Fields.InValid_state((SALT311.StrType)le.state),
    Deltabase_Fields.InValid_zip((SALT311.StrType)le.zip),
    Deltabase_Fields.InValid_county((SALT311.StrType)le.county),
    Deltabase_Fields.InValid_mailing_street_1((SALT311.StrType)le.mailing_street_1),
    Deltabase_Fields.InValid_mailing_city((SALT311.StrType)le.mailing_city),
    Deltabase_Fields.InValid_mailing_state((SALT311.StrType)le.mailing_state),
    Deltabase_Fields.InValid_mailing_zip((SALT311.StrType)le.mailing_zip),
    Deltabase_Fields.InValid_mailing_county((SALT311.StrType)le.mailing_county),
    Deltabase_Fields.InValid_phone_number((SALT311.StrType)le.phone_number),
    Deltabase_Fields.InValid_ultid((SALT311.StrType)le.ultid),
    Deltabase_Fields.InValid_orgid((SALT311.StrType)le.orgid),
    Deltabase_Fields.InValid_seleid((SALT311.StrType)le.seleid),
    Deltabase_Fields.InValid_tin((SALT311.StrType)le.tin),
    Deltabase_Fields.InValid_email_address((SALT311.StrType)le.email_address),
    Deltabase_Fields.InValid_appended_provider_id((SALT311.StrType)le.appended_provider_id),
    Deltabase_Fields.InValid_lnpid((SALT311.StrType)le.lnpid),
    Deltabase_Fields.InValid_npi((SALT311.StrType)le.npi),
    Deltabase_Fields.InValid_ip_address((SALT311.StrType)le.ip_address),
    Deltabase_Fields.InValid_device_id((SALT311.StrType)le.device_id),
    Deltabase_Fields.InValid_professional_id((SALT311.StrType)le.professional_id),
    Deltabase_Fields.InValid_bank_routing_number_1((SALT311.StrType)le.bank_routing_number_1),
    Deltabase_Fields.InValid_bank_account_number_1((SALT311.StrType)le.bank_account_number_1),
    Deltabase_Fields.InValid_drivers_license_state((SALT311.StrType)le.drivers_license_state),
    Deltabase_Fields.InValid_drivers_license((SALT311.StrType)le.drivers_license),
    Deltabase_Fields.InValid_geo_lat((SALT311.StrType)le.geo_lat),
    Deltabase_Fields.InValid_geo_long((SALT311.StrType)le.geo_long),
    Deltabase_Fields.InValid_reported_date((SALT311.StrType)le.reported_date),
    Deltabase_Fields.InValid_file_type((SALT311.StrType)le.file_type),
    Deltabase_Fields.InValid_deceitful_confidence((SALT311.StrType)le.deceitful_confidence),
    Deltabase_Fields.InValid_reported_by((SALT311.StrType)le.reported_by),
    Deltabase_Fields.InValid_reason_description((SALT311.StrType)le.reason_description),
    Deltabase_Fields.InValid_event_type_1((SALT311.StrType)le.event_type_1),
    Deltabase_Fields.InValid_event_entity_1((SALT311.StrType)le.event_entity_1),
    0);
  SELF.FieldNum := IF(SELF.ErrorNum=0,SKIP,c); // Bail early to avoid creating record
END;
Errors := NORMALIZE(h,57,NoteErrors(LEFT,COUNTER));
ErrorRecordsTotals := RECORD
  Errors.FieldNum;
  Errors.ErrorNum;
  UNSIGNED Cnt := COUNT(GROUP);
END;
TotalErrors := TABLE(Errors,ErrorRecordsTotals,FieldNum,ErrorNum,FEW);
PrettyErrorTotals := RECORD
  FieldNme := Deltabase_Fields.FieldName(TotalErrors.FieldNum);
  FieldType := CHOOSE(TotalErrors.FieldNum,'invalid_numeric','invalid_numeric_string','invalid_alphanumeric','invalid_date','invalid_alphanumeric','invalid_alphanumeric','invalid_alpha','invalid_alphanumeric','invalid_alphanumeric','invalid_alphanumeric','invalid_state','invalid_alphanumeric','invalid_ssn','invalid_date','invalid_numeric','invalid_name','invalid_alphanumeric','invalid_name','invalid_name','invalid_name','invalid_alphanumeric','invalid_alphanumeric','invalid_alphanumeric','invalid_name','invalid_state','invalid_zip','invalid_alphanumeric','invalid_alphanumeric','invalid_name','invalid_state','invalid_zip','invalid_alphanumeric','invalid_phone','invalid_numeric','invalid_numeric','invalid_numeric','invalid_alphanumeric','invalid_email','invalid_numeric','invalid_numeric','invalid_alphanumeric','invalid_ip','invalid_alphanumeric','invalid_alphanumeric','invalid_alphanumeric','invalid_alphanumeric','invalid_alphanumeric','invalid_alphanumeric','invalid_real_string','invalid_real_string','invalid_date','invalid_numeric','invalid_numeric_string','invalid_alphanumeric','invalid_alphanumeric','invalid_numeric_string','invalid_alphanumeric');
  ErrorMessage := CHOOSE(TotalErrors.FieldNum,Deltabase_Fields.InValidMessage_inqlog_id(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_customer_id(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_transaction_id(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_date_of_transaction(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_household_id(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_customer_person_id(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_customer_program(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_reason_for_transaction_activity(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_inquiry_source(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_customer_county(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_customer_state(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_customer_agency_vertical_type(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_ssn(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_dob(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_rawlinkid(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_raw_full_name(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_raw_title(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_raw_first_name(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_raw_middle_name(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_raw_last_name(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_raw_orig_suffix(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_full_address(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_street_1(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_city(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_state(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_zip(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_county(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_mailing_street_1(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_mailing_city(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_mailing_state(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_mailing_zip(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_mailing_county(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_phone_number(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_ultid(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_orgid(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_seleid(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_tin(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_email_address(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_appended_provider_id(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_lnpid(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_npi(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_ip_address(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_device_id(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_professional_id(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_bank_routing_number_1(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_bank_account_number_1(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_drivers_license_state(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_drivers_license(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_geo_lat(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_geo_long(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_reported_date(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_file_type(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_deceitful_confidence(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_reported_by(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_reason_description(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_event_type_1(TotalErrors.ErrorNum),Deltabase_Fields.InValidMessage_event_entity_1(TotalErrors.ErrorNum));
  TotalErrors.Cnt;
END;
ValErr := TABLE(TotalErrors,PrettyErrorTotals);
EXPORT ValidityErrors := ValErr;
EXPORT StandardStats(BOOLEAN doSummaryGlobal = TRUE, BOOLEAN doAllProfiles = TRUE) := FUNCTION
  myTimeStamp := (UNSIGNED6)SALT311.Fn_Now('YYYYMMDDHHMMSS') : INDEPENDENT;
  fieldPopulationOverall := Summary('');

  SALT311.mod_StandardStatsTransforms.mac_hygieneSummaryTransform(Scrubs_FraudGov, Deltabase_Fields, 'RECORDOF(fieldPopulationOverall)', FALSE);

  fieldPopulationOverall_Standard := IF(doSummaryGlobal, NORMALIZE(fieldPopulationOverall, COUNT(FldIds) * 6, xSummary(LEFT, COUNTER, myTimeStamp, 'all', 'all')));
  fieldPopulationOverall_TotalRecs_Standard := IF(doSummaryGlobal, SALT311.mod_StandardStatsTransforms.mac_hygieneTotalRecs(fieldPopulationOverall, myTimeStamp, 'all', FALSE, 'all'));
  allProfiles_Standard := IF(doAllProfiles, SALT311.mod_StandardStatsTransforms.hygieneAllProfiles(AllProfiles, myTimeStamp, 10, 'all'));

  RETURN fieldPopulationOverall_Standard & fieldPopulationOverall_TotalRecs_Standard & allProfiles_Standard;
END;
END;
//Import:Scrubs_FraudGov.Deltabase_BWR_Hygiene
//This is the code to execute in a builder window
#OPTION('multiplePersistInstances', FALSE);
#workunit('name','Scrubs_FraudGov.Deltabase_BWR_Hygiene - Hygiene & Stats - SALT V3.11.11');
IMPORT Scrubs_FraudGov,SALT311;
// First create an instantiated hygiene module
  infile := Scrubs_FraudGov.Deltabase_In_Deltabase;
  ip := DISTRIBUTE(infile, SKEW(0.1));
  h := Scrubs_FraudGov.Deltabase_hygiene(ip);
  p := h.AllProfiles; // Detailed profile of every field
  OUTPUT(h.Summary('SummaryReport'),ALL,NAMED('Summary'));
  OUTPUT(h.invSummary,NAMED('InvertedSummary'),ALL);
  OUTPUT(p,NAMED('AllProfiles'),ALL); // Detailed profile of every field
  OUTPUT(h.Correlations,NAMED('Correlations'),ALL); // Which fields are related to which other fields
  OUTPUT(h.ValidityErrors,NAMED('ValidityErrors'),ALL); // Violations of FieldType statements
  OUTPUT(SALT311.MAC_Character_Counts.EclRecord(p,'Deltabase_Layout_Deltabase'),NAMED('OptimizedLayout'));// File layout suggested by data
  // Produces field types that match the most common 99.9% of your data. Change to 100 to match all your data
  OUTPUT(SALT311.MAC_Character_Counts.FieldTypes(p,99.9),NAMED('Types'));
  // ****** Cross Tabs *******
  // It is possible to create a cross table between any two fields, see documentation on SALT311.MAC_CrossTab
//Import:Scrubs_FraudGov.Deltabase_MAC_PopulationStatistics

EXPORT Deltabase_MAC_PopulationStatistics(infile,Ref='',Input_inqlog_id = '',Input_customer_id = '',Input_transaction_id = '',Input_date_of_transaction = '',Input_household_id = '',Input_customer_person_id = '',Input_customer_program = '',Input_reason_for_transaction_activity = '',Input_inquiry_source = '',Input_customer_county = '',Input_customer_state = '',Input_customer_agency_vertical_type = '',Input_ssn = '',Input_dob = '',Input_rawlinkid = '',Input_raw_full_name = '',Input_raw_title = '',Input_raw_first_name = '',Input_raw_middle_name = '',Input_raw_last_name = '',Input_raw_orig_suffix = '',Input_full_address = '',Input_street_1 = '',Input_city = '',Input_state = '',Input_zip = '',Input_county = '',Input_mailing_street_1 = '',Input_mailing_city = '',Input_mailing_state = '',Input_mailing_zip = '',Input_mailing_county = '',Input_phone_number = '',Input_ultid = '',Input_orgid = '',Input_seleid = '',Input_tin = '',Input_email_address = '',Input_appended_provider_id = '',Input_lnpid = '',Input_npi = '',Input_ip_address = '',Input_device_id = '',Input_professional_id = '',Input_bank_routing_number_1 = '',Input_bank_account_number_1 = '',Input_drivers_license_state = '',Input_drivers_license = '',Input_geo_lat = '',Input_geo_long = '',Input_reported_date = '',Input_file_type = '',Input_deceitful_confidence = '',Input_reported_by = '',Input_reason_description = '',Input_event_type_1 = '',Input_event_entity_1 = '',OutFile) := MACRO
  IMPORT SALT311,Scrubs_FraudGov;
  #uniquename(of)
  %of% := RECORD
    SALT311.Str512Type fields;
  END;
  #uniquename(ot)
  %of% %ot%(infile le) := TRANSFORM
    SELF.fields :=
    #IF( #TEXT(Input_inqlog_id)='' )
      '' 
    #ELSE
        IF( le.Input_inqlog_id = (TYPEOF(le.Input_inqlog_id))'','',':inqlog_id')
    #END

+    #IF( #TEXT(Input_customer_id)='' )
      '' 
    #ELSE
        IF( le.Input_customer_id = (TYPEOF(le.Input_customer_id))'','',':customer_id')
    #END

+    #IF( #TEXT(Input_transaction_id)='' )
      '' 
    #ELSE
        IF( le.Input_transaction_id = (TYPEOF(le.Input_transaction_id))'','',':transaction_id')
    #END

+    #IF( #TEXT(Input_date_of_transaction)='' )
      '' 
    #ELSE
        IF( le.Input_date_of_transaction = (TYPEOF(le.Input_date_of_transaction))'','',':date_of_transaction')
    #END

+    #IF( #TEXT(Input_household_id)='' )
      '' 
    #ELSE
        IF( le.Input_household_id = (TYPEOF(le.Input_household_id))'','',':household_id')
    #END

+    #IF( #TEXT(Input_customer_person_id)='' )
      '' 
    #ELSE
        IF( le.Input_customer_person_id = (TYPEOF(le.Input_customer_person_id))'','',':customer_person_id')
    #END

+    #IF( #TEXT(Input_customer_program)='' )
      '' 
    #ELSE
        IF( le.Input_customer_program = (TYPEOF(le.Input_customer_program))'','',':customer_program')
    #END

+    #IF( #TEXT(Input_reason_for_transaction_activity)='' )
      '' 
    #ELSE
        IF( le.Input_reason_for_transaction_activity = (TYPEOF(le.Input_reason_for_transaction_activity))'','',':reason_for_transaction_activity')
    #END

+    #IF( #TEXT(Input_inquiry_source)='' )
      '' 
    #ELSE
        IF( le.Input_inquiry_source = (TYPEOF(le.Input_inquiry_source))'','',':inquiry_source')
    #END

+    #IF( #TEXT(Input_customer_county)='' )
      '' 
    #ELSE
        IF( le.Input_customer_county = (TYPEOF(le.Input_customer_county))'','',':customer_county')
    #END

+    #IF( #TEXT(Input_customer_state)='' )
      '' 
    #ELSE
        IF( le.Input_customer_state = (TYPEOF(le.Input_customer_state))'','',':customer_state')
    #END

+    #IF( #TEXT(Input_customer_agency_vertical_type)='' )
      '' 
    #ELSE
        IF( le.Input_customer_agency_vertical_type = (TYPEOF(le.Input_customer_agency_vertical_type))'','',':customer_agency_vertical_type')
    #END

+    #IF( #TEXT(Input_ssn)='' )
      '' 
    #ELSE
        IF( le.Input_ssn = (TYPEOF(le.Input_ssn))'','',':ssn')
    #END

+    #IF( #TEXT(Input_dob)='' )
      '' 
    #ELSE
        IF( le.Input_dob = (TYPEOF(le.Input_dob))'','',':dob')
    #END

+    #IF( #TEXT(Input_rawlinkid)='' )
      '' 
    #ELSE
        IF( le.Input_rawlinkid = (TYPEOF(le.Input_rawlinkid))'','',':rawlinkid')
    #END

+    #IF( #TEXT(Input_raw_full_name)='' )
      '' 
    #ELSE
        IF( le.Input_raw_full_name = (TYPEOF(le.Input_raw_full_name))'','',':raw_full_name')
    #END

+    #IF( #TEXT(Input_raw_title)='' )
      '' 
    #ELSE
        IF( le.Input_raw_title = (TYPEOF(le.Input_raw_title))'','',':raw_title')
    #END

+    #IF( #TEXT(Input_raw_first_name)='' )
      '' 
    #ELSE
        IF( le.Input_raw_first_name = (TYPEOF(le.Input_raw_first_name))'','',':raw_first_name')
    #END

+    #IF( #TEXT(Input_raw_middle_name)='' )
      '' 
    #ELSE
        IF( le.Input_raw_middle_name = (TYPEOF(le.Input_raw_middle_name))'','',':raw_middle_name')
    #END

+    #IF( #TEXT(Input_raw_last_name)='' )
      '' 
    #ELSE
        IF( le.Input_raw_last_name = (TYPEOF(le.Input_raw_last_name))'','',':raw_last_name')
    #END

+    #IF( #TEXT(Input_raw_orig_suffix)='' )
      '' 
    #ELSE
        IF( le.Input_raw_orig_suffix = (TYPEOF(le.Input_raw_orig_suffix))'','',':raw_orig_suffix')
    #END

+    #IF( #TEXT(Input_full_address)='' )
      '' 
    #ELSE
        IF( le.Input_full_address = (TYPEOF(le.Input_full_address))'','',':full_address')
    #END

+    #IF( #TEXT(Input_street_1)='' )
      '' 
    #ELSE
        IF( le.Input_street_1 = (TYPEOF(le.Input_street_1))'','',':street_1')
    #END

+    #IF( #TEXT(Input_city)='' )
      '' 
    #ELSE
        IF( le.Input_city = (TYPEOF(le.Input_city))'','',':city')
    #END

+    #IF( #TEXT(Input_state)='' )
      '' 
    #ELSE
        IF( le.Input_state = (TYPEOF(le.Input_state))'','',':state')
    #END

+    #IF( #TEXT(Input_zip)='' )
      '' 
    #ELSE
        IF( le.Input_zip = (TYPEOF(le.Input_zip))'','',':zip')
    #END

+    #IF( #TEXT(Input_county)='' )
      '' 
    #ELSE
        IF( le.Input_county = (TYPEOF(le.Input_county))'','',':county')
    #END

+    #IF( #TEXT(Input_mailing_street_1)='' )
      '' 
    #ELSE
        IF( le.Input_mailing_street_1 = (TYPEOF(le.Input_mailing_street_1))'','',':mailing_street_1')
    #END

+    #IF( #TEXT(Input_mailing_city)='' )
      '' 
    #ELSE
        IF( le.Input_mailing_city = (TYPEOF(le.Input_mailing_city))'','',':mailing_city')
    #END

+    #IF( #TEXT(Input_mailing_state)='' )
      '' 
    #ELSE
        IF( le.Input_mailing_state = (TYPEOF(le.Input_mailing_state))'','',':mailing_state')
    #END

+    #IF( #TEXT(Input_mailing_zip)='' )
      '' 
    #ELSE
        IF( le.Input_mailing_zip = (TYPEOF(le.Input_mailing_zip))'','',':mailing_zip')
    #END

+    #IF( #TEXT(Input_mailing_county)='' )
      '' 
    #ELSE
        IF( le.Input_mailing_county = (TYPEOF(le.Input_mailing_county))'','',':mailing_county')
    #END

+    #IF( #TEXT(Input_phone_number)='' )
      '' 
    #ELSE
        IF( le.Input_phone_number = (TYPEOF(le.Input_phone_number))'','',':phone_number')
    #END

+    #IF( #TEXT(Input_ultid)='' )
      '' 
    #ELSE
        IF( le.Input_ultid = (TYPEOF(le.Input_ultid))'','',':ultid')
    #END

+    #IF( #TEXT(Input_orgid)='' )
      '' 
    #ELSE
        IF( le.Input_orgid = (TYPEOF(le.Input_orgid))'','',':orgid')
    #END

+    #IF( #TEXT(Input_seleid)='' )
      '' 
    #ELSE
        IF( le.Input_seleid = (TYPEOF(le.Input_seleid))'','',':seleid')
    #END

+    #IF( #TEXT(Input_tin)='' )
      '' 
    #ELSE
        IF( le.Input_tin = (TYPEOF(le.Input_tin))'','',':tin')
    #END

+    #IF( #TEXT(Input_email_address)='' )
      '' 
    #ELSE
        IF( le.Input_email_address = (TYPEOF(le.Input_email_address))'','',':email_address')
    #END

+    #IF( #TEXT(Input_appended_provider_id)='' )
      '' 
    #ELSE
        IF( le.Input_appended_provider_id = (TYPEOF(le.Input_appended_provider_id))'','',':appended_provider_id')
    #END

+    #IF( #TEXT(Input_lnpid)='' )
      '' 
    #ELSE
        IF( le.Input_lnpid = (TYPEOF(le.Input_lnpid))'','',':lnpid')
    #END

+    #IF( #TEXT(Input_npi)='' )
      '' 
    #ELSE
        IF( le.Input_npi = (TYPEOF(le.Input_npi))'','',':npi')
    #END

+    #IF( #TEXT(Input_ip_address)='' )
      '' 
    #ELSE
        IF( le.Input_ip_address = (TYPEOF(le.Input_ip_address))'','',':ip_address')
    #END

+    #IF( #TEXT(Input_device_id)='' )
      '' 
    #ELSE
        IF( le.Input_device_id = (TYPEOF(le.Input_device_id))'','',':device_id')
    #END

+    #IF( #TEXT(Input_professional_id)='' )
      '' 
    #ELSE
        IF( le.Input_professional_id = (TYPEOF(le.Input_professional_id))'','',':professional_id')
    #END

+    #IF( #TEXT(Input_bank_routing_number_1)='' )
      '' 
    #ELSE
        IF( le.Input_bank_routing_number_1 = (TYPEOF(le.Input_bank_routing_number_1))'','',':bank_routing_number_1')
    #END

+    #IF( #TEXT(Input_bank_account_number_1)='' )
      '' 
    #ELSE
        IF( le.Input_bank_account_number_1 = (TYPEOF(le.Input_bank_account_number_1))'','',':bank_account_number_1')
    #END

+    #IF( #TEXT(Input_drivers_license_state)='' )
      '' 
    #ELSE
        IF( le.Input_drivers_license_state = (TYPEOF(le.Input_drivers_license_state))'','',':drivers_license_state')
    #END

+    #IF( #TEXT(Input_drivers_license)='' )
      '' 
    #ELSE
        IF( le.Input_drivers_license = (TYPEOF(le.Input_drivers_license))'','',':drivers_license')
    #END

+    #IF( #TEXT(Input_geo_lat)='' )
      '' 
    #ELSE
        IF( le.Input_geo_lat = (TYPEOF(le.Input_geo_lat))'','',':geo_lat')
    #END

+    #IF( #TEXT(Input_geo_long)='' )
      '' 
    #ELSE
        IF( le.Input_geo_long = (TYPEOF(le.Input_geo_long))'','',':geo_long')
    #END

+    #IF( #TEXT(Input_reported_date)='' )
      '' 
    #ELSE
        IF( le.Input_reported_date = (TYPEOF(le.Input_reported_date))'','',':reported_date')
    #END

+    #IF( #TEXT(Input_file_type)='' )
      '' 
    #ELSE
        IF( le.Input_file_type = (TYPEOF(le.Input_file_type))'','',':file_type')
    #END

+    #IF( #TEXT(Input_deceitful_confidence)='' )
      '' 
    #ELSE
        IF( le.Input_deceitful_confidence = (TYPEOF(le.Input_deceitful_confidence))'','',':deceitful_confidence')
    #END

+    #IF( #TEXT(Input_reported_by)='' )
      '' 
    #ELSE
        IF( le.Input_reported_by = (TYPEOF(le.Input_reported_by))'','',':reported_by')
    #END

+    #IF( #TEXT(Input_reason_description)='' )
      '' 
    #ELSE
        IF( le.Input_reason_description = (TYPEOF(le.Input_reason_description))'','',':reason_description')
    #END

+    #IF( #TEXT(Input_event_type_1)='' )
      '' 
    #ELSE
        IF( le.Input_event_type_1 = (TYPEOF(le.Input_event_type_1))'','',':event_type_1')
    #END

+    #IF( #TEXT(Input_event_entity_1)='' )
      '' 
    #ELSE
        IF( le.Input_event_entity_1 = (TYPEOF(le.Input_event_entity_1))'','',':event_entity_1')
    #END
;
  END;
  #uniquename(op)
  %op% := PROJECT(infile,%ot%(LEFT));
  #uniquename(ort)
  %ort% := RECORD
    %op%.fields;
    UNSIGNED cnt := COUNT(GROUP);
  END;
  outfile := TOPN( TABLE( %op%, %ort%, fields, FEW ), 1000, -cnt );
ENDMACRO;
//Import:Scrubs_FraudGov.Deltabase_BWR_PopulationStatistics
//This is the code to execute in a builder window
#OPTION('multiplePersistInstances', FALSE);
#workunit('name','Scrubs_FraudGov.Deltabase_BWR_PopulationStatistics - Population Statistics - SALT V3.11.11');
IMPORT Scrubs_FraudGov,SALT311;
// In the line below substitute the file you want statistics for; and substitute any field names you can
  Scrubs_FraudGov.Deltabase_MAC_PopulationStatistics(YourFileName,/*Reference Field*/,/* inqlog_id_field */,/* customer_id_field */,/* transaction_id_field */,/* date_of_transaction_field */,/* household_id_field */,/* customer_person_id_field */,/* customer_program_field */,/* reason_for_transaction_activity_field */,/* inquiry_source_field */,/* customer_county_field */,/* customer_state_field */,/* customer_agency_vertical_type_field */,/* ssn_field */,/* dob_field */,/* rawlinkid_field */,/* raw_full_name_field */,/* raw_title_field */,/* raw_first_name_field */,/* raw_middle_name_field */,/* raw_last_name_field */,/* raw_orig_suffix_field */,/* full_address_field */,/* street_1_field */,/* city_field */,/* state_field */,/* zip_field */,/* county_field */,/* mailing_street_1_field */,/* mailing_city_field */,/* mailing_state_field */,/* mailing_zip_field */,/* mailing_county_field */,/* phone_number_field */,/* ultid_field */,/* orgid_field */,/* seleid_field */,/* tin_field */,/* email_address_field */,/* appended_provider_id_field */,/* lnpid_field */,/* npi_field */,/* ip_address_field */,/* device_id_field */,/* professional_id_field */,/* bank_routing_number_1_field */,/* bank_account_number_1_field */,/* drivers_license_state_field */,/* drivers_license_field */,/* geo_lat_field */,/* geo_long_field */,/* reported_date_field */,/* file_type_field */,/* deceitful_confidence_field */,/* reported_by_field */,/* reason_description_field */,/* event_type_1_field */,/* event_entity_1_field */,outfile);
  OUTPUT(outfile,NAMED('PopulationStatistics'));
//Import:Scrubs_FraudGov.Deltabase_BWR_DataUpdateStandardStats
//This is the code to execute in a builder window
#OPTION('multiplePersistInstances', FALSE);
#workunit('name','Scrubs_FraudGov.Deltabase_BWR_DataUpdateStandardStats - Data Update Standard Stats - SALT V3.11.11');
IMPORT Scrubs_FraudGov,SALT311;
mynewfile := ''; // THOR file containing new data
myprevfile := ''; // THOR file containing previous data (can be empty)
mystatsfile := ''; // output file name

// New and (optionally) previous versions of data
dsNew := DATASET(mynewfile, Scrubs_FraudGov.Deltabase_Layout_Deltabase, THOR);
dsPrev := DATASET(myprevfile, Scrubs_FraudGov.Deltabase_Layout_Deltabase, THOR);

hygieneStats := Scrubs_FraudGov.Deltabase_hygiene(dsNew).StandardStats();
scrubsStats := Scrubs_FraudGov.Deltabase_Scrubs.StandardStats(dsNew);
deltaStats := IF(TRIM(myprevfile) > '' AND EXISTS(dsPrev), Scrubs_FraudGov.Deltabase_Delta(dsPrev, dsNew).StandardStats());
allStats := hygieneStats & scrubsStats & deltaStats;
OUTPUT(allStats,, mystatsfile);
//Import:Scrubs_FraudGov.Config
IMPORT SALT311,STD;
EXPORT Config := MODULE,VIRTUAL
EXPORT CorrelateSampleSize := 76946752; // Size of sample used in hygiene.corelations (reduced due to large field count)
EXPORT ByPassCleave := FALSE; // If set to true Cleave process will not run in the next internal linking iteration.
EXPORT PersistExpire := 30; // PERSIST file expiration time in days.
EXPORT AttrValueType := SALT311.AttrValueType;
EXPORT KeysBitmapType := UNSIGNED4;
EXPORT KeysBitmapOffset := 16;
EXPORT MaxChildren := 100; // Maximum children allowed for a MULTIPLE(,LIST)
alg := ENUM(UNSIGNED1, Standard=0, NoTrailingHalfEdit);
EXPORT WithinEditN(SALT311.StrType l,UNSIGNED1 ll, SALT311.StrType r,UNSIGNED1 rl,UNSIGNED1 d, UNSIGNED1 edit_threshold=0,UNSIGNED1 mode=alg.Standard, BOOLEAN edFunction(SALT311.StrType l,UNSIGNED1 ll, SALT311.StrType r,UNSIGNED1 rl,UNSIGNED1 d,UNSIGNED1 mode) = SALT311.fn_EditDistance) := 
        SALT311.WithinEditNew(l, ll, r, rl, d, edit_threshold, mode, edFunction);
EXPORT JoinLimit := 10000;
// Configuration of individual fields
END;
//Import:Scrubs_FraudGov.Deltabase_GenerationMod
// Machine-readable versions of the spec file and subsets thereof
IMPORT SALT311;
EXPORT Deltabase_GenerationMod := MODULE(SALT311.iGenerationMod)

  // SALT Version info
  EXPORT salt_VERSION := 'V3.11.11';
  EXPORT salt_MODULE := 'SALT311'; // Optional override by HACK:SALTMODULE
  EXPORT salt_TOOLSMODULE := 'SALTTOOLS30'; // Optional override by HACK:SALTTOOLSMODULE

  // Core module configuration values
  EXPORT spc_MODULE := 'Scrubs_FraudGov';
  EXPORT spc_NAMESCOPE := 'Deltabase';
  EXPORT spc_PROCESS := '';
  EXPORT spc_PROCLAYOUTS := 'Process__Layouts';
  EXPORT spc_IDNAME := ''; // cluster id (input)
  EXPORT spc_IDFIELD := ''; // cluster id (output)
  EXPORT spc_RIDFIELD := ''; // record id
  EXPORT spc_CONFIG := 'Config';
  EXPORT spc_CONFIGPARAM := FALSE;
  EXPORT spc_SOURCEFIELD := '';
  EXPORT spc_FILEPREFIX := 'In_';
  EXPORT spc_FILENAME := 'Deltabase';
  EXPORT spc_INGESTSTATUS := '';
  EXPORT spc_EXTERNAL_MAPPING := 'UniqueID:';
  EXPORT spc_EXTERNAL_BATCH_PARAM := ',/* MY_ */,inqlog_id,customer_id,transaction_id,date_of_transaction,household_id,customer_person_id,customer_program,reason_for_transaction_activity,inquiry_source,customer_county,customer_state,customer_agency_vertical_type,ssn,dob,rawlinkid,raw_full_name,raw_title,raw_first_name,raw_middle_name,raw_last_name,raw_orig_suffix,full_address,street_1,city,state,zip,county,mailing_street_1,mailing_city,mailing_state,mailing_zip,mailing_county,phone_number,ultid,orgid,seleid,tin,email_address,appended_provider_id,lnpid,npi,ip_address,device_id,professional_id,bank_routing_number_1,bank_account_number_1,drivers_license_state,drivers_license,geo_lat,geo_long,reported_date,file_type,deceitful_confidence,reported_by,reason_description,event_type_1,event_entity_1';
  EXPORT spc_HAS_TWOSTEP := FALSE;
  EXPORT spc_HAS_PARTITION := FALSE;
  EXPORT spc_HAS_FIELDTYPES := TRUE;
  EXPORT spc_HAS_INCREMENTAL := FALSE;
  EXPORT spc_HAS_ASOF := FALSE;
  EXPORT spc_HAS_NONCONTIGUOUS := FALSE;
  EXPORT spc_HAS_SUPERFILES := FALSE;
  EXPORT spc_HAS_CONSISTENT := FALSE;
  EXPORT spc_HAS_EXTERNAL := FALSE;
  EXPORT spc_HAS_PARENTS := FALSE;
  EXPORT spc_HAS_FORCE := FALSE;
  EXPORT spc_HAS_BLOCKLINK := FALSE;

  // The entire spec file
  EXPORT spcString :=
    'ï»¿OPTIONS:-gh\n'
    + 'MODULE:Scrubs_FraudGov\n'
    + 'FILENAME:Deltabase\n'
    + 'NAMESCOPE:Deltabase\n'
    + '// Uncomment up to NINES for internal or external adl\n'
    + '// IDFIELD:EXISTS:<NameOfIDField>\n'
    + '// RIDFIELD:<NameOfRidField>\n'
    + '// RECORDS:<NumberOfRecordsInDataFile>\n'
    + '// POPULATION:<ExpectedNumberOfEntitiesInDataFile>\n'
    + '// NINES:<Precision required 3 = 99.9%, 2 = 99% etc>\n'
    + '// Uncomment Process if doing external adl\n'
    + '// PROCESS:<ProcessName>\n'
    + '// FIELDTYPE statements can be used to clean up (or check the cleaning) of individual fields\n'
    + '// BESTTYPE statements declare methods of generating the best value for a given cluster; this can also improve linking\n'
    + '// FUZZY can be used to create new types of FUZZY linking\n'
    + 'FIELDTYPE:invalid_alpha:ALLOW(\\NABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz):ONFAIL(BLANK)\n'
    + 'FIELDTYPE:invalid_alphanumeric:ALLOW(\\ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789):SPACES( <>{}[]-^=\'`!+&,./#()_):ONFAIL(BLANK)\n'
    + 'FIELDTYPE:invalid_email:ALLOW(\\-_.0123456789@ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz):ONFAIL(BLANK) \n'
    + 'FIELDTYPE:invalid_date:ALLOW(\\N0123456789):SPACES( ./:-):LEFTTRIM:ONFAIL(BLANK)\n'
    + 'FIELDTYPE:invalid_numeric:ALLOW(0123456789):ONFAIL(BLANK)\n'
    + 'FIELDTYPE:invalid_numeric_string:ALLOW(\\N-0123456789):ONFAIL(BLANK) \n'
    + 'FIELDTYPE:invalid_real:ALLOW(-.,0123456789):ONFAIL(BLANK)\n'
    + 'FIELDTYPE:invalid_real_string:ALLOW(\\N-.,0123456789):ONFAIL(BLANK)\n'
    + 'FIELDTYPE:invalid_zip:ALLOW(\\N-0123456789):SPACES( -):LEFTTRIM:LENGTHS(0,2,5,9,10):ONFAIL(BLANK)\n'
    + 'FIELDTYPE:invalid_state:ALLOW(\\ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz):LEFTTRIM:LENGTHS(0,2):ONFAIL(BLANK)\n'
    + 'FIELDTYPE:invalid_ssn:ALLOW(\\N0123456789):SPACES( -):LEFTTRIM:LENGTHS(0,2,9..):ONFAIL(BLANK)\n'
    + 'FIELDTYPE:invalid_phone:ALLOW(\\N0123456789):SPACES( +#()-):LEFTTRIM:LENGTHS(0,2,10..):ONFAIL(BLANK)\n'
    + 'FIELDTYPE:invalid_ip:ALLOW(\\N.x0123456789):SPACES( .):LEFTTRIM:ONFAIL(BLANK)\n'
    + 'FIELDTYPE:invalid_name:ALLOW(\\NABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz):LEFTTRIM:SPACES( \',):ONFAIL(BLANK)\n'
    + '// Remember to generate specificities and update the 0,0 placeholders below before running any sort of linking.\n'
    + '// If the actual specificity for a field is <1, round it up to 1 rather than down to 0.  If your cluster is running\n'
    + '// a shared repository, calling SALTTOOLS30.mac_Patch_SPC from the bottom of BWR_Specificities may be a convenience.\n'
    + 'FIELD:inqlog_id:TYPE(UNSIGNED6):LIKE(invalid_numeric):0,0\n'
    + 'FIELD:customer_id:TYPE(STRING20):LIKE(invalid_numeric_string):0,0\n'
    + 'FIELD:transaction_id:TYPE(STRING):LIKE(invalid_alphanumeric):0,0\n'
    + 'FIELD:date_of_transaction:TYPE(STRING10):LIKE(invalid_date):0,0\n'
    + 'FIELD:household_id:TYPE(STRING20):LIKE(invalid_alphanumeric):0,0\n'
    + 'FIELD:customer_person_id:TYPE(STRING20):LIKE(invalid_alphanumeric):0,0\n'
    + 'FIELD:customer_program:TYPE(STRING1):LIKE(invalid_alpha):0,0\n'
    + 'FIELD:reason_for_transaction_activity:TYPE(STRING):LIKE(invalid_alphanumeric):0,0\n'
    + 'FIELD:inquiry_source:TYPE(STRING100):LIKE(invalid_alphanumeric):0,0\n'
    + 'FIELD:customer_county:TYPE(STRING3):LIKE(invalid_alphanumeric):0,0\n'
    + 'FIELD:customer_state:TYPE(STRING2):LIKE(invalid_state):0,0\n'
    + 'FIELD:customer_agency_vertical_type:TYPE(STRING):LIKE(invalid_alphanumeric):0,0\n'
    + 'FIELD:ssn:TYPE(STRING10):LIKE(invalid_ssn):0,0\n'
    + 'FIELD:dob:TYPE(STRING10):LIKE(invalid_date):0,0\n'
    + 'FIELD:rawlinkid:TYPE(UNSIGNED6):LIKE(invalid_numeric):0,0\n'
    + 'FIELD:raw_full_name:TYPE(STRING100):LIKE(invalid_name):0,0\n'
    + 'FIELD:raw_title:TYPE(STRING50):LIKE(invalid_alphanumeric):0,0\n'
    + 'FIELD:raw_first_name:TYPE(STRING100):LIKE(invalid_name):0,0\n'
    + 'FIELD:raw_middle_name:TYPE(STRING60):LIKE(invalid_name):0,0\n'
    + 'FIELD:raw_last_name:TYPE(STRING100):LIKE(invalid_name):0,0\n'
    + 'FIELD:raw_orig_suffix:TYPE(STRING10):LIKE(invalid_alphanumeric):0,0\n'
    + 'FIELD:full_address:TYPE(STRING):LIKE(invalid_alphanumeric):0,0\n'
    + 'FIELD:street_1:TYPE(STRING100):LIKE(invalid_alphanumeric):0,0\n'
    + 'FIELD:city:TYPE(STRING100):LIKE(invalid_name):0,0\n'
    + 'FIELD:state:TYPE(STRING10):LIKE(invalid_state):0,0\n'
    + 'FIELD:zip:TYPE(STRING10):LIKE(invalid_zip):0,0\n'
    + 'FIELD:county:TYPE(STRING3):LIKE(invalid_alphanumeric):0,0\n'
    + 'FIELD:mailing_street_1:TYPE(STRING100):LIKE(invalid_alphanumeric):0,0\n'
    + 'FIELD:mailing_city:TYPE(STRING30):LIKE(invalid_name):0,0\n'
    + 'FIELD:mailing_state:TYPE(STRING2):LIKE(invalid_state):0,0\n'
    + 'FIELD:mailing_zip:TYPE(STRING9):LIKE(invalid_zip):0,0\n'
    + 'FIELD:mailing_county:TYPE(STRING3):LIKE(invalid_alphanumeric):0,0 \n'
    + 'FIELD:phone_number:TYPE(STRING10):LIKE(invalid_phone):0,0\n'
    + 'FIELD:ultid:TYPE(UNSIGNED6):LIKE(invalid_numeric):0,0\n'
    + 'FIELD:orgid:TYPE(UNSIGNED6):LIKE(invalid_numeric):0,0\n'
    + 'FIELD:seleid:TYPE(UNSIGNED6):LIKE(invalid_numeric):0,0\n'
    + 'FIELD:tin:TYPE(STRING10):LIKE(invalid_alphanumeric):0,0\n'
    + 'FIELD:email_address:TYPE(STRING256):LIKE(invalid_email):0,0\n'
    + 'FIELD:appended_provider_id:TYPE(UNSIGNED6):LIKE(invalid_numeric):0,0\n'
    + 'FIELD:lnpid:TYPE(UNSIGNED6):LIKE(invalid_numeric):0,0\n'
    + 'FIELD:npi:TYPE(STRING10):LIKE(invalid_alphanumeric):0,0\n'
    + 'FIELD:ip_address:TYPE(STRING25):LIKE(invalid_ip):0,0\n'
    + 'FIELD:device_id:TYPE(STRING50):LIKE(invalid_alphanumeric):0,0\n'
    + 'FIELD:professional_id:TYPE(STRING12):LIKE(invalid_alphanumeric):0,0\n'
    + 'FIELD:bank_routing_number_1:TYPE(STRING20):LIKE(invalid_alphanumeric):0,0\n'
    + 'FIELD:bank_account_number_1:TYPE(STRING20):LIKE(invalid_alphanumeric):0,0\n'
    + 'FIELD:drivers_license_state:TYPE(STRING2):LIKE(invalid_alphanumeric):0,0\n'
    + 'FIELD:drivers_license:TYPE(STRING25):LIKE(invalid_alphanumeric):0,0\n'
    + 'FIELD:geo_lat:TYPE(STRING10):LIKE(invalid_real_string):0,0\n'
    + 'FIELD:geo_long:TYPE(STRING11):LIKE(invalid_real_string):0,0\n'
    + 'FIELD:reported_date:TYPE(STRING75):LIKE(invalid_date):0,0\n'
    + 'FIELD:file_type:TYPE(UNSIGNED3):LIKE(invalid_numeric):0,0\n'
    + 'FIELD:deceitful_confidence:TYPE(STRING10):LIKE(invalid_numeric_string):0,0\n'
    + 'FIELD:reported_by:TYPE(STRING30):LIKE(invalid_alphanumeric):0,0\n'
    + 'FIELD:reason_description:TYPE(STRING250):LIKE(invalid_alphanumeric):0,0\n'
    + 'FIELD:event_type_1:TYPE(STRING30):LIKE(invalid_numeric_string):0,0\n'
    + 'FIELD:event_entity_1:TYPE(STRING30):LIKE(invalid_alphanumeric):0,0\n'
    + '// CONCEPT statements should be used to group together interellated fields; such as address\n'
    + '// RELATIONSHIP is used to find non-obvious relationships between the clusters\n'
    + '// SOURCEFIELD is used if a field of the file denotes a source of the records in that file\n'
    + '// LINKPATH is used to define access paths for external linking\n'
    ;

  // Structured values
  EXPORT linkpaths := DATASET([
    ],{STRING linkpath;STRING compulsory;STRING optional;STRING bonus;STRING required;STRING search});

END;
