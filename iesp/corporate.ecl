/*** Not to be hand edited (changes will be lost on re-generation) ***/
/*** ECL Interface generated by esdl2ecl version 1.0 from corporate.xml. ***/
/*===================================================*/

export corporate := MODULE
			
export t_CorporateSearchCharterNumberKey := record
	string FilingStateCode {xpath('FilingStateCode')};
	string CharterNumber {xpath('CharterNumber')};
end;
		
export t_CorporateSearchBy := record
	string CompanyName {xpath('CompanyName')};
	string FEIN {xpath('FEIN')};
	t_CorporateSearchCharterNumberKey CharterNumberKey {xpath('CharterNumberKey')};
	share.t_Name Name {xpath('Name')};
	share.t_Address Address {xpath('Address')};
end;
		
export t_CorporateOption := record (share.t_BaseSearchOption)
	integer ReturnCount {xpath('ReturnCount')};
	integer StartingRecord {xpath('StartingRecord')};
end;
		
export t_CorporateRecord := record
	string ExternalKey {xpath('ExternalKey')};
	string RecordType {xpath('RecordType')};
	string Status {xpath('Status')};
	string StateOrigin {xpath('StateOrigin')};
	string CompanyName {xpath('CompanyName')};
	string CorporationNumber {xpath('CorporationNumber')};
	string FEIN {xpath('FEIN')};
	string BusinessId {xpath('BusinessId')};
	share.t_Date RecordDate {xpath('RecordDate')};
	share.t_Address Address {xpath('Address')};
	string AddressType {xpath('AddressType')};
	string OfficerTitle {xpath('OfficerTitle')};
	share.t_Name Name {xpath('Name')};
end;
		
export t_CorporateSearchResponse := record
	share.t_ResponseHeader _Header {xpath('Header')};
	integer RecordCount {xpath('RecordCount')};
	dataset(t_CorporateRecord) Records {xpath('Records/Record'), MAXCOUNT(1)};
end;
		
export t_CorporateSearch2By := record (share.t_BaseSearchBy)
	string CompanyName {xpath('CompanyName')};
	string CorporateKey {xpath('CorporateKey')};
	string CharterNumber {xpath('CharterNumber')};
	string FEIN {xpath('FEIN')};
	string FilingJurisdiction {xpath('FilingJurisdiction')};
	string PhoneNumber {xpath('PhoneNumber')};
	share.t_Name Name {xpath('Name')};
	share.t_Address Address {xpath('Address')};
end;
		
export t_CorporateSearch2Option := record (share.t_BaseSearchOption)
	integer ReturnCount {xpath('ReturnCount')};
	integer StartingRecord {xpath('StartingRecord')};
	boolean UsePhonetics {xpath('UsePhonetics')};
	boolean UseNicknames {xpath('UseNicknames')};
	boolean SimplifiedReturn {xpath('SimplifiedReturn')};
	boolean IncludeAlsoFound {xpath('IncludeAlsoFound')};
	boolean SearchRegisteredAgents {xpath('SearchRegisteredAgents')};
end;
		
export t_CorpSearchContactType := record
	string _Type {xpath('Type')};
	string Title {xpath('Title')};
end;
		
export t_CorpSearchContact := record
	share.t_Date AsOfDate {xpath('AsOfDate')};
	string CompanyName {xpath('CompanyName')};
	string UniqueId {xpath('UniqueId')};
	string CharterNumber {xpath('CharterNumber')};
	dataset(share.t_Name) Names {xpath('Names/Name'), MAXCOUNT(1)};
	dataset(share.t_StringArrayItem) Types {xpath('Types/Type'), MAXCOUNT(1)};
	dataset(t_CorpSearchContactType) Types2 {xpath('Types2/Type'), MAXCOUNT(1)};
	dataset(share.t_Address) Addresses {xpath('Addresses/Address'), MAXCOUNT(1)};
end;
		
export t_CorpSearchRegisteredAgent := record
	share.t_Name Name {xpath('Name')};
	share.t_Address Address {xpath('Address')};
end;
		
export t_CorpSearchForeignInfo := record
	string IncorporationState {xpath('IncorporationState')};
	string CharterNumber {xpath('CharterNumber')};
	share.t_Date IncorporateDate {xpath('IncorporateDate')};
	string FederalTaxId {xpath('FederalTaxId')};
	string StateTaxId {xpath('StateTaxId')};
end;
		
export t_CorpSearchHistory := record
	string BusinessId {xpath('BusinessId')};
	share.t_BusinessIdentity BusinessIds {xpath('BusinessIds')};
	boolean CorporateIsLikelyMatch {xpath('CorporateIsLikelyMatch')};
	boolean RegAgentIsLikelyMatch {xpath('RegAgentIsLikelyMatch')};
	boolean CorporateIsCurrentLegal {xpath('CorporateIsCurrentLegal')};
	string RecordType {xpath('RecordType')};
	share.t_Date RecordDate {xpath('RecordDate')};
	string CompanyName {xpath('CompanyName')};
	string NameType {xpath('NameType')};
	string FederalTaxId {xpath('FederalTaxId')};
	string StateTaxId {xpath('StateTaxId')};
	string OrganizationStructure {xpath('OrganizationStructure')};
	share.t_AddressWithType Address {xpath('Address')};
	share.t_AddressWithType Address2 {xpath('Address2')};
	dataset(share.t_StringArrayItem) RawAddress {xpath('RawAddress/Line'), MAXCOUNT(1)};
	dataset(share.t_StringArrayItem) RawAddress2 {xpath('RawAddress2/Line'), MAXCOUNT(1)};
	string Status {xpath('Status')};
	string IncorporateState {xpath('IncorporateState')};
	share.t_Date IncorporateDate {xpath('IncorporateDate')};
	t_CorpSearchForeignInfo ForeignInfo {xpath('ForeignInfo')};
	t_CorpSearchRegisteredAgent RegisteredAgent {xpath('RegisteredAgent')};
end;
		
export t_CorporateSearch2Record := record
	boolean AlsoFound {xpath('AlsoFound')};
	string CorporateKey {xpath('CorporateKey')};
	string CharterNumber {xpath('CharterNumber')};
	string ExternalKey {xpath('ExternalKey')};
	string StateOrigin {xpath('StateOrigin')};
	string StateOriginName {xpath('StateOriginName')};
	dataset(t_CorpSearchContact) Contacts {xpath('Contacts/Contact'), MAXCOUNT(1)};
	dataset(t_CorpSearchHistory) CorporateHistories {xpath('CorporateHistories/CorporateHistory'), MAXCOUNT(1)};
end;
		
export t_CorporateSearch2Response := record
	share.t_ResponseHeader _Header {xpath('Header')};
	integer RecordCount {xpath('RecordCount')};
	dataset(t_CorporateSearch2Record) Records {xpath('Records/Record'), MAXCOUNT(1)};
end;
		
export t_CorpReportBy := record
	string StateOrigin {xpath('StateOrigin')};
	string CorporationNumber {xpath('CorporationNumber')};
end;
		
export t_CorpReportOption := record (share.t_BaseReportOption)
end;
		
export t_CorpExistenceTerm := record
	string _Type {xpath('Type')};
	share.t_Date ExpirationDate {xpath('ExpirationDate')};
	integer Years {xpath('Years')};
end;
		
export t_CorpRegisteredAgent := record
	string Name {xpath('Name')};
	share.t_Address Address {xpath('Address')};
end;
		
export t_CorpCorporation := record
	share.t_Date AsOfDate {xpath('AsOfDate')};
	string FilingState {xpath('FilingState')};
	string FilingType {xpath('FilingType')};
	string CompanyName {xpath('CompanyName')};
	share.t_AddressWithType Address {xpath('Address')};
	string Status {xpath('Status')};
	string StatusDescription {xpath('StatusDescription')};
	string Incorporated {xpath('Incorporated')};
	string IncorporationState {xpath('IncorporationState')};
	share.t_Date IncorporationDate {xpath('IncorporationDate')};
	share.t_Date FilingDate {xpath('FilingDate')};
	t_CorpExistenceTerm TermOfExistence {xpath('TermOfExistence')};
	string ProfitIndicator {xpath('ProfitIndicator')};
	string Location {xpath('Location')};
	t_CorpRegisteredAgent RegisteredAgent {xpath('RegisteredAgent')};
	string FEIN {xpath('FEIN')};
	string StateTaxId {xpath('StateTaxId')};
	string SICCode {xpath('SICCode')};
	string Ownership {xpath('Ownership')};
	share.t_Date StatusDate {xpath('StatusDate')};
	string OrganizeStructure {xpath('OrganizeStructure')};
end;
		
export t_CorpContact := record
	share.t_Date AsOfDate {xpath('AsOfDate')};
	share.t_Name Name {xpath('Name')};
	share.t_Address Address {xpath('Address')};
	string OfficerTitle {xpath('OfficerTitle')};
	string CorporationName {xpath('CorporationName')};
	string UniqueId {xpath('UniqueId')};
	string SSN {xpath('SSN')};
	share.t_Date DateFirstSeen {xpath('DateFirstSeen')};
	share.t_Date DateLastSeen {xpath('DateLastSeen')};
	string HistoryFlag {xpath('HistoryFlag')};
end;
		
export t_CorpEvent := record
	share.t_Date FilingDate {xpath('FilingDate')};
	string Description {xpath('Description')};
	string ReferenceNumber {xpath('ReferenceNumber')};
end;
		
export t_CorpReportRecord := record
	string StateOfOrigin {xpath('StateOfOrigin')};
	string StateOfOriginCode {xpath('StateOfOriginCode')};
	string CorporationNumber {xpath('CorporationNumber')};
	dataset(t_CorpCorporation) Corporations {xpath('Corporations/Corporation'), MAXCOUNT(1)};
	dataset(t_CorpContact) Contacts {xpath('Contacts/Contact'), MAXCOUNT(1)};
	dataset(t_CorpEvent) Events {xpath('Events/Event'), MAXCOUNT(1)};
end;
		
export t_CorpReportResponse := record
	share.t_ResponseHeader _Header {xpath('Header')};
	t_CorpReportRecord CorporateFiling {xpath('CorporateFiling')};
	dataset(t_CorpReportRecord) CorporateFilings {xpath('CorporateFilings/CorporateFiling'), MAXCOUNT(1)};
end;
		
export t_CorporateReport2By := record
	string BusinessId {xpath('BusinessId')};
	string StateOrigin {xpath('StateOrigin')};
	string CharterNumber {xpath('CharterNumber')};
	string CorporateKey {xpath('CorporateKey')};
	boolean ReturnMultiplePages {xpath('ReturnMultiplePages')};
end;
		
export t_CorporateReport2Option := record (share.t_BaseReportOption)
end;
		
export t_CorpReportContactType := record
	string _Type {xpath('Type')};
	string Title {xpath('Title')};
end;
		
export t_CorpReportLegalContact := record
	string PhoneNumber {xpath('PhoneNumber')};
	string PhoneNumberType {xpath('PhoneNumberType')};
	string Fax {xpath('Fax')};
	string EMail {xpath('EMail')};
	string WebAddress {xpath('WebAddress')};
end;
		
export t_CorpReportContactBase := record
  // tasselin: Note that the query Corp2_Services.CorpsReportService doesn't support
	// the Names/Addresses dataset below. When customers move to >=v1.80 the query
	// will need to be updated. The TopBusinessSourceDocSearch which also uses this
	// record only supports the Names/Addresses dataset, not the single elements.
	share.t_Name Name {xpath('Name')};
	share.t_AddressWithType Address {xpath('Address')};
	dataset(share.t_NameAndCompany) Names {xpath('Names/Name'), MAXCOUNT(iesp.Constants.CORP.MAX_CONTACT_NAMES)};
	dataset(share.t_AddressWithType) Addresses {xpath('Addresses/Address'), MAXCOUNT(iesp.Constants.CORP.MAX_CONTACT_ADDR)};
	string RecordType {xpath('RecordType')};
	string RecordTypeDesc {xpath('RecordTypeDesc')};
	string SSN {xpath('SSN')};
	string FEIN {xpath('FEIN')};
	share.t_Date DOB {xpath('DOB')};
	dataset(share.t_StringArrayItem) RawAddress {xpath('RawAddress/Line'), MAXCOUNT(iesp.Constants.CORP.MAX_CONTACT_ADDR)};
	t_CorpReportLegalContact LegalContact {xpath('LegalContact')};
	share.t_Date ResignDate {xpath('ResignDate')};
	integer CompaniesRepresented {xpath('CompaniesRepresented')};
	integer GoodStandingsRepresented {xpath('GoodStandingsRepresented')};
	string AdditionalInfo {xpath('AdditionalInfo')};
	share.t_Date EffectiveDate {xpath('EffectiveDate')};
end;
		
export t_CorpReportContact := record (t_CorpReportContactBase)
	share.t_Date FilingDate {xpath('FilingDate')};
	string FilingType {xpath('FilingType')};
	string FilingReferenceNumber {xpath('FilingReferenceNumber')};
	string Status {xpath('Status')};
	string UniqueId {xpath('UniqueId')};
	string CharterNumber {xpath('CharterNumber')};
	string CompanyName {xpath('CompanyName')};
	string EffectiveDescription {xpath('EffectiveDescription')};
	share.t_Date AsOfDate {xpath('AsOfDate')};
	dataset(t_CorpReportContactType) ContactTypes {xpath('ContactTypes/ContactType'), MAXCOUNT(iesp.Constants.CORP.MAX_CONTACT_TYPES)};
	share.t_Date AsAgentDate {xpath('AsAgentDate')};
end;
		
export t_CorpReportTradeRegisteredAgent := record (t_CorpReportContactBase)
	string Title {xpath('Title')};
	share.t_Date AsAgentDate {xpath('AsAgentDate')};
end;
		
export t_CorpReportRegisteredAgent := record
	share.t_AddressWithType Address {xpath('Address')};
	dataset(share.t_StringArrayItem) RawAddress {xpath('RawAddress/Line'), MAXCOUNT(iesp.Constants.CORP.MAX_RAW_ADDR)};
	share.t_Name Name {xpath('Name')};
	t_CorpReportLegalContact LegalContact {xpath('LegalContact')};
	string Title {xpath('Title')};
	string SSN {xpath('SSN')};
	string FEIN {xpath('FEIN')};
	share.t_Date ResignDate {xpath('ResignDate')};
	share.t_Date AsAgentDate {xpath('AsAgentDate')};
end;
		
export t_CorpReportExistenceTerm := record
	string Code {xpath('Code')};
	string _Type {xpath('Type')};
	share.t_Date ExpirationDate {xpath('ExpirationDate')};
	integer Years {xpath('Years')};
end;
		
export t_CorpReportForeignInfo := record (t_CorpSearchForeignInfo)
	string ForeignDomesticInd {xpath('ForeignDomesticInd')};
	t_CorpReportExistenceTerm TermOfExistence {xpath('TermOfExistence')};
end;
		
export t_CorpReportTradeForeignInfo := record (t_CorpReportForeignInfo)
	string StateCode {xpath('StateCode')};
end;
		
export t_CorpReportTaxInfo := record
	integer TaxesOwnedToState {xpath('TaxesOwnedToState')};
	integer TaxesOwedToState {xpath('TaxesOwedToState')};
	string FranchiseTaxes {xpath('FranchiseTaxes')};
	string TaxProgram {xpath('TaxProgram')};
end;
		
export t_CorpReportCompanyType := record
	string OrganizeStructure {xpath('OrganizeStructure')};

	// jiafu: ESP can't fill in old field (bool) using the new value (U/Y/N), 
	//so ECL neeeds to fill in both fields for now 
	boolean IsForProfit {xpath('IsForProfit')};
	string IsForProfit2 {xpath('IsForProfit2')}; //values['U','Y','N','']

	boolean IsPublic {xpath('IsPublic')};
	string IsPublic2 {xpath('IsPublic2')}; //values['U','Y','N','']

	string PublicOrPrivate {xpath('PublicOrPrivate')};
	string SICCode {xpath('SICCode')};
	string SubCode {xpath('SubCode')};
	string BusinessType {xpath('BusinessType')};
	string EntityType {xpath('EntityType')};
	string CertificateNumber {xpath('CertificateNumber')};
	integer MicrofilmNumber {xpath('MicrofilmNumber')};
	string MicrofilmNumber2 {xpath('MicrofilmNumber2')};
	integer AmendmentsFiled {xpath('AmendmentsFiled')};
	string AmendmentsFiled2 {xpath('AmendmentsFiled2')};
	string LegislativeActs {xpath('LegislativeActs')};
	boolean Partnerable {xpath('Partnerable')};
	boolean Manufacturerable {xpath('Manufacturerable')};
	string AdditionalInfo {xpath('AdditionalInfo')};
end;
		
export t_CorpReportHistory := record
	string SupplementalNumber {xpath('SupplementalNumber')};
	string Vendor {xpath('Vendor')};
	string VendorCounty {xpath('VendorCounty')};
	string VendorSubcode {xpath('VendorSubcode')};
	string AdditionalInfo {xpath('AdditionalInfo')};
	string RecordType {xpath('RecordType')};
	string RecordTypeDesc {xpath('RecordTypeDesc')};
	share.t_Date DateLastSeen {xpath('DateLastSeen')};
	share.t_Date RecordDate {xpath('RecordDate')};
	string CompanyName {xpath('CompanyName')};
	string CompanyNameComment {xpath('CompanyNameComment')};
	string FederalTaxId {xpath('FederalTaxId')};
	string StateTaxId {xpath('StateTaxId')};
	share.t_AddressWithType Address {xpath('Address')};
	dataset(share.t_StringArrayItem) RawAddress {xpath('RawAddress/Line'), MAXCOUNT(iesp.Constants.CORP.MAX_RAW_ADDR)};
	share.t_Date AddressEffectiveDate {xpath('AddressEffectiveDate')};
	share.t_AddressWithType Address2 {xpath('Address2')};
	dataset(share.t_StringArrayItem) RawAddress2 {xpath('RawAddress2/Line'), MAXCOUNT(iesp.Constants.CORP.MAX_RAW_ADDR)};
	share.t_Date Address2EffectiveDate {xpath('Address2EffectiveDate')};
	t_CorpReportLegalContact LegalContact {xpath('LegalContact')};
	string Status {xpath('Status')};
	share.t_Date StatusDate {xpath('StatusDate')};
	string StatusComment {xpath('StatusComment')};
	string IncorporateState {xpath('IncorporateState')};
	share.t_Date IncorporateDate {xpath('IncorporateDate')};
	t_CorpReportRegisteredAgent RegisteredAgent {xpath('RegisteredAgent')};
	t_CorpReportForeignInfo ForeignInfo {xpath('ForeignInfo')};
	string NameType {xpath('NameType')};
	string FilingReferenceNumber {xpath('FilingReferenceNumber')};
	share.t_Date FilingDate {xpath('FilingDate')};
	string FilingType {xpath('FilingType')};
	boolean IsGoodStanding {xpath('IsGoodStanding')};
	string1 IsGoodStanding2 {xpath('IsGoodStanding2')}; //values['U','Y','N','']
	string TickerSymbol {xpath('TickerSymbol')};
	string StockExchange {xpath('StockExchange')};
	string IncorporateCounty {xpath('IncorporateCounty')};
	integer AnniversaryMonth {xpath('AnniversaryMonth')};
	t_CorpReportExistenceTerm TermOfExistence {xpath('TermOfExistence')};
	t_CorpReportTaxInfo TaxInfo {xpath('TaxInfo')};
	t_CorpReportCompanyType CompanyType {xpath('CompanyType')};
end;
		
export t_CorpReportEvent := record
	string ReferenceNumber {xpath('ReferenceNumber')};
	string AmendmentNumber {xpath('AmendmentNumber')};
	share.t_Date FilingDate {xpath('FilingDate')};
	string DateType {xpath('DateType')};
	string DateTypeCode {xpath('DateTypeCode')};
	string FilingType {xpath('FilingType')};
	string FilingTypeCode {xpath('FilingTypeCode')};
	string CorporateNumber {xpath('CorporateNumber')};
	string CorporateNumberCode {xpath('CorporateNumberCode')};
	string CorporateNumberType {xpath('CorporateNumberType')};
	integer MicrofilmRoll {xpath('MicrofilmRoll')};
	string MicrofilmRoll2 {xpath('MicrofilmRoll2')};
	string MircofilmFrame {xpath('MircofilmFrame')};
	string MircofilmStart {xpath('MircofilmStart')};
	string MircofilmEnd {xpath('MircofilmEnd')};
	integer MicrofilmNumber {xpath('MicrofilmNumber')};
	string MicrofilmNumber2 {xpath('MicrofilmNumber2')};
	share.t_Date StartDate {xpath('StartDate')};
	share.t_Date EndDate {xpath('EndDate')};
	string EventDescription {xpath('EventDescription')};
end;
		
export t_CorpReportStock := record
	string TickerSymbol {xpath('TickerSymbol')};
	string Exchange {xpath('Exchange')};
	string _Type {xpath('Type')};
	string Class {xpath('Class')};
	integer SharesIssued {xpath('SharesIssued')};
	integer SharesAuthorized {xpath('SharesAuthorized')};
	integer4 SharesIssued2 {xpath('SharesIssued2')};
	integer4 SharesAuthorized2 {xpath('SharesAuthorized2')};
	string SharesIssued3 {xpath('SharesIssued3')};
	string SharesAuthorized3 {xpath('SharesAuthorized3')};
	integer ParValue {xpath('ParValue')};
	string ParValue2 {xpath('ParValue2')};
	integer NoParShares {xpath('NoParShares')};
	string NoParShares2 {xpath('NoParShares2')};
	boolean IsChanged {xpath('IsChanged')};
	share.t_Date ChangeDate {xpath('ChangeDate')};
	boolean HasVotingRights {xpath('HasVotingRights')};
	boolean IsConverted {xpath('IsConverted')};
	share.t_Date ConvertDate {xpath('ConvertDate')};
	share.t_Date CapitalChangeDate {xpath('CapitalChangeDate')};
	integer TaxCapital {xpath('TaxCapital')};
	string TaxCapital2 {xpath('TaxCapital2')};
	integer TotalCapital {xpath('TotalCapital')};
	string TotalCapital2 {xpath('TotalCapital2')};
	string AdditionalInfo {xpath('AdditionalInfo')};
end;
		
export t_CorpReportAnnualReport := record
	integer FilingYear {xpath('FilingYear')};
	share.t_Date DateLastSeen {xpath('DateLastSeen')};
	share.t_Date CorpProcessDate {xpath('CorpProcessDate')};
	share.t_Date MailedDate {xpath('MailedDate')};
	share.t_Date DueDate {xpath('DueDate')};
	share.t_Date FiledDate {xpath('FiledDate')};
	share.t_Date ReportDate {xpath('ReportDate')};
	string ReportNumber {xpath('ReportNumber')};
	share.t_Date FranchiseTaxPaidDate {xpath('FranchiseTaxPaidDate')};
	share.t_Date DelinquentDate {xpath('DelinquentDate')};
	real8 TaxFactor {xpath('TaxFactor')};
	string TaxFactor2 {xpath('TaxFactor2')};
	integer TaxPaid {xpath('TaxPaid')};
	string TaxPaid2 {xpath('TaxPaid2')};
	integer CapitalReported {xpath('CapitalReported')};
	string CapitalReported2 {xpath('CapitalReported2')};
	integer IllinoisCapital {xpath('IllinoisCapital')};
	string IllinoisCapital2 {xpath('IllinoisCapital2')};
	integer MicrofilmRoll {xpath('MicrofilmRoll')};
	string MicrofilmRoll2 {xpath('MicrofilmRoll2')};
	integer MicrofilmFrame {xpath('MicrofilmFrame')};
	string MicrofilmFrame2 {xpath('MicrofilmFrame2')};
	integer ReportExtensions {xpath('ReportExtensions')};
	string ReportExtensions2 {xpath('ReportExtensions2')};
	integer MicrofilmNumber {xpath('MicrofilmNumber')};
	string MicrofilmNumber2 {xpath('MicrofilmNumber2')};
	string Comment {xpath('Comment')};
	string ReportType {xpath('ReportType')};
end;
		
export t_CorpReportTradeBrand := record
	string BusinessId {xpath('BusinessId')};
	string StatusComment {xpath('StatusComment')};
	string TickerSymbol {xpath('TickerSymbol')};
	string StockExchange {xpath('StockExchange')};
	string IncorporateState {xpath('IncorporateState')};
	string IncorporateCounty {xpath('IncorporateCounty')};
	string FederalTaxId {xpath('FederalTaxId')};
	string StateTaxId {xpath('StateTaxId')};
	string InternalNumber {xpath('InternalNumber')};
	string PreviousNumber {xpath('PreviousNumber')};
	integer AnniversaryMonth {xpath('AnniversaryMonth')};
	boolean IsGoodStanding {xpath('IsGoodStanding')};
	share.t_Date StatusDate {xpath('StatusDate')};
	share.t_Date IncorporateDate {xpath('IncorporateDate')};
	t_CorpReportTradeForeignInfo ForeignInfo {xpath('ForeignInfo')};
	t_CorpReportCompanyType CompanyType {xpath('CompanyType')};
	t_CorpReportTradeRegisteredAgent RegisteredAgent {xpath('RegisteredAgent')};
	t_CorpReportLegalContact LegalContact {xpath('LegalContact')};
	t_CorpReportTaxInfo TaxInfo {xpath('TaxInfo')};
	string RecordType {xpath('RecordType')};
	string RecordTypeDesc {xpath('RecordTypeDesc')};
	string CertificateNumber {xpath('CertificateNumber')};
	string SupplementalKey {xpath('SupplementalKey')};
	string BusinessType {xpath('BusinessType')};
	string Status {xpath('Status')};
	string CompanyName {xpath('CompanyName')};
	string NameType {xpath('NameType')};
	string Vendor {xpath('Vendor')};
	string VendorCounty {xpath('VendorCounty')};
	string VendorSubcode {xpath('VendorSubcode')};
	share.t_Date RecordDate {xpath('RecordDate')};
	share.t_Date DateLastSeen {xpath('DateLastSeen')};
	string SupplementalNumber {xpath('SupplementalNumber')};
	string CompanyNameComment {xpath('CompanyNameComment')};
	string FilingReferenceNumber {xpath('FilingReferenceNumber')};
	share.t_Date FilingDate {xpath('FilingDate')};
	string FilingDescription {xpath('FilingDescription')};
	share.t_AddressWithType Address {xpath('Address')};
	share.t_Date AddressEffectiveDate {xpath('AddressEffectiveDate')};
	share.t_AddressWithType Address2 {xpath('Address2')};
	share.t_Date Address2EffectiveDate {xpath('Address2EffectiveDate')};
	dataset(share.t_StringArrayItem) RawAddress {xpath('RawAddress/Line'), MAXCOUNT(iesp.Constants.CORP.MAX_RAW_ADDR)};
	t_CorpReportExistenceTerm TermOfExistence {xpath('TermOfExistence')};
	dataset(t_CorpReportEvent) Events {xpath('Events/Event'), MAXCOUNT(iesp.Constants.CORP.MAX_EVENTS)};
end;
		
export t_CorporateReport2Record := record
	string BusinessId {xpath('BusinessId')};
	share.t_BusinessIdentity BusinessIds {xpath('BusinessIds')};
	string100 IdValue {xpath('IdValue')};
	string StateOrigin {xpath('StateOrigin')};
	string StateOriginName {xpath('StateOriginName')};
	string CharterNumber {xpath('CharterNumber')};
	string CorporateKey {xpath('CorporateKey')};
	dataset(t_CorpReportHistory) CorporateHistories {xpath('CorporateHistories/CorporateHistory'), MAXCOUNT(iesp.Constants.CORP.MAX_HISTORIES)};
	dataset(t_CorpReportContact) Contacts {xpath('Contacts/Contact'), MAXCOUNT(iesp.Constants.CORP.MAX_CONTACTS)};
	dataset(t_CorpReportEvent) Events {xpath('Events/Event'), MAXCOUNT(iesp.Constants.CORP.MAX_EVENTS)};
	dataset(t_CorpReportStock) Stocks {xpath('Stocks/Stock'), MAXCOUNT(iesp.Constants.CORP.MAX_STOCKS)};
	dataset(t_CorpReportAnnualReport) AnnualReports {xpath('AnnualReports/Report'), MAXCOUNT(iesp.Constants.CORP.MAX_ANNUAL_RPTS)};
	dataset(t_CorpReportTradeBrand) Trademarks {xpath('Trademarks/Trademark'), MAXCOUNT(iesp.Constants.CORP.MAX_TRADEMARKS)};
	dataset(t_CorpReportTradeBrand) Tradenames {xpath('Tradenames/Tradename'), MAXCOUNT(iesp.Constants.CORP.MAX_TRADENAMES)};
end;
		
export t_CorporateReport2Response := record
	share.t_ResponseHeader _Header {xpath('Header')};
	dataset(t_CorporateReport2Record) CorporateFilings {xpath('CorporateFilings/CorporateFiling'), MAXCOUNT(1)};
end;
		
export t_CorporateSearchRequest := record (share.t_BaseRequest)
	t_CorporateSearchBy SearchBy {xpath('SearchBy')};
	t_CorporateOption Options {xpath('Options')};
end;
		
export t_CorporateSearch2Request := record (share.t_BaseRequest)
	t_CorporateSearch2By SearchBy {xpath('SearchBy')};
	t_CorporateSearch2Option Options {xpath('Options')};
end;
		
export t_CorpReportRequest := record (share.t_BaseRequest)
	t_CorpReportOption Options {xpath('Options')};
	t_CorpReportBy ReportBy {xpath('ReportBy')};
end;
		
export t_CorporateReport2Request := record (share.t_BaseRequest)
	t_CorporateReport2Option Options {xpath('Options')};
	t_CorporateReport2By ReportBy {xpath('ReportBy')};
end;
		
export t_CorporateSearchResponseEx := record
	t_CorporateSearchResponse response {xpath('response')};
end;
		
export t_CorporateSearch2ResponseEx := record
	t_CorporateSearch2Response response {xpath('response')};
end;
		
export t_CorpReportResponseEx := record
	t_CorpReportResponse response {xpath('response')};
end;
		
export t_CorporateReport2ResponseEx := record
	t_CorporateReport2Response response {xpath('response')};
end;
		

end;

/*** Not to be hand edited (changes will be lost on re-generation) ***/
/*** ECL Interface generated by esdl2ecl version 1.0 from corporate.xml. ***/
/*===================================================*/

