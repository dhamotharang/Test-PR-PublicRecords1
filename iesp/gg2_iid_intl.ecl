/*** Not to be hand edited (changes will be lost on re-generation) ***/
/*** ECL Interface generated by esdl2ecl version 1.0 from gg2_iid_intl.xml. ***/
/*===================================================*/

export gg2_iid_intl := MODULE
			
export t_CountryConfiguration := record
	string Name {xpath('Name')};
end;
		
export t_InstantIDIntlPassport := record
	string Number {xpath('Number')};
	share.t_Date ExpirationDate {xpath('ExpirationDate')};
	string Country {xpath('Country')};
	string MachineReadableLine1 {xpath('MachineReadableLine1')};
	string MachineReadableLine2 {xpath('MachineReadableLine2')};
end;
		
export t_InstantIDIntlOption := record (gg2_share.t_GG2Options)
	boolean IncludeOFAC {xpath('IncludeOFAC')};//hidden[internal]
	boolean IncludeOtherWatchLists {xpath('IncludeOtherWatchLists')};//hidden[internal]
	boolean UseDOBFilter {xpath('UseDOBFilter')};
	integer DOBRadius {xpath('DOBRadius')};
	string GlobalWatchlistThreshold {xpath('GlobalWatchlistThreshold')};
	dataset(share.t_StringArrayItem) WatchList {xpath('WatchList/Name'), MAXCOUNT(Constants.MaxCountWatchLists)};
	boolean PassportValidationOnly {xpath('PassportValidationOnly')};
	boolean VisaValidationOnly {xpath('VisaValidationOnly')};
	integer PermissibleUse {xpath('PermissibleUse')};
	boolean GetCountrySettings {xpath('GetCountrySettings')};
	dataset(t_CountryConfiguration) Countries {xpath('Countries/Country'), MAXCOUNT(Constants.MaxCountCountrySettings)};//hidden[ecl_only]
end;
		
export t_InstantIDIntlSearchBy := record (gg2_verify.t_GG2SearchBy)
	string1 Gender {xpath('Gender')};
	t_InstantIDIntlPassport PassportInfo {xpath('PassportInfo')};
	t_InstantIDIntlPassport VisaInfo {xpath('VisaInfo')};
	string IPAddress {xpath('IPAddress')};
end;
		
export t_InstantIDIntlCountry := record
	string CountryName {xpath('CountryName')};
	string ISO2Alpha {xpath('ISO2Alpha')};
	string ISONumeric {xpath('ISONumeric')};
	gg2_verify.t_AustraliaVerification AustraliaVerification {xpath('AustraliaVerification')};
	gg2_verify.t_AustriaVerification AustriaVerification {xpath('AustriaVerification')};
	gg2_verify.t_BrazilVerification BrazilVerification {xpath('BrazilVerification')};
	gg2_verify.t_CanadaVerification CanadaVerification {xpath('CanadaVerification')};
	gg2_verify.t_ChinaVerification ChinaVerification {xpath('ChinaVerification')};
	gg2_verify.t_GermanyVerification GermanyVerification {xpath('GermanyVerification')};
	gg2_verify.t_HongKongVerification HongKongVerification {xpath('HongKongVerification')};
	gg2_verify.t_IrelandVerification IrelandVerification {xpath('IrelandVerification')};
	gg2_verify.t_JapanVerification JapanVerification {xpath('JapanVerification')};
	gg2_verify.t_LuxembourgVerification LuxembourgVerification {xpath('LuxembourgVerification')};
	gg2_verify.t_MexicoVerification MexicoVerification {xpath('MexicoVerification')};
	gg2_verify.t_NetherlandsVerification NetherlandsVerification {xpath('NetherlandsVerification')};
	gg2_verify.t_NewZealandVerification NewZealandVerification {xpath('NewZealandVerification')};
	gg2_verify.t_SingaporeVerification SingaporeVerification {xpath('SingaporeVerification')};
	gg2_verify.t_SouthAfricaVerification SouthAfricaVerification {xpath('SouthAfricaVerification')};
	gg2_verify.t_SwitzerlandVerification SwitzerlandVerification {xpath('SwitzerlandVerification')};
	gg2_verify.t_UnitedKingdomVerification UnitedKingdomVerification {xpath('UnitedKingdomVerification')};
end;
		
export t_InstantIDIntlVerificationIndex := record
	string IVI {xpath('IVI')};
	string CitVL {xpath('CitVL')};
	string ComVL {xpath('ComVL')};
end;
		
export t_InstantIDIntlVerificationResult := record
	string FieldName {xpath('FieldName')};
	boolean IsVerified {xpath('IsVerified')};
	integer Count {xpath('Count')};
end;
		
export t_InstantIDIntlIPAddressInfo := record
	string Continent {xpath('Continent')};
	string Country {xpath('Country')};
	string RoutingType {xpath('RoutingType')};
	string TopLevelDomain {xpath('TopLevelDomain')};
	string SecondLevelDomain {xpath('SecondLevelDomain')};
	string City {xpath('City')};
	string RegionDescription {xpath('RegionDescription')};
	string Latitude {xpath('Latitude')};
	string Longitude {xpath('Longitude')};
end;
		
export t_InstantIDIntlResult := record
	t_InstantIDIntlSearchBy InputEcho {xpath('InputEcho')};
	string InternationalVerificationIndex {xpath('InternationalVerificationIndex')};
	string ComplianceLevel {xpath('ComplianceLevel')};
	dataset(share.t_RiskIndicator) RiskIndicators {xpath('RiskIndicators/RiskIndicator'), MAXCOUNT(Constants.MaxCountHRI)};
	dataset(t_InstantIDIntlVerificationResult) VerificationResults {xpath('VerificationResults/VerificationResult'), MAXCOUNT(Constants.MaxCountVerificationResults)};
	instantid.t_WatchList WatchList {xpath('WatchList')};
	dataset(instantid.t_WatchList) WatchLists {xpath('WatchLists/WatchList'), MAXCOUNT(Constants.MaxCountWatchLists)};
	t_InstantIDIntlIPAddressInfo IPAddressInfo {xpath('IPAddressInfo')};
	boolean PassportNumberValidated {xpath('PassportNumberValidated')};
	boolean VisaNumberValidated {xpath('VisaNumberValidated')};
	boolean IsBillable {xpath('IsBillable')};//hidden[internal]
	string BillingCountry {xpath('BillingCountry')};
	string BillingCountryCode {xpath('BillingCountryCode')};
	gg2_response.t_GDCRecord VerificationRecord {xpath('VerificationRecord')};
end;
		
export t_InstantIDIntl2Response := record
	share.t_ResponseHeader _Header {xpath('Header')};
	t_InstantIDIntlResult Result {xpath('Result')};
	dataset(t_InstantIDIntlCountry) CountrySettings {xpath('CountrySettings/CountrySetup'), MAXCOUNT(Constants.MaxCountCountrySettings)};
end;
		
export t_InstantIDIntl2Request := record (share.t_BaseRequest)
	share.t_GatewayParams GatewayParams {xpath('GatewayParams')};
	t_InstantIDIntlOption Options {xpath('Options')};
	t_InstantIDIntlSearchBy SearchBy {xpath('SearchBy')};
	boolean AcceptTermsAndConditions {xpath('AcceptTermsAndConditions')};
end;
		
export t_InstantIDIntl2ResponseEx := record
	t_InstantIDIntl2Response response {xpath('response')};
end;
		

end;

/*** Not to be hand edited (changes will be lost on re-generation) ***/
/*** ECL Interface generated by esdl2ecl version 1.0 from gg2_iid_intl.xml. ***/
/*===================================================*/

