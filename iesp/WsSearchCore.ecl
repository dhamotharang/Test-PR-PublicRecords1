/*2014-04-09T23:10:40Z (Ken Hill)
clean up some addition non-valid ECL constructs
*/
/*** Not to be hand edited (changes will be lost on re-generation) ***/
/*** ECL Interface generated by esdl2ecl version 1.0 from WsSearchCore.xml. ***/
/*===================================================*/

export WsSearchCore := MODULE
			
export t_DataFileInfo := record
	string Status {xpath('Status')}; //values['NOT_LOADED','LOADING','AVAILABLE','TO_BE_UNLOADED','TO_BE_PURGED','ERROR','']
	string _Type {xpath('Type')}; //values['UDF','ADF','BDF','CDF','SDF','']
	string BuildDate {xpath('BuildDate')};
	string PublicationDate {xpath('PublicationDate')};
	string LastAccessDate {xpath('LastAccessDate')};
	boolean Custom {xpath('Custom')};
	boolean Citizenship {xpath('Citizenship')};
	boolean HasWeakAKAs {xpath('HasWeakAKAs')};
	string ID {xpath('ID')};
	string Name {xpath('Name')};
	string FileName {xpath('FileName')};
	string Description {xpath('Description')};
	string SearchCriteriaXML {xpath('SearchCriteriaXML')};
end;
		
export t_ConfigDataFile := record
	boolean Custom {xpath('Custom')};
	string ID {xpath('ID')};
	boolean IgnoreWeakAKAs {xpath('IgnoreWeakAKAs')};
	integer MinScore {xpath('MinScore')};
	string Name {xpath('Name')};
	string SearchCriteriaSelected {xpath('SearchCriteriaSelected')};
	boolean TopLevelOperatorIsOr {xpath('TopLevelOperatorIsOr')};
end;
		
export t_ConfigGeneralOptions := record
	boolean IgnoreVessels {xpath('IgnoreVessels')};
	boolean NoInputEcho {xpath('NoInputEcho')};
	integer MaxNumberOfMatchesReturned {xpath('MaxNumberOfMatchesReturned')};
	boolean ScanNameForBlockedCountries {xpath('ScanNameForBlockedCountries')};
	boolean ScanAddressForBlockedCountries {xpath('ScanAddressForBlockedCountries')};
	boolean SortResultsByEntityScore {xpath('SortResultsByEntityScore')};
	boolean UseNonWordTokenCountrySearch {xpath('UseNonWordTokenCountrySearch')};
end;
		
export t_ConfigMatchOptions := record
	boolean GenerateOnAddress {xpath('GenerateOnAddress')};
	boolean GenerateOnID {xpath('GenerateOnID')};
	boolean GenerateOnName {xpath('GenerateOnName')};
	boolean GenerateOnPhone {xpath('GenerateOnPhone')};
	boolean ScoreAddress {xpath('ScoreAddress')};
	boolean ScoreIDScore {xpath('ScoreIDScore')};
	boolean ScoreInitials {xpath('ScoreInitials')};
	boolean ScorePhone {xpath('ScorePhone')};
	boolean ScoreSingleWords {xpath('ScoreSingleWords')};
end;
		
export t_ConfigConflictDetectionOptions := record
	boolean Addresses {xpath('Addresses')};
	boolean Citizenships {xpath('Citizenships')};
	boolean Countries {xpath('Countries')};
	integer DOBTolerance {xpath('DOBTolerance')};
end;
		
export t_SearchConfiguration := record
	dataset(t_ConfigDataFile) DataFiles {xpath('DataFiles/ConfigDataFile'), MAXCOUNT(iesp.Constants.gwBridger.MaxList)};
	t_ConfigGeneralOptions GeneralOptions {xpath('GeneralOptions')};
	t_ConfigMatchOptions MatchOptions {xpath('MatchOptions')};
	t_ConfigConflictDetectionOptions ConflictOptions {xpath('ConflictOptions')};
end;
		
export t_InputAddress := record
	string FullAddress {xpath('FullAddress')};
	string StreetAddress1 {xpath('StreetAddress1')};
	string StreetAddress2 {xpath('StreetAddress2')};
	string BuildingOrStreetNumber {xpath('BuildingOrStreetNumber')};
	string StreetPreDirection {xpath('StreetPreDirection')};
	string StreetName {xpath('StreetName')};
	string StreetPostDirection {xpath('StreetPostDirection')};
	string StreetSuffixOrType {xpath('StreetSuffixOrType')};
	string SubBuildingNumber {xpath('SubBuildingNumber')};
	string _Type {xpath('Type')}; //values['None','Current','Mailing','Previous','Unknown','']
	string UnitDesignation {xpath('UnitDesignation')};
	string UnitNumber {xpath('UnitNumber')};
	string City {xpath('City')};
	string PostalCode {xpath('PostalCode')};
	string StateProvinceDistrict {xpath('StateProvinceDistrict')};
	string County {xpath('County')};
	string Country {xpath('Country')};
	string Comments {xpath('Comments')};
	integer8 ReferenceCode {xpath('ReferenceCode')};
end;
		
export t_InputID := record
	string _Type {xpath('Type')}; //values['None','Account','Cedula','DriversLicense','EIN','Member','Military','National','NIT','Other','Passport','SSN','TaxID','VISA','EFTCode','ABARouting','AlienRegistration','ChipsUID','DUNS','IBAN','SwiftBIC','BankIdentifierCode','BankPartyID','CustomerNumber','GLN','IBEI','SwiftBEI','ProprietaryUID','']
	string IssuedDate {xpath('IssuedDate')};
	string ExpirationDate {xpath('ExpirationDate')};
	string Issuer {xpath('Issuer')};
	string Label {xpath('Label')};
	string Number {xpath('Number')};
	string Comments {xpath('Comments')};
end;
		
export t_InputName := record
	unicode Full {xpath('Full')};
	unicode Title {xpath('Title')};
	unicode First {xpath('First')};
	unicode Middle {xpath('Middle')};
	unicode Last {xpath('Last')};
	unicode Generation {xpath('Generation')};
end;
		
export t_InputPhone := record
	string _Type {xpath('Type')}; //values['None','Business','Cell','Fax','Home','Work','Unknown','']
	string Number {xpath('Number')};
	string Comments {xpath('Comments')};
end;
		
export t_EFTInfo := record
	string ID {xpath('ID')};
	string _Type {xpath('Type')}; //values['None','ACH','Fedwire','ISO20022','SWIFT','Unstructured','']
	boolean OFACScreened {xpath('OFACScreened')};
	boolean OFACScreened2 {xpath('OFACScreened2')};
end;
		
export t_InputAdditionalInfo := record
	string _Type {xpath('Type')}; //values['None','Citizenship','Complexion','DistinguishingMarks','DOB','EyeColor','HairColor','Height','MothersName','Nationality','Occupation','PlaceOfBirth','Position','Race','VesselCallSign','VesselFlag','VesselGRT','VesselOwner','VesselTonnage','VesselType','Weight','Incident','Other','IPAddress','']
	string Label {xpath('Label')};
	string Value {xpath('Value')};
	string Comments {xpath('Comments')};
end;
		
export t_InputEntityRecord := record
	integer ID {xpath('ID')};
	dataset(share.t_IntegerArrayItem) ScreeningListSubset {xpath('ScreeningListSubset/Index'), MAXCOUNT(iesp.Constants.gwBridger.MaxList)};
	t_EFTInfo EFTInfo {xpath('EFTInfo')};
	string ReferenceID {xpath('ReferenceID')};
	string ReferenceNumber {xpath('ReferenceNumber')};
	string EntityType {xpath('EntityType')}; //values['None','Unknown','Individual','Business','Vessel','Country','Unstructured','Text','']
	t_InputName Name {xpath('Name')};
	string Gender {xpath('Gender')}; //values['None','Unknown','Female','Male','']
	dataset(t_InputAddress) Addresses {xpath('Addresses/Address'), MAXCOUNT(iesp.Constants.gwBridger.MaxList)};
	dataset(t_InputAdditionalInfo) AdditionalInformation {xpath('AdditionalInformation/AdditionalInfo'), MAXCOUNT(iesp.Constants.gwBridger.MaxList)};
	dataset(t_InputPhone) Phones {xpath('Phones/Phone'), MAXCOUNT(iesp.Constants.gwBridger.MaxList)};
	dataset(t_InputID) Identification {xpath('Identification/ID'), MAXCOUNT(iesp.Constants.gwBridger.MaxList)};
end;
		
export t_InputTextRecord := record
	integer ID {xpath('ID')};
	t_EFTInfo EFTInfo {xpath('EFTInfo')};
	string ReferenceID {xpath('ReferenceID')};
	string ReferenceNumber {xpath('ReferenceNumber')};
	dataset(t_InputID) Identification {xpath('Identification/ID'), MAXCOUNT(iesp.Constants.gwBridger.MaxList)};
	string Text {xpath('Text')};
end;
		
export t_InputUnstructuredEFTRecord := record
	integer ID {xpath('ID')};
	string ReferenceID {xpath('ReferenceID')};
	string DelimiterType {xpath('DelimiterType')}; //values['Unknown','None','Fedwire1510Tag','CRLF','']
	string EFT {xpath('EFT')};
	string PreContext {xpath('PreContext')};
	string PostContext {xpath('PostContext')};
end;
		
export t_SearchInput := record
	integer BlockID {xpath('BlockID')};
	dataset(t_InputEntityRecord) EntityRecords {xpath('EntityRecords/EntityRecord'), MAXCOUNT(iesp.Constants.gwBridger.MaxItem)};
	dataset(t_InputTextRecord) TextRecords {xpath('TextRecords/TextRecord'), MAXCOUNT(iesp.Constants.gwBridger.MaxItem)};
	dataset(t_InputUnstructuredEFTRecord) UnstructuredEFTRecords {xpath('UnstructuredEFTRecords/UnstructuredEFTRecord'), MAXCOUNT(iesp.Constants.gwBridger.MaxItem)};
end;
		
export t_ResultMatchEntityAKA := record (t_InputName)
	unsigned8 ID {xpath('ID')};
	unsigned8 _Type {xpath('Type')};
	unsigned8 Category {xpath('Category')};
	string Notes {xpath('Notes')};
end;
		
export t_ResultMatchEntityAddress := record
	unsigned8 ID {xpath('ID')};
	unsigned8 _Type {xpath('Type')};
	string FullAddress {xpath('FullAddress')};
	string StreetAddress1 {xpath('StreetAddress1')};
	string StreetAddress2 {xpath('StreetAddress2')};
	string City {xpath('City')};
	string State {xpath('State')};
	string PostalCode {xpath('PostalCode')};
	string Country {xpath('Country')};
	string Notes {xpath('Notes')};
end;
		
export t_ResultMatchEntityPhone := record
	unsigned8 ID {xpath('ID')};
	unsigned8 _Type {xpath('Type')};
	string Number {xpath('Number')};
	string Notes {xpath('Notes')};
end;
		
export t_ResultMatchEntityID := record
	unsigned8 ID {xpath('ID')};
	unsigned8 _Type {xpath('Type')};
	string Label {xpath('Label')};
	string Number {xpath('Number')};
	string Issuer {xpath('Issuer')};
	string IssueDate {xpath('IssueDate')};
	string ExpDate {xpath('ExpDate')};
	string Notes {xpath('Notes')};
end;
		
export t_ResultMatchEntityDescription := record
	unsigned8 ID {xpath('ID')};
	unsigned8 _Type {xpath('Type')};
	string Value {xpath('Value')};
	string Notes {xpath('Notes')};
end;
		
export t_ResultMatchEntityValue := record
	unsigned8 ID {xpath('ID')};
	string Value {xpath('Value')};
end;
		
export t_ResultMatchEntityDetails := record
	integer CheckSum {xpath('CheckSum')};
	string Country {xpath('Country')};
	string Date {xpath('Date')};
	string Gender {xpath('Gender')}; //values['None','Unknown','Female','Male','']
	t_InputName Name {xpath('Name')};
	string Notes {xpath('Notes')};
	string Number {xpath('Number')};
	string Reason {xpath('Reason')};
	unsigned8 _Type {xpath('Type')};
end;
		
export t_ResultMatchAdditional := record
	string EFTValue {xpath('EFTValue')};
	boolean PartialAddress {xpath('PartialAddress')};
	integer Score {xpath('Score')};
	integer SourceID {xpath('SourceID')};
	integer ValueType {xpath('ValueType')};
	integer InputInstance {xpath('InputInstance')};
end;
		
export t_ResultMatchAddress := record
	dataset(t_ResultMatchAdditional) AdditionalInformation {xpath('AdditionalInformation/AdditionalInfo'), MAXCOUNT(iesp.Constants.gwBridger.MaxList)};
	integer BestScore {xpath('BestScore')};
	string Best {xpath('Best')};
	boolean BestIsPartial {xpath('BestIsPartial')};
	boolean Conflict {xpath('Conflict')};
	boolean IndexMatch {xpath('IndexMatch')};
	unsigned1 BestInputID {xpath('BestInputID')};
	unsigned1 BestListID {xpath('BestListID')};
	dataset(t_ResultMatchEntityAddress) AddressDetails {xpath('AddressDetails/Address'), MAXCOUNT(iesp.Constants.gwBridger.MaxList)};
end;
		
export t_ResultMatchCitizenship := record
	integer BestScore {xpath('BestScore')};
	dataset(t_ResultMatchAdditional) Citizenships {xpath('Citizenships/AdditionalInfo'), MAXCOUNT(iesp.Constants.gwBridger.MaxList)};
	boolean Conflict {xpath('Conflict')};
end;
		
export t_ResultMatchCountry := record
	string Best {xpath('Best')};
	unsigned2 BestID {xpath('BestID')};
	integer BestScore {xpath('BestScore')};
	string BestType {xpath('BestType')}; //values['None','Country','Code','AlternateName','City','Port','Term','']
	boolean Conflict {xpath('Conflict')};
	integer InputInstance {xpath('InputInstance')};
	string InputType {xpath('InputType')}; //values['None','AdditionalInfo','Address','ID','Name','Phone','EFT','']
end;
		
export t_ResultMatchDOB := record
	boolean BestIsPartial {xpath('BestIsPartial')};
	integer BestScore {xpath('BestScore')};
	boolean Conflict {xpath('Conflict')};
	dataset(t_ResultMatchAdditional) AdditionalInformation {xpath('AdditionalInformation/AdditionalInfo'), MAXCOUNT(iesp.Constants.gwBridger.MaxList)};
end;
		
export t_ResultMatchEntity := record
	t_ResultMatchEntityDetails EntityDetails {xpath('EntityDetails')};
	string EntityUniqueID {xpath('EntityUniqueID')};
	string SearchCriteria {xpath('SearchCriteria')};
	boolean MatchRealert {xpath('MatchRealert')};
	Unicode Name {xpath('Name')};
	integer Offset {xpath('Offset')};
	integer8 PrevResultID {xpath('PrevResultID')};
	integer Score {xpath('Score')};
	string SourceNumber {xpath('SourceNumber')};
	boolean TypeConflict {xpath('TypeConflict')};
end;
		
export t_ResultMatchFile := record
	string Build {xpath('Build')};
	boolean Custom {xpath('Custom')};
	unsigned8 ID {xpath('ID')};
	integer Index {xpath('Index')};
	string Name {xpath('Name')};
	string Published {xpath('Published')};
	string _Type {xpath('Type')}; //values['UDF','ADF','BDF','CDF','SDF','']
end;
		
export t_ResultMatchGender := record
	boolean Conflict {xpath('Conflict')};
end;
		
export t_ResultMatchID := record
	integer BestScore {xpath('BestScore')};
	boolean Conflict {xpath('Conflict')};
	dataset(t_ResultMatchAdditional) AdditionalInformation {xpath('AdditionalInformation/AdditionalInfo'), MAXCOUNT(iesp.Constants.gwBridger.MaxList)};
	boolean IndexMatch {xpath('IndexMatch')};
	dataset(t_ResultMatchEntityID) IdentificationDetails {xpath('IdentificationDetails/Identity'), MAXCOUNT(iesp.Constants.gwBridger.MaxList)};
end;
		
export t_ResultMatchName := record
	boolean AddressName {xpath('AddressName')};
	integer AddressInputInstance {xpath('AddressInputInstance')};
	unicode Best {xpath('Best')};
	unsigned1 BestID {xpath('BestID')};
	integer BestScore {xpath('BestScore')};
	boolean Conflict {xpath('Conflict')};
	boolean IndexMatch {xpath('IndexMatch')};
	dataset(t_ResultMatchEntityValue) AltNames {xpath('AltNames/AltName'), MAXCOUNT(iesp.Constants.gwBridger.MaxItem)};
	dataset(t_ResultMatchEntityAKA) AKAs {xpath('AKAs/AKA'), MAXCOUNT(iesp.Constants.gwBridger.MaxItem)};
end;
		
export t_ResultMatchPhone := record
	integer BestScore {xpath('BestScore')};
	boolean Conflict {xpath('Conflict')};
	boolean IndexMatch {xpath('IndexMatch')};
	dataset(t_ResultMatchAdditional) AdditionalInformation {xpath('AdditionalInformation/AdditionalInfo'), MAXCOUNT(iesp.Constants.gwBridger.MaxList)};
	dataset(t_ResultMatchEntityPhone) PhoneDetails {xpath('PhoneDetails/Phone'), MAXCOUNT(iesp.Constants.gwBridger.MaxList)};
end;
		
export t_ResultMatch := record
	t_ResultMatchAddress Address {xpath('Address')};
	t_ResultMatchCitizenship Citizenship {xpath('Citizenship')};
	t_ResultMatchCountry Country {xpath('Country')};
	t_ResultMatchDOB DOB {xpath('DOB')};
	integer EFTContextEnd {xpath('EFTContextEnd')};
	integer EFTContextStart {xpath('EFTContextStart')};
	boolean EFTMatch {xpath('EFTMatch')};
	t_ResultMatchEntity Entity {xpath('Entity')};
	t_ResultMatchFile File {xpath('File')};
	t_ResultMatchGender Gender {xpath('Gender')};
	t_ResultMatchID ID {xpath('ID')};
	t_ResultMatchName Name {xpath('Name')};
	t_ResultMatchPhone Phone {xpath('Phone')};
	dataset(t_ResultMatchEntityValue) Codes {xpath('Codes/Code'), MAXCOUNT(iesp.Constants.gwBridger.MaxList)};
	dataset(t_ResultMatchEntityValue) Terms {xpath('Terms/Term'), MAXCOUNT(iesp.Constants.gwBridger.MaxList)};
	dataset(t_ResultMatchEntityValue) Cities {xpath('Cities/City'), MAXCOUNT(iesp.Constants.gwBridger.MaxList)};
	dataset(t_ResultMatchEntityValue) Ports {xpath('Ports/Port'), MAXCOUNT(iesp.Constants.gwBridger.MaxList)};
	dataset(t_ResultMatchEntityDescription) Descriptions {xpath('Descriptions/Description'), MAXCOUNT(iesp.Constants.gwBridger.MaxList)};
end;
		
export t_ResultRecord := record
	string ErrorMessage {xpath('ErrorMessage')};
	string WarningMessage {xpath('WarningMessage')};
end;
		
export t_ResultEntityRecord := record (t_ResultRecord)
	t_InputEntityRecord InputRecord {xpath('InputRecord')};
	dataset(t_ResultMatch) Matches {xpath('Matches/ResultMatch'), MAXCOUNT(iesp.Constants.gwBridger.MaxItem)};
end;
		
export t_ResultTextSubEntity := record
	string CountryContext {xpath('CountryContext')};
	string ErrorMessage {xpath('ErrorMessage')};
	dataset(t_ResultMatch) Matches {xpath('Matches/ResultMatch'), MAXCOUNT(iesp.Constants.gwBridger.MaxItem)};
	string NameContext {xpath('NameContext')};
	integer SearchWord {xpath('SearchWord')};
	string WarningMessage {xpath('WarningMessage')};
end;
		
export t_ResultTextRecord := record (t_ResultRecord)
	t_InputTextRecord Input {xpath('Input')};
	dataset(t_ResultTextSubEntity) Entities {xpath('Entities/ResultTextSubEntity'), MAXCOUNT(iesp.Constants.gwBridger.MaxItem)};
end;
		
export t_ResultUnstructuredEFTEntity := record
	string CountryContext {xpath('CountryContext')};
	string ErrorMessage {xpath('ErrorMessage')};
	dataset(t_ResultMatch) Matches {xpath('Matches/ResultMatch'), MAXCOUNT(iesp.Constants.gwBridger.MaxItem)};
	string NameContext {xpath('NameContext')};
	integer SearchWord {xpath('SearchWord')};
	string WarningMessage {xpath('WarningMessage')};
end;
		
export t_ResultUnstructuredEFTRecord := record (t_ResultRecord)
	t_InputUnstructuredEFTRecord Input {xpath('Input')};
	dataset(t_ResultUnstructuredEFTEntity) Entities {xpath('Entities/ResultUnstructuredEFTEntity'), MAXCOUNT(iesp.Constants.gwBridger.MaxItem)};
end;
		
export t_SearchResults := record
	integer BlockID {xpath('BlockID')};
	string ErrorMessage {xpath('ErrorMessage')};
	string WarningMessage {xpath('WarningMessage')};
	string SearchTime {xpath('SearchTime')};
	string WriteTime {xpath('WriteTime')};
	dataset(t_ResultEntityRecord) EntityRecords {xpath('EntityRecords/EntityRecord'), MAXCOUNT(iesp.Constants.gwBridger.MaxItem)};
	dataset(t_ResultTextRecord) TextRecords {xpath('TextRecords/TextRecord'), MAXCOUNT(iesp.Constants.gwBridger.MaxItem)};
	dataset(t_ResultUnstructuredEFTRecord) UnstructuredEFTRecords {xpath('UnstructuredEFTRecords/UnstructuredEFTRecord'), MAXCOUNT(iesp.Constants.gwBridger.MaxItem)};
end;
		
export t_InputCompareEntity := record
	string EntityType {xpath('EntityType')}; //values['None','Unknown','Individual','Business','Vessel','Country','Unstructured','Text','']
	dataset(t_InputName) Names {xpath('Names/Name'), MAXCOUNT(iesp.Constants.gwBridger.MaxList)};
	dataset(t_InputAddress) Addresses {xpath('Addresses/Address'), MAXCOUNT(iesp.Constants.gwBridger.MaxList)};
	t_InputPhone Phone {xpath('Phone')};
	t_InputID ID {xpath('ID')};
	integer8 EntityID {xpath('EntityID')};
end;
		
export t_InputCompareRecord := record
	string ReferenceNumber {xpath('ReferenceNumber')};
	dataset(share.t_StringArrayItem) CompareTypes {xpath('CompareTypes/CompareType'), MAXCOUNT(iesp.Constants.gwBridger.MaxList)};
	string CountryPhraseType {xpath('CountryPhraseType')}; //values['None','Country','Code','AlternateName','City','Port','Term','']
	t_InputCompareEntity Entity1 {xpath('Entity1')};
	t_InputCompareEntity Entity2 {xpath('Entity2')};
end;
		
export t_CompareScore := record
	string CompareType {xpath('CompareType')}; //values['Name','Address','Country','Phone','ID','']
	integer Score {xpath('Score')};
	integer Entity1Index {xpath('Entity1Index')};
	integer Entity2Index {xpath('Entity2Index')};
	boolean PartialAddressMatch {xpath('PartialAddressMatch')};
end;
		
export t_ResultCompareRecord := record (t_ResultRecord)
	t_InputCompareRecord Input {xpath('Input')};
	dataset(t_CompareScore) Scores {xpath('Scores/Score'), MAXCOUNT(iesp.Constants.gwBridger.MaxList)};
end;
		
export t_CompareResults := record
	string CompareTime {xpath('CompareTime')};
	dataset(t_ResultCompareRecord) Records {xpath('Records/Record'), MAXCOUNT(iesp.Constants.gwBridger.MaxItem)};
end;
		
export t_MemorySnapshot := record
	integer MemoryLoad {xpath('MemoryLoad')};
	integer8 PhysicalAvail {xpath('PhysicalAvail')};
	integer8 PhysicalTotal {xpath('PhysicalTotal')};
	integer8 VirtualAvail {xpath('VirtualAvail')};
	integer8 VirtualTotal {xpath('VirtualTotal')};
	integer8 PageFileAvail {xpath('PageFileAvail')};
	integer8 PageFileTotal {xpath('PageFileTotal')};
end;
		
export t_GetDataFileListRequest := record
	boolean IncludeClientFiles {xpath('IncludeClientFiles')};
	boolean ExcludeNotAvailable {xpath('ExcludeNotAvailable')};
	boolean ExcludeSearchCriteria {xpath('ExcludeSearchCriteria')};
	string Status {xpath('Status')}; //values['NOT_LOADED','LOADING','AVAILABLE','TO_BE_UNLOADED','TO_BE_PURGED','ERROR','ANY','']
	dataset(share.t_StringArrayItem) FileNames {xpath('FileNames/FileName'), MAXCOUNT(iesp.Constants.gwBridger.MaxList)};
end;
		
export t_LoadDataFileRequest := record
	dataset(share.t_StringArrayItem) FileNames {xpath('FileNames/FileName'), MAXCOUNT(iesp.Constants.gwBridger.MaxList)};
end;
		
export t_UnloadDataFileRequest := record
	dataset(share.t_StringArrayItem) FileNames {xpath('FileNames/FileName'), MAXCOUNT(iesp.Constants.gwBridger.MaxList)};
	boolean DeleteFiles {xpath('DeleteFiles')};
end;
		
export t_SearchRequest := record (share.t_BaseRequest)
	t_SearchConfiguration Config {xpath('Config')};
	t_SearchInput Input {xpath('Input')};
end;
		
export t_SearchIDRequest := record
	dataset(t_ConfigDataFile) DataFiles {xpath('DataFiles/ConfigDataFile'), MAXCOUNT(iesp.Constants.gwBridger.MaxList)};
	t_InputID InputID {xpath('InputID')};
end;
		
export t_CompareRequest := record
	t_SearchConfiguration Config {xpath('Config')};
	dataset(t_InputCompareRecord) Records {xpath('Records/Record'), MAXCOUNT(iesp.Constants.gwBridger.MaxList)};
end;
		
export t_HeartBeatRequest := record
	string fill;
end;
		
export t_GetDataFileListResponse := record
	dataset(t_DataFileInfo) GetDataFileListResult {xpath('GetDataFileListResult/DataFileInfo'), MAXCOUNT(iesp.Constants.gwBridger.MaxList)};
end;
		
export t_LoadDataFileResponse := record
	string ErrorMessage {xpath('ErrorMessage')};
end;
		
export t_UnloadDataFileResponse := record
	string ErrorMessage {xpath('ErrorMessage')};
end;
		
export t_SearchResponse := record
	t_SearchResults SearchResult {xpath('SearchResult')};
end;
		
export t_SearchIDResponse := record
	string ErrorMessage {xpath('ErrorMessage')};
	string WarningMessage {xpath('WarningMessage')};
	t_InputID InputID {xpath('InputID')};
	dataset(t_ResultMatch) Matches {xpath('Matches/ResultMatch'), MAXCOUNT(iesp.Constants.gwBridger.MaxItem)};
end;
		
export t_CompareResponse := record
	t_CompareResults CompareResults {xpath('CompareResults')};
end;
		
export t_HeartBeatResponse := record
	t_MemorySnapshot Memory {xpath('Memory')};
end;
		

end;

/*** Not to be hand edited (changes will be lost on re-generation) ***/
/*** ECL Interface generated by esdl2ecl version 1.0 from WsSearchCore.xml. ***/
/*===================================================*/

