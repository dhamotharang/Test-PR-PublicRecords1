ID "d242f5cd-c525-4f40-4242-29cf5674262e";
NAME AppendClaimOutlier;
LABEL "Append Claim Outlier";
CATEGORY APPEND;
VERSION "2.1";
AUTHOR "periassx";
DESCRIPTION "Append Claim Outlier Stats";

PERMISSIONS
 VIEW:PUBLIC;
 EDIT:PRIVATE;
 RUN:PUBLIC;
END
 
INPUTS
    STRING Prefix:LABEL("Append Column Prefix"),DEFAULT("ClaimOutlier");
	STRING HOMESTATE:LABEL("Home State"),DEFAULT("^GLOBAL|HOMESTATE");
	STRING NEIGHBORINGSTATES:LABEL("Neighboring States"),DEFAULT(^GLOBAL|NEIGHBORINGSTATES),OPTIONAL;
	INT    DRIVINGDISTANCEMIN:LABEL("Driving Distance Minimum Range"),DEFAULT(^GLOBAL|DRIVINGDISTANCEMIN),OPTIONAL;
	INT    DRIVINGDISTANCEMAX:LABEL("Driving Distance Maximum Range"),DEFAULT(^GLOBAL|DRIVINGDISTANCEMAX),OPTIONAL;
	INT    OUTLIERPERCENTILE:LABEL("Outlier Percetile"),DEFAULT(^GLOBAL|OUTLIERPERCENTILE),OPTIONAL;
	INT    IMPACTRANGE01MIN:LABEL("Impact Dollar Min Range 01"),DEFAULT(^GLOBAL|IMPACTRANGE01MIN),OPTIONAL;
	INT    IMPACTRANGE01MAX:LABEL("Impact Dollar Max Range 01"),DEFAULT(^GLOBAL|IMPACTRANGE01MAX),OPTIONAL;
	INT    IMPACTRANGE02MIN:LABEL("Impact Dollar Min Range 02"),DEFAULT(^GLOBAL|IMPACTRANGE02MIN),OPTIONAL;
	INT    IMPACTRANGE02MAX:LABEL("Impact Dollar Max Range 02"),DEFAULT(^GLOBAL|IMPACTRANGE02MAX),OPTIONAL;
	INT    IMPACTRANGE03MIN:LABEL("Impact Dollar Min Range 03"),DEFAULT(^GLOBAL|IMPACTRANGE03MIN),OPTIONAL;
	INT    IMPACTRANGE03MAX:LABEL("Impact Dollar Max Range 03"),DEFAULT(^GLOBAL|IMPACTRANGE03MAX),OPTIONAL;
	INT    IMPACTRANGE04MIN:LABEL("Impact Dollar Min Range 04"),DEFAULT(^GLOBAL|IMPACTRANGE04MIN),OPTIONAL;
	INT    IMPACTRANGE04MAX:LABEL("Impact Dollar Max Range 04"),DEFAULT(^GLOBAL|IMPACTRANGE04MAX),OPTIONAL;
	INT    IMPACTRANGE05MIN:LABEL("Impact Dollar Min Range 05"),DEFAULT(^GLOBAL|IMPACTRANGE05MIN),OPTIONAL;
	INT    IMPACTRANGE05MAX:LABEL("Impact Dollar Max Range 05"),DEFAULT(^GLOBAL|IMPACTRANGE05MAX),OPTIONAL;
	INT    IMPACTRANGE06MIN:LABEL("Impact Dollar Min Range 06"),DEFAULT(^GLOBAL|IMPACTRANGE06MIN),OPTIONAL;
	INT    IMPACTRANGE06MAX:LABEL("Impact Dollar Max Range 06"),DEFAULT(^GLOBAL|IMPACTRANGE06MAX),OPTIONAL;
	INT    IMPACTRANGE07MIN:LABEL("Impact Dollar Min Range 07"),DEFAULT(^GLOBAL|IMPACTRANGE07MIN),OPTIONAL;
	INT    IMPACTRANGE07MAX:LABEL("Impact Dollar Max Range 07"),DEFAULT(^GLOBAL|IMPACTRANGE07MAX),OPTIONAL;
	INT    IMPACTRANGE08MIN:LABEL("Impact Dollar Min Range 08"),DEFAULT(^GLOBAL|IMPACTRANGE08MIN),OPTIONAL;
	INT    IMPACTRANGE08MAX:LABEL("Impact Dollar Max Range 08"),DEFAULT(^GLOBAL|IMPACTRANGE08MAX),OPTIONAL;
	INT    IMPACTRANGE09MIN:LABEL("Impact Dollar Min Range 09"),DEFAULT(^GLOBAL|IMPACTRANGE09MIN),OPTIONAL;
	INT    IMPACTRANGE09MAX:LABEL("Impact Dollar Max Range 09"),DEFAULT(^GLOBAL|IMPACTRANGE09MAX),OPTIONAL;
	INT    IMPACTRANGE10MIN:LABEL("Impact Dollar Min Range 10"),DEFAULT(^GLOBAL|IMPACTRANGE10MIN),OPTIONAL;
	INT    IMPACTRANGE10MAX:LABEL("Impact Dollar Max Range 10"),DEFAULT(^GLOBAL|IMPACTRANGE10MAX),OPTIONAL;
	STRING ACTIVESTATEEXCLUSIONSWITCH: LABEL("Active State Exclusion Switch"),DEFAULT("^GLOBAL|ACTIVESTATEEXCLUSIONSWITCH");
	STRING ACTIVEOIGEXCLUSIONSWITCH: LABEL("Active OIG Exclusion Switch"),DEFAULT("^GLOBAL|ACTIVEOIGEXCLUSIONSWITCH");
	STRING ACTIVEOPMEXCLUSIONSWITCH: LABEL("Active OPM Exclusion Switch"),DEFAULT("^GLOBAL|ACTIVEOPMEXCLUSIONSWITCH");
	STRING PASTSTATEEXCLUSIONSWITCH: LABEL("Past State Exclusion Switch"),DEFAULT("^GLOBAL|PASTSTATEEXCLUSIONSWITCH");
	STRING PASTOIGEXCLUSIONSWITCH: LABEL("Past OIG Exclusion Switch"),DEFAULT("^GLOBAL|PASTOIGEXCLUSIONSWITCH");
	STRING PASTOPMEXCLUSIONSWITCH: LABEL("Past OPM Exclusion Switch"),DEFAULT("^GLOBAL|PASTOPMEXCLUSIONSWITCH");
	STRING ACTIVELICENSEREVOCATIONSWITCH: LABEL("Active License Revocation Switch"),DEFAULT("^GLOBAL|ACTIVELICENSEREVOCATIONSWITCH");
	STRING PASTLICENSEREVOCATIONSWITCH: LABEL("Past License Revocation Switch"),DEFAULT("^GLOBAL|PASTLICENSEREVOCATIONSWITCH");
	STRING LICENSEEXPIREDSWITCH: LABEL("License Expired Switch"),DEFAULT("^GLOBAL|LICENSEEXPIREDSWITCH");
	STRING NPIDEACTIVATEDSWITCH: LABEL("NPI Deactivated Switch"),DEFAULT("^GLOBAL|NPIDEACTIVATEDSWITCH");
	STRING DECEASEDPATIENTSSWITCH: LABEL("Deceased Patients Switch"),DEFAULT("^GLOBAL|DECEASEDPATIENTSSWITCH");
	STRING DECEASEDSWITCH: LABEL("Deceased Switch"),DEFAULT("^GLOBAL|DECEASEDSWITCH");
	STRING BANKRUPTCYSWITCH: LABEL("Bankruptcy Switch"),DEFAULT("^GLOBAL|BANKRUPTCYSWITCH");
	STRING CRIMINALHISTORYSWITCH: LABEL("Criminal History Switch"),DEFAULT("^GLOBAL|CRIMINALHISTORYSWITCH");
	STRING DMECODE:DEFAULT(^GLOBAL|DMECODE),FORMFIELD(HIDDEN);
	STRING LABCODE:DEFAULT(^GLOBAL|LABCODE),FORMFIELD(HIDDEN);
	STRING DATEFORMAT:DEFAULT("%Y%m%d"),FORMFIELD(HIDDEN);
    DATASET dsProvider:MAPBYNAME
		FIELD ProviderKey:LABEL("Provider Key"),DESCRIPTION("Primary Key Used To Uniquely Identify Each Distinct Provider"),OPTIONAL,NULL("");
		FIELD ProviderLNPID:LABEL("Provider ID"),DESCRIPTION("Lexis Nexis Professional ID"),OPTIONAL,NULL("");
		FIELD ProviderLEXID:LABEL("Provider Consumer ID"),DESCRIPTION("Lexis Nexis Consumer ID"),OPTIONAL,NULL("");
		FIELD ClientNPINumber:LABEL("Client NPI NUMBER"),DESCRIPTION("Client 10-Digit Nation Provider Identification Number"),OPTIONAL,NULL("");								
		FIELD ProviderDEANumber:LABEL("DEA NUMBER"),DESCRIPTION("9-Digit Drug Enforcement Administration Number"),OPTIONAL,NULL("");												
		FIELD ProviderTaxonomy:LABEL("TAXONOMY"),DESCRIPTION("10-Digit Provider Taxonomy Code"),OPTIONAL,NULL("");																
		FIELD ProviderFacilityName:LABEL("Provider Facility Name"),DESCRIPTION("Provider Facility Name"),OPTIONAL,NULL("");
		FIELD ProviderFirstName:LABEL("First Name"),DESCRIPTION("First Name"),OPTIONAL,NULL("");
		FIELD ProviderMiddleName:LABEL("Middle Name"),DESCRIPTION("Middle Name"),OPTIONAL,NULL("");
		FIELD ProviderLastName:LABEL("Last Name"),DESCRIPTION("Last Name"),OPTIONAL,NULL("");
		FIELD ProviderNameSuffix:LABEL("Suffix Name"),DESCRIPTION("Suffix Name"),OPTIONAL,NULL("");    
		FIELD ProviderPrimaryRange:LABEL("Primary Range"), DESCRIPTION("Primary Range, street number"),OPTIONAL,NULL("");
		FIELD ProviderPreDirectional:LABEL("Pre-Direction"), DESCRIPTION("Pre-Directional"),OPTIONAL,NULL("");
		FIELD ProviderPrimaryName:LABEL("Primary Name"), DESCRIPTION("Primary Name, street name"),OPTIONAL,NULL("");
		FIELD ProviderPostDirectional:LABEL("Post-Direction"), DESCRIPTION("Post-Directional"),OPTIONAL,NULL("");
		FIELD ProviderAddressSuffix:LABEL("Address Suffix"), DESCRIPTION("Address Suffix"),OPTIONAL,NULL("");
		FIELD ProviderSecondaryRange:LABEL("Secondary Range"), DESCRIPTION("Secondary Range, Apt or Suite"),OPTIONAL,NULL("");
		FIELD ProviderCity : LABEL("City"), DESCRIPTION("City"),OPTIONAL,NULL("");
		FIELD ProviderState : LABEL("State"), DESCRIPTION("Two-letter state abbreviation"),OPTIONAL,NULL("");
		FIELD ProviderZip5:LABEL("Zip Code"), DESCRIPTION("Zip Code"),OPTIONAL,NULL("");     
		FIELD ProviderCounty:LABEL("County"),DESCRIPTION("County Name"),OPTIONAL,NULL("");																
		FIELD ProviderCountry:LABEL("Country"),DESCRIPTION("2-Byte Country Code"),OPTIONAL,NULL("");																		
		FIELD ProviderPractisePrimaryRange:LABEL("Practise Primary Range"), DESCRIPTION("Practise Primary Range, street number"),OPTIONAL,NULL("");
		FIELD ProviderPractisePreDirectional:LABEL("Practise Pre-Direction"), DESCRIPTION("Practise Pre-Directional"),OPTIONAL,NULL("");
		FIELD ProviderPractisePrimaryName:LABEL("Practise Primary Name"), DESCRIPTION("Practise Primary Name, street name"),OPTIONAL,NULL("");
		FIELD ProviderPractisePostDirectional:LABEL("Practise Post-Direction"), DESCRIPTION("Practise Post-Directional"),OPTIONAL,NULL("");
		FIELD ProviderPractiseAddressSuffix:LABEL("Practise Address Suffix"), DESCRIPTION("Practise Address Suffix"),OPTIONAL,NULL("");
		FIELD ProviderPractiseSecondaryRange:LABEL("Practise Secondary Range"), DESCRIPTION("Practise Secondary Range, Apt or Suite"),OPTIONAL,NULL("");
		FIELD ProviderPractiseCity : LABEL("Practise City"), DESCRIPTION("Practise City"),OPTIONAL,NULL("");
		FIELD ProviderPractiseState : LABEL("Practise State"), DESCRIPTION("Two-letter state abbreviation"),OPTIONAL,NULL("");
		FIELD ProviderPractiseZip5:LABEL("Practise Zip Code"), DESCRIPTION("Practise Zip Code"),OPTIONAL,NULL("");     
		FIELD ProviderSpecialityCode:LABEL("Provider Speciality Code"),DESCRIPTION("Provider Speciality Code"),OPTIONAL,NULL("");														
		FIELD ProviderClientSpecialityCode:LABEL("Provider Client Speciality Code"),DESCRIPTION("Provider Client Speciality Code"),OPTIONAL,NULL("");														
		FIELD ProviderType:LABEL("Provider Type"),DESCRIPTION("Indicator To Show Whether This Is Professional Or Facility Type Of Provider"),OPTIONAL,NULL("");		
		FIELD ProviderLatitude:LABEL("Latitude"),DESCRIPTION("Latitude"),OPTIONAL,NULL("");
		FIELD ProviderLongitude:LABEL("Longitude"),DESCRIPTION("Longitude"),OPTIONAL,NULL("");
		FIELD ProviderNPINumber:LABEL("NPI Number"),DESCRIPTION("10-Digit Nation Provider Identification Number"),OPTIONAL,NULL("");
		FIELD ProviderNPIEnumerationDate:LABEL("NPI Enumeration Date"),DESCRIPTION("10-Digit National Provider Identification Number Enumeration Date"),OPTIONAL,NULL("");
		FIELD ProviderNPIDeactivationDate:LABEL("NPI Deactivation Date"),DESCRIPTION("10-Digit National Provider Identification Number Deactivation Date"),OPTIONAL,NULL("");
		FIELD ProviderEntityType:LABEL("Provider Entity Type"),DESCRIPTION("Provider Entity Type"),OPTIONAL,NULL("");
		FIELD ProviderNPIFlag:LABEL("NPI Flag"),DESCRIPTION("NPI Flag"),OPTIONAL,NULL("");
		FIELD ProviderDEAExpiredDate:LABEL("DEA Expired Date"),DESCRIPTION("DEA Expired Date"),OPTIONAL,NULL("");
		FIELD ProviderVacationBeginDate:LABEL("Vacation Begin Date"),DESCRIPTION("Vacation Begin Date"),OPTIONAL,NULL("");
		FIELD ProviderVacationEndDate:LABEL("Vacation End Date"),DESCRIPTION("Vacation End Date"),OPTIONAL,NULL("");
		FIELD ProviderDateofDeath:LABEL("Date Of Death"),DESCRIPTION("Date Of Death"),OPTIONAL,NULL("");	
		FIELD ProviderLicenseExpiredDate:LABEL("License Expired Date"),DESCRIPTION("License Expired Date"),OPTIONAL,NULL("");
		FIELD ProviderCurrentStateExclusionDate:LABEL("Current State Exclusion Date"),DESCRIPTION("Current State Exclusion Date"),OPTIONAL,NULL("");
		FIELD ProviderCurrentOIGExclusionDate:LABEL("Current OIG Exclusion Date"),DESCRIPTION("Current OIG Exclusion Date"),OPTIONAL,NULL("");		
		FIELD ProviderCurrentOPMExclusionDate:LABEL("Current OPM Exclusion Date"),DESCRIPTION("Current OPM Exclusion Date"),OPTIONAL,NULL("");		
		FIELD ProviderPastStateExclusionDate:LABEL("Past State Exclusion Date"),DESCRIPTION("Past State Exclusion Date"),OPTIONAL,NULL("");
		FIELD ProviderPastOIGExclusionDate:LABEL("Past OIG Exclusion Date"),DESCRIPTION("Past OIG Exclusion Date"),OPTIONAL,NULL("");		
		FIELD ProviderPastOPMExclusionDate:LABEL("Past OPM Exclusion Date"),DESCRIPTION("Past OPM Exclusion Date"),OPTIONAL,NULL("");		
		FIELD ProviderCurrentRevokedLicenseDate:LABEL("Current Revoked License Date"),DESCRIPTION("Current Revoked License Date"),OPTIONAL,NULL("");
		FIELD ProviderPastRevokedLicenseDate:LABEL("Past Revoked License Date"),DESCRIPTION("Past Revoked License Date"),OPTIONAL,NULL("");
		FIELD ProviderBankruptcyDate:LABEL("Bankruptcy Date"),DESCRIPTION("Bankruptcy Date"),OPTIONAL,NULL("");		
		FIELD ProviderConvictionDate:LABEL("Conviction Date"),DESCRIPTION("Conviction Date"),OPTIONAL,NULL("");
		FIELD ProviderActiveStateExclusionFlag:LABEL("Active State Exclusion Flag"),DESCRIPTION("Active State Exclusion Flag"),OPTIONAL,NULL("");
		FIELD ProviderActiveOIGExclusionFlag:LABEL("Active OIG Exclusion Flag"),DESCRIPTION("Active OIG Exclusion Flag"),OPTIONAL,NULL("");
		FIELD ProviderActiveOPMExclusionFlag:LABEL("Active OPM Exclusion Flag"),DESCRIPTION("Active OPM Exclusion Flag"),OPTIONAL,NULL("");
		FIELD ProviderPastStateExclusionFlag:LABEL("Past State Exclusion Flag"),DESCRIPTION("Past State Exclusion Flag"),OPTIONAL,NULL("");
		FIELD ProviderPastOIGExclusionFlag:LABEL("Past OIG Exclusion Flag"),DESCRIPTION("Past OIG Exclusion Flag"),OPTIONAL,NULL("");
		FIELD ProviderPastOPMExclusionFlag:LABEL("Past OPM Exclusion Flag"),DESCRIPTION("Past OPM Exclusion Flag"),OPTIONAL,NULL("");
		FIELD ProviderActiveLicenseRevokedFlag:LABEL("Active License Revoked Flag"),DESCRIPTION("Active License Revoked Flag"),OPTIONAL,NULL("");
		FIELD ProviderPastLicenseRevokedFlag:LABEL("Past License Revoked Flag"),DESCRIPTION("Past License Revoked Flag"),OPTIONAL,NULL("");
		FIELD ProviderCurrentExclusionState:LABEL("Current Exclusion License State"),DESCRIPTION("Current Exclusion License State"),OPTIONAL,NULL("");
		FIELD ProviderCurrentRevokedState:LABEL("Current Revoked License State"),DESCRIPTION("Current Revoked License State"),OPTIONAL,NULL("");
		FIELD ProviderPastExclusionState:LABEL("Past Exclusion License State"),DESCRIPTION("Past Exclusion License State"),OPTIONAL,NULL("");
		FIELD ProviderPastRevokedState:LABEL("Past Revoked License State"),DESCRIPTION("Past Revoked License State"),OPTIONAL,NULL("");
		FIELD ProviderLicenseExpiredState:LABEL("License Expired State"),DESCRIPTION("License Expired State"),OPTIONAL,NULL("");
		FIELD ProviderLicenseExpiredFlag:LABEL("License Expired Flag"),DESCRIPTION("License Expired Flag"),OPTIONAL,NULL("");
		FIELD ProviderLicenseInactiveState:LABEL("License Inactive State"),DESCRIPTION("License Inactive State"),OPTIONAL,NULL("");
		FIELD ProviderLicenseRevokedState:LABEL("License Revoked State"),DESCRIPTION("License Revoked State"),OPTIONAL,NULL("");
		

		FIELD ProviderSingleAddressFlag:LABEL("Single Address Flag"),DESCRIPTION("Single Address Flag"),OPTIONAL,NULL("");		
		FIELD ProviderPastBeginStateExclusionDate:LABEL("Past Start State Exclusion Date"),DESCRIPTION("Past Start Start Exclusion Date"),OPTIONAL,NULL("");				
		FIELD ProviderPastBeginOIGExclusionDate:LABEL("Past Start OIG Exclusion Date"),DESCRIPTION("Past Start OIG Exclusion Date"),OPTIONAL,NULL("");		
		FIELD ProviderPastBeginOPMExclusionDate:LABEL("Past Start OPM Exclusion Date"),DESCRIPTION("Past Start OPM Exclusion Date"),OPTIONAL,NULL("");		
		FIELD ProviderPastRevokedBeginLicenseDate:LABEL("Past Revoked Start License Date"),DESCRIPTION("Past Revoked Start License Date"),OPTIONAL,NULL("");
    END

    DATASET dsPatient:MAPBYNAME
		FIELD PatientKey:LABEL("Patient Key"),DESCRIPTION("Primary Key Used To Uniquely Identify Each Distinct Patient"),OPTIONAL,NULL("");
		FIELD PatientLexID:LABEL("Patient Consumer ID"),DESCRIPTION("Lexis Nexis Consumer ID"),OPTIONAL,NULL("");
		FIELD PatientNumber:LABEL("Patient Number"),DESCRIPTION("The ID Of The Member/Patient The Claim Processed Against"),OPTIONAL,NULL("");
		FIELD PatientSequenceNumber:LABEL("Patient Sequence Number"),DESCRIPTION("The Number Is Used to Distinguish Dependents"),OPTIONAL,NULL("");
		FIELD PatientSSN:LABEL("Patient SSN"),DESCRIPTION("9-Digit Patient Social Security Number"),OPTIONAL,NULL("");								
		FIELD PatientFirstName:LABEL("First Name"),DESCRIPTION("First Name"),OPTIONAL,NULL("");
		FIELD PatientMiddleName:LABEL("Middle Name"),DESCRIPTION("Middle Name"),OPTIONAL,NULL("");
		FIELD PatientLastName:LABEL("Last Name"),DESCRIPTION("Last Name"),OPTIONAL,NULL("");
		FIELD PatientNameSuffix:LABEL("Suffix Name"),DESCRIPTION("Suffix Name"),OPTIONAL,NULL("");    
		FIELD PatientPrimaryRange:LABEL("Primary Range"), DESCRIPTION("Primary Range, street number"),OPTIONAL,NULL("");
		FIELD PatientPreDirectional:LABEL("Pre-Direction"), DESCRIPTION("Pre-Directional"),OPTIONAL,NULL("");
		FIELD PatientPrimaryName:LABEL("Primary Name"), DESCRIPTION("Primary Name, street name"),OPTIONAL,NULL("");
		FIELD PatientPostDirectional:LABEL("Post-Direction"), DESCRIPTION("Post-Directional"),OPTIONAL,NULL("");
		FIELD PatientAddressSuffix:LABEL("Address Suffix"), DESCRIPTION("Address Suffix"),OPTIONAL,NULL("");
		FIELD PatientSecondaryRange:LABEL("Secondary Range"), DESCRIPTION("Secondary Range, Apt or Suite"),OPTIONAL,NULL("");
		FIELD PatientCity : LABEL("City"), DESCRIPTION("City"),OPTIONAL,NULL("");
		FIELD PatientState : LABEL("State"), DESCRIPTION("Two-letter state abbreviation"),OPTIONAL,NULL("");
		FIELD PatientZip5:LABEL("Zip Code"), DESCRIPTION("Zip Code"),OPTIONAL,NULL("");     
		FIELD PatientCounty:LABEL("County"),DESCRIPTION("County Name"),OPTIONAL,NULL("");																
		FIELD PatientCountry:LABEL("Country"),DESCRIPTION("2-Byte Country Code"),OPTIONAL,NULL("");																
		FIELD PatientDateOfBirth:LABEL("Date Of Birth"),DESCRIPTION("Date Of Birth"),OPTIONAL,NULL("");																
		FIELD PatientGender:LABEL("Gender"),DESCRIPTION("Gender"),OPTIONAL,NULL("");		
		FIELD PatientDeceasedFlag:LABEL("Date of Death Indicator"),DESCRIPTION("Date Of Death Indicator"),OPTIONAL,NULL("");																			
		FIELD PatientDateOfDeath:LABEL("Date Of Death"),DESCRIPTION("Date Of Death"),OPTIONAL,NULL("");																	
		FIELD PatientClientDateOfDeath:LABEL("Client Date Of Death"),DESCRIPTION("Client Date Of Death"),OPTIONAL,NULL("");																	
		FIELD PatientLatitude:LABEL("Latitude"),DESCRIPTION("Latitude"),OPTIONAL,NULL("");
		FIELD PatientLongitude:LABEL("Longitude"),DESCRIPTION("Longitude"),OPTIONAL,NULL("");
	END

    DATASET dsClaim:MAPBYNAME
		FIELD ClaimTransactionKey:LABEL("Transaction ID"),DESCRIPTION("The key is used to identify a unique transaction"),OPTIONAL,NULL("");	
		FIELD ClaimRenderingProviderKey:LABEL("Rendering Provider Key"),DESCRIPTION("Provider Key used to identify the Rendering Provider"),OPTIONAL,NULL("");
		FIELD ClaimPatientKey:LABEL("Patient Key"),DESCRIPTION("Patient Key"),OPTIONAL,NULL("");								
		FIELD ClaimNumber:LABEL("Claim Number"),DESCRIPTION("Internal Claim Number To Identify Unique Claims"),OPTIONAL,NULL("");										
		FIELD ClaimLineNumber:LABEL("Claim Line Number"),DESCRIPTION("Uniquely Identifier Individual Claim Line"),OPTIONAL,NULL("");									
		FIELD ClaimBeginningDateOfService:LABEL("Begging Date Of Service"),DESCRIPTION("The Initial Date Of When A Service Was Provided"),OPTIONAL,NULL("");										
		FIELD ClaimEndingDateOfService:LABEL("Ending Date Of Service"),DESCRIPTION("The Completion Date Of When A Service Was Provided"),OPTIONAL,NULL("");										
		FIELD ClaimServiceDate:LABEL("Service Date"),DESCRIPTION("The Completion Date Of When A Service Was Provided"),OPTIONAL,NULL("");											
		FIELD ClaimChargeAmount:LABEL("Charge Amount"),DESCRIPTION("Amount Charged For The Item"),OPTIONAL,NULL("");																
		FIELD ClaimPaidAmount:LABEL("Paid Amount"),DESCRIPTION("Claim Amount Paid"),OPTIONAL,NULL("");
	END

    DATASET dsExclusionList:MAPBYNAME
		FIELD ExclusionFacilityName:LABEL("Exclusion Facility Name"),DESCRIPTION("Exclusion Facility Name"),OPTIONAL,NULL("");
		FIELD ExclusionPrimaryRange:LABEL("Primary Range"), DESCRIPTION("Primary Range, street number"),OPTIONAL,NULL("");
		FIELD ExclusionPreDirectional:LABEL("Pre-Direction"), DESCRIPTION("Pre-Directional"),OPTIONAL,NULL("");
		FIELD ExclusionPrimaryName:LABEL("Primary Name"), DESCRIPTION("Primary Name, street name"),OPTIONAL,NULL("");
		FIELD ExclusionPostDirectional:LABEL("Post-Direction"), DESCRIPTION("Post-Directional"),OPTIONAL,NULL("");
		FIELD ExclusionAddressSuffix:LABEL("Address Suffix"), DESCRIPTION("Address Suffix"),OPTIONAL,NULL("");
		FIELD ExclusionSecondaryRange:LABEL("Secondary Range"), DESCRIPTION("Secondary Range, Apt or Suite"),OPTIONAL,NULL("");
		FIELD ExclusionCity : LABEL("City"), DESCRIPTION("City"),OPTIONAL,NULL("");
		FIELD ExclusionState : LABEL("State"), DESCRIPTION("Two-letter state abbreviation"),OPTIONAL,NULL("");
		FIELD ExclusionZip5:LABEL("Zip Code"), DESCRIPTION("Zip Code"),OPTIONAL,NULL("");     
	END
END

OUTPUTS
    DATASET dsOutput(dsProvider):PREFIX(INPUTS.Prefix), APPEND		
		INTEGER8 	ProviderClaimCount;
		INTEGER8 	LNPIDClaimCount;
		INTEGER8 	ProviderPatientCount;
		INTEGER8	PatientDeceasedCount;
		REAL8		ProviderHighChargeAmount;
		REAL8		LNPIDHighChargeAmount;
		REAL8		ProviderHighPaidAmount;
		REAL8		LNPIDHighPaidAmount;
		REAL8 	 	ProviderHighPaidAmountPerClaim;
		REAL8		ProviderHighPaidAmountPerPatient;
		STRING8	 	ProviderServiceDateMin;
		STRING8	 	ProviderServiceDateMax;
		STRING1  	ExcludeAddressFlag;
		STRING1		PatientDeceasedFlag;
		STRING1 	ProviderNPIDeactivatedFlag;
		STRING1		ProviderDEADeactivatedFlag;
		INTEGER8    ProviderPatientAddressCount;
		STRING1		ProviderPatientAddressFlag;
		INTEGER8	AddressProviderCount;
		INTEGER8	AddressPatientCount;
		INTEGER8	AddressClaimCount;
		REAL8		AddressHighChargeAmount;
		REAL8		AddressHighPaidAmount;
		STRING8	 	AddressServiceDateMin;
		STRING8	 	AddressServiceDateMax;
		INTEGER8  	TotalNPICount;
		INTEGER8	RecentNPICount;
		INTEGER8	StudentNPICount;
		STRING1		RecentNPIFlag;
		STRING1		StudentNPIFlag;
		INTEGER8    LargePatientGroupCount;
		STRING1		LargePatientGroupFlag;
		STRING1		VacantAddressActivityFlag;
		UNSIGNED4	NoOfAddress;
		REAL8		Distance;
		STRING1		ClaimCountFlag;
		STRING1		PatientCountFlag;
		STRING1	    HighPaidAmountFlag;
		STRING1		HighPaidAmountPerClaimFlag;
		STRING1		HighPaidAmountPerPatientFlag;
		STRING1		LongDistanceFlag;
		STRING1		DMEFlag;
		STRING1		LABFlag;
		UNSIGNED2 	ClaimCountRank;
		UNSIGNED2 	PatientCountRank;
		UNSIGNED2 	HighPaidAmountRank;
		UNSIGNED2 	HighPaidAmountPerClaimRank;
		UNSIGNED2 	HighPaidAmountPerPatientRank;
		UNSIGNED2 	LongDistanceRank;
		UNSIGNED2 	DMERank;
		UNSIGNED2 	LABRank;
		UNSIGNED8 	ClaimCountMedian;
		UNSIGNED8 	PatientCountMedian;
		UNSIGNED8 	HighPaidAmountMedian;
		UNSIGNED8 	HighPaidAmountPerClaimMedian;
		UNSIGNED8 	HighPaidAmountPerPatientMedian;
		UNSIGNED8 	LongDistanceMedian;
		UNSIGNED8 	DMEMedian;
		UNSIGNED8 	LABMedian;
		UNSIGNED8 	DMEPatientMedian;
		UNSIGNED8 	DMEClaimMedian;
		UNSIGNED8 	LABPatientMedian;
		UNSIGNED8 	LABClaimMedian;
		STRING2		ClaimCountOutlierType;
		STRING2 	PatientCountOutlierType;
		STRING2 	HighPaidAmountOutlierType;
		STRING2 	HighPaidAmountPerClaimOutlierType;
		STRING2 	HighPaidAmountPerPatientOutlierType;
		STRING2		LongDistanceOutlierType;
		STRING2		DMEOutlierType;
		STRING2		LABOutlierType;
		REAL4		ClaimCountOutlierDiff;
		REAL4 		PatientCountOutlierDiff;
		REAL4 		HighPaidAmountOutlierDiff;
		REAL4 		HighPaidAmountPerClaimOutlierDiff;
		REAL4 		HighPaidAmountPerPatientOutlierDiff;
		REAL4		LongDistanceOutlierDiff;
		REAL4		DMEOutlierDiff;
		REAL4		LABOutlierDiff;
		INTEGER8	NoOfPatientDrivingLongDistance;
		REAL8		AveDistanceTravelled;
		INTEGER8	PatientDOD;
		STRING50	ProviderPatientSharedAddress;
		STRING50	LargePatientGroupAddress;	
    		STRING1   	ProviderDeceasedFlag;
    		STRING1   	ProviderLicenseExpiredFlag;
		INTEGER8 	ActiveStateExclusionImpactAmount;
		INTEGER8 	ActiveOIGExclusionImpactAmount;
		INTEGER8 	ActiveOPMExclusionImpactAmount;
		INTEGER8 	PastStateExclusionImpactAmount;
		INTEGER8 	PastOIGExclusionImpactAmount;
		INTEGER8 	PastOPMExclusionImpactAmount;
		INTEGER8 	CurrentLicenseRevokedImpactAmount;
		INTEGER8 	PastLicenseRevokedImpactAmount;
		INTEGER8 	LicenseExpiredImpactAmount;
		INTEGER8 	NPIDeactiveImpactAmount;
		INTEGER8 	PatientDeceasedImpactAmount;
		INTEGER8 	ProviderDeceasedImpactAmount;
		INTEGER8 	BankruptcyImpactAmount;
		INTEGER8 	ConvictionImpactAmount;
		INTEGER8 	ActiveStateExclusionClaimCount;
		INTEGER8 	ActiveOIGExclusionClaimCount;
		INTEGER8 	ActiveOPMExclusionClaimCount;
		INTEGER8 	PastStateExclusionClaimCount;
		INTEGER8 	PastOIGExclusionClaimCount;
		INTEGER8 	PastOPMExclusionClaimCount;
		INTEGER8 	CurrentLicenseRevokedClaimCount;
		INTEGER8 	PastLicenseRevokedClaimCount;
		INTEGER8 	LicenseExpiredClaimCount;
		INTEGER8 	NPIDeactiveClaimCount;
		INTEGER8 	PatientDeceasedClaimCount;
		INTEGER8 	ProviderDeceasedClaimCount;
		INTEGER8 	BankruptcyClaimCount;
		INTEGER8 	ConvictionClaimCount;
		INTEGER8 	ProviderImpactAmount;
		INTEGER8 	ProviderImpactClaimCount;
		INTEGER8 	AddressImpactAmount;
		INTEGER8 	AddressImpactClaimCount;
		INTEGER8 	LNPIDImpactAmount;
		INTEGER8    	LNPIDImpactClaimCount;
		INTEGER1	ProviderImpactRange;
		INTEGER1	ProviderImpactPercent;		
		INTEGER4 	ClientSingleAddressCount;
		STRING1  	ClientSingleAddressFlag;
  END

    DATASET dsClaimStats:SIDE
		STRING50 ProviderKey; 
		UNSIGNED8 LNPID; 
		STRING10 PrimaryRange; 
		STRING2 PreDirectional; 
		STRING28 PrimaryName; 
		STRING4 AddressSuffix; 
		STRING2 PostDirectional; 
		STRING8 SecondaryRange; 
		STRING25 City; 
		STRING2 State; 
		STRING5 Zip; 
		STRING9 Speciality; 
		STRING9 ClientSpeciality; 
		INTEGER8 ProviderClaimCount; 
		INTEGER8 ProviderPatientCount; 
		INTEGER8 PatientDeceasedCount; 
		REAL8 ProviderHighChargeAmount; 
		REAL8 ProviderHighPaidAmount; 
		INTEGER8 ProviderHighPaidAmountPerClaim; 
		INTEGER8 ProviderHighPaidAmountPerPatient; 
		STRING8 ProviderServiceDateMin; 
		STRING8 ProviderServiceDateMax; 
		STRING1 ExcludeAddressFlag; 
		STRING1 PatientDeceasedFlag; 
		STRING1 ProviderNPIDeactivatedFlag; 
		STRING1 ProviderDEADeactivatedFlag; 
		INTEGER8 ProviderPatientAddressCount; 
		STRING1 ProviderPatientAddressFlag; 
		INTEGER8 AddressProviderCount; 
		INTEGER8 AddressPatientCount; 
		INTEGER8 AddressClaimCount;
		REAL8 AddressHighChargeAmount; 
		REAL8 AddressHighPaidAmount; 
		STRING8 AddressServiceDateMin; 
		STRING8 AddressServiceDateMax; 
		INTEGER8 TotalNPICount; 
		INTEGER8 RecentNPICount; 
		INTEGER8 StudentNPICount; 
		STRING1 RecentNPIFlag; 
		STRING1 StudentNPIFlag; 
		INTEGER8 LargePatientGroupCount; 
		STRING1 LargePatientGroupFlag; 
		STRING1 VacantAddressActivityFlag; 
		STRING1 DMEFlag; 
		STRING1 LABFlag; 
		INTEGER4 NoofAddress; 
		INTEGER8 LNPIDClaimCount; 
		REAL8 LNPIDHighChargeAmount; 
		REAL8 LNPIDHighPaidAmount; 
		INTEGER8 NoOfPatientDrivingLongDistance; 
		REAL8 AveDistanceTravelled; 
		INTEGER8 PatientDOD; 
		STRING50 ProviderPatientSharedAddress; 
		STRING50 LargePatientGroupAddress; 
		STRING1 ProviderDeceasedFlag; 
		STRING1 ProviderLicenseExpiredFlag; 
		INTEGER8 ActiveStateExclusionImpactAmount; 
		INTEGER8 ActiveOIGExclusionImpactAmount; 
		INTEGER8 ActiveOPMExclusionImpactAmount; 
		INTEGER8 PastStateExclusionImpactAmount; 
		INTEGER8 PastOIGExclusionImpactAmount; 
		INTEGER8 PastOPMExclusionImpactAmount; 
		INTEGER8 CurrentLicenseRevokedImpactAmount; 
		INTEGER8 PastLicenseRevokedImpactAmount; 
		INTEGER8 LicenseExpiredImpactAmount; 
		INTEGER8 NPIDeactiveImpactAmount; 
		INTEGER8 PatientDeceasedImpactAmount; 
		INTEGER8 ProviderDeceasedImpactAmount; 
		INTEGER8 BankruptcyImpactAmount; 
		INTEGER8 ConvictionImpactAmount; 
		INTEGER8 ActiveStateExclusionClaimCount; 
		INTEGER8 ActiveOIGExclusionClaimCount; 
		INTEGER8 ActiveOPMExclusionClaimCount; 
		INTEGER8 PastStateExclusionClaimCount; 
		INTEGER8 PastOIGExclusionClaimCount; 
		INTEGER8 PastOPMExclusionClaimCount; 
		INTEGER8 CurrentLicenseRevokedClaimCount; 
		INTEGER8 PastLicenseRevokedClaimCount; 
		INTEGER8 LicenseExpiredClaimCount; 
		INTEGER8 NPIDeactiveClaimCount; 
		INTEGER8 PatientDeceasedClaimCount; 
		INTEGER8 ProviderDeceasedClaimCount; 
		INTEGER8 BankruptcyClaimCount; 
		INTEGER8 ConvictionClaimCount; 
		INTEGER8 ProviderImpactAmount; 
		INTEGER8 ProviderImpactClaimCount; 
		INTEGER8 AddressImpactAmount; 
		INTEGER8 AddressImpactClaimCount;  
		INTEGER8 AddressActiveStateExclusionImpactAmount; 
		INTEGER8 AddressActiveOIGExclusionImpactAmount; 
		INTEGER8 AddressActiveOPMExclusionImpactAmount; 
		INTEGER8 AddressPastStateExclusionImpactAmount; 
		INTEGER8 AddressPastOIGExclusionImpactAmount; 
		INTEGER8 AddressPastOPMExclusionImpactAmount; 
		INTEGER8 AddressCurrentLicenseRevokedImpactAmount; 
		INTEGER8 AddressPastLicenseRevokedImpactAmount; 
		INTEGER8 AddressLicenseExpiredImpactAmount; 
		INTEGER8 AddressNPIDeactiveImpactAmount; 
		INTEGER8 AddressPatientDeceasedImpactAmount; 
		INTEGER8 AddressProviderDeceasedImpactAmount; 
		INTEGER8 AddressBankruptcyImpactAmount; 
		INTEGER8 AddressConvictionImpactAmount; 
		INTEGER8 LNPIDImpactAmount; 
		INTEGER8 LNPIDImpactClaimCount; 
		INTEGER8 ProviderImpactRange; 
		INTEGER4 ProviderImpactPercent; 
		INTEGER4 ClientSingleAddressCount; 
		STRING1 ClientSingleAddressFlag;    
	END

    DATASET dsProviderDistance:SIDE
		STRING50 ProviderKey;
		UNSIGNED8 LNPID;
		STRING50 PatientKey;
		INTEGER8 PatientCount;
		STRING9	 Speciality;
		STRING2	 State;
		STRING2  ProviderState;
		STRING2  PatientState;
		REAL8 	 ProvLat;
		REAL8	 ProvLong;
		REAL8 	 PatLat;
		REAL8	 PatLong;
		REAL8 	 Distance;
    END

    DATASET dsHistorical:SIDE
		STRING50  ProviderKey;
		STRING4	  Reason;
		STRING20  LNPID;
		STRING20  ProviderFirstName;
		STRING20  ProviderMiddleName;
		STRING20  ProviderLastName;
		STRING50  ProviderAddressLine1;
		STRING20  ProviderCity;
		STRING2   ProviderState;
		STRING5   ProviderZip;
		STRING20  PatientFirstName;
		STRING20  PatientMiddleName;
		STRING20  PatientLastName;
		STRING8	  PatientDOD;
		STRING10  Distance;
		STRING8   NoofVisits;
		STRING50  PatientAddressLine1;
		STRING20  PatientCity;
		STRING2   PatientState;
		STRING5   PatientZip;
		STRING50  PatientKey;
		STRING2	  State;
		STRING25  LicenseNumber;
		STRING8	  SanctionDate;
		STRING8   ReInstatementDate;
		STRING8   ExpirationDate;
		STRING9   DEANumber;
		STRING8   DEAExpirationDate;
		STRING100 SpecialtyDesc;
		STRING15  PaidAmount;
		STRING5   PaidAmountPercent;
		STRING10  NPINumber;
		STRING4	  ProviderScore;
		STRING10  ImpactDollars;
		STRING10  ClaimCount;
		STRING25  HistKey;
	END

	DATASET PerStats:PREFIX(INPUTS.Prefix),SIDE, WUID 
		STRING  FieldName;
	        INTEGER FieldPercent;
	END 
END

VISUALIZE ClaimOutlierStats:LABEL("Claim Outlier Append Stats")
    TABLE FieldPopulationPercentage(PerStats{FieldName, FieldPercent}) : VALUE (FieldName, FieldPercent), LABEL("FieldName", "FieldPercentage");	
END

GENERATES INLINE

	ProviderDistance_REC := RECORD
		STRING50 ProviderKey;
		UNSIGNED8 LNPID;
		STRING50 PatientKey;
		INTEGER8 ProviderPatientCount;
		STRING9	 Speciality;
		STRING2  State;
		STRING2  ProviderState;
		STRING2  PatientState;
		REAL8 	 ProvLat;
		REAL8	 ProvLong;
		REAL8 	 PatLat;
		REAL8	 PatLong;
		REAL8	 Distance;
	END;
	 
	%^edsProviderDistance% 	:= PROJECT (%ProviderDistance%, TRANSFORM(ProviderDistance_REC, 
										SELF.State := MAP(REGEXFIND(%GLOBAL.HOMESTATE%,LEFT.State) => 'A1',REGEXFIND(%GLOBAL.NEIGHBORINGSTATES%,LEFT.State) => 'A2','A3');
										SELF.ProviderState := LEFT.State;
										SELF.PatientState := LEFT.State_1;
										SELF.ProvLat := LEFT.Lat;
										SELF.ProvLong := LEFT.Long;
										SELF.PatLat := LEFT.Lat_1;
										SELF.PatLong := LEFT.Long_1; 										 
										SELF.Distance := 3963.3453 * ACOS (((1 + COS(0.01745 * (SELF.ProvLong - SELF.PatLong))) * COS(0.01745 * (SELF.ProvLat - SELF.PatLat)) -  (1 - COS(0.01745 * (SELF.ProvLong - SELF.PatLong))) * COS(0.01745 * (SELF.ProvLat + SELF.PatLat))) / 2); 
										SELF := LEFT;)) (Speciality <> '' AND Distance BETWEEN %GLOBAL.DRIVINGDISTANCEMIN% AND %GLOBAL.DRIVINGDISTANCEMAX%);
										
	ClaimStats_REC := RECORD
		STRING50 ProviderKey;
		UNSIGNED8 LNPID;
		STRING2  State; 
		STRING9  Speciality;
		STRING9  ClientSpeciality;
		INTEGER8 ProviderClaimCount; 
		INTEGER8 ProviderPatientCount; 
		INTEGER8 PatientDeceasedCount; 
		INTEGER8 ProviderHighChargeAmount; 
		REAL8    ProviderHighPaidAmount; 
		REAL8    ProviderHighPaidAmountPerClaim; 
		REAL8    ProviderHighPaidAmountPerPatient; 
		STRING8  ProviderServiceDateMin; 
		STRING8  ProviderServiceDateMax; 
		STRING1  ExcludeAddressFlag; 
		STRING1  PatientDeceasedFlag;
		STRING1  ProviderNPIDeactivatedFlag;
		STRING1  ProviderDEADeactivatedFlag;
		INTEGER8 ProviderPatientAddressCount;
		STRING1  ProviderPatientAddressFlag;
		INTEGER8 AddressProviderCount;
		INTEGER8 AddressPatientCount;
		INTEGER8 AddressClaimCount;
		REAL8  	 AddressHighChargeAmount;
		REAL8    AddressHighPaidAmount;
		STRING8  AddressServiceDateMin;
		STRING8  AddressServiceDateMax;
		INTEGER8 TotalNPICount;
		INTEGER8 RecentNPICount;
		INTEGER8 StudentNPICount;
		STRING1	 RecentNPIFlag;
		STRING1	 StudentNPIFlag;
		INTEGER8 LargePatientGroupCount;
		STRING1	 LargePatientGroupFlag;
		STRING1  VacantAddressActivityFlag;
		STRING1  DMEFlag;
		STRING1	 LABFlag;
		INTEGER4 NoofAddress;
		INTEGER8 LNPIDClaimCount;
		REAL4	 LNPIDHighChargeAmount;
		REAL4	 LNPIDHighPaidAmount;
		INTEGER8 NoOfPatientDrivingLongDistance;
		REAL8	 AveDistanceTravelled;
		INTEGER8 PatientDOD;
		STRING50 ProviderPatientSharedAddress;
		STRING50 LargePatientGroupAddress;
		STRING1	 ProviderDeceasedFlag;
		STRING1	 ProviderLicenseExpiredFlag;
		INTEGER8 ActiveStateExclusionImpactAmount;
		INTEGER8 ActiveOIGExclusionImpactAmount;
		INTEGER8 ActiveOPMExclusionImpactAmount;
		INTEGER8 PastStateExclusionImpactAmount;
		INTEGER8 PastOIGExclusionImpactAmount;
		INTEGER8 PastOPMExclusionImpactAmount;
		INTEGER8 CurrentLicenseRevokedImpactAmount;
		INTEGER8 PastLicenseRevokedImpactAmount;
		INTEGER8 LicenseExpiredImpactAmount;
		INTEGER8 NPIDeactiveImpactAmount;
		INTEGER8 PatientDeceasedImpactAmount;
		INTEGER8 ProviderDeceasedImpactAmount;
		INTEGER8 BankruptcyImpactAmount;
		INTEGER8 ConvictionImpactAmount;
		INTEGER8 ActiveStateExclusionClaimCount;
		INTEGER8 ActiveOIGExclusionClaimCount;
		INTEGER8 ActiveOPMExclusionClaimCount;
		INTEGER8 PastStateExclusionClaimCount;
		INTEGER8 PastOIGExclusionClaimCount;
		INTEGER8 PastOPMExclusionClaimCount;
		INTEGER8 CurrentLicenseRevokedClaimCount;
		INTEGER8 PastLicenseRevokedClaimCount;
		INTEGER8 LicenseExpiredClaimCount;
		INTEGER8 NPIDeactiveClaimCount;
		INTEGER8 PatientDeceasedClaimCount;
		INTEGER8 ProviderDeceasedClaimCount;
		INTEGER8 BankruptcyClaimCount;
		INTEGER8 ConvictionClaimCount;
		INTEGER8 ProviderImpactAmount;
		INTEGER8 ProviderImpactClaimCount;
		INTEGER8 AddressImpactAmount;
		INTEGER8 AddressImpactClaimCount;
		INTEGER8 AddressActiveStateExclusionImpactAmount;
		INTEGER8 AddressActiveOIGExclusionImpactAmount; 
		INTEGER8 AddressActiveOPMExclusionImpactAmount; 
		INTEGER8 AddressPastStateExclusionImpactAmount; 
		INTEGER8 AddressPastOIGExclusionImpactAmount; 
		INTEGER8 AddressPastOPMExclusionImpactAmount; 
		INTEGER8 AddressCurrentLicenseRevokedImpactAmount; 
		INTEGER8 AddressPastLicenseRevokedImpactAmount; 
		INTEGER8 AddressLicenseExpiredImpactAmount; 
		INTEGER8 AddressNPIDeactiveImpactAmount; 
		INTEGER8 AddressPatientDeceasedImpactAmount; 
		INTEGER8 AddressProviderDeceasedImpactAmount; 
		INTEGER8 AddressBankruptcyImpactAmount; 
		INTEGER8 AddressConvictionImpactAmount; 
		INTEGER8 LNPIDImpactAmount;
		INTEGER8 LNPIDImpactClaimCount;
		INTEGER1 ProviderImpactRange;
		INTEGER1 ProviderImpactPercent;
		INTEGER4 ClientSingleAddressCount;
		STRING1  ClientSingleAddressFlag;
	END;
	
	%^edsClaimStats%	:= PROJECT (%ClaimStats%,TRANSFORM(ClaimStats_REC, 
									SELF.State := MAP(REGEXFIND(%GLOBAL.HOMESTATE%,LEFT.State) => 'A1', 
													  REGEXFIND(%GLOBAL.NEIGHBORINGSTATES%,LEFT.State) => 'A2','A3');
									SELF.ProviderServiceDateMin := INTFORMAT(LEFT.ProviderServiceDateMin,8,1);
									SELF.ProviderServiceDateMax := INTFORMAT(LEFT.ProviderServiceDateMax,8,1);
									SELF.AddressServiceDateMin  := INTFORMAT(LEFT.AddressServiceDateMin,8,1);
									SELF.AddressServiceDateMax  := INTFORMAT(LEFT.AddressServiceDateMax,8,1);
									SELF.ProviderPatientSharedAddress 	:= Stringlib.StringCleanSpaces (LEFT.ProviderPatientSharedAddress);
									SELF.LargePatientGroupAddress		:= Stringlib.StringCleanSpaces (LEFT.LargePatientGroupAddress);
									SELF.DMEFlag := MAP(REGEXFIND(%GLOBAL.DMECODE%,TRIM(LEFT.ClientSpeciality)) => 'Y','N'); 
									SELF.LABFlag := MAP(REGEXFIND(%GLOBAL.LABCODE%,TRIM(LEFT.ClientSpeciality)) => 'Y','N'); 
									SELF.Speciality := IF (LEFT.ClientSpeciality <> '',LEFT.ClientSpeciality,LEFT.Speciality);
									SELF.PastStateExclusionImpactAmount 		:= 0;
									SELF.PastOIGExclusionImpactAmount 			:= 0;
									SELF.PastOPMExclusionImpactAmount 			:= 0;
									SELF.PastLicenseRevokedImpactAmount 		:= 0;
									SELF.BankruptcyImpactAmount 				:= 0;
									SELF.ConvictionImpactAmount 				:= 0;
									SELF.PastStateExclusionClaimCount 			:= 0;
									SELF.PastOIGExclusionClaimCount 			:= 0;
									SELF.PastOPMExclusionClaimCount 			:= 0;
									SELF.PastLicenseRevokedClaimCount 			:= 0;
									SELF.BankruptcyClaimCount 					:= 0;
									SELF.ConvictionClaimCount 					:= 0;
									SELF.AddressPastStateExclusionImpactAmount 	:= 0; 
									SELF.AddressPastOIGExclusionImpactAmount 	:= 0; 
									SELF.AddressPastOPMExclusionImpactAmount 	:= 0; 
									SELF.AddressPastLicenseRevokedImpactAmount 	:= 0; 
									SELF.AddressBankruptcyImpactAmount 			:= 0; 
									SELF.AddressConvictionImpactAmount 			:= 0; 
									SELF := LEFT; SELF := [];));
	
	OutlierStr 		:= 'State,Speciality';
	OutlierStr1		:= 'State,ClientSpeciality';
	LongOutlierStr	:= 'Speciality';	
	
	import AppendOutlierIndicator, HealthCare;

	Claim_Count_DS 				:= (%dsClaimStats% (ProviderClaimCount > 0 AND LNPID > 0 AND Speciality <> ''));
	Patient_Count_DS 			:= (%dsClaimStats% (Providerpatientcount > 0 AND LNPID > 0 AND Speciality <> ''));
	HighPaid_Count_DS 			:= (%dsClaimStats% (Providerhighpaidamount > 0 AND LNPID > 0 AND Speciality <> ''));
	HighPaidPerClaim_Count_DS 	:= (%dsClaimStats% (Providerhighpaidamountperclaim > 0 AND LNPID > 0 AND Speciality <> ''));
	HighPaidPerPat_Count_DS 	:= (%dsClaimStats% (Providerhighpaidamountperpatient > 0 AND LNPID > 0 AND Speciality <> ''));
	Distance_Count_DS 			:= (%dsProviderDistance% (Distance > 0 AND LNPID > 0));
	
	ClaimCountPercentile 				:= HealthCare.macAppendPercentileRankGrouped (Claim_Count_DS,ProviderClaimCount,OutlierStr,'idv',0);
	PatientCountPercentile 				:= HealthCare.macAppendPercentileRankGrouped (Patient_Count_DS,Providerpatientcount,OutlierStr,'idv',0);
	HightPaidAmountPercentile 			:= HealthCare.macAppendPercentileRankGrouped (HighPaid_Count_DS,Providerhighpaidamount,OutlierStr,'idv',0);
	HighPaidAmountPerClaimPercentile 	:= HealthCare.macAppendPercentileRankGrouped (HighPaidPerClaim_Count_DS,Providerhighpaidamountperclaim,OutlierStr,'idv',0);
	HighPaidAmountPerPatientPercentile  := HealthCare.macAppendPercentileRankGrouped (HighPaidPerPat_Count_DS,Providerhighpaidamountperpatient,OutlierStr,'idv',0);
	LongDistanceOutlier 				:= AppendOutlierIndicator.FN_AppendOutlierGrouped (Distance_Count_DS,Distance,LongOutlierStr,'idv',,1.5,3.0);
	LongDistancePercentile				:= TABLE (LongDistanceOutlier, {ProviderKey, idvOutlierType, idvOutlierDiff, LongDistancePercent := (COUNT(GROUP, idvOutlierType IN ['MH','mh']) / ProviderPatientCount) * 100}, ProviderKey, MERGE);

	DMEClaimsHighPaidClaim			:= %dsClaimStats% (DMEFlag = 'Y' and Providerhighpaidamountperclaim > 0);
	LABClaimsHighPaidClaim			:= %dsClaimStats% (LABFlag = 'Y' and Providerhighpaidamountperclaim > 0);
	DMEClaimsHighPaidPatient		:= %dsClaimStats% (DMEFlag = 'Y' and Providerhighpaidamountperpatient > 0);
	LABClaimsHighPaidPatient		:= %dsClaimStats% (LABFlag = 'Y' and Providerhighpaidamountperpatient > 0);

	DMEHighPaidAmountPerClaimPercentile   := HealthCare.macAppendPercentileRankGrouped (DMEClaimsHighPaidClaim,Providerhighpaidamountperclaim,OutlierStr1,'idv',0);
	DMEHighPaidAmountPerPatientPercentile := HealthCare.macAppendPercentileRankGrouped (DMEClaimsHighPaidPatient,Providerhighpaidamountperpatient,OutlierStr1,'idv',0);
	LABHighPaidAmountPerClaimPercentile   := HealthCare.macAppendPercentileRankGrouped (LABClaimsHighPaidClaim,Providerhighpaidamountperclaim,OutlierStr1,'idv',0);
	LABHighPaidAmountPerPatientPercentile := HealthCare.macAppendPercentileRankGrouped (LABClaimsHighPaidPatient,Providerhighpaidamountperpatient,OutlierStr1,'idv',0);
	
	ProviderDistancePercent_REC := RECORD
		STRING50 ProviderKey;
		STRING50 PatientKey;
		INTEGER8 ProviderPatientCount;
		STRING9	 Speciality;
		STRING2  State;
		STRING2  ProviderState;
		STRING2  PatientState;
		REAL8 	 ProvLat;
		REAL8	 ProvLong;
		REAL8 	 PatLat;
		REAL8	 PatLong;
		REAL8	 Distance;
		REAL4 	 LongDistancePercent;
		STRING2  idvOutlierType;
		REAL8 	 idvOutlierDiff;
	END;
	
	ProviderDistancePercent_DS		:= JOIN (%dsProviderDistance%, LongDistancePercentile, LEFT.ProviderKey = RIGHT.ProviderKey,TRANSFORM(ProviderDistancePercent_REC, SELF := RIGHT; SELF := LEFT;), LEFT OUTER, HASH);

	ClaimCountRank 					:= GROUP(SORT (ClaimCountPercentile 			   		(idvPercentile >= %GLOBAL.OUTLIERPERCENTILE%),State,Speciality,-idvPercentileValue),State,Speciality);
	PatientCountRank 				:= GROUP(SORT (PatientCountPercentile			   	 	(idvPercentile >= %GLOBAL.OUTLIERPERCENTILE%),State,Speciality,-idvPercentileValue),State,Speciality);
	HighPaidAmountRank 				:= GROUP(SORT (HightPaidAmountPercentile 		   		(idvPercentile >= %GLOBAL.OUTLIERPERCENTILE%),State,Speciality,-idvPercentileValue),State,Speciality);
	HighPaidAmountPerClaimRank 		:= GROUP(SORT (HighPaidAmountPerClaimPercentile   		(idvPercentile >= %GLOBAL.OUTLIERPERCENTILE%),State,Speciality,-idvPercentileValue),State,Speciality);
	HighPaidAmountPerPatientRank 	:= GROUP(SORT (HighPaidAmountPerPatientPercentile 		(idvPercentile >= %GLOBAL.OUTLIERPERCENTILE%),State,Speciality,-idvPercentileValue),State,Speciality);
	LongDistanceRank				:= GROUP(SORT(DEDUP(SORT(ProviderDistancePercent_DS (LongDistancePercent >= 75.0),ProviderKey,-LongDistancePercent),ProviderKey),Speciality,-LongDistancePercent),Speciality);
	DMERank							:= GROUP(SORT (DMEHighPaidAmountPerClaimPercentile & DMEHighPaidAmountPerPatientPercentile (idvPercentile >= %GLOBAL.OUTLIERPERCENTILE%),State,ClientSpeciality,-idvPercentileValue),State,ClientSpeciality);
	LABRank							:= GROUP(SORT (LABHighPaidAmountPerClaimPercentile & LABHighPaidAmountPerPatientPercentile (idvPercentile >= %GLOBAL.OUTLIERPERCENTILE%),State,ClientSpeciality,-idvPercentileValue),State,ClientSpeciality);
	DMEPatientRank					:= GROUP(SORT (DMEHighPaidAmountPerPatientPercentile 	(idvPercentile >= %GLOBAL.OUTLIERPERCENTILE%),State,ClientSpeciality,-idvPercentileValue),State,ClientSpeciality);
	LABPatientRank					:= GROUP(SORT (LABHighPaidAmountPerPatientPercentile 	(idvPercentile >= %GLOBAL.OUTLIERPERCENTILE%),State,ClientSpeciality,-idvPercentileValue),State,ClientSpeciality);
	DMEClaimRank					:= GROUP(SORT (DMEHighPaidAmountPerClaimPercentile 		(idvPercentile >= %GLOBAL.OUTLIERPERCENTILE%),State,ClientSpeciality,-idvPercentileValue),State,ClientSpeciality);
	LABClaimRank					:= GROUP(SORT (LABHighPaidAmountPerClaimPercentile 		(idvPercentile >= %GLOBAL.OUTLIERPERCENTILE%),State,ClientSpeciality,-idvPercentileValue),State,ClientSpeciality);

	ClaimCountPercentileValue				:= UNGROUP(DEDUP(ClaimCountRank,State,Speciality,RIGHT));
	PatientCountPercentileValue 			:= UNGROUP(DEDUP(PatientCountRank,State,Speciality,RIGHT));
	HighPaidAmountPercentileValue 			:= UNGROUP(DEDUP(HighPaidAmountRank,State,Speciality,RIGHT));
	HighPaidAmountPerClaimPercentileValue 	:= UNGROUP(DEDUP(HighPaidAmountPerClaimRank,State,Speciality,RIGHT));
	HighPaidAmountPerPatientPercentileValue := UNGROUP(DEDUP(HighPaidAmountPerPatientRank,State,Speciality,RIGHT));
	
	DMEPercentileValue						:= UNGROUP(DEDUP(DMERank,State,Speciality,RIGHT));
	LABPercentileValue						:= UNGROUP(DEDUP(LABRank,State,Speciality,RIGHT));
	DMEPatientPercentileValue				:= UNGROUP(DEDUP(DMEPatientRank,State,Speciality,RIGHT));
	LABPatientPercentileValue				:= UNGROUP(DEDUP(LABPatientRank,State,Speciality,RIGHT));
	DMEClaimPercentileValue					:= UNGROUP(DEDUP(DMEClaimRank,State,Speciality,RIGHT));
	LABClaimPercentileValue					:= UNGROUP(DEDUP(LABClaimRank,State,Speciality,RIGHT));

	Outlier_REC := RECORD
		STRING50  ProviderKey;
		STRING2   State; 
		STRING9   Speciality;
		INTEGER8  ProviderClaimCount; 
		INTEGER8  LNPIDClaimCount;
		INTEGER8  ProviderPatientCount; 
		INTEGER8  PatientDeceasedCount; 
		REAL8	  ProviderHighChargeAmount; 
		REAL8	  LNPIDHighChargeAmount;
		REAL8     ProviderHighPaidAmount; 
		REAL8	  LNPIDHighPaidAmount;
		REAL8     ProviderHighPaidAmountPerClaim; 
		REAL8     ProviderHighPaidAmountPerPatient; 
		STRING8   ProviderServiceDateMin; 
		STRING8   ProviderServiceDateMax; 
		STRING1   ExcludeAddressFlag; 
		STRING1   PatientDeceasedFlag;
		STRING1   ProviderNPIDeactivatedFlag;
		STRING1   ProviderDEADeactivatedFlag;
		INTEGER8  ProviderPatientAddressCount;
		STRING1   ProviderPatientAddressFlag;
		INTEGER8  AddressProviderCount;
		INTEGER8  AddressPatientCount;
		INTEGER8  AddressClaimCount;
		REAL8  	  AddressHighChargeAmount;
		REAL8     AddressHighPaidAmount;
		STRING8   AddressServiceDateMin;
		STRING8   AddressServiceDateMax;
		INTEGER8  TotalNPICount;
		INTEGER8  RecentNPICount;
		INTEGER8  StudentNPICount;
		STRING1   RecentNPIFlag;
		STRING1   StudentNPIFlag;
		INTEGER8  LargePatientGroupCount;
		STRING1	  LargePatientGroupFlag;
		STRING1   VacantAddressActivityFlag;
		UNSIGNED4 NoofAddress;
		REAL8	  Distance;
		STRING1	  ClaimCountFlag;
		STRING1	  PatientCountFlag;
		STRING1	  HighPaidAmountFlag;
		STRING1	  HighPaidAmountPerClaimFlag;
		STRING1	  HighPaidAmountPerPatientFlag;
		STRING1   LongDistanceFlag;
		STRING1	  DMEFlag;
		STRING1   LABFlag;
		UNSIGNED2 ClaimCountRank;
		UNSIGNED2 PatientCountRank;
		UNSIGNED2 HighPaidAmountRank;
		UNSIGNED2 HighPaidAmountPerClaimRank;
		UNSIGNED2 HighPaidAmountPerPatientRank;
		UNSIGNED2 LongDistanceRank;
		UNSIGNED2 DMERank;
		UNSIGNED2 LABRank;
		UNSIGNED8 ClaimCountMedian;
		UNSIGNED8 PatientCountMedian;
		UNSIGNED8 HighPaidAmountMedian;
		UNSIGNED8 HighPaidAmountPerClaimMedian;
		UNSIGNED8 HighPaidAmountPerPatientMedian;
		UNSIGNED8 LongDistanceMedian;
		UNSIGNED8 DMEMedian;
		UNSIGNED8 LABMedian;
		UNSIGNED8 DMEPatientMedian;
		UNSIGNED8 DMEClaimMedian;
		UNSIGNED8 LABPatientMedian;
		UNSIGNED8 LABClaimMedian;
		STRING2	  ClaimCountOutlierType;
		STRING2   PatientCountOutlierType;
		STRING2   HighPaidAmountOutlierType;
		STRING2   HighPaidAmountPerClaimOutlierType;
		STRING2   HighPaidAmountPerPatientOutlierType;
		STRING2   LongDistanceOutlierType;
		STRING2   DMEOutlierType;
		STRING2   LABOutlierType;
		REAL4	  ClaimCountOutlierDiff;
		REAL4 	  PatientCountOutlierDiff;
		REAL4 	  HighPaidAmountOutlierDiff;
		REAL4 	  HighPaidAmountPerClaimOutlierDiff;
		REAL4 	  HighPaidAmountPerPatientOutlierDiff;
		REAL4 	  LongDistanceOutlierDiff;
		REAL4 	  DMEOutlierDiff;
		REAL4 	  LABOutlierDiff;
		INTEGER8  NoOfPatientDrivingLongDistance;
		REAL8  	  AveDistanceTravelled;
		INTEGER8  PatientDOD;
		STRING50  ProviderPatientSharedAddress;
		STRING50  LargePatientGroupAddress;
		STRING1	  ProviderDeceasedFlag;
		STRING1	  ProviderLicenseExpiredFlag;
		INTEGER8  ActiveStateExclusionImpactAmount;
		INTEGER8  ActiveOIGExclusionImpactAmount;
		INTEGER8  ActiveOPMExclusionImpactAmount;
		INTEGER8  PastStateExclusionImpactAmount;
		INTEGER8  PastOIGExclusionImpactAmount;
		INTEGER8  PastOPMExclusionImpactAmount;
		INTEGER8  CurrentLicenseRevokedImpactAmount;
		INTEGER8  PastLicenseRevokedImpactAmount;
		INTEGER8  LicenseExpiredImpactAmount;
		INTEGER8  NPIDeactiveImpactAmount;
		INTEGER8  PatientDeceasedImpactAmount;
		INTEGER8  ProviderDeceasedImpactAmount;
		INTEGER8  BankruptcyImpactAmount;
		INTEGER8  ConvictionImpactAmount;
		INTEGER8  ActiveStateExclusionClaimCount;
		INTEGER8  ActiveOIGExclusionClaimCount;
		INTEGER8  ActiveOPMExclusionClaimCount;
		INTEGER8  PastStateExclusionClaimCount;
		INTEGER8  PastOIGExclusionClaimCount;
		INTEGER8  PastOPMExclusionClaimCount;
		INTEGER8  CurrentLicenseRevokedClaimCount;
		INTEGER8  PastLicenseRevokedClaimCount;
		INTEGER8  LicenseExpiredClaimCount;
		INTEGER8  NPIDeactiveClaimCount;
		INTEGER8  PatientDeceasedClaimCount;
		INTEGER8  ProviderDeceasedClaimCount;
		INTEGER8  BankruptcyClaimCount;
		INTEGER8  ConvictionClaimCount;
		INTEGER8  ProviderImpactAmount;
		INTEGER8  ProviderImpactClaimCount;
		INTEGER8  AddressImpactAmount;
		INTEGER8  AddressImpactClaimCount;
		INTEGER8  LNPIDImpactAmount;
		INTEGER8  LNPIDImpactClaimCount;
		INTEGER1  ProviderImpactRange;
		INTEGER1  ProviderImpactPercent;	
		INTEGER4  ClientSingleAddressCount;
		STRING1   ClientSingleAddressFlag;	
	END;

	ClaimRank_DS1 					 := UNGROUP(PROJECT (ClaimCountRank,TRANSFORM(Outlier_REC, SELF.ClaimCountRank := COUNTER; SELF.ClaimCountMedian := 0; SELF := LEFT; SELF := [];)));
	PatientRank_DS1 				 := UNGROUP(PROJECT (PatientCountRank,TRANSFORM(Outlier_REC, SELF.PatientCountRank := COUNTER; SELF.PatientCountMedian := 0; SELF := LEFT; SELF := [];)));
	HighPaidAmountRank_DS1 			 := UNGROUP(PROJECT (HighPaidAmountRank,TRANSFORM(Outlier_REC, SELF.HighPaidAmountRank := COUNTER; SELF.HighPaidAmountMedian := 0; SELF := LEFT; SELF := [];)));
	HighPaidAmountPerClaimRank_DS1 	 := UNGROUP(PROJECT (HighPaidAmountPerClaimRank,TRANSFORM(Outlier_REC, SELF.HighPaidAmountPerClaimRank := COUNTER; SELF.HighPaidAmountPerClaimMedian := 0; SELF := LEFT; SELF := [];)));
	HighPaidAmountPerPatientRank_DS1 := UNGROUP(PROJECT (HighPaidAmountPerPatientRank,TRANSFORM(Outlier_REC, SELF.HighPaidAmountPerPatientRank := COUNTER; SELF.HighPaidAmountPerPatientMedian := 0; SELF := LEFT; SELF := [];)));
	LongDistanceRank_DS 			 := UNGROUP(PROJECT (LongDistanceRank,TRANSFORM(Outlier_REC, SELF.LongDistanceRank := COUNTER; SELF.LongDistanceMedian := ROUND(IF (LEFT.Distance > LEFT.idvOutlierDiff,LEFT.Distance - LEFT.idvOutlierDiff, LEFT.idvOutlierDiff - LEFT.Distance));  SELF.LongDistanceOutlierType := LEFT.idvOutlierType; SELF.LongDistanceOutlierDiff := LEFT.idvOutlierDiff; SELF := LEFT; SELF := [];)));	
	DMERank_DS1 					 := UNGROUP(PROJECT (DMERank,TRANSFORM(Outlier_REC, SELF.DMERank := COUNTER; SELF.DMEMedian := 0; SELF := LEFT; SELF := [];)));
	LABRank_DS1 					 := UNGROUP(PROJECT (LABRank,TRANSFORM(Outlier_REC, SELF.LABRank := COUNTER; SELF.LABMedian := 0; SELF := LEFT; SELF := [];)));
	DMEPatientRank_DS1 				 := UNGROUP(PROJECT (DMEPatientRank,TRANSFORM(Outlier_REC, SELF.DMEPatientMedian := 0; SELF := LEFT; SELF := [];)));
	LABPatientRank_DS1 				 := UNGROUP(PROJECT (LABPatientRank,TRANSFORM(Outlier_REC, SELF.LABPatientMedian := 0; SELF := LEFT; SELF := [];)));
	DMEClaimRank_DS1 				 := UNGROUP(PROJECT (DMEClaimRank,TRANSFORM(Outlier_REC, SELF.DMEClaimMedian := 0; SELF := LEFT; SELF := [];)));
	LABClaimRank_DS1 				 := UNGROUP(PROJECT (LABClaimRank,TRANSFORM(Outlier_REC, SELF.LABClaimMedian := 0; SELF := LEFT; SELF := [];)));

	ClaimRank_DS 					:= JOIN(ClaimRank_DS1,ClaimCountPercentileValue,LEFT.STATE = RIGHT.STATE AND LEFT.Speciality = RIGHT.Speciality AND LEFT.STATE <> '' AND LEFT.Speciality <> '', TRANSFORM(Outlier_REC, SELF.ClaimCountMedian := RIGHT.idvPercentileValue; SELF := LEFT;), LEFT OUTER, LOOKUP);
	PatientRank_DS					:= JOIN(PatientRank_DS1,PatientCountPercentileValue,LEFT.STATE = RIGHT.STATE AND LEFT.Speciality = RIGHT.Speciality AND LEFT.STATE <> '' AND LEFT.Speciality <> '', TRANSFORM(Outlier_REC, SELF.PatientCountMedian := RIGHT.idvPercentileValue; SELF := LEFT;), LEFT OUTER, LOOKUP);
	HighPaidAmountRank_DS 			:= JOIN(HighPaidAmountRank_DS1,HighPaidAmountPercentileValue,LEFT.STATE = RIGHT.STATE AND LEFT.Speciality = RIGHT.Speciality AND LEFT.STATE <> '' AND LEFT.Speciality <> '', TRANSFORM(Outlier_REC, SELF.HighPaidAmountMedian := RIGHT.idvPercentileValue; SELF := LEFT;), LEFT OUTER, LOOKUP);
	HighPaidAmountPerClaimRank_DS	:= JOIN(HighPaidAmountPerClaimRank_DS1,HighPaidAmountPerClaimPercentileValue,LEFT.STATE = RIGHT.STATE AND LEFT.Speciality = RIGHT.Speciality AND LEFT.STATE <> '' AND LEFT.Speciality <> '', TRANSFORM(Outlier_REC, SELF.HighPaidAmountPerClaimMedian := RIGHT.idvPercentileValue; SELF := LEFT;), LEFT OUTER, LOOKUP);
	HighPaidAmountPerPatientRank_DS := JOIN(HighPaidAmountPerPatientRank_DS1,HighPaidAmountPerPatientPercentileValue,LEFT.STATE = RIGHT.STATE AND LEFT.Speciality = RIGHT.Speciality AND LEFT.STATE <> '' AND LEFT.Speciality <> '', TRANSFORM(Outlier_REC, SELF.HighPaidAmountPerPatientMedian := RIGHT.idvPercentileValue; SELF := LEFT;), LEFT OUTER, LOOKUP);
	DMERank_DS 						:= JOIN(DMERank_DS1,DMEPercentileValue,LEFT.STATE = RIGHT.STATE AND LEFT.Speciality = RIGHT.Speciality AND LEFT.STATE <> '' AND LEFT.Speciality <> '', TRANSFORM(Outlier_REC, SELF.DMEMedian := RIGHT.idvPercentileValue; SELF := LEFT;), LEFT OUTER, LOOKUP);
	LABRank_DS 						:= JOIN(LABRank_DS1,LABPercentileValue,LEFT.STATE = RIGHT.STATE AND LEFT.Speciality = RIGHT.Speciality AND LEFT.STATE <> '' AND LEFT.Speciality <> '', TRANSFORM(Outlier_REC, SELF.LABMedian := RIGHT.idvPercentileValue; SELF := LEFT;), LEFT OUTER, LOOKUP);
	DMEPatientRank_DS 				:= JOIN(DMEPatientRank_DS1,DMEPatientPercentileValue,LEFT.STATE = RIGHT.STATE AND LEFT.Speciality = RIGHT.Speciality AND LEFT.STATE <> '' AND LEFT.Speciality <> '', TRANSFORM(Outlier_REC, SELF.DMEPatientMedian := RIGHT.idvPercentileValue; SELF := LEFT;), LEFT OUTER, LOOKUP);
	LABPatientRank_DS 				:= JOIN(LABPatientRank_DS1,LABPatientPercentileValue,LEFT.STATE = RIGHT.STATE AND LEFT.Speciality = RIGHT.Speciality AND LEFT.STATE <> '' AND LEFT.Speciality <> '', TRANSFORM(Outlier_REC, SELF.LABPatientMedian := RIGHT.idvPercentileValue; SELF := LEFT;), LEFT OUTER, LOOKUP);
	DMEClaimRank_DS 				:= JOIN(DMEClaimRank_DS1,DMEClaimPercentileValue,LEFT.STATE = RIGHT.STATE AND LEFT.Speciality = RIGHT.Speciality AND LEFT.STATE <> '' AND LEFT.Speciality <> '', TRANSFORM(Outlier_REC, SELF.DMEClaimMedian := RIGHT.idvPercentileValue; SELF := LEFT;), LEFT OUTER, LOOKUP);
	LABClaimRank_DS 				:= JOIN(LABClaimRank_DS1,LABClaimPercentileValue,LEFT.STATE = RIGHT.STATE AND LEFT.Speciality = RIGHT.Speciality AND LEFT.STATE <> '' AND LEFT.Speciality <> '', TRANSFORM(Outlier_REC, SELF.LABClaimMedian := RIGHT.idvPercentileValue; SELF := LEFT;), LEFT OUTER, LOOKUP);

	Combined_Ds := DISTRIBUTE (ClaimRank_DS & PatientRank_DS & HighPaidAmountRank_DS & HighPaidAmountPerClaimRank_DS & HighPaidAmountPerPatientRank_DS & LongDistanceRank_DS & DMERank_DS & LABRank_DS,HASH32(ProviderKey));

	S_Combined_DS := SORT  (Combined_Ds, ProviderKey, LOCAL);
	G_Combined_DS := GROUP (S_Combined_DS, ProviderKey, LOCAL);
	
	IMPORT STD;
	
	Outlier_REC xRollUp (Outlier_REC L, DATASET (Outlier_REC) R) := TRANSFORM
		SELF.ProviderKey								:=	L.ProviderKey;
		SELF.State										:=  L.State;
		SELF.Speciality									:=  L.Speciality;
		SELF.ProviderClaimCount							:=	R(ProviderClaimCount > 0)[1].ProviderClaimCount;
		SELF.LNPIDClaimCount							:=	R(LNPIDClaimCount > 0)[1].LNPIDClaimCount;
		SELF.ProviderPatientCount						:=	R(ProviderPatientCount > 0)[1].ProviderPatientCount;
		SELF.PatientDeceasedCount						:=	R(PatientDeceasedCount > 0)[1].PatientDeceasedCount;
		SELF.ProviderHighChargeAmount					:=	R(ProviderHighChargeAmount > 0)[1].ProviderHighChargeAmount;
		SELF.LNPIDHighChargeAmount						:=	R(LNPIDHighChargeAmount > 0)[1].LNPIDHighChargeAmount;
		SELF.ProviderHighPaidAmount						:=	R(ProviderHighPaidAmount > 0)[1].ProviderHighPaidAmount;
		SELF.LNPIDHighPaidAmount						:=	R(LNPIDHighPaidAmount > 0)[1].LNPIDHighPaidAmount;
		SELF.ProviderHighPaidAmountPerClaim				:=	R(ProviderHighPaidAmountPerClaim > 0)[1].ProviderHighPaidAmountPerClaim;
		SELF.ProviderHighPaidAmountPerPatient			:=	R(ProviderHighPaidAmountPerPatient > 0)[1].ProviderHighPaidAmountPerPatient;
		SELF.ProviderServiceDateMin						:=	R(ProviderServiceDateMin <> '')[1].ProviderServiceDateMin;
		SELF.ProviderServiceDateMax						:=	R(ProviderServiceDateMax <> '')[1].ProviderServiceDateMax;
		SELF.ExcludeAddressFlag							:=	R(ExcludeAddressFlag <> '')[1].ExcludeAddressFlag;
		SELF.PatientDeceasedFlag						:=	R(PatientDeceasedFlag <> '')[1].PatientDeceasedFlag;
		SELF.ProviderNPIDeactivatedFlag					:=	R(ProviderNPIDeactivatedFlag <> '')[1].ProviderNPIDeactivatedFlag;
		SELF.ProviderDEADeactivatedFlag					:=	R(ProviderDEADeactivatedFlag <> '')[1].ProviderDEADeactivatedFlag;
		SELF.ProviderPatientAddressCount				:=	R(ProviderPatientAddressCount > 0)[1].ProviderPatientAddressCount;
		SELF.ProviderPatientAddressFlag					:=	R(ProviderPatientAddressFlag <> '')[1].ProviderPatientAddressFlag;
		SELF.AddressProviderCount						:=	R(AddressProviderCount > 0)[1].AddressProviderCount;
		SELF.AddressPatientCount						:=	R(AddressPatientCount > 0)[1].AddressPatientCount;
		SELF.AddressClaimCount							:=	R(AddressClaimCount > 0)[1].AddressClaimCount;
		SELF.AddressHighChargeAmount					:=	R(AddressHighChargeAmount > 0)[1].AddressHighChargeAmount;
		SELF.AddressHighPaidAmount						:=	R(AddressHighPaidAmount > 0)[1].AddressHighPaidAmount;
		SELF.AddressServiceDateMin						:=	R(AddressServiceDateMin <> '')[1].AddressServiceDateMin;
		SELF.AddressServiceDateMax						:=	R(AddressServiceDateMax <> '')[1].AddressServiceDateMax;
		SELF.TotalNPICount								:=	R(TotalNPICount > 0)[1].TotalNPICount;
		SELF.RecentNPICount								:=	R(RecentNPICount > 0)[1].RecentNPICount;
		SELF.StudentNPICount							:=	R(StudentNPICount > 0)[1].StudentNPICount;
		SELF.RecentNPIFlag								:=  R(RecentNPIFlag <> '')[1].RecentNPIFlag;
		SELF.StudentNPIFlag								:=  R(StudentNPIFlag <> '')[1].StudentNPIFlag;
		SELF.LargePatientGroupCount						:=  R(LargePatientGroupCount > 0)[1].LargePatientGroupCount;
		SELF.LargePatientGroupFlag						:=	R(LargePatientGroupFlag <> '')[1].LargePatientGroupFlag;
		SELF.VacantAddressActivityFlag					:=	R(VacantAddressActivityFlag <> '')[1].VacantAddressActivityFlag;
		SELF.NoofAddress								:=  R(NoofAddress > 0)[1].NoofAddress;
		SELF.Distance									:=	R(Distance > 0)[1].Distance;
		SELF.ClaimCountFlag								:=	IF (R(ClaimCountRank > 0)[1].ClaimCountRank BETWEEN 1 AND 25, 'Y','N');
		SELF.ClaimCountRank								:=	R(ClaimCountRank > 0)[1].ClaimCountRank;
		SELF.PatientCountFlag							:=	IF (R(PatientCountRank > 0)[1].PatientCountRank BETWEEN 1 AND 25, 'Y','N');
		SELF.PatientCountRank							:=	R(PatientCountRank > 0)[1].PatientCountRank;
		SELF.HighPaidAmountFlag							:=	IF (R(HighPaidAmountRank > 0)[1].HighPaidAmountRank BETWEEN 1 AND 25, 'Y','N');
		SELF.HighPaidAmountRank							:=	R(HighPaidAmountRank > 0)[1].HighPaidAmountRank;
		SELF.HighPaidAmountPerClaimFlag					:=	IF (R(HighPaidAmountPerClaimRank > 0)[1].HighPaidAmountPerClaimRank BETWEEN 1 AND 25, 'Y','N');
		SELF.HighPaidAmountPerClaimRank					:=	R(HighPaidAmountPerClaimRank > 0)[1].HighPaidAmountPerClaimRank;
		SELF.HighPaidAmountPerPatientFlag				:=	IF (R(HighPaidAmountPerPatientRank > 0)[1].HighPaidAmountPerPatientRank BETWEEN 1 AND 25, 'Y','N');
		SELF.HighPaidAmountPerPatientRank				:=	R(HighPaidAmountPerPatientRank > 0)[1].HighPaidAmountPerPatientRank;
		SELF.LongDistanceFlag							:=	IF (R(LongDistanceRank > 0)[1].LongDistanceRank BETWEEN 1 AND 25, 'Y','N');
		SELF.LongDistanceRank							:=	R(LongDistanceRank > 0)[1].LongDistanceRank;
		SELF.DMEFlag									:=	IF (R(DMERank > 0)[1].DMERank BETWEEN 1 AND 25, 'Y','N');
		SELF.DMERank									:=	R(DMERank > 0)[1].DMERank;
		SELF.LABFlag									:=	IF (R(LABRank > 0)[1].LABRank BETWEEN 1 AND 25, 'Y','N');
		SELF.LABRank									:=	R(LABRank > 0)[1].LABRank;
		SELF.ClaimCountMedian							:=	SORT(R(ClaimCountMedian > 0),-ClaimCountMedian)[1].ClaimCountMedian;
		SELF.PatientCountMedian							:=	SORT(R(PatientCountMedian > 0),-PatientCountMedian)[1].PatientCountMedian;
		SELF.HighPaidAmountMedian						:=	SORT(R(HighPaidAmountMedian > 0),-HighPaidAmountMedian)[1].HighPaidAmountMedian;
		SELF.HighPaidAmountPerClaimMedian				:=	SORT(R(HighPaidAmountPerClaimMedian > 0),-HighPaidAmountPerClaimMedian)[1].HighPaidAmountPerClaimMedian;
		SELF.HighPaidAmountPerPatientMedian				:=	SORT(R(HighPaidAmountPerPatientMedian > 0),-HighPaidAmountPerPatientMedian)[1].HighPaidAmountPerPatientMedian;
		SELF.LongDistanceMedian							:=	SORT(R(LongDistanceMedian > 0),-LongDistanceMedian)[1].LongDistanceMedian;
		SELF.DMEMedian									:=	SORT(R(DMEMedian > 0),-DMEMedian)[1].DMEMedian;
		SELF.LABMedian									:=	SORT(R(LABMedian > 0),-LABMedian)[1].LABMedian;
		SELF.DMEPatientMedian							:=	SORT(R(DMEPatientMedian > 0),-DMEPatientMedian)[1].DMEPatientMedian;
		SELF.LABPatientMedian							:=	SORT(R(LABPatientMedian > 0),-LABPatientMedian)[1].LABPatientMedian;
		SELF.DMEClaimMedian								:=	SORT(R(DMEClaimMedian > 0),-DMEClaimMedian)[1].DMEClaimMedian;
		SELF.LABClaimMedian								:=	SORT(R(LABClaimMedian > 0),-LABClaimMedian)[1].LABClaimMedian;
		SELF.ClaimCountOutlierType						:=	R(ClaimCountOutlierType <> '')[1].ClaimCountOutlierType;
		SELF.PatientCountOutlierType					:=	R(PatientCountOutlierType <> '')[1].PatientCountOutlierType;
		SELF.HighPaidAmountOutlierType					:=	R(HighPaidAmountOutlierType <> '')[1].HighPaidAmountOutlierType;
		SELF.HighPaidAmountPerClaimOutlierType			:=	R(HighPaidAmountPerClaimOutlierType <> '')[1].HighPaidAmountPerClaimOutlierType;
		SELF.HighPaidAmountPerPatientOutlierType		:=	R(HighPaidAmountPerPatientOutlierType <> '')[1].HighPaidAmountPerPatientOutlierType;
		SELF.LongDistanceOutlierType					:=	R(LongDistanceOutlierType <> '')[1].LongDistanceOutlierType;
		SELF.DMEOutlierType								:=	R(DMEOutlierType <> '')[1].DMEOutlierType;
		SELF.LABOutlierType								:=	R(LABOutlierType <> '')[1].LABOutlierType;
		SELF.ClaimCountOutlierDiff						:=	R(ClaimCountOutlierDiff > 0)[1].ClaimCountOutlierDiff;
		SELF.PatientCountOutlierDiff					:=	R(PatientCountOutlierDiff > 0)[1].PatientCountOutlierDiff;
		SELF.HighPaidAmountOutlierDiff					:=	R(HighPaidAmountOutlierDiff > 0)[1].HighPaidAmountOutlierDiff;
		SELF.HighPaidAmountPerClaimOutlierDiff			:=	R(HighPaidAmountPerClaimOutlierDiff > 0)[1].HighPaidAmountPerClaimOutlierDiff;
		SELF.HighPaidAmountPerPatientOutlierDiff		:=	R(HighPaidAmountPerPatientOutlierDiff > 0)[1].HighPaidAmountPerPatientOutlierDiff;
		SELF.LongDistanceOutlierDiff					:=	R(LongDistanceOutlierDiff > 0)[1].LongDistanceOutlierDiff;
		SELF.DMEOutlierDiff								:=	R(DMEOutlierDiff > 0)[1].DMEOutlierDiff;
		SELF.LABOutlierDiff								:=	R(LABOutlierDiff > 0)[1].LABOutlierDiff;
		SELF.NoOfPatientDrivingLongDistance				:=  R(NoOfPatientDrivingLongDistance > 0)[1].NoOfPatientDrivingLongDistance;
		SELF.AveDistanceTravelled						:=	R(AveDistanceTravelled > 0)[1].AveDistanceTravelled;
		SELF.PatientDOD									:=	R(PatientDOD > 0)[1].PatientDOD;
		SELF.ProviderPatientSharedAddress				:=	STD.STR.CleanSpaces (R(ProviderPatientSharedAddress <> '')[1].ProviderPatientSharedAddress);
		SELF.LargePatientGroupAddress					:=	STD.STR.CleanSpaces (R(LargePatientGroupAddress <> '')[1].LargePatientGroupAddress);
		SELF.ProviderDeceasedFlag						:=	R(ProviderDeceasedFlag <> '')[1].ProviderDeceasedFlag;
		SELF.ProviderLicenseExpiredFlag					:=	R(ProviderLicenseExpiredFlag <> '')[1].ProviderLicenseExpiredFlag;
		SELF.ActiveStateExclusionImpactAmount			:=	R(ActiveStateExclusionImpactAmount > 0)[1].ActiveStateExclusionImpactAmount;
		SELF.ActiveOIGExclusionImpactAmount				:=	R(ActiveOIGExclusionImpactAmount > 0)[1].ActiveOIGExclusionImpactAmount;
		SELF.ActiveOPMExclusionImpactAmount				:=	R(ActiveOPMExclusionImpactAmount > 0)[1].ActiveOPMExclusionImpactAmount;
		SELF.PastStateExclusionImpactAmount				:=	R(PastStateExclusionImpactAmount > 0)[1].PastStateExclusionImpactAmount;
		SELF.PastOIGExclusionImpactAmount				:=	R(PastOIGExclusionImpactAmount > 0)[1].PastOIGExclusionImpactAmount;
		SELF.PastOPMExclusionImpactAmount				:=	R(PastOPMExclusionImpactAmount > 0)[1].PastOPMExclusionImpactAmount;
		SELF.CurrentLicenseRevokedImpactAmount			:=	R(CurrentLicenseRevokedImpactAmount > 0)[1].CurrentLicenseRevokedImpactAmount;
		SELF.PastLicenseRevokedImpactAmount				:=	R(PastLicenseRevokedImpactAmount > 0)[1].PastLicenseRevokedImpactAmount;
		SELF.LicenseExpiredImpactAmount					:=	R(LicenseExpiredImpactAmount > 0)[1].LicenseExpiredImpactAmount;
		SELF.NPIDeactiveImpactAmount					:=	R(NPIDeactiveImpactAmount > 0)[1].NPIDeactiveImpactAmount;
		SELF.PatientDeceasedImpactAmount				:=	R(PatientDeceasedImpactAmount > 0)[1].PatientDeceasedImpactAmount;
		SELF.ProviderDeceasedImpactAmount				:=	R(ProviderDeceasedImpactAmount > 0)[1].ProviderDeceasedImpactAmount;
		SELF.BankruptcyImpactAmount						:=	R(BankruptcyImpactAmount > 0)[1].BankruptcyImpactAmount;
		SELF.ConvictionImpactAmount						:=	R(ConvictionImpactAmount > 0)[1].ConvictionImpactAmount;
		SELF.ActiveStateExclusionClaimCount				:=	R(ActiveStateExclusionClaimCount > 0)[1].ActiveStateExclusionClaimCount;
		SELF.ActiveOIGExclusionClaimCount				:=	R(ActiveOIGExclusionClaimCount > 0)[1].ActiveOIGExclusionClaimCount;
		SELF.ActiveOPMExclusionClaimCount				:=	R(ActiveOPMExclusionClaimCount > 0)[1].ActiveOPMExclusionClaimCount;
		SELF.PastStateExclusionClaimCount				:=	R(PastStateExclusionClaimCount > 0)[1].PastStateExclusionClaimCount;
		SELF.PastOIGExclusionClaimCount					:=	R(PastOIGExclusionClaimCount > 0)[1].PastOIGExclusionClaimCount;
		SELF.PastOPMExclusionClaimCount					:=	R(PastOPMExclusionClaimCount > 0)[1].PastOPMExclusionClaimCount;
		SELF.CurrentLicenseRevokedClaimCount			:=	R(CurrentLicenseRevokedClaimCount > 0)[1].CurrentLicenseRevokedClaimCount;
		SELF.PastLicenseRevokedClaimCount				:=	R(PastLicenseRevokedClaimCount > 0)[1].PastLicenseRevokedClaimCount;
		SELF.LicenseExpiredClaimCount					:=	R(LicenseExpiredClaimCount > 0)[1].LicenseExpiredClaimCount;
		SELF.NPIDeactiveClaimCount						:=	R(NPIDeactiveClaimCount > 0)[1].NPIDeactiveClaimCount;
		SELF.PatientDeceasedClaimCount					:=	R(PatientDeceasedClaimCount > 0)[1].PatientDeceasedClaimCount;
		SELF.ProviderDeceasedClaimCount					:=	R(ProviderDeceasedClaimCount > 0)[1].ProviderDeceasedClaimCount;
		SELF.BankruptcyClaimCount						:=	R(BankruptcyClaimCount > 0)[1].BankruptcyClaimCount;
		SELF.ConvictionClaimCount						:=	R(ConvictionClaimCount > 0)[1].ConvictionClaimCount;
		SELF.ProviderImpactAmount						:=	R(ProviderImpactAmount > 0)[1].ProviderImpactAmount;
		SELF.ProviderImpactClaimCount					:=	R(ProviderImpactClaimCount > 0)[1].ProviderImpactClaimCount;
		SELF.AddressImpactAmount						:=	R(AddressImpactAmount > 0)[1].AddressImpactAmount;
		SELF.AddressImpactClaimCount					:=	R(AddressImpactClaimCount > 0)[1].AddressImpactClaimCount;
		SELF.LNPIDImpactAmount							:=	R(LNPIDImpactAmount > 0)[1].LNPIDImpactAmount;
		SELF.LNPIDImpactClaimCount						:=	R(LNPIDImpactClaimCount > 0)[1].LNPIDImpactClaimCount;
		SELF.ProviderImpactRange						:=	R(ProviderImpactRange > 0)[1].ProviderImpactRange;
		SELF.ProviderImpactPercent						:=	R(ProviderImpactPercent > 0)[1].ProviderImpactPercent;
		SELF.ClientSingleAddressCount					:=	R(ClientSingleAddressCount > 0)[1].ClientSingleAddressCount;
		SELF.ClientSingleAddressFlag					:=	R(ClientSingleAddressFlag <> '')[1].ClientSingleAddressFlag;
	END;

	RollUp_DS := ROLLUP (G_Combined_DS, GROUP, xRollUp (LEFT, ROWS(LEFT)));

	Combine_Claim_Outlier := JOIN (%dsClaimStats%,RollUp_DS,LEFT.ProviderKey = RIGHT.ProviderKey,TRANSFORM(Outlier_REC, 
		SELF.ProviderKey						:=	LEFT.ProviderKey;
		SELF.State								:=  LEFT.State;
		SELF.Speciality							:=  LEFT.Speciality;
		SELF.ProviderClaimCount					:=	LEFT.ProviderClaimCount;
		SELF.LNPIDClaimCount					:=	LEFT.LNPIDClaimCount;
		SELF.ProviderPatientCount				:=	LEFT.ProviderPatientCount;
		SELF.PatientDeceasedCount				:=	LEFT.PatientDeceasedCount;
		SELF.ProviderHighChargeAmount			:=	LEFT.ProviderHighChargeAmount;
		SELF.LNPIDHighChargeAmount				:=	LEFT.LNPIDHighChargeAmount;
		SELF.ProviderHighPaidAmount				:=	LEFT.ProviderHighPaidAmount;
		SELF.LNPIDHighPaidAmount				:=	LEFT.LNPIDHighPaidAmount;
		SELF.ProviderHighPaidAmountPerClaim		:=	LEFT.ProviderHighPaidAmountPerClaim;
		SELF.ProviderHighPaidAmountPerPatient	:=	LEFT.ProviderHighPaidAmountPerPatient;
		SELF.ProviderServiceDateMin				:=	LEFT.ProviderServiceDateMin;
		SELF.ProviderServiceDateMax				:=	LEFT.ProviderServiceDateMax;
		SELF.ExcludeAddressFlag					:=	LEFT.ExcludeAddressFlag;
		SELF.PatientDeceasedFlag				:=	LEFT.PatientDeceasedFlag;
		SELF.ProviderNPIDeactivatedFlag			:=	LEFT.ProviderNPIDeactivatedFlag;
		SELF.ProviderDEADeactivatedFlag			:=	LEFT.ProviderDEADeactivatedFlag;
		SELF.ProviderPatientAddressCount		:=	LEFT.ProviderPatientAddressCount;
		SELF.ProviderPatientAddressFlag			:=	LEFT.ProviderPatientAddressFlag;
		SELF.AddressProviderCount				:=	LEFT.AddressProviderCount;
		SELF.AddressPatientCount				:=	LEFT.AddressPatientCount;
		SELF.AddressClaimCount					:=	LEFT.AddressClaimCount;
		SELF.AddressHighChargeAmount			:=	LEFT.AddressHighChargeAmount;
		SELF.AddressHighPaidAmount				:=	LEFT.AddressHighPaidAmount;
		SELF.AddressServiceDateMin				:=	LEFT.AddressServiceDateMin;
		SELF.AddressServiceDateMax				:=	LEFT.AddressServiceDateMax;
		SELF.TotalNPICount						:=	LEFT.TotalNPICount;
		SELF.RecentNPICount						:=	LEFT.RecentNPICount;
		SELF.StudentNPICount					:=	LEFT.StudentNPICount;
		SELF.RecentNPIFlag						:=	LEFT.RecentNPIFlag;
		SELF.StudentNPIFlag						:=	LEFT.StudentNPIFlag;
		SELF.LargePatientGroupCount				:=	LEFT.LargePatientGroupCount;
		SELF.LargePatientGroupFlag				:=	LEFT.LargePatientGroupFlag;
		SELF.VacantAddressActivityFlag			:=	LEFT.VacantAddressActivityFlag;
		SELF.NoofAddress						:=	LEFT.NoofAddress;
		SELF.Distance							:=	RIGHT.Distance;
		SELF.ClaimCountFlag						:=	IF (RIGHT.ClaimCountRank BETWEEN 1 AND 25, 'Y','N');
		SELF.ClaimCountRank						:=	RIGHT.ClaimCountRank;
		SELF.PatientCountFlag					:=	IF (RIGHT.PatientCountRank BETWEEN 1 AND 25, 'Y','N');
		SELF.PatientCountRank					:=	RIGHT.PatientCountRank;
		SELF.HighPaidAmountFlag					:=	IF (RIGHT.HighPaidAmountRank BETWEEN 1 AND 25, 'Y','N');
		SELF.HighPaidAmountRank					:=	RIGHT.HighPaidAmountRank;
		SELF.HighPaidAmountPerClaimFlag			:=	IF (RIGHT.HighPaidAmountPerClaimRank BETWEEN 1 AND 25, 'Y','N');
		SELF.HighPaidAmountPerClaimRank			:=	RIGHT.HighPaidAmountPerClaimRank;
		SELF.HighPaidAmountPerPatientFlag		:=	IF (RIGHT.HighPaidAmountPerPatientRank BETWEEN 1 AND 25, 'Y','N');
		SELF.HighPaidAmountPerPatientRank		:=	RIGHT.HighPaidAmountPerPatientRank;
		SELF.LongDistanceFlag					:=	IF (RIGHT.LongDistanceRank BETWEEN 1 AND 25, 'Y','N');
		SELF.LongDistanceRank					:=	RIGHT.LongDistanceRank;
		SELF.DMEFlag							:=	IF (RIGHT.DMERank BETWEEN 1 AND 25, 'Y','N');
		SELF.DMERank							:=	RIGHT.DMERank;
		SELF.LABFlag							:=	IF (RIGHT.LABRank BETWEEN 1 AND 25, 'Y','N');
		SELF.LABRank							:=	RIGHT.LABRank;
		SELF.ClaimCountMedian					:=	RIGHT.ClaimCountMedian;
		SELF.PatientCountMedian					:=	RIGHT.PatientCountMedian;
		SELF.HighPaidAmountMedian				:=	RIGHT.HighPaidAmountMedian;
		SELF.HighPaidAmountPerClaimMedian		:=	RIGHT.HighPaidAmountPerClaimMedian;
		SELF.HighPaidAmountPerPatientMedian		:=	RIGHT.HighPaidAmountPerPatientMedian;
		SELF.LongDistanceMedian					:=	RIGHT.LongDistanceMedian;
		SELF.DMEMedian							:=	RIGHT.DMEMedian;
		SELF.LABMedian							:=	RIGHT.LABMedian;
		SELF.DMEPatientMedian					:=	RIGHT.DMEPatientMedian;
		SELF.LABPatientMedian					:=	RIGHT.LABPatientMedian;
		SELF.DMEClaimMedian						:=	RIGHT.DMEClaimMedian;
		SELF.LABClaimMedian						:=	RIGHT.LABClaimMedian;
		SELF.ClaimCountOutlierType				:=	RIGHT.ClaimCountOutlierType;
		SELF.PatientCountOutlierType			:=	RIGHT.PatientCountOutlierType;
		SELF.HighPaidAmountOutlierType			:=	RIGHT.HighPaidAmountOutlierType;
		SELF.HighPaidAmountPerClaimOutlierType	:=	RIGHT.HighPaidAmountPerClaimOutlierType;
		SELF.HighPaidAmountPerPatientOutlierType	:=	RIGHT.HighPaidAmountPerPatientOutlierType;
		SELF.LongDistanceOutlierType			:=	RIGHT.LongDistanceOutlierType;
		SELF.DMEOutlierType						:=	RIGHT.DMEOutlierType;
		SELF.LABOutlierType						:=	RIGHT.LABOutlierType;
		SELF.ClaimCountOutlierDiff				:=	RIGHT.ClaimCountOutlierDiff;
		SELF.PatientCountOutlierDiff			:=	RIGHT.PatientCountOutlierDiff;
		SELF.HighPaidAmountOutlierDiff			:=	RIGHT.HighPaidAmountOutlierDiff;
		SELF.HighPaidAmountPerClaimOutlierDiff	:=	RIGHT.HighPaidAmountPerClaimOutlierDiff;
		SELF.HighPaidAmountPerPatientOutlierDiff	:=	RIGHT.HighPaidAmountPerPatientOutlierDiff;
		SELF.LongDistanceOutlierDiff			:=	RIGHT.LongDistanceOutlierDiff;
		SELF.DMEOutlierDiff						:=	RIGHT.DMEOutlierDiff;
		SELF.LABOutlierDiff						:=	RIGHT.LABOutlierDiff;
		SELF.NoOfPatientDrivingLongDistance		:=	LEFT.NoOfPatientDrivingLongDistance;
		SELF.AveDistanceTravelled				:=	LEFT.AveDistanceTravelled;
		SELF.PatientDOD							:=	IF (RIGHT.PatientDOD > 0, RIGHT.PatientDOD, LEFT.PatientDOD);
		SELF.ProviderPatientSharedAddress		:=	IF (RIGHT.ProviderPatientSharedAddress <> '', STD.STR.CleanSpaces (RIGHT.ProviderPatientSharedAddress), STD.STR.CleanSpaces (LEFT.ProviderPatientSharedAddress));
		SELF.LargePatientGroupAddress			:=	IF (RIGHT.LargePatientGroupAddress <> '', STD.STR.CleanSpaces (RIGHT.LargePatientGroupAddress),  STD.STR.CleanSpaces(LEFT.LargePatientGroupAddress));
		SELF.ProviderDeceasedFlag				:=	LEFT.ProviderDeceasedFlag;
		SELF.ProviderLicenseExpiredFlag			:=	LEFT.ProviderLicenseExpiredFlag;
		SELF.ActiveStateExclusionImpactAmount	:=	LEFT.ActiveStateExclusionImpactAmount;
		SELF.ActiveOIGExclusionImpactAmount		:=	LEFT.ActiveOIGExclusionImpactAmount;
		SELF.ActiveOPMExclusionImpactAmount		:=	LEFT.ActiveOPMExclusionImpactAmount;
		SELF.PastStateExclusionImpactAmount		:=	LEFT.PastStateExclusionImpactAmount;
		SELF.PastOIGExclusionImpactAmount		:=	LEFT.PastOIGExclusionImpactAmount;
		SELF.PastOPMExclusionImpactAmount		:=	LEFT.PastOPMExclusionImpactAmount;
		SELF.CurrentLicenseRevokedImpactAmount	:=	LEFT.CurrentLicenseRevokedImpactAmount;
		SELF.PastLicenseRevokedImpactAmount		:=	LEFT.PastLicenseRevokedImpactAmount;
		SELF.LicenseExpiredImpactAmount			:=	LEFT.LicenseExpiredImpactAmount;
		SELF.NPIDeactiveImpactAmount			:=	LEFT.NPIDeactiveImpactAmount;
		SELF.PatientDeceasedImpactAmount		:=	LEFT.PatientDeceasedImpactAmount;
		SELF.ProviderDeceasedImpactAmount		:=	LEFT.ProviderDeceasedImpactAmount;
		SELF.BankruptcyImpactAmount				:=	LEFT.BankruptcyImpactAmount;
		SELF.ConvictionImpactAmount				:=	LEFT.ConvictionImpactAmount;

		SELF.ActiveStateExclusionClaimCount		:=	LEFT.ActiveStateExclusionClaimCount;
		SELF.ActiveOIGExclusionClaimCount		:=	LEFT.ActiveOIGExclusionClaimCount;
		SELF.ActiveOPMExclusionClaimCount		:=	LEFT.ActiveOPMExclusionClaimCount;
		SELF.PastStateExclusionClaimCount		:=	LEFT.PastStateExclusionClaimCount;
		SELF.PastOIGExclusionClaimCount			:=	LEFT.PastOIGExclusionClaimCount;
		SELF.PastOPMExclusionClaimCount			:=	LEFT.PastOPMExclusionClaimCount;
		SELF.CurrentLicenseRevokedClaimCount	:=	LEFT.CurrentLicenseRevokedClaimCount;
		SELF.PastLicenseRevokedClaimCount		:=	LEFT.PastLicenseRevokedClaimCount;
		SELF.LicenseExpiredClaimCount			:=	LEFT.LicenseExpiredClaimCount;
		SELF.NPIDeactiveClaimCount				:=	LEFT.NPIDeactiveClaimCount;
		SELF.PatientDeceasedClaimCount			:=	LEFT.PatientDeceasedClaimCount;
		SELF.ProviderDeceasedClaimCount			:=	LEFT.ProviderDeceasedClaimCount;
		SELF.BankruptcyClaimCount				:=	LEFT.BankruptcyClaimCount;
		SELF.ConvictionClaimCount				:=	LEFT.ConvictionClaimCount;
		SELF.ProviderImpactAmount				:=	LEFT.ProviderImpactAmount;
		SELF.ProviderImpactClaimCount			:=	LEFT.ProviderImpactClaimCount;
		SELF.AddressImpactAmount				:=	LEFT.AddressImpactAmount;
		SELF.AddressImpactClaimCount			:=	LEFT.AddressImpactClaimCount;
		SELF.LNPIDImpactAmount					:=	LEFT.LNPIDImpactAmount;
		SELF.LNPIDImpactClaimCount				:=	LEFT.LNPIDImpactClaimCount;
		SELF.ProviderImpactRange				:=	LEFT.ProviderImpactRange;
		SELF.ProviderImpactPercent				:=	LEFT.ProviderImpactPercent;
		SELF.ClientSingleAddressCount			:=	LEFT.ClientSingleAddressCount;
		SELF.ClientSingleAddressFlag			:=	LEFT.ClientSingleAddressFlag;
		), LEFT OUTER, HASH);
	
	ClaimOutlier_REC := RECORD
		RECORDOF (%dsProvider%);
		INTEGER8  %Prefix%ProviderClaimCount;
		INTEGER8  %Prefix%LNPIDClaimCount;
		INTEGER8  %Prefix%ProviderPatientCount;
		INTEGER8  %Prefix%PatientDeceasedCount;
		REAL8	  %Prefix%ProviderHighChargeAmount;
		REAL8	  %Prefix%LNPIDHighChargeAmount;
		REAL8	  %Prefix%ProviderHighPaidAmount;
		REAL8	  %Prefix%LNPIDHighPaidAmount;
		REAL8 	  %Prefix%ProviderHighPaidAmountPerClaim;
		REAL8	  %Prefix%ProviderHighPaidAmountPerPatient;
		STRING8	  %Prefix%ProviderServiceDateMin;
		STRING8	  %Prefix%ProviderServiceDateMax;
		STRING1	  %Prefix%ExcludeAddressFlag;
		STRING1   %Prefix%PatientDeceasedFlag;
		STRING1   %Prefix%ProviderNPIDeactivatedFlag;
		STRING1   %Prefix%ProviderDEADeactivatedFlag;
		INTEGER8  %Prefix%ProviderPatientAddressCount;
		STRING1   %Prefix%ProviderPatientAddressFlag;
		INTEGER8  %Prefix%AddressProviderCount;
		INTEGER8  %Prefix%AddressPatientCount;
		INTEGER8  %Prefix%AddressClaimCount;
		REAL8 	  %Prefix%AddressHighChargeAmount;
		REAL8     %Prefix%AddressHighPaidAmount;
		STRING8	  %Prefix%AddressServiceDateMin;
		STRING8   %Prefix%AddressServiceDateMax;
		INTEGER8  %Prefix%TotalNPICount;
		INTEGER8  %Prefix%RecentNPICount;
		INTEGER8  %Prefix%StudentNPICount;
		STRING1   %Prefix%RecentNPIFlag;
		STRING1   %Prefix%StudentNPIFlag;
		INTEGER8  %Prefix%LargePatientGroupCount;
		STRING1	  %Prefix%LargePatientGroupFlag;
		STRING1	  %Prefix%VacantAddressActivityFlag;
		UNSIGNED4 %Prefix%NoOfAddress;
		REAL8	  %Prefix%Distance;
		STRING1	  %Prefix%ClaimCountFlag;
		STRING1	  %Prefix%PatientCountFlag;
		STRING1   %Prefix%HighPaidAmountFlag;
		STRING1   %Prefix%HighPaidAmountPerClaimFlag;
		STRING1   %Prefix%HighPaidAmountPerPatientFlag;
		STRING1   %Prefix%LongDistanceFlag;
		STRING1	  %Prefix%DMEFlag;
		STRING1	  %Prefix%LABFlag;
		UNSIGNED2 %Prefix%ClaimCountRank;
		UNSIGNED2 %Prefix%PatientCountRank;
		UNSIGNED2 %Prefix%HighPaidAmountRank;
		UNSIGNED2 %Prefix%HighPaidAmountPerClaimRank;
		UNSIGNED2 %Prefix%HighPaidAmountPerPatientRank;
		UNSIGNED2 %Prefix%LongDistanceRank;
		UNSIGNED2 %Prefix%DMERank;		
		UNSIGNED2 %Prefix%LABRank;		
		UNSIGNED8 %Prefix%ClaimCountMedian;
		UNSIGNED8 %Prefix%PatientCountMedian;
		UNSIGNED8 %Prefix%HighPaidAmountMedian;
		UNSIGNED8 %Prefix%HighPaidAmountPerClaimMedian;
		UNSIGNED8 %Prefix%HighPaidAmountPerPatientMedian;
		UNSIGNED8 %Prefix%LongDistanceMedian;
		UNSIGNED8 %Prefix%DMEMedian;
		UNSIGNED8 %Prefix%LABMedian;
		UNSIGNED8 %Prefix%DMEPatientMedian;
		UNSIGNED8 %Prefix%LABPatientMedian;
		UNSIGNED8 %Prefix%DMEClaimMedian;
		UNSIGNED8 %Prefix%LABClaimMedian;
		STRING2	  %Prefix%ClaimCountOutlierType;
		STRING2   %Prefix%PatientCountOutlierType;
		STRING2   %Prefix%HighPaidAmountOutlierType;
		STRING2   %Prefix%HighPaidAmountPerClaimOutlierType;
		STRING2   %Prefix%HighPaidAmountPerPatientOutlierType;
		STRING2	  %Prefix%LongDistanceOutlierType;
		STRING2	  %Prefix%DMEOutlierType;
		STRING2	  %Prefix%LABOutlierType;
		REAL4	  %Prefix%ClaimCountOutlierDiff;
		REAL4 	  %Prefix%PatientCountOutlierDiff;
		REAL4 	  %Prefix%HighPaidAmountOutlierDiff;
		REAL4 	  %Prefix%HighPaidAmountPerClaimOutlierDiff;
		REAL4 	  %Prefix%HighPaidAmountPerPatientOutlierDiff;
		REAL4	  %Prefix%LongDistanceOutlierDiff;
		REAL4	  %Prefix%DMEOutlierDiff;
		REAL4	  %Prefix%LABOutlierDiff;
		INTEGER8  %Prefix%NoOfPatientDrivingLongDistance;
		REAL4	  %Prefix%AveDistanceTravelled;
		INTEGER8  %Prefix%PatientDOD;
		STRING50  %Prefix%ProviderPatientSharedAddress;
		STRING50  %Prefix%LargePatientGroupAddress;
		STRING1	  %Prefix%ProviderDeceasedFlag;
		STRING1	  %Prefix%ProviderLicenseExpiredFlag;
		INTEGER8  %Prefix%ActiveStateExclusionImpactAmount;
		INTEGER8  %Prefix%ActiveOIGExclusionImpactAmount;
		INTEGER8  %Prefix%ActiveOPMExclusionImpactAmount;
		INTEGER8  %Prefix%PastStateExclusionImpactAmount;
		INTEGER8  %Prefix%PastOIGExclusionImpactAmount;
		INTEGER8  %Prefix%PastOPMExclusionImpactAmount;
		INTEGER8  %Prefix%CurrentLicenseRevokedImpactAmount;
		INTEGER8  %Prefix%PastLicenseRevokedImpactAmount;
		INTEGER8  %Prefix%LicenseExpiredImpactAmount;
		INTEGER8  %Prefix%NPIDeactiveImpactAmount;
		INTEGER8  %Prefix%PatientDeceasedImpactAmount;
		INTEGER8  %Prefix%ProviderDeceasedImpactAmount;
		INTEGER8  %Prefix%BankruptcyImpactAmount;
		INTEGER8  %Prefix%ConvictionImpactAmount;
		INTEGER8  %Prefix%ActiveStateExclusionClaimCount;
		INTEGER8  %Prefix%ActiveOIGExclusionClaimCount;
		INTEGER8  %Prefix%ActiveOPMExclusionClaimCount;
		INTEGER8  %Prefix%PastStateExclusionClaimCount;
		INTEGER8  %Prefix%PastOIGExclusionClaimCount;
		INTEGER8  %Prefix%PastOPMExclusionClaimCount;
		INTEGER8  %Prefix%CurrentLicenseRevokedClaimCount;
		INTEGER8  %Prefix%PastLicenseRevokedClaimCount;
		INTEGER8  %Prefix%LicenseExpiredClaimCount;
		INTEGER8  %Prefix%NPIDeactiveClaimCount;
		INTEGER8  %Prefix%PatientDeceasedClaimCount;
		INTEGER8  %Prefix%ProviderDeceasedClaimCount;
		INTEGER8  %Prefix%BankruptcyClaimCount;
		INTEGER8  %Prefix%ConvictionClaimCount;
		INTEGER8  %Prefix%ProviderImpactAmount;
		INTEGER8  %Prefix%ProviderImpactClaimCount;
		INTEGER8  %Prefix%AddressImpactAmount;
		INTEGER8  %Prefix%AddressImpactClaimCount;
		INTEGER8  %Prefix%LNPIDImpactAmount;
		INTEGER8  %Prefix%LNPIDImpactClaimCount;
		INTEGER8  %Prefix%ProviderImpactRange;
		INTEGER8  %Prefix%ProviderImpactPercent;
		INTEGER4  %Prefix%ClientSingleAddressCount;
		STRING1   %Prefix%ClientSingleAddressFlag;	
	END;
	
	FinalClaimOutlierDs	:= JOIN (%dsProvider%, Combine_Claim_Outlier, LEFT.%ProviderKey% = RIGHT.ProviderKey, TRANSFORM(ClaimOutlier_REC, 
		SELF.%Prefix%ProviderClaimCount						:=	RIGHT.ProviderClaimCount;
		SELF.%Prefix%LNPIDClaimCount						:=	RIGHT.LNPIDClaimCount;
		SELF.%Prefix%ProviderPatientCount					:=	RIGHT.ProviderPatientCount;
		SELF.%Prefix%PatientDeceasedCount					:=	RIGHT.PatientDeceasedCount;
		SELF.%Prefix%ProviderHighChargeAmount				:=	RIGHT.ProviderHighChargeAmount;
		SELF.%Prefix%LNPIDHighChargeAmount					:=	RIGHT.LNPIDHighChargeAmount;
		SELF.%Prefix%ProviderHighPaidAmount					:=	RIGHT.ProviderHighPaidAmount;
		SELF.%Prefix%LNPIDHighPaidAmount					:=	RIGHT.LNPIDHighPaidAmount;
		SELF.%Prefix%ProviderHighPaidAmountPerClaim			:=	RIGHT.ProviderHighPaidAmountPerClaim;
		SELF.%Prefix%ProviderHighPaidAmountPerPatient		:=	RIGHT.ProviderHighPaidAmountPerPatient;
		SELF.%Prefix%ProviderServiceDateMin					:=	RIGHT.ProviderServiceDateMin;
		SELF.%Prefix%ProviderServiceDateMax					:=	RIGHT.ProviderServiceDateMax;
		SELF.%Prefix%ExcludeAddressFlag						:=	RIGHT.ExcludeAddressFlag;
		SELF.%Prefix%PatientDeceasedFlag					:=	RIGHT.PatientDeceasedFlag;
		SELF.%Prefix%ProviderNPIDeactivatedFlag				:=	RIGHT.ProviderNPIDeactivatedFlag;
		SELF.%Prefix%ProviderDEADeactivatedFlag				:=	RIGHT.ProviderDEADeactivatedFlag;
		SELF.%Prefix%ProviderPatientAddressCount			:=	RIGHT.ProviderPatientAddressCount;
		SELF.%Prefix%ProviderPatientAddressFlag				:=	RIGHT.ProviderPatientAddressFlag;
		SELF.%Prefix%AddressProviderCount					:=	RIGHT.AddressProviderCount;
		SELF.%Prefix%AddressPatientCount					:=	RIGHT.AddressPatientCount;
		SELF.%Prefix%AddressClaimCount						:=	RIGHT.AddressClaimCount;
		SELF.%Prefix%AddressHighChargeAmount				:=	RIGHT.AddressHighChargeAmount;
		SELF.%Prefix%AddressHighPaidAmount					:=	RIGHT.AddressHighPaidAmount;
		SELF.%Prefix%AddressServiceDateMin					:=	RIGHT.AddressServiceDateMin;
		SELF.%Prefix%AddressServiceDateMax					:=	RIGHT.AddressServiceDateMax;
		SELF.%Prefix%TotalNPICount							:=	RIGHT.TotalNPICount;
		SELF.%Prefix%RecentNPICount							:=	RIGHT.RecentNPICount;
		SELF.%Prefix%StudentNPICount						:=	RIGHT.StudentNPICount;
		SELF.%Prefix%RecentNPIFlag							:=	RIGHT.RecentNPIFlag;
		SELF.%Prefix%StudentNPIFlag							:=	RIGHT.StudentNPIFlag;
		SELF.%Prefix%LargePatientGroupCount					:=  RIGHT.LargePatientGroupCount;
		SELF.%Prefix%LargePatientGroupFlag					:=	RIGHT.LargePatientGroupFlag;
		SELF.%Prefix%VacantAddressActivityFlag				:=	RIGHT.VacantAddressActivityFlag;		
		SELF.%Prefix%NoofAddress							:=	RIGHT.NoofAddress;		
		SELF.%Prefix%Distance								:=	RIGHT.Distance;
		SELF.%Prefix%ClaimCountFlag							:=	RIGHT.ClaimCountFlag;
		SELF.%Prefix%ClaimCountRank							:=	RIGHT.ClaimCountRank;
		SELF.%Prefix%PatientCountFlag						:=	RIGHT.PatientCountFlag;		
		SELF.%Prefix%PatientCountRank						:=	RIGHT.PatientCountRank;
		SELF.%Prefix%HighPaidAmountFlag						:=	RIGHT.HighPaidAmountFlag;
		SELF.%Prefix%HighPaidAmountRank						:=	RIGHT.HighPaidAmountRank;
		SELF.%Prefix%HighPaidAmountPerClaimFlag				:=	RIGHT.HighPaidAmountPerClaimFlag;
		SELF.%Prefix%HighPaidAmountPerClaimRank				:=	RIGHT.HighPaidAmountPerClaimRank;
		SELF.%Prefix%HighPaidAmountPerPatientFlag			:=	RIGHT.HighPaidAmountPerPatientFlag;
		SELF.%Prefix%HighPaidAmountPerPatientRank			:=	RIGHT.HighPaidAmountPerPatientRank;
		SELF.%Prefix%LongDistanceFlag						:=	RIGHT.LongDistanceFlag;
		SELF.%Prefix%LongDistanceRank						:=	RIGHT.LongDistanceRank;
		SELF.%Prefix%DMEFlag								:=	RIGHT.DMEFlag;
		SELF.%Prefix%DMERank								:=	RIGHT.DMERank;
		SELF.%Prefix%LABFlag								:=	RIGHT.LABFlag;
		SELF.%Prefix%LABRank								:=	RIGHT.LABRank;
		SELF.%Prefix%ClaimCountMedian						:=	RIGHT.ClaimCountMedian;
		SELF.%Prefix%PatientCountMedian						:=	RIGHT.PatientCountMedian;
		SELF.%Prefix%HighPaidAmountMedian					:=	RIGHT.HighPaidAmountMedian;
		SELF.%Prefix%HighPaidAmountPerClaimMedian			:=	RIGHT.HighPaidAmountPerClaimMedian;
		SELF.%Prefix%HighPaidAmountPerPatientMedian			:=	RIGHT.HighPaidAmountPerPatientMedian;
		SELF.%Prefix%LongDistanceMedian						:=	RIGHT.LongDistanceMedian;
		SELF.%Prefix%DMEMedian								:=	RIGHT.DMEMedian;
		SELF.%Prefix%LABMedian								:=	RIGHT.LABMedian;
		SELF.%Prefix%DMEPatientMedian						:=	RIGHT.DMEPatientMedian;
		SELF.%Prefix%LABPatientMedian						:=	RIGHT.LABPatientMedian;
		SELF.%Prefix%DMEClaimMedian							:=	RIGHT.DMEClaimMedian;
		SELF.%Prefix%LABClaimMedian							:=	RIGHT.LABClaimMedian;
		SELF.%Prefix%ClaimCountOutlierType					:=	RIGHT.ClaimCountOutlierType;
		SELF.%Prefix%PatientCountOutlierType				:=	RIGHT.PatientCountOutlierType;
		SELF.%Prefix%HighPaidAmountOutlierType				:=	RIGHT.HighPaidAmountOutlierType;
		SELF.%Prefix%HighPaidAmountPerClaimOutlierType		:=	RIGHT.HighPaidAmountPerClaimOutlierType;
		SELF.%Prefix%HighPaidAmountPerPatientOutlierType	:=	RIGHT.HighPaidAmountPerPatientOutlierType;
		SELF.%Prefix%LongDistanceOutlierType				:=	RIGHT.LongDistanceOutlierType;
		SELF.%Prefix%DMEOutlierType							:=	RIGHT.DMEOutlierType;
		SELF.%Prefix%LABOutlierType							:=	RIGHT.LABOutlierType;
		SELF.%Prefix%ClaimCountOutlierDiff					:=	RIGHT.ClaimCountOutlierDiff;
		SELF.%Prefix%PatientCountOutlierDiff				:=	RIGHT.PatientCountOutlierDiff;
		SELF.%Prefix%HighPaidAmountOutlierDiff				:=	RIGHT.HighPaidAmountOutlierDiff;
		SELF.%Prefix%HighPaidAmountPerClaimOutlierDiff		:=	RIGHT.HighPaidAmountPerClaimOutlierDiff;
		SELF.%Prefix%HighPaidAmountPerPatientOutlierDiff	:=	RIGHT.HighPaidAmountPerPatientOutlierDiff;
		SELF.%Prefix%LongDistanceOutlierDiff				:=	RIGHT.LongDistanceOutlierDiff;
		SELF.%Prefix%DMEOutlierDiff							:=	RIGHT.DMEOutlierDiff;
		SELF.%Prefix%LABOutlierDiff							:=	RIGHT.LABOutlierDiff;		
		SELF.%Prefix%NoOfPatientDrivingLongDistance			:=	RIGHT.NoOfPatientDrivingLongDistance;
		SELF.%Prefix%AveDistanceTravelled					:=	RIGHT.AveDistanceTravelled;
		SELF.%Prefix%PatientDOD								:=	RIGHT.PatientDOD;
		SELF.%Prefix%ProviderPatientSharedAddress			:=	STD.STR.CleanSpaces (RIGHT.ProviderPatientSharedAddress);
		SELF.%Prefix%LargePatientGroupAddress				:=	STD.STR.CleanSpaces (RIGHT.LargePatientGroupAddress);
		SELF.%Prefix%ProviderDeceasedFlag					:=	RIGHT.ProviderDeceasedFlag;
		SELF.%Prefix%ProviderLicenseExpiredFlag				:=	RIGHT.ProviderLicenseExpiredFlag;
		SELF.%Prefix%ActiveStateExclusionImpactAmount		:=	RIGHT.ActiveStateExclusionImpactAmount;
		SELF.%Prefix%ActiveOIGExclusionImpactAmount			:=	RIGHT.ActiveOIGExclusionImpactAmount;
		SELF.%Prefix%ActiveOPMExclusionImpactAmount			:=	RIGHT.ActiveOPMExclusionImpactAmount;
		SELF.%Prefix%PastStateExclusionImpactAmount			:=	RIGHT.PastStateExclusionImpactAmount;
		SELF.%Prefix%PastOIGExclusionImpactAmount			:=	RIGHT.PastOIGExclusionImpactAmount;
		SELF.%Prefix%PastOPMExclusionImpactAmount			:=	RIGHT.PastOPMExclusionImpactAmount;
		SELF.%Prefix%CurrentLicenseRevokedImpactAmount		:=	RIGHT.CurrentLicenseRevokedImpactAmount;
		SELF.%Prefix%PastLicenseRevokedImpactAmount			:=	RIGHT.PastLicenseRevokedImpactAmount;
		SELF.%Prefix%LicenseExpiredImpactAmount				:=	RIGHT.LicenseExpiredImpactAmount;
		SELF.%Prefix%NPIDeactiveImpactAmount				:=	RIGHT.NPIDeactiveImpactAmount;
		SELF.%Prefix%PatientDeceasedImpactAmount			:=	RIGHT.PatientDeceasedImpactAmount;
		SELF.%Prefix%ProviderDeceasedImpactAmount			:=	RIGHT.ProviderDeceasedImpactAmount;
		SELF.%Prefix%BankruptcyImpactAmount					:=	RIGHT.BankruptcyImpactAmount;
		SELF.%Prefix%ConvictionImpactAmount					:=	RIGHT.ConvictionImpactAmount;
		SELF.%Prefix%ActiveStateExclusionClaimCount			:=	RIGHT.ActiveStateExclusionClaimCount;
		SELF.%Prefix%ActiveOIGExclusionClaimCount			:=	RIGHT.ActiveOIGExclusionClaimCount;
		SELF.%Prefix%ActiveOPMExclusionClaimCount			:=	RIGHT.ActiveOPMExclusionClaimCount;
		SELF.%Prefix%PastStateExclusionClaimCount			:=	RIGHT.PastStateExclusionClaimCount;
		SELF.%Prefix%PastOIGExclusionClaimCount				:=	RIGHT.PastOIGExclusionClaimCount;
		SELF.%Prefix%PastOPMExclusionClaimCount				:=	RIGHT.PastOPMExclusionClaimCount;
		SELF.%Prefix%CurrentLicenseRevokedClaimCount		:=	RIGHT.CurrentLicenseRevokedClaimCount;
		SELF.%Prefix%PastLicenseRevokedClaimCount			:=	RIGHT.PastLicenseRevokedClaimCount;
		SELF.%Prefix%LicenseExpiredClaimCount				:=	RIGHT.LicenseExpiredClaimCount;
		SELF.%Prefix%NPIDeactiveClaimCount					:=	RIGHT.NPIDeactiveClaimCount;
		SELF.%Prefix%PatientDeceasedClaimCount				:=	RIGHT.PatientDeceasedClaimCount;
		SELF.%Prefix%ProviderDeceasedClaimCount				:=	RIGHT.ProviderDeceasedClaimCount;
		SELF.%Prefix%BankruptcyClaimCount					:=	RIGHT.BankruptcyClaimCount;
		SELF.%Prefix%ConvictionClaimCount					:=	RIGHT.ConvictionClaimCount;
		SELF.%Prefix%ProviderImpactAmount					:=	RIGHT.ProviderImpactAmount;
		SELF.%Prefix%ProviderImpactClaimCount				:=	RIGHT.ProviderImpactClaimCount;
		SELF.%Prefix%AddressImpactAmount					:=	RIGHT.AddressImpactAmount;
		SELF.%Prefix%AddressImpactClaimCount				:=	RIGHT.AddressImpactClaimCount;
		SELF.%Prefix%LNPIDImpactAmount						:=	RIGHT.LNPIDImpactAmount;
		SELF.%Prefix%LNPIDImpactClaimCount					:=	RIGHT.LNPIDImpactClaimCount;
		SELF.%Prefix%ProviderImpactRange					:=	RIGHT.ProviderImpactRange;
		SELF.%Prefix%ProviderImpactPercent					:=	RIGHT.ProviderImpactPercent;
		SELF.%Prefix%ClientSingleAddressCount				:=	RIGHT.ClientSingleAddressCount;
		SELF.%Prefix%ClientSingleAddressFlag				:=	RIGHT.ClientSingleAddressFlag;
		SELF := LEFT;), LEFT OUTER, HASH);
	
	%^edsOutput% := FinalClaimOutlierDs %^p%;

	Historical_REC := RECORD
		STRING50  ProviderKey;
		STRING4	  Reason;
		STRING20  LNPID;
		STRING20  ProviderFirstName;
		STRING20  ProviderMiddleName;
		STRING20  ProviderLastName;
		STRING50  ProviderAddressLine1;
		STRING20  ProviderCity;
		STRING2   ProviderState;
		STRING5   ProviderZip;
		STRING20  PatientFirstName;
		STRING20  PatientMiddleName;
		STRING20  PatientLastName;
		STRING8	  PatientDOD;
		STRING10  Distance;
		STRING8   NoofVisits;
		STRING50  PatientAddressLine1;
		STRING20  PatientCity;
		STRING2   PatientState;
		STRING5   PatientZip;
		STRING50  PatientKey;
		STRING2	  State;
		STRING25  LicenseNumber;
		STRING8	  SanctionDate;
		STRING8   ReInstatementDate;
		STRING8   ExpirationDate;
		STRING9   DEANumber;
		STRING8   DEAExpirationDate;
		STRING100 SpecialtyDesc;
		STRING15  PaidAmount;
		STRING5   PaidAmountPercent;
		STRING10  NPINumber;
		STRING4   ProviderScore;
		STRING10  ImpactDollars;
		STRING10  ClaimCount;
		STRING25  HistKey;
	END;

	IMPORT STD;
	
	TreatingDeceasedPatientDs 			 	:= PROJECT (%TreatingDeceasedPatientReport%,TRANSFORM(Historical_REC, SELF.ProviderKey := LEFT.ProviderKey; SELF.Reason := 'G002'; SELF.PatientKey := LEFT.PatientKey; SELF.PatientFirstName := LEFT.FName; SELF.PatientMiddleName := LEFT.MName; SELF.PatientLastName := LEFT.LName; SELF.PatientDOD := IF(LEFT.PatientDateOfDeath > 0, (STRING)LEFT.PatientDateOfDeath,''); SELF.ImpactDollars := IF(LEFT.ImpactAmount > 0, (STRING)LEFT.ImpactAmount,''); SELF.ClaimCount := IF(LEFT.ClaimCount > 0, (STRING)LEFT.ClaimCount,''); SELF.HistKey := 'G002' + '_' + TRIM(LEFT.ProviderKey); SELF := [])); 
	TreatingPatientLivingAtSameAddressDs 	:= PROJECT (%PatientLivingSameAddressReport%,TRANSFORM(Historical_REC, SELF.ProviderKey := LEFT.ProviderKey; SELF.Reason := 'G003'; SELF.PatientKey := LEFT.PatientKey; SELF.PatientFirstName := LEFT.FName; SELF.PatientMiddleName := LEFT.MName; SELF.PatientLastName := LEFT.LName; SELF.HistKey := 'G003' + '_' + TRIM(LEFT.ProviderKey); SELF := []));
	FlaggedDistanceDs 						:= PROJECT (%FlagDistanceReport%,TRANSFORM(Historical_REC, SELF.ProviderKey := LEFT.ProviderKey; SELF.Reason := 'H001'; SELF.PatientKey := LEFT.PatientKey; SELF.PatientFirstName := LEFT.FName; SELF.PatientMiddleName := LEFT.MName; SELF.PatientLastName := LEFT.LName; SELF.Distance := IF(LEFT.LongDistance > 0, (STRING) REALFORMAT(LEFT.LongDistance,6,2), ''); SELF.NoofVisits := IF(LEFT.NoOfVisits > 0, (STRING)LEFT.NoOfVisits, ''); SELF.PatientAddressLine1 := STD.Str.CleanSpaces(LEFT.AddrLine1); SELF.PatientCity := LEFT.City; SELF.PatientState := LEFT.State; SELF.PatientZip := LEFT.Zip; SELF.HistKey := 'H001' + '_' + TRIM(LEFT.ProviderKey); SELF := [])); 
	ProviderAddressMatchesWithPatientDs	 	:= PROJECT (%ProviderMatchPatientAddressReport%,TRANSFORM(Historical_REC, SELF.ProviderKey := LEFT.ProviderKey; SELF.Reason := 'A008'; SELF.PatientKey := LEFT.PatientKey; SELF.PatientFirstName := LEFT.FName; SELF.PatientMiddleName := LEFT.MName; SELF.PatientLastName := LEFT.LName; SELF.HistKey := 'A008' + '_' + TRIM(LEFT.ProviderKey); SELF := [])); 
	SingleAddressDs 						:= PROJECT (%SingleAddressReport%,TRANSFORM(Historical_REC, SELF.ProviderKey := LEFT.ProviderKey; SELF.Reason := 'A007'; SELF.ProviderFirstName := LEFT.FName; SELF.ProviderMiddleName := LEFT.MName; SELF.ProviderLastName := LEFT.LName; 
														Addrline1 := STD.Str.CleanSpaces(LEFT.PrimaryRange + LEFT.PreDirectional + LEFT.PrimaryName + LEFT.AddressSuffix + LEFT.PostDirectional + LEFT.SecondaryRange + LEFT.City + LEFT.State + LEFT.Zip);
														SELF.ProviderAddressLine1 := TRIM(Addrline1);
														SELF.ProviderCity := LEFT.City; SELF.ProviderState := LEFT.State; SELF.ProviderZip := LEFT.Zip;
														AddrKey := TRIM((STRING)HASH64(HASHMD5 (SELF.ProviderAddressLine1)));																								
														SELF.HistKey := 'A007' + '_' + Addrline1;
														SELF := [])); 

	CombinedHistoryDs :=  TreatingDeceasedPatientDs + TreatingPatientLivingAtSameAddressDs + FlaggedDistanceDs + ProviderAddressMatchesWithPatientDs + SingleAddressDs;

	%^edsHistorical% := CombinedHistoryDs %^p%;


	 IMPORT HealthCare;
	 PercentageResults := HealthCare.Mac_Field_Percentage (%dsOutput%, '%Prefix%');
	 %^ePerStats% := TABLE (PercentageResults,{%Prefix%FieldName, %Prefix%FieldPercent}); 

ENDGENERATES

GENERATES KEL
	
//	#OPTION(codegen,'nosmartjoins')
//	#OPTION(persistlevel, 0)

	Provider 	  			:= ENTITY (FLAT(UID(%ProviderKey%), STRING ProviderKey = %ProviderKey%, INTEGER LNPID = %ProviderLNPID%, INTEGER LexID = %ProviderLEXID%, STRING LName = %ProviderLastName%, STRING FName = %ProviderFirstName%, STRING MName = %ProviderMiddleName%, STRING SName = %ProviderNameSuffix%, STRING PrimaryRange = NULL()%ProviderPrimaryRange%, STRING PreDirectional = NULL()%ProviderPreDirectional%, STRING PrimaryName = NULL()%ProviderPrimaryName%, STRING AddressSuffix = NULL()%ProviderAddressSuffix%, STRING PostDirectional = NULL()%ProviderPostDirectional%, STRING SecondaryRange = NULL()%ProviderSecondaryRange%, STRING City = NULL()%ProviderCity%, STRING State = NULL()%ProviderState%, STRING Zip = NULL()%ProviderZip5%, REAL Lat=%ProviderLatitude%, REAL Long=%ProviderLongitude%,  STRING PractisePrimaryRange = NULL()%ProviderPractisePrimaryRange%, STRING PractisePreDirectional = NULL()%ProviderPractisePreDirectional%, STRING PractisePrimaryName = NULL()%ProviderPractisePrimaryName%, STRING PractiseAddressSuffix = NULL()%ProviderPractiseAddressSuffix%, STRING PractisePostDirectional = NULL()%ProviderPractisePostDirectional%, STRING PractiseSecondaryRange = NULL()%ProviderPractiseSecondaryRange%, STRING PractiseCity = NULL()%ProviderPractiseCity%, STRING PractiseState = NULL()%ProviderPractiseState%, STRING PractiseZip = NULL()%ProviderPractiseZip5%, STRING NPI = %ProviderNPINumber%, DATE NPIEnumerationDate = %ProviderNPIEnumerationDate%, STRING EntityType = %ProviderEntityType%, INTEGER NPIDeactivationDate = %ProviderNPIDeactivationDate%, STRING NPIFlag = %ProviderNPIFlag%, DATE DEADate = %ProviderDEAExpiredDate%, STRING Taxonomy = %ProviderTaxonomy%, STRING Speciality = %ProviderSpecialityCode%, STRING ClientSpeciality = %ProviderClientSpecialityCode%, INTEGER VacationBeginDate = NULL(0) %ProviderVacationBeginDate%, INTEGER VacationEndDate = NULL(0) %ProviderVacationEndDate%, INTEGER DOD = %ProviderDateofDeath%, DATE LicenseExpiredDate = %ProviderLicenseExpiredDate%, INTEGER CurrentStateExclusionDate = %ProviderCurrentStateExclusionDate%, INTEGER CurrentOIGExclusionDate = %ProviderCurrentOIGExclusionDate%, INTEGER CurrentOPMExclusionDate = %ProviderCurrentOPMExclusionDate%, INTEGER PastStateExclusionDate = %ProviderPastStateExclusionDate%, INTEGER PastOIGExclusionDate = %ProviderPastOIGExclusionDate%, INTEGER PastOPMExclusionDate = %ProviderPastOPMExclusionDate%, INTEGER CurrentRevokedLicenseDate = %ProviderCurrentRevokedLicenseDate%, INTEGER PastRevokedLicenseDate = %ProviderPastRevokedLicenseDate%, STRING BankruptcyDate = %ProviderBankruptcyDate%, STRING ConvictionDate = %ProviderConvictionDate%, STRING ActiveStateExclusionFlag = %ProviderActiveStateExclusionFlag%, STRING ActiveOIGExclusionFlag = %ProviderActiveOIGExclusionFlag%, STRING ActiveOPMExclusionFlag = %ProviderActiveOPMExclusionFlag%, STRING PastStateExclusionFlag = %ProviderPastStateExclusionFlag%, STRING PastOIGExclusionFlag = %ProviderPastOIGExclusionFlag%, STRING PastOPMExclusionFlag = %ProviderPastOPMExclusionFlag%, STRING ActiveLicenseRevokedFlag = %ProviderActiveLicenseRevokedFlag%, STRING PastLicenseRevokedFlag = %ProviderPastLicenseRevokedFlag%, STRING CurrentExclusionState = %ProviderCurrentExclusionState%, STRING RevokedExclusionState = %ProviderCurrentRevokedState%, STRING PastExclusionState = %ProviderPastExclusionState%, STRING PastRevokedState = %ProviderPastRevokedState%,  STRING LicenseExpiredState = %ProviderLicenseExpiredState%, STRING LicenseExpiredFlag = %ProviderLicenseExpiredFlag%, STRING LicenseInactiveState = %ProviderLicenseInactiveState%, STRING LicenseRevokedState = %ProviderLicenseRevokedState%, STRING SingleAddressFlag = %ProviderSingleAddressFlag%, INTEGER PastStateBeginExclusionDate = %ProviderPastBeginStateExclusionDate%, INTEGER PastOIGBeginExclusionDate = %ProviderPastBeginOIGExclusionDate%, INTEGER PastOPMBeginExclusionDate = %ProviderPastBeginOPMExclusionDate%, INTEGER PastRevokedBeginLicenseDate = %ProviderPastRevokedBeginLicenseDate%),MODEL(*));
	Patient  	  			:= ENTITY (FLAT(UID(%PatientKey%), STRING PatientKey = %PatientKey%, 	INTEGER LEXID = %PatientLexID%, STRING LName = %PatientLastName%, STRING FName = %PatientFirstName%, STRING MName = %PatientMiddleName%, STRING SName = %PatientNameSuffix%, STRING PrimaryRange = NULL()%PatientPrimaryRange%, STRING PreDirectional = NULL()%PatientPreDirectional%, STRING PrimaryName = NULL()%PatientPrimaryName%, STRING AddressSuffix = NULL()%PatientAddressSuffix%, STRING PostDirectional = NULL()%PatientPostDirectional%, STRING SecondaryRange = NULL()%PatientSecondaryRange%, STRING City = NULL()%PatientCity%, STRING State = NULL()%PatientState%, STRING Zip = NULL()%PatientZip5%, INTEGER ClientDOD = %PatientClientDateOfDeath%, INTEGER DOD = %PatientDateOfDeath%, STRING DODFLAG = %PatientDeceasedFlag%, REAL Lat=%PatientLatitude%, REAL Long=%PatientLongitude%),MODEL(*));		
	Claim  	 	  			:= ENTITY (FLAT(UID(%ClaimNumber%,%ClaimLineNumber%), STRING ProviderKey = %ClaimRenderingProviderKey%, STRING PatientKey = %ClaimPatientKey%, STRING ClaimNum = %ClaimNumber%, STRING ClaimLineNum = %ClaimLineNumber%, INTEGER ServiceDate = %ClaimBeginningDateOfService%, REAL ChargeAmt = %ClaimChargeAmount%, REAL PaidAmt = %ClaimPaidAmount%),MODEL(*));
	Address 	  			:= ENTITY (FLAT(UID(%ProviderPrimaryRange%, %ProviderPreDirectional%, %ProviderPrimaryName%, %ProviderAddressSuffix%, %ProviderPostDirectional%, %ProviderSecondaryRange%, %ProviderCity%, %ProviderState%, %ProviderZip5%), STRING PrimaryRange = NULL()%ProviderPrimaryRange%, STRING PreDirectional = NULL()%ProviderPreDirectional%, STRING PrimaryName = NULL()%ProviderPrimaryName%, STRING AddressSuffix = NULL()%ProviderAddressSuffix%, STRING PostDirectional = NULL()%ProviderPostDirectional%, STRING SecondaryRange = NULL()%ProviderSecondaryRange%, STRING City = NULL()%ProviderCity%, STRING State = NULL()%ProviderState%, STRING Zip = NULL()%ProviderZip5%));																						
	ExclusionList 			:= ENTITY (FLAT(UID(%ExclusionPrimaryRange%, %ExclusionPreDirectional%, %ExclusionPrimaryName%, %ExclusionAddressSuffix%, %ExclusionPostDirectional%, %ExclusionSecondaryRange%, %ExclusionCity%, %ExclusionState%, %ExclusionZip5%), STRING PrimaryRange = NULL()%ExclusionPrimaryRange%, STRING PreDirectional = NULL()%ExclusionPreDirectional%, STRING PrimaryName = NULL()%ExclusionPrimaryName%, STRING AddressSuffix = NULL()%ExclusionAddressSuffix%, STRING PostDirectional = NULL()%ExclusionPostDirectional%, STRING SecondaryRange = NULL()%ExclusionSecondaryRange%, STRING City = NULL()%ExclusionCity%, STRING State = NULL()%ExclusionState%, STRING Zip = NULL()%ExclusionZip5%));
	ProviderLNPIDPatients	:= ENTITY (FLAT(Provider Prov = UID(%ClaimRenderingProviderKey%), INTEGER LexID,  STRING PrimaryRange, STRING PreDirectional, STRING PrimaryName, STRING AddressSuffix, STRING PostDirectional, STRING SecondaryRange, STRING City, STRING State, STRING Zip),MODEL(*));	

	ProviderPatients 		:= ASSOCIATION(FLAT(Provider 	Prov 	= UID(%ClaimRenderingProviderKey%),  Patient Pat  = UID(%ClaimPatientKey%)));
	ProviderClaims			:= ASSOCIATION(FLAT(Provider 	Prov 	= UID(%ClaimRenderingProviderKey%),  Claim Clm 	  = UID(%ClaimNumber%,%ClaimLineNumber%)));
	PatientClaims			:= ASSOCIATION(FLAT(Patient  	Pat  	= UID(%ClaimPatientKey%),  			 Claim Clm 	  = UID(%ClaimNumber%,%ClaimLineNumber%)));
	ProviderPatientsClaims 	:= ASSOCIATION(FLAT(Provider 	Prov 	= UID(%ClaimRenderingProviderKey%),  Patient Pat  = UID(%ClaimPatientKey%), 	Claim Clm = UID(%ClaimNumber%,%ClaimLineNumber%)));
	FProviderPatientsClaims := ASSOCIATION(FLAT(Provider 	Prov 	= UID(%ClaimRenderingProviderKey%),  Patient Pat  = UID(%ClaimPatientKey%), 	Claim Clm = UID(%ClaimNumber%,%ClaimLineNumber%)));
	ProviderAddress			:= ASSOCIATION(FLAT(Provider 	Prov 	= UID(%ProviderKey%),	 			 Address Addr = UID(%ProviderPrimaryRange%, %ProviderPreDirectional%, %ProviderPrimaryName%, %ProviderAddressSuffix%, %ProviderPostDirectional%, %ProviderSecondaryRange%, %ProviderCity%, %ProviderState%, %ProviderZip5%)));
	PatientAddress			:= ASSOCIATION(FLAT(Patient 	Pat   	= UID(%PatientKey%), 				 Address Addr = UID(%PatientPrimaryRange%, %PatientPreDirectional%, %PatientPrimaryName%, %PatientAddressSuffix%, %PatientPostDirectional%, %PatientSecondaryRange%, %PatientCity%, %PatientState%, %PatientZip5%)));
	AddressClaims			:= ASSOCIATION(FLAT(Address 	Addr 	= UID(%ProviderPrimaryRange%, %ProviderPreDirectional%, %ProviderPrimaryName%, %ProviderAddressSuffix%, %ProviderPostDirectional%, %ProviderSecondaryRange%, %ProviderCity%, %ProviderState%, %ProviderZip5%), Claim Clm = UID(%ClaimNumber%,%ClaimLineNumber%)));
	
	USE %dsProvider% 		(FLAT, Provider, ProviderAddress, Address);
	USE %dsPatient%  		(FLAT, Patient, PatientAddress);
	USE %dsClaim%    		(FLAT, Claim, ProviderClaims, ProviderPatients, PatientClaims, ProviderPatientsClaims);
	USE %dsExclusionList%   (FLAT, ExclusionList);
	
	//GLOBAL: ProviderPatients (#1, #2), ProviderAddress (#1, #3) => PatientAddress (#2, #3);	
	GLOBAL: ProviderClaims	 (#1, #2), ProviderAddress (#1, #3) => AddressClaims  (#3, #2);
	GLOBAL: ProviderPatients (#1, #2), Patient(#2, #3=LEXID, #4=PrimaryRange,#5=PreDirectional,#6=PrimaryName,#7=AddressSuffix,#8=PostDirectional,#9=SecondaryRange,#10=City,#11=State,#12=Zip ) => ProviderLNPIDPatients (#1,#3,#4,#5,#6,#7,#8,#9,#10,#11,#12);  
	
	Provider: => ProviderClaimCount 				:= COUNT(ProviderClaims.Clm); 
	Provider: => ProviderPatientCount 				:= COUNT(ProviderPatients.Pat);
	Provider: => ProviderHighChargeAmount			:= SUM (ProviderClaims.Clm, ChargeAmt);  
	Provider: => ProviderHighPaidAmount				:= SUM (ProviderClaims.Clm, PaidAmt);  
	Provider: => ProviderHighPaidAmountPerClaim		:= SUM (ProviderClaims.Clm, PaidAmt) / COUNT(ProviderClaims.Clm); 
	Provider: => ProviderHighPaidAmountPerPatient	:= SUM (ProviderClaims.Clm, PaidAmt) / COUNT(ProviderPatients.Pat); 
	Provider: => ProviderServiceDateMin				:= MIN (ProviderClaims.Clm, ServiceDate); 
	Provider: => ProviderServiceDateMax				:= MAX (ProviderClaims.Clm, ServiceDate); 
	Patient:  => PatientServiceDateMin				:= MIN (ProviderPatientsClaims.Clm, ServiceDate);
	Patient:  => PatientServiceDateMax				:= MAX (ProviderPatientsClaims.Clm, ServiceDate);
	Provider: => ExcludeAddressFlag					:= EXISTS(ExclusionList(PrimaryRange=Provider.PrimaryRange,PreDirectional = Provider.PreDirectional, PrimaryName = Provider.PrimaryName, AddressSuffix = Provider.AddressSuffix, PostDirectional = Provider.PostDirectional, SecondaryRange = Provider.SecondaryRange, City = Provider.City, State = Provider.State, Zip = Provider.Zip));
	Patient:  => PatientDateOfDeath 				:= MAP (DOD > 0 => DOD, ClientDOD = 21991231 => 0, ClientDOD:Null => 0, ClientDOD > 0 => ClientDOD, 0); 

	Provider: => PatientDOD							:= MAX (ProviderPatients.Pat, PatientDateOfDeath);
	Provider: => ProvBankruptcyDate  				:= MAP (TRIMBOTH(BankruptcyDate) = 'Past 1M' => INTEGERFROMDATE(ADJUSTCALENDAR(CURRENTDATE(),0,-1,0)), 
														  	TRIMBOTH(BankruptcyDate) = 'Past 3M' => INTEGERFROMDATE(ADJUSTCALENDAR(CURRENTDATE(),0,-3,0)), 
															TRIMBOTH(BankruptcyDate) = 'Past 6M' => INTEGERFROMDATE(ADJUSTCALENDAR(CURRENTDATE(),0,-6,0)), 
															TRIMBOTH(BankruptcyDate) = 'Past 1Y' => INTEGERFROMDATE(ADJUSTCALENDAR(CURRENTDATE(),-1,0,0)), 
															TRIMBOTH(BankruptcyDate) = 'Past 2Y' => INTEGERFROMDATE(ADJUSTCALENDAR(CURRENTDATE(),-2,0,0)), 
															TRIMBOTH(BankruptcyDate) = 'Past 5Y' => INTEGERFROMDATE(ADJUSTCALENDAR(CURRENTDATE(),-5,0,0)), 
															0);
	Provider: => ProvConvictionDate  				:= MAP (TRIMBOTH(ConvictionDate) = 'Past 1M' => INTEGERFROMDATE(ADJUSTCALENDAR(CURRENTDATE(),0,-1,0)), 
															TRIMBOTH(ConvictionDate) = 'Past 3M' => INTEGERFROMDATE(ADJUSTCALENDAR(CURRENTDATE(),0,-3,0)), 
															TRIMBOTH(ConvictionDate) = 'Past 6M' => INTEGERFROMDATE(ADJUSTCALENDAR(CURRENTDATE(),0,-6,0)), 
															TRIMBOTH(ConvictionDate) = 'Past 1Y' => INTEGERFROMDATE(ADJUSTCALENDAR(CURRENTDATE(),-1,0,0)), 
															TRIMBOTH(ConvictionDate) = 'Past 2Y' => INTEGERFROMDATE(ADJUSTCALENDAR(CURRENTDATE(),-2,0,0)), 
															TRIMBOTH(ConvictionDate) = 'Past 5Y' => INTEGERFROMDATE(ADJUSTCALENDAR(CURRENTDATE(),-5,0,0)), 
															0);
	Claim:    => PatientDOD							:= MAX(ProviderPatientsClaims.Pat, PatientDateOfDeath);
	Claim:	  => DeceasedFlag						:= ServiceDate > PatientDOD AND PatientDOD > 0 AND ServiceDate > 0 AND ChargeAmt > 0; 
	Claim:    => StateExclusionDate 				:= MAX (ProviderPatientsClaims.Prov, CurrentStateExclusionDate);
	Claim:    => PastStateExclusionBeginDate 		:= MAX (ProviderPatientsClaims.Prov, PastStateBeginExclusionDate); 
	Claim: 	  => ActiveStateExclusionDate 			:= IF (StateExclusionDate > 0, StateExclusionDate, INTEGERFROMDATE(ADJUSTCALENDAR(CURRENTDATE(),0,-6,0)));
	Claim:    => isStateExclusion 					:= ServiceDate > 0 AND ActiveStateExclusionDate > 0 AND ServiceDate > ActiveStateExclusionDate;
	Claim: 	  => OIGExclusionDate 					:= MAX (ProviderPatientsClaims.Prov, CurrentOIGExclusionDate);
	Claim: 	  => OIGBeginExclusionDate 				:= MAX (ProviderPatientsClaims.Prov, PastOIGBeginExclusionDate);
	Claim:    => ActiveOIGExclusionDate 			:= IF (OIGExclusionDate > 0, OIGExclusionDate, INTEGERFROMDATE(ADJUSTCALENDAR(CURRENTDATE(),0,-6,0)));
	Claim:    => isOIGExclusion 					:= ServiceDate > 0 AND ActiveOIGExclusionDate > 0 AND ServiceDate > ActiveOIGExclusionDate;
	Claim: 	  => OPMExclusionDate 					:= MAX (ProviderPatientsClaims.Prov, CurrentOPMExclusionDate);
	Claim: 	  => OPMBeginExclusionDate 				:= MAX (ProviderPatientsClaims.Prov, PastOPMBeginExclusionDate);	
	Claim: 	  => ActiveOPMExclusionDate 			:= IF (OPMExclusionDate > 0, OPMExclusionDate, INTEGERFROMDATE(ADJUSTCALENDAR(CURRENTDATE(),0,-6,0)));
	Claim:    => isOPMExclusion 					:= ServiceDate > 0 AND ActiveOPMExclusionDate > 0 AND ServiceDate > ActiveOPMExclusionDate;
	Claim: 	  => StateReinstatedDate 				:= MAX (ProviderPatientsClaims.Prov, PastStateExclusionDate);
	Claim:    => PastStateReinstatedDate 			:= IF (StateReinstatedDate > 0, INTEGERFROMDATE(ADJUSTCALENDAR(FROMSTRINGTODATE(INTFORMAT(StateReinstatedDate,8,1), '%%Y%%m%%d'),0,-6,0)),0);
	Claim: 	  => isPastStateExclusion 				:= IF (PastStateExclusionBeginDate > 0 AND StateReinstatedDate > 0 AND StateReinstatedDate > PastStateExclusionBeginDate , ServiceDate > 0 AND ServiceDate >= PastStateExclusionBeginDate AND ServiceDate <= StateReinstatedDate, ServiceDate > 0 AND PastStateReinstatedDate > 0 AND ServiceDate >= PastStateReinstatedDate AND ServiceDate <= StateReinstatedDate);
	Claim: 	  => OIGReinstatedDate 					:= MAX (ProviderPatientsClaims.Prov, PastOIGExclusionDate);
	Claim:    => PastOIGReinstatedDate 				:= IF (OIGReinstatedDate > 0, INTEGERFROMDATE(ADJUSTCALENDAR(FROMSTRINGTODATE(INTFORMAT(OIGReinstatedDate,8,1), '%%Y%%m%%d'),0,-6,0)),0);
	Claim: 	  => isPastOIGExclusion 				:= IF (OIGBeginExclusionDate > 0 AND OIGReinstatedDate > 0 AND OIGReinstatedDate > OIGBeginExclusionDate , ServiceDate > 0 AND ServiceDate >=  OIGBeginExclusionDate AND ServiceDate <= OIGReinstatedDate, ServiceDate > 0 AND PastOIGReinstatedDate > 0 AND ServiceDate >= PastOIGReinstatedDate AND ServiceDate <= OIGReinstatedDate);
	Claim: 	  => OPMReinstatedDate 					:= MAX (ProviderPatientsClaims.Prov, PastOPMExclusionDate);
	Claim: 	  => PastOPMReinstatedDate 				:= IF (OPMReinstatedDate > 0, INTEGERFROMDATE(ADJUSTCALENDAR(FROMSTRINGTODATE(INTFORMAT(OPMReinstatedDate,8,1), '%%Y%%m%%d'),0,-6,0)),0);
	Claim: 	  => isPastOPMExclusion 				:= IF (OPMBeginExclusionDate > 0 AND OPMReinstatedDate > 0 AND OPMReinstatedDate > 0 AND OPMBeginExclusionDate > 0, ServiceDate > 0 AND ServiceDate >=  OPMBeginExclusionDate AND ServiceDate <= OPMReinstatedDate, ServiceDate > 0 AND PastOPMReinstatedDate > 0 AND ServiceDate >=  PastOPMReinstatedDate AND ServiceDate <= OPMReinstatedDate);
	Claim: 	  => RevokedLicenseDate 				:= MAX (ProviderPatientsClaims.Prov, CurrentRevokedLicenseDate);
	Claim: 	  => RevokedBeginLicenseDate 			:= MAX (ProviderPatientsClaims.Prov, PastRevokedBeginLicenseDate);
	Claim: 	  => CurrentRevokedLicenseDate 			:= IF (RevokedLicenseDate > 0, INTEGERFROMDATE(FROMSTRINGTODATE(INTFORMAT(RevokedLicenseDate,8,1),'%%Y%%m%%d')),INTEGERFROMDATE(ADJUSTCALENDAR(CURRENTDATE(),0,-6,0)));
	Claim: 	  => isLicenseRevoked 					:= ServiceDate > 0 AND CurrentRevokedLicenseDate > 0  AND ServiceDate > CurrentRevokedLicenseDate;
	Claim: 	  => PriorRevokedLicenseDate 			:= MAX (ProviderPatientsClaims.Prov, PastRevokedLicenseDate);
	Claim: 	  => PastRevokedLicenseDate 			:= IF (PriorRevokedLicenseDate > 0, INTEGERFROMDATE(ADJUSTCALENDAR(FROMSTRINGTODATE(INTFORMAT(PriorRevokedLicenseDate,8,1),'%%Y%%m%%d'),0,-6,0)),0);
	Claim: 	  => isPastLicenseRevoked 				:= IF (RevokedBeginLicenseDate > 0 AND PriorRevokedLicenseDate > 0 AND PriorRevokedLicenseDate > RevokedBeginLicenseDate, ServiceDate > 0 AND ServiceDate >= RevokedBeginLicenseDate AND ServiceDate <= PriorRevokedLicenseDate, ServiceDate > 0 AND ServiceDate >=  PastRevokedLicenseDate AND ServiceDate <= PriorRevokedLicenseDate);
	Claim: 	  => LicExpiredDate 					:= MAX (ProviderPatientsClaims.Prov, INTEGERFROMDATE(LicenseExpiredDate)); 
	Claim: 	  => isLicenseExpired 					:= ServiceDate > 0 AND LicExpiredDate > 0 AND ServiceDate > LicExpiredDate;
	Claim: 	  => NPIDate 							:= MAX (ProviderPatientsClaims.Prov(NPIFlag = 'I'), NPIDeactivationDate);
	Claim: 	  => isNPIDeactive 						:= ServiceDate > 0 AND NPIDate > 0 AND ServiceDate > NPIDate;
	Claim:    => isDeceasedPatient 					:= ServiceDate > PatientDOD AND PatientDOD > 0 AND ServiceDate > 0 AND PaidAmt > 0;
	Claim: 	  => ProviderDeceasedDate 				:= MAX (ProviderClaims.Prov, DOD);
	Claim: 	  => isProviderDeceased 				:= ServiceDate > 0 AND ProviderDeceasedDate > 0 AND ServiceDate > ProviderDeceasedDate;
	Claim: 	  => BankruptcyDate 					:= MAX (ProviderPatientsClaims.Prov, ProvBankruptcyDate);
	Claim: 	  => isBankruptcy 						:= ServiceDate > 0 AND BankruptcyDate > 0 AND ServiceDate > BankruptcyDate;
	Claim: 	  => ConvictionDate 					:= MAX (ProviderPatientsClaims.Prov, ProvConvictionDate);
	Claim: 	  => isConviction 						:= ServiceDate > 0 AND ConvictionDate > 0 AND ServiceDate > ConvictionDate;
	
	Provider: => PatientDeceasedFlag				:= EXISTS(ProviderPatientsClaims(Prov=Provider.UID).Clm(isDeceasedPatient)) AND LNPID > 0; 	
	Provider: => DeceasedPatientDs					:= ProviderPatientsClaims(Prov=Provider.UID).Clm(isDeceasedPatient).ProviderPatientsClaims{Pat.PatientKey}; 
	Provider: => DeceasedPatient					:= DeceasedPatientDs{PatientKey};
	Provider: PatientDeceasedFlag					=> PatientDeceasedCount				:= COUNT(DeceasedPatient); 
	Provider: => ProviderDeceasedFlag				:= ProviderServiceDateMax > DOD;
	Provider: => ProviderNPIDeactivatedFlag 		:= ProviderServiceDateMax > NPIDeactivationDate AND ProviderHighChargeAmount > 0 AND NPIFlag = 'I' AND NPIDeactivationDate > 0;
	Provider: => Dea90Date							:= ADJUSTCALENDAR(DEADate,0,0,90);
	Provider: => LIC90Date							:= ADJUSTCALENDAR(LicenseExpiredDate,0,0,90);
	Provider: => ProviderDEADeactivatedFlag			:= ProviderServiceDateMax > INTEGERFROMDATE(Dea90Date) AND ProviderHighChargeAmount > 0;
	Provider: => ProviderLicenseExpiredFlag			:= ProviderServiceDateMax > INTEGERFROMDATE(LIC90Date) AND ProviderHighChargeAmount > 0 AND LicenseExpiredFlag = 'Y'; 	

	Address:  => AddressProviderCount 				:= COUNT(ProviderAddress);
	Address:  => AddressPatientCount				:= COUNT(PatientAddress);
	Address:  => AddressClaimCount					:= COUNT(AddressClaims.Clm);
	Address:  => AddressHighChargeAmount			:= SUM (AddressClaims.Clm, ChargeAmt);  
	Address:  => AddressHighPaidAmount				:= SUM (AddressClaims.Clm, PaidAmt);  
	Address:  => AddressServiceDateMin				:= MIN (AddressClaims.Clm, ServiceDate); 
	Address:  => AddressServiceDateMax				:= MAX (AddressClaims.Clm, ServiceDate); 
	Address:  => TotalNPICount						:= COUNT(ProviderAddress(Prov.EntityType = '1'));
	Address:  => NewNPI								:= ProviderAddress(Prov.LNPID > 0 AND Prov.EntityType = '1' AND MONTHSBETWEEN(Prov.NPIEnumerationDate, CURRENTDATE()) < 6);
	Address:  => NewNPICount						:= COUNT(NewNPI);

	ProviderAddress:  => isStudentNPI				:= SUBSTR(Prov.Taxonomy,1,2) = '39';
	Address:  => StudentNPICount					:= COUNT(ProviderAddress(Prov.EntityType = '1' AND Prov.LNPID > 0 AND isStudentNPI));
	Address:  => RecentNPIFlag						:= TotalNPICount > 0 AND TotalNPICount = NewNPICount;
	Address:  => StudentNPIFlag						:= TotalNPICount > 0 AND TotalNPICount = StudentNPICount;	
	Provider: => LNPIDCount							:= ProviderLNPIDPatients {PrimaryRange,PreDirectional,PrimaryName,AddressSuffix,PostDirectional,SecondaryRange,City,State,Zip,cnt:=COUNT(GROUP)};
	Provider: => LargePatientGroupFlag				:= EXISTS (LNPIDCount (cnt > 10)) AND LNPID > 0;
	Provider: => LargePatientGroupCount				:= MAX(LNPIDCount,cnt);
	Provider: => LNPIDCountAddress 					:= ONLY(TOPN(LNPIDCount,1,-cnt)(cnt > 10));
	Provider: => LargePatientGroupAddress			:= TRIMBOTH(LNPIDCountAddress.PrimaryRange)  + ' ' + TRIMBOTH(LNPIDCountAddress.PreDirectional) + ' ' + TRIMBOTH(LNPIDCountAddress.PrimaryName) + ' ' + 
                                                       TRIMBOTH(LNPIDCountAddress.AddressSuffix) + ' ' + TRIMBOTH(LNPIDCountAddress.PostDirectional) + ' ' + TRIMBOTH(LNPIDCountAddress.SecondaryRange) + ' ' + 
													   TRIMBOTH(LNPIDCountAddress.City) 		 + ' ' + TRIMBOTH(LNPIDCountAddress.State) + ' ' + TRIMBOTH(LNPIDCountAddress.Zip); 
	ProviderPatients: => PatientAddressFlag 		:=  Prov.LNPIDCountAddress.PrimaryRange = Pat.PrimaryRange AND 
													    Prov.LNPIDCountAddress.PreDirectional = Pat.PreDirectional AND
													    Prov.LNPIDCountAddress.PrimaryName = Pat.PrimaryName AND    
                                             		    Prov.LNPIDCountAddress.AddressSuffix = Pat.AddressSuffix AND 
														Prov.LNPIDCountAddress.PostDirectional = Pat.PostDirectional AND 
														Prov.LNPIDCountAddress.SecondaryRange = Pat.SecondaryRange AND 
														Prov.LNPIDCountAddress.City = Pat.City AND
														Prov.LNPIDCountAddress.State = Pat.State AND 
														Prov.LNPIDCountAddress.Zip = Pat.Zip;
	Provider: => ProviderPatientAddressDs 			:= ProviderPatients.Pat(PrimaryRange=Provider.PrimaryRange,PreDirectional = Provider.PreDirectional, PrimaryName <> '', PrimaryName = Provider.PrimaryName, 
                                                        AddressSuffix = Provider.AddressSuffix, PostDirectional = Provider.PostDirectional, SecondaryRange = Provider.SecondaryRange, 
                                                        City = Provider.City, State = Provider.State, Zip <> '', Zip = Provider.Zip);
	Provider: => ProviderPatientAddress 			:= ONLY(ProviderPatientAddressDs);
	Provider: => ProviderPatientSharedAddress 		:= TRIMBOTH(ProviderPatientAddress.PrimaryRange + ' ' + ProviderPatientAddress.PreDirectional + ' ' + ProviderPatientAddress.PrimaryName + ' ' + 
                                                        ProviderPatientAddress.AddressSuffix + ' ' + ProviderPatientAddress.PostDirectional + ' ' + ProviderPatientAddress.SecondaryRange + ' ' + 
                                                        ProviderPatientAddress.City + ' ' + ProviderPatientAddress.State + ' ' + ProviderPatientAddress.Zip);
	Provider: => ProviderPatientAddressCount		:= COUNT(ProviderPatients.Pat(PrimaryRange=Provider.PrimaryRange,PreDirectional = Provider.PreDirectional, PrimaryName <> '', PrimaryName = Provider.PrimaryName, 
                                                        AddressSuffix = Provider.AddressSuffix, PostDirectional = Provider.PostDirectional, SecondaryRange = Provider.SecondaryRange, 
                                                        City = Provider.City, State = Provider.State, Zip <> '', Zip = Provider.Zip));
	Provider: => ProviderPatientAddressFlag			:= EXISTS(ProviderPatientAddressDs) AND LNPID > 0;
	Provider: => VacationClaims						:= ProviderClaims(Clm.ServiceDate >= Prov.VacationBeginDate AND Clm.ServiceDate <= Prov.VacationEndDate);	
	Provider: => VacationChargeAmount				:= SUM (VacationClaims.Clm, ChargeAmt);
	Provider: => VacantAddrActivityFlag				:= EXISTS(VacationClaims) AND VacationChargeAmount > 0; 
	Provider: => DMEFlag							:= TRIM(ClientSpeciality) = '85'; //IN %GLOBAL.DMECODE%;
	Provider: => LABFlag							:= TRIM(ClientSpeciality) = '122'; //IN %GLOBAL.LABCODE%;
	Provider: NOT LNPID:Null => NoofAddress			:= COUNT(GROUP{LNPID}); 
	Provider: NOT LNPID:Null => LNPIDClaimCount		:= ProviderClaimCount$GROUP{LNPID}:Sum; 
	Provider: NOT LNPID:Null => LNPIDHighChargeAmount := ProviderHighChargeAmount$GROUP{LNPID}:Sum; 
	Provider: NOT LNPID:Null => LNPIDHighPaidAmount := ProviderHighPaidAmount$GROUP{LNPID}:Sum; 
	Provider: SingleAddressFlag = 'Y' => ClientSingleAddressFlag := IF (PrimaryRange 	= PractisePrimaryRange AND 
																		PreDirectional 	= PractisePreDirectional AND 
																		PrimaryName 	= PractisePrimaryName AND 
																		AddressSuffix 	= PractiseAddressSuffix AND 
																		PostDirectional = PractisePostDirectional AND 
																		SecondaryRange 	= PractiseSecondaryRange AND
																		City 			= PractiseCity AND 
																		State 			= PractiseState AND 
																		Zip 			= PractiseZip AND PrimaryName <> '' AND LNPID > 0, 'Y','N');
	Provider: => ClientSingleAddressCount := GROUP{PractisePrimaryRange, PractisePreDirectional, PractisePrimaryName, PractiseAddressSuffix, PractisePostDirectional, PractiseSecondaryRange, PractiseCity, PractiseState, PractiseZip}(ClientSingleAddressFlag = 'Y'):Count;
	ProviderPatients: 		 	=> LongDistance		:= 3963.3453 * ACOS (((1 + COS(0.01745 * (Prov.Long - Pat.Long))) * COS(0.01745 * (Prov.Lat - Pat.Lat)) -  (1 - COS(0.01745 * (Prov.Long - Pat.Long))) * COS(0.01745 * (Prov.Lat + Pat.Lat))) / 2);
	ProviderPatientsClaims: 	=> LongDistance		:= 3963.3453 * ACOS (((1 + COS(0.01745 * (Prov.Long - Pat.Long))) * COS(0.01745 * (Prov.Lat - Pat.Lat)) -  (1 - COS(0.01745 * (Prov.Long - Pat.Long))) * COS(0.01745 * (Prov.Lat + Pat.Lat))) / 2);
	FProviderPatientsClaims: 	=> LongDistance		:= 3963.3453 * ACOS (((1 + COS(0.01745 * (Prov.Long - Pat.Long))) * COS(0.01745 * (Prov.Lat - Pat.Lat)) -  (1 - COS(0.01745 * (Prov.Long - Pat.Long))) * COS(0.01745 * (Prov.Lat + Pat.Lat))) / 2);
	ProviderPatientsClaims: 	=> LNPID := Prov.LNPID; 
	GLOBAL: ProviderPatientsClaims(#1,#2,#3,#longdistance=LongDistance,#lnpid=LNPID) ,#longdistance >= %GLOBAL.DRIVINGDISTANCEMIN% AND #longdistance <= %GLOBAL.DRIVINGDISTANCEMAX% AND #lnpid > 0 => FProviderPatientsClaims  (#1, #2, #3.ServiceDate);
	Provider: => NoOfPatientDrivingLongDistance		:= COUNT (FProviderPatientsClaims(Provider.UID = Prov));
	Provider: => AveDistanceTravelled				:= AVE (ProviderPatients (Prov.ProviderKey <> '' AND Pat.PatientKey <> '' AND Prov.State <> '' AND Pat.State <> ''), LongDistance);

	Patient:  => PatientDeceasedImpactAmount 		:= ROUND(SUM (PatientClaims.Clm (isDeceasedPatient),  PaidAmt));
	Provider: => CurrentExclusionStateInd := CurrentExclusionState = State AND CurrentExclusionState <> '';
	Provider: => PastExclusionStateInd := PastExclusionState = State AND PastExclusionState <> '';
	Provider: => LicenseRevokedStateInd := LicenseRevokedState = State AND LicenseRevokedState <> '';
	Provider: => LicenseExpiredStateInd := LicenseExpiredState = State AND LicenseExpiredState <> '' AND LicenseExpiredFlag = 'Y';

	Provider: ActiveStateExclusionFlag = 'Y' AND CurrentExclusionStateInd AND %GLOBAL.ACTIVESTATEEXCLUSIONSWITCH% = 'Y' => ActiveStateExclusionImpactAmount 	:= ROUND(SUM (ProviderClaims.Clm (isStateExclusion),  PaidAmt));
	Provider: ActiveOIGExclusionFlag = 'Y' AND %GLOBAL.ACTIVEOIGEXCLUSIONSWITCH% = 'Y' => ActiveOIGExclusionImpactAmount := ROUND(SUM (ProviderClaims.Clm (isOIGExclusion),  PaidAmt));
	Provider: ActiveOPMExclusionFlag = 'Y' AND  %GLOBAL.ACTIVEOPMEXCLUSIONSWITCH% = 'Y' => ActiveOPMExclusionImpactAmount := ROUND(SUM (ProviderClaims.Clm (isOPMExclusion),  PaidAmt));
	Provider: PastStateExclusionFlag = 'Y'  AND %GLOBAL.PASTSTATEEXCLUSIONSWITCH% = 'Y' => PastStateExclusionImpactAmount 		:= ROUND(SUM (ProviderClaims.Clm (isPastStateExclusion),  PaidAmt));
	Provider: PastOIGExclusionFlag = 'Y' AND %GLOBAL.PASTOIGEXCLUSIONSWITCH% = 'Y'	 => PastOIGExclusionImpactAmount 		:= ROUND(SUM (ProviderClaims.Clm (isPastOIGExclusion),  PaidAmt));
	Provider: PastOPMExclusionFlag = 'Y' AND %GLOBAL.PASTOPMEXCLUSIONSWITCH% = 'Y'	 => PastOPMExclusionImpactAmount 		:= ROUND(SUM (ProviderClaims.Clm (isPastOPMExclusion),  PaidAmt));
	Provider: ActiveLicenseRevokedFlag = 'Y' AND LicenseRevokedStateInd AND %GLOBAL.ACTIVELICENSEREVOCATIONSWITCH% = 'Y' => CurrentLicenseRevokedImpactAmount 	:= ROUND(SUM (ProviderClaims.Clm (isLicenseRevoked),  PaidAmt));	
	Provider: PastLicenseRevokedFlag = 'Y' AND %GLOBAL.PASTLICENSEREVOCATIONSWITCH% = 'Y'   		=> PastLicenseRevokedImpactAmount 	:= ROUND(SUM (ProviderClaims.Clm (isPastLicenseRevoked),  PaidAmt));
	Provider: LicenseExpiredStateInd AND %GLOBAL.LICENSEEXPIREDSWITCH% = 'Y' 				=> LicenseExpiredImpactAmount 		:= ROUND(SUM (ProviderClaims.Clm (isLicenseExpired),  PaidAmt));
	Provider: %GLOBAL.NPIDEACTIVATEDSWITCH% = 'Y' => NPIDeactiveImpactAmount 			:= ROUND(SUM (ProviderClaims.Clm (isNPIDeactive),  PaidAmt));
	Provider: PatientDeceasedFlag AND %GLOBAL.DECEASEDPATIENTSSWITCH% = 'Y'					=> PatientDeceasedImpactAmount 		:= ROUND(SUM (ProviderPatientsClaims.Clm (isDeceasedPatient),  PaidAmt));
	Provider: %GLOBAL.DECEASEDSWITCH% = 'Y' => ProviderDeceasedImpactAmount 		:= ROUND(SUM (ProviderClaims.Clm (isProviderDeceased),  PaidAmt));
	Provider: %GLOBAL.BANKRUPTCYSWITCH% = 'Y' => BankruptcyImpactAmount 			:= ROUND(SUM (ProviderClaims.Clm (isBankruptcy),  PaidAmt));
	Provider: %GLOBAL.CRIMINALHISTORYSWITCH% = 'Y' => ConvictionImpactAmount 			:= ROUND(SUM (ProviderClaims.Clm (isConviction),  PaidAmt));

	Provider: ActiveStateExclusionFlag = 'Y' AND CurrentExclusionStateInd AND %GLOBAL.ACTIVESTATEEXCLUSIONSWITCH% = 'Y'		=> ActiveStateExclusionClaimCount 	:= COUNT(ProviderClaims.Clm (isStateExclusion));
	Provider: ActiveOIGExclusionFlag = 'Y' AND %GLOBAL.ACTIVEOIGEXCLUSIONSWITCH% = 'Y'		=> ActiveOIGExclusionClaimCount 	:= COUNT(ProviderClaims.Clm (isOIGExclusion));
	Provider: ActiveOPMExclusionFlag = 'Y' AND  %GLOBAL.ACTIVEOPMEXCLUSIONSWITCH% = 'Y'		=> ActiveOPMExclusionClaimCount 	:= COUNT(ProviderClaims.Clm (isOPMExclusion));
	Provider: PastStateExclusionFlag = 'Y' AND %GLOBAL.PASTSTATEEXCLUSIONSWITCH% = 'Y'		=> PastStateExclusionClaimCount 	:= COUNT(ProviderClaims.Clm (isPastStateExclusion));
	Provider: PastOIGExclusionFlag = 'Y' AND %GLOBAL.PASTOIGEXCLUSIONSWITCH% = 'Y'		=> PastOIGExclusionClaimCount 		:= COUNT(ProviderClaims.Clm (isPastOIGExclusion));
	Provider: PastOPMExclusionFlag = 'Y' AND %GLOBAL.PASTOPMEXCLUSIONSWITCH% = 'Y'		=> PastOPMExclusionClaimCount 		:= COUNT(ProviderClaims.Clm (isPastOPMExclusion));
	Provider: ActiveLicenseRevokedFlag = 'Y' AND LicenseRevokedStateInd AND %GLOBAL.ACTIVELICENSEREVOCATIONSWITCH% = 'Y'				=> CurrentLicenseRevokedClaimCount 	:= COUNT(ProviderClaims.Clm (isLicenseRevoked));
	Provider: PastLicenseRevokedFlag = 'Y' AND %GLOBAL.PASTLICENSEREVOCATIONSWITCH% = 'Y'		=> PastLicenseRevokedClaimCount 	:= COUNT(ProviderClaims.Clm (isPastLicenseRevoked));
	Provider: LicenseExpiredStateInd AND %GLOBAL.LICENSEEXPIREDSWITCH% = 'Y'			=> LicenseExpiredClaimCount 		:= COUNT(ProviderClaims.Clm (isLicenseExpired));
	Provider: %GLOBAL.NPIDEACTIVATEDSWITCH% = 'Y' => NPIDeactiveClaimCount 				:= COUNT(ProviderClaims.Clm (isNPIDeactive));
	Provider: PatientDeceasedFlag AND %GLOBAL.DECEASEDPATIENTSSWITCH% = 'Y'						=> PatientDeceasedClaimCount 			:= COUNT(ProviderPatientsClaims.Clm (isDeceasedPatient));
	Provider: %GLOBAL.DECEASEDSWITCH% = 'Y' => ProviderDeceasedClaimCount 		:= COUNT(ProviderClaims.Clm (isProviderDeceased));
	Provider: %GLOBAL.BANKRUPTCYSWITCH% = 'Y' => BankruptcyClaimCount 				:= COUNT(ProviderClaims.Clm (isBankruptcy));
	Provider: %GLOBAL.CRIMINALHISTORYSWITCH% = 'Y' => ConvictionClaimCount 				:= COUNT(ProviderClaims.Clm (isConviction));

	Address: %GLOBAL.ACTIVESTATEEXCLUSIONSWITCH% = 'Y' => AddressActiveStateExclusionImpactAmount 		:= ROUND(SUM (AddressClaims.Clm (isStateExclusion),  PaidAmt));
	Address: %GLOBAL.ACTIVESTATEEXCLUSIONSWITCH% = 'Y' => AddressActiveStateExclusionClaimCount 			:= COUNT (AddressClaims.Clm (isStateExclusion));
	Address: %GLOBAL.ACTIVEOIGEXCLUSIONSWITCH% = 'Y'   => AddressActiveOIGExclusionImpactAmount 			:= ROUND(SUM (AddressClaims.Clm (isOIGExclusion),  PaidAmt));
	Address: %GLOBAL.ACTIVEOIGEXCLUSIONSWITCH% = 'Y'   => AddressActiveOIGExclusionClaimCount 			:= COUNT(AddressClaims.Clm (isOIGExclusion));
	Address: %GLOBAL.ACTIVEOPMEXCLUSIONSWITCH% = 'Y'   => AddressActiveOPMExclusionImpactAmount 			:= ROUND(SUM (AddressClaims.Clm (isOPMExclusion),  PaidAmt));
	Address: %GLOBAL.ACTIVEOPMEXCLUSIONSWITCH% = 'Y'   => AddressActiveOPMExclusionClaimCount 			:= COUNT(AddressClaims.Clm (isOPMExclusion));
	Address: %GLOBAL.PASTSTATEEXCLUSIONSWITCH% = 'Y'   => AddressPastStateExclusionImpactAmount 			:= ROUND(SUM (AddressClaims.Clm (isPastStateExclusion),  PaidAmt));
	Address: %GLOBAL.PASTSTATEEXCLUSIONSWITCH% = 'Y'   => AddressPastStateExclusionClaimCount 			:= COUNT(AddressClaims.Clm (isPastStateExclusion));
	Address: %GLOBAL.PASTOIGEXCLUSIONSWITCH% = 'Y'     => AddressPastOIGExclusionImpactAmount 			:= ROUND(SUM (AddressClaims.Clm (isPastOIGExclusion),  PaidAmt));
	Address: %GLOBAL.PASTOIGEXCLUSIONSWITCH% = 'Y'     => AddressPastOIGExclusionClaimCount 				:= COUNT(AddressClaims.Clm (isPastOIGExclusion));
	Address: %GLOBAL.PASTOPMEXCLUSIONSWITCH% = 'Y'     => AddressPastOPMExclusionImpactAmount		 		:= ROUND(SUM (AddressClaims.Clm (isPastOPMExclusion),  PaidAmt));
	Address: %GLOBAL.PASTOPMEXCLUSIONSWITCH% = 'Y'     => AddressPastOPMExclusionClaimCount 				:= COUNT(AddressClaims.Clm (isPastOPMExclusion));
	Address: %GLOBAL.ACTIVELICENSEREVOCATIONSWITCH% = 'Y'  => AddressCurrentLicenseRevokedImpactAmount 		:= ROUND(SUM (AddressClaims.Clm (isLicenseRevoked),  PaidAmt));
	Address: %GLOBAL.ACTIVELICENSEREVOCATIONSWITCH% = 'Y'  => AddressCurrentLicenseRevokedClaimCount 	 		:= COUNT(AddressClaims.Clm (isLicenseRevoked));
	Address: %GLOBAL.PASTLICENSEREVOCATIONSWITCH% = 'Y'    => AddressPastLicenseRevokedImpactAmount 			:= ROUND(SUM (AddressClaims.Clm (isPastLicenseRevoked),  PaidAmt));
	Address: %GLOBAL.PASTLICENSEREVOCATIONSWITCH% = 'Y'    => AddressPastLicenseRevokedClaimCount				:= COUNT(AddressClaims.Clm (isPastLicenseRevoked));
	Address: %GLOBAL.LICENSEEXPIREDSWITCH% = 'Y'           => AddressLicenseExpiredImpactAmount 				:= ROUND(SUM (AddressClaims.Clm (isLicenseExpired),  PaidAmt));
	Address: %GLOBAL.LICENSEEXPIREDSWITCH% = 'Y'           => AddressLicenseExpiredClaimCount 				:= COUNT(AddressClaims.Clm (isLicenseExpired));	
	Address: %GLOBAL.NPIDEACTIVATEDSWITCH% = 'Y'           => AddressNPIDeactiveImpactAmount 					:= ROUND(SUM (AddressClaims.Clm (isNPIDeactive),  PaidAmt));
	Address: %GLOBAL.NPIDEACTIVATEDSWITCH% = 'Y'           => AddressNPIDeactiveClaimCount 					:= COUNT(AddressClaims.Clm (isNPIDeactive));

	Provider: => AddressActiveStateExclusionImpactAmount 	:= SUM (GROUP {PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, ActiveStateExclusionImpactAmount);
	Provider: => AddressActiveOIGExclusionImpactAmount 		:= SUM (GROUP {PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, ActiveOIGExclusionImpactAmount);
	Provider: => AddressActiveOPMExclusionImpactAmount 		:= SUM (GROUP {PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, ActiveOPMExclusionImpactAmount);
	Provider: => AddressPastStateExclusionImpactAmount 		:= SUM (GROUP {PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, PastStateExclusionImpactAmount);
	Provider: => AddressPastOIGExclusionImpactAmount 		:= SUM (GROUP {PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, PastOIGExclusionImpactAmount);
	Provider: => AddressPastOPMExclusionImpactAmount 		:= SUM (GROUP {PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, PastOPMExclusionImpactAmount);
	Provider: => AddressCurrentLicenseRevokedImpactAmount	:= SUM (GROUP {PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, CurrentLicenseRevokedImpactAmount);
	Provider: => AddressPastLicenseRevokedImpactAmount 		:= SUM (GROUP {PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, PastLicenseRevokedImpactAmount);
	Provider: => AddressLicenseExpiredImpactAmount 			:= SUM (GROUP {PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, LicenseExpiredImpactAmount);
	Provider: => AddressNPIDeactiveImpactAmount 			:= SUM (GROUP {PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, NPIDeactiveImpactAmount);
	Provider: => AddressPatientDeceasedImpactAmount 		:= SUM (GROUP {PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, PatientDeceasedImpactAmount);
	Provider: => AddressProviderDeceasedImpactAmount 		:= SUM (GROUP {PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, ProviderDeceasedImpactAmount);
	Provider: => AddressBankruptcyImpactAmount 				:= SUM (GROUP {PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, BankruptcyImpactAmount);
	Provider: => AddressConvictionImpactAmount 				:= SUM (GROUP {PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, ConvictionImpactAmount);
	
	Provider: => AddressActiveStateExclusionClaimCount 	:= SUM (GROUP {PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, ActiveStateExclusionClaimCount);
	Provider: => AddressActiveOIGExclusionClaimCount 	:= SUM (GROUP {PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, ActiveOIGExclusionClaimCount);
	Provider: => AddressActiveOPMExclusionClaimCount 	:= SUM (GROUP {PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, ActiveOPMExclusionClaimCount);
	Provider: => AddressPastStateExclusionClaimCount 	:= SUM (GROUP {PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, PastStateExclusionClaimCount);
	Provider: => AddressPastOIGExclusionClaimCount 		:= SUM (GROUP {PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, PastOIGExclusionClaimCount);
	Provider: => AddressPastOPMExclusionClaimCount 		:= SUM (GROUP {PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, PastOPMExclusionClaimCount);
	Provider: => AddressCurrentLicenseRevokedClaimCount := SUM (GROUP {PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, CurrentLicenseRevokedClaimCount);
	Provider: => AddressPastLicenseRevokedClaimCount 	:= SUM (GROUP {PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, PastLicenseRevokedClaimCount);
	Provider: => AddressLicenseExpiredClaimCount 		:= SUM (GROUP {PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, LicenseExpiredClaimCount);
	Provider: => AddressNPIDeactiveClaimCount 			:= SUM (GROUP {PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, NPIDeactiveClaimCount);
	Provider: => AddressPatientDeceasedClaimCount 		:= SUM (GROUP {PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, PatientDeceasedClaimCount);
	Provider: => AddressProviderDeceasedClaimCount 		:= SUM (GROUP {PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, ProviderDeceasedClaimCount);
	Provider: => AddressBankruptcyClaimCount 			:= SUM (GROUP {PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, BankruptcyClaimCount);
	Provider: => AddressConvictionClaimCount 			:= SUM (GROUP {PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, ConvictionClaimCount);
	Provider: => ProviderImpactAmount					:= MAX (ActiveStateExclusionImpactAmount, ActiveOIGExclusionImpactAmount, ActiveOPMExclusionImpactAmount, CurrentLicenseRevokedImpactAmount, LicenseExpiredImpactAmount, NPIDeactiveImpactAmount, PatientDeceasedImpactAmount, ProviderDeceasedImpactAmount);	
	Provider: => ProviderImpactClaimCount				:= MAX (ActiveStateExclusionClaimCount, ActiveOIGExclusionClaimCount, ActiveOPMExclusionClaimCount, CurrentLicenseRevokedClaimCount, LicenseExpiredClaimCount, NPIDeactiveClaimCount, PatientDeceasedClaimCount, ProviderDeceasedClaimCount);			
	Provider:  => AddressImpactAmount					:= MAX (AddressActiveStateExclusionImpactAmount, AddressActiveOIGExclusionImpactAmount, AddressActiveOPMExclusionImpactAmount, AddressCurrentLicenseRevokedImpactAmount, AddressLicenseExpiredImpactAmount, AddressNPIDeactiveImpactAmount, AddressPatientDeceasedImpactAmount, AddressProviderDeceasedImpactAmount);
	Provider:  => AddressImpactClaimCount				:= MAX (AddressActiveStateExclusionClaimCount, AddressActiveOIGExclusionClaimCount, AddressActiveOPMExclusionClaimCount, AddressCurrentLicenseRevokedClaimCount, AddressLicenseExpiredClaimCount, AddressNPIDeactiveClaimCount, AddressPatientDeceasedClaimCount, AddressProviderDeceasedClaimCount);	

	Provider: NOT LNPID:Null => LNPIDImpactClaimCount 	:= ProviderImpactClaimCount$GROUP{LNPID}:Sum; 
	Provider: NOT LNPID:Null => LNPIDImpactAmount		:= ROUND(ProviderImpactAmount$GROUP{LNPID}:Sum); 

	Provider: => ProviderImpactRange := MAP (ProviderImpactAmount = 0 => 0,
											ProviderImpactAmount > %GLOBAL.IMPACTRANGE01MIN% AND ProviderImpactAmount <= %GLOBAL.IMPACTRANGE01MAX% => 1, 
										  	ProviderImpactAmount > %GLOBAL.IMPACTRANGE02MIN% AND ProviderImpactAmount <= %GLOBAL.IMPACTRANGE02MAX% => 2, 
										  	ProviderImpactAmount > %GLOBAL.IMPACTRANGE03MIN% AND ProviderImpactAmount <= %GLOBAL.IMPACTRANGE03MAX% => 3, 										  
										  	ProviderImpactAmount > %GLOBAL.IMPACTRANGE04MIN% AND ProviderImpactAmount <= %GLOBAL.IMPACTRANGE04MAX% => 4, 
										  	ProviderImpactAmount > %GLOBAL.IMPACTRANGE05MIN% AND ProviderImpactAmount <= %GLOBAL.IMPACTRANGE05MAX% => 5, 										  										  
										  	ProviderImpactAmount > %GLOBAL.IMPACTRANGE06MIN% AND ProviderImpactAmount <= %GLOBAL.IMPACTRANGE06MAX% => 6, 
										  	ProviderImpactAmount > %GLOBAL.IMPACTRANGE07MIN% AND ProviderImpactAmount <= %GLOBAL.IMPACTRANGE07MAX% => 7, 
										  	ProviderImpactAmount > %GLOBAL.IMPACTRANGE08MIN% AND ProviderImpactAmount <= %GLOBAL.IMPACTRANGE08MAX% => 8, 
										  	ProviderImpactAmount > %GLOBAL.IMPACTRANGE09MIN% AND ProviderImpactAmount <= %GLOBAL.IMPACTRANGE09MAX% => 9, 
										  	ProviderImpactAmount > %GLOBAL.IMPACTRANGE10MIN%													   => 10);

	Provider: ProviderImpactAmount > 0 => ProviderImpactMAXAmount	:= ROUND(ProviderImpactAmount$^Max);
	Provider: ProviderImpactAmount > 0 => ProviderImpactPercent 	:= ROUND((100 * ProviderImpactAmount) / ProviderImpactMAXAmount);

	QUERY: ProviderDistance   				 <= ProviderPatients (Prov.ProviderKey <> '' AND Pat.PatientKey <> '' AND Prov.State <> '' AND Pat.State <> '') {Prov.ProviderKey, Prov.LNPID, Pat.PatientKey, Prov.ProviderPatientCount, Prov.Speciality, Prov.State, Pat.State, Prov.Lat, Prov.Long, Pat.Lat, Pat.Long , Distance := 3963.3453 * ACOS (((1 + COS(0.01745 * (Prov.Long - Pat.Long))) * COS(0.01745 * (Prov.Lat - Pat.Lat)) -  (1 - COS(0.01745 * (Prov.Long - Pat.Long))) * COS(0.01745 * (Prov.Lat + Pat.Lat))) / 2)};
	QUERY: ClaimStats 		  				 <= Provider  {ProviderKey, LNPID, PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip, Speciality, ClientSpeciality, ProviderClaimCount, ProviderPatientCount, PatientDeceasedCount, ProviderHighChargeAmount, ProviderHighPaidAmount, ProviderHighPaidAmountPerClaim, ProviderHighPaidAmountPerPatient, ProviderServiceDateMin, ProviderServiceDateMax, ExcludeAddressFlag := IF(ExcludeAddressFlag, 'Y', 'N'), PatientDeceasedFlag := IF(PatientDeceasedFlag, 'Y', 'N'), ProviderNPIDeactivatedFlag := IF(ProviderNPIDeactivatedFlag,'Y','N'), ProviderDEADeactivatedFlag := IF (ProviderDEADeactivatedFlag, 'Y','N') , ProviderPatientAddressCount, ProviderPatientAddressFlag := IF(ProviderPatientAddressFlag, 'Y', 'N'), AddressProviderCount := ProviderAddress.Addr.AddressProviderCount, AddressPatientCount := ProviderAddress.Addr.AddressPatientCount, AddressClaimCount := ProviderAddress.Addr.AddressClaimCount, AddressHighChargeAmount := ProviderAddress.Addr.AddressHighChargeAmount, AddressHighPaidAmount := ProviderAddress.Addr.AddressHighPaidAmount, AddressServiceDateMin := ProviderAddress.Addr.AddressServiceDateMin, AddressServiceDateMax := ProviderAddress.Addr.AddressServiceDateMax, TotalNPICount := ProviderAddress.Addr.TotalNPICount, RecentNPICount := ProviderAddress.Addr.NewNPICount, StudentNPICount := ProviderAddress.Addr.StudentNPICount, RecentNPIFlag := IF(ProviderAddress.Addr.RecentNPIFlag, 'Y','N'), StudentNPIFlag := IF(ProviderAddress.Addr.StudentNPIFlag, 'Y','N'), LargePatientGroupCount, LargePatientGroupFlag := IF(LargePatientGroupFlag, 'Y','N'), VacantAddressActivityFlag := IF (VacantAddrActivityFlag, 'Y','N'), DMEFlag := IF(DMEFlag,'Y','N'), LABFlag := IF(LABFlag, 'Y','N'), NoofAddress, LNPIDClaimCount, LNPIDHighChargeAmount, LNPIDHighPaidAmount, NoOfPatientDrivingLongDistance, AveDistanceTravelled, PatientDOD, ProviderPatientSharedAddress, LargePatientGroupAddress, ProviderDeceasedFlag := IF(ProviderDeceasedFlag,'Y','N'), ProviderLicenseExpiredFlag := IF (ProviderLicenseExpiredFlag, 'Y','N'), ActiveStateExclusionImpactAmount, ActiveOIGExclusionImpactAmount, ActiveOPMExclusionImpactAmount, PastStateExclusionImpactAmount, PastOIGExclusionImpactAmount, PastOPMExclusionImpactAmount, CurrentLicenseRevokedImpactAmount, PastLicenseRevokedImpactAmount, LicenseExpiredImpactAmount, NPIDeactiveImpactAmount, PatientDeceasedImpactAmount, ProviderDeceasedImpactAmount, BankruptcyImpactAmount, ConvictionImpactAmount, ActiveStateExclusionClaimCount, ActiveOIGExclusionClaimCount, ActiveOPMExclusionClaimCount, PastStateExclusionClaimCount, PastOIGExclusionClaimCount, PastOPMExclusionClaimCount, CurrentLicenseRevokedClaimCount, PastLicenseRevokedClaimCount, LicenseExpiredClaimCount, NPIDeactiveClaimCount, PatientDeceasedClaimCount, ProviderDeceasedClaimCount, BankruptcyClaimCount, ConvictionClaimCount, ProviderImpactAmount, ProviderImpactClaimCount, AddressImpactAmount, AddressImpactClaimCount,  AddressActiveStateExclusionImpactAmount, AddressActiveOIGExclusionImpactAmount, AddressActiveOPMExclusionImpactAmount, AddressPastStateExclusionImpactAmount, AddressPastOIGExclusionImpactAmount, AddressPastOPMExclusionImpactAmount, AddressCurrentLicenseRevokedImpactAmount, AddressPastLicenseRevokedImpactAmount, AddressLicenseExpiredImpactAmount, AddressNPIDeactiveImpactAmount, AddressPatientDeceasedImpactAmount, AddressProviderDeceasedImpactAmount, AddressBankruptcyImpactAmount, AddressConvictionImpactAmount, LNPIDImpactAmount, LNPIDImpactClaimCount, ProviderImpactRange, ProviderImpactPercent, ClientSingleAddressCount, ClientSingleAddressFlag};
	QUERY: TreatingDeceasedPatientReport 	 <= ProviderPatientsClaims.Clm ((isDeceasedPatient)) {ProviderKey := ProviderPatientsClaims.Prov.ProviderKey, Transaction := UID, PatientKey, LName:= ProviderPatientsClaims.Pat.LName, FName := ProviderPatientsClaims.Pat.FName, MName := ProviderPatientsClaims.Pat.MName, PatientDateOfDeath := ProviderPatientsClaims.Pat.PatientDateOfDeath, PatientPaidAmount := ProviderPatientsClaims.Clm.PaidAmt, PatientClaimCount := ProviderPatientsClaims.Clm:Weight} {ProviderKey, PatientKey, LName, FName, MName, PatientDateOfDeath, ImpactAmount := ROUND(SUM(GROUP, PatientPaidAmount)), ClaimCount := SUM(GROUP, PatientClaimCount)};
	QUERY: PatientLivingSameAddressReport 	 <= ProviderPatients (ProviderPatients.Prov.LargePatientGroupFlag) {ProviderKey := ProviderPatients.Prov.ProviderKey, PatientKey := ProviderPatients.Pat.PatientKey, LName := ProviderPatients.Pat.LName, FName := ProviderPatients.Pat.FName, MName := ProviderPatients.Pat.MName, PrimaryRange := ProviderPatients.Pat.PrimaryRange, PrimaryName := ProviderPatients.Pat.PrimaryName, Zip := ProviderPatients.Pat.Zip};
	QUERY: FlagDistanceReport 				 <= FProviderPatientsClaims {ProviderKey := FProviderPatientsClaims.Prov.ProviderKey, PatientKey := FProviderPatientsClaims.Pat.PatientKey, LName := FProviderPatientsClaims.Pat.LName, FName := FProviderPatientsClaims.Pat.FName, MName := FProviderPatientsClaims.Pat.MName, LongDistance, NoOfVisits := COUNT(GROUP), AddrLine1 := TRIMBOTH (FProviderPatientsClaims.Pat.PrimaryRange) + ' ' + TRIMBOTH (FProviderPatientsClaims.Pat.PreDirectional) + ' ' +  TRIMBOTH (FProviderPatientsClaims.Pat.PrimaryName) + ' ' + TRIMBOTH (FProviderPatientsClaims.Pat.AddressSuffix) + ' ' +	TRIMBOTH (FProviderPatientsClaims.Pat.PostDirectional), City := FProviderPatientsClaims.Pat.City, State := FProviderPatientsClaims.Pat.State, Zip := FProviderPatientsClaims.Pat.Zip};
	QUERY: ProviderMatchPatientAddressReport <= Provider ((ProviderPatientAddressFlag)) {ProviderKey, PatientKey := ProviderPatientAddressDs.PatientKey, LName := ProviderPatientAddressDs.LName, FName := ProviderPatientAddressDs.FName, MName := ProviderPatientAddressDs.MName};	
	QUERY: SingleAddressReport 				 <= Provider (SingleAddressFlag = 'Y' AND ClientSingleAddressFlag = 'Y' AND LNPID > 0) {ProviderKey, LName, FName, MName, PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip};

ENDGENERATES

RESOURCES
    LOGICALFILE testinput:FILENAME("~qa::appendclaimoutlier::appendclaimoutlier21::provider::input"), URL("http://10.173.10.157:8010"), DALIIP("10.173.10.157"), CLUSTER("thor100_100cert");
    LOGICALFILE testinput:FILENAME("~qa::appendclaimoutlier::appendclaimoutlier21::patient::input"), URL("http://10.173.10.157:8010"), DALIIP("10.173.10.157"), CLUSTER("thor100_100cert");
    LOGICALFILE testinput:FILENAME("~qa::appendclaimoutlier::appendclaimoutlier21::medicalclaim::input"), URL("http://10.173.10.157:8010"), DALIIP("10.173.10.157"), CLUSTER("thor100_100cert");
    LOGICALFILE testinput:FILENAME("~qa::appendclaimoutlier::appendclaimoutlier::exclusionlist::input"), URL("http://10.173.10.157:8010"), DALIIP("10.173.10.157"), CLUSTER("thor100_100cert");
    ECL AppendOutlierIndicator:FILENAME("AppendOutlierIndicator"), URL("http://10.173.10.153:8010");
    ECL HealthCare:FILENAME("HealthCare"), URL("http://10.173.10.153:8010");
    FILE ReadMe: FILENAME("AppendClaimOutlier_2.1_ReadMe.txt"),LABEL("Plugin Readme File");
    FILE AppendClaimOutlier_testcmp: FILENAME("AppendClaimOutlier_2.1_testcmp.txt"),LABEL("Plugin Test Composition");
    FILE AppendClaimOutlier_BuildTestDataset: FILENAME("AppendClaimOutlier_2.1_BuildTestDataset.ecl"),LABEL("BWR to create data for test composition");
    FILE AppendClaimOutlierChecklist: FILENAME("AppendClaimOutlierChecklist.xlsx"),LABEL("Checklist");
    FILE AppendClaimOutlier_TestHarness: FILENAME("AppendClaimOutlier_2.1_TestHarness.txt"),LABEL("Test Harness");
END