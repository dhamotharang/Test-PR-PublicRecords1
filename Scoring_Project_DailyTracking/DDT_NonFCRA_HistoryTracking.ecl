EXPORT DDT_NonFCRA_HistoryTracking(DS_DOPS) := FunctionMacro

import Scoring_Project_DailyTracking, std;

NonFCRA_qa_ddt_ds := DS_DOPS(cluster = 'N');

// output(NonFCRA_qa_ddt_ds, named('soap_result_NonFCRA_filtered'));
// output(count(NonFCRA_qa_ddt_ds), named('count_soap_result_NonFCRA_filtered'));


		date_form(string rel_date) := function
				a := Stringlib.StringFind(rel_date, '/', 1);
				b := Stringlib.StringFind(rel_date, '/', 2);
				c := b + 4;
				mo := intformat((integer)rel_date[1..(a-1)], 2, 1);
				dom := intformat((integer)rel_date[(a+1)..(b-1)], 2, 1);
				yr := intformat((integer)rel_date[(b+1)..c], 4, 1);
				return yr + mo + dom;
		end;

	NewLay := record
			Scoring_Project_DailyTracking.Attributes.ddt_layout;
			string newdate;
			string newtime;
	end;

newlay newtrans1(NonFCRA_qa_ddt_ds le) := Transform
	Self.newdate := date_form(le.releasedate);
	Self.newtime := trim(le.releasedate[(Stringlib.StringFind(le.releasedate, '/', 2)+5)..], left, right);
	Self := le;
END;

trans_NonFCRA_qa_ddt_ds := project(NonFCRA_qa_ddt_ds, newtrans1(left));
// output(trans_NonFCRA_qa_ddt_ds, named('trans_NonFCRA_Cert_newest_update'));


today := (String8)std.date.today();
yesterday := (string8)std.date.adjustdate((integer)today, 0, 0, -1);

// output(today, named('today'));
// output(yesterday, named('yesterday'));

NonFCRAMasterLay := Scoring_Project_DailyTracking.DDT_Master_NonFCRA_Layout.DDT_Master_Layout;

NonFCRAMasterLay Mastertrans(trans_NonFCRA_qa_ddt_ds le) := Transform
	Self.Date := yesterday;
	self.ABIKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'ABIKeys', le.buildversion,'');
	self.ABIKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'ABIKeys', le.newtime,'');
	self.ABMSKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'ABMSKeys', le.buildversion,'');
	self.ABMSKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'ABMSKeys', le.newtime,'');
	self.ACAInstitutionsKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'ACAInstitutionsKeys', le.buildversion,'');
	self.ACAInstitutionsKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'ACAInstitutionsKeys', le.newtime,'');
	self.AccidentStateResKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'AccidentStateResKeys', le.buildversion,'');
	self.AccidentStateResKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'AccidentStateResKeys', le.newtime,'');
	self.AddressFeedbackKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'AddressFeedbackKeys', le.buildversion,'');
	self.AddressFeedbackKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'AddressFeedbackKeys', le.newtime,'');
	self.AddressHRIKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'AddressHRIKeys', le.buildversion,'');
	self.AddressHRIKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'AddressHRIKeys', le.newtime,'');
	self.AddressLineAIDKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'AddressLineAIDKeys', le.buildversion,'');
	self.AddressLineAIDKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'AddressLineAIDKeys', le.newtime,'');
	self.AddressRawAIDKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'AddressRawAIDKeys', le.buildversion,'');
	self.AddressRawAIDKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'AddressRawAIDKeys', le.newtime,'');
	self.AlloyKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'AlloyKeys', le.buildversion,'');
	self.AlloyKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'AlloyKeys', le.newtime,'');
	self.AmericanstudentKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'AmericanstudentKeys', le.buildversion,'');
	self.AmericanstudentKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'AmericanstudentKeys', le.newtime,'');
	self.AMIDIR_Keys_Version := if(le.newdate = yesterday AND le.datasetname = 'AMIDIR_Keys', le.buildversion,'');
	self.AMIDIR_Keys_Updated := if(le.newdate = yesterday AND le.datasetname = 'AMIDIR_Keys', le.newtime,'');
	self.AMSKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'AMSKeys', le.buildversion,'');
	self.AMSKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'AMSKeys', le.newtime,'');
	self.AreaCodeChangeKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'AreaCodeChangeKeys', le.buildversion,'');
	self.AreaCodeChangeKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'AreaCodeChangeKeys', le.newtime,'');
	self.ATFKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'ATFKeys', le.buildversion,'');
	self.ATFKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'ATFKeys', le.newtime,'');
	self.AVMV2Keys_Version := if(le.newdate = yesterday AND le.datasetname = 'AVMV2Keys', le.buildversion,'');
	self.AVMV2Keys_Updated := if(le.newdate = yesterday AND le.datasetname = 'AVMV2Keys', le.newtime,'');
	self.BadAddressesKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'BadAddressesKeys', le.buildversion,'');
	self.BadAddressesKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'BadAddressesKeys', le.newtime,'');
	self.BankRTNKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'BankRTNKeys', le.buildversion,'');
	self.BankRTNKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'BankRTNKeys', le.newtime,'');
	self.BankruptcyV2Keys_Version := if(le.newdate = yesterday AND le.datasetname = 'BankruptcyV2Keys', le.buildversion,'');
	self.BankruptcyV2Keys_Updated := if(le.newdate = yesterday AND le.datasetname = 'BankruptcyV2Keys', le.newtime,'');
	self.BBBKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'BBBKeys', le.buildversion,'');
	self.BBBKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'BBBKeys', le.newtime,'');
	self.BipV2FullKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'BipV2FullKeys', le.buildversion,'');
	self.BipV2FullKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'BipV2FullKeys', le.newtime,'');
	self.BipV2SuppressionKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'BipV2SuppressionKeys', le.buildversion,'');
	self.BipV2SuppressionKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'BipV2SuppressionKeys', le.newtime,'');
	self.BipV2WAFKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'BipV2WAFKeys', le.buildversion,'');
	self.BipV2WAFKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'BipV2WAFKeys', le.newtime,'');
	self.BIPV2WeeklyKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'BIPV2WeeklyKeys', le.buildversion,'');
	self.BIPV2WeeklyKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'BIPV2WeeklyKeys', le.newtime,'');
	self.BKCourtKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'BKCourtKeys', le.buildversion,'');
	self.BKCourtKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'BKCourtKeys', le.newtime,'');
	self.BKEventsKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'BKEventsKeys', le.buildversion,'');
	self.BKEventsKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'BKEventsKeys', le.newtime,'');
	self.BusinessBestKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'BusinessBestKeys', le.buildversion,'');
	self.BusinessBestKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'BusinessBestKeys', le.newtime,'');
	self.BusinessHeaderKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'BusinessHeaderKeys', le.buildversion,'');
	self.BusinessHeaderKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'BusinessHeaderKeys', le.newtime,'');
	self.BusinessRegKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'BusinessRegKeys', le.buildversion,'');
	self.BusinessRegKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'BusinessRegKeys', le.newtime,'');
	self.CalbusKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'CalbusKeys', le.buildversion,'');
	self.CalbusKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'CalbusKeys', le.newtime,'');
	self.CanadianPhonesKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'CanadianPhonesKeys', le.buildversion,'');
	self.CanadianPhonesKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'CanadianPhonesKeys', le.newtime,'');
	self.CanadianPhonesV2Keys_Version := if(le.newdate = yesterday AND le.datasetname = 'CanadianPhonesV2Keys', le.buildversion,'');
	self.CanadianPhonesV2Keys_Updated := if(le.newdate = yesterday AND le.datasetname = 'CanadianPhonesV2Keys', le.newtime,'');
	self.CaseConnectKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'CaseConnectKeys', le.buildversion,'');
	self.CaseConnectKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'CaseConnectKeys', le.newtime,'');
	self.CDSKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'CDSKeys', le.buildversion,'');
	self.CDSKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'CDSKeys', le.newtime,'');
	self.CertegyKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'CertegyKeys', le.buildversion,'');
	self.CertegyKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'CertegyKeys', le.newtime,'');
	self.CityStZipKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'CityStZipKeys', le.buildversion,'');
	self.CityStZipKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'CityStZipKeys', le.newtime,'');
	self.CivilCourtKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'CivilCourtKeys', le.buildversion,'');
	self.CivilCourtKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'CivilCourtKeys', le.newtime,'');
	self.CLIAKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'CLIAKeys', le.buildversion,'');
	self.CLIAKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'CLIAKeys', le.newtime,'');
	self.CNLDFacilitiesKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'CNLDFacilitiesKeys', le.buildversion,'');
	self.CNLDFacilitiesKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'CNLDFacilitiesKeys', le.newtime,'');
	self.CNLDPractitionerKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'CNLDPractitionerKeys', le.buildversion,'');
	self.CNLDPractitionerKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'CNLDPractitionerKeys', le.newtime,'');
	self.CodesV3Keys_Version := if(le.newdate = yesterday AND le.datasetname = 'CodesV3Keys', le.buildversion,'');
	self.CodesV3Keys_Updated := if(le.newdate = yesterday AND le.datasetname = 'CodesV3Keys', le.newtime,'');
	self.CompIDKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'CompIDKeys', le.buildversion,'');
	self.CompIDKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'CompIDKeys', le.newtime,'');
	self.ConsumerStatementKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'ConsumerStatementKeys', le.buildversion,'');
	self.ConsumerStatementKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'ConsumerStatementKeys', le.newtime,'');
	self.Corp2Keys_Version := if(le.newdate = yesterday AND le.datasetname = 'Corp2Keys', le.buildversion,'');
	self.Corp2Keys_Updated := if(le.newdate = yesterday AND le.datasetname = 'Corp2Keys', le.newtime,'');
	self.CorteraKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'CorteraKeys', le.buildversion,'');
	self.CorteraKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'CorteraKeys', le.newtime,'');
	self.CorteraTradelineKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'CorteraTradelineKeys', le.buildversion,'');
	self.CorteraTradelineKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'CorteraTradelineKeys', le.newtime,'');
	self.CountyKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'CountyKeys', le.buildversion,'');
	self.CountyKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'CountyKeys', le.newtime,'');
	self.CourtLocatorLookupKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'CourtLocatorLookupKeys', le.buildversion,'');
	self.CourtLocatorLookupKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'CourtLocatorLookupKeys', le.newtime,'');
	self.CourtSearchKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'CourtSearchKeys', le.buildversion,'');
	self.CourtSearchKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'CourtSearchKeys', le.newtime,'');
	self.CrashCarrierKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'CrashCarrierKeys', le.buildversion,'');
	self.CrashCarrierKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'CrashCarrierKeys', le.newtime,'');
	self.CustomBankTransactionKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'CustomBankTransactionKeys', le.buildversion,'');
	self.CustomBankTransactionKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'CustomBankTransactionKeys', le.newtime,'');
	self.DCAKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'DCAKeys', le.buildversion,'');
	self.DCAKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'DCAKeys', le.newtime,'');
	self.DEADCOKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'DEADCOKeys', le.buildversion,'');
	self.DEADCOKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'DEADCOKeys', le.newtime,'');
	self.DEAKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'DEAKeys', le.buildversion,'');
	self.DEAKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'DEAKeys', le.newtime,'');
	self.Death_MIKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'Death_MIKeys', le.buildversion,'');
	self.Death_MIKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'Death_MIKeys', le.newtime,'');
	self.DeathMasterKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'DeathMasterKeys', le.buildversion,'');
	self.DeathMasterKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'DeathMasterKeys', le.newtime,'');
	self.DeathMasterSsaKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'DeathMasterSsaKeys', le.buildversion,'');
	self.DeathMasterSsaKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'DeathMasterSsaKeys', le.newtime,'');
	self.Debt_SettlementKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'Debt_SettlementKeys', le.buildversion,'');
	self.Debt_SettlementKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'Debt_SettlementKeys', le.newtime,'');
	self.DiversityCertKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'DiversityCertKeys', le.buildversion,'');
	self.DiversityCertKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'DiversityCertKeys', le.newtime,'');
	self.DLV2Keys_Version := if(le.newdate = yesterday AND le.datasetname = 'DLV2Keys', le.buildversion,'');
	self.DLV2Keys_Updated := if(le.newdate = yesterday AND le.datasetname = 'DLV2Keys', le.newtime,'');
	self.DNBFEINV2Keys_Version := if(le.newdate = yesterday AND le.datasetname = 'DNBFEINV2Keys', le.buildversion,'');
	self.DNBFEINV2Keys_Updated := if(le.newdate = yesterday AND le.datasetname = 'DNBFEINV2Keys', le.newtime,'');
	self.DNBKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'DNBKeys', le.buildversion,'');
	self.DNBKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'DNBKeys', le.newtime,'');
	self.DOCImagesKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'DOCImagesKeys', le.buildversion,'');
	self.DOCImagesKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'DOCImagesKeys', le.newtime,'');
	self.DOCKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'DOCKeys', le.buildversion,'');
	self.DOCKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'DOCKeys', le.newtime,'');
	self.DoNotCallKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'DoNotCallKeys', le.buildversion,'');
	self.DoNotCallKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'DoNotCallKeys', le.newtime,'');
	self.DoNotMailKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'DoNotMailKeys', le.buildversion,'');
	self.DoNotMailKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'DoNotMailKeys', le.newtime,'');
	self.DriversVTSAKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'DriversVTSAKeys', le.buildversion,'');
	self.DriversVTSAKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'DriversVTSAKeys', le.newtime,'');
	self.EASI2000Keys_Version := if(le.newdate = yesterday AND le.datasetname = 'EASI2000Keys', le.buildversion,'');
	self.EASI2000Keys_Updated := if(le.newdate = yesterday AND le.datasetname = 'EASI2000Keys', le.newtime,'');
	self.EASIKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'EASIKeys', le.buildversion,'');
	self.EASIKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'EASIKeys', le.newtime,'');
	self.EBRKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'EBRKeys', le.buildversion,'');
	self.EBRKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'EBRKeys', le.newtime,'');
	self.EcrashV2Keys_Version := if(le.newdate = yesterday AND le.datasetname = 'EcrashV2Keys', le.buildversion,'');
	self.EcrashV2Keys_Updated := if(le.newdate = yesterday AND le.datasetname = 'EcrashV2Keys', le.newtime,'');
	self.ECRulingKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'ECRulingKeys', le.buildversion,'');
	self.ECRulingKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'ECRulingKeys', le.newtime,'');
	self.EmailDataKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'EmailDataKeys', le.buildversion,'');
	self.EmailDataKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'EmailDataKeys', le.newtime,'');
	self.EmailDataV2EventKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'EmailDataV2EventKeys', le.buildversion,'');
	self.EmailDataV2EventKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'EmailDataV2EventKeys', le.newtime,'');
	self.EmailDataV2Keys_Version := if(le.newdate = yesterday AND le.datasetname = 'EmailDataV2Keys', le.buildversion,'');
	self.EmailDataV2Keys_Updated := if(le.newdate = yesterday AND le.datasetname = 'EmailDataV2Keys', le.newtime,'');
	self.EmergesKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'EmergesKeys', le.buildversion,'');
	self.EmergesKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'EmergesKeys', le.newtime,'');
	self.EncFacSanctionKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'EncFacSanctionKeys', le.buildversion,'');
	self.EncFacSanctionKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'EncFacSanctionKeys', le.newtime,'');
	self.EnclarityKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'EnclarityKeys', le.buildversion,'');
	self.EnclarityKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'EnclarityKeys', le.newtime,'');
	self.EquifaxBusDataKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'EquifaxBusDataKeys', le.buildversion,'');
	self.EquifaxBusDataKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'EquifaxBusDataKeys', le.newtime,'');
	self.EquifaxTotalSolutionKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'EquifaxTotalSolutionKeys', le.buildversion,'');
	self.EquifaxTotalSolutionKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'EquifaxTotalSolutionKeys', le.newtime,'');
	self.ERO_Keys_Version := if(le.newdate = yesterday AND le.datasetname = 'ERO_Keys', le.buildversion,'');
	self.ERO_Keys_Updated := if(le.newdate = yesterday AND le.datasetname = 'ERO_Keys', le.newtime,'');
	self.ExperianCRDBKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'ExperianCRDBKeys', le.buildversion,'');
	self.ExperianCRDBKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'ExperianCRDBKeys', le.newtime,'');
	self.ExperianFEINKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'ExperianFEINKeys', le.buildversion,'');
	self.ExperianFEINKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'ExperianFEINKeys', le.newtime,'');
	self.ExperianPhonesKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'ExperianPhonesKeys', le.buildversion,'');
	self.ExperianPhonesKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'ExperianPhonesKeys', le.newtime,'');
	self.FAAKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'FAAKeys', le.buildversion,'');
	self.FAAKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'FAAKeys', le.newtime,'');
	self.FacilityHeaderKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'FacilityHeaderKeys', le.buildversion,'');
	self.FacilityHeaderKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'FacilityHeaderKeys', le.newtime,'');
	self.Fbn2Keys_Version := if(le.newdate = yesterday AND le.datasetname = 'Fbn2Keys', le.buildversion,'');
	self.Fbn2Keys_Updated := if(le.newdate = yesterday AND le.datasetname = 'Fbn2Keys', le.newtime,'');
	self.FCCKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'FCCKeys', le.buildversion,'');
	self.FCCKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'FCCKeys', le.newtime,'');
	self.FDNKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'FDNKeys', le.buildversion,'');
	self.FDNKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'FDNKeys', le.newtime,'');
	self.FedexKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'FedexKeys', le.buildversion,'');
	self.FedexKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'FedexKeys', le.newtime,'');
	self.ForeclosureKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'ForeclosureKeys', le.buildversion,'');
	self.ForeclosureKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'ForeclosureKeys', le.newtime,'');
	self.FrandxKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'FrandxKeys', le.buildversion,'');
	self.FrandxKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'FrandxKeys', le.newtime,'');
	self.FraudGovKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'FraudGovKeys', le.buildversion,'');
	self.FraudGovKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'FraudGovKeys', le.newtime,'');
	self.FraudPoint3Keys_Version := if(le.newdate = yesterday AND le.datasetname = 'FraudPoint3Keys', le.buildversion,'');
	self.FraudPoint3Keys_Updated := if(le.newdate = yesterday AND le.datasetname = 'FraudPoint3Keys', le.newtime,'');
	self.FraudpointseedKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'FraudpointseedKeys', le.buildversion,'');
	self.FraudpointseedKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'FraudpointseedKeys', le.newtime,'');
	self.GlobalWatchListKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'GlobalWatchListKeys', le.buildversion,'');
	self.GlobalWatchListKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'GlobalWatchListKeys', le.newtime,'');
	self.GlobalWatchListV2Keys_Version := if(le.newdate = yesterday AND le.datasetname = 'GlobalWatchListV2Keys', le.buildversion,'');
	self.GlobalWatchListV2Keys_Updated := if(le.newdate = yesterday AND le.datasetname = 'GlobalWatchListV2Keys', le.newtime,'');
	self.GongDailyKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'GongDailyKeys', le.buildversion,'');
	self.GongDailyKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'GongDailyKeys', le.newtime,'');
	self.GongKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'GongKeys', le.buildversion,'');
	self.GongKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'GongKeys', le.newtime,'');
	self.GovdataKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'GovdataKeys', le.buildversion,'');
	self.GovdataKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'GovdataKeys', le.newtime,'');
	self.GSAKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'GSAKeys', le.buildversion,'');
	self.GSAKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'GSAKeys', le.newtime,'');
	self.HeaderNonUpdatingKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'HeaderNonUpdatingKeys', le.buildversion,'');
	self.HeaderNonUpdatingKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'HeaderNonUpdatingKeys', le.newtime,'');
	self.HealthHDRKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'HealthHDRKeys', le.buildversion,'');
	self.HealthHDRKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'HealthHDRKeys', le.newtime,'');
	self.HMSOrgKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'HMSOrgKeys', le.buildversion,'');
	self.HMSOrgKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'HMSOrgKeys', le.newtime,'');
	self.HMSOrgRelationsKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'HMSOrgRelationsKeys', le.buildversion,'');
	self.HMSOrgRelationsKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'HMSOrgRelationsKeys', le.newtime,'');
	self.HMSProviderPIIDKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'HMSProviderPIIDKeys', le.buildversion,'');
	self.HMSProviderPIIDKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'HMSProviderPIIDKeys', le.newtime,'');
	self.HMSStateLicenseKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'HMSStateLicenseKeys', le.buildversion,'');
	self.HMSStateLicenseKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'HMSStateLicenseKeys', le.newtime,'');
	self.ICDKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'ICDKeys', le.buildversion,'');
	self.ICDKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'ICDKeys', le.newtime,'');
	self.ImpulseEmailKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'ImpulseEmailKeys', le.buildversion,'');
	self.ImpulseEmailKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'ImpulseEmailKeys', le.newtime,'');
	self.InfutorcidKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'InfutorcidKeys', le.buildversion,'');
	self.InfutorcidKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'InfutorcidKeys', le.newtime,'');
	self.InfutorKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'InfutorKeys', le.buildversion,'');
	self.InfutorKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'InfutorKeys', le.newtime,'');
	self.InfutorNARBKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'InfutorNARBKeys', le.buildversion,'');
	self.InfutorNARBKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'InfutorNARBKeys', le.newtime,'');
	self.InfutorNARCKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'InfutorNARCKeys', le.buildversion,'');
	self.InfutorNARCKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'InfutorNARCKeys', le.newtime,'');
	self.IngenixKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'IngenixKeys', le.buildversion,'');
	self.IngenixKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'IngenixKeys', le.newtime,'');
	self.InquirytableKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'InquirytableKeys', le.buildversion,'');
	self.InquirytableKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'InquirytableKeys', le.newtime,'');
	self.InquiryTableUpdateKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'InquiryTableUpdateKeys', le.buildversion,'');
	self.InquiryTableUpdateKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'InquiryTableUpdateKeys', le.newtime,'');
	self.InstantIDArchiveKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'InstantIDArchiveKeys', le.buildversion,'');
	self.InstantIDArchiveKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'InstantIDArchiveKeys', le.newtime,'');
	self.InsuranceCertKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'InsuranceCertKeys', le.buildversion,'');
	self.InsuranceCertKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'InsuranceCertKeys', le.newtime,'');
	self.IP_MetadataKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'IP_MetadataKeys', le.buildversion,'');
	self.IP_MetadataKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'IP_MetadataKeys', le.newtime,'');
	self.IRSKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'IRSKeys', le.buildversion,'');
	self.IRSKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'IRSKeys', le.newtime,'');
	self.LabDIDMappingKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'LabDIDMappingKeys', le.buildversion,'');
	self.LabDIDMappingKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'LabDIDMappingKeys', le.newtime,'');
	self.LaborActionsEBSAKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'LaborActionsEBSAKeys', le.buildversion,'');
	self.LaborActionsEBSAKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'LaborActionsEBSAKeys', le.newtime,'');
	self.LaborActionsMSHAKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'LaborActionsMSHAKeys', le.buildversion,'');
	self.LaborActionsMSHAKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'LaborActionsMSHAKeys', le.newtime,'');
	self.LaborActionsWHDKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'LaborActionsWHDKeys', le.buildversion,'');
	self.LaborActionsWHDKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'LaborActionsWHDKeys', le.newtime,'');
	self.LiensV2Keys_Version := if(le.newdate = yesterday AND le.datasetname = 'LiensV2Keys', le.buildversion,'');
	self.LiensV2Keys_Updated := if(le.newdate = yesterday AND le.datasetname = 'LiensV2Keys', le.newtime,'');
	self.LitigiousDebtorKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'LitigiousDebtorKeys', le.buildversion,'');
	self.LitigiousDebtorKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'LitigiousDebtorKeys', le.newtime,'');
	self.LNPropertyV2FullKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'LNPropertyV2FullKeys', le.buildversion,'');
	self.LNPropertyV2FullKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'LNPropertyV2FullKeys', le.newtime,'');
	self.LNPropertyV2Keys_Version := if(le.newdate = yesterday AND le.datasetname = 'LNPropertyV2Keys', le.buildversion,'');
	self.LNPropertyV2Keys_Updated := if(le.newdate = yesterday AND le.datasetname = 'LNPropertyV2Keys', le.newtime,'');
	self.LocationIDKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'LocationIDKeys', le.buildversion,'');
	self.LocationIDKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'LocationIDKeys', le.newtime,'');
	self.MariKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'MariKeys', le.buildversion,'');
	self.MariKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'MariKeys', le.newtime,'');
	self.MarketingHeaderKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'MarketingHeaderKeys', le.buildversion,'');
	self.MarketingHeaderKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'MarketingHeaderKeys', le.newtime,'');
	self.MDV2Keys_Version := if(le.newdate = yesterday AND le.datasetname = 'MDV2Keys', le.buildversion,'');
	self.MDV2Keys_Updated := if(le.newdate = yesterday AND le.datasetname = 'MDV2Keys', le.newtime,'');
	self.MedschoolKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'MedschoolKeys', le.buildversion,'');
	self.MedschoolKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'MedschoolKeys', le.newtime,'');
	self.MFindKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'MFindKeys', le.buildversion,'');
	self.MFindKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'MFindKeys', le.newtime,'');
	self.MMCPKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'MMCPKeys', le.buildversion,'');
	self.MMCPKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'MMCPKeys', le.newtime,'');
	self.ModelsKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'ModelsKeys', le.buildversion,'');
	self.ModelsKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'ModelsKeys', le.newtime,'');
	self.MXDocketKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'MXDocketKeys', le.buildversion,'');
	self.MXDocketKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'MXDocketKeys', le.newtime,'');
	self.MXNamesKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'MXNamesKeys', le.buildversion,'');
	self.MXNamesKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'MXNamesKeys', le.newtime,'');
	self.MXProfessionKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'MXProfessionKeys', le.buildversion,'');
	self.MXProfessionKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'MXProfessionKeys', le.newtime,'');
	self.Nac2_TestKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'Nac2_TestKeys', le.buildversion,'');
	self.Nac2_TestKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'Nac2_TestKeys', le.newtime,'');
	self.NAC2Keys_Version := if(le.newdate = yesterday AND le.datasetname = 'NAC2Keys', le.buildversion,'');
	self.NAC2Keys_Updated := if(le.newdate = yesterday AND le.datasetname = 'NAC2Keys', le.newtime,'');
	self.NACKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'NACKeys', le.buildversion,'');
	self.NACKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'NACKeys', le.newtime,'');
	self.NCPDPKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'NCPDPKeys', le.buildversion,'');
	self.NCPDPKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'NCPDPKeys', le.newtime,'');
	self.NDRKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'NDRKeys', le.buildversion,'');
	self.NDRKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'NDRKeys', le.newtime,'');
	self.NeighborhoodKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'NeighborhoodKeys', le.buildversion,'');
	self.NeighborhoodKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'NeighborhoodKeys', le.newtime,'');
	self.NonUpdatingKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'NonUpdatingKeys', le.buildversion,'');
	self.NonUpdatingKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'NonUpdatingKeys', le.newtime,'');
	self.NppesKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'NppesKeys', le.buildversion,'');
	self.NppesKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'NppesKeys', le.newtime,'');
	self.OfficialRecordsKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'OfficialRecordsKeys', le.buildversion,'');
	self.OfficialRecordsKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'OfficialRecordsKeys', le.newtime,'');
	self.OIGKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'OIGKeys', le.buildversion,'');
	self.OIGKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'OIGKeys', le.newtime,'');
	self.OneClickDataKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'OneClickDataKeys', le.buildversion,'');
	self.OneClickDataKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'OneClickDataKeys', le.newtime,'');
	self.OshairKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'OshairKeys', le.buildversion,'');
	self.OshairKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'OshairKeys', le.newtime,'');
	self.OverrideKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'OverrideKeys', le.buildversion,'');
	self.OverrideKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'OverrideKeys', le.newtime,'');
	self.PatriotKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'PatriotKeys', le.buildversion,'');
	self.PatriotKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'PatriotKeys', le.newtime,'');
	self.PAWV2Keys_Version := if(le.newdate = yesterday AND le.datasetname = 'PAWV2Keys', le.buildversion,'');
	self.PAWV2Keys_Updated := if(le.newdate = yesterday AND le.datasetname = 'PAWV2Keys', le.newtime,'');
	self.PCNSRKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'PCNSRKeys', le.buildversion,'');
	self.PCNSRKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'PCNSRKeys', le.newtime,'');
	self.PersonAncillaryKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'PersonAncillaryKeys', le.buildversion,'');
	self.PersonAncillaryKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'PersonAncillaryKeys', le.newtime,'');
	self.PersonHeaderKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'PersonHeaderKeys', le.buildversion,'');
	self.PersonHeaderKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'PersonHeaderKeys', le.newtime,'');
	self.PersonHeaderLookupKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'PersonHeaderLookupKeys', le.buildversion,'');
	self.PersonHeaderLookupKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'PersonHeaderLookupKeys', le.newtime,'');
	self.PersonHeaderWeeklyKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'PersonHeaderWeeklyKeys', le.buildversion,'');
	self.PersonHeaderWeeklyKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'PersonHeaderWeeklyKeys', le.newtime,'');
	self.PersonLABKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'PersonLABKeys', le.buildversion,'');
	self.PersonLABKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'PersonLABKeys', le.newtime,'');
	self.PersonSlimsortKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'PersonSlimsortKeys', le.buildversion,'');
	self.PersonSlimsortKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'PersonSlimsortKeys', le.newtime,'');
	self.PhoneBlacklistKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'PhoneBlacklistKeys', le.buildversion,'');
	self.PhoneBlacklistKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'PhoneBlacklistKeys', le.newtime,'');
	self.PhoneFeedbackKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'PhoneFeedbackKeys', le.buildversion,'');
	self.PhoneFeedbackKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'PhoneFeedbackKeys', le.newtime,'');
	self.PhoneFinderRptDeltaKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'PhoneFinderRptDeltaKeys', le.buildversion,'');
	self.PhoneFinderRptDeltaKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'PhoneFinderRptDeltaKeys', le.newtime,'');
	self.PhoneFraudKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'PhoneFraudKeys', le.buildversion,'');
	self.PhoneFraudKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'PhoneFraudKeys', le.newtime,'');
	self.PhonemartKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'PhonemartKeys', le.buildversion,'');
	self.PhonemartKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'PhonemartKeys', le.newtime,'');
	self.PhonesMetadataKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'PhonesMetadataKeys', le.buildversion,'');
	self.PhonesMetadataKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'PhonesMetadataKeys', le.newtime,'');
	self.PhonesPlusV2Keys_Version := if(le.newdate = yesterday AND le.datasetname = 'PhonesPlusV2Keys', le.buildversion,'');
	self.PhonesPlusV2Keys_Updated := if(le.newdate = yesterday AND le.datasetname = 'PhonesPlusV2Keys', le.newtime,'');
	self.POEKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'POEKeys', le.buildversion,'');
	self.POEKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'POEKeys', le.newtime,'');
	self.POEsFromEmailsKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'POEsFromEmailsKeys', le.buildversion,'');
	self.POEsFromEmailsKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'POEsFromEmailsKeys', le.newtime,'');
	self.ProfLicKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'ProfLicKeys', le.buildversion,'');
	self.ProfLicKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'ProfLicKeys', le.newtime,'');
	self.PropertyInformationKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'PropertyInformationKeys', le.buildversion,'');
	self.PropertyInformationKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'PropertyInformationKeys', le.newtime,'');
	self.PSSKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'PSSKeys', le.buildversion,'');
	self.PSSKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'PSSKeys', le.newtime,'');
	self.PullZipKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'PullZipKeys', le.buildversion,'');
	self.PullZipKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'PullZipKeys', le.newtime,'');
	self.QHsourceKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'QHsourceKeys', le.buildversion,'');
	self.QHsourceKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'QHsourceKeys', le.newtime,'');
	self.QsentKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'QsentKeys', le.buildversion,'');
	self.QsentKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'QsentKeys', le.newtime,'');
	self.QuickHeaderKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'QuickHeaderKeys', le.buildversion,'');
	self.QuickHeaderKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'QuickHeaderKeys', le.newtime,'');
	self.RelativeV3Keys_Version := if(le.newdate = yesterday AND le.datasetname = 'RelativeV3Keys', le.buildversion,'');
	self.RelativeV3Keys_Updated := if(le.newdate = yesterday AND le.datasetname = 'RelativeV3Keys', le.newtime,'');
	self.RelV3SuppKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'RelV3SuppKeys', le.buildversion,'');
	self.RelV3SuppKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'RelV3SuppKeys', le.newtime,'');
	self.RemoteLinkingKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'RemoteLinkingKeys', le.buildversion,'');
	self.RemoteLinkingKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'RemoteLinkingKeys', le.newtime,'');
	self.RiskTableKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'RiskTableKeys', le.buildversion,'');
	self.RiskTableKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'RiskTableKeys', le.newtime,'');
	self.SalesChannelKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'SalesChannelKeys', le.buildversion,'');
	self.SalesChannelKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'SalesChannelKeys', le.newtime,'');
	self.SAMKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'SAMKeys', le.buildversion,'');
	self.SAMKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'SAMKeys', le.newtime,'');
	self.SANCTN_NPKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'SANCTN_NPKeys', le.buildversion,'');
	self.SANCTN_NPKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'SANCTN_NPKeys', le.newtime,'');
	self.SanctnKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'SanctnKeys', le.buildversion,'');
	self.SanctnKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'SanctnKeys', le.newtime,'');
	self.SAOKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'SAOKeys', le.buildversion,'');
	self.SAOKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'SAOKeys', le.newtime,'');
	self.SBFECVKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'SBFECVKeys', le.buildversion,'');
	self.SBFECVKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'SBFECVKeys', le.newtime,'');
	self.SBFECVScoringKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'SBFECVScoringKeys', le.buildversion,'');
	self.SBFECVScoringKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'SBFECVScoringKeys', le.newtime,'');
	self.SearchToolKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'SearchToolKeys', le.buildversion,'');
	self.SearchToolKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'SearchToolKeys', le.newtime,'');
	self.SeedKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'SeedKeys', le.buildversion,'');
	self.SeedKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'SeedKeys', le.newtime,'');
	self.SexOffenderImagesKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'SexOffenderImagesKeys', le.buildversion,'');
	self.SexOffenderImagesKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'SexOffenderImagesKeys', le.newtime,'');
	self.SexOffenderKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'SexOffenderKeys', le.buildversion,'');
	self.SexOffenderKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'SexOffenderKeys', le.newtime,'');
	self.SheilaGrecoKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'SheilaGrecoKeys', le.buildversion,'');
	self.SheilaGrecoKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'SheilaGrecoKeys', le.newtime,'');
	self.SICCodeKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'SICCodeKeys', le.buildversion,'');
	self.SICCodeKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'SICCodeKeys', le.newtime,'');
	self.SiteSecISMSKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'SiteSecISMSKeys', le.buildversion,'');
	self.SiteSecISMSKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'SiteSecISMSKeys', le.newtime,'');
	self.SmartJuryKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'SmartJuryKeys', le.buildversion,'');
	self.SmartJuryKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'SmartJuryKeys', le.newtime,'');
	self.SNAKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'SNAKeys', le.buildversion,'');
	self.SNAKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'SNAKeys', le.newtime,'');
	self.SourceBKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'SourceBKeys', le.buildversion,'');
	self.SourceBKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'SourceBKeys', le.newtime,'');
	self.SourceKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'SourceKeys', le.buildversion,'');
	self.SourceKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'SourceKeys', le.newtime,'');
	self.SpokeKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'SpokeKeys', le.buildversion,'');
	self.SpokeKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'SpokeKeys', le.newtime,'');
	self.SSNIssue2Keys_Version := if(le.newdate = yesterday AND le.datasetname = 'SSNIssue2Keys', le.buildversion,'');
	self.SSNIssue2Keys_Updated := if(le.newdate = yesterday AND le.datasetname = 'SSNIssue2Keys', le.newtime,'');
	self.StatedeathKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'StatedeathKeys', le.buildversion,'');
	self.StatedeathKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'StatedeathKeys', le.newtime,'');
	self.SuppressionKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'SuppressionKeys', le.buildversion,'');
	self.SuppressionKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'SuppressionKeys', le.newtime,'');
	self.TargusKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'TargusKeys', le.buildversion,'');
	self.TargusKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'TargusKeys', le.newtime,'');
	self.TaxproKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'TaxproKeys', le.buildversion,'');
	self.TaxproKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'TaxproKeys', le.newtime,'');
	self.TelcordiaTdsKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'TelcordiaTdsKeys', le.buildversion,'');
	self.TelcordiaTdsKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'TelcordiaTdsKeys', le.newtime,'');
	self.TelcordiaTpmKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'TelcordiaTpmKeys', le.buildversion,'');
	self.TelcordiaTpmKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'TelcordiaTpmKeys', le.newtime,'');
	self.TestseedBusCRReportKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'TestseedBusCRReportKeys', le.buildversion,'');
	self.TestseedBusCRReportKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'TestseedBusCRReportKeys', le.newtime,'');
	self.TestseedDDReportKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'TestseedDDReportKeys', le.buildversion,'');
	self.TestseedDDReportKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'TestseedDDReportKeys', le.newtime,'');
	self.TestseedKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'TestseedKeys', le.buildversion,'');
	self.TestseedKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'TestseedKeys', le.newtime,'');
	self.ThriveKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'ThriveKeys', le.buildversion,'');
	self.ThriveKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'ThriveKeys', le.newtime,'');
	self.TrisISPKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'TrisISPKeys', le.buildversion,'');
	self.TrisISPKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'TrisISPKeys', le.newtime,'');
	self.TxbusKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'TxbusKeys', le.buildversion,'');
	self.TxbusKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'TxbusKeys', le.newtime,'');
	self.UCCV2Keys_Version := if(le.newdate = yesterday AND le.datasetname = 'UCCV2Keys', le.buildversion,'');
	self.UCCV2Keys_Updated := if(le.newdate = yesterday AND le.datasetname = 'UCCV2Keys', le.newtime,'');
	self.UtilityDailyKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'UtilityDailyKeys', le.buildversion,'');
	self.UtilityDailyKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'UtilityDailyKeys', le.newtime,'');
	self.UtilityhvalKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'UtilityhvalKeys', le.buildversion,'');
	self.UtilityhvalKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'UtilityhvalKeys', le.newtime,'');
	self.VehicleV2Keys_Version := if(le.newdate = yesterday AND le.datasetname = 'VehicleV2Keys', le.buildversion,'');
	self.VehicleV2Keys_Updated := if(le.newdate = yesterday AND le.datasetname = 'VehicleV2Keys', le.newtime,'');
	self.VendorSourceKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'VendorSourceKeys', le.buildversion,'');
	self.VendorSourceKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'VendorSourceKeys', le.newtime,'');
	self.Vina_VinKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'Vina_VinKeys', le.buildversion,'');
	self.Vina_VinKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'Vina_VinKeys', le.newtime,'');
	self.VotersV2Keys_Version := if(le.newdate = yesterday AND le.datasetname = 'VotersV2Keys', le.buildversion,'');
	self.VotersV2Keys_Updated := if(le.newdate = yesterday AND le.datasetname = 'VotersV2Keys', le.newtime,'');
	self.WatchdogKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'WatchdogKeys', le.buildversion,'');
	self.WatchdogKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'WatchdogKeys', le.newtime,'');
	self.WatercraftKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'WatercraftKeys', le.buildversion,'');
	self.WatercraftKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'WatercraftKeys', le.newtime,'');
	self.WhoisKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'WhoisKeys', le.buildversion,'');
	self.WhoisKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'WhoisKeys', le.newtime,'');
	self.WorkersCompensationKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'WorkersCompensationKeys', le.buildversion,'');
	self.WorkersCompensationKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'WorkersCompensationKeys', le.newtime,'');
	self.WorldCheckKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'WorldCheckKeys', le.buildversion,'');
	self.WorldCheckKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'WorldCheckKeys', le.newtime,'');
	self.YellowPagesKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'YellowPagesKeys', le.buildversion,'');
	self.YellowPagesKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'YellowPagesKeys', le.newtime,'');
	self.ZipbyCounty2Keys_Version := if(le.newdate = yesterday AND le.datasetname = 'ZipbyCounty2Keys', le.buildversion,'');
	self.ZipbyCounty2Keys_Updated := if(le.newdate = yesterday AND le.datasetname = 'ZipbyCounty2Keys', le.newtime,'');
	self.ZoomKeys_Version := if(le.newdate = yesterday AND le.datasetname = 'ZoomKeys', le.buildversion,'');
	self.ZoomKeys_Updated := if(le.newdate = yesterday AND le.datasetname = 'ZoomKeys', le.newtime,'');
	self :=[];
END;

Yesterday_full := project(trans_NonFCRA_qa_ddt_ds, Mastertrans(left));
// output(Yesterday_full, named('Yesterday_Master'));


NonFCRAMasterLay Rollit(Yesterday_full le, Yesterday_full ri) := TRANSFORM
	Self.date := le.date;
	self.ABIKeys_Version := if(le.ABIKeys_Version <> '', le.ABIKeys_Version, ri.ABIKeys_Version);
	self.ABIKeys_Updated := if(le.ABIKeys_Updated <> '', le.ABIKeys_Updated, ri.ABIKeys_Updated);
	self.ABMSKeys_Version := if(le.ABMSKeys_Version <> '', le.ABMSKeys_Version, ri.ABMSKeys_Version);
	self.ABMSKeys_Updated := if(le.ABMSKeys_Updated <> '', le.ABMSKeys_Updated, ri.ABMSKeys_Updated);
	self.ACAInstitutionsKeys_Version := if(le.ACAInstitutionsKeys_Version <> '', le.ACAInstitutionsKeys_Version, ri.ACAInstitutionsKeys_Version);
	self.ACAInstitutionsKeys_Updated := if(le.ACAInstitutionsKeys_Updated <> '', le.ACAInstitutionsKeys_Updated, ri.ACAInstitutionsKeys_Updated);
	self.AccidentStateResKeys_Version := if(le.AccidentStateResKeys_Version <> '', le.AccidentStateResKeys_Version, ri.AccidentStateResKeys_Version);
	self.AccidentStateResKeys_Updated := if(le.AccidentStateResKeys_Updated <> '', le.AccidentStateResKeys_Updated, ri.AccidentStateResKeys_Updated);
	self.AddressFeedbackKeys_Version := if(le.AddressFeedbackKeys_Version <> '', le.AddressFeedbackKeys_Version, ri.AddressFeedbackKeys_Version);
	self.AddressFeedbackKeys_Updated := if(le.AddressFeedbackKeys_Updated <> '', le.AddressFeedbackKeys_Updated, ri.AddressFeedbackKeys_Updated);
	self.AddressHRIKeys_Version := if(le.AddressHRIKeys_Version <> '', le.AddressHRIKeys_Version, ri.AddressHRIKeys_Version);
	self.AddressHRIKeys_Updated := if(le.AddressHRIKeys_Updated <> '', le.AddressHRIKeys_Updated, ri.AddressHRIKeys_Updated);
	self.AddressLineAIDKeys_Version := if(le.AddressLineAIDKeys_Version <> '', le.AddressLineAIDKeys_Version, ri.AddressLineAIDKeys_Version);
	self.AddressLineAIDKeys_Updated := if(le.AddressLineAIDKeys_Updated <> '', le.AddressLineAIDKeys_Updated, ri.AddressLineAIDKeys_Updated);
	self.AddressRawAIDKeys_Version := if(le.AddressRawAIDKeys_Version <> '', le.AddressRawAIDKeys_Version, ri.AddressRawAIDKeys_Version);
	self.AddressRawAIDKeys_Updated := if(le.AddressRawAIDKeys_Updated <> '', le.AddressRawAIDKeys_Updated, ri.AddressRawAIDKeys_Updated);
	self.AlloyKeys_Version := if(le.AlloyKeys_Version <> '', le.AlloyKeys_Version, ri.AlloyKeys_Version);
	self.AlloyKeys_Updated := if(le.AlloyKeys_Updated <> '', le.AlloyKeys_Updated, ri.AlloyKeys_Updated);
	self.AmericanstudentKeys_Version := if(le.AmericanstudentKeys_Version <> '', le.AmericanstudentKeys_Version, ri.AmericanstudentKeys_Version);
	self.AmericanstudentKeys_Updated := if(le.AmericanstudentKeys_Updated <> '', le.AmericanstudentKeys_Updated, ri.AmericanstudentKeys_Updated);
	self.AMIDIR_Keys_Version := if(le.AMIDIR_Keys_Version <> '', le.AMIDIR_Keys_Version, ri.AMIDIR_Keys_Version);
	self.AMIDIR_Keys_Updated := if(le.AMIDIR_Keys_Updated <> '', le.AMIDIR_Keys_Updated, ri.AMIDIR_Keys_Updated);
	self.AMSKeys_Version := if(le.AMSKeys_Version <> '', le.AMSKeys_Version, ri.AMSKeys_Version);
	self.AMSKeys_Updated := if(le.AMSKeys_Updated <> '', le.AMSKeys_Updated, ri.AMSKeys_Updated);
	self.AreaCodeChangeKeys_Version := if(le.AreaCodeChangeKeys_Version <> '', le.AreaCodeChangeKeys_Version, ri.AreaCodeChangeKeys_Version);
	self.AreaCodeChangeKeys_Updated := if(le.AreaCodeChangeKeys_Updated <> '', le.AreaCodeChangeKeys_Updated, ri.AreaCodeChangeKeys_Updated);
	self.ATFKeys_Version := if(le.ATFKeys_Version <> '', le.ATFKeys_Version, ri.ATFKeys_Version);
	self.ATFKeys_Updated := if(le.ATFKeys_Updated <> '', le.ATFKeys_Updated, ri.ATFKeys_Updated);
	self.AVMV2Keys_Version := if(le.AVMV2Keys_Version <> '', le.AVMV2Keys_Version, ri.AVMV2Keys_Version);
	self.AVMV2Keys_Updated := if(le.AVMV2Keys_Updated <> '', le.AVMV2Keys_Updated, ri.AVMV2Keys_Updated);
	self.BadAddressesKeys_Version := if(le.BadAddressesKeys_Version <> '', le.BadAddressesKeys_Version, ri.BadAddressesKeys_Version);
	self.BadAddressesKeys_Updated := if(le.BadAddressesKeys_Updated <> '', le.BadAddressesKeys_Updated, ri.BadAddressesKeys_Updated);
	self.BankRTNKeys_Version := if(le.BankRTNKeys_Version <> '', le.BankRTNKeys_Version, ri.BankRTNKeys_Version);
	self.BankRTNKeys_Updated := if(le.BankRTNKeys_Updated <> '', le.BankRTNKeys_Updated, ri.BankRTNKeys_Updated);
	self.BankruptcyV2Keys_Version := if(le.BankruptcyV2Keys_Version <> '', le.BankruptcyV2Keys_Version, ri.BankruptcyV2Keys_Version);
	self.BankruptcyV2Keys_Updated := if(le.BankruptcyV2Keys_Updated <> '', le.BankruptcyV2Keys_Updated, ri.BankruptcyV2Keys_Updated);
	self.BBBKeys_Version := if(le.BBBKeys_Version <> '', le.BBBKeys_Version, ri.BBBKeys_Version);
	self.BBBKeys_Updated := if(le.BBBKeys_Updated <> '', le.BBBKeys_Updated, ri.BBBKeys_Updated);
	self.BipV2FullKeys_Version := if(le.BipV2FullKeys_Version <> '', le.BipV2FullKeys_Version, ri.BipV2FullKeys_Version);
	self.BipV2FullKeys_Updated := if(le.BipV2FullKeys_Updated <> '', le.BipV2FullKeys_Updated, ri.BipV2FullKeys_Updated);
	self.BipV2SuppressionKeys_Version := if(le.BipV2SuppressionKeys_Version <> '', le.BipV2SuppressionKeys_Version, ri.BipV2SuppressionKeys_Version);
	self.BipV2SuppressionKeys_Updated := if(le.BipV2SuppressionKeys_Updated <> '', le.BipV2SuppressionKeys_Updated, ri.BipV2SuppressionKeys_Updated);
	self.BipV2WAFKeys_Version := if(le.BipV2WAFKeys_Version <> '', le.BipV2WAFKeys_Version, ri.BipV2WAFKeys_Version);
	self.BipV2WAFKeys_Updated := if(le.BipV2WAFKeys_Updated <> '', le.BipV2WAFKeys_Updated, ri.BipV2WAFKeys_Updated);
	self.BIPV2WeeklyKeys_Version := if(le.BIPV2WeeklyKeys_Version <> '', le.BIPV2WeeklyKeys_Version, ri.BIPV2WeeklyKeys_Version);
	self.BIPV2WeeklyKeys_Updated := if(le.BIPV2WeeklyKeys_Updated <> '', le.BIPV2WeeklyKeys_Updated, ri.BIPV2WeeklyKeys_Updated);
	self.BKCourtKeys_Version := if(le.BKCourtKeys_Version <> '', le.BKCourtKeys_Version, ri.BKCourtKeys_Version);
	self.BKCourtKeys_Updated := if(le.BKCourtKeys_Updated <> '', le.BKCourtKeys_Updated, ri.BKCourtKeys_Updated);
	self.BKEventsKeys_Version := if(le.BKEventsKeys_Version <> '', le.BKEventsKeys_Version, ri.BKEventsKeys_Version);
	self.BKEventsKeys_Updated := if(le.BKEventsKeys_Updated <> '', le.BKEventsKeys_Updated, ri.BKEventsKeys_Updated);
	self.BusinessBestKeys_Version := if(le.BusinessBestKeys_Version <> '', le.BusinessBestKeys_Version, ri.BusinessBestKeys_Version);
	self.BusinessBestKeys_Updated := if(le.BusinessBestKeys_Updated <> '', le.BusinessBestKeys_Updated, ri.BusinessBestKeys_Updated);
	self.BusinessHeaderKeys_Version := if(le.BusinessHeaderKeys_Version <> '', le.BusinessHeaderKeys_Version, ri.BusinessHeaderKeys_Version);
	self.BusinessHeaderKeys_Updated := if(le.BusinessHeaderKeys_Updated <> '', le.BusinessHeaderKeys_Updated, ri.BusinessHeaderKeys_Updated);
	self.BusinessRegKeys_Version := if(le.BusinessRegKeys_Version <> '', le.BusinessRegKeys_Version, ri.BusinessRegKeys_Version);
	self.BusinessRegKeys_Updated := if(le.BusinessRegKeys_Updated <> '', le.BusinessRegKeys_Updated, ri.BusinessRegKeys_Updated);
	self.CalbusKeys_Version := if(le.CalbusKeys_Version <> '', le.CalbusKeys_Version, ri.CalbusKeys_Version);
	self.CalbusKeys_Updated := if(le.CalbusKeys_Updated <> '', le.CalbusKeys_Updated, ri.CalbusKeys_Updated);
	self.CanadianPhonesKeys_Version := if(le.CanadianPhonesKeys_Version <> '', le.CanadianPhonesKeys_Version, ri.CanadianPhonesKeys_Version);
	self.CanadianPhonesKeys_Updated := if(le.CanadianPhonesKeys_Updated <> '', le.CanadianPhonesKeys_Updated, ri.CanadianPhonesKeys_Updated);
	self.CanadianPhonesV2Keys_Version := if(le.CanadianPhonesV2Keys_Version <> '', le.CanadianPhonesV2Keys_Version, ri.CanadianPhonesV2Keys_Version);
	self.CanadianPhonesV2Keys_Updated := if(le.CanadianPhonesV2Keys_Updated <> '', le.CanadianPhonesV2Keys_Updated, ri.CanadianPhonesV2Keys_Updated);
	self.CaseConnectKeys_Version := if(le.CaseConnectKeys_Version <> '', le.CaseConnectKeys_Version, ri.CaseConnectKeys_Version);
	self.CaseConnectKeys_Updated := if(le.CaseConnectKeys_Updated <> '', le.CaseConnectKeys_Updated, ri.CaseConnectKeys_Updated);
	self.CDSKeys_Version := if(le.CDSKeys_Version <> '', le.CDSKeys_Version, ri.CDSKeys_Version);
	self.CDSKeys_Updated := if(le.CDSKeys_Updated <> '', le.CDSKeys_Updated, ri.CDSKeys_Updated);
	self.CertegyKeys_Version := if(le.CertegyKeys_Version <> '', le.CertegyKeys_Version, ri.CertegyKeys_Version);
	self.CertegyKeys_Updated := if(le.CertegyKeys_Updated <> '', le.CertegyKeys_Updated, ri.CertegyKeys_Updated);
	self.CityStZipKeys_Version := if(le.CityStZipKeys_Version <> '', le.CityStZipKeys_Version, ri.CityStZipKeys_Version);
	self.CityStZipKeys_Updated := if(le.CityStZipKeys_Updated <> '', le.CityStZipKeys_Updated, ri.CityStZipKeys_Updated);
	self.CivilCourtKeys_Version := if(le.CivilCourtKeys_Version <> '', le.CivilCourtKeys_Version, ri.CivilCourtKeys_Version);
	self.CivilCourtKeys_Updated := if(le.CivilCourtKeys_Updated <> '', le.CivilCourtKeys_Updated, ri.CivilCourtKeys_Updated);
	self.CLIAKeys_Version := if(le.CLIAKeys_Version <> '', le.CLIAKeys_Version, ri.CLIAKeys_Version);
	self.CLIAKeys_Updated := if(le.CLIAKeys_Updated <> '', le.CLIAKeys_Updated, ri.CLIAKeys_Updated);
	self.CNLDFacilitiesKeys_Version := if(le.CNLDFacilitiesKeys_Version <> '', le.CNLDFacilitiesKeys_Version, ri.CNLDFacilitiesKeys_Version);
	self.CNLDFacilitiesKeys_Updated := if(le.CNLDFacilitiesKeys_Updated <> '', le.CNLDFacilitiesKeys_Updated, ri.CNLDFacilitiesKeys_Updated);
	self.CNLDPractitionerKeys_Version := if(le.CNLDPractitionerKeys_Version <> '', le.CNLDPractitionerKeys_Version, ri.CNLDPractitionerKeys_Version);
	self.CNLDPractitionerKeys_Updated := if(le.CNLDPractitionerKeys_Updated <> '', le.CNLDPractitionerKeys_Updated, ri.CNLDPractitionerKeys_Updated);
	self.CodesV3Keys_Version := if(le.CodesV3Keys_Version <> '', le.CodesV3Keys_Version, ri.CodesV3Keys_Version);
	self.CodesV3Keys_Updated := if(le.CodesV3Keys_Updated <> '', le.CodesV3Keys_Updated, ri.CodesV3Keys_Updated);
	self.CompIDKeys_Version := if(le.CompIDKeys_Version <> '', le.CompIDKeys_Version, ri.CompIDKeys_Version);
	self.CompIDKeys_Updated := if(le.CompIDKeys_Updated <> '', le.CompIDKeys_Updated, ri.CompIDKeys_Updated);
	self.ConsumerStatementKeys_Version := if(le.ConsumerStatementKeys_Version <> '', le.ConsumerStatementKeys_Version, ri.ConsumerStatementKeys_Version);
	self.ConsumerStatementKeys_Updated := if(le.ConsumerStatementKeys_Updated <> '', le.ConsumerStatementKeys_Updated, ri.ConsumerStatementKeys_Updated);
	self.Corp2Keys_Version := if(le.Corp2Keys_Version <> '', le.Corp2Keys_Version, ri.Corp2Keys_Version);
	self.Corp2Keys_Updated := if(le.Corp2Keys_Updated <> '', le.Corp2Keys_Updated, ri.Corp2Keys_Updated);
	self.CorteraKeys_Version := if(le.CorteraKeys_Version <> '', le.CorteraKeys_Version, ri.CorteraKeys_Version);
	self.CorteraKeys_Updated := if(le.CorteraKeys_Updated <> '', le.CorteraKeys_Updated, ri.CorteraKeys_Updated);
	self.CorteraTradelineKeys_Version := if(le.CorteraTradelineKeys_Version <> '', le.CorteraTradelineKeys_Version, ri.CorteraTradelineKeys_Version);
	self.CorteraTradelineKeys_Updated := if(le.CorteraTradelineKeys_Updated <> '', le.CorteraTradelineKeys_Updated, ri.CorteraTradelineKeys_Updated);
	self.CountyKeys_Version := if(le.CountyKeys_Version <> '', le.CountyKeys_Version, ri.CountyKeys_Version);
	self.CountyKeys_Updated := if(le.CountyKeys_Updated <> '', le.CountyKeys_Updated, ri.CountyKeys_Updated);
	self.CourtLocatorLookupKeys_Version := if(le.CourtLocatorLookupKeys_Version <> '', le.CourtLocatorLookupKeys_Version, ri.CourtLocatorLookupKeys_Version);
	self.CourtLocatorLookupKeys_Updated := if(le.CourtLocatorLookupKeys_Updated <> '', le.CourtLocatorLookupKeys_Updated, ri.CourtLocatorLookupKeys_Updated);
	self.CourtSearchKeys_Version := if(le.CourtSearchKeys_Version <> '', le.CourtSearchKeys_Version, ri.CourtSearchKeys_Version);
	self.CourtSearchKeys_Updated := if(le.CourtSearchKeys_Updated <> '', le.CourtSearchKeys_Updated, ri.CourtSearchKeys_Updated);
	self.CrashCarrierKeys_Version := if(le.CrashCarrierKeys_Version <> '', le.CrashCarrierKeys_Version, ri.CrashCarrierKeys_Version);
	self.CrashCarrierKeys_Updated := if(le.CrashCarrierKeys_Updated <> '', le.CrashCarrierKeys_Updated, ri.CrashCarrierKeys_Updated);
	self.CustomBankTransactionKeys_Version := if(le.CustomBankTransactionKeys_Version <> '', le.CustomBankTransactionKeys_Version, ri.CustomBankTransactionKeys_Version);
	self.CustomBankTransactionKeys_Updated := if(le.CustomBankTransactionKeys_Updated <> '', le.CustomBankTransactionKeys_Updated, ri.CustomBankTransactionKeys_Updated);
	self.DCAKeys_Version := if(le.DCAKeys_Version <> '', le.DCAKeys_Version, ri.DCAKeys_Version);
	self.DCAKeys_Updated := if(le.DCAKeys_Updated <> '', le.DCAKeys_Updated, ri.DCAKeys_Updated);
	self.DEADCOKeys_Version := if(le.DEADCOKeys_Version <> '', le.DEADCOKeys_Version, ri.DEADCOKeys_Version);
	self.DEADCOKeys_Updated := if(le.DEADCOKeys_Updated <> '', le.DEADCOKeys_Updated, ri.DEADCOKeys_Updated);
	self.DEAKeys_Version := if(le.DEAKeys_Version <> '', le.DEAKeys_Version, ri.DEAKeys_Version);
	self.DEAKeys_Updated := if(le.DEAKeys_Updated <> '', le.DEAKeys_Updated, ri.DEAKeys_Updated);
	self.Death_MIKeys_Version := if(le.Death_MIKeys_Version <> '', le.Death_MIKeys_Version, ri.Death_MIKeys_Version);
	self.Death_MIKeys_Updated := if(le.Death_MIKeys_Updated <> '', le.Death_MIKeys_Updated, ri.Death_MIKeys_Updated);
	self.DeathMasterKeys_Version := if(le.DeathMasterKeys_Version <> '', le.DeathMasterKeys_Version, ri.DeathMasterKeys_Version);
	self.DeathMasterKeys_Updated := if(le.DeathMasterKeys_Updated <> '', le.DeathMasterKeys_Updated, ri.DeathMasterKeys_Updated);
	self.DeathMasterSsaKeys_Version := if(le.DeathMasterSsaKeys_Version <> '', le.DeathMasterSsaKeys_Version, ri.DeathMasterSsaKeys_Version);
	self.DeathMasterSsaKeys_Updated := if(le.DeathMasterSsaKeys_Updated <> '', le.DeathMasterSsaKeys_Updated, ri.DeathMasterSsaKeys_Updated);
	self.Debt_SettlementKeys_Version := if(le.Debt_SettlementKeys_Version <> '', le.Debt_SettlementKeys_Version, ri.Debt_SettlementKeys_Version);
	self.Debt_SettlementKeys_Updated := if(le.Debt_SettlementKeys_Updated <> '', le.Debt_SettlementKeys_Updated, ri.Debt_SettlementKeys_Updated);
	self.DiversityCertKeys_Version := if(le.DiversityCertKeys_Version <> '', le.DiversityCertKeys_Version, ri.DiversityCertKeys_Version);
	self.DiversityCertKeys_Updated := if(le.DiversityCertKeys_Updated <> '', le.DiversityCertKeys_Updated, ri.DiversityCertKeys_Updated);
	self.DLV2Keys_Version := if(le.DLV2Keys_Version <> '', le.DLV2Keys_Version, ri.DLV2Keys_Version);
	self.DLV2Keys_Updated := if(le.DLV2Keys_Updated <> '', le.DLV2Keys_Updated, ri.DLV2Keys_Updated);
	self.DNBFEINV2Keys_Version := if(le.DNBFEINV2Keys_Version <> '', le.DNBFEINV2Keys_Version, ri.DNBFEINV2Keys_Version);
	self.DNBFEINV2Keys_Updated := if(le.DNBFEINV2Keys_Updated <> '', le.DNBFEINV2Keys_Updated, ri.DNBFEINV2Keys_Updated);
	self.DNBKeys_Version := if(le.DNBKeys_Version <> '', le.DNBKeys_Version, ri.DNBKeys_Version);
	self.DNBKeys_Updated := if(le.DNBKeys_Updated <> '', le.DNBKeys_Updated, ri.DNBKeys_Updated);
	self.DOCImagesKeys_Version := if(le.DOCImagesKeys_Version <> '', le.DOCImagesKeys_Version, ri.DOCImagesKeys_Version);
	self.DOCImagesKeys_Updated := if(le.DOCImagesKeys_Updated <> '', le.DOCImagesKeys_Updated, ri.DOCImagesKeys_Updated);
	self.DOCKeys_Version := if(le.DOCKeys_Version <> '', le.DOCKeys_Version, ri.DOCKeys_Version);
	self.DOCKeys_Updated := if(le.DOCKeys_Updated <> '', le.DOCKeys_Updated, ri.DOCKeys_Updated);
	self.DoNotCallKeys_Version := if(le.DoNotCallKeys_Version <> '', le.DoNotCallKeys_Version, ri.DoNotCallKeys_Version);
	self.DoNotCallKeys_Updated := if(le.DoNotCallKeys_Updated <> '', le.DoNotCallKeys_Updated, ri.DoNotCallKeys_Updated);
	self.DoNotMailKeys_Version := if(le.DoNotMailKeys_Version <> '', le.DoNotMailKeys_Version, ri.DoNotMailKeys_Version);
	self.DoNotMailKeys_Updated := if(le.DoNotMailKeys_Updated <> '', le.DoNotMailKeys_Updated, ri.DoNotMailKeys_Updated);
	self.DriversVTSAKeys_Version := if(le.DriversVTSAKeys_Version <> '', le.DriversVTSAKeys_Version, ri.DriversVTSAKeys_Version);
	self.DriversVTSAKeys_Updated := if(le.DriversVTSAKeys_Updated <> '', le.DriversVTSAKeys_Updated, ri.DriversVTSAKeys_Updated);
	self.EASI2000Keys_Version := if(le.EASI2000Keys_Version <> '', le.EASI2000Keys_Version, ri.EASI2000Keys_Version);
	self.EASI2000Keys_Updated := if(le.EASI2000Keys_Updated <> '', le.EASI2000Keys_Updated, ri.EASI2000Keys_Updated);
	self.EASIKeys_Version := if(le.EASIKeys_Version <> '', le.EASIKeys_Version, ri.EASIKeys_Version);
	self.EASIKeys_Updated := if(le.EASIKeys_Updated <> '', le.EASIKeys_Updated, ri.EASIKeys_Updated);
	self.EBRKeys_Version := if(le.EBRKeys_Version <> '', le.EBRKeys_Version, ri.EBRKeys_Version);
	self.EBRKeys_Updated := if(le.EBRKeys_Updated <> '', le.EBRKeys_Updated, ri.EBRKeys_Updated);
	self.EcrashV2Keys_Version := if(le.EcrashV2Keys_Version <> '', le.EcrashV2Keys_Version, ri.EcrashV2Keys_Version);
	self.EcrashV2Keys_Updated := if(le.EcrashV2Keys_Updated <> '', le.EcrashV2Keys_Updated, ri.EcrashV2Keys_Updated);
	self.ECRulingKeys_Version := if(le.ECRulingKeys_Version <> '', le.ECRulingKeys_Version, ri.ECRulingKeys_Version);
	self.ECRulingKeys_Updated := if(le.ECRulingKeys_Updated <> '', le.ECRulingKeys_Updated, ri.ECRulingKeys_Updated);
	self.EmailDataKeys_Version := if(le.EmailDataKeys_Version <> '', le.EmailDataKeys_Version, ri.EmailDataKeys_Version);
	self.EmailDataKeys_Updated := if(le.EmailDataKeys_Updated <> '', le.EmailDataKeys_Updated, ri.EmailDataKeys_Updated);
	self.EmailDataV2EventKeys_Version := if(le.EmailDataV2EventKeys_Version <> '', le.EmailDataV2EventKeys_Version, ri.EmailDataV2EventKeys_Version);
	self.EmailDataV2EventKeys_Updated := if(le.EmailDataV2EventKeys_Updated <> '', le.EmailDataV2EventKeys_Updated, ri.EmailDataV2EventKeys_Updated);
	self.EmailDataV2Keys_Version := if(le.EmailDataV2Keys_Version <> '', le.EmailDataV2Keys_Version, ri.EmailDataV2Keys_Version);
	self.EmailDataV2Keys_Updated := if(le.EmailDataV2Keys_Updated <> '', le.EmailDataV2Keys_Updated, ri.EmailDataV2Keys_Updated);
	self.EmergesKeys_Version := if(le.EmergesKeys_Version <> '', le.EmergesKeys_Version, ri.EmergesKeys_Version);
	self.EmergesKeys_Updated := if(le.EmergesKeys_Updated <> '', le.EmergesKeys_Updated, ri.EmergesKeys_Updated);
	self.EncFacSanctionKeys_Version := if(le.EncFacSanctionKeys_Version <> '', le.EncFacSanctionKeys_Version, ri.EncFacSanctionKeys_Version);
	self.EncFacSanctionKeys_Updated := if(le.EncFacSanctionKeys_Updated <> '', le.EncFacSanctionKeys_Updated, ri.EncFacSanctionKeys_Updated);
	self.EnclarityKeys_Version := if(le.EnclarityKeys_Version <> '', le.EnclarityKeys_Version, ri.EnclarityKeys_Version);
	self.EnclarityKeys_Updated := if(le.EnclarityKeys_Updated <> '', le.EnclarityKeys_Updated, ri.EnclarityKeys_Updated);
	self.EquifaxBusDataKeys_Version := if(le.EquifaxBusDataKeys_Version <> '', le.EquifaxBusDataKeys_Version, ri.EquifaxBusDataKeys_Version);
	self.EquifaxBusDataKeys_Updated := if(le.EquifaxBusDataKeys_Updated <> '', le.EquifaxBusDataKeys_Updated, ri.EquifaxBusDataKeys_Updated);
	self.EquifaxTotalSolutionKeys_Version := if(le.EquifaxTotalSolutionKeys_Version <> '', le.EquifaxTotalSolutionKeys_Version, ri.EquifaxTotalSolutionKeys_Version);
	self.EquifaxTotalSolutionKeys_Updated := if(le.EquifaxTotalSolutionKeys_Updated <> '', le.EquifaxTotalSolutionKeys_Updated, ri.EquifaxTotalSolutionKeys_Updated);
	self.ERO_Keys_Version := if(le.ERO_Keys_Version <> '', le.ERO_Keys_Version, ri.ERO_Keys_Version);
	self.ERO_Keys_Updated := if(le.ERO_Keys_Updated <> '', le.ERO_Keys_Updated, ri.ERO_Keys_Updated);
	self.ExperianCRDBKeys_Version := if(le.ExperianCRDBKeys_Version <> '', le.ExperianCRDBKeys_Version, ri.ExperianCRDBKeys_Version);
	self.ExperianCRDBKeys_Updated := if(le.ExperianCRDBKeys_Updated <> '', le.ExperianCRDBKeys_Updated, ri.ExperianCRDBKeys_Updated);
	self.ExperianFEINKeys_Version := if(le.ExperianFEINKeys_Version <> '', le.ExperianFEINKeys_Version, ri.ExperianFEINKeys_Version);
	self.ExperianFEINKeys_Updated := if(le.ExperianFEINKeys_Updated <> '', le.ExperianFEINKeys_Updated, ri.ExperianFEINKeys_Updated);
	self.ExperianPhonesKeys_Version := if(le.ExperianPhonesKeys_Version <> '', le.ExperianPhonesKeys_Version, ri.ExperianPhonesKeys_Version);
	self.ExperianPhonesKeys_Updated := if(le.ExperianPhonesKeys_Updated <> '', le.ExperianPhonesKeys_Updated, ri.ExperianPhonesKeys_Updated);
	self.FAAKeys_Version := if(le.FAAKeys_Version <> '', le.FAAKeys_Version, ri.FAAKeys_Version);
	self.FAAKeys_Updated := if(le.FAAKeys_Updated <> '', le.FAAKeys_Updated, ri.FAAKeys_Updated);
	self.FacilityHeaderKeys_Version := if(le.FacilityHeaderKeys_Version <> '', le.FacilityHeaderKeys_Version, ri.FacilityHeaderKeys_Version);
	self.FacilityHeaderKeys_Updated := if(le.FacilityHeaderKeys_Updated <> '', le.FacilityHeaderKeys_Updated, ri.FacilityHeaderKeys_Updated);
	self.Fbn2Keys_Version := if(le.Fbn2Keys_Version <> '', le.Fbn2Keys_Version, ri.Fbn2Keys_Version);
	self.Fbn2Keys_Updated := if(le.Fbn2Keys_Updated <> '', le.Fbn2Keys_Updated, ri.Fbn2Keys_Updated);
	self.FCCKeys_Version := if(le.FCCKeys_Version <> '', le.FCCKeys_Version, ri.FCCKeys_Version);
	self.FCCKeys_Updated := if(le.FCCKeys_Updated <> '', le.FCCKeys_Updated, ri.FCCKeys_Updated);
	self.FDNKeys_Version := if(le.FDNKeys_Version <> '', le.FDNKeys_Version, ri.FDNKeys_Version);
	self.FDNKeys_Updated := if(le.FDNKeys_Updated <> '', le.FDNKeys_Updated, ri.FDNKeys_Updated);
	self.FedexKeys_Version := if(le.FedexKeys_Version <> '', le.FedexKeys_Version, ri.FedexKeys_Version);
	self.FedexKeys_Updated := if(le.FedexKeys_Updated <> '', le.FedexKeys_Updated, ri.FedexKeys_Updated);
	self.ForeclosureKeys_Version := if(le.ForeclosureKeys_Version <> '', le.ForeclosureKeys_Version, ri.ForeclosureKeys_Version);
	self.ForeclosureKeys_Updated := if(le.ForeclosureKeys_Updated <> '', le.ForeclosureKeys_Updated, ri.ForeclosureKeys_Updated);
	self.FrandxKeys_Version := if(le.FrandxKeys_Version <> '', le.FrandxKeys_Version, ri.FrandxKeys_Version);
	self.FrandxKeys_Updated := if(le.FrandxKeys_Updated <> '', le.FrandxKeys_Updated, ri.FrandxKeys_Updated);
	self.FraudGovKeys_Version := if(le.FraudGovKeys_Version <> '', le.FraudGovKeys_Version, ri.FraudGovKeys_Version);
	self.FraudGovKeys_Updated := if(le.FraudGovKeys_Updated <> '', le.FraudGovKeys_Updated, ri.FraudGovKeys_Updated);
	self.FraudPoint3Keys_Version := if(le.FraudPoint3Keys_Version <> '', le.FraudPoint3Keys_Version, ri.FraudPoint3Keys_Version);
	self.FraudPoint3Keys_Updated := if(le.FraudPoint3Keys_Updated <> '', le.FraudPoint3Keys_Updated, ri.FraudPoint3Keys_Updated);
	self.FraudpointseedKeys_Version := if(le.FraudpointseedKeys_Version <> '', le.FraudpointseedKeys_Version, ri.FraudpointseedKeys_Version);
	self.FraudpointseedKeys_Updated := if(le.FraudpointseedKeys_Updated <> '', le.FraudpointseedKeys_Updated, ri.FraudpointseedKeys_Updated);
	self.GlobalWatchListKeys_Version := if(le.GlobalWatchListKeys_Version <> '', le.GlobalWatchListKeys_Version, ri.GlobalWatchListKeys_Version);
	self.GlobalWatchListKeys_Updated := if(le.GlobalWatchListKeys_Updated <> '', le.GlobalWatchListKeys_Updated, ri.GlobalWatchListKeys_Updated);
	self.GlobalWatchListV2Keys_Version := if(le.GlobalWatchListV2Keys_Version <> '', le.GlobalWatchListV2Keys_Version, ri.GlobalWatchListV2Keys_Version);
	self.GlobalWatchListV2Keys_Updated := if(le.GlobalWatchListV2Keys_Updated <> '', le.GlobalWatchListV2Keys_Updated, ri.GlobalWatchListV2Keys_Updated);
	self.GongDailyKeys_Version := if(le.GongDailyKeys_Version <> '', le.GongDailyKeys_Version, ri.GongDailyKeys_Version);
	self.GongDailyKeys_Updated := if(le.GongDailyKeys_Updated <> '', le.GongDailyKeys_Updated, ri.GongDailyKeys_Updated);
	self.GongKeys_Version := if(le.GongKeys_Version <> '', le.GongKeys_Version, ri.GongKeys_Version);
	self.GongKeys_Updated := if(le.GongKeys_Updated <> '', le.GongKeys_Updated, ri.GongKeys_Updated);
	self.GovdataKeys_Version := if(le.GovdataKeys_Version <> '', le.GovdataKeys_Version, ri.GovdataKeys_Version);
	self.GovdataKeys_Updated := if(le.GovdataKeys_Updated <> '', le.GovdataKeys_Updated, ri.GovdataKeys_Updated);
	self.GSAKeys_Version := if(le.GSAKeys_Version <> '', le.GSAKeys_Version, ri.GSAKeys_Version);
	self.GSAKeys_Updated := if(le.GSAKeys_Updated <> '', le.GSAKeys_Updated, ri.GSAKeys_Updated);
	self.HeaderNonUpdatingKeys_Version := if(le.HeaderNonUpdatingKeys_Version <> '', le.HeaderNonUpdatingKeys_Version, ri.HeaderNonUpdatingKeys_Version);
	self.HeaderNonUpdatingKeys_Updated := if(le.HeaderNonUpdatingKeys_Updated <> '', le.HeaderNonUpdatingKeys_Updated, ri.HeaderNonUpdatingKeys_Updated);
	self.HealthHDRKeys_Version := if(le.HealthHDRKeys_Version <> '', le.HealthHDRKeys_Version, ri.HealthHDRKeys_Version);
	self.HealthHDRKeys_Updated := if(le.HealthHDRKeys_Updated <> '', le.HealthHDRKeys_Updated, ri.HealthHDRKeys_Updated);
	self.HMSOrgKeys_Version := if(le.HMSOrgKeys_Version <> '', le.HMSOrgKeys_Version, ri.HMSOrgKeys_Version);
	self.HMSOrgKeys_Updated := if(le.HMSOrgKeys_Updated <> '', le.HMSOrgKeys_Updated, ri.HMSOrgKeys_Updated);
	self.HMSOrgRelationsKeys_Version := if(le.HMSOrgRelationsKeys_Version <> '', le.HMSOrgRelationsKeys_Version, ri.HMSOrgRelationsKeys_Version);
	self.HMSOrgRelationsKeys_Updated := if(le.HMSOrgRelationsKeys_Updated <> '', le.HMSOrgRelationsKeys_Updated, ri.HMSOrgRelationsKeys_Updated);
	self.HMSProviderPIIDKeys_Version := if(le.HMSProviderPIIDKeys_Version <> '', le.HMSProviderPIIDKeys_Version, ri.HMSProviderPIIDKeys_Version);
	self.HMSProviderPIIDKeys_Updated := if(le.HMSProviderPIIDKeys_Updated <> '', le.HMSProviderPIIDKeys_Updated, ri.HMSProviderPIIDKeys_Updated);
	self.HMSStateLicenseKeys_Version := if(le.HMSStateLicenseKeys_Version <> '', le.HMSStateLicenseKeys_Version, ri.HMSStateLicenseKeys_Version);
	self.HMSStateLicenseKeys_Updated := if(le.HMSStateLicenseKeys_Updated <> '', le.HMSStateLicenseKeys_Updated, ri.HMSStateLicenseKeys_Updated);
	self.ICDKeys_Version := if(le.ICDKeys_Version <> '', le.ICDKeys_Version, ri.ICDKeys_Version);
	self.ICDKeys_Updated := if(le.ICDKeys_Updated <> '', le.ICDKeys_Updated, ri.ICDKeys_Updated);
	self.ImpulseEmailKeys_Version := if(le.ImpulseEmailKeys_Version <> '', le.ImpulseEmailKeys_Version, ri.ImpulseEmailKeys_Version);
	self.ImpulseEmailKeys_Updated := if(le.ImpulseEmailKeys_Updated <> '', le.ImpulseEmailKeys_Updated, ri.ImpulseEmailKeys_Updated);
	self.InfutorcidKeys_Version := if(le.InfutorcidKeys_Version <> '', le.InfutorcidKeys_Version, ri.InfutorcidKeys_Version);
	self.InfutorcidKeys_Updated := if(le.InfutorcidKeys_Updated <> '', le.InfutorcidKeys_Updated, ri.InfutorcidKeys_Updated);
	self.InfutorKeys_Version := if(le.InfutorKeys_Version <> '', le.InfutorKeys_Version, ri.InfutorKeys_Version);
	self.InfutorKeys_Updated := if(le.InfutorKeys_Updated <> '', le.InfutorKeys_Updated, ri.InfutorKeys_Updated);
	self.InfutorNARBKeys_Version := if(le.InfutorNARBKeys_Version <> '', le.InfutorNARBKeys_Version, ri.InfutorNARBKeys_Version);
	self.InfutorNARBKeys_Updated := if(le.InfutorNARBKeys_Updated <> '', le.InfutorNARBKeys_Updated, ri.InfutorNARBKeys_Updated);
	self.InfutorNARCKeys_Version := if(le.InfutorNARCKeys_Version <> '', le.InfutorNARCKeys_Version, ri.InfutorNARCKeys_Version);
	self.InfutorNARCKeys_Updated := if(le.InfutorNARCKeys_Updated <> '', le.InfutorNARCKeys_Updated, ri.InfutorNARCKeys_Updated);
	self.IngenixKeys_Version := if(le.IngenixKeys_Version <> '', le.IngenixKeys_Version, ri.IngenixKeys_Version);
	self.IngenixKeys_Updated := if(le.IngenixKeys_Updated <> '', le.IngenixKeys_Updated, ri.IngenixKeys_Updated);
	self.InquirytableKeys_Version := if(le.InquirytableKeys_Version <> '', le.InquirytableKeys_Version, ri.InquirytableKeys_Version);
	self.InquirytableKeys_Updated := if(le.InquirytableKeys_Updated <> '', le.InquirytableKeys_Updated, ri.InquirytableKeys_Updated);
	self.InquiryTableUpdateKeys_Version := if(le.InquiryTableUpdateKeys_Version <> '', le.InquiryTableUpdateKeys_Version, ri.InquiryTableUpdateKeys_Version);
	self.InquiryTableUpdateKeys_Updated := if(le.InquiryTableUpdateKeys_Updated <> '', le.InquiryTableUpdateKeys_Updated, ri.InquiryTableUpdateKeys_Updated);
	self.InstantIDArchiveKeys_Version := if(le.InstantIDArchiveKeys_Version <> '', le.InstantIDArchiveKeys_Version, ri.InstantIDArchiveKeys_Version);
	self.InstantIDArchiveKeys_Updated := if(le.InstantIDArchiveKeys_Updated <> '', le.InstantIDArchiveKeys_Updated, ri.InstantIDArchiveKeys_Updated);
	self.InsuranceCertKeys_Version := if(le.InsuranceCertKeys_Version <> '', le.InsuranceCertKeys_Version, ri.InsuranceCertKeys_Version);
	self.InsuranceCertKeys_Updated := if(le.InsuranceCertKeys_Updated <> '', le.InsuranceCertKeys_Updated, ri.InsuranceCertKeys_Updated);
	self.IP_MetadataKeys_Version := if(le.IP_MetadataKeys_Version <> '', le.IP_MetadataKeys_Version, ri.IP_MetadataKeys_Version);
	self.IP_MetadataKeys_Updated := if(le.IP_MetadataKeys_Updated <> '', le.IP_MetadataKeys_Updated, ri.IP_MetadataKeys_Updated);
	self.IRSKeys_Version := if(le.IRSKeys_Version <> '', le.IRSKeys_Version, ri.IRSKeys_Version);
	self.IRSKeys_Updated := if(le.IRSKeys_Updated <> '', le.IRSKeys_Updated, ri.IRSKeys_Updated);
	self.LabDIDMappingKeys_Version := if(le.LabDIDMappingKeys_Version <> '', le.LabDIDMappingKeys_Version, ri.LabDIDMappingKeys_Version);
	self.LabDIDMappingKeys_Updated := if(le.LabDIDMappingKeys_Updated <> '', le.LabDIDMappingKeys_Updated, ri.LabDIDMappingKeys_Updated);
	self.LaborActionsEBSAKeys_Version := if(le.LaborActionsEBSAKeys_Version <> '', le.LaborActionsEBSAKeys_Version, ri.LaborActionsEBSAKeys_Version);
	self.LaborActionsEBSAKeys_Updated := if(le.LaborActionsEBSAKeys_Updated <> '', le.LaborActionsEBSAKeys_Updated, ri.LaborActionsEBSAKeys_Updated);
	self.LaborActionsMSHAKeys_Version := if(le.LaborActionsMSHAKeys_Version <> '', le.LaborActionsMSHAKeys_Version, ri.LaborActionsMSHAKeys_Version);
	self.LaborActionsMSHAKeys_Updated := if(le.LaborActionsMSHAKeys_Updated <> '', le.LaborActionsMSHAKeys_Updated, ri.LaborActionsMSHAKeys_Updated);
	self.LaborActionsWHDKeys_Version := if(le.LaborActionsWHDKeys_Version <> '', le.LaborActionsWHDKeys_Version, ri.LaborActionsWHDKeys_Version);
	self.LaborActionsWHDKeys_Updated := if(le.LaborActionsWHDKeys_Updated <> '', le.LaborActionsWHDKeys_Updated, ri.LaborActionsWHDKeys_Updated);
	self.LiensV2Keys_Version := if(le.LiensV2Keys_Version <> '', le.LiensV2Keys_Version, ri.LiensV2Keys_Version);
	self.LiensV2Keys_Updated := if(le.LiensV2Keys_Updated <> '', le.LiensV2Keys_Updated, ri.LiensV2Keys_Updated);
	self.LitigiousDebtorKeys_Version := if(le.LitigiousDebtorKeys_Version <> '', le.LitigiousDebtorKeys_Version, ri.LitigiousDebtorKeys_Version);
	self.LitigiousDebtorKeys_Updated := if(le.LitigiousDebtorKeys_Updated <> '', le.LitigiousDebtorKeys_Updated, ri.LitigiousDebtorKeys_Updated);
	self.LNPropertyV2FullKeys_Version := if(le.LNPropertyV2FullKeys_Version <> '', le.LNPropertyV2FullKeys_Version, ri.LNPropertyV2FullKeys_Version);
	self.LNPropertyV2FullKeys_Updated := if(le.LNPropertyV2FullKeys_Updated <> '', le.LNPropertyV2FullKeys_Updated, ri.LNPropertyV2FullKeys_Updated);
	self.LNPropertyV2Keys_Version := if(le.LNPropertyV2Keys_Version <> '', le.LNPropertyV2Keys_Version, ri.LNPropertyV2Keys_Version);
	self.LNPropertyV2Keys_Updated := if(le.LNPropertyV2Keys_Updated <> '', le.LNPropertyV2Keys_Updated, ri.LNPropertyV2Keys_Updated);
	self.LocationIDKeys_Version := if(le.LocationIDKeys_Version <> '', le.LocationIDKeys_Version, ri.LocationIDKeys_Version);
	self.LocationIDKeys_Updated := if(le.LocationIDKeys_Updated <> '', le.LocationIDKeys_Updated, ri.LocationIDKeys_Updated);
	self.MariKeys_Version := if(le.MariKeys_Version <> '', le.MariKeys_Version, ri.MariKeys_Version);
	self.MariKeys_Updated := if(le.MariKeys_Updated <> '', le.MariKeys_Updated, ri.MariKeys_Updated);
	self.MarketingHeaderKeys_Version := if(le.MarketingHeaderKeys_Version <> '', le.MarketingHeaderKeys_Version, ri.MarketingHeaderKeys_Version);
	self.MarketingHeaderKeys_Updated := if(le.MarketingHeaderKeys_Updated <> '', le.MarketingHeaderKeys_Updated, ri.MarketingHeaderKeys_Updated);
	self.MDV2Keys_Version := if(le.MDV2Keys_Version <> '', le.MDV2Keys_Version, ri.MDV2Keys_Version);
	self.MDV2Keys_Updated := if(le.MDV2Keys_Updated <> '', le.MDV2Keys_Updated, ri.MDV2Keys_Updated);
	self.MedschoolKeys_Version := if(le.MedschoolKeys_Version <> '', le.MedschoolKeys_Version, ri.MedschoolKeys_Version);
	self.MedschoolKeys_Updated := if(le.MedschoolKeys_Updated <> '', le.MedschoolKeys_Updated, ri.MedschoolKeys_Updated);
	self.MFindKeys_Version := if(le.MFindKeys_Version <> '', le.MFindKeys_Version, ri.MFindKeys_Version);
	self.MFindKeys_Updated := if(le.MFindKeys_Updated <> '', le.MFindKeys_Updated, ri.MFindKeys_Updated);
	self.MMCPKeys_Version := if(le.MMCPKeys_Version <> '', le.MMCPKeys_Version, ri.MMCPKeys_Version);
	self.MMCPKeys_Updated := if(le.MMCPKeys_Updated <> '', le.MMCPKeys_Updated, ri.MMCPKeys_Updated);
	self.ModelsKeys_Version := if(le.ModelsKeys_Version <> '', le.ModelsKeys_Version, ri.ModelsKeys_Version);
	self.ModelsKeys_Updated := if(le.ModelsKeys_Updated <> '', le.ModelsKeys_Updated, ri.ModelsKeys_Updated);
	self.MXDocketKeys_Version := if(le.MXDocketKeys_Version <> '', le.MXDocketKeys_Version, ri.MXDocketKeys_Version);
	self.MXDocketKeys_Updated := if(le.MXDocketKeys_Updated <> '', le.MXDocketKeys_Updated, ri.MXDocketKeys_Updated);
	self.MXNamesKeys_Version := if(le.MXNamesKeys_Version <> '', le.MXNamesKeys_Version, ri.MXNamesKeys_Version);
	self.MXNamesKeys_Updated := if(le.MXNamesKeys_Updated <> '', le.MXNamesKeys_Updated, ri.MXNamesKeys_Updated);
	self.MXProfessionKeys_Version := if(le.MXProfessionKeys_Version <> '', le.MXProfessionKeys_Version, ri.MXProfessionKeys_Version);
	self.MXProfessionKeys_Updated := if(le.MXProfessionKeys_Updated <> '', le.MXProfessionKeys_Updated, ri.MXProfessionKeys_Updated);
	self.Nac2_TestKeys_Version := if(le.Nac2_TestKeys_Version <> '', le.Nac2_TestKeys_Version, ri.Nac2_TestKeys_Version);
	self.Nac2_TestKeys_Updated := if(le.Nac2_TestKeys_Updated <> '', le.Nac2_TestKeys_Updated, ri.Nac2_TestKeys_Updated);
	self.NAC2Keys_Version := if(le.NAC2Keys_Version <> '', le.NAC2Keys_Version, ri.NAC2Keys_Version);
	self.NAC2Keys_Updated := if(le.NAC2Keys_Updated <> '', le.NAC2Keys_Updated, ri.NAC2Keys_Updated);
	self.NACKeys_Version := if(le.NACKeys_Version <> '', le.NACKeys_Version, ri.NACKeys_Version);
	self.NACKeys_Updated := if(le.NACKeys_Updated <> '', le.NACKeys_Updated, ri.NACKeys_Updated);
	self.NCPDPKeys_Version := if(le.NCPDPKeys_Version <> '', le.NCPDPKeys_Version, ri.NCPDPKeys_Version);
	self.NCPDPKeys_Updated := if(le.NCPDPKeys_Updated <> '', le.NCPDPKeys_Updated, ri.NCPDPKeys_Updated);
	self.NDRKeys_Version := if(le.NDRKeys_Version <> '', le.NDRKeys_Version, ri.NDRKeys_Version);
	self.NDRKeys_Updated := if(le.NDRKeys_Updated <> '', le.NDRKeys_Updated, ri.NDRKeys_Updated);
	self.NeighborhoodKeys_Version := if(le.NeighborhoodKeys_Version <> '', le.NeighborhoodKeys_Version, ri.NeighborhoodKeys_Version);
	self.NeighborhoodKeys_Updated := if(le.NeighborhoodKeys_Updated <> '', le.NeighborhoodKeys_Updated, ri.NeighborhoodKeys_Updated);
	self.NonUpdatingKeys_Version := if(le.NonUpdatingKeys_Version <> '', le.NonUpdatingKeys_Version, ri.NonUpdatingKeys_Version);
	self.NonUpdatingKeys_Updated := if(le.NonUpdatingKeys_Updated <> '', le.NonUpdatingKeys_Updated, ri.NonUpdatingKeys_Updated);
	self.NppesKeys_Version := if(le.NppesKeys_Version <> '', le.NppesKeys_Version, ri.NppesKeys_Version);
	self.NppesKeys_Updated := if(le.NppesKeys_Updated <> '', le.NppesKeys_Updated, ri.NppesKeys_Updated);
	self.OfficialRecordsKeys_Version := if(le.OfficialRecordsKeys_Version <> '', le.OfficialRecordsKeys_Version, ri.OfficialRecordsKeys_Version);
	self.OfficialRecordsKeys_Updated := if(le.OfficialRecordsKeys_Updated <> '', le.OfficialRecordsKeys_Updated, ri.OfficialRecordsKeys_Updated);
	self.OIGKeys_Version := if(le.OIGKeys_Version <> '', le.OIGKeys_Version, ri.OIGKeys_Version);
	self.OIGKeys_Updated := if(le.OIGKeys_Updated <> '', le.OIGKeys_Updated, ri.OIGKeys_Updated);
	self.OneClickDataKeys_Version := if(le.OneClickDataKeys_Version <> '', le.OneClickDataKeys_Version, ri.OneClickDataKeys_Version);
	self.OneClickDataKeys_Updated := if(le.OneClickDataKeys_Updated <> '', le.OneClickDataKeys_Updated, ri.OneClickDataKeys_Updated);
	self.OshairKeys_Version := if(le.OshairKeys_Version <> '', le.OshairKeys_Version, ri.OshairKeys_Version);
	self.OshairKeys_Updated := if(le.OshairKeys_Updated <> '', le.OshairKeys_Updated, ri.OshairKeys_Updated);
	self.OverrideKeys_Version := if(le.OverrideKeys_Version <> '', le.OverrideKeys_Version, ri.OverrideKeys_Version);
	self.OverrideKeys_Updated := if(le.OverrideKeys_Updated <> '', le.OverrideKeys_Updated, ri.OverrideKeys_Updated);
	self.PatriotKeys_Version := if(le.PatriotKeys_Version <> '', le.PatriotKeys_Version, ri.PatriotKeys_Version);
	self.PatriotKeys_Updated := if(le.PatriotKeys_Updated <> '', le.PatriotKeys_Updated, ri.PatriotKeys_Updated);
	self.PAWV2Keys_Version := if(le.PAWV2Keys_Version <> '', le.PAWV2Keys_Version, ri.PAWV2Keys_Version);
	self.PAWV2Keys_Updated := if(le.PAWV2Keys_Updated <> '', le.PAWV2Keys_Updated, ri.PAWV2Keys_Updated);
	self.PCNSRKeys_Version := if(le.PCNSRKeys_Version <> '', le.PCNSRKeys_Version, ri.PCNSRKeys_Version);
	self.PCNSRKeys_Updated := if(le.PCNSRKeys_Updated <> '', le.PCNSRKeys_Updated, ri.PCNSRKeys_Updated);
	self.PersonAncillaryKeys_Version := if(le.PersonAncillaryKeys_Version <> '', le.PersonAncillaryKeys_Version, ri.PersonAncillaryKeys_Version);
	self.PersonAncillaryKeys_Updated := if(le.PersonAncillaryKeys_Updated <> '', le.PersonAncillaryKeys_Updated, ri.PersonAncillaryKeys_Updated);
	self.PersonHeaderKeys_Version := if(le.PersonHeaderKeys_Version <> '', le.PersonHeaderKeys_Version, ri.PersonHeaderKeys_Version);
	self.PersonHeaderKeys_Updated := if(le.PersonHeaderKeys_Updated <> '', le.PersonHeaderKeys_Updated, ri.PersonHeaderKeys_Updated);
	self.PersonHeaderLookupKeys_Version := if(le.PersonHeaderLookupKeys_Version <> '', le.PersonHeaderLookupKeys_Version, ri.PersonHeaderLookupKeys_Version);
	self.PersonHeaderLookupKeys_Updated := if(le.PersonHeaderLookupKeys_Updated <> '', le.PersonHeaderLookupKeys_Updated, ri.PersonHeaderLookupKeys_Updated);
	self.PersonHeaderWeeklyKeys_Version := if(le.PersonHeaderWeeklyKeys_Version <> '', le.PersonHeaderWeeklyKeys_Version, ri.PersonHeaderWeeklyKeys_Version);
	self.PersonHeaderWeeklyKeys_Updated := if(le.PersonHeaderWeeklyKeys_Updated <> '', le.PersonHeaderWeeklyKeys_Updated, ri.PersonHeaderWeeklyKeys_Updated);
	self.PersonLABKeys_Version := if(le.PersonLABKeys_Version <> '', le.PersonLABKeys_Version, ri.PersonLABKeys_Version);
	self.PersonLABKeys_Updated := if(le.PersonLABKeys_Updated <> '', le.PersonLABKeys_Updated, ri.PersonLABKeys_Updated);
	self.PersonSlimsortKeys_Version := if(le.PersonSlimsortKeys_Version <> '', le.PersonSlimsortKeys_Version, ri.PersonSlimsortKeys_Version);
	self.PersonSlimsortKeys_Updated := if(le.PersonSlimsortKeys_Updated <> '', le.PersonSlimsortKeys_Updated, ri.PersonSlimsortKeys_Updated);
	self.PhoneBlacklistKeys_Version := if(le.PhoneBlacklistKeys_Version <> '', le.PhoneBlacklistKeys_Version, ri.PhoneBlacklistKeys_Version);
	self.PhoneBlacklistKeys_Updated := if(le.PhoneBlacklistKeys_Updated <> '', le.PhoneBlacklistKeys_Updated, ri.PhoneBlacklistKeys_Updated);
	self.PhoneFeedbackKeys_Version := if(le.PhoneFeedbackKeys_Version <> '', le.PhoneFeedbackKeys_Version, ri.PhoneFeedbackKeys_Version);
	self.PhoneFeedbackKeys_Updated := if(le.PhoneFeedbackKeys_Updated <> '', le.PhoneFeedbackKeys_Updated, ri.PhoneFeedbackKeys_Updated);
	self.PhoneFinderRptDeltaKeys_Version := if(le.PhoneFinderRptDeltaKeys_Version <> '', le.PhoneFinderRptDeltaKeys_Version, ri.PhoneFinderRptDeltaKeys_Version);
	self.PhoneFinderRptDeltaKeys_Updated := if(le.PhoneFinderRptDeltaKeys_Updated <> '', le.PhoneFinderRptDeltaKeys_Updated, ri.PhoneFinderRptDeltaKeys_Updated);
	self.PhoneFraudKeys_Version := if(le.PhoneFraudKeys_Version <> '', le.PhoneFraudKeys_Version, ri.PhoneFraudKeys_Version);
	self.PhoneFraudKeys_Updated := if(le.PhoneFraudKeys_Updated <> '', le.PhoneFraudKeys_Updated, ri.PhoneFraudKeys_Updated);
	self.PhonemartKeys_Version := if(le.PhonemartKeys_Version <> '', le.PhonemartKeys_Version, ri.PhonemartKeys_Version);
	self.PhonemartKeys_Updated := if(le.PhonemartKeys_Updated <> '', le.PhonemartKeys_Updated, ri.PhonemartKeys_Updated);
	self.PhonesMetadataKeys_Version := if(le.PhonesMetadataKeys_Version <> '', le.PhonesMetadataKeys_Version, ri.PhonesMetadataKeys_Version);
	self.PhonesMetadataKeys_Updated := if(le.PhonesMetadataKeys_Updated <> '', le.PhonesMetadataKeys_Updated, ri.PhonesMetadataKeys_Updated);
	self.PhonesPlusV2Keys_Version := if(le.PhonesPlusV2Keys_Version <> '', le.PhonesPlusV2Keys_Version, ri.PhonesPlusV2Keys_Version);
	self.PhonesPlusV2Keys_Updated := if(le.PhonesPlusV2Keys_Updated <> '', le.PhonesPlusV2Keys_Updated, ri.PhonesPlusV2Keys_Updated);
	self.POEKeys_Version := if(le.POEKeys_Version <> '', le.POEKeys_Version, ri.POEKeys_Version);
	self.POEKeys_Updated := if(le.POEKeys_Updated <> '', le.POEKeys_Updated, ri.POEKeys_Updated);
	self.POEsFromEmailsKeys_Version := if(le.POEsFromEmailsKeys_Version <> '', le.POEsFromEmailsKeys_Version, ri.POEsFromEmailsKeys_Version);
	self.POEsFromEmailsKeys_Updated := if(le.POEsFromEmailsKeys_Updated <> '', le.POEsFromEmailsKeys_Updated, ri.POEsFromEmailsKeys_Updated);
	self.ProfLicKeys_Version := if(le.ProfLicKeys_Version <> '', le.ProfLicKeys_Version, ri.ProfLicKeys_Version);
	self.ProfLicKeys_Updated := if(le.ProfLicKeys_Updated <> '', le.ProfLicKeys_Updated, ri.ProfLicKeys_Updated);
	self.PropertyInformationKeys_Version := if(le.PropertyInformationKeys_Version <> '', le.PropertyInformationKeys_Version, ri.PropertyInformationKeys_Version);
	self.PropertyInformationKeys_Updated := if(le.PropertyInformationKeys_Updated <> '', le.PropertyInformationKeys_Updated, ri.PropertyInformationKeys_Updated);
	self.PSSKeys_Version := if(le.PSSKeys_Version <> '', le.PSSKeys_Version, ri.PSSKeys_Version);
	self.PSSKeys_Updated := if(le.PSSKeys_Updated <> '', le.PSSKeys_Updated, ri.PSSKeys_Updated);
	self.PullZipKeys_Version := if(le.PullZipKeys_Version <> '', le.PullZipKeys_Version, ri.PullZipKeys_Version);
	self.PullZipKeys_Updated := if(le.PullZipKeys_Updated <> '', le.PullZipKeys_Updated, ri.PullZipKeys_Updated);
	self.QHsourceKeys_Version := if(le.QHsourceKeys_Version <> '', le.QHsourceKeys_Version, ri.QHsourceKeys_Version);
	self.QHsourceKeys_Updated := if(le.QHsourceKeys_Updated <> '', le.QHsourceKeys_Updated, ri.QHsourceKeys_Updated);
	self.QsentKeys_Version := if(le.QsentKeys_Version <> '', le.QsentKeys_Version, ri.QsentKeys_Version);
	self.QsentKeys_Updated := if(le.QsentKeys_Updated <> '', le.QsentKeys_Updated, ri.QsentKeys_Updated);
	self.QuickHeaderKeys_Version := if(le.QuickHeaderKeys_Version <> '', le.QuickHeaderKeys_Version, ri.QuickHeaderKeys_Version);
	self.QuickHeaderKeys_Updated := if(le.QuickHeaderKeys_Updated <> '', le.QuickHeaderKeys_Updated, ri.QuickHeaderKeys_Updated);
	self.RelativeV3Keys_Version := if(le.RelativeV3Keys_Version <> '', le.RelativeV3Keys_Version, ri.RelativeV3Keys_Version);
	self.RelativeV3Keys_Updated := if(le.RelativeV3Keys_Updated <> '', le.RelativeV3Keys_Updated, ri.RelativeV3Keys_Updated);
	self.RelV3SuppKeys_Version := if(le.RelV3SuppKeys_Version <> '', le.RelV3SuppKeys_Version, ri.RelV3SuppKeys_Version);
	self.RelV3SuppKeys_Updated := if(le.RelV3SuppKeys_Updated <> '', le.RelV3SuppKeys_Updated, ri.RelV3SuppKeys_Updated);
	self.RemoteLinkingKeys_Version := if(le.RemoteLinkingKeys_Version <> '', le.RemoteLinkingKeys_Version, ri.RemoteLinkingKeys_Version);
	self.RemoteLinkingKeys_Updated := if(le.RemoteLinkingKeys_Updated <> '', le.RemoteLinkingKeys_Updated, ri.RemoteLinkingKeys_Updated);
	self.RiskTableKeys_Version := if(le.RiskTableKeys_Version <> '', le.RiskTableKeys_Version, ri.RiskTableKeys_Version);
	self.RiskTableKeys_Updated := if(le.RiskTableKeys_Updated <> '', le.RiskTableKeys_Updated, ri.RiskTableKeys_Updated);
	self.SalesChannelKeys_Version := if(le.SalesChannelKeys_Version <> '', le.SalesChannelKeys_Version, ri.SalesChannelKeys_Version);
	self.SalesChannelKeys_Updated := if(le.SalesChannelKeys_Updated <> '', le.SalesChannelKeys_Updated, ri.SalesChannelKeys_Updated);
	self.SAMKeys_Version := if(le.SAMKeys_Version <> '', le.SAMKeys_Version, ri.SAMKeys_Version);
	self.SAMKeys_Updated := if(le.SAMKeys_Updated <> '', le.SAMKeys_Updated, ri.SAMKeys_Updated);
	self.SANCTN_NPKeys_Version := if(le.SANCTN_NPKeys_Version <> '', le.SANCTN_NPKeys_Version, ri.SANCTN_NPKeys_Version);
	self.SANCTN_NPKeys_Updated := if(le.SANCTN_NPKeys_Updated <> '', le.SANCTN_NPKeys_Updated, ri.SANCTN_NPKeys_Updated);
	self.SanctnKeys_Version := if(le.SanctnKeys_Version <> '', le.SanctnKeys_Version, ri.SanctnKeys_Version);
	self.SanctnKeys_Updated := if(le.SanctnKeys_Updated <> '', le.SanctnKeys_Updated, ri.SanctnKeys_Updated);
	self.SAOKeys_Version := if(le.SAOKeys_Version <> '', le.SAOKeys_Version, ri.SAOKeys_Version);
	self.SAOKeys_Updated := if(le.SAOKeys_Updated <> '', le.SAOKeys_Updated, ri.SAOKeys_Updated);
	self.SBFECVKeys_Version := if(le.SBFECVKeys_Version <> '', le.SBFECVKeys_Version, ri.SBFECVKeys_Version);
	self.SBFECVKeys_Updated := if(le.SBFECVKeys_Updated <> '', le.SBFECVKeys_Updated, ri.SBFECVKeys_Updated);
	self.SBFECVScoringKeys_Version := if(le.SBFECVScoringKeys_Version <> '', le.SBFECVScoringKeys_Version, ri.SBFECVScoringKeys_Version);
	self.SBFECVScoringKeys_Updated := if(le.SBFECVScoringKeys_Updated <> '', le.SBFECVScoringKeys_Updated, ri.SBFECVScoringKeys_Updated);
	self.SearchToolKeys_Version := if(le.SearchToolKeys_Version <> '', le.SearchToolKeys_Version, ri.SearchToolKeys_Version);
	self.SearchToolKeys_Updated := if(le.SearchToolKeys_Updated <> '', le.SearchToolKeys_Updated, ri.SearchToolKeys_Updated);
	self.SeedKeys_Version := if(le.SeedKeys_Version <> '', le.SeedKeys_Version, ri.SeedKeys_Version);
	self.SeedKeys_Updated := if(le.SeedKeys_Updated <> '', le.SeedKeys_Updated, ri.SeedKeys_Updated);
	self.SexOffenderImagesKeys_Version := if(le.SexOffenderImagesKeys_Version <> '', le.SexOffenderImagesKeys_Version, ri.SexOffenderImagesKeys_Version);
	self.SexOffenderImagesKeys_Updated := if(le.SexOffenderImagesKeys_Updated <> '', le.SexOffenderImagesKeys_Updated, ri.SexOffenderImagesKeys_Updated);
	self.SexOffenderKeys_Version := if(le.SexOffenderKeys_Version <> '', le.SexOffenderKeys_Version, ri.SexOffenderKeys_Version);
	self.SexOffenderKeys_Updated := if(le.SexOffenderKeys_Updated <> '', le.SexOffenderKeys_Updated, ri.SexOffenderKeys_Updated);
	self.SheilaGrecoKeys_Version := if(le.SheilaGrecoKeys_Version <> '', le.SheilaGrecoKeys_Version, ri.SheilaGrecoKeys_Version);
	self.SheilaGrecoKeys_Updated := if(le.SheilaGrecoKeys_Updated <> '', le.SheilaGrecoKeys_Updated, ri.SheilaGrecoKeys_Updated);
	self.SICCodeKeys_Version := if(le.SICCodeKeys_Version <> '', le.SICCodeKeys_Version, ri.SICCodeKeys_Version);
	self.SICCodeKeys_Updated := if(le.SICCodeKeys_Updated <> '', le.SICCodeKeys_Updated, ri.SICCodeKeys_Updated);
	self.SiteSecISMSKeys_Version := if(le.SiteSecISMSKeys_Version <> '', le.SiteSecISMSKeys_Version, ri.SiteSecISMSKeys_Version);
	self.SiteSecISMSKeys_Updated := if(le.SiteSecISMSKeys_Updated <> '', le.SiteSecISMSKeys_Updated, ri.SiteSecISMSKeys_Updated);
	self.SmartJuryKeys_Version := if(le.SmartJuryKeys_Version <> '', le.SmartJuryKeys_Version, ri.SmartJuryKeys_Version);
	self.SmartJuryKeys_Updated := if(le.SmartJuryKeys_Updated <> '', le.SmartJuryKeys_Updated, ri.SmartJuryKeys_Updated);
	self.SNAKeys_Version := if(le.SNAKeys_Version <> '', le.SNAKeys_Version, ri.SNAKeys_Version);
	self.SNAKeys_Updated := if(le.SNAKeys_Updated <> '', le.SNAKeys_Updated, ri.SNAKeys_Updated);
	self.SourceBKeys_Version := if(le.SourceBKeys_Version <> '', le.SourceBKeys_Version, ri.SourceBKeys_Version);
	self.SourceBKeys_Updated := if(le.SourceBKeys_Updated <> '', le.SourceBKeys_Updated, ri.SourceBKeys_Updated);
	self.SourceKeys_Version := if(le.SourceKeys_Version <> '', le.SourceKeys_Version, ri.SourceKeys_Version);
	self.SourceKeys_Updated := if(le.SourceKeys_Updated <> '', le.SourceKeys_Updated, ri.SourceKeys_Updated);
	self.SpokeKeys_Version := if(le.SpokeKeys_Version <> '', le.SpokeKeys_Version, ri.SpokeKeys_Version);
	self.SpokeKeys_Updated := if(le.SpokeKeys_Updated <> '', le.SpokeKeys_Updated, ri.SpokeKeys_Updated);
	self.SSNIssue2Keys_Version := if(le.SSNIssue2Keys_Version <> '', le.SSNIssue2Keys_Version, ri.SSNIssue2Keys_Version);
	self.SSNIssue2Keys_Updated := if(le.SSNIssue2Keys_Updated <> '', le.SSNIssue2Keys_Updated, ri.SSNIssue2Keys_Updated);
	self.StatedeathKeys_Version := if(le.StatedeathKeys_Version <> '', le.StatedeathKeys_Version, ri.StatedeathKeys_Version);
	self.StatedeathKeys_Updated := if(le.StatedeathKeys_Updated <> '', le.StatedeathKeys_Updated, ri.StatedeathKeys_Updated);
	self.SuppressionKeys_Version := if(le.SuppressionKeys_Version <> '', le.SuppressionKeys_Version, ri.SuppressionKeys_Version);
	self.SuppressionKeys_Updated := if(le.SuppressionKeys_Updated <> '', le.SuppressionKeys_Updated, ri.SuppressionKeys_Updated);
	self.TargusKeys_Version := if(le.TargusKeys_Version <> '', le.TargusKeys_Version, ri.TargusKeys_Version);
	self.TargusKeys_Updated := if(le.TargusKeys_Updated <> '', le.TargusKeys_Updated, ri.TargusKeys_Updated);
	self.TaxproKeys_Version := if(le.TaxproKeys_Version <> '', le.TaxproKeys_Version, ri.TaxproKeys_Version);
	self.TaxproKeys_Updated := if(le.TaxproKeys_Updated <> '', le.TaxproKeys_Updated, ri.TaxproKeys_Updated);
	self.TelcordiaTdsKeys_Version := if(le.TelcordiaTdsKeys_Version <> '', le.TelcordiaTdsKeys_Version, ri.TelcordiaTdsKeys_Version);
	self.TelcordiaTdsKeys_Updated := if(le.TelcordiaTdsKeys_Updated <> '', le.TelcordiaTdsKeys_Updated, ri.TelcordiaTdsKeys_Updated);
	self.TelcordiaTpmKeys_Version := if(le.TelcordiaTpmKeys_Version <> '', le.TelcordiaTpmKeys_Version, ri.TelcordiaTpmKeys_Version);
	self.TelcordiaTpmKeys_Updated := if(le.TelcordiaTpmKeys_Updated <> '', le.TelcordiaTpmKeys_Updated, ri.TelcordiaTpmKeys_Updated);
	self.TestseedBusCRReportKeys_Version := if(le.TestseedBusCRReportKeys_Version <> '', le.TestseedBusCRReportKeys_Version, ri.TestseedBusCRReportKeys_Version);
	self.TestseedBusCRReportKeys_Updated := if(le.TestseedBusCRReportKeys_Updated <> '', le.TestseedBusCRReportKeys_Updated, ri.TestseedBusCRReportKeys_Updated);
	self.TestseedDDReportKeys_Version := if(le.TestseedDDReportKeys_Version <> '', le.TestseedDDReportKeys_Version, ri.TestseedDDReportKeys_Version);
	self.TestseedDDReportKeys_Updated := if(le.TestseedDDReportKeys_Updated <> '', le.TestseedDDReportKeys_Updated, ri.TestseedDDReportKeys_Updated);
	self.TestseedKeys_Version := if(le.TestseedKeys_Version <> '', le.TestseedKeys_Version, ri.TestseedKeys_Version);
	self.TestseedKeys_Updated := if(le.TestseedKeys_Updated <> '', le.TestseedKeys_Updated, ri.TestseedKeys_Updated);
	self.ThriveKeys_Version := if(le.ThriveKeys_Version <> '', le.ThriveKeys_Version, ri.ThriveKeys_Version);
	self.ThriveKeys_Updated := if(le.ThriveKeys_Updated <> '', le.ThriveKeys_Updated, ri.ThriveKeys_Updated);
	self.TrisISPKeys_Version := if(le.TrisISPKeys_Version <> '', le.TrisISPKeys_Version, ri.TrisISPKeys_Version);
	self.TrisISPKeys_Updated := if(le.TrisISPKeys_Updated <> '', le.TrisISPKeys_Updated, ri.TrisISPKeys_Updated);
	self.TxbusKeys_Version := if(le.TxbusKeys_Version <> '', le.TxbusKeys_Version, ri.TxbusKeys_Version);
	self.TxbusKeys_Updated := if(le.TxbusKeys_Updated <> '', le.TxbusKeys_Updated, ri.TxbusKeys_Updated);
	self.UCCV2Keys_Version := if(le.UCCV2Keys_Version <> '', le.UCCV2Keys_Version, ri.UCCV2Keys_Version);
	self.UCCV2Keys_Updated := if(le.UCCV2Keys_Updated <> '', le.UCCV2Keys_Updated, ri.UCCV2Keys_Updated);
	self.UtilityDailyKeys_Version := if(le.UtilityDailyKeys_Version <> '', le.UtilityDailyKeys_Version, ri.UtilityDailyKeys_Version);
	self.UtilityDailyKeys_Updated := if(le.UtilityDailyKeys_Updated <> '', le.UtilityDailyKeys_Updated, ri.UtilityDailyKeys_Updated);
	self.UtilityhvalKeys_Version := if(le.UtilityhvalKeys_Version <> '', le.UtilityhvalKeys_Version, ri.UtilityhvalKeys_Version);
	self.UtilityhvalKeys_Updated := if(le.UtilityhvalKeys_Updated <> '', le.UtilityhvalKeys_Updated, ri.UtilityhvalKeys_Updated);
	self.VehicleV2Keys_Version := if(le.VehicleV2Keys_Version <> '', le.VehicleV2Keys_Version, ri.VehicleV2Keys_Version);
	self.VehicleV2Keys_Updated := if(le.VehicleV2Keys_Updated <> '', le.VehicleV2Keys_Updated, ri.VehicleV2Keys_Updated);
	self.VendorSourceKeys_Version := if(le.VendorSourceKeys_Version <> '', le.VendorSourceKeys_Version, ri.VendorSourceKeys_Version);
	self.VendorSourceKeys_Updated := if(le.VendorSourceKeys_Updated <> '', le.VendorSourceKeys_Updated, ri.VendorSourceKeys_Updated);
	self.Vina_VinKeys_Version := if(le.Vina_VinKeys_Version <> '', le.Vina_VinKeys_Version, ri.Vina_VinKeys_Version);
	self.Vina_VinKeys_Updated := if(le.Vina_VinKeys_Updated <> '', le.Vina_VinKeys_Updated, ri.Vina_VinKeys_Updated);
	self.VotersV2Keys_Version := if(le.VotersV2Keys_Version <> '', le.VotersV2Keys_Version, ri.VotersV2Keys_Version);
	self.VotersV2Keys_Updated := if(le.VotersV2Keys_Updated <> '', le.VotersV2Keys_Updated, ri.VotersV2Keys_Updated);
	self.WatchdogKeys_Version := if(le.WatchdogKeys_Version <> '', le.WatchdogKeys_Version, ri.WatchdogKeys_Version);
	self.WatchdogKeys_Updated := if(le.WatchdogKeys_Updated <> '', le.WatchdogKeys_Updated, ri.WatchdogKeys_Updated);
	self.WatercraftKeys_Version := if(le.WatercraftKeys_Version <> '', le.WatercraftKeys_Version, ri.WatercraftKeys_Version);
	self.WatercraftKeys_Updated := if(le.WatercraftKeys_Updated <> '', le.WatercraftKeys_Updated, ri.WatercraftKeys_Updated);
	self.WhoisKeys_Version := if(le.WhoisKeys_Version <> '', le.WhoisKeys_Version, ri.WhoisKeys_Version);
	self.WhoisKeys_Updated := if(le.WhoisKeys_Updated <> '', le.WhoisKeys_Updated, ri.WhoisKeys_Updated);
	self.WorkersCompensationKeys_Version := if(le.WorkersCompensationKeys_Version <> '', le.WorkersCompensationKeys_Version, ri.WorkersCompensationKeys_Version);
	self.WorkersCompensationKeys_Updated := if(le.WorkersCompensationKeys_Updated <> '', le.WorkersCompensationKeys_Updated, ri.WorkersCompensationKeys_Updated);
	self.WorldCheckKeys_Version := if(le.WorldCheckKeys_Version <> '', le.WorldCheckKeys_Version, ri.WorldCheckKeys_Version);
	self.WorldCheckKeys_Updated := if(le.WorldCheckKeys_Updated <> '', le.WorldCheckKeys_Updated, ri.WorldCheckKeys_Updated);
	self.YellowPagesKeys_Version := if(le.YellowPagesKeys_Version <> '', le.YellowPagesKeys_Version, ri.YellowPagesKeys_Version);
	self.YellowPagesKeys_Updated := if(le.YellowPagesKeys_Updated <> '', le.YellowPagesKeys_Updated, ri.YellowPagesKeys_Updated);
	self.ZipbyCounty2Keys_Version := if(le.ZipbyCounty2Keys_Version <> '', le.ZipbyCounty2Keys_Version, ri.ZipbyCounty2Keys_Version);
	self.ZipbyCounty2Keys_Updated := if(le.ZipbyCounty2Keys_Updated <> '', le.ZipbyCounty2Keys_Updated, ri.ZipbyCounty2Keys_Updated);
	self.ZoomKeys_Version := if(le.ZoomKeys_Version <> '', le.ZoomKeys_Version, ri.ZoomKeys_Version);
	self.ZoomKeys_Updated := if(le.ZoomKeys_Updated <> '', le.ZoomKeys_Updated, ri.ZoomKeys_Updated);
	Self := [];
END;

rolled_yesterday := Rollup(Yesterday_full, rollit(left, right), date);
// output(rolled_yesterday, named('rolled_yesterday'));

Previous_Master := dataset('~scoringqa::out::DDT_CERT_NonFCRA_Master_' + yesterday, NonFCRAMasterLay, thor);

NewMaster := sort(Previous_Master + rolled_yesterday, Date);    //Previous dataset plus yesterday's row, sorted

Return output(NewMaster,,'~scoringqa::out::DDT_CERT_NonFCRA_Master_' + today, thor);


ENDMACRO;