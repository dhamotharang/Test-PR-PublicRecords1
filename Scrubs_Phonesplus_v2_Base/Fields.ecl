IMPORT ut,SALT30;
EXPORT Fields := MODULE
// Processing for each FieldType
EXPORT SALT30.StrType FieldTypeName(UNSIGNED2 i) := CHOOSE(i,'alpha','Comp_name','npa','phone','zip','sex','date','date_alt','Listing_type','phone_type','phone_Usage','conf_score');
EXPORT FieldTypeNum(SALT30.StrType fn) := CASE(fn,'alpha' => 1,'Comp_name' => 2,'npa' => 3,'phone' => 4,'zip' => 5,'sex' => 6,'date' => 7,'date_alt' => 8,'Listing_type' => 9,'phone_type' => 10,'phone_Usage' => 11,'conf_score' => 12,0);
EXPORT MakeFT_alpha(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringfilter(s0,'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\' <>{}[]-^=!+&,./#()'); // Only allow valid symbols
  s2 := SALT30.stringcleanspaces( SALT30.stringsubstituteout(s1,' <>{}[]-^=!+&,./#()',' ') ); // Insert spaces but avoid doubles
  RETURN  s2;
END;
EXPORT InValidFT_alpha(SALT30.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\' <>{}[]-^=!+&,./#()'))),~(LENGTH(TRIM(s)) >= 1));
EXPORT InValidMessageFT_alpha(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInChars('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\' <>{}[]-^=!+&,./#()'),SALT30.HygieneErrors.NotLength('1..'),SALT30.HygieneErrors.Good);
EXPORT MakeFT_Comp_name(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringfilter(s0,'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@"_\' <>{}[]?-^=!+&,./#()'); // Only allow valid symbols
  s2 := SALT30.stringcleanspaces( SALT30.stringsubstituteout(s1,' <>{}[]?-^=!+&,./#()',' ') ); // Insert spaces but avoid doubles
  RETURN  s2;
END;
EXPORT InValidFT_Comp_name(SALT30.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@"_\' <>{}[]?-^=!+&,./#()'))));
EXPORT InValidMessageFT_Comp_name(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInChars('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@"_\' <>{}[]?-^=!+&,./#()'),SALT30.HygieneErrors.Good);
EXPORT MakeFT_npa(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringfilter(s0,'0123456789 '); // Only allow valid symbols
  s2 := SALT30.stringcleanspaces( SALT30.stringsubstituteout(s1,' ',' ') ); // Insert spaces but avoid doubles
  RETURN  s2;
END;
EXPORT InValidFT_npa(SALT30.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'0123456789 '))),~(LENGTH(TRIM(s)) = 3));
EXPORT InValidMessageFT_npa(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInChars('0123456789 '),SALT30.HygieneErrors.NotLength('3'),SALT30.HygieneErrors.NotWithinFile('npa_list'),SALT30.HygieneErrors.Good);
EXPORT MakeFT_phone(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringfilter(s0,'0123456789 '); // Only allow valid symbols
  s2 := SALT30.stringcleanspaces( SALT30.stringsubstituteout(s1,' ',' ') ); // Insert spaces but avoid doubles
  RETURN  s2;
END;
EXPORT InValidFT_phone(SALT30.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'0123456789 '))));
EXPORT InValidMessageFT_phone(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInChars('0123456789 '),SALT30.HygieneErrors.Good);
EXPORT MakeFT_zip(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringfilter(s0,'0123456789'); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_zip(SALT30.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'0123456789'))),~(LENGTH(TRIM(s)) = 0 OR LENGTH(TRIM(s)) = 5 OR LENGTH(TRIM(s)) = 9));
EXPORT InValidMessageFT_zip(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInChars('0123456789'),SALT30.HygieneErrors.NotLength('0,5,9'),SALT30.HygieneErrors.Good);
EXPORT MakeFT_sex(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringcleanspaces( SALT30.stringsubstituteout(s0,' ',' ') ); // Insert spaces but avoid doubles
  RETURN  s1;
END;
EXPORT InValidFT_sex(SALT30.StrType s) := WHICH(((SALT30.StrType) s) NOT IN ['F','M','U','MALE','FEMALE',' ']);
EXPORT InValidMessageFT_sex(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInEnum('F|M|U|MALE|FEMALE| '),SALT30.HygieneErrors.Good);
EXPORT MakeFT_date(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringfilter(s0,'0123456789 '); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_date(SALT30.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'0123456789 '))),~(LENGTH(TRIM(s)) = 0 OR LENGTH(TRIM(s)) = 8));
EXPORT InValidMessageFT_date(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInChars('0123456789 '),SALT30.HygieneErrors.NotLength('0,8'),SALT30.HygieneErrors.Good);
EXPORT MakeFT_date_alt(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringfilter(s0,'0123456789 '); // Only allow valid symbols
  s2 := SALT30.stringcleanspaces( SALT30.stringsubstituteout(s1,' ',' ') ); // Insert spaces but avoid doubles
  RETURN  s2;
END;
EXPORT InValidFT_date_alt(SALT30.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'0123456789 '))),~(LENGTH(TRIM(s)) = 0 OR LENGTH(TRIM(s)) = 1 OR LENGTH(TRIM(s)) = 6 OR LENGTH(TRIM(s)) = 8));
EXPORT InValidMessageFT_date_alt(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInChars('0123456789 '),SALT30.HygieneErrors.NotLength('0,1,6,8'),SALT30.HygieneErrors.Good);
EXPORT MakeFT_Listing_type(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringfilter(s0,'RBPUG '); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_Listing_type(SALT30.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'RBPUG '))));
EXPORT InValidMessageFT_Listing_type(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInChars('RBPUG '),SALT30.HygieneErrors.Good);
EXPORT MakeFT_phone_type(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringfilter(s0,'LVWOPT '); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_phone_type(SALT30.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'LVWOPT '))));
EXPORT InValidMessageFT_phone_type(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInChars('LVWOPT '),SALT30.HygieneErrors.Good);
EXPORT MakeFT_phone_Usage(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringfilter(s0,'PADGMRWSCFHOT '); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_phone_Usage(SALT30.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'PADGMRWSCFHOT '))));
EXPORT InValidMessageFT_phone_Usage(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInChars('PADGMRWSCFHOT '),SALT30.HygieneErrors.Good);
EXPORT MakeFT_conf_score(SALT30.StrType s0) := FUNCTION
  s1 := SALT30.stringfilter(s0,'012345'); // Only allow valid symbols
  RETURN  s1;
END;
EXPORT InValidFT_conf_score(SALT30.StrType s) := WHICH(LENGTH(TRIM(s))<>LENGTH(TRIM(SALT30.StringFilter(s,'012345'))));
EXPORT InValidMessageFT_conf_score(UNSIGNED1 wh) := CHOOSE(wh,SALT30.HygieneErrors.NotInChars('012345'),SALT30.HygieneErrors.Good);
EXPORT SALT30.StrType FieldName(UNSIGNED2 i) := CHOOSE(i,'in_flag','confidencescore','rules','npa','phone7','cellphone','cellphoneidkey','phone7_did_key','pdid','did','did_score','datefirstseen','datelastseen','datevendorlastreported','datevendorfirstreported','dt_nonglb_last_seen','glb_dppa_flag','glb_dppa_all','vendor','src','src_all','src_cnt','src_rule','append_avg_source_conf','append_max_source_conf','append_min_source_conf','append_total_source_conf','orig_dt_last_seen','did_type','origname','address1','address2','address3','origcity','origstate','origzip','orig_phone','dob','agegroup','gender','email','orig_listing_type','listingtype','orig_publish_code','orig_phone_type','orig_phone_usage','company','orig_phone_reg_dt','orig_carrier_code','orig_carrier_name','orig_conf_score','orig_rec_type','clean_company','prim_range','predir','prim_name','addr_suffix','postdir','unit_desig','sec_range','p_city_name','v_city_name','state','zip5','zip4','cart','cr_sort_sz','lot','lot_order','dpbc','chk_digit','rec_type','ace_fips_st','ace_fips_county','geo_lat','geo_long','msa','geo_blk','geo_match','err_stat','title','fname','mname','lname','name_suffix','name_score','bdid','bdid_score','append_npa_effective_dt','append_npa_last_change_dt','append_dialable_ind','append_place_name','append_portability_indicator','append_prior_area_code','append_nonpublished_match','append_ocn','append_time_zone','append_nxx_type','append_coctype','append_scc','append_phone_type','append_company_type','append_phone_use','agreg_listing_type','max_orig_conf_score','min_orig_conf_score','cur_orig_conf_score','activeflag','eda_active_flag','eda_match','eda_phone_dt','eda_did_dt','eda_nm_addr_dt','eda_hist_match','eda_hist_phone_dt','eda_hist_did_dt','eda_hist_nm_addr_dt','append_feedback_phone','append_feedback_phone_dt','append_feedback_phone7_did','append_feedback_phone7_did_dt','append_feedback_phone7_nm_addr','append_feedback_phone7_nm_addr_dt','append_ported_match','append_seen_once_ind','append_indiv_phone_cnt','append_indiv_has_active_eda_phone_flag','append_latest_phone_owner_flag','hhid','hhid_score','phone7_hhid_key','append_best_addr_match_flag','append_best_nm_match_flag','rawaid','cleanaid','current_rec','first_build_date','last_build_date');
EXPORT FieldNum(SALT30.StrType fn) := CASE(fn,'in_flag' => 1,'confidencescore' => 2,'rules' => 3,'npa' => 4,'phone7' => 5,'cellphone' => 6,'cellphoneidkey' => 7,'phone7_did_key' => 8,'pdid' => 9,'did' => 10,'did_score' => 11,'datefirstseen' => 12,'datelastseen' => 13,'datevendorlastreported' => 14,'datevendorfirstreported' => 15,'dt_nonglb_last_seen' => 16,'glb_dppa_flag' => 17,'glb_dppa_all' => 18,'vendor' => 19,'src' => 20,'src_all' => 21,'src_cnt' => 22,'src_rule' => 23,'append_avg_source_conf' => 24,'append_max_source_conf' => 25,'append_min_source_conf' => 26,'append_total_source_conf' => 27,'orig_dt_last_seen' => 28,'did_type' => 29,'origname' => 30,'address1' => 31,'address2' => 32,'address3' => 33,'origcity' => 34,'origstate' => 35,'origzip' => 36,'orig_phone' => 37,'dob' => 38,'agegroup' => 39,'gender' => 40,'email' => 41,'orig_listing_type' => 42,'listingtype' => 43,'orig_publish_code' => 44,'orig_phone_type' => 45,'orig_phone_usage' => 46,'company' => 47,'orig_phone_reg_dt' => 48,'orig_carrier_code' => 49,'orig_carrier_name' => 50,'orig_conf_score' => 51,'orig_rec_type' => 52,'clean_company' => 53,'prim_range' => 54,'predir' => 55,'prim_name' => 56,'addr_suffix' => 57,'postdir' => 58,'unit_desig' => 59,'sec_range' => 60,'p_city_name' => 61,'v_city_name' => 62,'state' => 63,'zip5' => 64,'zip4' => 65,'cart' => 66,'cr_sort_sz' => 67,'lot' => 68,'lot_order' => 69,'dpbc' => 70,'chk_digit' => 71,'rec_type' => 72,'ace_fips_st' => 73,'ace_fips_county' => 74,'geo_lat' => 75,'geo_long' => 76,'msa' => 77,'geo_blk' => 78,'geo_match' => 79,'err_stat' => 80,'title' => 81,'fname' => 82,'mname' => 83,'lname' => 84,'name_suffix' => 85,'name_score' => 86,'bdid' => 87,'bdid_score' => 88,'append_npa_effective_dt' => 89,'append_npa_last_change_dt' => 90,'append_dialable_ind' => 91,'append_place_name' => 92,'append_portability_indicator' => 93,'append_prior_area_code' => 94,'append_nonpublished_match' => 95,'append_ocn' => 96,'append_time_zone' => 97,'append_nxx_type' => 98,'append_coctype' => 99,'append_scc' => 100,'append_phone_type' => 101,'append_company_type' => 102,'append_phone_use' => 103,'agreg_listing_type' => 104,'max_orig_conf_score' => 105,'min_orig_conf_score' => 106,'cur_orig_conf_score' => 107,'activeflag' => 108,'eda_active_flag' => 109,'eda_match' => 110,'eda_phone_dt' => 111,'eda_did_dt' => 112,'eda_nm_addr_dt' => 113,'eda_hist_match' => 114,'eda_hist_phone_dt' => 115,'eda_hist_did_dt' => 116,'eda_hist_nm_addr_dt' => 117,'append_feedback_phone' => 118,'append_feedback_phone_dt' => 119,'append_feedback_phone7_did' => 120,'append_feedback_phone7_did_dt' => 121,'append_feedback_phone7_nm_addr' => 122,'append_feedback_phone7_nm_addr_dt' => 123,'append_ported_match' => 124,'append_seen_once_ind' => 125,'append_indiv_phone_cnt' => 126,'append_indiv_has_active_eda_phone_flag' => 127,'append_latest_phone_owner_flag' => 128,'hhid' => 129,'hhid_score' => 130,'phone7_hhid_key' => 131,'append_best_addr_match_flag' => 132,'append_best_nm_match_flag' => 133,'rawaid' => 134,'cleanaid' => 135,'current_rec' => 136,'first_build_date' => 137,'last_build_date' => 138,0);
//Individual field level validation
EXPORT Make_in_flag(SALT30.StrType s0) := s0;
EXPORT InValid_in_flag(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_in_flag(UNSIGNED1 wh) := '';
EXPORT Make_confidencescore(SALT30.StrType s0) := s0;
EXPORT InValid_confidencescore(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_confidencescore(UNSIGNED1 wh) := '';
EXPORT Make_rules(SALT30.StrType s0) := s0;
EXPORT InValid_rules(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_rules(UNSIGNED1 wh) := '';
EXPORT Make_npa(SALT30.StrType s0) := MakeFT_npa(s0);
EXPORT InValid_npa(SALT30.StrType s) := InValidFT_npa(s);
EXPORT InValidMessage_npa(UNSIGNED1 wh) := InValidMessageFT_npa(wh);
EXPORT Make_phone7(SALT30.StrType s0) := MakeFT_phone(s0);
EXPORT InValid_phone7(SALT30.StrType s) := InValidFT_phone(s);
EXPORT InValidMessage_phone7(UNSIGNED1 wh) := InValidMessageFT_phone(wh);
EXPORT Make_cellphone(SALT30.StrType s0) := MakeFT_phone(s0);
EXPORT InValid_cellphone(SALT30.StrType s) := InValidFT_phone(s);
EXPORT InValidMessage_cellphone(UNSIGNED1 wh) := InValidMessageFT_phone(wh);
EXPORT Make_cellphoneidkey(SALT30.StrType s0) := s0;
EXPORT InValid_cellphoneidkey(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_cellphoneidkey(UNSIGNED1 wh) := '';
EXPORT Make_phone7_did_key(SALT30.StrType s0) := s0;
EXPORT InValid_phone7_did_key(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_phone7_did_key(UNSIGNED1 wh) := '';
EXPORT Make_pdid(SALT30.StrType s0) := s0;
EXPORT InValid_pdid(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_pdid(UNSIGNED1 wh) := '';
EXPORT Make_did(SALT30.StrType s0) := s0;
EXPORT InValid_did(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_did(UNSIGNED1 wh) := '';
EXPORT Make_did_score(SALT30.StrType s0) := s0;
EXPORT InValid_did_score(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_did_score(UNSIGNED1 wh) := '';
EXPORT Make_datefirstseen(SALT30.StrType s0) := s0;
EXPORT InValid_datefirstseen(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_datefirstseen(UNSIGNED1 wh) := '';
EXPORT Make_datelastseen(SALT30.StrType s0) := s0;
EXPORT InValid_datelastseen(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_datelastseen(UNSIGNED1 wh) := '';
EXPORT Make_datevendorlastreported(SALT30.StrType s0) := s0;
EXPORT InValid_datevendorlastreported(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_datevendorlastreported(UNSIGNED1 wh) := '';
EXPORT Make_datevendorfirstreported(SALT30.StrType s0) := s0;
EXPORT InValid_datevendorfirstreported(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_datevendorfirstreported(UNSIGNED1 wh) := '';
EXPORT Make_dt_nonglb_last_seen(SALT30.StrType s0) := s0;
EXPORT InValid_dt_nonglb_last_seen(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_dt_nonglb_last_seen(UNSIGNED1 wh) := '';
EXPORT Make_glb_dppa_flag(SALT30.StrType s0) := s0;
EXPORT InValid_glb_dppa_flag(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_glb_dppa_flag(UNSIGNED1 wh) := '';
EXPORT Make_glb_dppa_all(SALT30.StrType s0) := s0;
EXPORT InValid_glb_dppa_all(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_glb_dppa_all(UNSIGNED1 wh) := '';
EXPORT Make_vendor(SALT30.StrType s0) := s0;
EXPORT InValid_vendor(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_vendor(UNSIGNED1 wh) := '';
EXPORT Make_src(SALT30.StrType s0) := s0;
EXPORT InValid_src(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_src(UNSIGNED1 wh) := '';
EXPORT Make_src_all(SALT30.StrType s0) := s0;
EXPORT InValid_src_all(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_src_all(UNSIGNED1 wh) := '';
EXPORT Make_src_cnt(SALT30.StrType s0) := s0;
EXPORT InValid_src_cnt(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_src_cnt(UNSIGNED1 wh) := '';
EXPORT Make_src_rule(SALT30.StrType s0) := s0;
EXPORT InValid_src_rule(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_src_rule(UNSIGNED1 wh) := '';
EXPORT Make_append_avg_source_conf(SALT30.StrType s0) := s0;
EXPORT InValid_append_avg_source_conf(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_append_avg_source_conf(UNSIGNED1 wh) := '';
EXPORT Make_append_max_source_conf(SALT30.StrType s0) := s0;
EXPORT InValid_append_max_source_conf(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_append_max_source_conf(UNSIGNED1 wh) := '';
EXPORT Make_append_min_source_conf(SALT30.StrType s0) := s0;
EXPORT InValid_append_min_source_conf(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_append_min_source_conf(UNSIGNED1 wh) := '';
EXPORT Make_append_total_source_conf(SALT30.StrType s0) := s0;
EXPORT InValid_append_total_source_conf(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_append_total_source_conf(UNSIGNED1 wh) := '';
EXPORT Make_orig_dt_last_seen(SALT30.StrType s0) := s0;
EXPORT InValid_orig_dt_last_seen(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_orig_dt_last_seen(UNSIGNED1 wh) := '';
EXPORT Make_did_type(SALT30.StrType s0) := s0;
EXPORT InValid_did_type(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_did_type(UNSIGNED1 wh) := '';
EXPORT Make_origname(SALT30.StrType s0) := MakeFT_alpha(s0);
EXPORT InValid_origname(SALT30.StrType s) := InValidFT_alpha(s);
EXPORT InValidMessage_origname(UNSIGNED1 wh) := InValidMessageFT_alpha(wh);
EXPORT Make_address1(SALT30.StrType s0) := s0;
EXPORT InValid_address1(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_address1(UNSIGNED1 wh) := '';
EXPORT Make_address2(SALT30.StrType s0) := s0;
EXPORT InValid_address2(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_address2(UNSIGNED1 wh) := '';
EXPORT Make_address3(SALT30.StrType s0) := s0;
EXPORT InValid_address3(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_address3(UNSIGNED1 wh) := '';
EXPORT Make_origcity(SALT30.StrType s0) := s0;
EXPORT InValid_origcity(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_origcity(UNSIGNED1 wh) := '';
EXPORT Make_origstate(SALT30.StrType s0) := s0;
EXPORT InValid_origstate(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_origstate(UNSIGNED1 wh) := '';
EXPORT Make_origzip(SALT30.StrType s0) := MakeFT_zip(s0);
EXPORT InValid_origzip(SALT30.StrType s) := InValidFT_zip(s);
EXPORT InValidMessage_origzip(UNSIGNED1 wh) := InValidMessageFT_zip(wh);
EXPORT Make_orig_phone(SALT30.StrType s0) := MakeFT_phone(s0);
EXPORT InValid_orig_phone(SALT30.StrType s) := InValidFT_phone(s);
EXPORT InValidMessage_orig_phone(UNSIGNED1 wh) := InValidMessageFT_phone(wh);
EXPORT Make_dob(SALT30.StrType s0) := MakeFT_date(s0);
EXPORT InValid_dob(SALT30.StrType s) := InValidFT_date(s);
EXPORT InValidMessage_dob(UNSIGNED1 wh) := InValidMessageFT_date(wh);
EXPORT Make_agegroup(SALT30.StrType s0) := s0;
EXPORT InValid_agegroup(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_agegroup(UNSIGNED1 wh) := '';
EXPORT Make_gender(SALT30.StrType s0) := MakeFT_sex(s0);
EXPORT InValid_gender(SALT30.StrType s) := InValidFT_sex(s);
EXPORT InValidMessage_gender(UNSIGNED1 wh) := InValidMessageFT_sex(wh);
EXPORT Make_email(SALT30.StrType s0) := s0;
EXPORT InValid_email(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_email(UNSIGNED1 wh) := '';
EXPORT Make_orig_listing_type(SALT30.StrType s0) := MakeFT_Listing_type(s0);
EXPORT InValid_orig_listing_type(SALT30.StrType s) := InValidFT_Listing_type(s);
EXPORT InValidMessage_orig_listing_type(UNSIGNED1 wh) := InValidMessageFT_Listing_type(wh);
EXPORT Make_listingtype(SALT30.StrType s0) := s0;
EXPORT InValid_listingtype(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_listingtype(UNSIGNED1 wh) := '';
EXPORT Make_orig_publish_code(SALT30.StrType s0) := s0;
EXPORT InValid_orig_publish_code(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_orig_publish_code(UNSIGNED1 wh) := '';
EXPORT Make_orig_phone_type(SALT30.StrType s0) := MakeFT_phone_type(s0);
EXPORT InValid_orig_phone_type(SALT30.StrType s) := InValidFT_phone_type(s);
EXPORT InValidMessage_orig_phone_type(UNSIGNED1 wh) := InValidMessageFT_phone_type(wh);
EXPORT Make_orig_phone_usage(SALT30.StrType s0) := MakeFT_phone_Usage(s0);
EXPORT InValid_orig_phone_usage(SALT30.StrType s) := InValidFT_phone_Usage(s);
EXPORT InValidMessage_orig_phone_usage(UNSIGNED1 wh) := InValidMessageFT_phone_Usage(wh);
EXPORT Make_company(SALT30.StrType s0) := MakeFT_Comp_name(s0);
EXPORT InValid_company(SALT30.StrType s) := InValidFT_Comp_name(s);
EXPORT InValidMessage_company(UNSIGNED1 wh) := InValidMessageFT_Comp_name(wh);
EXPORT Make_orig_phone_reg_dt(SALT30.StrType s0) := MakeFT_date_alt(s0);
EXPORT InValid_orig_phone_reg_dt(SALT30.StrType s) := InValidFT_date_alt(s);
EXPORT InValidMessage_orig_phone_reg_dt(UNSIGNED1 wh) := InValidMessageFT_date_alt(wh);
EXPORT Make_orig_carrier_code(SALT30.StrType s0) := s0;
EXPORT InValid_orig_carrier_code(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_orig_carrier_code(UNSIGNED1 wh) := '';
EXPORT Make_orig_carrier_name(SALT30.StrType s0) := MakeFT_Comp_name(s0);
EXPORT InValid_orig_carrier_name(SALT30.StrType s) := InValidFT_Comp_name(s);
EXPORT InValidMessage_orig_carrier_name(UNSIGNED1 wh) := InValidMessageFT_Comp_name(wh);
EXPORT Make_orig_conf_score(SALT30.StrType s0) := MakeFT_conf_score(s0);
EXPORT InValid_orig_conf_score(SALT30.StrType s) := InValidFT_conf_score(s);
EXPORT InValidMessage_orig_conf_score(UNSIGNED1 wh) := InValidMessageFT_conf_score(wh);
EXPORT Make_orig_rec_type(SALT30.StrType s0) := s0;
EXPORT InValid_orig_rec_type(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_orig_rec_type(UNSIGNED1 wh) := '';
EXPORT Make_clean_company(SALT30.StrType s0) := s0;
EXPORT InValid_clean_company(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_clean_company(UNSIGNED1 wh) := '';
EXPORT Make_prim_range(SALT30.StrType s0) := s0;
EXPORT InValid_prim_range(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_prim_range(UNSIGNED1 wh) := '';
EXPORT Make_predir(SALT30.StrType s0) := s0;
EXPORT InValid_predir(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_predir(UNSIGNED1 wh) := '';
EXPORT Make_prim_name(SALT30.StrType s0) := s0;
EXPORT InValid_prim_name(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_prim_name(UNSIGNED1 wh) := '';
EXPORT Make_addr_suffix(SALT30.StrType s0) := s0;
EXPORT InValid_addr_suffix(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_addr_suffix(UNSIGNED1 wh) := '';
EXPORT Make_postdir(SALT30.StrType s0) := s0;
EXPORT InValid_postdir(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_postdir(UNSIGNED1 wh) := '';
EXPORT Make_unit_desig(SALT30.StrType s0) := s0;
EXPORT InValid_unit_desig(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_unit_desig(UNSIGNED1 wh) := '';
EXPORT Make_sec_range(SALT30.StrType s0) := s0;
EXPORT InValid_sec_range(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_sec_range(UNSIGNED1 wh) := '';
EXPORT Make_p_city_name(SALT30.StrType s0) := s0;
EXPORT InValid_p_city_name(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_p_city_name(UNSIGNED1 wh) := '';
EXPORT Make_v_city_name(SALT30.StrType s0) := s0;
EXPORT InValid_v_city_name(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_v_city_name(UNSIGNED1 wh) := '';
EXPORT Make_state(SALT30.StrType s0) := s0;
EXPORT InValid_state(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_state(UNSIGNED1 wh) := '';
EXPORT Make_zip5(SALT30.StrType s0) := s0;
EXPORT InValid_zip5(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_zip5(UNSIGNED1 wh) := '';
EXPORT Make_zip4(SALT30.StrType s0) := s0;
EXPORT InValid_zip4(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_zip4(UNSIGNED1 wh) := '';
EXPORT Make_cart(SALT30.StrType s0) := s0;
EXPORT InValid_cart(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_cart(UNSIGNED1 wh) := '';
EXPORT Make_cr_sort_sz(SALT30.StrType s0) := s0;
EXPORT InValid_cr_sort_sz(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_cr_sort_sz(UNSIGNED1 wh) := '';
EXPORT Make_lot(SALT30.StrType s0) := s0;
EXPORT InValid_lot(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_lot(UNSIGNED1 wh) := '';
EXPORT Make_lot_order(SALT30.StrType s0) := s0;
EXPORT InValid_lot_order(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_lot_order(UNSIGNED1 wh) := '';
EXPORT Make_dpbc(SALT30.StrType s0) := s0;
EXPORT InValid_dpbc(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_dpbc(UNSIGNED1 wh) := '';
EXPORT Make_chk_digit(SALT30.StrType s0) := s0;
EXPORT InValid_chk_digit(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_chk_digit(UNSIGNED1 wh) := '';
EXPORT Make_rec_type(SALT30.StrType s0) := s0;
EXPORT InValid_rec_type(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_rec_type(UNSIGNED1 wh) := '';
EXPORT Make_ace_fips_st(SALT30.StrType s0) := s0;
EXPORT InValid_ace_fips_st(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_ace_fips_st(UNSIGNED1 wh) := '';
EXPORT Make_ace_fips_county(SALT30.StrType s0) := s0;
EXPORT InValid_ace_fips_county(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_ace_fips_county(UNSIGNED1 wh) := '';
EXPORT Make_geo_lat(SALT30.StrType s0) := s0;
EXPORT InValid_geo_lat(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_geo_lat(UNSIGNED1 wh) := '';
EXPORT Make_geo_long(SALT30.StrType s0) := s0;
EXPORT InValid_geo_long(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_geo_long(UNSIGNED1 wh) := '';
EXPORT Make_msa(SALT30.StrType s0) := s0;
EXPORT InValid_msa(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_msa(UNSIGNED1 wh) := '';
EXPORT Make_geo_blk(SALT30.StrType s0) := s0;
EXPORT InValid_geo_blk(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_geo_blk(UNSIGNED1 wh) := '';
EXPORT Make_geo_match(SALT30.StrType s0) := s0;
EXPORT InValid_geo_match(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_geo_match(UNSIGNED1 wh) := '';
EXPORT Make_err_stat(SALT30.StrType s0) := s0;
EXPORT InValid_err_stat(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_err_stat(UNSIGNED1 wh) := '';
EXPORT Make_title(SALT30.StrType s0) := s0;
EXPORT InValid_title(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_title(UNSIGNED1 wh) := '';
EXPORT Make_fname(SALT30.StrType s0) := s0;
EXPORT InValid_fname(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_fname(UNSIGNED1 wh) := '';
EXPORT Make_mname(SALT30.StrType s0) := s0;
EXPORT InValid_mname(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_mname(UNSIGNED1 wh) := '';
EXPORT Make_lname(SALT30.StrType s0) := s0;
EXPORT InValid_lname(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_lname(UNSIGNED1 wh) := '';
EXPORT Make_name_suffix(SALT30.StrType s0) := s0;
EXPORT InValid_name_suffix(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_name_suffix(UNSIGNED1 wh) := '';
EXPORT Make_name_score(SALT30.StrType s0) := s0;
EXPORT InValid_name_score(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_name_score(UNSIGNED1 wh) := '';
EXPORT Make_bdid(SALT30.StrType s0) := s0;
EXPORT InValid_bdid(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_bdid(UNSIGNED1 wh) := '';
EXPORT Make_bdid_score(SALT30.StrType s0) := s0;
EXPORT InValid_bdid_score(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_bdid_score(UNSIGNED1 wh) := '';
EXPORT Make_append_npa_effective_dt(SALT30.StrType s0) := MakeFT_date(s0);
EXPORT InValid_append_npa_effective_dt(SALT30.StrType s) := InValidFT_date(s);
EXPORT InValidMessage_append_npa_effective_dt(UNSIGNED1 wh) := InValidMessageFT_date(wh);
EXPORT Make_append_npa_last_change_dt(SALT30.StrType s0) := MakeFT_date(s0);
EXPORT InValid_append_npa_last_change_dt(SALT30.StrType s) := InValidFT_date(s);
EXPORT InValidMessage_append_npa_last_change_dt(UNSIGNED1 wh) := InValidMessageFT_date(wh);
EXPORT Make_append_dialable_ind(SALT30.StrType s0) := s0;
EXPORT InValid_append_dialable_ind(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_append_dialable_ind(UNSIGNED1 wh) := '';
EXPORT Make_append_place_name(SALT30.StrType s0) := s0;
EXPORT InValid_append_place_name(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_append_place_name(UNSIGNED1 wh) := '';
EXPORT Make_append_portability_indicator(SALT30.StrType s0) := s0;
EXPORT InValid_append_portability_indicator(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_append_portability_indicator(UNSIGNED1 wh) := '';
EXPORT Make_append_prior_area_code(SALT30.StrType s0) := s0;
EXPORT InValid_append_prior_area_code(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_append_prior_area_code(UNSIGNED1 wh) := '';
EXPORT Make_append_nonpublished_match(SALT30.StrType s0) := s0;
EXPORT InValid_append_nonpublished_match(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_append_nonpublished_match(UNSIGNED1 wh) := '';
EXPORT Make_append_ocn(SALT30.StrType s0) := s0;
EXPORT InValid_append_ocn(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_append_ocn(UNSIGNED1 wh) := '';
EXPORT Make_append_time_zone(SALT30.StrType s0) := s0;
EXPORT InValid_append_time_zone(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_append_time_zone(UNSIGNED1 wh) := '';
EXPORT Make_append_nxx_type(SALT30.StrType s0) := s0;
EXPORT InValid_append_nxx_type(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_append_nxx_type(UNSIGNED1 wh) := '';
EXPORT Make_append_coctype(SALT30.StrType s0) := s0;
EXPORT InValid_append_coctype(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_append_coctype(UNSIGNED1 wh) := '';
EXPORT Make_append_scc(SALT30.StrType s0) := s0;
EXPORT InValid_append_scc(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_append_scc(UNSIGNED1 wh) := '';
EXPORT Make_append_phone_type(SALT30.StrType s0) := s0;
EXPORT InValid_append_phone_type(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_append_phone_type(UNSIGNED1 wh) := '';
EXPORT Make_append_company_type(SALT30.StrType s0) := s0;
EXPORT InValid_append_company_type(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_append_company_type(UNSIGNED1 wh) := '';
EXPORT Make_append_phone_use(SALT30.StrType s0) := s0;
EXPORT InValid_append_phone_use(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_append_phone_use(UNSIGNED1 wh) := '';
EXPORT Make_agreg_listing_type(SALT30.StrType s0) := s0;
EXPORT InValid_agreg_listing_type(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_agreg_listing_type(UNSIGNED1 wh) := '';
EXPORT Make_max_orig_conf_score(SALT30.StrType s0) := s0;
EXPORT InValid_max_orig_conf_score(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_max_orig_conf_score(UNSIGNED1 wh) := '';
EXPORT Make_min_orig_conf_score(SALT30.StrType s0) := s0;
EXPORT InValid_min_orig_conf_score(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_min_orig_conf_score(UNSIGNED1 wh) := '';
EXPORT Make_cur_orig_conf_score(SALT30.StrType s0) := s0;
EXPORT InValid_cur_orig_conf_score(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_cur_orig_conf_score(UNSIGNED1 wh) := '';
EXPORT Make_activeflag(SALT30.StrType s0) := s0;
EXPORT InValid_activeflag(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_activeflag(UNSIGNED1 wh) := '';
EXPORT Make_eda_active_flag(SALT30.StrType s0) := s0;
EXPORT InValid_eda_active_flag(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_eda_active_flag(UNSIGNED1 wh) := '';
EXPORT Make_eda_match(SALT30.StrType s0) := s0;
EXPORT InValid_eda_match(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_eda_match(UNSIGNED1 wh) := '';
EXPORT Make_eda_phone_dt(SALT30.StrType s0) := s0;
EXPORT InValid_eda_phone_dt(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_eda_phone_dt(UNSIGNED1 wh) := '';
EXPORT Make_eda_did_dt(SALT30.StrType s0) := s0;
EXPORT InValid_eda_did_dt(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_eda_did_dt(UNSIGNED1 wh) := '';
EXPORT Make_eda_nm_addr_dt(SALT30.StrType s0) := s0;
EXPORT InValid_eda_nm_addr_dt(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_eda_nm_addr_dt(UNSIGNED1 wh) := '';
EXPORT Make_eda_hist_match(SALT30.StrType s0) := s0;
EXPORT InValid_eda_hist_match(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_eda_hist_match(UNSIGNED1 wh) := '';
EXPORT Make_eda_hist_phone_dt(SALT30.StrType s0) := s0;
EXPORT InValid_eda_hist_phone_dt(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_eda_hist_phone_dt(UNSIGNED1 wh) := '';
EXPORT Make_eda_hist_did_dt(SALT30.StrType s0) := s0;
EXPORT InValid_eda_hist_did_dt(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_eda_hist_did_dt(UNSIGNED1 wh) := '';
EXPORT Make_eda_hist_nm_addr_dt(SALT30.StrType s0) := s0;
EXPORT InValid_eda_hist_nm_addr_dt(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_eda_hist_nm_addr_dt(UNSIGNED1 wh) := '';
EXPORT Make_append_feedback_phone(SALT30.StrType s0) := s0;
EXPORT InValid_append_feedback_phone(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_append_feedback_phone(UNSIGNED1 wh) := '';
EXPORT Make_append_feedback_phone_dt(SALT30.StrType s0) := s0;
EXPORT InValid_append_feedback_phone_dt(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_append_feedback_phone_dt(UNSIGNED1 wh) := '';
EXPORT Make_append_feedback_phone7_did(SALT30.StrType s0) := s0;
EXPORT InValid_append_feedback_phone7_did(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_append_feedback_phone7_did(UNSIGNED1 wh) := '';
EXPORT Make_append_feedback_phone7_did_dt(SALT30.StrType s0) := s0;
EXPORT InValid_append_feedback_phone7_did_dt(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_append_feedback_phone7_did_dt(UNSIGNED1 wh) := '';
EXPORT Make_append_feedback_phone7_nm_addr(SALT30.StrType s0) := s0;
EXPORT InValid_append_feedback_phone7_nm_addr(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_append_feedback_phone7_nm_addr(UNSIGNED1 wh) := '';
EXPORT Make_append_feedback_phone7_nm_addr_dt(SALT30.StrType s0) := s0;
EXPORT InValid_append_feedback_phone7_nm_addr_dt(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_append_feedback_phone7_nm_addr_dt(UNSIGNED1 wh) := '';
EXPORT Make_append_ported_match(SALT30.StrType s0) := s0;
EXPORT InValid_append_ported_match(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_append_ported_match(UNSIGNED1 wh) := '';
EXPORT Make_append_seen_once_ind(SALT30.StrType s0) := s0;
EXPORT InValid_append_seen_once_ind(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_append_seen_once_ind(UNSIGNED1 wh) := '';
EXPORT Make_append_indiv_phone_cnt(SALT30.StrType s0) := s0;
EXPORT InValid_append_indiv_phone_cnt(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_append_indiv_phone_cnt(UNSIGNED1 wh) := '';
EXPORT Make_append_indiv_has_active_eda_phone_flag(SALT30.StrType s0) := s0;
EXPORT InValid_append_indiv_has_active_eda_phone_flag(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_append_indiv_has_active_eda_phone_flag(UNSIGNED1 wh) := '';
EXPORT Make_append_latest_phone_owner_flag(SALT30.StrType s0) := s0;
EXPORT InValid_append_latest_phone_owner_flag(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_append_latest_phone_owner_flag(UNSIGNED1 wh) := '';
EXPORT Make_hhid(SALT30.StrType s0) := s0;
EXPORT InValid_hhid(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_hhid(UNSIGNED1 wh) := '';
EXPORT Make_hhid_score(SALT30.StrType s0) := s0;
EXPORT InValid_hhid_score(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_hhid_score(UNSIGNED1 wh) := '';
EXPORT Make_phone7_hhid_key(SALT30.StrType s0) := s0;
EXPORT InValid_phone7_hhid_key(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_phone7_hhid_key(UNSIGNED1 wh) := '';
EXPORT Make_append_best_addr_match_flag(SALT30.StrType s0) := s0;
EXPORT InValid_append_best_addr_match_flag(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_append_best_addr_match_flag(UNSIGNED1 wh) := '';
EXPORT Make_append_best_nm_match_flag(SALT30.StrType s0) := s0;
EXPORT InValid_append_best_nm_match_flag(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_append_best_nm_match_flag(UNSIGNED1 wh) := '';
EXPORT Make_rawaid(SALT30.StrType s0) := s0;
EXPORT InValid_rawaid(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_rawaid(UNSIGNED1 wh) := '';
EXPORT Make_cleanaid(SALT30.StrType s0) := s0;
EXPORT InValid_cleanaid(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_cleanaid(UNSIGNED1 wh) := '';
EXPORT Make_current_rec(SALT30.StrType s0) := s0;
EXPORT InValid_current_rec(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_current_rec(UNSIGNED1 wh) := '';
EXPORT Make_first_build_date(SALT30.StrType s0) := s0;
EXPORT InValid_first_build_date(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_first_build_date(UNSIGNED1 wh) := '';
EXPORT Make_last_build_date(SALT30.StrType s0) := s0;
EXPORT InValid_last_build_date(SALT30.StrType s) := FALSE;
EXPORT InValidMessage_last_build_date(UNSIGNED1 wh) := '';
// This macro will compute and count field level differences based upon a pivot expression
export MAC_CountDifferencesByPivot(in_left,in_right,pivot_exp,bad_pivots,out_counts) := MACRO
  IMPORT SALT30,Scrubs_Phonesplus_v2_Base;
//Find those highly occuring pivot values to remove them from consideration
#uniquename(tr)
  %tr% := table(in_left+in_right,{ val := pivot_exp; });
#uniquename(r1)
  %r1% := record
    %tr%.val;    unsigned Cnt := COUNT(GROUP);
  end;
#uniquename(t1)
  %t1% := table(%tr%,%r1%,val,local); // Pre-aggregate before distribute
#uniquename(r2)
  %r2% := record
    %t1%.val;    unsigned Cnt := SUM(GROUP,%t1%.Cnt);
  end;
#uniquename(t2)
  %t2% := table(%t1%,%r2%,val); // Now do global aggregate
Bad_Pivots := %t2%(Cnt>100);
#uniquename(dl)
  %dl% := RECORD
    BOOLEAN Diff_in_flag;
    BOOLEAN Diff_confidencescore;
    BOOLEAN Diff_rules;
    BOOLEAN Diff_npa;
    BOOLEAN Diff_phone7;
    BOOLEAN Diff_cellphone;
    BOOLEAN Diff_cellphoneidkey;
    BOOLEAN Diff_phone7_did_key;
    BOOLEAN Diff_pdid;
    BOOLEAN Diff_did;
    BOOLEAN Diff_did_score;
    BOOLEAN Diff_datefirstseen;
    BOOLEAN Diff_datelastseen;
    BOOLEAN Diff_datevendorlastreported;
    BOOLEAN Diff_datevendorfirstreported;
    BOOLEAN Diff_dt_nonglb_last_seen;
    BOOLEAN Diff_glb_dppa_flag;
    BOOLEAN Diff_glb_dppa_all;
    BOOLEAN Diff_vendor;
    BOOLEAN Diff_src;
    BOOLEAN Diff_src_all;
    BOOLEAN Diff_src_cnt;
    BOOLEAN Diff_src_rule;
    BOOLEAN Diff_append_avg_source_conf;
    BOOLEAN Diff_append_max_source_conf;
    BOOLEAN Diff_append_min_source_conf;
    BOOLEAN Diff_append_total_source_conf;
    BOOLEAN Diff_orig_dt_last_seen;
    BOOLEAN Diff_did_type;
    BOOLEAN Diff_origname;
    BOOLEAN Diff_address1;
    BOOLEAN Diff_address2;
    BOOLEAN Diff_address3;
    BOOLEAN Diff_origcity;
    BOOLEAN Diff_origstate;
    BOOLEAN Diff_origzip;
    BOOLEAN Diff_orig_phone;
    BOOLEAN Diff_dob;
    BOOLEAN Diff_agegroup;
    BOOLEAN Diff_gender;
    BOOLEAN Diff_email;
    BOOLEAN Diff_orig_listing_type;
    BOOLEAN Diff_listingtype;
    BOOLEAN Diff_orig_publish_code;
    BOOLEAN Diff_orig_phone_type;
    BOOLEAN Diff_orig_phone_usage;
    BOOLEAN Diff_company;
    BOOLEAN Diff_orig_phone_reg_dt;
    BOOLEAN Diff_orig_carrier_code;
    BOOLEAN Diff_orig_carrier_name;
    BOOLEAN Diff_orig_conf_score;
    BOOLEAN Diff_orig_rec_type;
    BOOLEAN Diff_clean_company;
    BOOLEAN Diff_prim_range;
    BOOLEAN Diff_predir;
    BOOLEAN Diff_prim_name;
    BOOLEAN Diff_addr_suffix;
    BOOLEAN Diff_postdir;
    BOOLEAN Diff_unit_desig;
    BOOLEAN Diff_sec_range;
    BOOLEAN Diff_p_city_name;
    BOOLEAN Diff_v_city_name;
    BOOLEAN Diff_state;
    BOOLEAN Diff_zip5;
    BOOLEAN Diff_zip4;
    BOOLEAN Diff_cart;
    BOOLEAN Diff_cr_sort_sz;
    BOOLEAN Diff_lot;
    BOOLEAN Diff_lot_order;
    BOOLEAN Diff_dpbc;
    BOOLEAN Diff_chk_digit;
    BOOLEAN Diff_rec_type;
    BOOLEAN Diff_ace_fips_st;
    BOOLEAN Diff_ace_fips_county;
    BOOLEAN Diff_geo_lat;
    BOOLEAN Diff_geo_long;
    BOOLEAN Diff_msa;
    BOOLEAN Diff_geo_blk;
    BOOLEAN Diff_geo_match;
    BOOLEAN Diff_err_stat;
    BOOLEAN Diff_title;
    BOOLEAN Diff_fname;
    BOOLEAN Diff_mname;
    BOOLEAN Diff_lname;
    BOOLEAN Diff_name_suffix;
    BOOLEAN Diff_name_score;
    BOOLEAN Diff_bdid;
    BOOLEAN Diff_bdid_score;
    BOOLEAN Diff_append_npa_effective_dt;
    BOOLEAN Diff_append_npa_last_change_dt;
    BOOLEAN Diff_append_dialable_ind;
    BOOLEAN Diff_append_place_name;
    BOOLEAN Diff_append_portability_indicator;
    BOOLEAN Diff_append_prior_area_code;
    BOOLEAN Diff_append_nonpublished_match;
    BOOLEAN Diff_append_ocn;
    BOOLEAN Diff_append_time_zone;
    BOOLEAN Diff_append_nxx_type;
    BOOLEAN Diff_append_coctype;
    BOOLEAN Diff_append_scc;
    BOOLEAN Diff_append_phone_type;
    BOOLEAN Diff_append_company_type;
    BOOLEAN Diff_append_phone_use;
    BOOLEAN Diff_agreg_listing_type;
    BOOLEAN Diff_max_orig_conf_score;
    BOOLEAN Diff_min_orig_conf_score;
    BOOLEAN Diff_cur_orig_conf_score;
    BOOLEAN Diff_activeflag;
    BOOLEAN Diff_eda_active_flag;
    BOOLEAN Diff_eda_match;
    BOOLEAN Diff_eda_phone_dt;
    BOOLEAN Diff_eda_did_dt;
    BOOLEAN Diff_eda_nm_addr_dt;
    BOOLEAN Diff_eda_hist_match;
    BOOLEAN Diff_eda_hist_phone_dt;
    BOOLEAN Diff_eda_hist_did_dt;
    BOOLEAN Diff_eda_hist_nm_addr_dt;
    BOOLEAN Diff_append_feedback_phone;
    BOOLEAN Diff_append_feedback_phone_dt;
    BOOLEAN Diff_append_feedback_phone7_did;
    BOOLEAN Diff_append_feedback_phone7_did_dt;
    BOOLEAN Diff_append_feedback_phone7_nm_addr;
    BOOLEAN Diff_append_feedback_phone7_nm_addr_dt;
    BOOLEAN Diff_append_ported_match;
    BOOLEAN Diff_append_seen_once_ind;
    BOOLEAN Diff_append_indiv_phone_cnt;
    BOOLEAN Diff_append_indiv_has_active_eda_phone_flag;
    BOOLEAN Diff_append_latest_phone_owner_flag;
    BOOLEAN Diff_hhid;
    BOOLEAN Diff_hhid_score;
    BOOLEAN Diff_phone7_hhid_key;
    BOOLEAN Diff_append_best_addr_match_flag;
    BOOLEAN Diff_append_best_nm_match_flag;
    BOOLEAN Diff_rawaid;
    BOOLEAN Diff_cleanaid;
    BOOLEAN Diff_current_rec;
    BOOLEAN Diff_first_build_date;
    BOOLEAN Diff_last_build_date;
    SALT30.StrType SourceField {MAXLENGTH(30)};
    UNSIGNED Num_Diffs;
    SALT30.StrType Val {MAXLENGTH(1024)};
  END;
#uniquename(fd)
  %dl% %fd%(in_left le,in_right ri) := TRANSFORM
    SELF.Diff_in_flag := le.in_flag <> ri.in_flag;
    SELF.Diff_confidencescore := le.confidencescore <> ri.confidencescore;
    SELF.Diff_rules := le.rules <> ri.rules;
    SELF.Diff_npa := le.npa <> ri.npa;
    SELF.Diff_phone7 := le.phone7 <> ri.phone7;
    SELF.Diff_cellphone := le.cellphone <> ri.cellphone;
    SELF.Diff_cellphoneidkey := le.cellphoneidkey <> ri.cellphoneidkey;
    SELF.Diff_phone7_did_key := le.phone7_did_key <> ri.phone7_did_key;
    SELF.Diff_pdid := le.pdid <> ri.pdid;
    SELF.Diff_did := le.did <> ri.did;
    SELF.Diff_did_score := le.did_score <> ri.did_score;
    SELF.Diff_datefirstseen := le.datefirstseen <> ri.datefirstseen;
    SELF.Diff_datelastseen := le.datelastseen <> ri.datelastseen;
    SELF.Diff_datevendorlastreported := le.datevendorlastreported <> ri.datevendorlastreported;
    SELF.Diff_datevendorfirstreported := le.datevendorfirstreported <> ri.datevendorfirstreported;
    SELF.Diff_dt_nonglb_last_seen := le.dt_nonglb_last_seen <> ri.dt_nonglb_last_seen;
    SELF.Diff_glb_dppa_flag := le.glb_dppa_flag <> ri.glb_dppa_flag;
    SELF.Diff_glb_dppa_all := le.glb_dppa_all <> ri.glb_dppa_all;
    SELF.Diff_vendor := le.vendor <> ri.vendor;
    SELF.Diff_src := le.src <> ri.src;
    SELF.Diff_src_all := le.src_all <> ri.src_all;
    SELF.Diff_src_cnt := le.src_cnt <> ri.src_cnt;
    SELF.Diff_src_rule := le.src_rule <> ri.src_rule;
    SELF.Diff_append_avg_source_conf := le.append_avg_source_conf <> ri.append_avg_source_conf;
    SELF.Diff_append_max_source_conf := le.append_max_source_conf <> ri.append_max_source_conf;
    SELF.Diff_append_min_source_conf := le.append_min_source_conf <> ri.append_min_source_conf;
    SELF.Diff_append_total_source_conf := le.append_total_source_conf <> ri.append_total_source_conf;
    SELF.Diff_orig_dt_last_seen := le.orig_dt_last_seen <> ri.orig_dt_last_seen;
    SELF.Diff_did_type := le.did_type <> ri.did_type;
    SELF.Diff_origname := le.origname <> ri.origname;
    SELF.Diff_address1 := le.address1 <> ri.address1;
    SELF.Diff_address2 := le.address2 <> ri.address2;
    SELF.Diff_address3 := le.address3 <> ri.address3;
    SELF.Diff_origcity := le.origcity <> ri.origcity;
    SELF.Diff_origstate := le.origstate <> ri.origstate;
    SELF.Diff_origzip := le.origzip <> ri.origzip;
    SELF.Diff_orig_phone := le.orig_phone <> ri.orig_phone;
    SELF.Diff_dob := le.dob <> ri.dob;
    SELF.Diff_agegroup := le.agegroup <> ri.agegroup;
    SELF.Diff_gender := le.gender <> ri.gender;
    SELF.Diff_email := le.email <> ri.email;
    SELF.Diff_orig_listing_type := le.orig_listing_type <> ri.orig_listing_type;
    SELF.Diff_listingtype := le.listingtype <> ri.listingtype;
    SELF.Diff_orig_publish_code := le.orig_publish_code <> ri.orig_publish_code;
    SELF.Diff_orig_phone_type := le.orig_phone_type <> ri.orig_phone_type;
    SELF.Diff_orig_phone_usage := le.orig_phone_usage <> ri.orig_phone_usage;
    SELF.Diff_company := le.company <> ri.company;
    SELF.Diff_orig_phone_reg_dt := le.orig_phone_reg_dt <> ri.orig_phone_reg_dt;
    SELF.Diff_orig_carrier_code := le.orig_carrier_code <> ri.orig_carrier_code;
    SELF.Diff_orig_carrier_name := le.orig_carrier_name <> ri.orig_carrier_name;
    SELF.Diff_orig_conf_score := le.orig_conf_score <> ri.orig_conf_score;
    SELF.Diff_orig_rec_type := le.orig_rec_type <> ri.orig_rec_type;
    SELF.Diff_clean_company := le.clean_company <> ri.clean_company;
    SELF.Diff_prim_range := le.prim_range <> ri.prim_range;
    SELF.Diff_predir := le.predir <> ri.predir;
    SELF.Diff_prim_name := le.prim_name <> ri.prim_name;
    SELF.Diff_addr_suffix := le.addr_suffix <> ri.addr_suffix;
    SELF.Diff_postdir := le.postdir <> ri.postdir;
    SELF.Diff_unit_desig := le.unit_desig <> ri.unit_desig;
    SELF.Diff_sec_range := le.sec_range <> ri.sec_range;
    SELF.Diff_p_city_name := le.p_city_name <> ri.p_city_name;
    SELF.Diff_v_city_name := le.v_city_name <> ri.v_city_name;
    SELF.Diff_state := le.state <> ri.state;
    SELF.Diff_zip5 := le.zip5 <> ri.zip5;
    SELF.Diff_zip4 := le.zip4 <> ri.zip4;
    SELF.Diff_cart := le.cart <> ri.cart;
    SELF.Diff_cr_sort_sz := le.cr_sort_sz <> ri.cr_sort_sz;
    SELF.Diff_lot := le.lot <> ri.lot;
    SELF.Diff_lot_order := le.lot_order <> ri.lot_order;
    SELF.Diff_dpbc := le.dpbc <> ri.dpbc;
    SELF.Diff_chk_digit := le.chk_digit <> ri.chk_digit;
    SELF.Diff_rec_type := le.rec_type <> ri.rec_type;
    SELF.Diff_ace_fips_st := le.ace_fips_st <> ri.ace_fips_st;
    SELF.Diff_ace_fips_county := le.ace_fips_county <> ri.ace_fips_county;
    SELF.Diff_geo_lat := le.geo_lat <> ri.geo_lat;
    SELF.Diff_geo_long := le.geo_long <> ri.geo_long;
    SELF.Diff_msa := le.msa <> ri.msa;
    SELF.Diff_geo_blk := le.geo_blk <> ri.geo_blk;
    SELF.Diff_geo_match := le.geo_match <> ri.geo_match;
    SELF.Diff_err_stat := le.err_stat <> ri.err_stat;
    SELF.Diff_title := le.title <> ri.title;
    SELF.Diff_fname := le.fname <> ri.fname;
    SELF.Diff_mname := le.mname <> ri.mname;
    SELF.Diff_lname := le.lname <> ri.lname;
    SELF.Diff_name_suffix := le.name_suffix <> ri.name_suffix;
    SELF.Diff_name_score := le.name_score <> ri.name_score;
    SELF.Diff_bdid := le.bdid <> ri.bdid;
    SELF.Diff_bdid_score := le.bdid_score <> ri.bdid_score;
    SELF.Diff_append_npa_effective_dt := le.append_npa_effective_dt <> ri.append_npa_effective_dt;
    SELF.Diff_append_npa_last_change_dt := le.append_npa_last_change_dt <> ri.append_npa_last_change_dt;
    SELF.Diff_append_dialable_ind := le.append_dialable_ind <> ri.append_dialable_ind;
    SELF.Diff_append_place_name := le.append_place_name <> ri.append_place_name;
    SELF.Diff_append_portability_indicator := le.append_portability_indicator <> ri.append_portability_indicator;
    SELF.Diff_append_prior_area_code := le.append_prior_area_code <> ri.append_prior_area_code;
    SELF.Diff_append_nonpublished_match := le.append_nonpublished_match <> ri.append_nonpublished_match;
    SELF.Diff_append_ocn := le.append_ocn <> ri.append_ocn;
    SELF.Diff_append_time_zone := le.append_time_zone <> ri.append_time_zone;
    SELF.Diff_append_nxx_type := le.append_nxx_type <> ri.append_nxx_type;
    SELF.Diff_append_coctype := le.append_coctype <> ri.append_coctype;
    SELF.Diff_append_scc := le.append_scc <> ri.append_scc;
    SELF.Diff_append_phone_type := le.append_phone_type <> ri.append_phone_type;
    SELF.Diff_append_company_type := le.append_company_type <> ri.append_company_type;
    SELF.Diff_append_phone_use := le.append_phone_use <> ri.append_phone_use;
    SELF.Diff_agreg_listing_type := le.agreg_listing_type <> ri.agreg_listing_type;
    SELF.Diff_max_orig_conf_score := le.max_orig_conf_score <> ri.max_orig_conf_score;
    SELF.Diff_min_orig_conf_score := le.min_orig_conf_score <> ri.min_orig_conf_score;
    SELF.Diff_cur_orig_conf_score := le.cur_orig_conf_score <> ri.cur_orig_conf_score;
    SELF.Diff_activeflag := le.activeflag <> ri.activeflag;
    SELF.Diff_eda_active_flag := le.eda_active_flag <> ri.eda_active_flag;
    SELF.Diff_eda_match := le.eda_match <> ri.eda_match;
    SELF.Diff_eda_phone_dt := le.eda_phone_dt <> ri.eda_phone_dt;
    SELF.Diff_eda_did_dt := le.eda_did_dt <> ri.eda_did_dt;
    SELF.Diff_eda_nm_addr_dt := le.eda_nm_addr_dt <> ri.eda_nm_addr_dt;
    SELF.Diff_eda_hist_match := le.eda_hist_match <> ri.eda_hist_match;
    SELF.Diff_eda_hist_phone_dt := le.eda_hist_phone_dt <> ri.eda_hist_phone_dt;
    SELF.Diff_eda_hist_did_dt := le.eda_hist_did_dt <> ri.eda_hist_did_dt;
    SELF.Diff_eda_hist_nm_addr_dt := le.eda_hist_nm_addr_dt <> ri.eda_hist_nm_addr_dt;
    SELF.Diff_append_feedback_phone := le.append_feedback_phone <> ri.append_feedback_phone;
    SELF.Diff_append_feedback_phone_dt := le.append_feedback_phone_dt <> ri.append_feedback_phone_dt;
    SELF.Diff_append_feedback_phone7_did := le.append_feedback_phone7_did <> ri.append_feedback_phone7_did;
    SELF.Diff_append_feedback_phone7_did_dt := le.append_feedback_phone7_did_dt <> ri.append_feedback_phone7_did_dt;
    SELF.Diff_append_feedback_phone7_nm_addr := le.append_feedback_phone7_nm_addr <> ri.append_feedback_phone7_nm_addr;
    SELF.Diff_append_feedback_phone7_nm_addr_dt := le.append_feedback_phone7_nm_addr_dt <> ri.append_feedback_phone7_nm_addr_dt;
    SELF.Diff_append_ported_match := le.append_ported_match <> ri.append_ported_match;
    SELF.Diff_append_seen_once_ind := le.append_seen_once_ind <> ri.append_seen_once_ind;
    SELF.Diff_append_indiv_phone_cnt := le.append_indiv_phone_cnt <> ri.append_indiv_phone_cnt;
    SELF.Diff_append_indiv_has_active_eda_phone_flag := le.append_indiv_has_active_eda_phone_flag <> ri.append_indiv_has_active_eda_phone_flag;
    SELF.Diff_append_latest_phone_owner_flag := le.append_latest_phone_owner_flag <> ri.append_latest_phone_owner_flag;
    SELF.Diff_hhid := le.hhid <> ri.hhid;
    SELF.Diff_hhid_score := le.hhid_score <> ri.hhid_score;
    SELF.Diff_phone7_hhid_key := le.phone7_hhid_key <> ri.phone7_hhid_key;
    SELF.Diff_append_best_addr_match_flag := le.append_best_addr_match_flag <> ri.append_best_addr_match_flag;
    SELF.Diff_append_best_nm_match_flag := le.append_best_nm_match_flag <> ri.append_best_nm_match_flag;
    SELF.Diff_rawaid := le.rawaid <> ri.rawaid;
    SELF.Diff_cleanaid := le.cleanaid <> ri.cleanaid;
    SELF.Diff_current_rec := le.current_rec <> ri.current_rec;
    SELF.Diff_first_build_date := le.first_build_date <> ri.first_build_date;
    SELF.Diff_last_build_date := le.last_build_date <> ri.last_build_date;
    SELF.Val := (SALT30.StrType)evaluate(le,pivot_exp);
    SELF.SourceField := le.vendor;
    SELF.Num_Diffs := 0+ IF( SELF.Diff_in_flag,1,0)+ IF( SELF.Diff_confidencescore,1,0)+ IF( SELF.Diff_rules,1,0)+ IF( SELF.Diff_npa,1,0)+ IF( SELF.Diff_phone7,1,0)+ IF( SELF.Diff_cellphone,1,0)+ IF( SELF.Diff_cellphoneidkey,1,0)+ IF( SELF.Diff_phone7_did_key,1,0)+ IF( SELF.Diff_pdid,1,0)+ IF( SELF.Diff_did,1,0)+ IF( SELF.Diff_did_score,1,0)+ IF( SELF.Diff_datefirstseen,1,0)+ IF( SELF.Diff_datelastseen,1,0)+ IF( SELF.Diff_datevendorlastreported,1,0)+ IF( SELF.Diff_datevendorfirstreported,1,0)+ IF( SELF.Diff_dt_nonglb_last_seen,1,0)+ IF( SELF.Diff_glb_dppa_flag,1,0)+ IF( SELF.Diff_glb_dppa_all,1,0)+ IF( SELF.Diff_vendor,1,0)+ IF( SELF.Diff_src,1,0)+ IF( SELF.Diff_src_all,1,0)+ IF( SELF.Diff_src_cnt,1,0)+ IF( SELF.Diff_src_rule,1,0)+ IF( SELF.Diff_append_avg_source_conf,1,0)+ IF( SELF.Diff_append_max_source_conf,1,0)+ IF( SELF.Diff_append_min_source_conf,1,0)+ IF( SELF.Diff_append_total_source_conf,1,0)+ IF( SELF.Diff_orig_dt_last_seen,1,0)+ IF( SELF.Diff_did_type,1,0)+ IF( SELF.Diff_origname,1,0)+ IF( SELF.Diff_address1,1,0)+ IF( SELF.Diff_address2,1,0)+ IF( SELF.Diff_address3,1,0)+ IF( SELF.Diff_origcity,1,0)+ IF( SELF.Diff_origstate,1,0)+ IF( SELF.Diff_origzip,1,0)+ IF( SELF.Diff_orig_phone,1,0)+ IF( SELF.Diff_dob,1,0)+ IF( SELF.Diff_agegroup,1,0)+ IF( SELF.Diff_gender,1,0)+ IF( SELF.Diff_email,1,0)+ IF( SELF.Diff_orig_listing_type,1,0)+ IF( SELF.Diff_listingtype,1,0)+ IF( SELF.Diff_orig_publish_code,1,0)+ IF( SELF.Diff_orig_phone_type,1,0)+ IF( SELF.Diff_orig_phone_usage,1,0)+ IF( SELF.Diff_company,1,0)+ IF( SELF.Diff_orig_phone_reg_dt,1,0)+ IF( SELF.Diff_orig_carrier_code,1,0)+ IF( SELF.Diff_orig_carrier_name,1,0)+ IF( SELF.Diff_orig_conf_score,1,0)+ IF( SELF.Diff_orig_rec_type,1,0)+ IF( SELF.Diff_clean_company,1,0)+ IF( SELF.Diff_prim_range,1,0)+ IF( SELF.Diff_predir,1,0)+ IF( SELF.Diff_prim_name,1,0)+ IF( SELF.Diff_addr_suffix,1,0)+ IF( SELF.Diff_postdir,1,0)+ IF( SELF.Diff_unit_desig,1,0)+ IF( SELF.Diff_sec_range,1,0)+ IF( SELF.Diff_p_city_name,1,0)+ IF( SELF.Diff_v_city_name,1,0)+ IF( SELF.Diff_state,1,0)+ IF( SELF.Diff_zip5,1,0)+ IF( SELF.Diff_zip4,1,0)+ IF( SELF.Diff_cart,1,0)+ IF( SELF.Diff_cr_sort_sz,1,0)+ IF( SELF.Diff_lot,1,0)+ IF( SELF.Diff_lot_order,1,0)+ IF( SELF.Diff_dpbc,1,0)+ IF( SELF.Diff_chk_digit,1,0)+ IF( SELF.Diff_rec_type,1,0)+ IF( SELF.Diff_ace_fips_st,1,0)+ IF( SELF.Diff_ace_fips_county,1,0)+ IF( SELF.Diff_geo_lat,1,0)+ IF( SELF.Diff_geo_long,1,0)+ IF( SELF.Diff_msa,1,0)+ IF( SELF.Diff_geo_blk,1,0)+ IF( SELF.Diff_geo_match,1,0)+ IF( SELF.Diff_err_stat,1,0)+ IF( SELF.Diff_title,1,0)+ IF( SELF.Diff_fname,1,0)+ IF( SELF.Diff_mname,1,0)+ IF( SELF.Diff_lname,1,0)+ IF( SELF.Diff_name_suffix,1,0)+ IF( SELF.Diff_name_score,1,0)+ IF( SELF.Diff_bdid,1,0)+ IF( SELF.Diff_bdid_score,1,0)+ IF( SELF.Diff_append_npa_effective_dt,1,0)+ IF( SELF.Diff_append_npa_last_change_dt,1,0)+ IF( SELF.Diff_append_dialable_ind,1,0)+ IF( SELF.Diff_append_place_name,1,0)+ IF( SELF.Diff_append_portability_indicator,1,0)+ IF( SELF.Diff_append_prior_area_code,1,0)+ IF( SELF.Diff_append_nonpublished_match,1,0)+ IF( SELF.Diff_append_ocn,1,0)+ IF( SELF.Diff_append_time_zone,1,0)+ IF( SELF.Diff_append_nxx_type,1,0)+ IF( SELF.Diff_append_coctype,1,0)+ IF( SELF.Diff_append_scc,1,0)+ IF( SELF.Diff_append_phone_type,1,0)+ IF( SELF.Diff_append_company_type,1,0)+ IF( SELF.Diff_append_phone_use,1,0)+ IF( SELF.Diff_agreg_listing_type,1,0)+ IF( SELF.Diff_max_orig_conf_score,1,0)+ IF( SELF.Diff_min_orig_conf_score,1,0)+ IF( SELF.Diff_cur_orig_conf_score,1,0)+ IF( SELF.Diff_activeflag,1,0)+ IF( SELF.Diff_eda_active_flag,1,0)+ IF( SELF.Diff_eda_match,1,0)+ IF( SELF.Diff_eda_phone_dt,1,0)+ IF( SELF.Diff_eda_did_dt,1,0)+ IF( SELF.Diff_eda_nm_addr_dt,1,0)+ IF( SELF.Diff_eda_hist_match,1,0)+ IF( SELF.Diff_eda_hist_phone_dt,1,0)+ IF( SELF.Diff_eda_hist_did_dt,1,0)+ IF( SELF.Diff_eda_hist_nm_addr_dt,1,0)+ IF( SELF.Diff_append_feedback_phone,1,0)+ IF( SELF.Diff_append_feedback_phone_dt,1,0)+ IF( SELF.Diff_append_feedback_phone7_did,1,0)+ IF( SELF.Diff_append_feedback_phone7_did_dt,1,0)+ IF( SELF.Diff_append_feedback_phone7_nm_addr,1,0)+ IF( SELF.Diff_append_feedback_phone7_nm_addr_dt,1,0)+ IF( SELF.Diff_append_ported_match,1,0)+ IF( SELF.Diff_append_seen_once_ind,1,0)+ IF( SELF.Diff_append_indiv_phone_cnt,1,0)+ IF( SELF.Diff_append_indiv_has_active_eda_phone_flag,1,0)+ IF( SELF.Diff_append_latest_phone_owner_flag,1,0)+ IF( SELF.Diff_hhid,1,0)+ IF( SELF.Diff_hhid_score,1,0)+ IF( SELF.Diff_phone7_hhid_key,1,0)+ IF( SELF.Diff_append_best_addr_match_flag,1,0)+ IF( SELF.Diff_append_best_nm_match_flag,1,0)+ IF( SELF.Diff_rawaid,1,0)+ IF( SELF.Diff_cleanaid,1,0)+ IF( SELF.Diff_current_rec,1,0)+ IF( SELF.Diff_first_build_date,1,0)+ IF( SELF.Diff_last_build_date,1,0);
  END;
// Now need to remove bad pivots from comparison
#uniquename(L)
  %L% := JOIN(in_left,bad_pivots,evaluate(LEFT,pivot_exp)=right.val,transform(left),left only,lookup);
#uniquename(R)
  %R% := JOIN(in_right,bad_pivots,evaluate(LEFT,pivot_exp)=right.val,transform(left),left only,lookup);
#uniquename(DiffL)
  %DiffL% := JOIN(%L%,%R%,evaluate(left,pivot_exp)=evaluate(right,pivot_exp),%fd%(left,right),hash);
#uniquename(Closest)
  %Closest% := DEDUP(SORT(%DiffL%,Val,Num_Diffs,local),Val,local); // Join will have distributed by pivot_exp
#uniquename(AggRec)
  %AggRec% := RECORD
    Count_Diff_in_flag := COUNT(GROUP,%Closest%.Diff_in_flag);
    Count_Diff_confidencescore := COUNT(GROUP,%Closest%.Diff_confidencescore);
    Count_Diff_rules := COUNT(GROUP,%Closest%.Diff_rules);
    Count_Diff_npa := COUNT(GROUP,%Closest%.Diff_npa);
    Count_Diff_phone7 := COUNT(GROUP,%Closest%.Diff_phone7);
    Count_Diff_cellphone := COUNT(GROUP,%Closest%.Diff_cellphone);
    Count_Diff_cellphoneidkey := COUNT(GROUP,%Closest%.Diff_cellphoneidkey);
    Count_Diff_phone7_did_key := COUNT(GROUP,%Closest%.Diff_phone7_did_key);
    Count_Diff_pdid := COUNT(GROUP,%Closest%.Diff_pdid);
    Count_Diff_did := COUNT(GROUP,%Closest%.Diff_did);
    Count_Diff_did_score := COUNT(GROUP,%Closest%.Diff_did_score);
    Count_Diff_datefirstseen := COUNT(GROUP,%Closest%.Diff_datefirstseen);
    Count_Diff_datelastseen := COUNT(GROUP,%Closest%.Diff_datelastseen);
    Count_Diff_datevendorlastreported := COUNT(GROUP,%Closest%.Diff_datevendorlastreported);
    Count_Diff_datevendorfirstreported := COUNT(GROUP,%Closest%.Diff_datevendorfirstreported);
    Count_Diff_dt_nonglb_last_seen := COUNT(GROUP,%Closest%.Diff_dt_nonglb_last_seen);
    Count_Diff_glb_dppa_flag := COUNT(GROUP,%Closest%.Diff_glb_dppa_flag);
    Count_Diff_glb_dppa_all := COUNT(GROUP,%Closest%.Diff_glb_dppa_all);
    Count_Diff_vendor := COUNT(GROUP,%Closest%.Diff_vendor);
    Count_Diff_src := COUNT(GROUP,%Closest%.Diff_src);
    Count_Diff_src_all := COUNT(GROUP,%Closest%.Diff_src_all);
    Count_Diff_src_cnt := COUNT(GROUP,%Closest%.Diff_src_cnt);
    Count_Diff_src_rule := COUNT(GROUP,%Closest%.Diff_src_rule);
    Count_Diff_append_avg_source_conf := COUNT(GROUP,%Closest%.Diff_append_avg_source_conf);
    Count_Diff_append_max_source_conf := COUNT(GROUP,%Closest%.Diff_append_max_source_conf);
    Count_Diff_append_min_source_conf := COUNT(GROUP,%Closest%.Diff_append_min_source_conf);
    Count_Diff_append_total_source_conf := COUNT(GROUP,%Closest%.Diff_append_total_source_conf);
    Count_Diff_orig_dt_last_seen := COUNT(GROUP,%Closest%.Diff_orig_dt_last_seen);
    Count_Diff_did_type := COUNT(GROUP,%Closest%.Diff_did_type);
    Count_Diff_origname := COUNT(GROUP,%Closest%.Diff_origname);
    Count_Diff_address1 := COUNT(GROUP,%Closest%.Diff_address1);
    Count_Diff_address2 := COUNT(GROUP,%Closest%.Diff_address2);
    Count_Diff_address3 := COUNT(GROUP,%Closest%.Diff_address3);
    Count_Diff_origcity := COUNT(GROUP,%Closest%.Diff_origcity);
    Count_Diff_origstate := COUNT(GROUP,%Closest%.Diff_origstate);
    Count_Diff_origzip := COUNT(GROUP,%Closest%.Diff_origzip);
    Count_Diff_orig_phone := COUNT(GROUP,%Closest%.Diff_orig_phone);
    Count_Diff_dob := COUNT(GROUP,%Closest%.Diff_dob);
    Count_Diff_agegroup := COUNT(GROUP,%Closest%.Diff_agegroup);
    Count_Diff_gender := COUNT(GROUP,%Closest%.Diff_gender);
    Count_Diff_email := COUNT(GROUP,%Closest%.Diff_email);
    Count_Diff_orig_listing_type := COUNT(GROUP,%Closest%.Diff_orig_listing_type);
    Count_Diff_listingtype := COUNT(GROUP,%Closest%.Diff_listingtype);
    Count_Diff_orig_publish_code := COUNT(GROUP,%Closest%.Diff_orig_publish_code);
    Count_Diff_orig_phone_type := COUNT(GROUP,%Closest%.Diff_orig_phone_type);
    Count_Diff_orig_phone_usage := COUNT(GROUP,%Closest%.Diff_orig_phone_usage);
    Count_Diff_company := COUNT(GROUP,%Closest%.Diff_company);
    Count_Diff_orig_phone_reg_dt := COUNT(GROUP,%Closest%.Diff_orig_phone_reg_dt);
    Count_Diff_orig_carrier_code := COUNT(GROUP,%Closest%.Diff_orig_carrier_code);
    Count_Diff_orig_carrier_name := COUNT(GROUP,%Closest%.Diff_orig_carrier_name);
    Count_Diff_orig_conf_score := COUNT(GROUP,%Closest%.Diff_orig_conf_score);
    Count_Diff_orig_rec_type := COUNT(GROUP,%Closest%.Diff_orig_rec_type);
    Count_Diff_clean_company := COUNT(GROUP,%Closest%.Diff_clean_company);
    Count_Diff_prim_range := COUNT(GROUP,%Closest%.Diff_prim_range);
    Count_Diff_predir := COUNT(GROUP,%Closest%.Diff_predir);
    Count_Diff_prim_name := COUNT(GROUP,%Closest%.Diff_prim_name);
    Count_Diff_addr_suffix := COUNT(GROUP,%Closest%.Diff_addr_suffix);
    Count_Diff_postdir := COUNT(GROUP,%Closest%.Diff_postdir);
    Count_Diff_unit_desig := COUNT(GROUP,%Closest%.Diff_unit_desig);
    Count_Diff_sec_range := COUNT(GROUP,%Closest%.Diff_sec_range);
    Count_Diff_p_city_name := COUNT(GROUP,%Closest%.Diff_p_city_name);
    Count_Diff_v_city_name := COUNT(GROUP,%Closest%.Diff_v_city_name);
    Count_Diff_state := COUNT(GROUP,%Closest%.Diff_state);
    Count_Diff_zip5 := COUNT(GROUP,%Closest%.Diff_zip5);
    Count_Diff_zip4 := COUNT(GROUP,%Closest%.Diff_zip4);
    Count_Diff_cart := COUNT(GROUP,%Closest%.Diff_cart);
    Count_Diff_cr_sort_sz := COUNT(GROUP,%Closest%.Diff_cr_sort_sz);
    Count_Diff_lot := COUNT(GROUP,%Closest%.Diff_lot);
    Count_Diff_lot_order := COUNT(GROUP,%Closest%.Diff_lot_order);
    Count_Diff_dpbc := COUNT(GROUP,%Closest%.Diff_dpbc);
    Count_Diff_chk_digit := COUNT(GROUP,%Closest%.Diff_chk_digit);
    Count_Diff_rec_type := COUNT(GROUP,%Closest%.Diff_rec_type);
    Count_Diff_ace_fips_st := COUNT(GROUP,%Closest%.Diff_ace_fips_st);
    Count_Diff_ace_fips_county := COUNT(GROUP,%Closest%.Diff_ace_fips_county);
    Count_Diff_geo_lat := COUNT(GROUP,%Closest%.Diff_geo_lat);
    Count_Diff_geo_long := COUNT(GROUP,%Closest%.Diff_geo_long);
    Count_Diff_msa := COUNT(GROUP,%Closest%.Diff_msa);
    Count_Diff_geo_blk := COUNT(GROUP,%Closest%.Diff_geo_blk);
    Count_Diff_geo_match := COUNT(GROUP,%Closest%.Diff_geo_match);
    Count_Diff_err_stat := COUNT(GROUP,%Closest%.Diff_err_stat);
    Count_Diff_title := COUNT(GROUP,%Closest%.Diff_title);
    Count_Diff_fname := COUNT(GROUP,%Closest%.Diff_fname);
    Count_Diff_mname := COUNT(GROUP,%Closest%.Diff_mname);
    Count_Diff_lname := COUNT(GROUP,%Closest%.Diff_lname);
    Count_Diff_name_suffix := COUNT(GROUP,%Closest%.Diff_name_suffix);
    Count_Diff_name_score := COUNT(GROUP,%Closest%.Diff_name_score);
    Count_Diff_bdid := COUNT(GROUP,%Closest%.Diff_bdid);
    Count_Diff_bdid_score := COUNT(GROUP,%Closest%.Diff_bdid_score);
    Count_Diff_append_npa_effective_dt := COUNT(GROUP,%Closest%.Diff_append_npa_effective_dt);
    Count_Diff_append_npa_last_change_dt := COUNT(GROUP,%Closest%.Diff_append_npa_last_change_dt);
    Count_Diff_append_dialable_ind := COUNT(GROUP,%Closest%.Diff_append_dialable_ind);
    Count_Diff_append_place_name := COUNT(GROUP,%Closest%.Diff_append_place_name);
    Count_Diff_append_portability_indicator := COUNT(GROUP,%Closest%.Diff_append_portability_indicator);
    Count_Diff_append_prior_area_code := COUNT(GROUP,%Closest%.Diff_append_prior_area_code);
    Count_Diff_append_nonpublished_match := COUNT(GROUP,%Closest%.Diff_append_nonpublished_match);
    Count_Diff_append_ocn := COUNT(GROUP,%Closest%.Diff_append_ocn);
    Count_Diff_append_time_zone := COUNT(GROUP,%Closest%.Diff_append_time_zone);
    Count_Diff_append_nxx_type := COUNT(GROUP,%Closest%.Diff_append_nxx_type);
    Count_Diff_append_coctype := COUNT(GROUP,%Closest%.Diff_append_coctype);
    Count_Diff_append_scc := COUNT(GROUP,%Closest%.Diff_append_scc);
    Count_Diff_append_phone_type := COUNT(GROUP,%Closest%.Diff_append_phone_type);
    Count_Diff_append_company_type := COUNT(GROUP,%Closest%.Diff_append_company_type);
    Count_Diff_append_phone_use := COUNT(GROUP,%Closest%.Diff_append_phone_use);
    Count_Diff_agreg_listing_type := COUNT(GROUP,%Closest%.Diff_agreg_listing_type);
    Count_Diff_max_orig_conf_score := COUNT(GROUP,%Closest%.Diff_max_orig_conf_score);
    Count_Diff_min_orig_conf_score := COUNT(GROUP,%Closest%.Diff_min_orig_conf_score);
    Count_Diff_cur_orig_conf_score := COUNT(GROUP,%Closest%.Diff_cur_orig_conf_score);
    Count_Diff_activeflag := COUNT(GROUP,%Closest%.Diff_activeflag);
    Count_Diff_eda_active_flag := COUNT(GROUP,%Closest%.Diff_eda_active_flag);
    Count_Diff_eda_match := COUNT(GROUP,%Closest%.Diff_eda_match);
    Count_Diff_eda_phone_dt := COUNT(GROUP,%Closest%.Diff_eda_phone_dt);
    Count_Diff_eda_did_dt := COUNT(GROUP,%Closest%.Diff_eda_did_dt);
    Count_Diff_eda_nm_addr_dt := COUNT(GROUP,%Closest%.Diff_eda_nm_addr_dt);
    Count_Diff_eda_hist_match := COUNT(GROUP,%Closest%.Diff_eda_hist_match);
    Count_Diff_eda_hist_phone_dt := COUNT(GROUP,%Closest%.Diff_eda_hist_phone_dt);
    Count_Diff_eda_hist_did_dt := COUNT(GROUP,%Closest%.Diff_eda_hist_did_dt);
    Count_Diff_eda_hist_nm_addr_dt := COUNT(GROUP,%Closest%.Diff_eda_hist_nm_addr_dt);
    Count_Diff_append_feedback_phone := COUNT(GROUP,%Closest%.Diff_append_feedback_phone);
    Count_Diff_append_feedback_phone_dt := COUNT(GROUP,%Closest%.Diff_append_feedback_phone_dt);
    Count_Diff_append_feedback_phone7_did := COUNT(GROUP,%Closest%.Diff_append_feedback_phone7_did);
    Count_Diff_append_feedback_phone7_did_dt := COUNT(GROUP,%Closest%.Diff_append_feedback_phone7_did_dt);
    Count_Diff_append_feedback_phone7_nm_addr := COUNT(GROUP,%Closest%.Diff_append_feedback_phone7_nm_addr);
    Count_Diff_append_feedback_phone7_nm_addr_dt := COUNT(GROUP,%Closest%.Diff_append_feedback_phone7_nm_addr_dt);
    Count_Diff_append_ported_match := COUNT(GROUP,%Closest%.Diff_append_ported_match);
    Count_Diff_append_seen_once_ind := COUNT(GROUP,%Closest%.Diff_append_seen_once_ind);
    Count_Diff_append_indiv_phone_cnt := COUNT(GROUP,%Closest%.Diff_append_indiv_phone_cnt);
    Count_Diff_append_indiv_has_active_eda_phone_flag := COUNT(GROUP,%Closest%.Diff_append_indiv_has_active_eda_phone_flag);
    Count_Diff_append_latest_phone_owner_flag := COUNT(GROUP,%Closest%.Diff_append_latest_phone_owner_flag);
    Count_Diff_hhid := COUNT(GROUP,%Closest%.Diff_hhid);
    Count_Diff_hhid_score := COUNT(GROUP,%Closest%.Diff_hhid_score);
    Count_Diff_phone7_hhid_key := COUNT(GROUP,%Closest%.Diff_phone7_hhid_key);
    Count_Diff_append_best_addr_match_flag := COUNT(GROUP,%Closest%.Diff_append_best_addr_match_flag);
    Count_Diff_append_best_nm_match_flag := COUNT(GROUP,%Closest%.Diff_append_best_nm_match_flag);
    Count_Diff_rawaid := COUNT(GROUP,%Closest%.Diff_rawaid);
    Count_Diff_cleanaid := COUNT(GROUP,%Closest%.Diff_cleanaid);
    Count_Diff_current_rec := COUNT(GROUP,%Closest%.Diff_current_rec);
    Count_Diff_first_build_date := COUNT(GROUP,%Closest%.Diff_first_build_date);
    Count_Diff_last_build_date := COUNT(GROUP,%Closest%.Diff_last_build_date);
    %Closest%.SourceField;
  END;
  out_counts := table(%Closest%,%AggRec%,SourceField,few);
ENDMACRO;
END;
