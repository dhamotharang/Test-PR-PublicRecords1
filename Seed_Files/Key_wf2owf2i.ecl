Import Seed_Files, Data_Services;

numrec := record
	Seed_Files.layout_wf2o;
	string3	prodnum;
end;

numrec into_num(Seed_Files.layout_wf2o L, string3 p) := transform
	self.prodnum := p;
	self := L;
end;

df := project(Seed_Files.files.file_wfs3, into_num(LEFT,'003')) + 
			project(Seed_Files.files.file_wfs4, into_num(LEFT,'004'));


export Key_wf2owf2i := index(df,{prodnum, social},{account,
	riskwiseid,
	datareturn,
	inputPresent,
	doOutput,
	firstcount,
	lastcount,
	addrcount,
	formeraddrcount,
	hphonecount,
	socscount,
	socsverlevel,
	dobcount,
	drlccount,
	cmpycount,
	verfirst,
	verlast,
	vercmpy,
	veraddr,
	vercity,
	verstate,
	verzip,
	verhphone,
	versocs,
	verdrlc,
	verdob,
	numelever,
	numsource,
	firstscore,
	lastscore,
	cmpyscore,
	addrscore,
	hphonescore,
	socsscore,
	dobscore,
	drlcscore,
	wphonename,
	wphoneaddr,
	wphonecity,
	wphonestate,
	wphonezip,
	socsmiskeyflag,
	hphonemiskeyflag,
	addrmiskeyflag,
	idtheftflag,
	aptscanflag,
	addrhistoryflag,
	coaalertflag,
	coafirst,
	coalast,
	coaaddr,
	coacity,
	coastate,
	coazip,
	wphonetypeflag,
	wphonevalflag,
	hphonetypeflag,
	hphonevalflag,
	phonezipflag,
	phonedissflag,
	addrvalflag,
	dwelltypeflag,
	ziptypeflag,
	socsvalflag,
	decsflag,
	socsdobflag,
	areacodesplitflag,
	altareacode,
	bansflag,
	drlcvalflag,
	drlcsoundx,
	drlcfirst,
	drlclast,
	drlcmiddle,
	drlcsocs,
	drlcdob,
	drlcgender,
	distaddrprevaddr,
	disthphonewphone,
	distwphoneaddr,
	statezipflag,
	cityzipflag,
	hphonestateflag,
	checkacctflag,
	cassaddr,
	casscity,
	cassstate,
	casszip,
	addrcommflag,
	nonresname,
	nonressic,
	nonresphone,
	nonresaddr,
	nonrescity,
	nonresstate,
	nonreszip,
	numfraud,
	airwavesscore,
	score2,
	tciaddrflag,
	tciprevaddrflag,
	estincome,
	emaildomainflag,
	emailuserflag,
	emailbrowserflag,
	hriskemaildomainflag,
	distaddrdomain,
	reason1,
	reason2,
	reason3,
	reason4}, Data_Services.Data_location.Prefix('NONAMEGIVEN')+'thor_Data400::key::seed::qa::wf2o');
	// reason4}, Data_Services.foreign_dataland + 'thor_Data400::key::seed::qa::wf2owf2i');
	