import ut;

numrec := record
	layout_bc1obc1i;
	string3	prodnum;
end;

numrec into_num(layout_bc1obc1i L, string3 p) := transform
	self.prodnum := p;
	self := L;
end;
df := project(files.file_bnk4, into_num(LEFT, '001')) + 
			project(files.file_cbbl, into_num(LEFT, '003'));

export Key_bc1obc1i := index(df,{prodnum, fin},{acctno,
	account,
	riskwiseid,
	firstcount,     
	lastcount,     
	addrcount,     
	phonecount,
	socscount,     
	socsverlevel,      
	dobcount,     
	drlccount,     
	cmpycount,
	cmpyaddrcount,
	cmpyphonecount,
	fincount,
	emailcount,
	verfirst,
	verlast,
	veraddr,
	vercity,
	verstate,
	verzip,
	verhphone,
	versocs,
	verdrlc,
	verdob,
	vercmpy,
	vercmpyaddr,
	vercmpycity,
	vercmpystate,
	vercmpyzip,
	vercmpyphone,
	verfin,
	numelever,
	numsource,
	numcmpyelever,
	numcmpysource,
	firstscore,
	lastscore,
	cmpyscore,
	addrscore,
	phonescore,
	socscore,
	dobscore,
	drlcscore,
	cmpyscore2,
	cmpyaddrscore,
	cmpyphonescore,
	finscore,
	emailscore,
	wphonename,
	wphoneaddr,
	wphonecity,
	wphonestate,
	wphonezip,
	socsmiskeyflag,
	phonemiskeyflag,
	addrmiskeyflag,
	idtheftflag,
	hphonetypeflag,
	hphonesrvc,
	hphone2addrtypeflag,
	hphone2typeflag,
	wphonetypeflag,
	wphonesrvc,
	areacodesplitflag,
	altareacode,
	phonezipflag,
	socsdob,
	hhriskphoneflag,
	hriskcmpy,
	sic,
	zipclassflag,
	zipname,
	medincome,
	addrriskflag,
	bansflag,
	bansdatefiled,
	addrvalflag,
	addrreason,
	lowissue,
	dwelltypeflag,
	phonedissflag,
	ecovariables,
	tcifull,
	tcilast,
	tciaddr}, '~thor_Data400::key::seed::qa::bc1obc1i');
