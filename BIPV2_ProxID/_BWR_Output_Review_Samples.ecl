BIPV2_ProxID._Output_Review_Samples(
   33
  ,BIPV2_ProxID.In_DOT_Base
  ,['CM','LB','TL','DW','SS']
  ,15
  ,'built'
  ,0.667
  ,'' //extra match filter
);

// -- BELOW IS TO OUTPUT SAMPLES WITH SPECIFIC CRITERIA AND HOPEFULLY EASIER REVIEWING(FIELDS ARE BETTER ORGANIZED)
pInfile              := BIPV2_ProxID.In_DOT_Base;
pKeyversions         := '20180501_not_both_legal_zero_scores_prop_name_type_nonpartitionfein_418';
// pKeyversions         := '20180501_418';
kmtch                   := BIPV2_ProxID.Keys(pInfile,pKeyversions).MatchSample ;
kcand                   := BIPV2_ProxID.Keys(pInfile,pKeyversions).Candidates  ;

kmatchsample    := kmtch;
kmatchsample_eq := kmatchsample(conf = 30,cnp_name_score = 0);
kmatchsample_gt := kmatchsample(conf > 30,cnp_name_score = 0);
// kmatchsample_eq := kmatchsample(conf = 30,active_duns_number_score = cnp_name_score or active_domestic_corp_key_score = cnp_name_score or company_fein_score = cnp_name_score);
// kmatchsample_gt := kmatchsample(conf > 30,active_duns_number_score = cnp_name_score or active_domestic_corp_key_score = cnp_name_score or company_fein_score = cnp_name_score);
//do 2/3 recs at threshold, 1/3 above threshold
countReviewers := 6;
totalSamples := 15 * countReviewers;
countkmatchsample_eq  := count(kmatchsample_eq);
countkmatchsample_gt  := count(kmatchsample_gt);
samplesatthreshold          := if((unsigned)(totalsamples * 0.667)      >= countkmatchsample_eq  ,countkmatchsample_eq   ,(unsigned)(totalsamples * 0.667)      );
samplesabovethreshold       := if((totalSamples - samplesatthreshold) >  countkmatchsample_gt  ,countkmatchsample_gt   ,(totalSamples - samplesatthreshold) );
samplerecseq      := iff(samplesatthreshold    != 0 ,enth (kmatchsample_eq,samplesatthreshold     ) ,dataset([],recordof(kmatchsample_eq))) : independent;
samplerecsgt      := iff(samplesabovethreshold != 0 ,enth (kmatchsample_gt,samplesabovethreshold  ) ,dataset([],recordof(kmatchsample_gt))) : independent;

allsamplerecs     := sort(samplerecseq + samplerecsgt,proxid1 + proxid2);
totalsamplesreal  := samplesatthreshold + samplesabovethreshold;         

samplesperreviewer  := (unsigned)totalsamplesreal / countReviewers;
samplesremainder    := totalsamplesreal % countReviewers;          

allsampleproxids :=   table(table(samplerecseq + samplerecsgt  ,{unsigned6 proxid := proxid1})
                          + table(samplerecseq + samplerecsgt  ,{unsigned6 proxid := proxid2})
                      ,{proxid},proxid,few);
setsampleproxids  := set(allsampleproxids  ,proxid);
allproxidcands    := project(kcand(proxid in setsampleproxids)  ,transform(BIPV2_ProxID.match_candidates(BIPV2_ProxID.In_DOT_Base).layout_candidates,self := left,self := []));
s := dataset([],BIPV2_ProxID.Layout_Specificities.R);
allproxidsrolled := project(BIPV2_ProxID.Debug(BIPV2_ProxID.In_DOT_Base,s).RolledEntities(allproxidcands)
  ,transform({unsigned6 proxid
  ,dataset(recordof(left.company_name_values             )) company_name     
  ,dataset(recordof(left.company_name_type_derived_values)) company_name_type     
  ,dataset(recordof(left.company_address_values          )) company_address  
  ,dataset(recordof(left.active_domestic_corp_key_values )) active_ckeys     
  ,dataset(recordof(left.active_duns_number_values       )) active_duns      
  ,dataset(recordof(left.company_fein_values             )) feins              
  ,recordof(left) - proxid - company_name_values - company_address_values - active_domestic_corp_key_values - company_fein_values - active_duns_number_values - company_name_type_derived_values - dt_first_seen_values - dt_last_seen_values}
  ,self := left
  ,self.company_name      := left.company_name_values                   
  ,self.company_name_type := left.company_name_type_derived_values                  
  ,self.company_address   := left.company_address_values                
  ,self.active_ckeys      := left.active_domestic_corp_key_values   
  ,self.active_duns       := left.active_duns_number_values         
  ,self.feins             := left.company_fein_values               
)
);
layrolled := recordof(allproxidsrolled);

mapremainder(unsigned previewer) := 
map(
   samplesremainder  = 0 => 0         
  ,previewer         = 1 and samplesremainder >= 1  => 1
  ,previewer         = 2 and samplesremainder >= 2  => 1
  ,previewer         = 3 and samplesremainder >= 3  => 1
  ,previewer         = 4 and samplesremainder >= 4  => 1
  ,previewer         = 5 and samplesremainder >= 5  => 1
  ,previewer         = 6 and samplesremainder >= 6  => 1
  ,0
);

startrec1   := 1    ;
startrec2   := startrec1 + samplesperreviewer + mapremainder(1);
startrec3   := startrec2 + samplesperreviewer + mapremainder(2);
startrec4   := startrec3 + samplesperreviewer + mapremainder(3);
startrec5   := startrec4 + samplesperreviewer + mapremainder(4);
startrec6   := startrec5 + samplesperreviewer + mapremainder(5);

PW := choosen(allsamplerecs,samplesperreviewer + mapremainder(1),startrec1 );
ND := choosen(allsamplerecs,samplesperreviewer + mapremainder(2),startrec2 );
CF := choosen(allsamplerecs,samplesperreviewer + mapremainder(3),startrec3 );
KW := choosen(allsamplerecs,samplesperreviewer + mapremainder(4),startrec4 );
RP := choosen(allsamplerecs,samplesperreviewer + mapremainder(5),startrec5 );
VB := choosen(allsamplerecs,samplesperreviewer + mapremainder(6),startrec6 );

PW_norm := project(normalize(PW,3,transform( {		 integer2 conf 	,integer2 conf_prop 	,integer2 attribute_conf 	,unsigned2 support_cnp_name ,typeof(kcand.proxid) proxid},self.proxid := choose(counter  ,left.proxid1,left.proxid2,0),self.conf := left.conf,self.conf_prop := left.conf_prop,self.attribute_conf := left.attribute_conf,self.support_cnp_name := left.support_cnp_name)) ,transform({unsigned cnt,recordof(left)},self.cnt := counter + ((startrec1 - 1) * 3),self := left));
ND_norm := project(normalize(ND,3,transform( {		 integer2 conf 	,integer2 conf_prop 	,integer2 attribute_conf 	,unsigned2 support_cnp_name ,typeof(kcand.proxid) proxid},self.proxid := choose(counter  ,left.proxid1,left.proxid2,0),self.conf := left.conf,self.conf_prop := left.conf_prop,self.attribute_conf := left.attribute_conf,self.support_cnp_name := left.support_cnp_name)) ,transform({unsigned cnt,recordof(left)},self.cnt := counter + ((startrec2 - 1) * 3),self := left));
CF_norm := project(normalize(CF,3,transform( {		 integer2 conf 	,integer2 conf_prop 	,integer2 attribute_conf 	,unsigned2 support_cnp_name ,typeof(kcand.proxid) proxid},self.proxid := choose(counter  ,left.proxid1,left.proxid2,0),self.conf := left.conf,self.conf_prop := left.conf_prop,self.attribute_conf := left.attribute_conf,self.support_cnp_name := left.support_cnp_name)) ,transform({unsigned cnt,recordof(left)},self.cnt := counter + ((startrec3 - 1) * 3),self := left));
KW_norm := project(normalize(KW,3,transform( {		 integer2 conf 	,integer2 conf_prop 	,integer2 attribute_conf 	,unsigned2 support_cnp_name ,typeof(kcand.proxid) proxid},self.proxid := choose(counter  ,left.proxid1,left.proxid2,0),self.conf := left.conf,self.conf_prop := left.conf_prop,self.attribute_conf := left.attribute_conf,self.support_cnp_name := left.support_cnp_name)) ,transform({unsigned cnt,recordof(left)},self.cnt := counter + ((startrec4 - 1) * 3),self := left));
RP_norm := project(normalize(RP,3,transform( {		 integer2 conf 	,integer2 conf_prop 	,integer2 attribute_conf 	,unsigned2 support_cnp_name ,typeof(kcand.proxid) proxid},self.proxid := choose(counter  ,left.proxid1,left.proxid2,0),self.conf := left.conf,self.conf_prop := left.conf_prop,self.attribute_conf := left.attribute_conf,self.support_cnp_name := left.support_cnp_name)) ,transform({unsigned cnt,recordof(left)},self.cnt := counter + ((startrec5 - 1) * 3),self := left));
VB_norm := project(normalize(VB,3,transform( {		 integer2 conf 	,integer2 conf_prop 	,integer2 attribute_conf 	,unsigned2 support_cnp_name ,typeof(kcand.proxid) proxid},self.proxid := choose(counter  ,left.proxid1,left.proxid2,0),self.conf := left.conf,self.conf_prop := left.conf_prop,self.attribute_conf := left.attribute_conf,self.support_cnp_name := left.support_cnp_name)) ,transform({unsigned cnt,recordof(left)},self.cnt := counter + ((startrec6 - 1) * 3),self := left));

PW_rolled := sort(join(PW_norm ,allproxidsrolled ,left.proxid = right.proxid ,transform({unsigned cnt,integer2 conf ,typeof(kmatchsample.attribute_conf) attribute_conf ,typeof(kmatchsample.support_cnp_name) support_cnp_name,recordof(right)},self.cnt := left.cnt,self.conf := if(right.proxid != 0  ,left.conf,0),self.attribute_conf := if(right.proxid != 0  ,left.attribute_conf,0),self.support_cnp_name := if(right.proxid != 0  ,left.support_cnp_name,0),self := right),left outer,lookup),cnt);
ND_rolled := sort(join(ND_norm ,allproxidsrolled ,left.proxid = right.proxid ,transform({unsigned cnt,integer2 conf ,typeof(kmatchsample.attribute_conf) attribute_conf ,typeof(kmatchsample.support_cnp_name) support_cnp_name,recordof(right)},self.cnt := left.cnt,self.conf := if(right.proxid != 0  ,left.conf,0),self.attribute_conf := if(right.proxid != 0  ,left.attribute_conf,0),self.support_cnp_name := if(right.proxid != 0  ,left.support_cnp_name,0),self := right),left outer,lookup),cnt);
CF_rolled := sort(join(CF_norm ,allproxidsrolled ,left.proxid = right.proxid ,transform({unsigned cnt,integer2 conf ,typeof(kmatchsample.attribute_conf) attribute_conf ,typeof(kmatchsample.support_cnp_name) support_cnp_name,recordof(right)},self.cnt := left.cnt,self.conf := if(right.proxid != 0  ,left.conf,0),self.attribute_conf := if(right.proxid != 0  ,left.attribute_conf,0),self.support_cnp_name := if(right.proxid != 0  ,left.support_cnp_name,0),self := right),left outer,lookup),cnt);
KW_rolled := sort(join(KW_norm ,allproxidsrolled ,left.proxid = right.proxid ,transform({unsigned cnt,integer2 conf ,typeof(kmatchsample.attribute_conf) attribute_conf ,typeof(kmatchsample.support_cnp_name) support_cnp_name,recordof(right)},self.cnt := left.cnt,self.conf := if(right.proxid != 0  ,left.conf,0),self.attribute_conf := if(right.proxid != 0  ,left.attribute_conf,0),self.support_cnp_name := if(right.proxid != 0  ,left.support_cnp_name,0),self := right),left outer,lookup),cnt);
RP_rolled := sort(join(RP_norm ,allproxidsrolled ,left.proxid = right.proxid ,transform({unsigned cnt,integer2 conf ,typeof(kmatchsample.attribute_conf) attribute_conf ,typeof(kmatchsample.support_cnp_name) support_cnp_name,recordof(right)},self.cnt := left.cnt,self.conf := if(right.proxid != 0  ,left.conf,0),self.attribute_conf := if(right.proxid != 0  ,left.attribute_conf,0),self.support_cnp_name := if(right.proxid != 0  ,left.support_cnp_name,0),self := right),left outer,lookup),cnt);
VB_rolled := sort(join(VB_norm ,allproxidsrolled ,left.proxid = right.proxid ,transform({unsigned cnt,integer2 conf ,typeof(kmatchsample.attribute_conf) attribute_conf ,typeof(kmatchsample.support_cnp_name) support_cnp_name,recordof(right)},self.cnt := left.cnt,self.conf := if(right.proxid != 0  ,left.conf,0),self.attribute_conf := if(right.proxid != 0  ,left.attribute_conf,0),self.support_cnp_name := if(right.proxid != 0  ,left.support_cnp_name,0),self := right),left outer,lookup),cnt);

allrolled := sort(
	  PW_rolled	+ ND_rolled	+ CF_rolled	+ KW_rolled	+ RP_rolled	+ VB_rolled	,cnt)	;
PW_Score  := project(PW, {		 integer2 conf 	,unsigned6 proxid1 	,unsigned6 proxid2 	,unsigned2 rule 	,integer2 dateoverlap 	,integer2 conf_prop 	,unsigned6 rcid1 	,unsigned6 rcid2 	,integer2 attribute_conf 	,string matching_attributes 	,integer2 cnp_number_score 	,integer2 st_score 	,integer2 prim_range_derived_score 	,integer2 hist_duns_number_score 	,integer2 ebr_file_number_score 	,integer2 active_duns_number_score 	,integer2 hist_enterprise_number_score 	,integer2 hist_domestic_corp_key_score 	,integer2 foreign_corp_key_score 	,integer2 unk_corp_key_score 	,integer2 company_fein_score 	,integer2 company_phone_score 	,integer2 active_enterprise_number_score 	,integer2 active_domestic_corp_key_score 	,integer2 company_addr1_score 	,integer2 cnp_name_score 	,integer2 zip_score 	,integer2 company_csz_score 	,integer2 prim_name_derived_score 	,integer2 sec_range_score 	,integer2 v_city_name_score 	,integer2 cnp_btype_score 	,integer2 company_address_score 	,unsigned2 support_cnp_name } );
PW_Fields := project(PW, {		 string30 left_cnp_number 	,boolean cnp_number_skipped 	,string30 right_cnp_number 	,string2 left_st 	,boolean st_skipped 	,string2 right_st 	,string10 left_prim_range_derived 	,boolean prim_range_derived_skipped 	,string10 right_prim_range_derived 	,string9 left_hist_duns_number 	,string9 right_hist_duns_number 	,string9 left_ebr_file_number 	,string9 right_ebr_file_number 	,string9 left_active_duns_number 	,string9 right_active_duns_number 	,string9 left_hist_enterprise_number 	,string9 right_hist_enterprise_number 	,string30 left_hist_domestic_corp_key 	,string30 right_hist_domestic_corp_key 	,string30 left_foreign_corp_key 	,string30 right_foreign_corp_key 	,string30 left_unk_corp_key 	,string30 right_unk_corp_key 	,string9 left_company_fein 	,string9 right_company_fein 	,string10 left_company_phone 	,string10 right_company_phone 	,string9 left_active_enterprise_number 	,boolean active_enterprise_number_skipped 	,string9 right_active_enterprise_number 	,string30 left_active_domestic_corp_key 	,boolean active_domestic_corp_key_skipped 	,string30 right_active_domestic_corp_key 	,unsigned4 left_company_addr1 	,unsigned4 right_company_addr1 	,string500 left_cnp_name 	,boolean cnp_name_skipped 	,string500 right_cnp_name 	,string5 left_zip 	,string5 right_zip 	,unsigned4 left_company_csz 	,boolean company_csz_skipped 	,unsigned4 right_company_csz 	,string left_prim_name_derived 	,boolean prim_name_derived_skipped 	,string right_prim_name_derived 	,string8 left_sec_range 	,string8 right_sec_range 	,string25 left_v_city_name 	,string25 right_v_city_name 	,string10 left_cnp_btype 	,string10 right_cnp_btype 	,string120 left_company_name 	,string120 right_company_name 	,string50 left_company_name_type_raw 	,string50 right_company_name_type_raw 	,string50 left_company_name_type_derived 	,string50 right_company_name_type_derived 	,string1 left_cnp_hasnumber 	,string1 right_cnp_hasnumber 	,string20 left_cnp_lowv 	,string20 right_cnp_lowv 	,boolean left_cnp_translated 	,boolean right_cnp_translated 	,integer4 left_cnp_classid 	,integer4 right_cnp_classid 	,string1 left_company_foreign_domestic 	,string1 right_company_foreign_domestic 	,unsigned6 left_company_bdid 	,unsigned6 right_company_bdid 	,string28 left_prim_name 	,string28 right_prim_name 	,string10 left_prim_range 	,string10 right_prim_range 	,unsigned4 left_company_address 	,boolean company_address_skipped 	,unsigned4 right_company_address 	,unsigned4 left_dt_first_seen 	,unsigned4 right_dt_first_seen 	,unsigned4 left_dt_last_seen 	,unsigned4 right_dt_last_seen } );
ND_Score  := project(ND, {		 integer2 conf 	,unsigned6 proxid1 	,unsigned6 proxid2 	,unsigned2 rule 	,integer2 dateoverlap 	,integer2 conf_prop 	,unsigned6 rcid1 	,unsigned6 rcid2 	,integer2 attribute_conf 	,string matching_attributes 	,integer2 cnp_number_score 	,integer2 st_score 	,integer2 prim_range_derived_score 	,integer2 hist_duns_number_score 	,integer2 ebr_file_number_score 	,integer2 active_duns_number_score 	,integer2 hist_enterprise_number_score 	,integer2 hist_domestic_corp_key_score 	,integer2 foreign_corp_key_score 	,integer2 unk_corp_key_score 	,integer2 company_fein_score 	,integer2 company_phone_score 	,integer2 active_enterprise_number_score 	,integer2 active_domestic_corp_key_score 	,integer2 company_addr1_score 	,integer2 cnp_name_score 	,integer2 zip_score 	,integer2 company_csz_score 	,integer2 prim_name_derived_score 	,integer2 sec_range_score 	,integer2 v_city_name_score 	,integer2 cnp_btype_score 	,integer2 company_address_score 	,unsigned2 support_cnp_name } );
ND_Fields := project(ND, {		 string30 left_cnp_number 	,boolean cnp_number_skipped 	,string30 right_cnp_number 	,string2 left_st 	,boolean st_skipped 	,string2 right_st 	,string10 left_prim_range_derived 	,boolean prim_range_derived_skipped 	,string10 right_prim_range_derived 	,string9 left_hist_duns_number 	,string9 right_hist_duns_number 	,string9 left_ebr_file_number 	,string9 right_ebr_file_number 	,string9 left_active_duns_number 	,string9 right_active_duns_number 	,string9 left_hist_enterprise_number 	,string9 right_hist_enterprise_number 	,string30 left_hist_domestic_corp_key 	,string30 right_hist_domestic_corp_key 	,string30 left_foreign_corp_key 	,string30 right_foreign_corp_key 	,string30 left_unk_corp_key 	,string30 right_unk_corp_key 	,string9 left_company_fein 	,string9 right_company_fein 	,string10 left_company_phone 	,string10 right_company_phone 	,string9 left_active_enterprise_number 	,boolean active_enterprise_number_skipped 	,string9 right_active_enterprise_number 	,string30 left_active_domestic_corp_key 	,boolean active_domestic_corp_key_skipped 	,string30 right_active_domestic_corp_key 	,unsigned4 left_company_addr1 	,unsigned4 right_company_addr1 	,string500 left_cnp_name 	,boolean cnp_name_skipped 	,string500 right_cnp_name 	,string5 left_zip 	,string5 right_zip 	,unsigned4 left_company_csz 	,boolean company_csz_skipped 	,unsigned4 right_company_csz 	,string left_prim_name_derived 	,boolean prim_name_derived_skipped 	,string right_prim_name_derived 	,string8 left_sec_range 	,string8 right_sec_range 	,string25 left_v_city_name 	,string25 right_v_city_name 	,string10 left_cnp_btype 	,string10 right_cnp_btype 	,string120 left_company_name 	,string120 right_company_name 	,string50 left_company_name_type_raw 	,string50 right_company_name_type_raw 	,string50 left_company_name_type_derived 	,string50 right_company_name_type_derived 	,string1 left_cnp_hasnumber 	,string1 right_cnp_hasnumber 	,string20 left_cnp_lowv 	,string20 right_cnp_lowv 	,boolean left_cnp_translated 	,boolean right_cnp_translated 	,integer4 left_cnp_classid 	,integer4 right_cnp_classid 	,string1 left_company_foreign_domestic 	,string1 right_company_foreign_domestic 	,unsigned6 left_company_bdid 	,unsigned6 right_company_bdid 	,string28 left_prim_name 	,string28 right_prim_name 	,string10 left_prim_range 	,string10 right_prim_range 	,unsigned4 left_company_address 	,boolean company_address_skipped 	,unsigned4 right_company_address 	,unsigned4 left_dt_first_seen 	,unsigned4 right_dt_first_seen 	,unsigned4 left_dt_last_seen 	,unsigned4 right_dt_last_seen } );
CF_Score  := project(CF, {		 integer2 conf 	,unsigned6 proxid1 	,unsigned6 proxid2 	,unsigned2 rule 	,integer2 dateoverlap 	,integer2 conf_prop 	,unsigned6 rcid1 	,unsigned6 rcid2 	,integer2 attribute_conf 	,string matching_attributes 	,integer2 cnp_number_score 	,integer2 st_score 	,integer2 prim_range_derived_score 	,integer2 hist_duns_number_score 	,integer2 ebr_file_number_score 	,integer2 active_duns_number_score 	,integer2 hist_enterprise_number_score 	,integer2 hist_domestic_corp_key_score 	,integer2 foreign_corp_key_score 	,integer2 unk_corp_key_score 	,integer2 company_fein_score 	,integer2 company_phone_score 	,integer2 active_enterprise_number_score 	,integer2 active_domestic_corp_key_score 	,integer2 company_addr1_score 	,integer2 cnp_name_score 	,integer2 zip_score 	,integer2 company_csz_score 	,integer2 prim_name_derived_score 	,integer2 sec_range_score 	,integer2 v_city_name_score 	,integer2 cnp_btype_score 	,integer2 company_address_score 	,unsigned2 support_cnp_name } );
CF_Fields := project(CF, {		 string30 left_cnp_number 	,boolean cnp_number_skipped 	,string30 right_cnp_number 	,string2 left_st 	,boolean st_skipped 	,string2 right_st 	,string10 left_prim_range_derived 	,boolean prim_range_derived_skipped 	,string10 right_prim_range_derived 	,string9 left_hist_duns_number 	,string9 right_hist_duns_number 	,string9 left_ebr_file_number 	,string9 right_ebr_file_number 	,string9 left_active_duns_number 	,string9 right_active_duns_number 	,string9 left_hist_enterprise_number 	,string9 right_hist_enterprise_number 	,string30 left_hist_domestic_corp_key 	,string30 right_hist_domestic_corp_key 	,string30 left_foreign_corp_key 	,string30 right_foreign_corp_key 	,string30 left_unk_corp_key 	,string30 right_unk_corp_key 	,string9 left_company_fein 	,string9 right_company_fein 	,string10 left_company_phone 	,string10 right_company_phone 	,string9 left_active_enterprise_number 	,boolean active_enterprise_number_skipped 	,string9 right_active_enterprise_number 	,string30 left_active_domestic_corp_key 	,boolean active_domestic_corp_key_skipped 	,string30 right_active_domestic_corp_key 	,unsigned4 left_company_addr1 	,unsigned4 right_company_addr1 	,string500 left_cnp_name 	,boolean cnp_name_skipped 	,string500 right_cnp_name 	,string5 left_zip 	,string5 right_zip 	,unsigned4 left_company_csz 	,boolean company_csz_skipped 	,unsigned4 right_company_csz 	,string left_prim_name_derived 	,boolean prim_name_derived_skipped 	,string right_prim_name_derived 	,string8 left_sec_range 	,string8 right_sec_range 	,string25 left_v_city_name 	,string25 right_v_city_name 	,string10 left_cnp_btype 	,string10 right_cnp_btype 	,string120 left_company_name 	,string120 right_company_name 	,string50 left_company_name_type_raw 	,string50 right_company_name_type_raw 	,string50 left_company_name_type_derived 	,string50 right_company_name_type_derived 	,string1 left_cnp_hasnumber 	,string1 right_cnp_hasnumber 	,string20 left_cnp_lowv 	,string20 right_cnp_lowv 	,boolean left_cnp_translated 	,boolean right_cnp_translated 	,integer4 left_cnp_classid 	,integer4 right_cnp_classid 	,string1 left_company_foreign_domestic 	,string1 right_company_foreign_domestic 	,unsigned6 left_company_bdid 	,unsigned6 right_company_bdid 	,string28 left_prim_name 	,string28 right_prim_name 	,string10 left_prim_range 	,string10 right_prim_range 	,unsigned4 left_company_address 	,boolean company_address_skipped 	,unsigned4 right_company_address 	,unsigned4 left_dt_first_seen 	,unsigned4 right_dt_first_seen 	,unsigned4 left_dt_last_seen 	,unsigned4 right_dt_last_seen } );
KW_Score  := project(KW, {		 integer2 conf 	,unsigned6 proxid1 	,unsigned6 proxid2 	,unsigned2 rule 	,integer2 dateoverlap 	,integer2 conf_prop 	,unsigned6 rcid1 	,unsigned6 rcid2 	,integer2 attribute_conf 	,string matching_attributes 	,integer2 cnp_number_score 	,integer2 st_score 	,integer2 prim_range_derived_score 	,integer2 hist_duns_number_score 	,integer2 ebr_file_number_score 	,integer2 active_duns_number_score 	,integer2 hist_enterprise_number_score 	,integer2 hist_domestic_corp_key_score 	,integer2 foreign_corp_key_score 	,integer2 unk_corp_key_score 	,integer2 company_fein_score 	,integer2 company_phone_score 	,integer2 active_enterprise_number_score 	,integer2 active_domestic_corp_key_score 	,integer2 company_addr1_score 	,integer2 cnp_name_score 	,integer2 zip_score 	,integer2 company_csz_score 	,integer2 prim_name_derived_score 	,integer2 sec_range_score 	,integer2 v_city_name_score 	,integer2 cnp_btype_score 	,integer2 company_address_score 	,unsigned2 support_cnp_name } );
KW_Fields := project(KW, {		 string30 left_cnp_number 	,boolean cnp_number_skipped 	,string30 right_cnp_number 	,string2 left_st 	,boolean st_skipped 	,string2 right_st 	,string10 left_prim_range_derived 	,boolean prim_range_derived_skipped 	,string10 right_prim_range_derived 	,string9 left_hist_duns_number 	,string9 right_hist_duns_number 	,string9 left_ebr_file_number 	,string9 right_ebr_file_number 	,string9 left_active_duns_number 	,string9 right_active_duns_number 	,string9 left_hist_enterprise_number 	,string9 right_hist_enterprise_number 	,string30 left_hist_domestic_corp_key 	,string30 right_hist_domestic_corp_key 	,string30 left_foreign_corp_key 	,string30 right_foreign_corp_key 	,string30 left_unk_corp_key 	,string30 right_unk_corp_key 	,string9 left_company_fein 	,string9 right_company_fein 	,string10 left_company_phone 	,string10 right_company_phone 	,string9 left_active_enterprise_number 	,boolean active_enterprise_number_skipped 	,string9 right_active_enterprise_number 	,string30 left_active_domestic_corp_key 	,boolean active_domestic_corp_key_skipped 	,string30 right_active_domestic_corp_key 	,unsigned4 left_company_addr1 	,unsigned4 right_company_addr1 	,string500 left_cnp_name 	,boolean cnp_name_skipped 	,string500 right_cnp_name 	,string5 left_zip 	,string5 right_zip 	,unsigned4 left_company_csz 	,boolean company_csz_skipped 	,unsigned4 right_company_csz 	,string left_prim_name_derived 	,boolean prim_name_derived_skipped 	,string right_prim_name_derived 	,string8 left_sec_range 	,string8 right_sec_range 	,string25 left_v_city_name 	,string25 right_v_city_name 	,string10 left_cnp_btype 	,string10 right_cnp_btype 	,string120 left_company_name 	,string120 right_company_name 	,string50 left_company_name_type_raw 	,string50 right_company_name_type_raw 	,string50 left_company_name_type_derived 	,string50 right_company_name_type_derived 	,string1 left_cnp_hasnumber 	,string1 right_cnp_hasnumber 	,string20 left_cnp_lowv 	,string20 right_cnp_lowv 	,boolean left_cnp_translated 	,boolean right_cnp_translated 	,integer4 left_cnp_classid 	,integer4 right_cnp_classid 	,string1 left_company_foreign_domestic 	,string1 right_company_foreign_domestic 	,unsigned6 left_company_bdid 	,unsigned6 right_company_bdid 	,string28 left_prim_name 	,string28 right_prim_name 	,string10 left_prim_range 	,string10 right_prim_range 	,unsigned4 left_company_address 	,boolean company_address_skipped 	,unsigned4 right_company_address 	,unsigned4 left_dt_first_seen 	,unsigned4 right_dt_first_seen 	,unsigned4 left_dt_last_seen 	,unsigned4 right_dt_last_seen } );
RP_Score  := project(RP, {		 integer2 conf 	,unsigned6 proxid1 	,unsigned6 proxid2 	,unsigned2 rule 	,integer2 dateoverlap 	,integer2 conf_prop 	,unsigned6 rcid1 	,unsigned6 rcid2 	,integer2 attribute_conf 	,string matching_attributes 	,integer2 cnp_number_score 	,integer2 st_score 	,integer2 prim_range_derived_score 	,integer2 hist_duns_number_score 	,integer2 ebr_file_number_score 	,integer2 active_duns_number_score 	,integer2 hist_enterprise_number_score 	,integer2 hist_domestic_corp_key_score 	,integer2 foreign_corp_key_score 	,integer2 unk_corp_key_score 	,integer2 company_fein_score 	,integer2 company_phone_score 	,integer2 active_enterprise_number_score 	,integer2 active_domestic_corp_key_score 	,integer2 company_addr1_score 	,integer2 cnp_name_score 	,integer2 zip_score 	,integer2 company_csz_score 	,integer2 prim_name_derived_score 	,integer2 sec_range_score 	,integer2 v_city_name_score 	,integer2 cnp_btype_score 	,integer2 company_address_score 	,unsigned2 support_cnp_name } );
RP_Fields := project(RP, {		 string30 left_cnp_number 	,boolean cnp_number_skipped 	,string30 right_cnp_number 	,string2 left_st 	,boolean st_skipped 	,string2 right_st 	,string10 left_prim_range_derived 	,boolean prim_range_derived_skipped 	,string10 right_prim_range_derived 	,string9 left_hist_duns_number 	,string9 right_hist_duns_number 	,string9 left_ebr_file_number 	,string9 right_ebr_file_number 	,string9 left_active_duns_number 	,string9 right_active_duns_number 	,string9 left_hist_enterprise_number 	,string9 right_hist_enterprise_number 	,string30 left_hist_domestic_corp_key 	,string30 right_hist_domestic_corp_key 	,string30 left_foreign_corp_key 	,string30 right_foreign_corp_key 	,string30 left_unk_corp_key 	,string30 right_unk_corp_key 	,string9 left_company_fein 	,string9 right_company_fein 	,string10 left_company_phone 	,string10 right_company_phone 	,string9 left_active_enterprise_number 	,boolean active_enterprise_number_skipped 	,string9 right_active_enterprise_number 	,string30 left_active_domestic_corp_key 	,boolean active_domestic_corp_key_skipped 	,string30 right_active_domestic_corp_key 	,unsigned4 left_company_addr1 	,unsigned4 right_company_addr1 	,string500 left_cnp_name 	,boolean cnp_name_skipped 	,string500 right_cnp_name 	,string5 left_zip 	,string5 right_zip 	,unsigned4 left_company_csz 	,boolean company_csz_skipped 	,unsigned4 right_company_csz 	,string left_prim_name_derived 	,boolean prim_name_derived_skipped 	,string right_prim_name_derived 	,string8 left_sec_range 	,string8 right_sec_range 	,string25 left_v_city_name 	,string25 right_v_city_name 	,string10 left_cnp_btype 	,string10 right_cnp_btype 	,string120 left_company_name 	,string120 right_company_name 	,string50 left_company_name_type_raw 	,string50 right_company_name_type_raw 	,string50 left_company_name_type_derived 	,string50 right_company_name_type_derived 	,string1 left_cnp_hasnumber 	,string1 right_cnp_hasnumber 	,string20 left_cnp_lowv 	,string20 right_cnp_lowv 	,boolean left_cnp_translated 	,boolean right_cnp_translated 	,integer4 left_cnp_classid 	,integer4 right_cnp_classid 	,string1 left_company_foreign_domestic 	,string1 right_company_foreign_domestic 	,unsigned6 left_company_bdid 	,unsigned6 right_company_bdid 	,string28 left_prim_name 	,string28 right_prim_name 	,string10 left_prim_range 	,string10 right_prim_range 	,unsigned4 left_company_address 	,boolean company_address_skipped 	,unsigned4 right_company_address 	,unsigned4 left_dt_first_seen 	,unsigned4 right_dt_first_seen 	,unsigned4 left_dt_last_seen 	,unsigned4 right_dt_last_seen } );
VB_Score  := project(VB, {		 integer2 conf 	,unsigned6 proxid1 	,unsigned6 proxid2 	,unsigned2 rule 	,integer2 dateoverlap 	,integer2 conf_prop 	,unsigned6 rcid1 	,unsigned6 rcid2 	,integer2 attribute_conf 	,string matching_attributes 	,integer2 cnp_number_score 	,integer2 st_score 	,integer2 prim_range_derived_score 	,integer2 hist_duns_number_score 	,integer2 ebr_file_number_score 	,integer2 active_duns_number_score 	,integer2 hist_enterprise_number_score 	,integer2 hist_domestic_corp_key_score 	,integer2 foreign_corp_key_score 	,integer2 unk_corp_key_score 	,integer2 company_fein_score 	,integer2 company_phone_score 	,integer2 active_enterprise_number_score 	,integer2 active_domestic_corp_key_score 	,integer2 company_addr1_score 	,integer2 cnp_name_score 	,integer2 zip_score 	,integer2 company_csz_score 	,integer2 prim_name_derived_score 	,integer2 sec_range_score 	,integer2 v_city_name_score 	,integer2 cnp_btype_score 	,integer2 company_address_score 	,unsigned2 support_cnp_name } );
VB_Fields := project(VB, {		 string30 left_cnp_number 	,boolean cnp_number_skipped 	,string30 right_cnp_number 	,string2 left_st 	,boolean st_skipped 	,string2 right_st 	,string10 left_prim_range_derived 	,boolean prim_range_derived_skipped 	,string10 right_prim_range_derived 	,string9 left_hist_duns_number 	,string9 right_hist_duns_number 	,string9 left_ebr_file_number 	,string9 right_ebr_file_number 	,string9 left_active_duns_number 	,string9 right_active_duns_number 	,string9 left_hist_enterprise_number 	,string9 right_hist_enterprise_number 	,string30 left_hist_domestic_corp_key 	,string30 right_hist_domestic_corp_key 	,string30 left_foreign_corp_key 	,string30 right_foreign_corp_key 	,string30 left_unk_corp_key 	,string30 right_unk_corp_key 	,string9 left_company_fein 	,string9 right_company_fein 	,string10 left_company_phone 	,string10 right_company_phone 	,string9 left_active_enterprise_number 	,boolean active_enterprise_number_skipped 	,string9 right_active_enterprise_number 	,string30 left_active_domestic_corp_key 	,boolean active_domestic_corp_key_skipped 	,string30 right_active_domestic_corp_key 	,unsigned4 left_company_addr1 	,unsigned4 right_company_addr1 	,string500 left_cnp_name 	,boolean cnp_name_skipped 	,string500 right_cnp_name 	,string5 left_zip 	,string5 right_zip 	,unsigned4 left_company_csz 	,boolean company_csz_skipped 	,unsigned4 right_company_csz 	,string left_prim_name_derived 	,boolean prim_name_derived_skipped 	,string right_prim_name_derived 	,string8 left_sec_range 	,string8 right_sec_range 	,string25 left_v_city_name 	,string25 right_v_city_name 	,string10 left_cnp_btype 	,string10 right_cnp_btype 	,string120 left_company_name 	,string120 right_company_name 	,string50 left_company_name_type_raw 	,string50 right_company_name_type_raw 	,string50 left_company_name_type_derived 	,string50 right_company_name_type_derived 	,string1 left_cnp_hasnumber 	,string1 right_cnp_hasnumber 	,string20 left_cnp_lowv 	,string20 right_cnp_lowv 	,boolean left_cnp_translated 	,boolean right_cnp_translated 	,integer4 left_cnp_classid 	,integer4 right_cnp_classid 	,string1 left_company_foreign_domestic 	,string1 right_company_foreign_domestic 	,unsigned6 left_company_bdid 	,unsigned6 right_company_bdid 	,string28 left_prim_name 	,string28 right_prim_name 	,string10 left_prim_range 	,string10 right_prim_range 	,unsigned4 left_company_address 	,boolean company_address_skipped 	,unsigned4 right_company_address 	,unsigned4 left_dt_first_seen 	,unsigned4 right_dt_first_seen 	,unsigned4 left_dt_last_seen 	,unsigned4 right_dt_last_seen } );

AllCands  := 
	  PW	+ ND	+ CF	+ KW	+ RP	+ VB	;
AllScores := 
	  PW_score	+ ND_score	+ CF_score	+ KW_score	+ RP_score	+ VB_score	;
PARALLEL(
	 output(count(kmatchsample   ) ,named('TotalMatchSamples'   ))
	,output(count(kmatchsample_eq) ,named('TotalMatchSamplesEqualToThreshold'))
	,output(count(kmatchsample_gt) ,named('TotalMatchSamplesGreaterThanThreshold'))
	,output('-----------------------------------' ,named('_'))
	,output('2 recs per Matching Pair, + 1 blank rec for separation' ,named('RolledUpViewsOfSamplesFollows'))
	,output(allrolled ,named('AllSamplesCombined'),all)
	,output(PW_rolled       ,named('PW'     ),all)
	,output(ND_rolled       ,named('ND'     ),all)
	,output(CF_rolled       ,named('CF'     ),all)
	,output(KW_rolled       ,named('KW'     ),all)
	,output(RP_rolled       ,named('RP'     ),all)
	,output(VB_rolled       ,named('VB'     ),all)
	,output('-----------------------------------' ,named('___'))
	,output('Full Match Candidates Record, then just the score' ,named('DetailedMatchingInfoFollows'))
	,output(AllCands  ,named('AllSamplesCands'),all)
	,output(AllScores ,named('AllSamplesScores'),all)
	,output('-----------------------------------' ,named('____'))
	,output(PW         ,named('PW_cands'       ),all)
	,output(PW_score   ,named('PW_scores'),all)
	,output('-----------------------------------' ,named('_____'))
	,output(ND         ,named('ND_cands'       ),all)
	,output(ND_score   ,named('ND_scores'),all)
	,output('-----------------------------------' ,named('______'))
	,output(CF         ,named('CF_cands'       ),all)
	,output(CF_score   ,named('CF_scores'),all)
	,output('-----------------------------------' ,named('_______'))
	,output(KW         ,named('KW_cands'       ),all)
	,output(KW_score   ,named('KW_scores'),all)
	,output('-----------------------------------' ,named('________'))
	,output(RP         ,named('RP_cands'       ),all)
	,output(RP_score   ,named('RP_scores'),all)
	,output('-----------------------------------' ,named('_________'))
	,output(VB         ,named('VB_cands'       ),all)
	,output(VB_score   ,named('VB_scores'),all)
);

ds_base_slim := table(bipv2.CommonBase.ds_base,{rcid,source}) : persist('~persist::lbentley::ds_base_slim');

allsamplerecs_addsource2 := join(ds_base_slim  ,allsamplerecs             ,left.rcid = right.rcid2 ,transform({string source2,recordof(right)},self.source2 := mdr.sourcetools.translatesource(left.source),self := right)  ,lookup);
allsamplerecs_addsource1 := join(ds_base_slim  ,allsamplerecs_addsource2  ,left.rcid = right.rcid1 ,transform({string source1,recordof(right)},self.source1 := mdr.sourcetools.translatesource(left.source),self := right)  ,lookup);

output(allsamplerecs_addsource1,named('allsamplerecs_addsource1'),all);

ds_samplerecs_table := table(allsamplerecs_addsource1 ,{source1,source2 ,unsigned cnt := count(group)} ,source1,source2);
output(sort(ds_samplerecs_table,-cnt),named('ds_samplerecs_table'),all);

/* --------------------------------------------------------- */
ds_all_samples := kmatchsample_eq + kmatchsample_gt;

ds_all_samples_addsource1 := join(ds_base_slim  ,ds_all_samples             ,left.rcid = right.rcid2 ,transform({string source2,recordof(right)},self.source2 := mdr.sourcetools.translatesource(left.source),self := right)  ,hash);
ds_all_samples_addsource2 := join(ds_base_slim  ,ds_all_samples_addsource1  ,left.rcid = right.rcid1 ,transform({string source1,recordof(right)},self.source1 := mdr.sourcetools.translatesource(left.source),self := right)  ,hash);

output(choosen(ds_all_samples_addsource2,100),named('ds_all_samples_addsource2'));

ds_allrecs_table := table(ds_all_samples_addsource2 ,{source1,source2 ,unsigned cnt := count(group)} ,source1,source2);
output(sort(ds_allrecs_table,-cnt),named('ds_allrecs_table'),all);
output(sort(ds_allrecs_table,source1,source2),named('ds_allrecs_table_sorted_by_source'),all);


