IMPORT SALT37;
EXPORT BasicMatch(DATASET(layout_DOT_Base) ih) := MODULE// An extremely tight pre-match designed to quickly eliminate high volume duplicates
 
SHARED  h00 := BIPV2_ProxID.LinkBlockers(ih).input_file;
  SHARED s := Specificities(ih).specificities[1];
  SHARED h00_match := h00((prim_name_derived NOT IN SET(s.nulls_prim_name_derived,prim_name_derived) AND prim_name_derived <> (TYPEOF(prim_name_derived))''),(st NOT IN SET(s.nulls_st,st) AND st <> (TYPEOF(st))''),~(((prim_range_derived  IN SET(s.nulls_prim_range_derived,prim_range_derived) OR prim_range_derived = (TYPEOF(prim_range_derived))'') AND (prim_name_derived  IN SET(s.nulls_prim_name_derived,prim_name_derived) OR prim_name_derived = (TYPEOF(prim_name_derived))'') AND (sec_range  IN SET(s.nulls_sec_range,sec_range) OR sec_range = (TYPEOF(sec_range))'')) AND ((v_city_name  IN SET(s.nulls_v_city_name,v_city_name) OR v_city_name = (TYPEOF(v_city_name))'') AND (st  IN SET(s.nulls_st,st) OR st = (TYPEOF(st))'') AND (zip  IN SET(s.nulls_zip,zip) OR zip = (TYPEOF(zip))''))), 
      0 + IF( (active_duns_number  IN SET(s.nulls_active_duns_number,active_duns_number) OR active_duns_number = (TYPEOF(active_duns_number))''), 0, 28 ) + IF( (active_enterprise_number  IN SET(s.nulls_active_enterprise_number,active_enterprise_number) OR active_enterprise_number = (TYPEOF(active_enterprise_number))''), 0, 27 ) + IF( (active_domestic_corp_key  IN SET(s.nulls_active_domestic_corp_key,active_domestic_corp_key) OR active_domestic_corp_key = (TYPEOF(active_domestic_corp_key))''), 0, 27 ) + IF( (hist_enterprise_number  IN SET(s.nulls_hist_enterprise_number,hist_enterprise_number) OR hist_enterprise_number = (TYPEOF(hist_enterprise_number))''), 0, 27 ) + IF( (hist_duns_number  IN SET(s.nulls_hist_duns_number,hist_duns_number) OR hist_duns_number = (TYPEOF(hist_duns_number))''), 0, 28 ) + IF( (hist_domestic_corp_key  IN SET(s.nulls_hist_domestic_corp_key,hist_domestic_corp_key) OR hist_domestic_corp_key = (TYPEOF(hist_domestic_corp_key))''), 0, 27 ) + IF( (foreign_corp_key  IN SET(s.nulls_foreign_corp_key,foreign_corp_key) OR foreign_corp_key = (TYPEOF(foreign_corp_key))''), 0, 27 ) + IF( (unk_corp_key  IN SET(s.nulls_unk_corp_key,unk_corp_key) OR unk_corp_key = (TYPEOF(unk_corp_key))''), 0, 27 ) + IF( (ebr_file_number  IN SET(s.nulls_ebr_file_number,ebr_file_number) OR ebr_file_number = (TYPEOF(ebr_file_number))''), 0, 28 ) + IF( (company_fein  IN SET(s.nulls_company_fein,company_fein) OR company_fein = (TYPEOF(company_fein))''), 0, 27 ) + IF( (cnp_name  IN SET(s.nulls_cnp_name,cnp_name) OR cnp_name = (TYPEOF(cnp_name))''), 0, 15 ) + IF( (cnp_number  IN SET(s.nulls_cnp_number,cnp_number) OR cnp_number = (TYPEOF(cnp_number))''), 0, 15 ) + IF( (cnp_btype  IN SET(s.nulls_cnp_btype,cnp_btype) OR cnp_btype = (TYPEOF(cnp_btype))''), 0, 3 ) + IF( (company_phone  IN SET(s.nulls_company_phone,company_phone) OR company_phone = (TYPEOF(company_phone))''), 0, 27 ) + IF( (prim_name_derived  IN SET(s.nulls_prim_name_derived,prim_name_derived) OR prim_name_derived = (TYPEOF(prim_name_derived))''), 0, 13 ) + IF( (sec_range  IN SET(s.nulls_sec_range,sec_range) OR sec_range = (TYPEOF(sec_range))''), 0, 12 ) + IF( (v_city_name  IN SET(s.nulls_v_city_name,v_city_name) OR v_city_name = (TYPEOF(v_city_name))''), 0, 11 ) + IF( (st  IN SET(s.nulls_st,st) OR st = (TYPEOF(st))''), 0, 5 ) + IF( (zip  IN SET(s.nulls_zip,zip) OR zip = (TYPEOF(zip))''), 0, 14 ) + IF( (prim_range_derived  IN SET(s.nulls_prim_range_derived,prim_range_derived) OR prim_range_derived = (TYPEOF(prim_range_derived))''), 0, 13 ) >= Config.BasicMatchThreshold); // Potentially remove anything that would violate FORCE(+) constraints
  MatchCands := JOIN(h00_match,Specificities(ih).ClusterSizes(InCluster=1),LEFT.Proxid=RIGHT.Proxid,TRANSFORM(LEFT),LOCAL); // Singletons only may match
  Rec := RECORD
    SALT37.UIDType Proxid1;
    SALT37.UIDType Proxid2;
  END;
// It is important that this is an EQUIVALENCE relationship - it allows us to form an implicit transitive closure
  h01 := table     (h00_match ,{SALT_Partition,active_duns_number,active_enterprise_number,active_domestic_corp_key,hist_enterprise_number,hist_duns_number,hist_domestic_corp_key,foreign_corp_key,unk_corp_key,ebr_file_number,company_fein,cnp_name,cnp_number,cnp_btype,company_phone,prim_name_derived,sec_range,v_city_name,st,zip,prim_range_derived,unsigned6 Proxid := min(group,Proxid)}
                             ,SALT_Partition,active_duns_number,active_enterprise_number,active_domestic_corp_key,hist_enterprise_number,hist_duns_number,hist_domestic_corp_key,foreign_corp_key,unk_corp_key,ebr_file_number,company_fein,cnp_name,cnp_number,cnp_btype,company_phone,prim_name_derived,sec_range,v_city_name,st,zip,prim_range_derived,merge);/*HACK TO SPEED UP*/
Match := JOIN(h01,MatchCands,LEFT.active_duns_number = RIGHT.active_duns_number AND LEFT.active_enterprise_number = RIGHT.active_enterprise_number AND LEFT.active_domestic_corp_key = RIGHT.active_domestic_corp_key AND LEFT.hist_enterprise_number = RIGHT.hist_enterprise_number AND LEFT.hist_duns_number = RIGHT.hist_duns_number
       AND LEFT.hist_domestic_corp_key = RIGHT.hist_domestic_corp_key AND LEFT.foreign_corp_key = RIGHT.foreign_corp_key AND LEFT.unk_corp_key = RIGHT.unk_corp_key AND LEFT.ebr_file_number = RIGHT.ebr_file_number AND LEFT.company_fein = RIGHT.company_fein
       AND LEFT.cnp_name = RIGHT.cnp_name AND LEFT.cnp_number = RIGHT.cnp_number AND LEFT.cnp_btype = RIGHT.cnp_btype AND LEFT.company_phone = RIGHT.company_phone AND LEFT.prim_name_derived = RIGHT.prim_name_derived
       AND LEFT.sec_range = RIGHT.sec_range AND LEFT.v_city_name = RIGHT.v_city_name AND LEFT.st = RIGHT.st AND LEFT.st = RIGHT.st AND LEFT.zip = RIGHT.zip AND LEFT.prim_range_derived = RIGHT.prim_range_derived AND ( LEFT.SALT_Partition = RIGHT.SALT_Partition ) AND LEFT.Proxid < RIGHT.Proxid,TRANSFORM(Rec,SELF.Proxid2 := LEFT.Proxid,SELF.Proxid1 := RIGHT.Proxid), HASH);
SHARED PickOne := table( Match  ,{Proxid1  ,unsigned6 Proxid2 := min(group,Proxid2)}, Proxid1, merge);/*HACK*/ // Lowest collector ID for each singleton
EXPORT Block := LinkBlockers(ih).Block;
// Remove all blocked links
SHARED NotBlocked := JOIN(PickOne,Block,LEFT.Proxid1=RIGHT.Proxid1 AND LEFT.Proxid2=RIGHT.Proxid2,TRANSFORM(LEFT),LEFT ONLY, LOOKUP) : PERSIST('~temp::Proxid::BIPV2_ProxID::BasicMatch',EXPIRE(BIPV2_ProxID.Config.PersistExpire));
EXPORT patch_file := NotBlocked;
  SALT37.utMAC_Patch_Id(h00,Proxid,NotBlocked,Proxid1,Proxid2,o1); // Patch the input file
EXPORT input_file := o1 : INDEPENDENT;
EXPORT basic_match_count := COUNT(NotBlocked);
EXPORT id_delta := COUNT(DEDUP(h00,Proxid,ALL))-COUNT(DEDUP(input_file,Proxid,ALL)); // Should equal basic_match_count
END;
