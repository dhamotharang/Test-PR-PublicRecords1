/*
	Do Fields Exist -- Returns null string if the passed set of fields all exist in the layout.  
										 Returns the set of fields that do not exist if any fields do not exist in the layout.

	Example:
	tools.mac_GetFieldType(DCAV2.Layouts.base.companies	,'rid',doesbdidexist);
	output(doesbdidexist	,named('doesbdidexist'));

	Similar to tools.mac_GetFieldType, but that returns the type if the field exists, this returns the fields that don't exist
*/
export mac_DoFieldsExist(

	 pLayout										// input layout(if using in macro, this will be meta data from #exportxml)
	,pSetFields									// Set of Fields to search for in the above layout
	,pOutput										// Named output to run ecl generated by macro
	,pForUseInMacro		= 'false'	// is output going to be used in a macro(then use set command), otherwise, just :=
	
) :=
macro

	/////////////////////////////////////////////
	// -- Start XML
	/////////////////////////////////////////////
	#IF(pForUseInMacro	= false)
		LOADXML('<xml/>');
		#EXPORTXML(pLayout_MetaInfo							,pLayout)
	#END

	#uniquename(name								)
	#uniquename(named_layout				)
	#uniquename(moutput							)
	#uniquename(lsize								)
	#uniquename(lSetFieldsDontExist	)
	#uniquename(lcountSetFields			)
	#uniquename(lcounter						)
	#uniquename(lFoundField					)
	#uniquename(lFirstField					)
	#uniquename(lcomma							)
	#uniquename(lItem								)
	#uniquename(lSetFields					)

	#IF(pForUseInMacro = true)
		#uniquename(pOutput)
	#END

	#SET(lcountSetFields	,count(pSetFields));
	#SET(lSetFields	,#TEXT(pSetFields))
	#SET(lItem	,%lSetFields%[1])

//	#ERROR('tools.mac_DoFieldsExist: Count of pSetFields: ' + %'lcountSetFields'% + ' : ' + %'lItem'%)
	#SET(lcounter		,1);
	
	#SET(moutput	,'[')
	#SET(named_layout	, '')
	#SET(name					, '')
	#SET(lSetFieldsDontExist	, '[')
	#SET(lFirstField	, true)
	#LOOP
		#IF(%lcounter% > %lcountSetFields%)
			#BREAK
		#END
		#SET(lFoundField					, false)
		#SET(lcomma	,' ')
		#IF(pForUseInMacro	= true)
			#FOR (pLayout)
				#FOR (Field)
					#IF(%'@isRecord'% = '1')
						#SET(named_layout, %'@name'%)
					#ELSE
						#IF(%'named_layout'% = %'@name'% and %'@type'% = '')
							#SET(named_layout, '')
						#ELSE
							#IF(%'named_layout'% != '')
								#SET(name, %'named_layout'% + '.' + %'@name'%)
							#ELSE
								#SET(name			, %'@name'%)
							#END
							#SET(lItem	,%lSetFields%[%lcounter%])
							#IF(stringlib.stringtouppercase(trim(%'name'%,all)) = stringlib.stringtouppercase(trim(%'lItem'%,all)))		
								#SET(lFoundField	,true)
								#BREAK
							#END
						#END
					#END
				#END
			#END
		#ELSE	
			#FOR (pLayout_MetaInfo)
				#FOR (Field)
					#IF(%'@isRecord'% = '1')
						#SET(named_layout, %'@name'%)
					#ELSE
						#IF(%'named_layout'% = %'@name'% and %'@type'% = '')
							#SET(named_layout, '')
						#ELSE
							#IF(%'named_layout'% != '')
								#SET(name, %'named_layout'% + '.' + %'@name'%)
							#ELSE
								#SET(name			, %'@name'%)
							#END
							#SET(lItem	,%lSetFields%[%lcounter%])
							#IF(stringlib.stringtouppercase(trim(%'name'%,all)) = stringlib.stringtouppercase(trim(%'lItem'%,all)))		
								#SET(lFoundField	,true)
								#BREAK
							#END
						#END
					#END
				#END
			#END
		#END
		#IF(%lFirstField%	= true and %lFoundField% = false) #SET(lcomma	,' ') #SET(lFirstField	,false) #ELSE #SET(lcomma	,',')	#END
		#IF(%lFoundField% = false) #APPEND(moutput	,%'lcomma'% + '\'' + %'lItem'%+ '\'') #END
		#SET(lcounter	,%lcounter% + 1)
	#END	// loop
	#APPEND(moutput	,']')

//	#SET(moutput	,#TEXT(pSetFields))
	
	#IF(pForUseInMacro = true)
		#SET(pOutput, %'moutput'%)
	#ELSE
		pOutput := %'moutput'%;
	#END
endmacro;
