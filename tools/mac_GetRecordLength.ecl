/*
	Get Record Length-- Calculates Record Length of passed in layout.  Because in macros, you can't do a sizeof to figure this out since
											that needs to run on thor or hthor to get the answer.  This walks the layout using the template language.
											If the layout has any qstring, decimal fields, you will need to pass in those lengths because what is returned in the
											xml for the layout is not exactly what is specified in the ecl code for those fields.
	Works with child datasets as long as they are a fixed # of records for each parent record.
	Example:
		ddnbinput	:= DNB_DMI.Files('20110208').input.sprayed.logical;
		tools.mac_GetRecordLength(recordof(ddnbinput),loutput,[30,30],pOutputEcl := false);
		output(loutput);
*/
export mac_GetRecordLength(

	 pLayout														// input dataset	-- needs to be fixed length record(if using in macro, this will be meta data from #exportxml
	,pOutput														// Named output to run ecl generated by macro
	,psetChildDatasetNumIn		= '[]'		// set of # of records in each child dataset(for input dataset)
	,pForUseInMacro						= 'false'	// is output going to be used in a macro(then use set command), otherwise, just :=
	
) :=
macro

	/*
		First, get the sizeof the record layout in the passed dataset
		then, project the input dataset to a one field layout that is the size of the whole dataset
		by looping through the fields and concatenating them into the one field
		Then, project that dataset into the new layout passed in
		by calculating the offsets of the one field dataset and taking those slices
		by looping through destination layout.
	*/

	/////////////////////////////////////////////
	// -- Start XML
	/////////////////////////////////////////////
	#IF(pForUseInMacro	= false)
		LOADXML('<xml/>');
		#EXPORTXML(pLayout_MetaInfo							,pLayout)
	#END

	/////////////////////////////////////////////
	// -- Declare Value Types
	/////////////////////////////////////////////
	#uniquename(name							)
	#uniquename(named_layout			)
	#uniquename(last_layout			)
	#uniquename(stringfiller			)
	#uniquename(lenName						)
	#uniquename(lenType						)
	#uniquename(fillername				)
	#uniquename(fillertype				)
	#uniquename(moutput						)
	#uniquename(loutput						)
	#uniquename(lsize							)
	#uniquename(lIsDataset				)
	#uniquename(SizeofpLayout	)
	#uniquename(Layout_pInput_Lengths)
	#uniquename(pInput_prep				)
	#uniquename(pInput_prep2			)
	#uniquename(childdatasetnum		)
	#uniquename(lcounter					)
	#uniquename(lcounter2					)
	#uniquename(lchildatasetfields)
	#uniquename(lchildatasetlengths)
	#uniquename(lnumchildatasetfields)
	#uniquename(lchildatasetfieldlength)
	#uniquename(lchilddatasetline)
	#uniquename(startindex				)
	#uniquename(endindex					)
	#uniquename(dummydataset			)
	#uniquename(dblank						)
	#uniquename(ddummy						)
	#uniquename(layouttemp				)
	#uniquename(layouttemp2				)
	#uniquename(numperiods				)
	#uniquename(fieldname				)
	#IF(pForUseInMacro = true)
		#uniquename(pOutput)
	#END
	/////////////////////////////////////////////
	// -- Prep Stuff
	/////////////////////////////////////////////
	#SET(stringfiller, '                                                                           ')
	#SET(SizeofpLayout	, 0)
	#SET(named_layout	, '')
	#SET(name					, '')
	#SET(lIsDataset		, '')
	#SET(lchilddatasetline		, '')
	#SET(lchildatasetfields		, '')
	#SET(lchildatasetlengths		, '')
	#SET(lnumchildatasetfields	,1)
	#SET(lchildatasetfieldlength	,0)
	#SET(childdatasetnum	, 1)

	/////////////////////////////////////////////
	// -- Second Project to output layout
	/////////////////////////////////////////////
	#SET(named_layout	, '')
	#SET(last_layout	, '')
	#SET(name					, '')
	#SET(lIsDataset		, '')
	#SET(lchildatasetfields		,'')
	#SET(lchildatasetlengths	,'')
	#SET(StartIndex	, 1)
	#SET(endindex		, 0)
	#SET(childdatasetnum	, 1)

	#IF(pForUseInMacro	= true)
	#FOR (pLayout)
		#FOR (Field)
			#IF			(%'@isRecord'% = '1' or %'@isDataset'% = '1' and %'named_layout'% = '')
				#SET(named_layout	, %'@name'%)
				#SET(last_layout	, %'@name'%)
				#SET(lIsDataset		, %'@isDataset'%)
			#ELSEIF	(%'@isRecord'% = '1' or %'@isDataset'% = '1' and %'named_layout'% != '')
				#SET(named_layout	, %'named_layout'% + '.' + %'@name'%)
				#SET(last_layout	, %'@name'%)
				#SET(lIsDataset		, %'@isDataset'%)
			#ELSE
//				#IF(%'last_layout'% = %'@name'% and %'@type'% = '')
				#IF(%'@type'% = '')
					#IF(%'lIsDataset'% = '1')
						#SET(lcounter	, 1)
						#APPEND		(loutput, 'self.' + %'named_layout'% + ' := dataset([\n')
						#LOOP
							#IF(%lcounter% > psetChildDatasetNumIn[%childdatasetnum%])
								#BREAK
							#ELSE
								#SET(lcounter2	, 1)
								#IF(%lcounter% != 1)
									#APPEND(loutput	,',')
								#END
								#APPEND(loutput	,'{')
								#LOOP
									#IF(%lcounter2% > %lnumchildatasetfields%)
										#BREAK
									#ELSE
										#SET(lchilddatasetline			,stringlib.stringextract(%'lchildatasetfields'%	,%lcounter2%))
										#SET(lchildatasetfieldlength,stringlib.stringextract(%'lchildatasetlengths'%,%lcounter2%))
										#SET(endindex		, %endindex% + %lchildatasetfieldlength%)
										#SET(SizeofpLayout	,%SizeofpLayout% + %lchildatasetfieldlength%)
										#SET(lchilddatasetline, regexreplace('@startindex@'	,%'lchilddatasetline'%,%'startindex'%	,nocase))
										#SET(lchilddatasetline, regexreplace('@endindex@'		,%'lchilddatasetline'%,%'endindex'%		,nocase))
										#IF(%lcounter2% > 2)
											#APPEND(loutput	,',')
										#END
										#SET(startindex	, %startindex%	+ %lchildatasetfieldlength%)
										#SET(lcounter2	,%lcounter2% + 1)
									#END
								#END
								#APPEND(loutput	,'}\n')
							#END
							#SET(lcounter	,%lcounter% + 1)
						#END
						#SET(childdatasetnum	,%childdatasetnum% + 1)
						#SET(lchildatasetfields, '')
						#SET(lchildatasetlengths,'')
						#SET(lnumchildatasetfields	,1)
					#END
					#SET(lIsDataset		, '')
					#IF(%'@name'% = %'named_layout'%)
						#SET(named_layout	, '')
					#ELSE
						#SET(named_layout	, regexreplace('[.]' + %'last_layout'%,%'named_layout'%,''))
					#END
				#ELSE
					#IF(%'named_layout'% != '' and %'lIsDataset'% = '')
						#SET(name, %'named_layout'% + '.' + %'@name'%)

					#ELSIF(%'named_layout'% != '' and %'lIsDataset'% = '1')
						#SET(name, %'named_layout'% + '[@index@].' + %'@name'%)
						#IF(%'@position'% != '0')
							#APPEND(lchildatasetfields	, ',')
							#APPEND(lchildatasetlengths	, ',')
						#END
						#IF(%'@type'% = 'string')
							#APPEND(lchildatasetfields, 'left.payload[@startindex@..@endindex@]')
						#ELSE
							#APPEND(lchildatasetfields, '(>' + %'@type'% + %'@size'% + '<)left.payload[@startindex@..@endindex@]')
						#END
						#APPEND(lchildatasetlengths, %'@size'%)
						#SET(lnumchildatasetfields	,%lnumchildatasetfields% + 1)

					#ELSE
						#SET(name			, %'@name'%)
					#END
					#IF(%'lIsDataset'% != '1')
						#SET(SizeofpLayout	,%SizeofpLayout% + %@size%)
					#END
				#END
			#END
		#END
	#END
#ELSE
	#FOR (pLayout_MetaInfo)
		#FOR (Field)
			#IF			(%'@isRecord'% = '1' or %'@isDataset'% = '1' and %'named_layout'% = '')
				#SET(named_layout	, %'@name'%)
				#SET(last_layout	, %'@name'%)
				#SET(lIsDataset		, %'@isDataset'%)
			#ELSEIF	(%'@isRecord'% = '1' or %'@isDataset'% = '1' and %'named_layout'% != '')
				#SET(named_layout	, %'named_layout'% + '.' + %'@name'%)
				#SET(last_layout	, %'@name'%)
				#SET(lIsDataset		, %'@isDataset'%)
			#ELSE
//				#IF(%'last_layout'% = %'@name'% and %'@type'% = '')
				#IF(%'@type'% = '')
					#IF(%'lIsDataset'% = '1')
						#SET(lcounter	, 1)
						#APPEND		(loutput, 'self.' + %'named_layout'% + ' := dataset([\n')
						#LOOP
							#IF(%lcounter% > psetChildDatasetNumIn[%childdatasetnum%])
								#BREAK
							#ELSE
								#SET(lcounter2	, 1)
								#IF(%lcounter% != 1)
									#APPEND(loutput	,',')
								#END
								#APPEND(loutput	,'{')
								#LOOP
									#IF(%lcounter2% > %lnumchildatasetfields%)
										#BREAK
									#ELSE
										#SET(lchilddatasetline			,stringlib.stringextract(%'lchildatasetfields'%	,%lcounter2%))
										#SET(lchildatasetfieldlength,stringlib.stringextract(%'lchildatasetlengths'%,%lcounter2%))
										#SET(endindex		, %endindex% + %lchildatasetfieldlength%)
										#SET(SizeofpLayout	,%SizeofpLayout% + %lchildatasetfieldlength%)
										#SET(lchilddatasetline, regexreplace('@startindex@'	,%'lchilddatasetline'%,%'startindex'%	,nocase))
										#SET(lchilddatasetline, regexreplace('@endindex@'		,%'lchilddatasetline'%,%'endindex'%		,nocase))
										#IF(%lcounter2% > 2)
											#APPEND(loutput	,',')
										#END
										#SET(startindex	, %startindex%	+ %lchildatasetfieldlength%)
										#SET(lcounter2	,%lcounter2% + 1)
									#END
								#END
								#APPEND(loutput	,'}\n')
							#END
							#SET(lcounter	,%lcounter% + 1)
						#END
						#SET(childdatasetnum	,%childdatasetnum% + 1)
						#SET(lchildatasetfields, '')
						#SET(lchildatasetlengths,'')
						#SET(lnumchildatasetfields	,1)
					#END
					#SET(lIsDataset		, '')
					#IF(%'@name'% = %'named_layout'%)
						#SET(named_layout	, '')
					#ELSE
						#SET(named_layout	, regexreplace('[.]' + %'last_layout'%,%'named_layout'%,''))
					#END
				#ELSE
					#IF(%'named_layout'% != '' and %'lIsDataset'% = '')
						#SET(name, %'named_layout'% + '.' + %'@name'%)

					#ELSIF(%'named_layout'% != '' and %'lIsDataset'% = '1')
						#SET(name, %'named_layout'% + '[@index@].' + %'@name'%)
						#IF(%'@position'% != '0')
							#APPEND(lchildatasetfields	, ',')
							#APPEND(lchildatasetlengths	, ',')
						#END
						#IF(%'@type'% = 'string')
							#APPEND(lchildatasetfields, 'left.payload[@startindex@..@endindex@]')
						#ELSE
							#APPEND(lchildatasetfields, '(>' + %'@type'% + %'@size'% + '<)left.payload[@startindex@..@endindex@]')
						#END
						#APPEND(lchildatasetlengths, %'@size'%)
						#SET(lnumchildatasetfields	,%lnumchildatasetfields% + 1)

					#ELSE
						#SET(name			, %'@name'%)
					#END
					#IF(%'lIsDataset'% != '1')
						#SET(SizeofpLayout	,%SizeofpLayout% + %@size%)
					#END
				#END
			#END
		#END
	#END
#END
//	output(%SizeofpLayout%)
	#IF(pForUseInMacro = true)
		#SET(pOutput, %SizeofpLayout%)
	#ELSE
		pOutput := %SizeofpLayout%;
	#END
endmacro;
