/*
	Automatically generate ecl to find out the maximum length of each field in passed dataset
	makes it easier to generate and/or run this.
	If pOutputEcl is set to 'true', it will output the ecl generated by the macro as a string, so it can 
		be copy-pasted into an attribute or builder window and run
	Else, it will generate the ecl and then run it.
*/
export mac_GetMaxFieldLengths(
	 pDataset											// input dataset
	,pOutput											// Named output to run ecl generated by macro
	,pOutputEcl				= 'false'		// Should output the ecl as a string(for testing) or actually run the ecl
	,pShouldExport		= 'true'		// should export output parameter(so can access outside of a module)
	
) :=
macro
	LOADXML('<xml/>');
	#EXPORTXML(pDataset_MetaInfo, recordof(pDataset))
	#uniquename(ldataset					)
	#uniquename(loutput						)
	#uniquename(fieldname					)
	#uniquename(groupbyfield			)
	#uniquename(name							)
	#uniquename(named_layout			)
	#uniquename(stringfiller			)
	#uniquename(lenName						)
	#uniquename(fillernonzero			)
	#uniquename(fillernonblank		)
	#uniquename(fillertrue				)
	#uniquename(moutput						)
	#uniquename(dDataset					)
	#uniquename(Layout_pInput_Lengths)
	#uniquename(pInput_stat				)
	#uniquename(pInput_prep				)
//	string75 %stringfiller%;
	#SET(stringfiller, '                                                                           ')
	#SET(ldataset	,trim(#TEXT(pDataset),all))
	#if(pShouldExport = true)
		#SET(moutput	,'export ' + trim(#TEXT(pOutput),all))
	#ELSE
		#SET(moutput	,trim(#TEXT(pOutput),all))
	#END
	#if(pOutputEcl = true)
		#SET(dDataset						,'pDataset')
		#SET(Layout_pInput_Lengths	,'Layout_pInput_Lengths')
		#SET(pInput_stat				,'pInput_stat')
		#SET(pInput_prep				,'pInput_prep')
	#END
	#SET(loutput	,%'dDataset'% + ' := ' + %'ldataset'% + ';\n')
	
	#APPEND(loutput	,%'pInput_prep'% + ' := project(' + %'dDataset'% + ',transform({recordof(' + %'dDataset'% + '),unsigned1 const1 := 0}, self := left));\n');
	#APPEND(loutput	,%'Layout_pInput_Lengths'% + '  :=\n')
	#APPEND(loutput	,'record\n')
	#SET(named_layout	, '')
	#SET(name					, '')
	#if(pOutputEcl = true)
		#SET(fieldname		, '')
	#END
	#FOR (pDataset_MetaInfo)
		#FOR (Field)
			#IF(%'@isRecord'% = '1')
				#SET(named_layout, %'@name'%)
			#ELSE
				#IF(%'named_layout'% = %'@name'% and %'@type'% = '')
					#SET(named_layout, '')
				#ELSE
					#IF(%'named_layout'% != '')
						#SET(name, %'named_layout'% + '.' + %'@name'%)
						#SET(fieldname, %'named_layout'% + '_' + %'@name'%)
					#ELSE
						#SET(name, %'@name'%)
						#SET(fieldname, %'@name'%)
					#END
					
					#SET(lenName				,length(trim(%'fieldname'%,left,right)))
					#SET(fillernonzero	,%'stringfiller'%[1..(75 - (%lenName% - 1	))])
					#SET(fillernonblank	,%'stringfiller'%[1..(75 - (%lenName%			))])
					#SET(fillertrue			,%'stringfiller'%[1..(75 - (%lenName% - 4	))])
					
					#IF(%'@type'% = 'string')
						#APPEND(loutput, '	unsigned8 ' + %'fieldname'% + '_length' + %'fillernonzero'%	+ ' := max(group, length(trim(' + %'pInput_prep'% + '.' + %'name'% + ')));\n');
					#ELSE                                                                                                         
						#APPEND(loutput, '	unsigned8 ' + %'fieldname'% + '_length' + %'fillernonzero'%	+ ' := max(group, sizeof(' + %'pInput_prep'% + '.' + %'name'% + '));\n');
					#END
				#END
			#END
		#END
	#END
	#APPEND(loutput, 'end;\n');
	#APPEND(loutput, 'pInput_lengths := table(' + %'pInput_prep'% + ', ' + %'Layout_pInput_Lengths'% + ' ,const1  , few);\n');
	#APPEND(loutput, %'moutput'% + ' := pInput_lengths;\n');
	
	#if(pOutputEcl = true)
		pOutput := %'loutput'%;
	#ELSE
		%loutput%;
	#END
endmacro;
