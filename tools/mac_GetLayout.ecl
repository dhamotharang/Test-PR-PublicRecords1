/*
	Regurgitate layout of passed dataset--nice for when the layout is spread out over several attributes
*/
export mac_GetLayout(
	 pDataset														// input dataset
	,pOutput														// Named output to run ecl generated by macro
	,pOutputEcl								= 'true'	// Should output the ecl as a string(for testing) or actually run the ecl
	,pShouldExport						= 'true'	// should export output parameter(so can access outside of a module)
	
) :=
macro
	
	LOADXML('<xml/>');
	#EXPORTXML(pDataset_MetaInfo, pDataset)
	#uniquename(name							)
	#uniquename(named_layout			)
	#uniquename(stringfiller			)
	#uniquename(lenName						)
	#uniquename(lenType						)
	#uniquename(fillername				)
	#uniquename(fillertype				)
	#uniquename(moutput						)
	#uniquename(lsize							)
	#SET(stringfiller, '                                                                           ')
	#if(pShouldExport = true)
		#SET(moutput	,'export ' + trim(#TEXT(pOutput),all) + ' :=\nrecord\n')
	#ELSE
		#SET(moutput	,trim(#TEXT(pOutput),all))
	#END
	#SET(named_layout	, '')
	#SET(name					, '')
	#FOR (pDataset_MetaInfo)
		#FOR (Field)
			#IF(%'@isRecord'% = '1')
				#SET(named_layout, %'@name'%)
			#ELSE
				#IF(%'named_layout'% = %'@name'% and %'@type'% = '')
					#SET(named_layout, '')
				#ELSE
					#IF(%'named_layout'% != '')
						#SET(name, %'named_layout'% + '.' + %'@name'%)
					#ELSE
						#SET(name			, %'@name'%)
					#END
					#IF(%'@type'% = 'qstring' and %@size% > 0)
						#SET(lsize	, (unsigned)(%@size% * 8 / 6))
					#ELSE
						#SET(lsize	,if(%@size% > 0 and %'@type'% != 'boolean', %'@size'%, ''))
					#END
					
					#SET(lenName				,length(trim(%'name'%							,left,right)))
					#SET(lenType				,length(trim(%'@type'% + %'lsize'%,left,right)))
					#SET(fillername			,%'stringfiller'%[1..(75 - (%lenName% - 1	))])
					#SET(fillertype			,%'stringfiller'%[1..(20 - (%lenType% - 1	))])
					
					#APPEND(moutput	,'   ' + %'@type'% + %'lsize'% + %'fillertype'% + %'name'% + %'fillername'% + ';\n')
				#END
			#END
		#END
	#END
	
	#APPEND(moutput	, 'end;\n')
	
	#if(pOutputEcl = true)
		pOutput := %'moutput'%;
	#ELSE
		%moutput%;
	#END
endmacro;
