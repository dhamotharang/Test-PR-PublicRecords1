/*
	mac_FixRecords -- This macro will fix a fixed length file if it has been sprayed with the wrong record size.
										It will convert the file to the new record layout.
	Works with child datasets as long as they are a fixed # of records for each parent record.
	Example:
dliqold := liquor_licenses.files().input.ca.new('20110826');
tools.mac_FixFormat(
	 pDataset													:= dliqold
	,pDestinationLayout								:= newlayout
	,pSource_RecLength								:= 912					
	,pDestination_RecLength						:= 439
	,pOutput													:= doutput
	,psetChildDatasetNumIn						:= []		
	,psetChildDatasetNumOut						:= []		
	,pOutputEcl												:= false	
	,pShouldExport										:= true	
);
output(doutput);
*/
import tools;
export mac_FixFormat(

	 pDataset														// input dataset	-- needs to be fixed length record
	,pDestinationLayout									// Record layout to map to	-- needs to be fixed length record
	,pOutput														// Named output to run ecl generated by macro
	,pSource_RecLength				= 0				// Record Length of Source Dataset -- default is to figure this out
	,pDestination_RecLength		= 0				// Record Length of destination layout	-- default it to figure this out
	,psetChildDatasetNumIn		= '[]'		// set of # of records in each child dataset(for input dataset)
	,psetChildDatasetNumOut		= '[]'		// set of # of records in each child dataset(for output dataset)
	,pOutputEcl								= 'false'	// Should output the generated ecl as a string(for testing) or actually output the resultant dataset
	,pShouldExport						= 'false'	// should export output parameter(so can access outside of a module)
	
) :=
macro

	/*
		First, get the sizeof the record layout in the passed dataset
		then, project the input dataset to a one field layout that is the size of the whole dataset
		by looping through the fields and concatenating them into the one field
		Then, project that dataset into the new layout passed in
		by calculating the offsets of the one field dataset and taking those slices
		by looping through destination layout.
	*/

	/////////////////////////////////////////////
	// -- Start XML
	/////////////////////////////////////////////
	LOADXML('<xml/>');
	#EXPORTXML(pDataset_MetaInfo						,recordof(pDataset))
	#EXPORTXML(pDestinationLayout_MetaInfo	,pDestinationLayout)
	
	#IF(pSource_RecLength	= 0)
		tools.mac_GetRecordLength(pDataset_MetaInfo						,lSource_RecLength			,#TEXT(psetChildDatasetNumIn)	,true);
	#ELSE
		#uniquename(lSource_RecLength				)
		#SET(lSource_RecLength			,pSource_RecLength)
	#END

	
	#IF(pDestination_RecLength	= 0)
		tools.mac_GetRecordLength(pDestinationLayout_MetaInfo	,lDestination_RecLength	,#TEXT(psetChildDatasetNumOut),true);
	#ELSE
		#uniquename(lDestination_RecLength		)
		#SET(lDestination_RecLength			,pDestination_RecLength)
	#END

	/////////////////////////////////////////////
	// -- Declare Value Types
	/////////////////////////////////////////////
	#uniquename(name							)
	#uniquename(named_layout			)
	#uniquename(last_layout				)
	#uniquename(stringfiller			)
	#uniquename(lenName						)
	#uniquename(lenType						)
	#uniquename(fillername				)
	#uniquename(fillertype				)
	#uniquename(moutput						)
	#uniquename(loutput						)
	#uniquename(lsize							)
	#uniquename(lIsDataset				)
	#uniquename(SizeofDatasetRec	)
	#uniquename(dDataset					)
	#uniquename(lDataset					)
	#uniquename(Layout_pInput_Lengths)
	#uniquename(pInput_prep				)
	#uniquename(pInput_prep2			)
	#uniquename(pinput_norm				)
	#uniquename(pinput_rollup			)
	#uniquename(pinput_rid				)
	#uniquename(childdatasetnum		)
	#uniquename(lcounter					)
	#uniquename(lcounter2					)
	#uniquename(lchildatasetfields)
	#uniquename(lchildatasetlengths)
	#uniquename(lnumchildatasetfields)
	#uniquename(lchildatasetfieldlength)
	#uniquename(lchilddatasetline)
	#uniquename(startindex				)
	#uniquename(endindex					)
	#uniquename(dummydataset			)
	#uniquename(dblank						)
	#uniquename(ddummy						)
	#uniquename(layouttemp				)
	#uniquename(layouttemp2				)
	#uniquename(numperiods				)
	#uniquename(fieldname				)

	/////////////////////////////////////////////
	// -- Prep Stuff
	/////////////////////////////////////////////
	#SET(stringfiller, '                                                                           ')
//	#SET(SizeofDatasetRec	, sizeof(pDataset))
	#SET(named_layout	, '')
	#SET(name					, '')
	#SET(lIsDataset		, '')
	#SET(lchilddatasetline		, '')
	#SET(lchildatasetfields		, '')
	#SET(lchildatasetlengths		, '')
	#SET(lnumchildatasetfields	,1)
	#SET(lchildatasetfieldlength	,0)
	#SET(ldataset			,trim(#TEXT(pDataset),all))
	#SET(childdatasetnum	, 1)
//	#SET(lSource_RecLength			,0)
//	#SET(lDestination_RecLength	,0)

	#if(pShouldExport = true)
		#SET(moutput	,'export ' + trim(#TEXT(pOutput),all))
	#ELSE
		#SET(moutput	,trim(#TEXT(pOutput),all))
	#END
	#IF(pOutputEcl = true)
		#SET(dDataset								,'pDataset')
		#SET(Layout_pInput_Lengths	,'Layout_pInput_Lengths')
		#SET(pInput_prep						,'pInput_prep')
		#SET(pInput_prep2						,'pInput_prep2')
		#SET(pinput_norm						,'pinput_norm')
		#SET(pinput_rollup					,'pinput_rollup')
		#SET(pinput_rid							,'pinput_rid')
		#SET(dblank									,'dblank')
		#SET(ddummy									,'ddummy')
	#END

	///////////////////////////////////////////////////////////////////////
	// -- First Project to one field layout by concatenating all fields in 
	// -- passed layout together.  
	///////////////////////////////////////////////////////////////////////
	#SET		(loutput	,%'dDataset'% + ' := ' + %'ldataset'% + ';\n')
	#APPEND	(loutput	,%'pInput_prep'% + ' := project(' + %'dDataset'% + ',transform({unsigned8 rid, unsigned8 rollup_rid,string' + %lSource_RecLength% + ' payload}, self.rid := counter;self.rollup_rid := counter / ' + %lDestination_RecLength% + ';self.payload := \n');

	#FOR (pDataset_MetaInfo)
		#FOR (Field)
			//if start of a child dataset or named layout, save name, then skip to next iteration of loop
			#IF(%'@isRecord'% = '1' or %'@isDataset'% = '1' and %'named_layout'% = '')
				#SET(named_layout	, %'@name'%)
				#SET(last_layout	, %'@name'%)
				#SET(lIsDataset		, %'@isDataset'%)
			#ELSEIF(%'@isRecord'% = '1' or %'@isDataset'% = '1' and %'named_layout'% != '')
				#SET(named_layout	, %'named_layout'% + '.' + %'@name'%)
				#SET(last_layout	, %'@name'%)
				#SET(lIsDataset		, %'@isDataset'%)
			#ELSE
				//If at end of child dataset fields, iterate through child dataset to concatenate
				//if it was just named layout, reset field vars
				
//				#IF(%'last_layout'% = %'@name'% and %'@type'% = '')
				#IF(%'@type'% = '')
					#IF(%'@name'% = %'named_layout'%)
						#SET(named_layout	, '')
					#ELSE
						#SET(named_layout	, regexreplace('[.]' + %'last_layout'%,%'named_layout'%,''))
					#END
					#IF(%'lIsDataset'% = '1')
						#SET(lcounter	, 1)
						#LOOP
							#IF(%lcounter% > psetChildDatasetNumIn[%childdatasetnum%])
								#BREAK
							#ELSE
								#APPEND(loutput, regexreplace('@index@',%'lchildatasetfields'%,%'lcounter'%,nocase))
								#SET(lcounter	,%lcounter% + 1)
							#END
						#END
						#SET(childdatasetnum	,%childdatasetnum% + 1)
						#SET(lchildatasetfields, '')
						#SET(lchildatasetlengths,'')
						#SET(lnumchildatasetfields	,1)
					#END
					#SET(lIsDataset		, '')
				// Not at end of named layout or dataset, normal fields
				#ELSE
					// If in named layout, set field name
					#IF(%'named_layout'% != '' and %'lIsDataset'% = '')
						#SET(name, %'named_layout'% + '.' + %'@name'%)
					// if in child dataset, set field name with index template
					#ELSIF(%'named_layout'% != '' and %'lIsDataset'% = '1')
						#SET(name, %'named_layout'% + '[@index@].' + %'@name'%)
						#IF(%'@type'% = 'string')
							#APPEND(lchildatasetfields, ' + left.' + %'name'% + '\n')
						#ELSE
							#APPEND(lchildatasetfields, ' + (>string' + %'@size'% + '<)left.' + %'name'% + '\n')
						#END
					// else, if not in named layout or child dataset, set name to field
					#ELSE
						#SET(name			, %'@name'%)
					#END
					// if not in child dataset, concatenate field
					#IF(%'lIsDataset'% != '1')
						#IF(%'@position'% != '0')
							#APPEND(loutput, ' + ')
						#END
						#IF(%'@type'% = 'string')
							#APPEND(loutput, ' left.' + %'name'% + '\n')
						#ELSE
							#APPEND(loutput, ' (>string' + %'@size'% + '<)left.' + %'name'% + '\n')
						#END
					#END
				#END
			#END
		#END
	#END
	
	#APPEND(loutput, '  ;\n));\n');
	/////////////////////////////////////////////
	// -- Rollup to get records integrated
	/////////////////////////////////////////////
#APPEND	(loutput	,	%'pinput_norm'% + ' := normalize(' + %'pInput_prep'% + '	,' + %lSource_RecLength% + ', transform({unsigned8 rid, unsigned8 subrid, string1 payload},\n')
#APPEND	(loutput	,	'\tself.rid			:= left.rid;\n')
#APPEND	(loutput	,	'\tself.subrid		:= counter;\n')
#APPEND	(loutput	,	'\tself.payload	:= left.payload[counter];\n')
#APPEND	(loutput	,	'\t));\n')

#APPEND	(loutput	,	%'pinput_rid'% + '	:= project(' + %'pinput_norm'% + '	,transform(\n')
#APPEND	(loutput	,'{unsigned8 rid, unsigned8 rollup_rid, unsigned3 rollup_cnt, string' + %lDestination_RecLength% + ' payload}\n')
#APPEND	(loutput	,'\t, self.rid 				:= counter;\n')
#APPEND	(loutput	,'\t  self.rollup_rid := ((counter - 1) / ' + %lDestination_RecLength% + ') + 1;\n')
#APPEND	(loutput	,'\t  self.rollup_cnt := ((counter - 1) % ' + %lDestination_RecLength% + ') + 1;\n')
#APPEND	(loutput	,'\t  self.payload		:= left.payload));\n')

#APPEND	(loutput	,%'pinput_rollup'% + ' := rollup(' + %'pinput_rid'% + '	,left.rollup_rid = right.rollup_rid, transform(\n')
#APPEND	(loutput	,'\trecordof(' + %'pinput_rid'% + '),\n')
#APPEND	(loutput	,'\tself.payload 		:= left.payload[1..(left.rollup_cnt)] + right.payload[1];\n')
#APPEND	(loutput	,'\tself.rid				:= right.rid;\n')
#APPEND	(loutput	,'\tself.rollup_rid	:= right.rollup_rid;\n')
#APPEND	(loutput	,'\tself.rollup_cnt	:= right.rollup_cnt;\n')
#APPEND	(loutput	,'));\n')

	/////////////////////////////////////////////
	// -- Second Project to output layout
	/////////////////////////////////////////////
	#SET(named_layout	, '')
	#SET(last_layout	, '')
	#SET(name					, '')
	#SET(lIsDataset		, '')
	#SET(lchildatasetfields		,'')
	#SET(lchildatasetlengths	,'')
	#SET(StartIndex	, 1)
	#SET(endindex		, 0)
	#SET(childdatasetnum	, 1)
	#SET		(dummydataset	,%'dblank'% +  ':= dataset([{\' \'}],{string craps});\n')
	#APPEND	(dummydataset	,%'ddummy'% +  ':= project(' + %'dblank'% + ', transform(' + trim(#TEXT(pDestinationLayout),all) + ', self := []));\n');
	#APPEND	(loutput	,%'dummydataset'%)
	#APPEND	(loutput	,%'pInput_prep2'% + ' := project(' + %'pinput_rollup'% + ',transform(' + trim(#TEXT(pDestinationLayout),all) + ' , \n');

	#FOR (pDestinationLayout_MetaInfo)
		#FOR (Field)
			#IF			(%'@isRecord'% = '1' or %'@isDataset'% = '1' and %'named_layout'% = '')
				#SET(named_layout	, %'@name'%)
				#SET(last_layout	, %'@name'%)
				#SET(lIsDataset		, %'@isDataset'%)
			#ELSEIF	(%'@isRecord'% = '1' or %'@isDataset'% = '1' and %'named_layout'% != '')
				#SET(named_layout	, %'named_layout'% + '.' + %'@name'%)
				#SET(last_layout	, %'@name'%)
				#SET(lIsDataset		, %'@isDataset'%)
			#ELSE
//				#IF(%'last_layout'% = %'@name'% and %'@type'% = '')
				#IF(%'@type'% = '')
					#IF(%'lIsDataset'% = '1')
						#SET(lcounter	, 1)
						#APPEND		(loutput, 'self.' + %'named_layout'% + ' := dataset([\n')
						#LOOP
							#IF(%lcounter% > psetChildDatasetNumOut[%childdatasetnum%])
								#BREAK
							#ELSE
								#SET(lcounter2	, 1)
								#IF(%lcounter% != 1)
									#APPEND(loutput	,',')
								#END
								#APPEND(loutput	,'{')
								#LOOP
									#IF(%lcounter2% > %lnumchildatasetfields%)
										#BREAK
									#ELSE
										#SET(lchilddatasetline			,stringlib.stringextract(%'lchildatasetfields'%	,%lcounter2%))
										#SET(lchildatasetfieldlength,stringlib.stringextract(%'lchildatasetlengths'%,%lcounter2%))
										#SET(endindex		, %endindex% + %lchildatasetfieldlength%)
										#SET(lchilddatasetline, regexreplace('@startindex@'	,%'lchilddatasetline'%,%'startindex'%	,nocase))
										#SET(lchilddatasetline, regexreplace('@endindex@'		,%'lchilddatasetline'%,%'endindex'%		,nocase))
										#IF(%lcounter2% > 2)
											#APPEND(loutput	,',')
										#END
										#APPEND(loutput, %'lchilddatasetline'%)
										#SET(startindex	, %startindex%	+ %lchildatasetfieldlength%)
										#SET(lcounter2	,%lcounter2% + 1)
									#END
								#END
								#APPEND(loutput	,'}\n')
							#END
							#SET(lcounter	,%lcounter% + 1)
						#END
						#APPEND(loutput	,'],recordof(' + %'ddummy'% + '.' + %'named_layout'% + '));\n')
						#SET(childdatasetnum	,%childdatasetnum% + 1)
						#SET(lchildatasetfields, '')
						#SET(lchildatasetlengths,'')
						#SET(lnumchildatasetfields	,1)
					#END
					#SET(lIsDataset		, '')
					#IF(%'@name'% = %'named_layout'%)
//						#APPEND(loutput	,'\nClearing out named layout\n')
						#SET(named_layout	, '')
					#ELSE
						#SET(named_layout	, regexreplace('[.]' + %'last_layout'%,%'named_layout'%,''))
					#END
				#ELSE
					#IF(%'named_layout'% != '' and %'lIsDataset'% = '')
						#SET(name, %'named_layout'% + '.' + %'@name'%)

					#ELSIF(%'named_layout'% != '' and %'lIsDataset'% = '1')
						#SET(name, %'named_layout'% + '[@index@].' + %'@name'%)
						#IF(%'@position'% != '0')
							#APPEND(lchildatasetfields	, ',')
							#APPEND(lchildatasetlengths	, ',')
						#END
						#IF(%'@type'% = 'string')
							#APPEND(lchildatasetfields, 'left.payload[@startindex@..@endindex@]')
						#ELSE
							#APPEND(lchildatasetfields, '(>' + %'@type'% + %'@size'% + '<)left.payload[@startindex@..@endindex@]')
						#END
						#APPEND(lchildatasetlengths, %'@size'%)
						#SET(lnumchildatasetfields	,%lnumchildatasetfields% + 1)

					#ELSE
						#SET(name			, %'@name'%)
					#END
					#IF(%'lIsDataset'% != '1')
						#SET(endindex		, %endindex% + %@size%)
						#IF(%'@type'% = 'string')
							#APPEND(loutput, ' self.' + %'name'% + ' := left.payload[' + %'startindex'% + '..' + %'endindex'% + '];\n')
						#ELSE
							#APPEND(loutput, ' self.' + %'name'% + ' := (>' + %'@type'% + %'@size'% + '<)left.payload[' + %'startindex'% + '..' + %'endindex'% + '];\n')
						#END
						#SET(startindex	, %startindex%	+ %@size%)
//						#SET(endindex		, %endindex% 		+ sizeof(pDestinationLayout + '.' + %'name'%))
					#END
				#END
			#END
		#END
	#END
	
	#APPEND(loutput, '  \n));\n');


	#APPEND(loutput, %'moutput'% + ' := ' + %'pInput_prep2'% + ';\n');
	
	#if(pOutputEcl = true)
		pOutput := %'loutput'%;
	#ELSE
		%loutput%;
	#END

endmacro;
