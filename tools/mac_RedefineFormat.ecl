/*
	Redefine layout--make sure source and destination record layout are the same length
										or, this could be used when the destination record layout is less than the source.
	Works with child datasets as long as they are a fixed # of records for each parent record.
	Example:
		ddnbinput	:= DNB_DMI.Files('20110208').input.sprayed.logical;
		tools.mac_RedefineFormat(ddnbinput,dnb_dmi.Layouts.input.Flattened,loutput,,[30,30],pOutputEcl := false);
		output(loutput);
*/
export mac_RedefineFormat(

	 pDataset														// input dataset	-- needs to be fixed length record
	,pDestinationLayout									// Record layout to map to	-- needs to be fixed length record
	,pOutput														// Named output to run ecl generated by macro
	,pDatasetRecLength				= '10000'	// Length of input dataset record(can't do sizeof in macro)
																			// Default to 10,000 bytes, should work for most record sizes--only change
																			// if your input record length is larger
	,psetChildDatasetNumIn		= '[]'		// set of # of records in each child dataset(for input dataset)
	,psetChildDatasetNumOut		= '[]'		// set of # of records in each child dataset(for output dataset)
	,pOutputEcl								= 'false'	// Should output the ecl as a string(for testing) or actually run the ecl
	,pShouldExport						= 'true'	// should export output parameter(so can access outside of a module)
	
) :=
macro

	/*
		First, get the sizeof the record layout in the passed dataset
		then, project the input dataset to a one field layout that is the size of the whole dataset
		by looping through the fields and concatenating them into the one field
		Then, project that dataset into the new layout passed in
		by calculating the offsets of the one field dataset and taking those slices
		by looping through destination layout.
	*/

	/////////////////////////////////////////////
	// -- Start XML
	/////////////////////////////////////////////
	LOADXML('<xml/>');
	#EXPORTXML(pDataset_MetaInfo						,recordof(pDataset))
	#EXPORTXML(pDestinationLayout_MetaInfo	,pDestinationLayout)

//	#IF(pDatasetRecLength	= 0)
//		tools.mac_GetRecordLength(pDataset_MetaInfo						,lDatasetRecLength			,#TEXT(psetChildDatasetNumIn)	,true);
//	#ELSE
		#uniquename(lDatasetRecLength				)
		#SET(lDatasetRecLength			,pDatasetRecLength)
//	#END

	/////////////////////////////////////////////
	// -- Declare Value Types
	/////////////////////////////////////////////
	#uniquename(name							)
	#uniquename(named_layout			)
	#uniquename(last_layout			)
	#uniquename(stringfiller			)
	#uniquename(lenName						)
	#uniquename(lenType						)
	#uniquename(fillername				)
	#uniquename(fillertype				)
	#uniquename(moutput						)
	#uniquename(loutput						)
	#uniquename(lsize							)
	#uniquename(lIsDataset				)
	#uniquename(SizeofDatasetRec	)
	#uniquename(dDataset					)
	#uniquename(lDataset					)
	#uniquename(Layout_pInput_Lengths)
	#uniquename(pInput_prep				)
	#uniquename(pInput_prep2			)
	#uniquename(childdatasetnum		)
	#uniquename(lcounter					)
	#uniquename(lcounter2					)
	#uniquename(lchildatasetfields)
	#uniquename(lchildatasetlengths)
	#uniquename(lnumchildatasetfields)
	#uniquename(lchildatasetfieldlength)
	#uniquename(lchilddatasetline)
	#uniquename(startindex				)
	#uniquename(endindex					)
	#uniquename(dummydataset			)
	#uniquename(dblank						)
	#uniquename(ddummy						)
	#uniquename(layouttemp				)
	#uniquename(layouttemp2				)
	#uniquename(numperiods				)
	#uniquename(fieldname				)

	/////////////////////////////////////////////
	// -- Prep Stuff
	/////////////////////////////////////////////
	#SET(stringfiller, '                                                                           ')
//	#SET(SizeofDatasetRec	, sizeof(pDataset))
	#SET(named_layout	, '')
	#SET(name					, '')
	#SET(lIsDataset		, '')
	#SET(lchilddatasetline		, '')
	#SET(lchildatasetfields		, '')
	#SET(lchildatasetlengths		, '')
	#SET(lnumchildatasetfields	,1)
	#SET(lchildatasetfieldlength	,0)
	#SET(ldataset			,trim(#TEXT(pDataset),all))
	#SET(childdatasetnum	, 1)

	#if(pShouldExport = true)
		#SET(moutput	,'export ' + trim(#TEXT(pOutput),all))
	#ELSE
		#SET(moutput	,trim(#TEXT(pOutput),all))
	#END
	#IF(pOutputEcl = true)
		#SET(dDataset								,'pDataset')
		#SET(Layout_pInput_Lengths	,'Layout_pInput_Lengths')
		#SET(pInput_prep						,'pInput_prep')
		#SET(pInput_prep2						,'pInput_prep2')
		#SET(dblank									,'dblank')
		#SET(ddummy									,'ddummy')
	#END

	///////////////////////////////////////////////////////////////////////
	// -- First Project to one field layout by concatenating all fields in 
	// -- passed layout together.  
	///////////////////////////////////////////////////////////////////////
	#SET		(loutput	,%'dDataset'% + ' := ' + %'ldataset'% + ';\n')
	#APPEND	(loutput	,%'pInput_prep'% + ' := project(' + %'dDataset'% + ',transform({string' + %'lDatasetRecLength'% + ' payload}, self.payload := \n');

	#FOR (pDataset_MetaInfo)
		#FOR (Field)
			//if start of a child dataset or named layout, save name, then skip to next iteration of loop
			#IF((%'@isRecord'% = '1' or %'@isDataset'% = '1') and %'named_layout'% = '')
				#SET(named_layout	, %'@name'%)
				#SET(last_layout	, %'@name'%)
				#SET(lIsDataset		, %'@isDataset'%)
			#ELSEIF((%'@isRecord'% = '1' or %'@isDataset'% = '1') and %'named_layout'% != '')
				#SET(named_layout	, %'named_layout'% + '.' + %'@name'%)
				#SET(last_layout	, %'@name'%)
				#SET(lIsDataset		, %'@isDataset'%)
			#ELSE
				//If at end of child dataset fields, iterate through child dataset to concatenate
				//if it was just named layout, reset field vars
				
				// If end of a dataset or named layout(type is blank in these cases)
				#IF(%'@type'% = '')
					#IF(%'@name'% = %'named_layout'%)
						#SET(named_layout	, '')
					#ELSE
						#SET(named_layout	, regexreplace('[.]' + %'last_layout'%,%'named_layout'%,''))
					#END
					#IF(%'lIsDataset'% = '1')
						#SET(lcounter	, 1)
						#LOOP
							#IF(%lcounter% > psetChildDatasetNumIn[%childdatasetnum%])
								#BREAK
							#ELSE
								#APPEND(loutput, regexreplace('@index@',%'lchildatasetfields'%,%'lcounter'%,nocase))
								#SET(lcounter	,%lcounter% + 1)
							#END
						#END
						#SET(childdatasetnum	,%childdatasetnum% + 1)
						#SET(lchildatasetfields, '')
						#SET(lchildatasetlengths,'')
						#SET(lnumchildatasetfields	,1)
					#END
					#SET(lIsDataset		, '')
				// Not at end of named layout or dataset, these are normal fields
				#ELSE
					// If in named layout, set field name
					#IF(%'named_layout'% != '' and %'lIsDataset'% = '')
						#SET(name, %'named_layout'% + '.' + %'@name'%)
					// if in child dataset, set field name with index template
					#ELSIF(%'named_layout'% != '' and %'lIsDataset'% = '1')
						#SET(name, %'named_layout'% + '[@index@].' + %'@name'%)
						#IF(%'@type'% = 'string')
							#APPEND(lchildatasetfields, ' + left.' + %'name'% + '\n')
						#ELSE
							#APPEND(lchildatasetfields, ' + (>string' + %'@size'% + '<)left.' + %'name'% + '\n')
						#END
					// else, if not in named layout or child dataset, set name to field
					#ELSE
						#SET(name			, %'@name'%)
					#END
					// if not in child dataset, concatenate field
					#IF(%'lIsDataset'% != '1')
						#IF(%'@position'% != '0')
							#APPEND(loutput, ' + ')
						#END
						#IF(%'@type'% = 'string')
							#APPEND(loutput, ' left.' + %'name'% + '\n')
						#ELSE
							#APPEND(loutput, ' (>string' + %'@size'% + '<)left.' + %'name'% + '\n')
						#END
					#END
				#END
			#END
		#END
	#END
	
	#APPEND(loutput, '  ;\n));\n');

	/////////////////////////////////////////////
	// -- Second Project to output layout
	/////////////////////////////////////////////
	#SET(named_layout	, '')
	#SET(last_layout	, '')
	#SET(name					, '')
	#SET(lIsDataset		, '')
	#SET(lchildatasetfields		,'')
	#SET(lchildatasetlengths	,'')
	#SET(StartIndex	, 1)
	#SET(endindex		, 0)
	#SET(childdatasetnum	, 1)
	#SET		(dummydataset	,%'dblank'% +  ':= dataset([{\' \'}],{string craps});\n')
	#APPEND	(dummydataset	,%'ddummy'% +  ':= project(' + %'dblank'% + ', transform(' + trim(#TEXT(pDestinationLayout),all) + ', self := []));\n');
	#APPEND	(loutput	,%'dummydataset'%)
	#APPEND	(loutput	,%'pInput_prep2'% + ' := project(' + %'pInput_prep'% + ',transform(' + trim(#TEXT(pDestinationLayout),all) + ' , \n');

	#FOR (pDestinationLayout_MetaInfo)
		#FOR (Field)
			#IF			((%'@isRecord'% = '1' or %'@isDataset'% = '1') and %'named_layout'% = '')
				#SET(named_layout	, %'@name'%)
				#SET(last_layout	, %'@name'%)
				#SET(lIsDataset		, %'@isDataset'%)
			#ELSEIF	((%'@isRecord'% = '1' or %'@isDataset'% = '1') and %'named_layout'% != '')
				#SET(named_layout	, %'named_layout'% + '.' + %'@name'%)
				#SET(last_layout	, %'@name'%)
				#SET(lIsDataset		, %'@isDataset'%)
			#ELSE
//				#IF(%'last_layout'% = %'@name'% and %'@type'% = '')
				#IF(%'@type'% = '')
					#IF(%'lIsDataset'% = '1')
						#SET(lcounter	, 1)
						#APPEND		(loutput, 'self.' + %'named_layout'% + ' := dataset([\n')
						#LOOP
							#IF(%lcounter% > psetChildDatasetNumOut[%childdatasetnum%])
								#BREAK
							#ELSE
								#SET(lcounter2	, 1)
								#IF(%lcounter% != 1)
									#APPEND(loutput	,',')
								#END
								#APPEND(loutput	,'{')
								#LOOP
									#IF(%lcounter2% > %lnumchildatasetfields%)
										#BREAK
									#ELSE
										#SET(lchilddatasetline			,stringlib.stringextract(%'lchildatasetfields'%	,%lcounter2%))
										#SET(lchildatasetfieldlength,stringlib.stringextract(%'lchildatasetlengths'%,%lcounter2%))
										#SET(endindex		, %endindex% + %lchildatasetfieldlength%)
										#SET(lchilddatasetline, regexreplace('@startindex@'	,%'lchilddatasetline'%,%'startindex'%	,nocase))
										#SET(lchilddatasetline, regexreplace('@endindex@'		,%'lchilddatasetline'%,%'endindex'%		,nocase))
										#IF(%lcounter2% > 2)
											#APPEND(loutput	,',')
										#END
										#APPEND(loutput, %'lchilddatasetline'%)
										#SET(startindex	, %startindex%	+ %lchildatasetfieldlength%)
										#SET(lcounter2	,%lcounter2% + 1)
									#END
								#END
								#APPEND(loutput	,'}\n')
							#END
							#SET(lcounter	,%lcounter% + 1)
						#END
						#APPEND(loutput	,'],recordof(' + %'ddummy'% + '.' + %'named_layout'% + '));\n')
						#SET(childdatasetnum	,%childdatasetnum% + 1)
						#SET(lchildatasetfields, '')
						#SET(lchildatasetlengths,'')
						#SET(lnumchildatasetfields	,1)
					#END
					#SET(lIsDataset		, '')
					#IF(%'@name'% = %'named_layout'%)
//						#APPEND(loutput	,'\nClearing out named layout\n')
						#SET(named_layout	, '')
					#ELSE
						#SET(named_layout	, regexreplace('[.]' + %'last_layout'%,%'named_layout'%,''))
					#END
				#ELSE
					#IF(%'named_layout'% != '' and %'lIsDataset'% = '')
						#SET(name, %'named_layout'% + '.' + %'@name'%)

					#ELSIF(%'named_layout'% != '' and %'lIsDataset'% = '1')
						#SET(name, %'named_layout'% + '[@index@].' + %'@name'%)
						#IF(%'@position'% != '0')
							#APPEND(lchildatasetfields	, ',')
							#APPEND(lchildatasetlengths	, ',')
						#END
						#IF(%'@type'% = 'string')
							#APPEND(lchildatasetfields, 'left.payload[@startindex@..@endindex@]')
						#ELSE
							#APPEND(lchildatasetfields, '(>' + %'@type'% + %'@size'% + '<)left.payload[@startindex@..@endindex@]')
						#END
						#APPEND(lchildatasetlengths, %'@size'%)
						#SET(lnumchildatasetfields	,%lnumchildatasetfields% + 1)

					#ELSE
						#SET(name			, %'@name'%)
					#END
					#IF(%'lIsDataset'% != '1')
						#SET(endindex		, %endindex% + %@size%)
						#IF(%'@type'% = 'string')
							#APPEND(loutput, ' self.' + %'name'% + ' := left.payload[' + %'startindex'% + '..' + %'endindex'% + '];\n')
						#ELSE
							#APPEND(loutput, ' self.' + %'name'% + ' := (>' + %'@type'% + %'@size'% + '<)left.payload[' + %'startindex'% + '..' + %'endindex'% + '];\n')
						#END
						#SET(startindex	, %startindex%	+ %@size%)
//						#SET(endindex		, %endindex% 		+ sizeof(pDestinationLayout + '.' + %'name'%))
					#END
				#END
			#END
		#END
	#END
	
	#APPEND(loutput, '  \n));\n');


	#APPEND(loutput, %'moutput'% + ' := ' + %'pInput_prep2'% + ';\n');
	
	#if(pOutputEcl = true)
		pOutput := %'loutput'%;
	#ELSE
		%loutput%;
	#END

endmacro;
