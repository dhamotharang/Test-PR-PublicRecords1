/*2018-05-25T15:50:30Z (jprihighriskcity
chard)
C:\Users\prichajx\AppData\Roaming\HPCC Systems\eclide\jprichard\Dataland\KELOtto\Graph\2018-05-25T15_50_30Z.ecl
*/
#OPTION(persistlevel, 4)
#OPTION(persistexpire, 7)
#OPTION(codegen, 'nosmartjoins')
#OPTION(codegen, 'nolookupjoins')


// Defining the ERA to allow for ASOF functionality
ERA reportedby BEFORE(DateFirstSeen=NULL(MIN));
ERA reportedbetween BETWEEN(DateFirstSeen=NULL(MIN), DateLastSeen=NULL(MAX));

FUNCTION: CleanSpaces(STRING s) <= ECL(STD.Str.CleanSpaces(s)) FROM Std RETURNS STRING;

//GLOBAL: => HighFrequencyAddressThreshold := 20;

Customer := ENTITY(FLAT(UID=TargetCustomerHash,
    INTEGER CustomerId,
    INTEGER IndustryType, 
		STRING State,
		INTEGER StateCount), // This is filled from ECL but will be switch to fill in ECL from MBS later!!! (then take this comment out).
  MODEL(UID, CustomerId, IndustryType, States{State, StateCount}));

// The UID should be off the associated customer
// this ensure the customer can see all the people that are shared with them.

Person := ENTITY(FLAT(UID(AssociatedCustomerFileInfo, LexId),
    Customer rCustomer=AssociatedCustomerFileInfo,
    Customer rSourceCustomer=SourceCustomerFileInfo,
    DATE EventDate,
    INTEGER LexId, 
		DATE DateOfBirth,
		STRING Ssn,
		STRING EmailAddress,
		STRING Title=NULL(),
		STRING FirstName=NULL(),
		STRING MiddleName=NULL(),
		STRING LastName=NULL(),
		STRING NameSuffix=NULL(),
    
    // CIID Columns

    STRING verfirst,
    STRING verlast,
    STRING veraddr,
    STRING vercity,
    STRING verstate,
    STRING verzip,
    STRING verzip4,
    STRING verssn,
    STRING verdob,
    STRING verhphone,
    STRING verify_addr,
    STRING verify_dob,
    STRING valid_ssn,
    INTEGER nas_summary,
    INTEGER nap_summary,
    STRING cvi,

    STRING additional_fname_1,
    STRING additional_lname_1,
    STRING additional_lname_date_last_1,
    STRING additional_fname_2,
    STRING additional_lname_2,
    STRING additional_lname_date_last_2,
    STRING additional_fname_3,
    STRING additional_lname_3,
    STRING additional_lname_date_last_3,

    INTEGER subjectssncount,
    STRING dobmatchlevel,
    BOOLEAN ssnfoundforlexid,
    STRING cvicustomscore,

    INTEGER SubjectSsnCount,
    INTEGER DateOfBirthMatchLevel,
    INTEGER StolenIdentityIndex,	//Likelihood an application may be an attempt to compromise a real identity
    INTEGER SyntheticIdentityIndex,	//Likelihood application may be a manufactured identity
    INTEGER ManipulatedIdentityIndex,	//Likelihood the identity has evidence of being intentionally manipulated
    INTEGER VulnerableVictimIndex,	//Likelihood the identity is at risk for being a victim of identity fraud
    INTEGER FriendlyfraudIndex,	//Likelihood the identity is at risk for being a victim of identity fraud perpetrated by a relative
    INTEGER SuspiciousActivityIndex,	//Likelihood the identity has previous high risk activity

    // Fraudpoint
    
    INTEGER v2_sourcerisklevel,
    INTEGER v2_assocsuspicousidentitiescount,
    INTEGER v2_assoccreditbureauonlycount,
    INTEGER v2_validationaddrproblems,
    INTEGER v2_inputaddrageoldest,
    STRING v2_inputaddrdwelltype,
    STRING v2_divssnidentitycountnew,
    // Deceased
    
    DATE DeceasedDate,
    DATE DeceasedDateOfBirth,
    STRING DeceasedFirst,
    STRING DeceasedMiddle,
    STRING DeceasedLast,   

    STRING DeceasedMatchCode,
    BOOLEAN isdeepdive,

    STRING county_death,
    STRING DeceasedSsn,
    STRING state_death_flag,
    STRING death_rec_src,
    STRING state_death_id,
    
    STRING curr_incar_flag,
    STRING off_cat_list,
    INTEGER name_ssn_dob_match,
		
		STRING PrimaryRange=NULL(),
		STRING Predirectional=NULL(),
		STRING PrimaryName=NULL(),
		STRING Suffix=NULL(),
		STRING Postdirectional=NULL(),
		STRING UnitDesignation=NULL(),
		STRING SecondaryRange=NULL(),
		STRING PostalCity=NULL(),
		STRING VanityCity=NULL(),
		STRING State=NULL(),
		STRING Zip=NULL(),
		STRING Zip4=NULL()
    ),
	MODEL(UID,
    rCustomer,
    LexId,
    SourceCustomers{rSourceCustomer},
		ReportedDateOfBirth{DateOfBirth},
		ReportedSsn{EventDate, Ssn},
		ReportedEmailAddress{EventDate, EmailAddress},
		FullName{EventDate, Title,FirstName,MiddleName,LastName,NameSuffix},

    DeceasedDate,
    DeceasedDateOfBirth,
    DeceasedFirst,
    DeceasedMiddle,
    DeceasedLast,   

    DeceasedMatchCode,
    isdeepdive,

    county_death,
    DeceasedSsn,
    state_death_flag,
    death_rec_src,
    state_death_id,

    verfirst,
    verlast,
    veraddr,
    vercity,
    verstate,
    verzip,
    verzip4,
    verssn,
    verdob,
    verhphone,
    verify_addr,
    verify_dob,
    valid_ssn,
    nas_summary,
    nap_summary,
    cvi,
    additional_fname_1,
    additional_lname_1,
    additional_lname_date_last_1,
    additional_fname_2,
    additional_lname_2,
    additional_lname_date_last_2,
    additional_fname_3,
    additional_lname_3,
    additional_lname_date_last_3,
    subjectssncount,

    dobmatchlevel,
    ssnfoundforlexid,
    cvicustomscore,
    
    SubjectSsnCount,
    DateOfBirthMatchLevel,
    StolenIdentityIndex,
    SyntheticIdentityIndex,
    ManipulatedIdentityIndex,
    VulnerableVictimIndex,
    FriendlyfraudIndex,
    SuspiciousActivityIndex,

    v2_sourcerisklevel,
    v2_assocsuspicousidentitiescount, 
    v2_assoccreditbureauonlycount,
    v2_validationaddrproblems,
    v2_inputaddrageoldest,
    v2_inputaddrdwelltype,
		v2_divssnidentitycountnew,
    
    curr_incar_flag,
    name_ssn_dob_match,
    Offenses {off_cat_list},
    Address {EventDate, PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, UnitDesignation, SecondaryRange, PostalCity, VanityCity, State, Zip, Zip4}				
    ));	

Event := ENTITY(FLAT(UID(AssociatedCustomerFileInfo,record_id), 
    Customer rCustomer=AssociatedCustomerFileInfo,
    Customer rSourceCustomer=SourceCustomerFileInfo,
    Person Subject=UID(AssociatedCustomerFileInfo, LexId),
		Address Location=UID(AssociatedCustomerFileInfo, OttoAddressId),    

    Phone rPhone=UID(AssociatedCustomerFileInfo, PhoneNumber),
    Email rEmail=UID(AssociatedCustomerFileInfo,OttoEmailId),
    InternetProtocol rInternetProtocol=UID(AssociatedCustomerFileInfo, OttoIpAddressId),
    BankAccount rBankAccount=UID(AssociatedCustomerFileInfo, OttoBankAccountId),
    DriversLicense rDriversLicense=UID(AssociatedCustomerFileInfo, OttoDriversLicenseId),
    STRING PhoneNumber,
    STRING OttoAddressId,
    STRING OttoEmailId,
    STRING OttoIpAddressId,
    STRING OttoDriversLicenseId,

    INTEGER RecordId=record_id,
    DATE EventDate,
    STRING EventType, 
    INTEGER Confidence_that_activity_was_deceitful_id,
    INTEGER name_risk_code,
    INTEGER dob_risk_code,
    INTEGER ssn_risk_code,
    INTEGER drivers_license_risk_code,
    INTEGER physical_address_risk_code,
    INTEGER phone_risk_code,
    INTEGER cell_phone_risk_code,
    INTEGER work_phone_risk_code,
    INTEGER bank_account_1_risk_code,
    INTEGER bank_account_2_risk_code,
    INTEGER email_address_risk_code,
    INTEGER ip_address_fraud_code,
    INTEGER business_risk_code,
    INTEGER mailing_address_risk_code,
    INTEGER device_risk_code,
    INTEGER identity_risk_code,

		DATE DateOfBirth,

    // CIID Columns

    STRING verfirst,
    STRING verlast,
    STRING veraddr,
    STRING vercity,
    STRING verstate,
    STRING verzip,
    STRING verzip4,
    STRING verssn,
    STRING verdob,
    STRING verhphone,
    STRING verify_addr,
    STRING verify_dob,
    STRING valid_ssn,
    INTEGER nas_summary,
    INTEGER nap_summary,
    INTEGER relativeaddressmatch,
    STRING cvi,

    STRING additional_fname_1,
    STRING additional_lname_1,
    STRING additional_lname_date_last_1,
    STRING additional_fname_2,
    STRING additional_lname_2,
    STRING additional_lname_date_last_2,
    STRING additional_fname_3,
    STRING additional_lname_3,
    STRING additional_lname_date_last_3,

    INTEGER subjectssncount,
    STRING dobmatchlevel,
    BOOLEAN ssnfoundforlexid,
    STRING cvicustomscore,

    INTEGER SubjectSsnCount,
    INTEGER DateOfBirthMatchLevel,
    INTEGER StolenIdentityIndex,	//Likelihood an application may be an attempt to compromise a real identity
    INTEGER SyntheticIdentityIndex,	//Likelihood application may be a manufactured identity
    INTEGER ManipulatedIdentityIndex,	//Likelihood the identity has evidence of being intentionally manipulated
    INTEGER VulnerableVictimIndex,	//Likelihood the identity is at risk for being a victim of identity fraud
    INTEGER FriendlyfraudIndex,	//Likelihood the identity is at risk for being a victim of identity fraud perpetrated by a relative
    INTEGER SuspiciousActivityIndex,	//Likelihood the identity has previous high risk activity

    // Fraudpoint
    
    INTEGER v2_sourcerisklevel,
    INTEGER v2_assocsuspicousidentitiescount,
    INTEGER v2_assoccreditbureauonlycount,
    INTEGER v2_validationaddrproblems,
    INTEGER v2_inputaddrageoldest,
    STRING v2_inputaddrdwelltype,
    STRING v2_divssnidentitycountnew,
    // Deceased
    
    DATE DeceasedDate,
    DATE DeceasedDateOfBirth,
    STRING DeceasedFirst,
    STRING DeceasedMiddle,
    STRING DeceasedLast,   

    STRING DeceasedMatchCode,
    BOOLEAN isdeepdive,

    STRING county_death,
    STRING DeceasedSsn,
    STRING state_death_flag,
    STRING death_rec_src,
    STRING state_death_id,
		STRING Hri,

    STRING IpAddress=ip_address,
    STRING iprngbeg,
    STRING iprngend,
    STRING edgecountry,
    STRING edgeregion,
    STRING edgecity,
    STRING edgeconnspeed,
    STRING edgemetrocode,
    STRING edgelatitude,
    STRING edgelongitude,
    STRING edgepostalcode,
    STRING edgecountrycode,
    STRING edgeregioncode,
    STRING edgecitycode,
    STRING edgecontinentcode,
    STRING edgetwolettercountry,
    STRING edgeinternalcode,
    STRING edgeareacodes,
    STRING edgecountryconf,
    STRING edgeregionconf,
    STRING edgecitycong,
    STRING edgepostalconf,
    STRING edgegmtoffset,
    STRING edgeindst,
    STRING siccode,
    STRING domainname,
    STRING ispname,
    STRING homebiztype,
    STRING asn,
    STRING asnname,
    STRING primarylang,
    STRING secondarylang,
    STRING proxytype,
    STRING proxydescription,
    STRING isanisp,
    STRING companyname,
    STRING ranks,
    STRING households,
    STRING women,
    STRING women18to34,
    STRING women35to49,
    STRING men,
    STRING men18to34,
    STRING men35to49,
    STRING teens,
    STRING kids,
    STRING naicscode,
    STRING cbsacode,
    STRING cbsatitle,
    STRING cbsatype,
    STRING csacode,
    STRING csatitle,
    STRING mdcode,
    STRING mdtitle,
    STRING organizationname,
    STRING advo_hitflag,
    STRING advo_vacancyindicator,
    STRING advo_addressstyle,
    STRING advo_dropindicator,
    STRING advo_residentialorbusinessindicator,
    STRING advo_addresstype,
    STRING advo_addressusagetype,
		STRING ACECleanerErrorCode=NULL()
    ),
    MODEL(
      UID,
      rCustomer,
      SourceCustomers{rSourceCustomer},
      Subject,
      Location,
      RecordId,
      EventDate,
      EventTypes{EventType},

    rPhone,rEmail,rInternetProtocol,rBankAccount,rDriversLicense,
    OttoAddressId,
    DateOfBirth,
    DeceasedDate,
    DeceasedDateOfBirth,
    DeceasedFirst,
    DeceasedMiddle,
    DeceasedLast,   
		PhoneNumber,

    OttoEmailId,
    OttoIpAddressId,

    OttoDriversLicenseId,

    DeceasedMatchCode,
    isdeepdive,

    county_death,
    DeceasedSsn,
    state_death_flag,
    death_rec_src,
    state_death_id,

    verfirst,
    verlast,
    veraddr,
    vercity,
    verstate,
    verzip,
    verzip4,
    verssn,
    verdob,
    verhphone,
    verify_addr,
    verify_dob,
    valid_ssn,
    nas_summary,
    nap_summary,
    relativeaddressmatch,
    cvi,
    additional_fname_1,
    additional_lname_1,
    additional_lname_date_last_1,
    additional_fname_2,
    additional_lname_2,
    additional_lname_date_last_2,
    additional_fname_3,
    additional_lname_3,
    additional_lname_date_last_3,
    subjectssncount,

    dobmatchlevel,
    ssnfoundforlexid,
    cvicustomscore,
    
    SubjectSsnCount,
    DateOfBirthMatchLevel,
    StolenIdentityIndex,
    SyntheticIdentityIndex,
    ManipulatedIdentityIndex,
    VulnerableVictimIndex,
    FriendlyfraudIndex,
    SuspiciousActivityIndex,

    v2_sourcerisklevel,
    v2_assocsuspicousidentitiescount,
    v2_assoccreditbureauonlycount,
    v2_validationaddrproblems,
    v2_inputaddrageoldest,
    v2_inputaddrdwelltype,
		v2_divssnidentitycountnew,
    
		HriList { Hri },

    IpAddress,iprngbeg,iprngend,edgecountry,edgeregion,edgecity,edgeconnspeed,edgemetrocode,edgelatitude,edgelongitude,edgepostalcode,edgecountrycode,edgeregioncode,edgecitycode,edgecontinentcode,edgetwolettercountry,edgeinternalcode,edgeareacodes,edgecountryconf,edgeregionconf,edgecitycong,edgepostalconf,edgegmtoffset,edgeindst,siccode,domainname,ispname,homebiztype,asn,asnname,primarylang,secondarylang,proxytype,proxydescription,isanisp,companyname,ranks,households,women,women18to34,women35to49,men,men18to34,men35to49,teens,kids,naicscode,cbsacode,cbsatitle,cbsatype,csacode,csatitle,mdcode,mdtitle,organizationname,
    Confidence_that_activity_was_deceitful_id, name_risk_code,dob_risk_code,ssn_risk_code,drivers_license_risk_code,physical_address_risk_code,phone_risk_code,cell_phone_risk_code,work_phone_risk_code,bank_account_1_risk_code,bank_account_2_risk_code,email_address_risk_code,ip_address_fraud_code,business_risk_code,mailing_address_risk_code,device_risk_code,identity_risk_code,
		advo_hitflag, advo_vacancyindicator, advo_addressstyle, advo_dropindicator, advo_residentialorbusinessindicator, advo_addresstype, advo_addressusagetype, ACECleanerErrorCode
          ));

Address := ENTITY(FLAT(UID(AssociatedCustomerFileInfo, OttoAddressId),
    Customer rCustomer=AssociatedCustomerFileInfo,
    Customer rSourceCustomer=SourceCustomerFileInfo,
    BOOLEAN addresspobox,
    BOOLEAN addresscmra,
    STRING OttoAddressId,
		STRING PrimaryRange=NULL(),
		STRING Predirectional=NULL(),
		STRING PrimaryName=NULL(),
		STRING Suffix=NULL(),
		STRING Postdirectional=NULL(),
		STRING UnitDesignation=NULL(),
		STRING SecondaryRange=NULL(),
		STRING PostalCity=NULL(),
		STRING VanityCity=NULL(),
		STRING State=NULL(),
		STRING Zip=NULL(),
		STRING Zip4=NULL(),
		STRING CarrierRouteNumber=NULL(),
		STRING CarrierRouteSortationAtZIP=NULL(),
		INTEGER LineOfTravel=NULL(),
		STRING LineOfTravelOrder=NULL(),
		INTEGER DeliveryPointBarcode=NULL(),
		INTEGER DeliveryPointBarcodeCheckDigit=NULL(),
		STRING TypeCode=NULL(),
		INTEGER County=NULL(),
		REAL Latitude=NULL(),
		REAL Longitude=NULL(),
		INTEGER MetropolitanStatisticalArea=NULL(),
		INTEGER GeoBlock=NULL(),
		STRING GeoMatch=NULL(),
		STRING ACECleanerErrorCode=NULL(),
		BOOLEAN isAdditional),
	MODEL(UID,
    rCustomer, SourceCustomers{rSourceCustomer}, 
    addresspobox, addresscmra, OttoAddressId, PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, UnitDesignation, SecondaryRange, PostalCity, VanityCity, State, 
		Zip, Zip4, CarrierRouteNumber, CarrierRouteSortationAtZIP, LineOfTravel, LineOfTravelOrder, DeliveryPointBarcode, DeliveryPointBarcodeCheckDigit, 
		TypeCode, County, Latitude, Longitude, MetropolitanStatisticalArea, GeoBlock, GeoMatch,ACECleanerErrorCode,isAdditional));

SocialSecurityNumber := ENTITY(FLAT(UID(AssociatedCustomerFileInfo, OttoSSNId),
    Customer rCustomer=AssociatedCustomerFileInfo,
    Customer rSourceCustomer=SourceCustomerFileInfo,
    Ssn,
    STRING OttoSSNId,
    STRING SsnFormatted,

    v2_divssnidentitycountnew,
    DATE DeceasedDate,
    DATE DeceasedDateOfBirth,
    STRING DeceasedFirst,
    STRING DeceasedMiddle,
    STRING DeceasedLast,   

    STRING DeceasedMatchCode,
    BOOLEAN isdeepdive,

    STRING county_death,
    STRING DeceasedSsn,
    STRING state_death_flag,
    STRING death_rec_src,
    STRING state_death_id
    ),
  MODEL(
    UID, rCustomer, SourceCustomers{rSourceCustomer}, Ssn, OttoSSNId, SsnFormatted, v2_divssnidentitycountnew,DeceasedDate,DeceasedDateOfBirth,DeceasedFirst,DeceasedMiddle,DeceasedLast,DeceasedMatchCode,isdeepdive,county_death,DeceasedSsn,state_death_flag,death_rec_src,state_death_id
    ));

Phone := ENTITY(FLAT(UID(AssociatedCustomerFileInfo, PhoneNumber),
    Customer rCustomer=AssociatedCustomerFileInfo,
    Customer rSourceCustomer=SourceCustomerFileInfo,
    STRING PhoneFormatted,
    STRING PhoneNumber,
		BOOLEAN isCellPhone
		),
	MODEL(UID,
    rCustomer, SourceCustomers{rSourceCustomer}, PhoneFormatted, PhoneNumber, isCellPhone));

Email := ENTITY(FLAT(UID(AssociatedCustomerFileInfo,OttoEmailId),
    Customer rCustomer=AssociatedCustomerFileInfo,
    Customer rSourceCustomer=SourceCustomerFileInfo,
		STRING EmailAddress,
		STRING Type,
		STRING OttoEmailId,
		DATE CreatedOn,
		STRING Host,
		STRING EmailLastDomain,
		INTEGER isdisposableemail),
	MODEL(UID,
    rCustomer, SourceCustomers{rSourceCustomer}, EmailAddress, OttoEmailId, Details{Type,CreatedOn,Host}, EmailLastDomain, isdisposableemail));

InternetProtocol := ENTITY(FLAT(UID(AssociatedCustomerFileInfo, OttoIpAddressId),
    Customer rCustomer=AssociatedCustomerFileInfo,
    Customer rSourceCustomer=SourceCustomerFileInfo,
    STRING IpAddress=ip_address,
		STRING OttoIpAddressId,
    STRING host,
    STRING alias,
    STRING location,
    STRING ip_address,
    STRING ip_address_date,
    STRING version,
    STRING class,
    STRING subnet_mask,
    STRING reserved,
    STRING isp,
    INTEGER v2_validationipproblems,
    STRING v2_ipstate,
    STRING v2_ipcountry,
    STRING v2_ipcontinent,

    STRING iprngbeg,
    STRING iprngend,
    STRING edgecountry,
    STRING edgeregion,
    STRING edgecity,
    STRING edgeconnspeed,
    STRING edgemetrocode,
    STRING edgelatitude,
    STRING edgelongitude,
    STRING edgepostalcode,
    STRING edgecountrycode,
    STRING edgeregioncode,
    STRING edgecitycode,
    STRING edgecontinentcode,
    STRING edgetwolettercountry,
    STRING edgeinternalcode,
    STRING edgeareacodes,
    STRING edgecountryconf,
    STRING edgeregionconf,
    STRING edgecitycong,
    STRING edgepostalconf,
    STRING edgegmtoffset,
    STRING edgeindst,
    STRING siccode,
    STRING domainname,
    STRING ispname,
    STRING homebiztype,
    STRING asn,
    STRING asnname,
    STRING primarylang,
    STRING secondarylang,
    STRING proxytype,
    STRING proxydescription,
    STRING isanisp,
    STRING companyname,
    STRING ranks,
    STRING households,
    STRING women,
    STRING women18to34,
    STRING women35to49,
    STRING men,
    STRING men18to34,
    STRING men35to49,
    STRING teens,
    STRING kids,
    STRING naicscode,
    STRING cbsacode,
    STRING cbsatitle,
    STRING cbsatype,
    STRING csacode,
    STRING csatitle,
    STRING mdcode,
    STRING mdtitle,
    STRING organizationname
    
    ),
  MODEL(
    UID, rCustomer, SourceCustomers{rSourceCustomer},IpAddress, OttoIpAddressId, host,alias,location,ip_address,ip_address_date,version,class,subnet_mask,reserved,isp,v2_validationipproblems,v2_ipstate,v2_ipcountry,v2_ipcontinent,
    iprngbeg,iprngend,edgecountry,edgeregion,edgecity,edgeconnspeed,edgemetrocode,edgelatitude,edgelongitude,edgepostalcode,edgecountrycode,edgeregioncode,edgecitycode,edgecontinentcode,edgetwolettercountry,edgeinternalcode,edgeareacodes,edgecountryconf,edgeregionconf,edgecitycong,edgepostalconf,edgegmtoffset,edgeindst,siccode,domainname,ispname,homebiztype,asn,asnname,primarylang,secondarylang,proxytype,proxydescription,isanisp,companyname,ranks,households,women,women18to34,women35to49,men,men18to34,men35to49,teens,kids,naicscode,cbsacode,cbsatitle,cbsatype,csacode,csatitle,mdcode,mdtitle,organizationname
    ));
    
 
//Bank Account – New – let’s make it 19

Bank := ENTITY(FLAT(UID(AssociatedCustomerFileInfo, RoutingNumber),
    Customer rCustomer=AssociatedCustomerFileInfo,
    Customer rSourceCustomer=SourceCustomerFileInfo,
    STRING RoutingNumber,
    STRING FullBankname,
    STRING AbbreviatedBankname,
    STRING FractionalRoutingnumber,
    STRING HeadofficeRoutingnumber,
    STRING HeadofficeBranchcodes,
    STRING hit
		),
	MODEL(UID,
    rCustomer, SourceCustomers{rSourceCustomer},RoutingNumber,FullBankname,AbbreviatedBankname,FractionalRoutingnumber,HeadofficeRoutingnumber,HeadofficeBranchcodes,hit));

BankAccount := ENTITY(FLAT(UID(AssociatedCustomerFileInfo, OttoBankAccountId),
    Customer rCustomer=AssociatedCustomerFileInfo,
    Customer rSourceCustomer=SourceCustomerFileInfo,
    Bank rBank=UID(AssociatedCustomerFileInfo, RoutingNumber),
    STRING AccountNumber,
    STRING OttoBankAccountId

		),
	MODEL(UID,
    rCustomer, SourceCustomers{rSourceCustomer}, rBank, AccountNumber, OttoBankAccountId));


//DL – New – let’s make it 20
 
DriversLicense := ENTITY(FLAT(UID(AssociatedCustomerFileInfo, OttoDriversLicenseId),
    Customer rCustomer=AssociatedCustomerFileInfo,
    Customer rSourceCustomer=SourceCustomerFileInfo,
    STRING LicenseNumber,
    STRING State,
    STRING OttoDriversLicenseId
		),
	MODEL(UID,
    rCustomer, SourceCustomers{rSourceCustomer}, LicenseNumber, State, OttoDriversLicenseId));
    
/*
  ASSOCIATIONS
*/

CustomerPerson := ASSOCIATION(FLAT(
    Customer rCustomer=AssociatedCustomerFileInfo,
		Person Subject=UID(AssociatedCustomerFileInfo, LexId)));	

PersonAddress := ASSOCIATION(FLAT(
    Customer rCustomer=AssociatedCustomerFileInfo,
		Person Subject=UID(AssociatedCustomerFileInfo, LexId),
		Address Location=UID(AssociatedCustomerFileInfo, OttoAddressId),
    DATE EventDate), MODEL(rCustomer, Subject, Location, EventDates{EventDate}));	

PersonSSN := ASSOCIATION(FLAT(
    Customer rCustomer=AssociatedCustomerFileInfo,
		Person Subject=UID(AssociatedCustomerFileInfo, LexId),
		SocialSecurityNumber Social=UID(AssociatedCustomerFileInfo, OttoSSNId),
    DATE EventDate), MODEL(rCustomer, Subject, Social, EventDates{EventDate}));	

PersonIpAddress := ASSOCIATION(FLAT(
    Customer rCustomer=AssociatedCustomerFileInfo,
		Person Subject=UID(AssociatedCustomerFileInfo, LexId),
		InternetProtocol Ip=UID(AssociatedCustomerFileInfo, OttoIpAddressId),
    DATE EventDate), MODEL(rCustomer, Subject, Ip, EventDates{EventDate}));	
		
PersonPhone := ASSOCIATION(FLAT(
    Customer rCustomer=AssociatedCustomerFileInfo,
		Person Subject=UID(AssociatedCustomerFileInfo, LexId),
		Phone PhoneNumber=UID(AssociatedCustomerFileInfo, PhoneNumber),
    DATE EventDate), MODEL(rCustomer, Subject, PhoneNumber, EventDates{EventDate}));	

PersonBankAccount := ASSOCIATION(FLAT(
    Customer rCustomer=AssociatedCustomerFileInfo,
		Person Subject=UID(AssociatedCustomerFileInfo, LexId),
		BankAccount Account=UID(AssociatedCustomerFileInfo, OttoBankAccountId),
    DATE EventDate), MODEL(rCustomer, Subject, Account, EventDates{EventDate}));	

PersonDriversLicense := ASSOCIATION(FLAT(
    Customer rCustomer=AssociatedCustomerFileInfo,
		Person Subject=UID(AssociatedCustomerFileInfo, LexId),
		DriversLicense License=UID(AssociatedCustomerFileInfo, OttoDriversLicenseId),
    DATE EventDate), MODEL(rCustomer, Subject, License, EventDates{EventDate}));

PersonEmail := ASSOCIATION(FLAT(
    Customer rCustomer=AssociatedCustomerFileInfo,
		Person Subject=UID(AssociatedCustomerFileInfo, LexId),
		Email Emailof=UID(AssociatedCustomerFileInfo, OttoEmailId),
    DATE EventDate), MODEL(rCustomer, Subject, Emailof, EventDates{EventDate}));

AddressSSN := ASSOCIATION(FLAT(
    Customer rCustomer=AssociatedCustomerFileInfo,
		Address Location=UID(AssociatedCustomerFileInfo, OttoAddressId),
		SocialSecurityNumber Social=UID(AssociatedCustomerFileInfo, Ssn)));	
		
		
/*
PersonEvent := ASSOCIATION(FLAT(
    Customer rCustomer=AssociatedCustomerFileInfo,
		Person Subject=UID(AssociatedCustomerFileInfo, LexId),
		SocialSecurityNumber Social=UID(AssociatedCustomerFileInfo, Ssn),
		Phone PhoneNumber=UID(AssociatedCustomerFileInfo, PhoneNumber),
		Email Emailof=UID(AssociatedCustomerFileInfo,Email_Address),
		Address Location=UID(AssociatedCustomerFileInfo,PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, Zip, SecondaryRange),
		InternetProtocol Ip=UID(AssociatedCustomerFileInfo, IpAddress),
    Bank RoutingBank=UID(AssociatedCustomerFileInfo, RoutingNumber),
    BankAccount Account=UID(AssociatedCustomerFileInfo, RoutingNumber, AccountNumber),
    DriversLicense Licence=UID(AssociatedCustomerFileInfo, drivers_license),
    DATE EventDate,
    Event Transaction=UID(AssociatedCustomerFileInfo, record_id)
   ));
*/
PersonEvent := ASSOCIATION(FLAT(
    Customer rCustomer=AssociatedCustomerFileInfo,
		Person Subject=UID(AssociatedCustomerFileInfo, LexId),
    DATE EventDate,
    Event Transaction=UID(AssociatedCustomerFileInfo, record_id)
   ));

SsnEvent := ASSOCIATION(FLAT(
    Customer rCustomer=AssociatedCustomerFileInfo,
		SocialSecurityNumber Social=UID(AssociatedCustomerFileInfo, OttoSSNId),
    DATE EventDate,
    Event Transaction=UID(AssociatedCustomerFileInfo, record_id)
   ));

PhoneEvent := ASSOCIATION(FLAT(
    Customer rCustomer=AssociatedCustomerFileInfo,
		Phone PhoneNumber=UID(AssociatedCustomerFileInfo, PhoneNumber),
    DATE EventDate,
    Event Transaction=UID(AssociatedCustomerFileInfo, record_id)
   ));
   
EmailEvent := ASSOCIATION(FLAT(
    Customer rCustomer=AssociatedCustomerFileInfo,
		Email Emailof=UID(AssociatedCustomerFileInfo,OttoEmailId),
    DATE EventDate,
    Event Transaction=UID(AssociatedCustomerFileInfo, record_id)
   ));   
   
BankAccountEvent := ASSOCIATION(FLAT(
    Customer rCustomer=AssociatedCustomerFileInfo,
    BankAccount Account=UID(AssociatedCustomerFileInfo, OttoBankAccountId),
    DATE EventDate,
    Event Transaction=UID(AssociatedCustomerFileInfo, record_id)
   ));

DriversLicenseEvent := ASSOCIATION(FLAT(
    Customer rCustomer=AssociatedCustomerFileInfo,
    DriversLicense Licence=UID(AssociatedCustomerFileInfo, OttoDriversLicenseId),
    DATE EventDate,
    Event Transaction=UID(AssociatedCustomerFileInfo, record_id)
   ));


InternetProtocolEvent := ASSOCIATION(FLAT(
    Customer rCustomer=AssociatedCustomerFileInfo,
		InternetProtocol Ip=UID(AssociatedCustomerFileInfo, OttoIpAddressId),
    DATE EventDate,
    Event Transaction=UID(AssociatedCustomerFileInfo, record_id)
   ));
   
AddressEvent := ASSOCIATION(FLAT(
    Customer rCustomer=AssociatedCustomerFileInfo,
		Address Location=UID(AssociatedCustomerFileInfo, OttoAddressId),
    DATE EventDate,
    Event Transaction=UID(AssociatedCustomerFileInfo, record_id)
   ));

   
PersonPerson := ASSOCIATION(FLAT(
    Customer rCustomer=AssociatedCustomerFileInfo,
    Person FromPerson=UID(AssociatedCustomerFileInfo,frompersonlexid),
    Person ToPerson=UID(AssociatedCustomerFileInfo,topersonlexid),
		INTEGER SelfMatch,
    INTEGER ContributoryRecords,
    INTEGER SameAddressEmailMatch,
    INTEGER SameAddressSsnMatch,
    INTEGER SameAddressPhoneNumberMatch,
    INTEGER SameAddressSameDayCount,
    INTEGER HighFrequencySameAddressSameDayCount,
    INTEGER NonHighFrequencyAddressCount,
    INTEGER NonHighFrequencySameAddressSameDayCount,
    INTEGER SharedAddressCount,
    STRING VerifiedPRType,
    STRING VerifiedPRconfidence,
    BOOLEAN VerifiedPRPersonal,
    BOOLEAN VerifiedPRBusiness,
    BOOLEAN VerifiedPROther,
    BOOLEAN VerifiedPRIsRelative,
    BOOLEAN VerifiedPRIsAssociate,
    BOOLEAN VerifiedPRIsBusiness,
    REAL VerifiedPRDegree,
    INTEGER VerifiedPRHit,
    INTEGER VerifiedPRRelationshipCode,
    INTEGER VerifiedPRRelationship

    ));

USE FraudgovKEL.fraudgovshared(FLAT,
  Event(FILTER((UNSIGNED)record_id > 0), 
    LexId = did,
    EventDate = event_date,
		PhoneNumber = clean_phones.phone_number

    ),
	Person(FILTER((UNSIGNED)did <> 0),
    LexId = did,
		DateOfBirth = dob,
    EventDate = event_date,
		Title = cleaned_name.title,
		FirstName = cleaned_name.fname,
		MiddleName =cleaned_name.mname,
		LastName = cleaned_name.lname,
		NameSuffix = cleaned_name.name_suffix,
		EmailAddress=email_address,
		PrimaryRange = clean_address.prim_range,
		Predirectional = clean_address.predir,
		PrimaryName = clean_address.prim_name,
		Suffix =clean_address.addr_suffix,
		Postdirectional = clean_address.postdir,
		UnitDesignation = clean_address.unit_desig,
		SecondaryRange = clean_address.sec_range,
		PostalCity = clean_address.p_city_name,
		VanityCity = clean_address.v_city_name,
		State = clean_address.st,
		Zip = clean_address.zip,
		Zip4 = clean_address.zip4,
    SubjectSsnCount = subjectssncount,
    DateOfBirthMatchLevel = dobmatchlevel,
    StolenIdentityIndex = StolenIdentityIndex,
    SyntheticIdentityIndex = SyntheticIdentityIndex, 
    ManipulatedIdentityIndex = ManipulatedIdentityIndex,
    VulnerableVictimIndex = VulnerableVictimIndex,
    FriendlyfraudIndex = FriendlyfraudIndex,
    SuspiciousActivityIndex = SuspiciousActivityIndex,
    DeceasedDate = dod8,
    DeceasedDateOfBirth = dob8,
    DeceasedFirst = fname,
    DeceasedMiddle = mname,
    DeceasedLast = lname,
    DeceasedSsn = ssn,
    DeceasedMatchCode = matchcode,
		DateFirstSeen = dt_first_seen, // Contains information for ASOF
		DateLastSeen = dt_last_seen),		// Contains information for ASOF
	Address(FILTER((STRING10)clean_address.prim_range <> '' AND (STRING28)clean_address.prim_name <> '' AND (UNSIGNED3)clean_address.zip <> 0),
		PrimaryRange = clean_address.prim_range,
		Predirectional = clean_address.predir,
		PrimaryName = clean_address.prim_name,
		Suffix =clean_address.addr_suffix,
		Postdirectional = clean_address.postdir,
		UnitDesignation = clean_address.unit_desig,
		SecondaryRange = clean_address.sec_range,
		PostalCity = clean_address.p_city_name,
		VanityCity = clean_address.v_city_name,
		State = clean_address.st,
		Zip = clean_address.zip,
		Zip4 = clean_address.zip4,
		CarrierRouteNumber = clean_address.cart,
		CarrierRouteSortationAtZIP = clean_address.cr_sort_sz,
		LineOfTravel =clean_address.lot,
		LineOfTravelOrder = clean_address.lot_order,
		DeliveryPointBarcode = clean_address.dbpc,
		DeliveryPointBarcodeCheckDigit = clean_address.chk_digit,
		TypeCode = clean_address.rec_type,
		County = clean_address.fips_county,
		Latitude = clean_address.geo_lat,
		Longitude = clean_address.geo_long,
		MetropolitanStatisticalArea = clean_address.msa,
		GeoBlock = clean_address.geo_blk,
		GeoMatch = clean_address.geo_match,
		ACECleanerErrorCode = clean_address.err_stat,
		isAdditional=FALSE,
		DateFirstSeen = dt_first_seen, 
		DateLastSeen = dt_last_seen),
    /*
	Address(FILTER((STRING10)additional_address.clean_address.prim_range <> '' AND (STRING28)additional_address.clean_address.prim_name <> '' AND (UNSIGNED3)additional_address.clean_address.zip <> 0),
		PrimaryRange = additional_address.clean_address.prim_range,
		Predirectional = additional_address.clean_address.predir,
		PrimaryName = additional_address.clean_address.prim_name,
		Suffix = additional_address.clean_address.addr_suffix,
		Postdirectional = additional_address.clean_address.postdir,
		UnitDesignation = additional_address.clean_address.unit_desig,
		SecondaryRange = additional_address.clean_address.sec_range,
		PostalCity = additional_address.clean_address.p_city_name,
		VanityCity = additional_address.clean_address.v_city_name,
		State = additional_address.clean_address.st,
		Zip = additional_address.clean_address.zip,
		Zip4 = additional_address.clean_address.zip4,
		CarrierRouteNumber = additional_address.clean_address.cart,
		CarrierRouteSortationAtZIP = additional_address.clean_address.cr_sort_sz,
		LineOfTravel = additional_address.clean_address.lot,
		LineOfTravelOrder = additional_address.clean_address.lot_order,
		DeliveryPointBarcode = additional_address.clean_address.dpbc,
		DeliveryPointBarcodeCheckDigit = additional_address.clean_address.chk_digit,
		TypeCode = additional_address.clean_address.rec_type,
		County = additional_address.clean_address.ace_fips_county,
		Latitude = additional_address.clean_address.geo_lat,
		Longitude = additional_address.clean_address.geo_long,
		MetropolitanStatisticalArea = additional_address.clean_address.msa,
		GeoBlock = additional_address.clean_address.geo_blk,
		GeoMatch = additional_address.clean_address.geo_match,
		ACECleanerErrorCode = additional_address.clean_address.err_stat,
		isAdditional=TRUE,
		DateFirstSeen = dt_first_seen,
		DateLastSeen = dt_last_seen),
    */
	SocialSecurityNumber(FILTER((UNSIGNED)ssn <> 0),
		DateFirstSeen = dt_first_seen,
		DateLastSeen = dt_last_seen),
	Phone(FILTER(TRIM(clean_phones.cell_phone) != ''),
    PhoneFormatted = cell_phone_formatted,
		PhoneNumber = clean_phones.cell_phone,
		isCellPhone = TRUE,
		DateFirstSeen = dt_first_seen,
		DateLastSeen = dt_last_seen),
	Phone(FILTER(TRIM(clean_phones.phone_number) != ''),
    PhoneFormatted = phone_number_formatted,
		PhoneNumber = clean_phones.phone_number,
		isCellPhone = FALSE,
		DateFirstSeen = dt_first_seen,
		DateLastSeen = dt_last_seen),
	Email(FILTER((STRING50)email_address <> ''),
		EmailAddress=email_address,
		Type=email_address_type,
		CreatedOn=email_address_date,
		DateFirstSeen = dt_first_seen,
		DateLastSeen = dt_last_seen),
	PersonAddress(FILTER((UNSIGNED)did <> 0 AND (STRING10)clean_address.prim_range <> '' AND (STRING28)clean_address.prim_name <> '' AND (UNSIGNED3)clean_address.zip <> 0 AND AssociatedCustomerFileInfo > 0),
    LexId = did,
		DateLastSeen = dt_last_seen,
		DateFirstSeen = dt_first_seen),

  CustomerPerson(FILTER((UNSIGNED)did<>0 AND (UNSIGNED)ssn<>0 AND AssociatedCustomerFileInfo > 0),		
    LexId = did,
		DateLastSeen = dt_last_seen,
		DateFirstSeen = dt_first_seen),
		
	PersonSSN(FILTER((UNSIGNED)did<>0 AND (UNSIGNED)ssn<>0 AND AssociatedCustomerFileInfo > 0),
    LexId = did,
		DateLastSeen = dt_last_seen,
		DateFirstSeen = dt_first_seen),
	AddressSSN(FILTER((STRING10)clean_address.prim_range <> '' AND (STRING28)clean_address.prim_name <> '' AND (UNSIGNED3)clean_address.zip <> 0 AND (UNSIGNED)ssn <>0 AND AssociatedCustomerFileInfo > 0),
		DateLastSeen = dt_last_seen,
		DateFirstSeen = dt_first_seen),
	PersonPhone(FILTER((UNSIGNED)did <> 0 AND clean_phones.cell_phone != '' AND (STRING10)clean_address.prim_range <> '' AND (STRING28)clean_address.prim_name <> '' AND (UNSIGNED3)clean_address.zip <> 0),
    LexId = did,
		PhoneNumber = clean_phones.cell_phone,
		DateLastSeen = dt_last_seen,
		DateFirstSeen = dt_first_seen),
	PersonPhone(FILTER((UNSIGNED)did <> 0 AND clean_phones.phone_number != '' AND (STRING10)clean_address.prim_range <> '' AND (STRING28)clean_address.prim_name <> '' AND (UNSIGNED3)clean_address.zip <> 0),
    LexId = did,
		PhoneNumber = clean_phones.phone_number,
		DateLastSeen = dt_last_seen,
		DateFirstSeen = dt_first_seen),
	PersonEmail(FILTER((UNSIGNED)did <> 0 AND (STRING50)email_address <> '' AND AssociatedCustomerFileInfo > 0),
    LexId = did
  ),
  PersonEvent(FILTER((UNSIGNED)did <> 0 AND AssociatedCustomerFileInfo > 0 AND (UNSIGNED)record_id > 0),
    LexId = did,
    EventDate = event_date,
    Transaction = record_id    
  ),
  PersonAddress(FILTER((UNSIGNED)did <> 0 AND AssociatedCustomerFileInfo > 0 AND (UNSIGNED)record_id > 0 AND (STRING10)clean_address.prim_range <> '' AND (STRING28)clean_address.prim_name <> '' AND (UNSIGNED3)clean_address.zip <> 0),
    LexId = did
  ),  
  SsnEvent(FILTER((UNSIGNED)SSN <> 0 AND AssociatedCustomerFileInfo > 0 AND (UNSIGNED)record_id > 0),
    Transaction = record_id    
  ),
  PhoneEvent(FILTER(AssociatedCustomerFileInfo > 0 AND (UNSIGNED)record_id > 0 AND clean_phones.cell_phone != ''),
		PhoneNumber = clean_phones.cell_phone,
    Transaction = record_id    
  ),
  PhoneEvent(FILTER(AssociatedCustomerFileInfo > 0 AND (UNSIGNED)record_id > 0 AND clean_phones.phone_number != ''),
		PhoneNumber = clean_phones.phone_number,
    Transaction = record_id    
  ),
  EmailEvent(FILTER(AssociatedCustomerFileInfo > 0 AND (UNSIGNED)record_id > 0 AND email_address != ''),
		Emailof=email_address,  		
    Transaction = record_id    
  ),
  BankAccountEvent(FILTER(AssociatedCustomerFileInfo > 0 AND (UNSIGNED)record_id > 0 AND bank_account_number_1 != ''),
    Transaction = record_id    
  ),
  BankAccountEvent(FILTER(AssociatedCustomerFileInfo > 0 AND (UNSIGNED)record_id > 0 AND bank_account_number_2 != ''),
    OttoBankAccountId = OttoBankAccountId2,
    Transaction = record_id    
  ),
  DriversLicenseEvent(FILTER(AssociatedCustomerFileInfo > 0 AND (UNSIGNED)record_id > 0 AND drivers_license != ''),
    Transaction = record_id    
  ),  
  InternetProtocolEvent(FILTER(AssociatedCustomerFileInfo > 0 AND (UNSIGNED)record_id > 0 AND TRIM(ip_address) != '' AND ip_address NOT IN ['0.0.0.0','10.121.146.247','10.121.146.90','10.121.146.15','10.121.146.159','10.121.146.249','10.121.146.34','10.121.146.231','10.121.146.235','10.121.146.232']),
    Transaction = record_id    
  ),
  AddressEvent(FILTER(AssociatedCustomerFileInfo > 0 AND (UNSIGNED)record_id > 0 AND (STRING10)clean_address.prim_range <> '' AND (STRING28)clean_address.prim_name <> '' AND (UNSIGNED3)clean_address.zip <> 0),
    EventDate = event_date,
    Transaction = record_id    
  ),
  /*
  PersonEvent(FILTER((UNSIGNED)did <> 0 AND AssociatedCustomerFileInfo > 0 AND (UNSIGNED)record_id > 0),
    LexId = did,
		PrimaryRange = clean_address.prim_range,
		Predirectional = clean_address.predir,
		PrimaryName = clean_address.prim_name,
		Suffix =clean_address.addr_suffix,
		Postdirectional = clean_address.postdir,
		Postdirectional = clean_address.postdir,
		Zip = clean_address.zip,
		SecondaryRange = clean_address.sec_range,
    EventDate = event_date,
		
    IpAddress = ip_address, 
		Emailof=email_address,  		
		PhoneNumber = clean_phones.cell_phone,

    RoutingNumber = bank_routing_number_1,
    AccountNumber = bank_account_number_1,
    Transaction = record_id    
  ),
  PersonEvent(FILTER((UNSIGNED)did <> 0 AND AssociatedCustomerFileInfo > 0 AND (UNSIGNED)record_id > 0),
    LexId = did,
		PrimaryRange = clean_address.prim_range,
		Predirectional = clean_address.predir,
		PrimaryName = clean_address.prim_name,
		Suffix =clean_address.addr_suffix,
		Postdirectional = clean_address.postdir,
		Zip = clean_address.zip,
		SecondaryRange = clean_address.sec_range,
    EventDate = event_date,
		
    IpAddress = ip_address, 
		Emailof=email_address,  		
		PhoneNumber = clean_phones.phone_number,
    RoutingNumber = bank_routing_number_2,
    AccountNumber = bank_account_number_2,
		
    Transaction = record_id    
  ),
*/
  InternetProtocol(FILTER((UNSIGNED)did <> 0 AND AssociatedCustomerFileInfo > 0 AND TRIM(ip_address) != '' AND ip_address NOT IN ['0.0.0.0','10.121.146.247','10.121.146.90','10.121.146.15','10.121.146.159','10.121.146.249','10.121.146.34','10.121.146.231','10.121.146.235','10.121.146.232'])),
	
  PersonIpAddress(FILTER((UNSIGNED)did <> 0 AND AssociatedCustomerFileInfo > 0 AND TRIM(ip_address) != '' AND ip_address NOT IN ['0.0.0.0','10.121.146.247','10.121.146.90','10.121.146.15','10.121.146.159','10.121.146.249','10.121.146.34','10.121.146.231','10.121.146.235','10.121.146.232']),
    LexId = did),

  Bank(FILTER(bank_routing_number_1 != '' AND bank_account_number_1 != ''),
    RoutingNumber = bank_routing_number_1,
    FullBankname = bank1FullBankname,
    AbbreviatedBankname = bank1AbbreviatedBankname,
    FractionalRoutingnumber = bank1FractionalRoutingnumber,
    HeadofficeRoutingnumber = bank1HeadofficeRoutingnumber,
    HeadofficeBranchcodes = bank1HeadofficeBranchcodes,
    hit = bank1hit 
		),

  Bank(FILTER(bank_routing_number_2 != '' AND bank_account_number_2 != ''),
    RoutingNumber = bank_routing_number_2,
    FullBankname = bank2FullBankname,
    AbbreviatedBankname = bank2AbbreviatedBankname,
    FractionalRoutingnumber = bank2FractionalRoutingnumber,
    HeadofficeRoutingnumber = bank2HeadofficeRoutingnumber,
    HeadofficeBranchcodes = bank2HeadofficeBranchcodes,
    hit = bank2hit 
		),

  BankAccount(FILTER((UNSIGNED)did <> 0 AND TRIM(bank_account_number_1) != ''),
    RoutingNumber = bank_routing_number_1,
    AccountNumber = bank_account_number_1,
    OttoBankAccountId = OttoBankAccountId
		),

  BankAccount(FILTER((UNSIGNED)did <> 0 AND TRIM(bank_account_number_2) != ''),
    RoutingNumber = bank_routing_number_2,
    AccountNumber = bank_account_number_2,
    OttoBankAccountId = OttoBankAccountId2
		),

  DriversLicense(FILTER((UNSIGNED)did <> 0 AND TRIM(drivers_license) != ''),
    LicenseNumber = drivers_license,
    State = drivers_license_state
		),

  PersonBankAccount(FILTER((UNSIGNED)did <> 0 AND TRIM(bank_account_number_1) != ''),
    LexId = did
		),
  PersonBankAccount(FILTER((UNSIGNED)did <> 0 AND TRIM(bank_account_number_2) != ''),
    LexId = did,
		OttoBankAccountId = OttoBankAccountId2
		),

  PersonDriversLicense(FILTER((UNSIGNED)did <> 0 AND TRIM(drivers_license) != ''),
    LexId = did
		)  
        
);

USE FraudgovKEL.PersonEventTypes(FLAT, 
  Event(FILTER((UNSIGNED)record_id > 0),
  EventType = event_type)
);

USE FraudgovKEL.SharingRules(FLAT,
  Customer(FILTER((UNSIGNED)fdn_ind_type_gc_id_inclusion>0),
    CustomerId=inclusion_id,
    IndustryType=Ind_type)
);

/*
USE KELOtto.PersonCIID(FLAT,
  DriversLicense(FILTER((UNSIGNED)did <> 0 AND TRIM(dl_number) != ''),
    LicenseNumber = dl_number,
    State = dl_state
		),

  PersonDriversLicense(FILTER((UNSIGNED)did <> 0 AND TRIM(dl_number) != ''),
    LexId = did,
    LicenseNumber = dl_number
		),

  Person(FILTER((UNSIGNED)did>0),
    LexId = did,
    SubjectSsnCount = subjectssncount
    )

);
*/
/*
USE KELOtto.PersonFraudPoint(FLAT,
  Person(FILTER((UNSIGNED)did>0),
    LexId = did));
/*

USE KELOtto.PersonDeceased(FLAT,
  Person(
     LexId = did,
     DeceasedDate = dod8,
     DeceasedDateOfBirth = dob8,
     DeceasedFirst = fname,
     DeceasedMiddle = mname,
     DeceasedLast = lname,
     DeceasedSsn = ssn,
     DeceasedMatchCode = matchcode)
     );

USE KELOtto.PersonCrim(FLAT,
  Person(FILTER((UNSIGNED)did>0),
    LexId = did
    ));

USE KELOtto.PersonIPMetadata(FLAT,
  Event(FILTER((UNSIGNED)record_id > 0 and did > 0), 
    LexId = did),
  InternetProtocol(FILTER((UNSIGNED)did <> 0 AND AssociatedCustomerFileInfo > 0 AND ip_address NOT IN ['0.0.0.0','10.121.146.247','10.121.146.90','10.121.146.15','10.121.146.159','10.121.146.249','10.121.146.34','10.121.146.231','10.121.146.235','10.121.146.232']),
    IpAddress = ip_address
    )
  );
*/  
USE FraudgovKEL.AddressPersonAssociations.PersonAddressMatchStats(FLAT,
  PersonPerson);

/* LOGIC STATEMENTS - Attributes */
     
Event: => EntityContextUid := '_11' + RecordId;     
Event: => InCustomerPopulation := MAP(COUNT(SourceCustomers(rSourceCustomer=rCustomer))>0 => 1, 0);
Event: => PersonEntityContextUid := Subject.EntityContextUid;
Event: => CustomerId := rCustomer.CustomerId;
Event: => IndustryType := rCustomer.IndustryType;
Event: => DeceasedPriorToEvent := MAP(Subject.DeceasedMatch = 1 AND Subject.DeceasedDate < EventDate => 1, 0);
Event: => EventYearMonth := INTEGER(EventDate) DIV 100;
Event: => DeceasedToEventYearDiff := MAP(Subject.DeceasedMatch = 1 => YEARSBETWEEN(EventDate, Subject.DeceasedDate), 0);
Event: => AddressEntityContextUid := Location.EntityContextUid;
Event: => PersonLabel := Subject.Label;
Event: => FullAddress := Location.FullAddress;
Event: => Latitude := Location.Latitude;
Event: => Longitude := Location.Longitude;
Event: => LatLongId := STRING(Latitude) + ' ' + STRING(Longitude);
Event: => EventTypeCount := COUNT(EventTypes);

Event: => SafeFlag := MAP(InCustomerPopulation = 1 AND Confidence_that_activity_was_deceitful_id = 3 => 1, 0);
Event: => ContributorSafeFlag := MAP(InCustomerPopulation = 0 AND Confidence_that_activity_was_deceitful_id = 3 => 1, 0);

Event: => AddressIsVacant := MAP(advo_vacancyindicator = 'Y' => 1, 0);
Event: => AddressIsCmra := MAP(advo_dropindicator='C' => 1, 0);
Event: => AddressIsPoBox := MAP(advo_addresstype=9 => 1, 0);
Event: => InvalidAddress := MAP(ACECleanerErrorCode IN ['E101','E212','E213','E214','E216','E302','E412','E413','E420','E421','E422','E423','E425','E427','E428','E429','E430','E431','E439','E500','E501','E502','E503','E504','E505','E600'] => 1, 0);
Event: => AddressOutOfState := MAP(Location.State != rCustomer.JurisdictionState => 1, 0);

Event: => DemoCustomer := rCustomer.CustomerId IN ['248283691','248283681','248283671'];
Event: => Age := IF(DemoCustomer, DAYSBETWEEN(EventDate, DATEFROMPARTS(2018, 4, 7)), DAYSBETWEEN(EventDate, rCustomer.EventDateMax));
Event: => Hri03Flag := MAP(COUNT(HriList(CONTAINS(Hri,'|03|'))) > 0 => 1, 0);
Event: => Hri06Flag := MAP(COUNT(HriList(CONTAINS(Hri,'|06|'))) > 0 => 1, 0);
Event: => Hri07Flag := MAP(COUNT(HriList(CONTAINS(Hri,'|07|'))) > 0 => 1, 0);
Event: => Hri08Flag := MAP(COUNT(HriList(CONTAINS(Hri,'|08|'))) > 0 => 1, 0);
Event: => Hri11Flag := MAP(COUNT(HriList(CONTAINS(Hri,'|11|'))) > 0 => 1, 0);
Event: => Hri12Flag := MAP(COUNT(HriList(CONTAINS(Hri,'|12|'))) > 0 => 1, 0);
Event: => Hri14Flag := MAP(COUNT(HriList(CONTAINS(Hri,'|14|'))) > 0 => 1, 0);
Event: => Hri15Flag := MAP(COUNT(HriList(CONTAINS(Hri,'|15|'))) > 0 => 1, 0);
Event: => Hri19Flag := MAP(COUNT(HriList(CONTAINS(Hri,'|19|'))) > 0 => 1, 0);
Event: => Hri25Flag := MAP(COUNT(HriList(CONTAINS(Hri,'|25|'))) > 0 => 1, 0);
Event: => Hri26Flag := MAP(COUNT(HriList(CONTAINS(Hri,'|26|'))) > 0 => 1, 0);
Event: => Hri27Flag := MAP(COUNT(HriList(CONTAINS(Hri,'|27|'))) > 0 => 1, 0);
Event: => Hri28Flag := MAP(COUNT(HriList(CONTAINS(Hri,'|28|'))) > 0 => 1, 0);
Event: => Hri29Flag := MAP(COUNT(HriList(CONTAINS(Hri,'|29|'))) > 0 => 1, 0);
Event: => Hri30Flag := MAP(COUNT(HriList(CONTAINS(Hri,'|30|'))) > 0 => 1, 0);
Event: => Hri31Flag := MAP(COUNT(HriList(CONTAINS(Hri,'|31|'))) > 0 => 1, 0);
Event: => Hri37Flag := MAP(COUNT(HriList(CONTAINS(Hri,'|37|'))) > 0 => 1, 0);
Event: => Hri38Flag := MAP(COUNT(HriList(CONTAINS(Hri,'|38|'))) > 0 => 1, 0);
Event: => Hri41Flag := MAP(COUNT(HriList(CONTAINS(Hri,'|41|'))) > 0 => 1, 0);
Event: => Hri48Flag := MAP(COUNT(HriList(CONTAINS(Hri,'|48|'))) > 0 => 1, 0);
Event: => Hri50Flag := MAP(COUNT(HriList(CONTAINS(Hri,'|50|'))) > 0 => 1, 0);
Event: => Hri51Flag := MAP(COUNT(HriList(CONTAINS(Hri,'|51|'))) > 0 => 1, 0);
Event: => Hri52Flag := MAP(COUNT(HriList(CONTAINS(Hri,'|52|'))) > 0 => 1, 0);
Event: => Hri71Flag := MAP(COUNT(HriList(CONTAINS(Hri,'|71|'))) > 0 => 1, 0);
Event: => Hri83Flag := MAP(COUNT(HriList(CONTAINS(Hri,'|83|'))) > 0 => 1, 0);
Event: => Hri90Flag := MAP(COUNT(HriList(CONTAINS(Hri,'|90|'))) > 0 => 1, 0);
Event: => HriClFlag := MAP(COUNT(HriList(CONTAINS(Hri,'|CL|'))) > 0 => 1, 0);
Event: => HriCoFlag := MAP(COUNT(HriList(CONTAINS(Hri,'|CO|'))) > 0 => 1, 0);
Event: => HriDdFlag := MAP(COUNT(HriList(CONTAINS(Hri,'|DD|'))) > 0 => 1, 0);
Event: => HriDfFlag := MAP(COUNT(HriList(CONTAINS(Hri,'|DF|'))) > 0 => 1, 0);
Event: => HriIvFlag := MAP(COUNT(HriList(CONTAINS(Hri,'|IV|'))) > 0 => 1, 0);
Event: => HriItFlag := MAP(COUNT(HriList(CONTAINS(Hri,'|IT|'))) > 0 => 1, 0);
Event: => HriMiFlag := MAP(COUNT(HriList(CONTAINS(Hri,'|MI|'))) > 0 => 1, 0);
Event: => HriMoFlag := MAP(COUNT(HriList(CONTAINS(Hri,'|MO|'))) > 0 => 1, 0);
Event: => HriMsFlag := MAP(COUNT(HriList(CONTAINS(Hri,'|MS|'))) > 0 => 1, 0);
Event: => HriNfFlag := MAP(COUNT(HriList(CONTAINS(Hri,'|NF|'))) > 0 => 1, 0);
Event: => HriPaFlag := MAP(COUNT(HriList(CONTAINS(Hri,'|PA|'))) > 0 => 1, 0);
Event: => HriPoFlag := MAP(COUNT(HriList(CONTAINS(Hri,'|PO|'))) > 0 => 1, 0);
Event: => HriVaFlag := MAP(COUNT(HriList(CONTAINS(Hri,'|VA|'))) > 0 => 1, 0);

Event: => IdNas9OnlyFlag := MAP(nas_summary = '9' => 1, 0); // Address not associated with identity per public records
Event: => IdNas9Flag := MAP(nas_summary = '9' /*AND relativeaddressmatch = 0 */=> 1, 0); // Address not associated with identity per public records and not relative address
Event: => IdNap3Flag := MAP(nap_summary = '3' => 1, 0); // Phone and Lastname not associated with identity per public records

Event: => KrIdentityRisk := MAP(name_risk_code != 0 OR dob_risk_code != 0 OR identity_risk_code != 0 => 1, 0);
Event: => KrHighRiskIdentityFlag := MAP(KrIdentityRisk = 1 OR COUNT(EventTypes(EventType IN ['10000','10001','10002','10005','10006','10007','11000','11001','11002','11003','11004','11005','11006','11007','11008','11009','11010','11011','11012','11013','11014','11015','11016','11017','11018','11019','12000','12001','12002','12003','12004','12005','12006','12007','13000','13001','13002','13003','13004','13005','13006','13007','1400','14901']))>0 => 1, 0); 
Event: => KrMediumRiskIdentityFlag := MAP(COUNT(EventTypes(EventType IN ['10003','10004','14001','14902']))>0 => 1, 0);
Event: => KrLowRiskIdentityFlag := MAP(COUNT(EventTypes(EventType IN ['14900','14903']))>0 => 1, 0);

Event: => KrHighRiskAddressFlag := MAP(COUNT(EventTypes(EventType IN ['301','302','303','391']))>0 => 1, 0);
Event: => KrMediumRiskAddressFlag := MAP(COUNT(EventTypes(EventType IN ['300','392']))>0 => 1, 0);
Event: => KrLowRiskAddressFlag := MAP(COUNT(EventTypes(EventType IN ['390','393']))>0 => 1, 0);

Event: => KrHighRiskSsnFlag := MAP(COUNT(EventTypes(EventType IN ['100','191']))>0 => 1, 0);
Event: => KrMediumRiskSsnFlag := MAP(COUNT(EventTypes(EventType IN ['101','192']))>0 => 1, 0);
Event: => KrLowRiskSsnFlag := MAP(COUNT(EventTypes(EventType IN ['103','104','105','190','193']))>0 => 1, 0);

Event: => KrHighRiskPhoneFlag := MAP(COUNT(EventTypes(EventType IN ['400','402','491']))>0 => 1, 0);
Event: => KrMediumRiskPhoneFlag := MAP(COUNT(EventTypes(EventType IN ['401','492']))>0 => 1, 0);
Event: => KrLowRiskPhoneFlag := MAP(COUNT(EventTypes(EventType IN ['490','493']))>0 => 1, 0);

Event: => KrHighRiskEmailFlag := MAP(COUNT(EventTypes(EventType IN ['500','501','591']))>0 => 1, 0);
Event: => KrMediumRiskEmailFlag := MAP(COUNT(EventTypes(EventType IN ['502','592']))>0 => 1, 0);
Event: => KrLowRiskEmailFlag := MAP(COUNT(EventTypes(EventType IN ['590','593']))>0 => 1, 0);

Event: => KrHighRiskIpAddressFlag := MAP(COUNT(EventTypes(EventType IN ['601','602','605','691','1000','1091']))>0 => 1, 0);
Event: => KrMediumRiskIpAddressFlag := MAP(COUNT(EventTypes(EventType IN ['600','603','604','692','1001','1092']))>0 => 1, 0);
Event: => KrLowRiskIpAddressFlag := MAP(COUNT(EventTypes(EventType IN ['690','693','1090','1093']))>0 => 1, 0);

Event: => KrHighRiskDlFlag := MAP(COUNT(EventTypes(EventType IN ['203','291']))>0 => 1, 0);
Event: => KrMediumRiskDlFlag := MAP(COUNT(EventTypes(EventType IN ['202','204','292']))>0 => 1, 0);
Event: => KrLowRiskDlFlag := MAP(COUNT(EventTypes(EventType IN ['200','201','290','293']))>0 => 1, 0);

Event: => KrHighRiskBankFlag := MAP(COUNT(EventTypes(EventType IN ['800','891']))>0 => 1, 0);
Event: => KrMediumRiskBankFlag := MAP(COUNT(EventTypes(EventType IN ['801','802','892']))>0 => 1, 0);
Event: => KrLowRiskBankFlag := MAP(COUNT(EventTypes(EventType IN ['893','890']))>0 => 1, 0);

Event: => HasKnownRiskElement := MAP(KrHighRiskAddressFlag+KrMediumRiskAddressFlag+KrHighRiskSsnFlag+KrHighRiskPhoneFlag+KrHighRiskEmailFlag+KrHighRiskIpAddressFlag+KrHighRiskDlFlag+KrMediumRiskDlFlag+KrLowRiskDlFlag+KrHighRiskBankFlag+KrMediumRiskBankFlag+KrLowRiskBankFlag>0 => 1, 0);

Event: => KrEventAfterKnownRisk := MAP(Location.KrLastEventDate < EventDate OR 
                                       rPhone.KrLastEventDate < EventDate OR 
                                       rEmail.KrLastEventDate < EventDate OR 
                                       rInternetProtocol.KrLastEventDate < EventDate OR 
                                       rBankAccount.KrLastEventDate < EventDate OR 
                                       rDriversLicense.KrLastEventDate < EventDate => 1, 0);

Event: => KrDl200Flag := MAP(COUNT(EventTypes(EventType IN ['200']))>0 => 1, 0);
Event: => KrDl201Flag := MAP(COUNT(EventTypes(EventType IN ['201']))>0 => 1, 0);
Event: => KrDl202Flag := MAP(COUNT(EventTypes(EventType IN ['202']))>0 => 1, 0);
Event: => KrDl203Flag := MAP(COUNT(EventTypes(EventType IN ['203']))>0 => 1, 0);
Event: => KrDl204Flag := MAP(COUNT(EventTypes(EventType IN ['204']))>0 => 1, 0);
Event: => KrDl290Flag := MAP(COUNT(EventTypes(EventType IN ['290']))>0 => 1, 0);
Event: => KrDl291Flag := MAP(COUNT(EventTypes(EventType IN ['291']))>0 => 1, 0);
Event: => KrDl292Flag := MAP(COUNT(EventTypes(EventType IN ['292']))>0 => 1, 0);
Event: => KrDl293Flag := MAP(COUNT(EventTypes(EventType IN ['293']))>0 => 1, 0);

Event: => KrBnk800Flag := MAP(COUNT(EventTypes(EventType IN ['800']))>0 => 1, 0);
Event: => KrBnk801Flag := MAP(COUNT(EventTypes(EventType IN ['801']))>0 => 1, 0);
Event: => KrBnk802Flag := MAP(COUNT(EventTypes(EventType IN ['802']))>0 => 1, 0);
Event: => KrBnk890Flag := MAP(COUNT(EventTypes(EventType IN ['890']))>0 => 1, 0);
Event: => KrBnk891Flag := MAP(COUNT(EventTypes(EventType IN ['891']))>0 => 1, 0);
Event: => KrBnk892Flag := MAP(COUNT(EventTypes(EventType IN ['892']))>0 => 1, 0);
Event: => KrBnk893Flag := MAP(COUNT(EventTypes(EventType IN ['893']))>0 => 1, 0);

Event: => KrEml500Flag := MAP(COUNT(EventTypes(EventType IN ['500']))>0 => 1, 0);
Event: => KrEml501Flag := MAP(COUNT(EventTypes(EventType IN ['501']))>0 => 1, 0);
Event: => KrEml502Flag := MAP(COUNT(EventTypes(EventType IN ['502']))>0 => 1, 0);
Event: => KrEml590Flag := MAP(COUNT(EventTypes(EventType IN ['590']))>0 => 1, 0);
Event: => KrEml591Flag := MAP(COUNT(EventTypes(EventType IN ['591']))>0 => 1, 0);
Event: => KrEml592Flag := MAP(COUNT(EventTypes(EventType IN ['592']))>0 => 1, 0);
Event: => KrEml593Flag := MAP(COUNT(EventTypes(EventType IN ['593']))>0 => 1, 0);

Event: => KrSsn100Flag := MAP(COUNT(EventTypes(EventType IN ['100']))>0 => 1, 0);
Event: => KrSsn101Flag := MAP(COUNT(EventTypes(EventType IN ['101']))>0 => 1, 0);
Event: => KrSsn103Flag := MAP(COUNT(EventTypes(EventType IN ['103']))>0 => 1, 0);
Event: => KrSsn104Flag := MAP(COUNT(EventTypes(EventType IN ['104']))>0 => 1, 0);
Event: => KrSsn105Flag := MAP(COUNT(EventTypes(EventType IN ['105']))>0 => 1, 0);
Event: => KrSsn190Flag := MAP(COUNT(EventTypes(EventType IN ['190']))>0 => 1, 0);
Event: => KrSsn191Flag := MAP(COUNT(EventTypes(EventType IN ['191']))>0 => 1, 0);
Event: => KrSsn192Flag := MAP(COUNT(EventTypes(EventType IN ['192']))>0 => 1, 0);
Event: => KrSsn193Flag := MAP(COUNT(EventTypes(EventType IN ['193']))>0 => 1, 0);

Event: => KrPhn400Flag := MAP(COUNT(EventTypes(EventType IN ['400']))>0 => 1, 0);
Event: => KrPhn401Flag := MAP(COUNT(EventTypes(EventType IN ['401']))>0 => 1, 0);
Event: => KrPhn402Flag := MAP(COUNT(EventTypes(EventType IN ['402']))>0 => 1, 0);
Event: => KrPhn490Flag := MAP(COUNT(EventTypes(EventType IN ['490']))>0 => 1, 0);
Event: => KrPhn491Flag := MAP(COUNT(EventTypes(EventType IN ['491']))>0 => 1, 0);
Event: => KrPhn492Flag := MAP(COUNT(EventTypes(EventType IN ['492']))>0 => 1, 0);
Event: => KrPhn493Flag := MAP(COUNT(EventTypes(EventType IN ['493']))>0 => 1, 0);

Event: => KrAddr300Flag := MAP(COUNT(EventTypes(EventType IN ['300']))>0 => 1, 0);
Event: => KrAddr301Flag := MAP(COUNT(EventTypes(EventType IN ['301']))>0 => 1, 0);
Event: => KrAddr302Flag := MAP(COUNT(EventTypes(EventType IN ['302']))>0 => 1, 0);
Event: => KrAddr303Flag := MAP(COUNT(EventTypes(EventType IN ['303']))>0 => 1, 0);
Event: => KrAddr390Flag := MAP(COUNT(EventTypes(EventType IN ['390']))>0 => 1, 0);
Event: => KrAddr391Flag := MAP(COUNT(EventTypes(EventType IN ['391']))>0 => 1, 0);
Event: => KrAddr392Flag := MAP(COUNT(EventTypes(EventType IN ['392']))>0 => 1, 0);
Event: => KrAddr393Flag := MAP(COUNT(EventTypes(EventType IN ['393']))>0 => 1, 0);

Event: => KrIp600Flag := MAP(COUNT(EventTypes(EventType IN ['600']))>0 => 1, 0);
Event: => KrIp601Flag := MAP(COUNT(EventTypes(EventType IN ['601']))>0 => 1, 0);
Event: => KrIp602Flag := MAP(COUNT(EventTypes(EventType IN ['602']))>0 => 1, 0);
Event: => KrIp603Flag := MAP(COUNT(EventTypes(EventType IN ['603']))>0 => 1, 0);
Event: => KrIp604Flag := MAP(COUNT(EventTypes(EventType IN ['604']))>0 => 1, 0);
Event: => KrIp605Flag := MAP(COUNT(EventTypes(EventType IN ['605']))>0 => 1, 0);
Event: => KrIp690Flag := MAP(COUNT(EventTypes(EventType IN ['690']))>0 => 1, 0);
Event: => KrIp691Flag := MAP(COUNT(EventTypes(EventType IN ['691']))>0 => 1, 0);
Event: => KrIp692Flag := MAP(COUNT(EventTypes(EventType IN ['692']))>0 => 1, 0);
Event: => KrIp693Flag := MAP(COUNT(EventTypes(EventType IN ['693']))>0 => 1, 0);
Event: => KrIp1000Flag := MAP(COUNT(EventTypes(EventType IN ['1000']))>0 => 1, 0);
Event: => KrIp1001Flag := MAP(COUNT(EventTypes(EventType IN ['1001']))>0 => 1, 0);
Event: => KrIp1090Flag := MAP(COUNT(EventTypes(EventType IN ['1090']))>0 => 1, 0);
Event: => KrIp1091Flag := MAP(COUNT(EventTypes(EventType IN ['1091']))>0 => 1, 0);
Event: => KrIp1092Flag := MAP(COUNT(EventTypes(EventType IN ['1092']))>0 => 1, 0);
Event: => KrIp1093Flag := MAP(COUNT(EventTypes(EventType IN ['1093']))>0 => 1, 0);

Event: => KrId1010Flag := MAP(COUNT(EventTypes(EventType IN ['1010']))>0 => 1, 0);
Event: => KrId2025Flag := MAP(COUNT(EventTypes(EventType IN ['2025']))>0 => 1, 0);

Event: => KrId10000Flag := MAP(COUNT(EventTypes(EventType IN ['10000']))>0 => 1, 0);
Event: => KrId10001Flag := MAP(COUNT(EventTypes(EventType IN ['10001']))>0 => 1, 0);
Event: => KrId10002Flag := MAP(COUNT(EventTypes(EventType IN ['10002']))>0 => 1, 0);
Event: => KrId10003Flag := MAP(COUNT(EventTypes(EventType IN ['10003']))>0 => 1, 0);
Event: => KrId10004Flag := MAP(COUNT(EventTypes(EventType IN ['10004']))>0 => 1, 0);
Event: => KrId10005Flag := MAP(COUNT(EventTypes(EventType IN ['10005']))>0 => 1, 0);
Event: => KrId10006Flag := MAP(COUNT(EventTypes(EventType IN ['10006']))>0 => 1, 0);
Event: => KrId10007Flag := MAP(COUNT(EventTypes(EventType IN ['10007']))>0 => 1, 0);
Event: => KrId11000Flag := MAP(COUNT(EventTypes(EventType IN ['11000']))>0 => 1, 0);
Event: => KrId11001Flag := MAP(COUNT(EventTypes(EventType IN ['11001']))>0 => 1, 0);
Event: => KrId11002Flag := MAP(COUNT(EventTypes(EventType IN ['11002']))>0 => 1, 0);
Event: => KrId11003Flag := MAP(COUNT(EventTypes(EventType IN ['11003']))>0 => 1, 0);
Event: => KrId11004Flag := MAP(COUNT(EventTypes(EventType IN ['11004']))>0 => 1, 0);
Event: => KrId11005Flag := MAP(COUNT(EventTypes(EventType IN ['11005']))>0 => 1, 0);
Event: => KrId11006Flag := MAP(COUNT(EventTypes(EventType IN ['11006']))>0 => 1, 0);
Event: => KrId11007Flag := MAP(COUNT(EventTypes(EventType IN ['11007']))>0 => 1, 0);
Event: => KrId11008Flag := MAP(COUNT(EventTypes(EventType IN ['11008']))>0 => 1, 0);
Event: => KrId11009Flag := MAP(COUNT(EventTypes(EventType IN ['11009']))>0 => 1, 0);
Event: => KrId11010Flag := MAP(COUNT(EventTypes(EventType IN ['11010']))>0 => 1, 0);
Event: => KrId11011Flag := MAP(COUNT(EventTypes(EventType IN ['11011']))>0 => 1, 0);
Event: => KrId11012Flag := MAP(COUNT(EventTypes(EventType IN ['11012']))>0 => 1, 0);
Event: => KrId11013Flag := MAP(COUNT(EventTypes(EventType IN ['11013']))>0 => 1, 0);
Event: => KrId11014Flag := MAP(COUNT(EventTypes(EventType IN ['11014']))>0 => 1, 0);
Event: => KrId11015Flag := MAP(COUNT(EventTypes(EventType IN ['11015']))>0 => 1, 0);
Event: => KrId11016Flag := MAP(COUNT(EventTypes(EventType IN ['11016']))>0 => 1, 0);
Event: => KrId11017Flag := MAP(COUNT(EventTypes(EventType IN ['11017']))>0 => 1, 0);
Event: => KrId11018Flag := MAP(COUNT(EventTypes(EventType IN ['11018']))>0 => 1, 0);
Event: => KrId11019Flag := MAP(COUNT(EventTypes(EventType IN ['11019']))>0 => 1, 0);
Event: => KrId12000Flag := MAP(COUNT(EventTypes(EventType IN ['12000']))>0 => 1, 0);
Event: => KrId12001Flag := MAP(COUNT(EventTypes(EventType IN ['12001']))>0 => 1, 0);
Event: => KrId12002Flag := MAP(COUNT(EventTypes(EventType IN ['12002']))>0 => 1, 0);
Event: => KrId12003Flag := MAP(COUNT(EventTypes(EventType IN ['12003']))>0 => 1, 0);
Event: => KrId12004Flag := MAP(COUNT(EventTypes(EventType IN ['12004']))>0 => 1, 0);
Event: => KrId12006Flag := MAP(COUNT(EventTypes(EventType IN ['12006']))>0 => 1, 0);
Event: => KrId12007Flag := MAP(COUNT(EventTypes(EventType IN ['12007']))>0 => 1, 0);
Event: => KrId13000Flag := MAP(COUNT(EventTypes(EventType IN ['13000']))>0 => 1, 0);
Event: => KrId13001Flag := MAP(COUNT(EventTypes(EventType IN ['13001']))>0 => 1, 0);
Event: => KrId13002Flag := MAP(COUNT(EventTypes(EventType IN ['13002']))>0 => 1, 0);
Event: => KrId13003Flag := MAP(COUNT(EventTypes(EventType IN ['13003']))>0 => 1, 0);
Event: => KrId13005Flag := MAP(COUNT(EventTypes(EventType IN ['13005']))>0 => 1, 0);
Event: => KrId13006Flag := MAP(COUNT(EventTypes(EventType IN ['13006']))>0 => 1, 0);
Event: => KrId13007Flag := MAP(COUNT(EventTypes(EventType IN ['13007']))>0 => 1, 0);
Event: => KrId14000Flag := MAP(COUNT(EventTypes(EventType IN ['14000']))>0 => 1, 0);
Event: => KrId14001Flag := MAP(COUNT(EventTypes(EventType IN ['14001']))>0 => 1, 0);
Event: => KrId14900Flag := MAP(COUNT(EventTypes(EventType IN ['14900']))>0 => 1, 0);
Event: => KrId14901Flag := MAP(COUNT(EventTypes(EventType IN ['14901']))>0 => 1, 0);
Event: => KrId14902Flag := MAP(COUNT(EventTypes(EventType IN ['14902']))>0 => 1, 0);
Event: => KrId14903Flag := MAP(COUNT(EventTypes(EventType IN ['14903']))>0 => 1, 0);


Event: => IdAge := YEARSBETWEEN(DateOfBirth, rCustomer.EventDateMax);

Event: => SsnHri06Flag := MAP(COUNT(HriList(CONTAINS(Hri,'06'))) > 0 => 1, 0);
Event: => SsnHri26Flag := MAP(COUNT(HriList(CONTAINS(Hri,'26'))) > 0 => 1, 0);
Event: => SsnHri29Flag := MAP(COUNT(HriList(CONTAINS(Hri,'29'))) > 0 => 1, 0);
Event: => SsnHri38Flag := MAP(COUNT(HriList(CONTAINS(Hri,'38'))) > 0 => 1, 0);
Event: => SsnHri71Flag := MAP(COUNT(HriList(CONTAINS(Hri,'71'))) > 0 => 1, 0);
Event: => SsnHriItFlag := MAP(COUNT(HriList(CONTAINS(Hri,'It'))) > 0 => 1, 0);
Event: => SsnHriMiFlag := MAP(COUNT(HriList(CONTAINS(Hri,'Mi'))) > 0 => 1, 0);
Event: => AddrHri11Flag := MAP(COUNT(HriList(CONTAINS(Hri,'11'))) > 0 => 1, 0);
Event: => AddrHri12Flag := MAP(COUNT(HriList(CONTAINS(Hri,'12'))) > 0 => 1, 0);
Event: => AddrHri14Flag := MAP(COUNT(HriList(CONTAINS(Hri,'14'))) > 0 => 1, 0);
Event: => AddrHri25Flag := MAP(COUNT(HriList(CONTAINS(Hri,'25'))) > 0 => 1, 0);
Event: => AddrHri30Flag := MAP(COUNT(HriList(CONTAINS(Hri,'30'))) > 0 => 1, 0);
Event: => AddrHri50Flag := MAP(COUNT(HriList(CONTAINS(Hri,'50'))) > 0 => 1, 0);
Event: => AddrHriCoFlag := MAP(COUNT(HriList(CONTAINS(Hri,'CO'))) > 0 => 1, 0);
Event: => AddrHriMoFlag := MAP(COUNT(HriList(CONTAINS(Hri,'MO'))) > 0 => 1, 0);
Event: => AddrHriPaFlag := MAP(COUNT(HriList(CONTAINS(Hri,'PA'))) > 0 => 1, 0);
Event: => AddrHriPoFlag := MAP(COUNT(HriList(CONTAINS(Hri,'PO'))) > 0 => 1, 0);
Event: => AddrHriVaFlag := MAP(COUNT(HriList(CONTAINS(Hri,'VA'))) > 0 => 1, 0);
Event: => PhHriMiFlag := MAP(COUNT(HriList(CONTAINS(Hri,'Mi'))) > 0 => 1, 0);
Event: => PhHri07Flag := MAP(COUNT(HriList(CONTAINS(Hri,'07'))) > 0 => 1, 0);
Event: => PhHri08Flag := MAP(COUNT(HriList(CONTAINS(Hri,'08'))) > 0 => 1, 0);
Event: => PhHri15Flag := MAP(COUNT(HriList(CONTAINS(Hri,'15'))) > 0 => 1, 0);
Event: => PhHri27Flag := MAP(COUNT(HriList(CONTAINS(Hri,'27'))) > 0 => 1, 0);
Event: => PhHri31Flag := MAP(COUNT(HriList(CONTAINS(Hri,'31'))) > 0 => 1, 0);
Event: => DlHri41Flag := MAP(COUNT(HriList(CONTAINS(Hri,'41'))) > 0 => 1, 0);
Event: => DlHriDfFlag := MAP(COUNT(HriList(CONTAINS(Hri,'DF'))) > 0 => 1, 0);

Event: => IpNotUs := MAP(UPCASE(TRIM(edgecountry)) IN ['USA','','0'] => 0, 1); // did the reverse because KEL was throwing an error.
Event: => IpVpn := MAP(UPCASE(proxydescription) = 'VPN' => 1, 0);

Event: => IpTor := MAP(UPCASE(proxydescription) IN ['TOR EXIT','TOR RELAY'] /*OR UPCASE(proxytype) = 'ANONYMOUS'*/ => 1, 0);
Event: => IpHighRiskCity := MAP(rCustomer.JurisdictionState != 'FL' AND UPCASE(edgecity) IN ['MIAMI'] => 1, 0);
Event: => IpHosted := MAP(UPCASE(proxytype) = 'HOSTING' AND NOT UPCASE(proxydescription) IN ['CLOUD-SECURITY','CLOUD'] => 1, 0);

/* ASSOCIATION LOGIC STATEMENTS */

//PersonPerson: => DtFirstSeen := MIN(EventDates, EventDate);
//PersonPerson: => DtLastSeen := MAX(EventDates, EventDate);
PersonAddress: => DtFirstSeen := MIN(EventDates, EventDate);
PersonAddress: => DtLastSeen := MAX(EventDates, EventDate);
PersonSSN: => DtFirstSeen := MIN(EventDates, EventDate);
PersonSSN: => DtLastSeen := MAX(EventDates, EventDate);
PersonIpAddress: => DtFirstSeen := MIN(EventDates, EventDate);
PersonIpAddress: => DtLastSeen := MAX(EventDates, EventDate);
PersonPhone: => DtFirstSeen := MIN(EventDates, EventDate);
PersonPhone: => DtLastSeen := MAX(EventDates, EventDate);
PersonBankAccount: => DtFirstSeen := MIN(EventDates, EventDate);
PersonBankAccount: => DtLastSeen := MAX(EventDates, EventDate);
PersonDriversLicense: => DtFirstSeen := MIN(EventDates, EventDate);
PersonDriversLicense: => DtLastSeen := MAX(EventDates, EventDate);
PersonEmail: => DtFirstSeen := MIN(EventDates, EventDate);
PersonEmail: => DtLastSeen := MAX(EventDates, EventDate);

/* PERSON ENTITY */

Person: => CustomerId := rCustomer.CustomerId;
Person: => IndustryType := rCustomer.IndustryType;
Person: => SourceCustomerCount := COUNT(SourceCustomers);
Person: => EntityContextUid := '_01' + LexId;
Person: => EntityType := 1;
Person: => AgeAtLastEvent := MAX(PersonEvent, Transaction.IdAge);
Person: => DtFirstSeen := MIN(PersonEvent.Transaction, EventDate);
Person: => DtLastSeen := MAX(PersonEvent.Transaction, EventDate);

Person: => NoLexId := MAP(LexId > 900000000000 => 1, 0);
Person: => DateOfBirth := MAX(ReportedDateOfBirth, DateOfBirth);
Person: => Age := YEARSBETWEEN(DateOfBirth, rCustomer.EventDateMax);

Person: => IsMinor := MAP(Age < 18 => 1, 0);

Person: => NoLexIdGt22 := MAP(NoLexId = 1 AND Age > 22 => 1, 0);
Person: => EventCount := COUNT(PersonEvent{Transaction});
Person: => Deceased := MAP(ISVALIDDATE(DeceasedDate) => 1, 0);
Person: => DeceasedNameMatch := MAP(COUNT(FullName(FirstName=DeceasedFirst AND LastName=DeceasedLast))>0 => 1, 0);
Person: => DeceasedDobMatch := MAP(COUNT(ReportedDateOfBirth(DeceasedDateOfBirth=DateOfBirth))>0 => 1, 0);
Person: => DeceasedMatch := MAP(Deceased=1 AND DeceasedNameMatch=1 AND DeceasedDobMatch=1 => 1, 0);
Person: => DeceasedMatchDescription := MAP(DeceasedMatch=1 => 'Full Matched Deceased Identity', '');
Person: => DeceasedMatchDateOfDeath := MAP(DeceasedMatch=1 => STRING(DeceasedDate), '');


Person: => CurrentlyIncarceratedFlag := MAP(name_ssn_dob_match = 1 AND curr_incar_flag='Y' => 1, 0);
Person: => FraudOffenseCount := COUNT(Offenses(CONTAINS(off_cat_list,'FRAUD')));
Person: => FraudOffensesFlag := MAP(name_ssn_dob_match = 1 AND FraudOffenseCount > 0 => 1, 0);
Person: => AssociatedWithIncarceratedFlag := MAP(name_ssn_dob_match = 0 AND curr_incar_flag='Y' => 1, 0);
Person: => AssociatedWithFraudOffensesFlag := MAP(name_ssn_dob_match = 0 AND FraudOffenseCount > 0 => 1, 0);

Person: => AddressIsCmra30Count := COUNT(PersonEvent.Transaction(AddressIsCmra=1 AND Age < 30));
Person: => AddressIsCmra30Flag := MAP(AddressIsCmra30Count>0 => 1, 0);
Person: => AddressInvalid30Count := COUNT(PersonEvent.Transaction((InvalidAddress=1 OR Hri11Flag=1) AND Age < 30));
Person: => AddressInvalid30Flag := MAP(AddressInvalid30Count>0 => 1, 0);
Person: => ValidationAddrProblems30Count := COUNT(PersonEvent.Transaction(v2_validationaddrproblems=1 AND Age < 30));
Person: => ValidationAddrProblems30Flag := MAP(ValidationAddrProblems30Count>0 => 1, 0);
Person: => AddressIsOutOfState30Count := COUNT(PersonEvent.Transaction(AddressOutOfState=1 AND Age < 30));
Person: => AddressIsOfState30Flag := MAP(AddressIsOutOfState30Count>0 => 1, 0);
 
// NOTE: This is "best" from the contributed not Best Best.

Person: => BestFullName := ONLY(TOPN(FullName(TRIM(FirstName) != '' AND TRIM(LastName) != ''), 1, -EventDate));
Person: => Label := TRIM(BestFullName.FirstName) + ' ' + TRIM(BestFullName.LastName);
Person: => BestFirstName := BestFullName.FirstName;
Person: => BestMiddleName := BestFullName.MiddleName;
Person: => BestLastName := BestFullName.LastName;
Person: => BestNameSuffix := BestFullName.NameSuffix;

// Joe fill this in
//Person: => LastAddress
//Person: => LastSSN
Person: => BestReportedSsn := ONLY(TOPN(ReportedSsn(TRIM(Ssn) != ''), 1, -EventDate){Ssn});
Person: => BestSsn := BestReportedSsn.Ssn;
Person: => BestReportedEmail := ONLY(TOPN(ReportedEmailAddress(TRIM(EmailAddress) != ''), 1, -EventDate){EmailAddress});
Person: => BestEmail := BestReportedEmail.EmailAddress;
Person: => BestReportedAddress := ONLY(TOPN(Address((TRIM(PrimaryName) != '' AND TRIM(PostalCity) != '' AND TRIM(State) != '') OR TRIM(Zip) != ''), 1, -EventDate));
Person: => BestStreetAddress := CleanSpaces(TRIM(TRIM(BestReportedAddress.PrimaryRange) + ' ' + TRIM(TRIM(BestReportedAddress.Predirectional) + ' ' + TRIM(TRIM(BestReportedAddress.PrimaryName) + ' ' + TRIM(TRIM(BestReportedAddress.Suffix) + ' ' + TRIM(TRIM(BestReportedAddress.Postdirectional) + ' ' + TRIM(TRIM(BestReportedAddress.UnitDesignation) + ' ' + TRIM(TRIM(BestReportedAddress.SecondaryRange)))))))));
Person: => BestCity := BestReportedAddress.PostalCity;
Person: => BestState := BestReportedAddress.State;
Person: => BestZip := BestReportedAddress.Zip;
//    Address {EventDate, PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, UnitDesignation, SecondaryRange, PostalCity, VanityCity, State, Zip, Zip4}				


Person: => InCustomerPopulation := MAP(COUNT(SourceCustomers(rSourceCustomer=rCustomer))>0 => 1, 0);
Person: => OtherCustomerPersonCustomerCount := COUNT(SourceCustomers(rSourceCustomer != rCustomer));

Person: => IdSsnIdentityCountMax := MAX(PersonSSN.Social, IdentityCount); 
                                                   
Person: => MaxDeceasedToEventDiff := MAX(PersonEvent.Transaction(InCustomerPopulation=1), DeceasedToEventYearDiff);
Person: => AllMaxDeceasedToEventDiff := MAX(PersonEvent.Transaction, DeceasedToEventYearDiff);

Person: => DeceasedEventCount := SUM(PersonEvent.Transaction(InCustomerPopulation=1), DeceasedPriorToEvent);
Person: => DeceasedEventPercent := AVE(PersonEvent.Transaction(InCustomerPopulation=1), DeceasedPriorToEvent);

Person: => AllDeceasedEventCount := SUM(PersonEvent.Transaction, DeceasedPriorToEvent);
Person: => AllDeceasedEventPercent := AVE(PersonEvent.Transaction, DeceasedPriorToEvent);

Person: => DeathPriorToAllEvents := MAP(DeceasedEventPercent = 1 => 1, 0);
Person: => AllDeathPriorToAllEvents := MAP(AllDeceasedEventPercent = 1 => 1, 0);
Person: => HighRiskDeathPriorToAllEvents := MAP(DeathPriorToAllEvents = 1 AND MaxDeceasedToEventDiff < -4 => 1, 0);
Person: => AllHighRiskDeathPriorToAllEvents := MAP(AllDeathPriorToAllEvents = 1 AND AllMaxDeceasedToEventDiff < -4 => 1, 0);
Person: => AddressCount := COUNT(PersonAddress);


Person: => Score := (LexId % 10) * 10;

// Second Order Features

Person: => Hri03Flag := MAP(COUNT(PersonEvent.Transaction(Hri03Flag=1)) > 0 => 1, 0);
Person: => Hri06Flag := MAP(COUNT(PersonEvent.Transaction(Hri06Flag=1)) > 0 => 1, 0);
Person: => Hri07Flag := MAP(COUNT(PersonEvent.Transaction(Hri07Flag=1)) > 0 => 1, 0);
Person: => Hri08Flag := MAP(COUNT(PersonEvent.Transaction(Hri08Flag=1)) > 0 => 1, 0);
Person: => Hri11Flag := MAP(COUNT(PersonEvent.Transaction(Hri11Flag=1)) > 0 => 1, 0);
Person: => Hri12Flag := MAP(COUNT(PersonEvent.Transaction(Hri12Flag=1)) > 0 => 1, 0);
Person: => Hri14Flag := MAP(COUNT(PersonEvent.Transaction(Hri14Flag=1)) > 0 => 1, 0);
Person: => Hri14Active30Flag := MAP(COUNT(PersonEvent.Transaction(Hri14Flag=1 AND Age < 30)) > 0 => 1, 0);
Person: => Hri15Flag := MAP(COUNT(PersonEvent.Transaction(Hri15Flag=1)) > 0 => 1, 0);
Person: => Hri19Flag := MAP(COUNT(PersonEvent.Transaction(Hri19Flag=1)) > 0 => 1, 0);
Person: => Hri25Flag := MAP(COUNT(PersonEvent.Transaction(Hri25Flag=1)) > 0 => 1, 0);
Person: => Hri26Flag := MAP(COUNT(PersonEvent.Transaction(Hri26Flag=1)) > 0 => 1, 0);
Person: => Hri27Flag := MAP(COUNT(PersonEvent.Transaction(Hri27Flag=1)) > 0 => 1, 0);
Person: => Hri28Flag := MAP(COUNT(PersonEvent.Transaction(Hri28Flag=1)) > 0 => 1, 0);
Person: => Hri29Flag := MAP(COUNT(PersonEvent.Transaction(Hri29Flag=1)) > 0 => 1, 0);
Person: => Hri30Flag := MAP(COUNT(PersonEvent.Transaction(Hri30Flag=1)) > 0 => 1, 0);
Person: => Hri31Flag := MAP(COUNT(PersonEvent.Transaction(Hri31Flag=1)) > 0 => 1, 0);
Person: => Hri37Flag := MAP(COUNT(PersonEvent.Transaction(Hri37Flag=1)) > 0 => 1, 0);
Person: => Hri38Flag := MAP(COUNT(PersonEvent.Transaction(Hri38Flag=1)) > 0 => 1, 0);
Person: => Hri41Flag := MAP(COUNT(PersonEvent.Transaction(Hri41Flag=1)) > 0 => 1, 0);
Person: => Hri48Flag := MAP(COUNT(PersonEvent.Transaction(Hri48Flag=1)) > 0 => 1, 0);
Person: => Hri50Flag := MAP(COUNT(PersonEvent.Transaction(Hri50Flag=1)) > 0 => 1, 0);
Person: => Hri50Active30Flag := MAP(COUNT(PersonEvent.Transaction(Hri50Flag=1 AND Age < 30)) > 0 => 1, 0);
Person: => Hri51Flag := MAP(COUNT(PersonEvent.Transaction(Hri51Flag=1)) > 0 => 1, 0);
Person: => Hri52Flag := MAP(COUNT(PersonEvent.Transaction(Hri52Flag=1)) > 0 => 1, 0);
Person: => Hri71Flag := MAP(COUNT(PersonEvent.Transaction(Hri71Flag=1)) > 0 => 1, 0);
Person: => Hri83Flag := MAP(COUNT(PersonEvent.Transaction(Hri83Flag=1)) > 0 => 1, 0);
Person: => Hri90Flag := MAP(COUNT(PersonEvent.Transaction(Hri90Flag=1)) > 0 => 1, 0);
Person: => HriClFlag := MAP(COUNT(PersonEvent.Transaction(HriClFlag=1)) > 0 => 1, 0);
Person: => HriCoFlag := MAP(COUNT(PersonEvent.Transaction(HriCoFlag=1)) > 0 => 1, 0);
Person: => HriDdFlag := MAP(COUNT(PersonEvent.Transaction(HriDdFlag=1)) > 0 => 1, 0);
Person: => HriDfFlag := MAP(COUNT(PersonEvent.Transaction(HriDfFlag=1)) > 0 => 1, 0);
Person: => HriIvFlag := MAP(COUNT(PersonEvent.Transaction(HriIvFlag=1)) > 0 => 1, 0);
Person: => HriItFlag := MAP(COUNT(PersonEvent.Transaction(HriItFlag=1)) > 0 => 1, 0);
Person: => HriMiFlag := MAP(COUNT(PersonEvent.Transaction(HriMiFlag=1)) > 0 => 1, 0);
Person: => HriMoFlag := MAP(COUNT(PersonEvent.Transaction(HriMoFlag=1)) > 0 => 1, 0);
Person: => HriMsFlag := MAP(COUNT(PersonEvent.Transaction(HriMsFlag=1)) > 0 => 1, 0);
Person: => HriNfFlag := MAP(COUNT(PersonEvent.Transaction(HriNfFlag=1)) > 0 => 1, 0);
Person: => HriPaFlag := MAP(COUNT(PersonEvent.Transaction(HriPaFlag=1)) > 0 => 1, 0);
Person: => HriPoFlag := MAP(COUNT(PersonEvent.Transaction(HriPoFlag=1)) > 0 => 1, 0);
Person: => HriVaFlag := MAP(COUNT(PersonEvent.Transaction(HriVaFlag=1)) > 0 => 1, 0);

Person: => Nas9Flag := MAP(COUNT(PersonEvent.Transaction(IdNas9Flag=1)) > 0 => 1, 0); // SSN and Last Name not associated with identity per public records
Person: => Nap3Flag := MAP(nap_summary = '3' => 1, 0); // Phone and Lastname not associated with identity per public records

Person: => IpNotUs := MAP(COUNT(PersonEvent.Transaction(IpNotUs=1))>0 => 1, 0); 
Person: => IpVpn := MAP(COUNT(PersonEvent.Transaction(IpVpn=1))>0 => 1, 0); 
Person: => IpHighRiskCity := MAP(COUNT(PersonEvent.Transaction(IpHighRiskCity=1))>0 => 1, 0); 
Person: => IpHosted := MAP(COUNT(PersonEvent.Transaction(IpHosted=1))>0 => 1, 0);
Person: => IpTor := MAP(COUNT(PersonEvent.Transaction(IpTor=1))>0 => 1, 0); 


// Known Risk \ Safe
Person: => KrHighRiskFlag := MAP(COUNT(PersonEvent.Transaction(KrHighRiskIdentityFlag=1)) > 0 => 1, 0);
Person: => KrMediumRiskFlag := MAP(COUNT(PersonEvent.Transaction(KrMediumRiskIdentityFlag=1))>0 => 1, 0);
Person: => KrLowRiskFlag := MAP(COUNT(PersonEvent.Transaction(KrLowRiskIdentityFlag=1))>0 => 1, 0);
Person: => KrHighRiskRouting := MAP(COUNT(PersonBankAccount.Account(HighRiskRouting=1))>0 => 1, 0);

Person: => LastEventDate := MAX(PersonEvent.Transaction, EventDate); // last transaction date
Person: => KrLastEventDate := MAX(PersonEvent.Transaction(KrHighRiskIdentityFlag=1 OR KrMediumRiskIdentityFlag=1 OR KrLowRiskIdentityFlag=1), EventDate); // last known risk IDENTITY transaction date
Person: => KrLastElementEventDate := MAX(PersonEvent(Transaction.HasKnownRiskElement=1), Transaction.EventDate); // last transaction date that involved a known risk ELEMENT
Person: => KrHasKnownRiskElementFlag := MAX(PersonEvent, Transaction.HasKnownRiskElement);

Person: => KrEventAfterLastKnownRiskCount := COUNT(PersonEvent(Transaction.EventDate > Person.KrLastEventDate)); // identity transaction count after the last known risk transaction
Person: => KrEventAfterLastKnownRiskFlag := MAP(KrEventAfterLastKnownRiskCount>0=>1, 0); // flags if there are any transactions after the last known risk transaction.

Person: => KrHasKnownRiskElementCount := COUNT(PersonEvent(Transaction.HasKnownRiskElement=1)); // Identity transaction count where an element was flagged as known risk element.
Person: => KrEventAfterKnownRiskCount := COUNT(PersonEvent(Transaction.KrEventAfterKnownRisk=1)); // count of transactions involving a known risk element after the date of the last known risk transaction
Person: => KrEventAfterKnownRiskFlag := MAP((KrHighRiskFlag = 1 OR KrMediumRiskFlag = 1) AND KrEventAfterKnownRiskCount > 0 => 1, 0); // for a known risk identity the count of transactions involving a known risk element after the date of the last known risk transaction
Person: => KrNotKnownRiskHasKnownRiskElementFlag := MAP((KrHighRiskFlag = 0 OR KrMediumRiskFlag = 0) AND KrEventAfterKnownRiskFlag = 1 =>1,0); // identity is not known risk but is connected to known risk elements

Person: => KrId1010Flag := MAP(COUNT(PersonEvent.Transaction(KrId1010Flag=1))>0 => 1, 0);
Person: => KrId2025Flag := MAP(COUNT(PersonEvent.Transaction(KrId2025Flag=1))>0 => 1, 0);
Person: => KrId10000Flag := MAP(COUNT(PersonEvent.Transaction(KrId10000Flag=1))>0 => 1, 0);
Person: => KrId10001Flag := MAP(COUNT(PersonEvent.Transaction(KrId10001Flag=1))>0 => 1, 0);
Person: => KrId10002Flag := MAP(COUNT(PersonEvent.Transaction(KrId10002Flag=1))>0 => 1, 0);
Person: => KrId10003Flag := MAP(COUNT(PersonEvent.Transaction(KrId10003Flag=1))>0 => 1, 0);
Person: => KrId10004Flag := MAP(COUNT(PersonEvent.Transaction(KrId10004Flag=1))>0 => 1, 0);
Person: => KrId10005Flag := MAP(COUNT(PersonEvent.Transaction(KrId10005Flag=1))>0 => 1, 0);
Person: => KrId10006Flag := MAP(COUNT(PersonEvent.Transaction(KrId10006Flag=1))>0 => 1, 0);
Person: => KrId10007Flag := MAP(COUNT(PersonEvent.Transaction(KrId10007Flag=1))>0 => 1, 0);
Person: => KrId11000Flag := MAP(COUNT(PersonEvent.Transaction(KrId11000Flag=1))>0 => 1, 0);
Person: => KrId11001Flag := MAP(COUNT(PersonEvent.Transaction(KrId11001Flag=1))>0 => 1, 0);
Person: => KrId11002Flag := MAP(COUNT(PersonEvent.Transaction(KrId11002Flag=1))>0 => 1, 0);
Person: => KrId11003Flag := MAP(COUNT(PersonEvent.Transaction(KrId11003Flag=1))>0 => 1, 0);
Person: => KrId11004Flag := MAP(COUNT(PersonEvent.Transaction(KrId11004Flag=1))>0 => 1, 0);
Person: => KrId11005Flag := MAP(COUNT(PersonEvent.Transaction(KrId11005Flag=1))>0 => 1, 0);
Person: => KrId11006Flag := MAP(COUNT(PersonEvent.Transaction(KrId11006Flag=1))>0 => 1, 0);
Person: => KrId11007Flag := MAP(COUNT(PersonEvent.Transaction(KrId11007Flag=1))>0 => 1, 0);
Person: => KrId11008Flag := MAP(COUNT(PersonEvent.Transaction(KrId11008Flag=1))>0 => 1, 0);
Person: => KrId11009Flag := MAP(COUNT(PersonEvent.Transaction(KrId11009Flag=1))>0 => 1, 0);
Person: => KrId11010Flag := MAP(COUNT(PersonEvent.Transaction(KrId11010Flag=1))>0 => 1, 0);
Person: => KrId11011Flag := MAP(COUNT(PersonEvent.Transaction(KrId11011Flag=1))>0 => 1, 0);
Person: => KrId11012Flag := MAP(COUNT(PersonEvent.Transaction(KrId11012Flag=1))>0 => 1, 0);
Person: => KrId11013Flag := MAP(COUNT(PersonEvent.Transaction(KrId11013Flag=1))>0 => 1, 0);
Person: => KrId11014Flag := MAP(COUNT(PersonEvent.Transaction(KrId11014Flag=1))>0 => 1, 0);
Person: => KrId11015Flag := MAP(COUNT(PersonEvent.Transaction(KrId11015Flag=1))>0 => 1, 0);
Person: => KrId11016Flag := MAP(COUNT(PersonEvent.Transaction(KrId11016Flag=1))>0 => 1, 0);
Person: => KrId11017Flag := MAP(COUNT(PersonEvent.Transaction(KrId11017Flag=1))>0 => 1, 0);
Person: => KrId11018Flag := MAP(COUNT(PersonEvent.Transaction(KrId11018Flag=1))>0 => 1, 0);
Person: => KrId11019Flag := MAP(COUNT(PersonEvent.Transaction(KrId11019Flag=1))>0 => 1, 0);
Person: => KrId12000Flag := MAP(COUNT(PersonEvent.Transaction(KrId12000Flag=1))>0 => 1, 0);
Person: => KrId12001Flag := MAP(COUNT(PersonEvent.Transaction(KrId12001Flag=1))>0 => 1, 0);
Person: => KrId12002Flag := MAP(COUNT(PersonEvent.Transaction(KrId12002Flag=1))>0 => 1, 0);
Person: => KrId12003Flag := MAP(COUNT(PersonEvent.Transaction(KrId12003Flag=1))>0 => 1, 0);
Person: => KrId12004Flag := MAP(COUNT(PersonEvent.Transaction(KrId12004Flag=1))>0 => 1, 0);
Person: => KrId12006Flag := MAP(COUNT(PersonEvent.Transaction(KrId12006Flag=1))>0 => 1, 0);
Person: => KrId12007Flag := MAP(COUNT(PersonEvent.Transaction(KrId12007Flag=1))>0 => 1, 0);
Person: => KrId13000Flag := MAP(COUNT(PersonEvent.Transaction(KrId13000Flag=1))>0 => 1, 0);
Person: => KrId13001Flag := MAP(COUNT(PersonEvent.Transaction(KrId13001Flag=1))>0 => 1, 0);
Person: => KrId13002Flag := MAP(COUNT(PersonEvent.Transaction(KrId13002Flag=1))>0 => 1, 0);
Person: => KrId13003Flag := MAP(COUNT(PersonEvent.Transaction(KrId13003Flag=1))>0 => 1, 0);
Person: => KrId13005Flag := MAP(COUNT(PersonEvent.Transaction(KrId13005Flag=1))>0 => 1, 0);
Person: => KrId13006Flag := MAP(COUNT(PersonEvent.Transaction(KrId13006Flag=1))>0 => 1, 0);
Person: => KrId13007Flag := MAP(COUNT(PersonEvent.Transaction(KrId13007Flag=1))>0 => 1, 0);
Person: => KrId14000Flag := MAP(COUNT(PersonEvent.Transaction(KrId14000Flag=1))>0 => 1, 0);
Person: => KrId14001Flag := MAP(COUNT(PersonEvent.Transaction(KrId14001Flag=1))>0 => 1, 0);
Person: => KrId14900Flag := MAP(COUNT(PersonEvent.Transaction(KrId14900Flag=1))>0 => 1, 0);
Person: => KrId14901Flag := MAP(COUNT(PersonEvent.Transaction(KrId14901Flag=1))>0 => 1, 0);
Person: => KrId14902Flag := MAP(COUNT(PersonEvent.Transaction(KrId14902Flag=1))>0 => 1, 0);
Person: => KrId14903Flag := MAP(COUNT(PersonEvent.Transaction(KrId14903Flag=1))>0 => 1, 0);

Person: => SafeFlagLastDate := MAX(PersonEvent.Transaction(SafeFlag=1), EventDate); 
Person: => SafeFlagTransactionCount := COUNT(PersonEvent.Transaction(SafeFlag=1));
Person: => SafeFlag := MAP(SafeFlagTransactionCount>0 AND SafeFlagLastDate > KrLastEventDate => 1, 0);

Person: => ContributorSafeFlag := MAP(COUNT(PersonEvent.Transaction(ContributorSafeFlag=1))>0 => 1, 0);

// Velocity

Person: => VlEvent1AllCount := COUNT(PersonEvent.Transaction(Age<2));
Person: => VlEvent7AllCount := COUNT(PersonEvent.Transaction(Age<8));
Person: => VlEvent30AllDayCount := COUNT(PersonEvent.Transaction(Age<31));
Person: => VlEvent365AllDayCount := COUNT(PersonEvent.Transaction(Age<366));

Person: => VlEvent7AllActiveFlag := MAP(VlEvent7AllCount > 0 => 1, 0);
Person: => VlEvent30AllActiveFlag := MAP(VlEvent30AllDayCount > 0 => 1, 0);

Person: => VlEvent1Count := COUNT(PersonEvent.Transaction(InCustomerPopulation = 1 AND Age<2));
Person: => VlEvent7Count := COUNT(PersonEvent.Transaction(InCustomerPopulation = 1 AND Age<8));
Person: => VlEvent30Count := COUNT(PersonEvent.Transaction(InCustomerPopulation = 1 AND Age<31));
Person: => VlEvent365Count := COUNT(PersonEvent.Transaction(InCustomerPopulation = 1 AND Age<366));

Person: => VlEvent7ActiveFlag := MAP(VlEvent7Count > 0 => 1, 0);
Person: => VlEvent30ActiveFlag := MAP(VlEvent30Count > 0 => 1, 0);

// Cluster Attributes 
  // Adjacent Safe indicators
Person: => ClIpSafeCount := COUNT(PersonPerson.ToPerson.PersonIpAddress(Ip.SafeFlag=1){Ip});
Person: => ClSsnSafeCount := COUNT(PersonPerson.ToPerson.PersonSSN(Social.SafeFlag=1){Social});
Person: => ClPhoneSafeCount := COUNT(PersonPerson.ToPerson.PersonPhone(PhoneNumber.SafeFlag=1){PhoneNumber});
Person: => ClEmailSafeCount := COUNT(PersonPerson.ToPerson.PersonEmail(Emailof.SafeFlag=1){Emailof});
Person: => ClBankAccountSafeCount := COUNT(PersonPerson.ToPerson.PersonBankAccount(Account.SafeFlag=1){Account});
Person: => ClDriversLicenseSafeCount := COUNT(PersonPerson.ToPerson.PersonDriversLicense(License.SafeFlag=1){License});
Person: => ClAddressSafeCount := COUNT(PersonPerson.ToPerson.PersonAddress(Location.SafeFlag=1){Location});
Person: => ClAdjacentSafeElementCount := ClIpSafeCount + ClSsnSafeCount + ClPhoneSafeCount + ClEmailSafeCount + ClBankAccountSafeCount + ClDriversLicenseSafeCount + ClAddressSafeCount;
Person: => ClAdjacentSafeFlag := MAP(ClAdjacentSafeElementCount > 0 => 1, 0);
Person: => ClAdjacentNoSafeFlag := MAP(ClAdjacentSafeElementCount = 0 => 1, 0);

  // Adjacent high volume 
Person: => ClIpHighIdentityCount := COUNT(PersonPerson.ToPerson.PersonIpAddress(Ip.IdentityCount>10){Ip});
Person: => ClSsnHighIdentityCount := COUNT(PersonPerson.ToPerson.PersonSSN(Social.IdentityCount>10){Social});
Person: => ClPhoneHighIdentityCount := COUNT(PersonPerson.ToPerson.PersonPhone(PhoneNumber.IdentityCount>10){PhoneNumber});
Person: => ClEmailHighIdentityCount := COUNT(PersonPerson.ToPerson.PersonEmail(Emailof.IdentityCount>10){Emailof});
Person: => ClBankAccountHighIdentityCount := COUNT(PersonPerson.ToPerson.PersonBankAccount(Account.IdentityCount>10){Account});
Person: => ClDriversLicenseHighIdentityCount := COUNT(PersonPerson.ToPerson.PersonDriversLicense(License.IdentityCount>10){License});
Person: => ClAddressHighIdentityCount := COUNT(PersonPerson.ToPerson.PersonAddress(Location.IdentityCount>10){Location});
	
	
	
Person: => ClHighRiskRoutingCount := SUM(PersonPerson.ToPerson, KrHighRiskRouting); // Count of Identities with high risk bank account routing.

Person: => ClNoLexIdGt22Count := SUM(PersonPerson.ToPerson, NoLexIdGt22); // Count within cluster of identities with no lexid and older than 22.
Person: => ClDeathPriorToAllEventsIdentityCount := SUM(PersonPerson.ToPerson, DeathPriorToAllEvents); // Count within cluster of identities that were deceased prior to all input. 
Person: => ClHighRiskDeathPriorToAllEventsIdentityCount := SUM(PersonPerson.ToPerson, HighRiskDeathPriorToAllEvents);  // Count within cluster of death 5+ years prior to all input
Person: => ClEventCount := COUNT(PersonPerson.ToPerson.PersonEvent{Transaction}); //  // Count within cluster of all events/transactions
Person: => ClElementCount := 0; 
Person: => ClIdentityCount := COUNT(PersonPerson.ToPerson.PersonPerson.ToPerson{LexId});  // Count within cluster of Identities within 1 degree (temporarily putting 2nd degree for consistency in the UI) 20180807
Person: => ClIdentityCountDecile := ClIdentityCount$^Decile; 
Person: => ClIdentityCountPercentile := ClIdentityCount$^Percentile; 

Person: => ClFullIdentityCount := COUNT(PersonPerson.ToPerson.PersonPerson.ToPerson{LexId});  // Count within cluster of within 2 degrees. Person -> Person -> Person
Person: => ClNas9IdentityCount := SUM(PersonPerson.ToPerson, Nas9Flag);  // Count within cluster with SSN and Last Name not associated with identity per public records
Person: => ClNap3IdentityCount := SUM(PersonPerson.ToPerson, Nap3Flag);  // Count within cluster of Identities with Phone and Lastname not associated with identity per public records
Person: => ClHighKrIdentityCount := COUNT(PersonPerson.ToPerson(KrHighRiskFlag=1){LexId});
Person: => ClActive7IdentityCount := COUNT(PersonPerson.ToPerson(VlEvent7ActiveFlag=1));  // Count within cluster of active identities in the last 7 days.
Person: => ClActive30IdentityCount := COUNT(PersonPerson.ToPerson(VlEvent30ActiveFlag=1));  // Count within cluster of active identities in the last 30 days.

Person: => ClAddressCount := COUNT(PersonAddress.Subject(InCustomerPopulation=1));  // Count within cluster of distict addresses within customer population

Person: => ClEmailCount := COUNT(PersonPerson.ToPerson.PersonEmail{Emailof});
Person: => ClHighRiskEmailCount := COUNT(PersonPerson.ToPerson.PersonEmail(Emailof.isdisposableemail=1 OR Emailof.NotSafeLastDomainGt2 = 1){Emailof});
Person: => ClHighRiskEmailTop10 := MAP(ClHighRiskEmailCount > ClHighRiskEmailCount$GROUP{ClIdentityCountPercentile}:Percentile(70) => 1, 0);

Person: => ClIdentityEventAvg := CleanSpaces(REALFORMAT(ClEventCount / ClIdentityCount, 6, 2)); // Average number of events/transactions per identity within cluster.

Person: => ClHighRiskPattern1Flag := MAP(ClIdentityCount > 9 => 1, 0); // High Identity Count Cluster
Person: => ClHighRiskPattern2Flag := MAP(ClNas9IdentityCount > 10 AND ClNap3IdentityCount > 0 => 1, 0); // Pattern of Phone and Addresses not being associated with identities. 
Person: => ClHighRiskPattern3Flag := MAP(ClHighRiskDeathPriorToAllEventsIdentityCount >  0 => 1, 0); // Pattern of associated deceased identities within the cluster.
Person: => ClHighRiskPattern4Flag := MAP(ClIpHighRiskIdentityCount > 4 => 1, 0); // Velocity
Person: => ClHighRiskPattern5Flag := MAP(ClHighKrIdentityCount > 4 => 1, 0); //Known Risk

Person: => ClPRIdentityMatchCount := COUNT(PersonPerson(VerifiedPRHit=1).ToPerson.PersonPerson(VerifiedPRHit=1).ToPerson{LexId}); // Count within cluster of Lexid Associates that match PR associates.    
Person: => ClPRIdentityMatchPercent := ClPRIdentityMatchCount / ClIdentityCount; // Percent within cluster of Lexid Associates that match PR associates.    
Person: => ClPRIdentityNoMatch := MAP(ClPRIdentityMatchCount=0 => 1, 0); // There are no relationships that match public records.

Person: => ClNas9IdentityPercent := ClNas9IdentityCount / ClIdentityCount;
Person: => ClNas9Top10 := MAP(ClNas9IdentityPercent > ClNas9IdentityPercent$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);

Person: => ClNas3IdentityPercent := ClNap3IdentityCount / ClIdentityCount;
Person: => ClNas3Top10 := MAP(ClNas3IdentityPercent > ClNas3IdentityPercent$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);

Person: => ClHighRiskDeathPriorToAllEventsIdentityPercent := ClHighRiskDeathPriorToAllEventsIdentityCount / ClIdentityCount;
Person: => ClHighRiskDeathPriorToAllEventsIdentityTop10 := MAP(ClHighRiskDeathPriorToAllEventsIdentityPercent > ClHighRiskDeathPriorToAllEventsIdentityPercent$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);

Person: => ClIpHighRiskIdentityPercent := ClIpHighRiskIdentityCount / ClIdentityCount;
Person: => ClIpHighRiskIdentityTop10 := MAP(ClIpHighRiskIdentityCount > ClIpHighRiskIdentityCount$GROUP{ClIdentityCountPercentile}:Percentile(70) => 1, 0);

Person: => ClHighKrIdentityPercent := ClHighKrIdentityCount / ClIdentityCount;
Person: => ClHighKrIdentityTop10 := MAP(ClHighKrIdentityPercent > ClHighKrIdentityPercent$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);

Person: => ClKrNotKnownRiskKnownRiskElementIdentityCount := COUNT(PersonPerson.ToPerson.PersonPerson.ToPerson(KrNotKnownRiskHasKnownRiskElementFlag=1)); // count of non-known risk identities that had an element flagged as known risk on their transactions
Person: => ClKrEventAfterKnownRiskIdentityCount := COUNT(PersonPerson.ToPerson.PersonPerson.ToPerson(KrEventAfterKnownRiskFlag=1)); // count of known risk identities that used a known risk element after the date of known risk

Person: => ClIpHighRiskCount := COUNT(PersonPerson.ToPerson.PersonPerson.ToPerson.PersonIpAddress(Ip.IpTor=1 OR Ip.IpHosted=1 OR Ip.IpVpn=1 OR Ip.IpNotUs=1){Ip});

Person: => ClIpNotUsIdentityCount := COUNT(PersonPerson.ToPerson.PersonPerson.ToPerson(IpNotUs=1){LexId});
Person: => ClIpVpnIdentityCount := COUNT(PersonPerson.ToPerson.PersonPerson.ToPerson(IpVpn=1){LexId});
Person: => ClIpHighRiskCityIdentityCount := COUNT(PersonPerson.ToPerson.PersonPerson.ToPerson(IpHighRiskCity=1){LexId});
Person: => ClIpHostedIdentityCount := COUNT(PersonPerson.ToPerson.PersonPerson.ToPerson(IpHosted=1){LexId});
Person: => ClIpTorIdentityCount := COUNT(PersonPerson.ToPerson.PersonPerson.ToPerson(IpTor=1){LexId});
Person: => ClIpHighRiskIdentityCount := COUNT(PersonPerson.ToPerson.PersonPerson.ToPerson(IpTor=1 OR IpHosted=1 OR IpVpn=1 OR IpNotUs=1){LexId});

Person: => ClIpNotUsEventCount := COUNT(PersonPerson.ToPerson.PersonEvent(Transaction.IpNotUs=1){Transaction});
Person: => ClIpVpnEventCount := COUNT(PersonPerson.ToPerson.PersonEvent(Transaction.IpVpn=1){Transaction});
Person: => ClIpHighRiskCityEventCount := COUNT(PersonPerson.ToPerson.PersonEvent(Transaction.IpHighRiskCity=1){Transaction});
Person: => ClIpHostedEventCount := COUNT(PersonPerson.ToPerson.PersonEvent(Transaction.IpHosted=1){Transaction});
Person: => ClIpTorEventCount := COUNT(PersonPerson.ToPerson.PersonEvent(Transaction.IpTor=1){Transaction});

Person: => ClBankIdentityCountGt2Count := COUNT(PersonPerson.ToPerson.PersonBankAccount(Account.IdentityCountGt2=1){Account});
Person: => ClBankIdentityCountGt2Top10 := MAP(ClBankIdentityCountGt2Count > ClBankIdentityCountGt2Count$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);

Person: => ClEventCountPercentile := ClEventCount$^Percentile;
Person: => ClActive30IdentityCountPercentile := ClActive30IdentityCount$^Percentile;
Person: => ClActive7IdentityCountPercentile  := ClActive7IdentityCount$^Percentile;

Person: => ClImpactWeight := ((ClIdentityCountPercentile * 0.3) + (ClEventCountPercentile * 0.3) + (ClActive30IdentityCountPercentile * 0.20) + (ClActive7IdentityCountPercentile * 0.20));

// This will be computed outside of KEL later along with the weighted score for known risk, velocity etc..
Person: => ClusterScore := (LexId % 100); 

SocialSecurityNumber: => CustomerId := rCustomer.CustomerId;
SocialSecurityNumber: => IndustryType := rCustomer.IndustryType;
SocialSecurityNumber: => SourceCustomerCount := COUNT(SourceCustomers);
SocialSecurityNumber: => EntityContextUid := '_15' + OttoSSNId;
SocialSecurityNumber: => EntityType := 15;
SocialSecurityNumber: => Label := SsnFormatted;
SocialSecurityNumber: => InCustomerPopulation := MAP(COUNT(SourceCustomers(rSourceCustomer=rCustomer))>0 => 1, 0);
SocialSecurityNumber: => DtFirstSeen := MIN(SsnEvent.Transaction, EventDate);
SocialSecurityNumber: => DtLastSeen := MAX(SsnEvent.Transaction, EventDate);


SocialSecurityNumber: => IdentityCount := COUNT(PersonSSN{Subject});
SocialSecurityNumber: => IdentityCountGt2 := MAP(IdentityCount > 2 => 1, 0);
SocialSecurityNumber: => EventCount := COUNT(SsnEvent);

SocialSecurityNumber: => Hri06Flag := MAP(COUNT(SsnEvent.Transaction(Hri06Flag=1)) > 0 => 1, 0);
SocialSecurityNumber: => Hri26Flag := MAP(COUNT(SsnEvent.Transaction(Hri26Flag=1)) > 0 => 1, 0);
SocialSecurityNumber: => Hri29Flag := MAP(COUNT(SsnEvent.Transaction(Hri29Flag=1)) > 0 => 1, 0);
SocialSecurityNumber: => Hri38Flag := MAP(COUNT(SsnEvent.Transaction(Hri38Flag=1)) > 0 => 1, 0);
SocialSecurityNumber: => Hri71Flag := MAP(COUNT(SsnEvent.Transaction(Hri71Flag=1)) > 0 => 1, 0);
SocialSecurityNumber: => HriItFlag := MAP(COUNT(SsnEvent.Transaction(HriItFlag=1)) > 0 => 1, 0);
SocialSecurityNumber: => HriMiFlag := MAP(COUNT(SsnEvent.Transaction(HriMiFlag=1)) > 0 => 1, 0);

// Known Risk 
SocialSecurityNumber: => KrHighRiskFlag := MAP(COUNT(SsnEvent.Transaction(KrHighRiskSsnFlag=1)) > 0 => 1, 0);
SocialSecurityNumber: => KrMediumRiskFlag := MAP(COUNT(SsnEvent.Transaction(KrMediumRiskSsnFlag=1)) > 0 => 1, 0);
SocialSecurityNumber: => KrLowRiskFlag := MAP(COUNT(SsnEvent.Transaction(KrLowRiskSsnFlag=1)) > 0 => 1, 0);

SocialSecurityNumber: => SafeFlag := MAP(COUNT(SsnEvent.Transaction(SafeFlag=1))>0 => 1, 0);
SocialSecurityNumber: => ContributorSafeFlag := MAP(COUNT(SsnEvent.Transaction(ContributorSafeFlag=1))>0 => 1, 0);

SocialSecurityNumber: => LastEventDate := MAX(SsnEvent.Transaction, EventDate); 
SocialSecurityNumber: => KrLastEventDate := MAX(SsnEvent.Transaction(KrHighRiskSsnFlag=1 OR KrMediumRiskSsnFlag=1 OR KrLowRiskSsnFlag=1), EventDate);
SocialSecurityNumber: => KrEventAfterLastKnownRiskCount := COUNT(SsnEvent(Transaction.EventDate > SocialSecurityNumber.KrLastEventDate));
SocialSecurityNumber: => KrEventAfterLastKnownRiskFlag := MAP(KrEventAfterLastKnownRiskCount>0=>1, 0);

SocialSecurityNumber: => KrSsn100Flag := MAP(COUNT(SsnEvent.Transaction(KrSsn100Flag=1))>0 => 1, 0);
SocialSecurityNumber: => KrSsn101Flag := MAP(COUNT(SsnEvent.Transaction(KrSsn101Flag=1))>0 => 1, 0);
SocialSecurityNumber: => KrSsn103Flag := MAP(COUNT(SsnEvent.Transaction(KrSsn103Flag=1))>0 => 1, 0);
SocialSecurityNumber: => KrSsn104Flag := MAP(COUNT(SsnEvent.Transaction(KrSsn104Flag=1))>0 => 1, 0);
SocialSecurityNumber: => KrSsn105Flag := MAP(COUNT(SsnEvent.Transaction(KrSsn105Flag=1))>0 => 1, 0);
SocialSecurityNumber: => KrSsn190Flag := MAP(COUNT(SsnEvent.Transaction(KrSsn190Flag=1))>0 => 1, 0);
SocialSecurityNumber: => KrSsn191Flag := MAP(COUNT(SsnEvent.Transaction(KrSsn191Flag=1))>0 => 1, 0);
SocialSecurityNumber: => KrSsn192Flag := MAP(COUNT(SsnEvent.Transaction(KrSsn192Flag=1))>0 => 1, 0);
SocialSecurityNumber: => KrSsn193Flag := MAP(COUNT(SsnEvent.Transaction(KrSsn193Flag=1))>0 => 1, 0);



// Velocity

SocialSecurityNumber: => VlEvent1AllCount := COUNT(SsnEvent.Transaction(Age<2));
SocialSecurityNumber: => VlEvent7AllCount := COUNT(SsnEvent.Transaction(Age<8));
SocialSecurityNumber: => VlEvent30AllDayCount := COUNT(SsnEvent.Transaction(Age<31));
SocialSecurityNumber: => VlEvent365AllDayCount := COUNT(SsnEvent.Transaction(Age<366));
SocialSecurityNumber: => VlEvent7AllActiveFlag := MAP(VlEvent7AllCount > 0 => 1, 0);
SocialSecurityNumber: => VlEvent30AllActiveFlag := MAP(VlEvent30AllDayCount > 0 => 1, 0);
SocialSecurityNumber: => VlEvent1Count := COUNT(SsnEvent.Transaction(InCustomerPopulation = 1 AND Age<2));
SocialSecurityNumber: => VlEvent7Count := COUNT(SsnEvent.Transaction(InCustomerPopulation = 1 AND Age<8));
SocialSecurityNumber: => VlEvent30Count := COUNT(SsnEvent.Transaction(InCustomerPopulation = 1 AND Age<31));
SocialSecurityNumber: => VlEvent365Count := COUNT(SsnEvent.Transaction(InCustomerPopulation = 1 AND Age<366));

SocialSecurityNumber: => VlEvent7ActiveFlag := MAP(VlEvent7Count > 0 => 1, 0);
SocialSecurityNumber: => VlEvent30ActiveFlag := MAP(VlEvent30Count > 0 => 1, 0);


// Cluster Attributes
SocialSecurityNumber: => ClAdjacentSafeIdentityCount := COUNT(PersonSSN.Subject(SafeFlag=1));
SocialSecurityNumber: => ClAdjacentSafeFlag := MAP(ClAdjacentSafeIdentityCount > 0 => 1, 0);
SocialSecurityNumber: => ClAdjacentNoSafeFlag := MAP(ClAdjacentSafeIdentityCount = 0 => 1, 0);

  // Adjacent high volume 
SocialSecurityNumber: => ClIpHighIdentityCount := COUNT(PersonSSN.Subject.PersonPerson.ToPerson.PersonIpAddress(Ip.IdentityCount>10){Ip});
SocialSecurityNumber: => ClSsnHighIdentityCount := COUNT(PersonSSN.Subject.PersonPerson.ToPerson.PersonSSN(Social.IdentityCount>10){Social});
SocialSecurityNumber: => ClPhoneHighIdentityCount := COUNT(PersonSSN.Subject.PersonPerson.ToPerson.PersonPhone(PhoneNumber.IdentityCount>10){PhoneNumber});
SocialSecurityNumber: => ClEmailHighIdentityCount := COUNT(PersonSSN.Subject.PersonPerson.ToPerson.PersonEmail(Emailof.IdentityCount>10){Emailof});
SocialSecurityNumber: => ClBankAccountHighIdentityCount := COUNT(PersonSSN.Subject.PersonPerson.ToPerson.PersonBankAccount(Account.IdentityCount>10){Account});
SocialSecurityNumber: => ClDriversLicenseHighIdentityCount := COUNT(PersonSSN.Subject.PersonPerson.ToPerson.PersonDriversLicense(License.IdentityCount>10){License});
SocialSecurityNumber: => ClAddressHighIdentityCount := COUNT(PersonSSN.Subject.PersonPerson.ToPerson.PersonAddress(Location.IdentityCount>10){Location});
	
SocialSecurityNumber: => ClHighRiskRoutingCount := COUNT(PersonSSN.Subject.PersonPerson.ToPerson(KrHighRiskRouting=1){LexId}); // Count of Identities with high risk bank account routing.

SocialSecurityNumber: => ClNoLexIdGt22Count := COUNT(PersonSSN.Subject.PersonPerson.ToPerson(NoLexIdGt22=1){LexId}); // Count within cluster of identities with no lexid and older than 22.
SocialSecurityNumber: => ClDeathPriorToAllEventsIdentityCount := COUNT(PersonSSN.Subject.PersonPerson.ToPerson(DeathPriorToAllEvents=1){LexId}); // Count within cluster of identities that were deceased prior to all input. 
SocialSecurityNumber: => ClHighRiskDeathPriorToAllEventsIdentityCount := COUNT(PersonSSN.Subject.PersonPerson.ToPerson(HighRiskDeathPriorToAllEvents=1){LexId});  // Count within cluster of death 5+ years prior to all input
SocialSecurityNumber: => ClEventCount := COUNT(PersonSSN.Subject.PersonPerson.ToPerson.PersonEvent{Transaction}); //  // Count within cluster of all events/transactions
SocialSecurityNumber: => ClElementCount := 0; 
SocialSecurityNumber: => ClIdentityCount := COUNT(PersonSSN.Subject.PersonPerson.ToPerson{LexId});  // Count within cluster of Identities within 1 degree (temporarily putting 2nd degree for consistency in the UI) 20180807
SocialSecurityNumber: => ClIdentityCountDecile := ClIdentityCount$^Decile; 
SocialSecurityNumber: => ClIdentityCountPercentile := ClIdentityCount$^Percentile; 

SocialSecurityNumber: => ClNas9IdentityCount := COUNT(PersonSSN.Subject.PersonPerson.ToPerson(Nas9Flag=1){LexId});  // Count within cluster with SSN and Last Name not associated with identity per public records
SocialSecurityNumber: => ClNap3IdentityCount := COUNT(PersonSSN.Subject.PersonPerson.ToPerson(Nap3Flag=1){LexId}); // Count within cluster of Identities with Phone and Lastname not associated with identity per public records
SocialSecurityNumber: => ClHighKrIdentityCount := COUNT(PersonSSN.Subject.PersonPerson.ToPerson(KrHighRiskFlag=1){LexId});
SocialSecurityNumber: => ClActive7IdentityCount := COUNT(PersonSSN.Subject.PersonPerson.ToPerson(VlEvent7ActiveFlag=1){LexId});  // Count within cluster of active identities in the last 7 days.
SocialSecurityNumber: => ClActive30IdentityCount := COUNT(PersonSSN.Subject.PersonPerson.ToPerson(VlEvent30ActiveFlag=1){LexId});  // Count within cluster of active identities in the last 30 days.

SocialSecurityNumber: => ClAddressCount := COUNT(PersonSSN.Subject.PersonPerson.ToPerson.PersonAddress.Location(InCustomerPopulation=1));  // Count within cluster of distict addresses within customer population
SocialSecurityNumber: => ClIdentityEventAvg := CleanSpaces(REALFORMAT(ClEventCount / ClIdentityCount, 6, 2)); // Average number of events/transactions per identity within cluster.

SocialSecurityNumber: => ClEmailCount := COUNT(PersonSSN.Subject.PersonPerson.ToPerson.PersonEmail{Emailof});
SocialSecurityNumber: => ClHighRiskEmailCount := COUNT(PersonSSN.Subject.PersonPerson.ToPerson.PersonEmail(Emailof.isdisposableemail=1 OR Emailof.NotSafeLastDomainGt2 = 1){Emailof});
SocialSecurityNumber: => ClHighRiskEmailTop10 := MAP(ClHighRiskEmailCount > ClHighRiskEmailCount$GROUP{ClIdentityCountPercentile}:Percentile(70) => 1, 0);

SocialSecurityNumber: => ClHighRiskPattern1Flag := MAP(ClIdentityCount > 9 => 1, 0); // High Identity Count Cluster
SocialSecurityNumber: => ClHighRiskPattern2Flag := MAP(ClNas9IdentityCount > 10 AND ClNap3IdentityCount > 0 => 1, 0); // Pattern of Phone and Addresses not being associated with identities. 
SocialSecurityNumber: => ClHighRiskPattern3Flag := MAP(ClHighRiskDeathPriorToAllEventsIdentityCount >  0 => 1, 0); // Pattern of associated deceased identities within the cluster.
SocialSecurityNumber: => ClHighRiskPattern4Flag := MAP(ClIpHighRiskIdentityCount > 4 => 1, 0); // Velocity
SocialSecurityNumber: => ClHighRiskPattern5Flag := MAP(ClHighKrIdentityCount > 4 => 1, 0); //Known Risk

SocialSecurityNumber: => ClPRIdentityMatchCount := COUNT(PersonSSN.Subject.PersonPerson(VerifiedPRHit=1).ToPerson.PersonPerson(VerifiedPRHit=1).ToPerson{LexId}); // Count within cluster of Lexid Associates that match PR associates.    
SocialSecurityNumber: => ClPRIdentityMatchPercent := ClPRIdentityMatchCount / ClIdentityCount; // Percent within cluster of Lexid Associates that match PR associates.    
SocialSecurityNumber: => ClPRIdentityNoMatch := MAP(ClPRIdentityMatchCount=0 => 1, 0); // There are no relationships that match public records.

SocialSecurityNumber: => ClNas9IdentityPercent := ClNas9IdentityCount / ClIdentityCount;
SocialSecurityNumber: => ClNas9Top10 := MAP(ClNas9IdentityPercent > ClNas9IdentityPercent$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);

SocialSecurityNumber: => ClNas3IdentityPercent := ClNap3IdentityCount / ClIdentityCount;
SocialSecurityNumber: => ClNas3Top10 := MAP(ClNas3IdentityPercent > ClNas3IdentityPercent$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);

SocialSecurityNumber: => ClHighRiskDeathPriorToAllEventsIdentityPercent := ClHighRiskDeathPriorToAllEventsIdentityCount / ClIdentityCount;
SocialSecurityNumber: => ClHighRiskDeathPriorToAllEventsIdentityTop10 := MAP(ClHighRiskDeathPriorToAllEventsIdentityPercent > ClHighRiskDeathPriorToAllEventsIdentityPercent$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);

SocialSecurityNumber: => ClIpHighRiskIdentityPercent := ClIpHighRiskIdentityCount / ClIdentityCount;
SocialSecurityNumber: => ClIpHighRiskIdentityTop10 := MAP(ClIpHighRiskIdentityCount > ClIpHighRiskIdentityCount$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);

SocialSecurityNumber: => ClHighKrIdentityPercent := ClHighKrIdentityCount / ClIdentityCount;
SocialSecurityNumber: => ClHighKrIdentityTop10 := MAP(ClHighKrIdentityPercent > ClHighKrIdentityPercent$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);

SocialSecurityNumber: => ClKrNotKnownRiskKnownRiskElementIdentityCount := COUNT(PersonSSN.Subject.PersonPerson.ToPerson(KrNotKnownRiskHasKnownRiskElementFlag=1)); // count of identities that had an element flagged as known risk on their transactions
SocialSecurityNumber: => ClKrEventAfterKnownRiskIdentityCount := COUNT(PersonSSN.Subject.PersonPerson.ToPerson(KrEventAfterKnownRiskFlag=1)); // count of identities that used a known risk element after the date of known risk

SocialSecurityNumber: => ClIpHighRiskCount := COUNT(PersonSSN.Subject.PersonPerson.ToPerson.PersonIpAddress(Ip.IpTor=1 OR Ip.IpHosted=1 OR Ip.IpVpn=1 OR Ip.IpNotUs=1){Ip});

SocialSecurityNumber: => ClIpNotUsIdentityCount := COUNT(PersonSSN.Subject.PersonPerson.ToPerson(IpNotUs=1){LexId});
SocialSecurityNumber: => ClIpVpnIdentityCount := COUNT(PersonSSN.Subject.PersonPerson.ToPerson(IpVpn=1){LexId});
SocialSecurityNumber: => ClIpHighRiskCityIdentityCount := COUNT(PersonSSN.Subject.PersonPerson.ToPerson(IpHighRiskCity=1){LexId});
SocialSecurityNumber: => ClIpHostedIdentityCount := COUNT(PersonSSN.Subject.PersonPerson.ToPerson(IpHosted=1){LexId});
SocialSecurityNumber: => ClIpTorIdentityCount := COUNT(PersonSSN.Subject.PersonPerson.ToPerson(IpTor=1){LexId});
SocialSecurityNumber: => ClIpHighRiskIdentityCount := COUNT(PersonSSN.Subject.PersonPerson.ToPerson(IpTor=1 OR IpHosted=1 OR IpVpn=1 OR IpNotUs=1){LexId});

SocialSecurityNumber: => ClIpNotUsEventCount := COUNT(PersonSSN.Subject.PersonPerson.ToPerson.PersonEvent(Transaction.IpNotUs=1){Transaction});
SocialSecurityNumber: => ClIpVpnEventCount := COUNT(PersonSSN.Subject.PersonPerson.ToPerson.PersonEvent(Transaction.IpVpn=1){Transaction});
SocialSecurityNumber: => ClIpHighRiskCityEventCount := COUNT(PersonSSN.Subject.PersonPerson.ToPerson.PersonEvent(Transaction.IpHighRiskCity=1){Transaction});
SocialSecurityNumber: => ClIpHostedEventCount := COUNT(PersonSSN.Subject.PersonPerson.ToPerson.PersonEvent(Transaction.IpHosted=1){Transaction});
SocialSecurityNumber: => ClIpTorEventCount := COUNT(PersonSSN.Subject.PersonPerson.ToPerson.PersonEvent(Transaction.IpTor=1){Transaction});

SocialSecurityNumber: => ClBankIdentityCountGt2Count := COUNT(PersonSSN.Subject.PersonPerson.ToPerson.PersonBankAccount(Account.IdentityCountGt2=1){Account});
SocialSecurityNumber: => ClBankIdentityCountGt2Top10 := MAP(ClBankIdentityCountGt2Count > ClBankIdentityCountGt2Count$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);

SocialSecurityNumber: => ClEventCountPercentile := ClEventCount$^Percentile;
SocialSecurityNumber: => ClActive30IdentityCountPercentile := ClActive30IdentityCount$^Percentile;
SocialSecurityNumber: => ClActive7IdentityCountPercentile  := ClActive7IdentityCount$^Percentile;

SocialSecurityNumber: => ClImpactWeight := ((ClIdentityCountPercentile * 0.3) + (ClEventCountPercentile * 0.3) + (ClActive30IdentityCountPercentile * 0.20) + (ClActive7IdentityCountPercentile * 0.20));

SocialSecurityNumber: => Score := UID % 100;
SocialSecurityNumber: => ClusterScore := 0;

Phone: => CustomerId := rCustomer.CustomerId;
Phone: => IndustryType := rCustomer.IndustryType;
Phone: => SourceCustomerCount := COUNT(SourceCustomers);
Phone: => EntityContextUid := '_16' + PhoneNumber;
Phone: => EntityType := 16;
Phone: => Label := PhoneFormatted;
Phone: => InCustomerPopulation := MAP(COUNT(SourceCustomers(rSourceCustomer=rCustomer))>0 => 1, 0);
Phone: => DtFirstSeen := MIN(PhoneEvent.Transaction, EventDate);
Phone: => DtLastSeen := MAX(PhoneEvent.Transaction, EventDate);

Phone: => IdentityCount := COUNT(PersonPhone{Subject});
Phone: => IdentityCountGt2 := MAP(IdentityCount > 2 => 1, 0);
Phone: => EventCount := COUNT(PhoneEvent);

Phone: => HriMiFlag := MAP(COUNT(PhoneEvent.Transaction(HriMiFlag=1)) > 0 => 1, 0);
Phone: => Hri07Flag := MAP(COUNT(PhoneEvent.Transaction(Hri07Flag=1)) > 0 => 1, 0);
Phone: => Hri08Flag := MAP(COUNT(PhoneEvent.Transaction(Hri08Flag=1)) > 0 => 1, 0);
Phone: => Hri15Flag := MAP(COUNT(PhoneEvent.Transaction(Hri15Flag=1)) > 0 => 1, 0);
Phone: => Hri27Flag := MAP(COUNT(PhoneEvent.Transaction(Hri27Flag=1)) > 0 => 1, 0);
Phone: => Hri31Flag := MAP(COUNT(PhoneEvent.Transaction(Hri31Flag=1)) > 0 => 1, 0);

// Known Risk 
Phone: => KrHighRiskFlag := MAP(COUNT(PhoneEvent.Transaction(KrHighRiskPhoneFlag=1)) > 0 => 1, 0);
Phone: => KrMediumRiskFlag := MAP(COUNT(PhoneEvent.Transaction(KrMediumRiskPhoneFlag=1)) > 0 => 1, 0);
Phone: => KrLowRiskFlag := MAP(COUNT(PhoneEvent.Transaction(KrLowRiskPhoneFlag=1)) > 0 => 1, 0);
Phone: => SafeFlag := MAP(COUNT(PhoneEvent.Transaction(SafeFlag=1))>0 => 1, 0);
Phone: => ContributorSafeFlag := MAP(COUNT(PhoneEvent.Transaction(ContributorSafeFlag=1))>0 => 1, 0);

Phone: => LastEventDate := MAX(PhoneEvent.Transaction, EventDate);
Phone: => KrLastEventDate := MAX(PhoneEvent.Transaction(KrHighRiskPhoneFlag=1 OR KrMediumRiskPhoneFlag=1 OR KrLowRiskPhoneFlag=1), EventDate);
Phone: => KrEventAfterLastKnownRiskCount := COUNT(PhoneEvent(Transaction.EventDate > Phone.KrLastEventDate));
Phone: => KrEventAfterLastKnownRiskFlag := MAP(KrEventAfterLastKnownRiskCount>0=>1, 0);

Phone: => KrPhn400Flag := MAP(COUNT(PhoneEvent.Transaction(KrPhn400Flag=1))>0 => 1, 0);
Phone: => KrPhn401Flag := MAP(COUNT(PhoneEvent.Transaction(KrPhn401Flag=1))>0 => 1, 0);
Phone: => KrPhn402Flag := MAP(COUNT(PhoneEvent.Transaction(KrPhn402Flag=1))>0 => 1, 0);
Phone: => KrPhn490Flag := MAP(COUNT(PhoneEvent.Transaction(KrPhn490Flag=1))>0 => 1, 0);
Phone: => KrPhn491Flag := MAP(COUNT(PhoneEvent.Transaction(KrPhn491Flag=1))>0 => 1, 0);
Phone: => KrPhn492Flag := MAP(COUNT(PhoneEvent.Transaction(KrPhn492Flag=1))>0 => 1, 0);
Phone: => KrPhn493Flag := MAP(COUNT(PhoneEvent.Transaction(KrPhn493Flag=1))>0 => 1, 0);


// Velocity

Phone: => VlEvent1AllCount := COUNT(PhoneEvent.Transaction(Age<2));
Phone: => VlEvent7AllCount := COUNT(PhoneEvent.Transaction(Age<8));
Phone: => VlEvent30AllDayCount := COUNT(PhoneEvent.Transaction(Age<31));
Phone: => VlEvent365AllDayCount := COUNT(PhoneEvent.Transaction(Age<366));

Phone: => VlEvent7AllActiveFlag := MAP(VlEvent7AllCount > 0 => 1, 0);
Phone: => VlEvent30AllActiveFlag := MAP(VlEvent30AllDayCount > 0 => 1, 0);

Phone: => VlEvent1Count := COUNT(PhoneEvent.Transaction(InCustomerPopulation = 1 AND Age<2));
Phone: => VlEvent7Count := COUNT(PhoneEvent.Transaction(InCustomerPopulation = 1 AND Age<8));
Phone: => VlEvent30Count := COUNT(PhoneEvent.Transaction(InCustomerPopulation = 1 AND Age<31));
Phone: => VlEvent365Count := COUNT(PhoneEvent.Transaction(InCustomerPopulation = 1 AND Age<366));

Phone: => VlEvent7ActiveFlag := MAP(VlEvent7Count > 0 => 1, 0);
Phone: => VlEvent30ActiveFlag := MAP(VlEvent30Count > 0 => 1, 0);

// Cluster Attributes
Phone: => ClAdjacentSafeIdentityCount := COUNT(PersonPhone.Subject(SafeFlag=1));
Phone: => ClAdjacentSafeFlag := MAP(ClAdjacentSafeIdentityCount > 0 => 1, 0);
Phone: => ClAdjacentNoSafeFlag := MAP(ClAdjacentSafeIdentityCount = 0 => 1, 0);

  // Adjacent high volume 
Phone: => ClIpHighIdentityCount := COUNT(PersonPhone.Subject.PersonPerson.ToPerson.PersonIpAddress(Ip.IdentityCount>10){Ip});
Phone: => ClSsnHighIdentityCount := COUNT(PersonPhone.Subject.PersonPerson.ToPerson.PersonSSN(Social.IdentityCount>10){Social});
Phone: => ClPhoneHighIdentityCount := COUNT(PersonPhone.Subject.PersonPerson.ToPerson.PersonPhone(PhoneNumber.IdentityCount>10){PhoneNumber});
Phone: => ClEmailHighIdentityCount := COUNT(PersonPhone.Subject.PersonPerson.ToPerson.PersonEmail(Emailof.IdentityCount>10){Emailof});
Phone: => ClBankAccountHighIdentityCount := COUNT(PersonPhone.Subject.PersonPerson.ToPerson.PersonBankAccount(Account.IdentityCount>10){Account});
Phone: => ClDriversLicenseHighIdentityCount := COUNT(PersonPhone.Subject.PersonPerson.ToPerson.PersonDriversLicense(License.IdentityCount>10){License});
Phone: => ClAddressHighIdentityCount := COUNT(PersonPhone.Subject.PersonPerson.ToPerson.PersonAddress(Location.IdentityCount>10){Location});
	
Phone: => ClHighRiskRoutingCount := COUNT(PersonPhone.Subject.PersonPerson.ToPerson(KrHighRiskRouting=1){LexId}); // Count of Identities with high risk bank account routing.

Phone: => ClNoLexIdGt22Count := COUNT(PersonPhone.Subject.PersonPerson.ToPerson(NoLexIdGt22=1){LexId}); // Count within cluster of identities with no lexid and older than 22.
Phone: => ClDeathPriorToAllEventsIdentityCount := COUNT(PersonPhone.Subject.PersonPerson.ToPerson(DeathPriorToAllEvents=1){LexId}); // Count within cluster of identities that were deceased prior to all input. 
Phone: => ClHighRiskDeathPriorToAllEventsIdentityCount := COUNT(PersonPhone.Subject.PersonPerson.ToPerson(HighRiskDeathPriorToAllEvents=1){LexId});  // Count within cluster of death 5+ years prior to all input
Phone: => ClEventCount := COUNT(PersonPhone.Subject.PersonPerson.ToPerson.PersonEvent{Transaction}); //  // Count within cluster of all events/transactions
Phone: => ClElementCount := 0; 
Phone: => ClIdentityCount := COUNT(PersonPhone.Subject.PersonPerson.ToPerson{LexId});  // Count within cluster of Identities within 1 degree (temporarily putting 2nd degree for consistency in the UI) 20180807
Phone: => ClIdentityCountDecile := ClIdentityCount$^Decile; 
Phone: => ClIdentityCountPercentile := ClIdentityCount$^Percentile; 

Phone: => ClNas9IdentityCount := COUNT(PersonPhone.Subject.PersonPerson.ToPerson(Nas9Flag=1){LexId});  // Count within cluster with SSN and Last Name not associated with identity per public records
Phone: => ClNap3IdentityCount := COUNT(PersonPhone.Subject.PersonPerson.ToPerson(Nap3Flag=1){LexId}); // Count within cluster of Identities with Phone and Lastname not associated with identity per public records
Phone: => ClHighKrIdentityCount := COUNT(PersonPhone.Subject.PersonPerson.ToPerson(KrHighRiskFlag=1){LexId});

Phone: => ClKrNotKnownRiskKnownRiskElementIdentityCount := COUNT(PersonPhone.Subject.PersonPerson.ToPerson(KrNotKnownRiskHasKnownRiskElementFlag=1)); // count of identities that had an element flagged as known risk on their transactions
Phone: => ClKrEventAfterKnownRiskIdentityCount := COUNT(PersonPhone.Subject.PersonPerson.ToPerson(KrEventAfterKnownRiskFlag=1)); // count of identities that used a known risk element after the date of known risk

Phone: => ClActive7IdentityCount := COUNT(PersonPhone.Subject.PersonPerson.ToPerson(VlEvent7ActiveFlag=1){LexId});  // Count within cluster of active identities in the last 7 days.
Phone: => ClActive30IdentityCount := COUNT(PersonPhone.Subject.PersonPerson.ToPerson(VlEvent30ActiveFlag=1){LexId});  // Count within cluster of active identities in the last 30 days.

Phone: => ClAddressCount := COUNT(PersonPhone.Subject.PersonPerson.ToPerson.PersonAddress.Location(InCustomerPopulation=1));  // Count within cluster of distict addresses within customer population
Phone: => ClIdentityEventAvg := CleanSpaces(REALFORMAT(ClEventCount / ClIdentityCount, 6, 2)); // Average number of events/transactions per identity within cluster.

Phone: => ClEmailCount := COUNT(PersonSSN.Subject.PersonPerson.ToPerson.PersonEmail{Emailof});
Phone: => ClHighRiskEmailCount := COUNT(PersonSSN.Subject.PersonPerson.ToPerson.PersonEmail(Emailof.isdisposableemail=1 OR Emailof.NotSafeLastDomainGt2 = 1){Emailof});
Phone: => ClHighRiskEmailTop10 := MAP(ClHighRiskEmailCount > ClHighRiskEmailCount$GROUP{ClIdentityCountPercentile}:Percentile(70) => 1, 0);

Phone: => ClHighRiskPattern1Flag := MAP(ClIdentityCount > 9 => 1, 0); // High Identity Count Cluster
Phone: => ClHighRiskPattern2Flag := MAP(ClNas9IdentityCount > 10 AND ClNap3IdentityCount > 0 => 1, 0); // Pattern of Phone and Addresses not being associated with identities. 
Phone: => ClHighRiskPattern3Flag := MAP(ClHighRiskDeathPriorToAllEventsIdentityCount >  0 => 1, 0); // Pattern of associated deceased identities within the cluster.
Phone: => ClHighRiskPattern4Flag := MAP(ClIpHighRiskIdentityCount > 4 => 1, 0); // Velocity
Phone: => ClHighRiskPattern5Flag := MAP(ClHighKrIdentityCount > 4 => 1, 0); //Known Risk

Phone: => ClPRIdentityMatchCount := COUNT(PersonPhone.Subject.PersonPerson(VerifiedPRHit=1).ToPerson.PersonPerson(VerifiedPRHit=1).ToPerson{LexId}); // Count within cluster of Lexid Associates that match PR associates.    
Phone: => ClPRIdentityMatchPercent := ClPRIdentityMatchCount / ClIdentityCount; // Percent within cluster of Lexid Associates that match PR associates.    
Phone: => ClPRIdentityNoMatch := MAP(ClPRIdentityMatchCount=0 => 1, 0); // There are no relationships that match public records.

Phone: => ClNas9IdentityPercent := ClNas9IdentityCount / ClIdentityCount;
Phone: => ClNas9Top10 := MAP(ClNas9IdentityPercent > ClNas9IdentityPercent$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);

Phone: => ClNas3IdentityPercent := ClNap3IdentityCount / ClIdentityCount;
Phone: => ClNas3Top10 := MAP(ClNas3IdentityPercent > ClNas3IdentityPercent$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);

Phone: => ClHighRiskDeathPriorToAllEventsIdentityPercent := ClHighRiskDeathPriorToAllEventsIdentityCount / ClIdentityCount;
Phone: => ClHighRiskDeathPriorToAllEventsIdentityTop10 := MAP(ClHighRiskDeathPriorToAllEventsIdentityPercent > ClHighRiskDeathPriorToAllEventsIdentityPercent$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);

Phone: => ClIpHighRiskIdentityPercent := ClIpHighRiskIdentityCount / ClIdentityCount;
Phone: => ClIpHighRiskIdentityTop10 := MAP(ClIpHighRiskIdentityCount > ClIpHighRiskIdentityCount$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);

Phone: => ClHighKrIdentityPercent := ClHighKrIdentityCount / ClIdentityCount;
Phone: => ClHighKrIdentityTop10 := MAP(ClHighKrIdentityPercent > ClHighKrIdentityPercent$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);

Phone: => ClIpHighRiskCount := COUNT(PersonPhone.Subject.PersonPerson.ToPerson.PersonIpAddress(Ip.IpTor=1 OR Ip.IpHosted=1 OR Ip.IpVpn=1 OR Ip.IpNotUs=1){Ip});

Phone: => ClIpNotUsIdentityCount := COUNT(PersonPhone.Subject.PersonPerson.ToPerson(IpNotUs=1){LexId});
Phone: => ClIpVpnIdentityCount := COUNT(PersonPhone.Subject.PersonPerson.ToPerson(IpVpn=1){LexId});
Phone: => ClIpHighRiskCityIdentityCount := COUNT(PersonPhone.Subject.PersonPerson.ToPerson(IpHighRiskCity=1){LexId});
Phone: => ClIpHostedIdentityCount := COUNT(PersonPhone.Subject.PersonPerson.ToPerson(IpHosted=1){LexId});
Phone: => ClIpTorIdentityCount := COUNT(PersonPhone.Subject.PersonPerson.ToPerson(IpTor=1){LexId});
Phone: => ClIpHighRiskIdentityCount := COUNT(PersonPhone.Subject.PersonPerson.ToPerson(IpTor=1 OR IpHosted=1 OR IpVpn=1 OR IpNotUs=1){LexId});

Phone: => ClIpNotUsEventCount := COUNT(PersonPhone.Subject.PersonPerson.ToPerson.PersonEvent(Transaction.IpNotUs=1){Transaction});
Phone: => ClIpVpnEventCount := COUNT(PersonPhone.Subject.PersonPerson.ToPerson.PersonEvent(Transaction.IpVpn=1){Transaction});
Phone: => ClIpHighRiskCityEventCount := COUNT(PersonPhone.Subject.PersonPerson.ToPerson.PersonEvent(Transaction.IpHighRiskCity=1){Transaction});
Phone: => ClIpHostedEventCount := COUNT(PersonPhone.Subject.PersonPerson.ToPerson.PersonEvent(Transaction.IpHosted=1){Transaction});
Phone: => ClIpTorEventCount := COUNT(PersonPhone.Subject.PersonPerson.ToPerson.PersonEvent(Transaction.IpTor=1){Transaction});

Phone: => ClBankIdentityCountGt2Count := COUNT(PersonSSN.Subject.PersonPerson.ToPerson.PersonBankAccount(Account.IdentityCountGt2=1){Account});
Phone: => ClBankIdentityCountGt2Top10 := MAP(ClBankIdentityCountGt2Count > ClBankIdentityCountGt2Count$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);

Phone: => ClEventCountPercentile := ClEventCount$^Percentile;
Phone: => ClActive30IdentityCountPercentile := ClActive30IdentityCount$^Percentile;
Phone: => ClActive7IdentityCountPercentile  := ClActive7IdentityCount$^Percentile;

Phone: => ClImpactWeight := ((ClIdentityCountPercentile * 0.3) + (ClEventCountPercentile * 0.3) + (ClActive30IdentityCountPercentile * 0.20) + (ClActive7IdentityCountPercentile * 0.20));

Phone: => Score := UID % 100;
Phone: => ClusterScore := 0;

Email: => CustomerId := rCustomer.CustomerId;
Email: => IndustryType := rCustomer.IndustryType;
Email: => SourceCustomerCount := COUNT(SourceCustomers);
Email: => EntityContextUid := '_17' + OttoEmailId;
Email: => EntityType := 17;
Email: => Label := EmailAddress;
Email: => InCustomerPopulation := MAP(COUNT(SourceCustomers(rSourceCustomer=rCustomer))>0 => 1, 0);
Email: => DtFirstSeen := MIN(EmailEvent.Transaction, EventDate);
Email: => DtLastSeen := MAX(EmailEvent.Transaction, EventDate);

Email: => IdentityCount := COUNT(PersonEmail{Subject});
Email: => IdentityCountGt2 := MAP(IdentityCount > 2 => 1, 0);
Email: => EventCount := COUNT(EmailEvent);

Email: => NotSafeLastDomainGt2 := MAP(EmailLastDomain IN ['GOV','ORG'] AND IdentityCountGt2 = 1 => 1, 0);

// Known Risk 
Email: => KrHighRiskFlag := MAP(COUNT(EmailEvent.Transaction(KrHighRiskEmailFlag=1)) > 0 => 1, 0);
Email: => KrMediumRiskFlag := MAP(COUNT(EmailEvent.Transaction(KrMediumRiskEmailFlag=1)) > 0 => 1, 0);
Email: => KrLowRiskFlag := MAP(COUNT(EmailEvent.Transaction(KrLowRiskEmailFlag=1)) > 0 => 1, 0);
Email: => SafeFlag := MAP(COUNT(EmailEvent.Transaction(SafeFlag=1))>0 => 1, 0);
Email: => ContributorSafeFlag := MAP(COUNT(EmailEvent.Transaction(ContributorSafeFlag=1))>0 => 1, 0);

Email: => LastEventDate := MAX(EmailEvent.Transaction, EventDate);
Email: => KrLastEventDate := MAX(EmailEvent.Transaction(KrHighRiskEmailFlag=1 OR KrMediumRiskEmailFlag=1 OR KrLowRiskEmailFlag=1), EventDate);
Email: => KrEventAfterLastKnownRiskCount := COUNT(EmailEvent(Transaction.EventDate > Email.KrLastEventDate));
Email: => KrEventAfterLastKnownRiskFlag := MAP(KrEventAfterLastKnownRiskCount>0=>1, 0);

Email: => KrEml500Flag := MAP(COUNT(EmailEvent.Transaction(KrEml500Flag=1))>0 => 1, 0);
Email: => KrEml501Flag := MAP(COUNT(EmailEvent.Transaction(KrEml501Flag=1))>0 => 1, 0);
Email: => KrEml502Flag := MAP(COUNT(EmailEvent.Transaction(KrEml502Flag=1))>0 => 1, 0);
Email: => KrEml590Flag := MAP(COUNT(EmailEvent.Transaction(KrEml590Flag=1))>0 => 1, 0);
Email: => KrEml591Flag := MAP(COUNT(EmailEvent.Transaction(KrEml591Flag=1))>0 => 1, 0);
Email: => KrEml592Flag := MAP(COUNT(EmailEvent.Transaction(KrEml592Flag=1))>0 => 1, 0);
Email: => KrEml593Flag := MAP(COUNT(EmailEvent.Transaction(KrEml593Flag=1))>0 => 1, 0);

// Velocity

Email: => VlEvent1AllCount := COUNT(EmailEvent.Transaction(Age<2));
Email: => VlEvent7AllCount := COUNT(EmailEvent.Transaction(Age<8));
Email: => VlEvent30AllDayCount := COUNT(EmailEvent.Transaction(Age<31));
Email: => VlEvent365AllDayCount := COUNT(EmailEvent.Transaction(Age<366));

Email: => VlEvent7AllActiveFlag := MAP(VlEvent7AllCount > 0 => 1, 0);
Email: => VlEvent30AllActiveFlag := MAP(VlEvent30AllDayCount > 0 => 1, 0);

Email: => VlEvent1Count := COUNT(EmailEvent.Transaction(InCustomerPopulation = 1 AND Age<2));
Email: => VlEvent7Count := COUNT(EmailEvent.Transaction(InCustomerPopulation = 1 AND Age<8));
Email: => VlEvent30Count := COUNT(EmailEvent.Transaction(InCustomerPopulation = 1 AND Age<31));
Email: => VlEvent365Count := COUNT(EmailEvent.Transaction(InCustomerPopulation = 1 AND Age<366));

Email: => VlEvent7ActiveFlag := MAP(VlEvent7Count > 0 => 1, 0);
Email: => VlEvent30ActiveFlag := MAP(VlEvent30Count > 0 => 1, 0);
 
// Cluster Attributes
Email: => ClAdjacentSafeIdentityCount := COUNT(PersonEmail.Subject(SafeFlag=1));
Email: => ClAdjacentSafeFlag := MAP(ClAdjacentSafeIdentityCount > 0 => 1, 0);
Email: => ClAdjacentNoSafeFlag := MAP(ClAdjacentSafeIdentityCount = 0 => 1, 0);

  // Adjacent high volume 
Email: => ClIpHighIdentityCount := COUNT(PersonEmail.Subject.PersonPerson.ToPerson.PersonIpAddress(Ip.IdentityCount>10){Ip});
Email: => ClSsnHighIdentityCount := COUNT(PersonEmail.Subject.PersonPerson.ToPerson.PersonSSN(Social.IdentityCount>10){Social});
Email: => ClPhoneHighIdentityCount := COUNT(PersonEmail.Subject.PersonPerson.ToPerson.PersonPhone(PhoneNumber.IdentityCount>10){PhoneNumber});
Email: => ClEmailHighIdentityCount := COUNT(PersonEmail.Subject.PersonPerson.ToPerson.PersonEmail(Emailof.IdentityCount>10){Emailof});
Email: => ClBankAccountHighIdentityCount := COUNT(PersonEmail.Subject.PersonPerson.ToPerson.PersonBankAccount(Account.IdentityCount>10){Account});
Email: => ClDriversLicenseHighIdentityCount := COUNT(PersonEmail.Subject.PersonPerson.ToPerson.PersonDriversLicense(License.IdentityCount>10){License});
Email: => ClAddressHighIdentityCount := COUNT(PersonEmail.Subject.PersonPerson.ToPerson.PersonAddress(Location.IdentityCount>10){Location});

Email: => ClHighRiskRoutingCount := COUNT(PersonEmail.Subject.PersonPerson.ToPerson(KrHighRiskRouting=1){LexId}); // Count of Identities with high risk bank account routing.

Email: => ClNoLexIdGt22Count := COUNT(PersonEmail.Subject.PersonPerson.ToPerson(NoLexIdGt22=1){LexId}); // Count within cluster of identities with no lexid and older than 22.
Email: => ClDeathPriorToAllEventsIdentityCount := COUNT(PersonEmail.Subject.PersonPerson.ToPerson(DeathPriorToAllEvents=1){LexId}); // Count within cluster of identities that were deceased prior to all input. 
Email: => ClHighRiskDeathPriorToAllEventsIdentityCount := COUNT(PersonEmail.Subject.PersonPerson.ToPerson(HighRiskDeathPriorToAllEvents=1){LexId});  // Count within cluster of death 5+ years prior to all input
Email: => ClEventCount := COUNT(PersonEmail.Subject.PersonPerson.ToPerson.PersonEvent{Transaction}); //  // Count within cluster of all events/transactions
Email: => ClElementCount := 0; 
Email: => ClIdentityCount := COUNT(PersonEmail.Subject.PersonPerson.ToPerson{LexId});  // Count within cluster of Identities within 1 degree (temporarily putting 2nd degree for consistency in the UI) 20180807
Email: => ClIdentityCountDecile := ClIdentityCount$^Decile; 
Email: => ClIdentityCountPercentile := ClIdentityCount$^Percentile; 

Email: => ClNas9IdentityCount := COUNT(PersonEmail.Subject.PersonPerson.ToPerson(Nas9Flag=1){LexId});  // Count within cluster with SSN and Last Name not associated with identity per public records
Email: => ClNap3IdentityCount := COUNT(PersonEmail.Subject.PersonPerson.ToPerson(Nap3Flag=1){LexId}); // Count within cluster of Identities with Phone and Lastname not associated with identity per public records
Email: => ClHighKrIdentityCount := COUNT(PersonEmail.Subject.PersonPerson.ToPerson(KrHighRiskFlag=1){LexId});
Email: => ClActive7IdentityCount := COUNT(PersonEmail.Subject.PersonPerson.ToPerson(VlEvent7ActiveFlag=1){LexId});  // Count within cluster of active identities in the last 7 days.
Email: => ClActive30IdentityCount := COUNT(PersonEmail.Subject.PersonPerson.ToPerson(VlEvent30ActiveFlag=1){LexId});  // Count within cluster of active identities in the last 30 days.

Email: => ClAddressCount := COUNT(PersonEmail.Subject.PersonPerson.ToPerson.PersonAddress.Location(InCustomerPopulation=1));  // Count within cluster of distict addresses within customer population
Email: => ClIdentityEventAvg := CleanSpaces(REALFORMAT(ClEventCount / ClIdentityCount, 6, 2)); // Average number of events/transactions per identity within cluster.

Email: => ClEmailCount := COUNT(PersonEmail.Subject.PersonPerson.ToPerson.PersonEmail{Emailof});
Email: => ClHighRiskEmailCount := COUNT(PersonEmail.Subject.PersonPerson.ToPerson.PersonEmail(Emailof.isdisposableemail=1 OR Emailof.NotSafeLastDomainGt2 = 1){Emailof});
Email: => ClHighRiskEmailTop10 := MAP(ClHighRiskEmailCount > ClHighRiskEmailCount$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);

Email: => ClHighRiskPattern1Flag := MAP(ClIdentityCount > 9 => 1, 0); // High Identity Count Cluster
Email: => ClHighRiskPattern2Flag := MAP(ClNas9IdentityCount > 10 AND ClNap3IdentityCount > 0 => 1, 0); // Pattern of Phone and Addresses not being associated with identities. 
Email: => ClHighRiskPattern3Flag := MAP(ClHighRiskDeathPriorToAllEventsIdentityCount >  0 => 1, 0); // Pattern of associated deceased identities within the cluster.
Email: => ClHighRiskPattern4Flag := MAP(ClIpHighRiskIdentityCount > 4 => 1, 0); // Velocity
Email: => ClHighRiskPattern5Flag := MAP(ClHighKrIdentityCount > 4 => 1, 0); //Known Risk

Email: => ClPRIdentityMatchCount := COUNT(PersonEmail.Subject.PersonPerson(VerifiedPRHit=1).ToPerson.PersonPerson(VerifiedPRHit=1).ToPerson{LexId}); // Count within cluster of Lexid Associates that match PR associates.    
Email: => ClPRIdentityMatchPercent := ClPRIdentityMatchCount / ClIdentityCount; // Percent within cluster of Lexid Associates that match PR associates.    
Email: => ClPRIdentityNoMatch := MAP(ClPRIdentityMatchCount=0 => 1, 0); // There are no relationships that match public records.

Email: => ClNas9IdentityPercent := ClNas9IdentityCount / ClIdentityCount;
Email: => ClNas9Top10 := MAP(ClNas9IdentityPercent > ClNas9IdentityPercent$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);

Email: => ClNas3IdentityPercent := ClNap3IdentityCount / ClIdentityCount;
Email: => ClNas3Top10 := MAP(ClNas3IdentityPercent > ClNas3IdentityPercent$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);

Email: => ClHighRiskDeathPriorToAllEventsIdentityPercent := ClHighRiskDeathPriorToAllEventsIdentityCount / ClIdentityCount;
Email: => ClHighRiskDeathPriorToAllEventsIdentityTop10 := MAP(ClHighRiskDeathPriorToAllEventsIdentityPercent > ClHighRiskDeathPriorToAllEventsIdentityPercent$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);

Email: => ClIpHighRiskIdentityPercent := ClIpHighRiskIdentityCount / ClIdentityCount;
Email: => ClIpHighRiskIdentityTop10 := MAP(ClIpHighRiskIdentityCount > ClIpHighRiskIdentityCount$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);

Email: => ClHighKrIdentityPercent := ClHighKrIdentityCount / ClIdentityCount;
Email: => ClHighKrIdentityTop10 := MAP(ClHighKrIdentityPercent > ClHighKrIdentityPercent$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);

Email: => ClKrNotKnownRiskKnownRiskElementIdentityCount := COUNT(PersonEmail.Subject.PersonPerson.ToPerson(KrNotKnownRiskHasKnownRiskElementFlag=1)); // count of identities that had an element flagged as known risk on their transactions
Email: => ClKrEventAfterKnownRiskIdentityCount := COUNT(PersonEmail.Subject.PersonPerson.ToPerson(KrEventAfterKnownRiskFlag=1)); // count of identities that used a known risk element after the date of known risk

Email: => ClIpHighRiskCount := COUNT(PersonEmail.Subject.PersonPerson.ToPerson.PersonIpAddress(Ip.IpTor=1 OR Ip.IpHosted=1 OR Ip.IpVpn=1 OR Ip.IpNotUs=1){Ip});

Email: => ClIpNotUsIdentityCount := COUNT(PersonEmail.Subject.PersonPerson.ToPerson(IpNotUs=1){LexId});
Email: => ClIpVpnIdentityCount := COUNT(PersonEmail.Subject.PersonPerson.ToPerson(IpVpn=1){LexId});
Email: => ClIpHighRiskCityIdentityCount := COUNT(PersonEmail.Subject.PersonPerson.ToPerson(IpHighRiskCity=1){LexId});
Email: => ClIpHostedIdentityCount := COUNT(PersonEmail.Subject.PersonPerson.ToPerson(IpHosted=1){LexId});
Email: => ClIpTorIdentityCount := COUNT(PersonEmail.Subject.PersonPerson.ToPerson(IpTor=1){LexId});
Email: => ClIpHighRiskIdentityCount := COUNT(PersonEmail.Subject.PersonPerson.ToPerson(IpTor=1 OR IpHosted=1 OR IpVpn=1 OR IpNotUs=1){LexId});


Email: => ClIpNotUsEventCount := COUNT(PersonEmail.Subject.PersonPerson.ToPerson.PersonEvent(Transaction.IpNotUs=1){Transaction});
Email: => ClIpVpnEventCount := COUNT(PersonEmail.Subject.PersonPerson.ToPerson.PersonEvent(Transaction.IpVpn=1){Transaction});
Email: => ClIpHighRiskCityEventCount := COUNT(PersonEmail.Subject.PersonPerson.ToPerson.PersonEvent(Transaction.IpHighRiskCity=1){Transaction});
Email: => ClIpHostedEventCount := COUNT(PersonEmail.Subject.PersonPerson.ToPerson.PersonEvent(Transaction.IpHosted=1){Transaction});
Email: => ClIpTorEventCount := COUNT(PersonEmail.Subject.PersonPerson.ToPerson.PersonEvent(Transaction.IpTor=1){Transaction});

Email: => ClBankIdentityCountGt2Count := COUNT(PersonEmail.Subject.PersonPerson.ToPerson.PersonBankAccount(Account.IdentityCountGt2=1){Account});
Email: => ClBankIdentityCountGt2Top10 := MAP(ClBankIdentityCountGt2Count > ClBankIdentityCountGt2Count$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);

Email: => ClEventCountPercentile := ClEventCount$^Percentile;
Email: => ClActive30IdentityCountPercentile := ClActive30IdentityCount$^Percentile;
Email: => ClActive7IdentityCountPercentile  := ClActive7IdentityCount$^Percentile;

Email: => ClImpactWeight := ((ClIdentityCountPercentile * 0.3) + (ClEventCountPercentile * 0.3) + (ClActive30IdentityCountPercentile * 0.20) + (ClActive7IdentityCountPercentile * 0.20));

Email: => Score := UID % 100;
Email: => ClusterScore := 0;

/* Bank */ 
Bank: => HighRiskRouting := MAP(RoutingNumber IN ['031101169','124071889','124303120','073972181','084003997','114924742','031101169','063115194'] => 1, 0);

/* Bank Account */ 

BankAccount: => CustomerId := rCustomer.CustomerId;
BankAccount: => IndustryType := rCustomer.IndustryType;
BankAccount: => SourceCustomerCount := COUNT(SourceCustomers);
BankAccount: => EntityContextUid := '_19' + OttoBankAccountId;
BankAccount: => EntityType := 19;
BankAccount: => Label := AccountNumber;
BankAccount: => AbbreviatedBankname := rBank.AbbreviatedBankname;
BankAccount: => InCustomerPopulation := MAP(COUNT(SourceCustomers(rSourceCustomer=rCustomer))>0 => 1, 0);
BankAccount: => DtFirstSeen := MIN(BankAccountEvent.Transaction, EventDate);
BankAccount: => DtLastSeen := MAX(BankAccountEvent.Transaction, EventDate);

BankAccount: => IdentityCount := COUNT(PersonBankAccount{Subject});
BankAccount: => IdentityCountGt2 := MAP(IdentityCount > 2 => 1, 0);

BankAccount: => EventCount := COUNT(BankAccountEvent);

// Known Risk 

BankAccount: => HighRiskRouting := rBank.HighRiskRouting;
BankAccount: => KrHighRiskFlag := MAP(COUNT(BankAccountEvent.Transaction(KrHighRiskBankFlag=1)) > 0 => 1, 0);
BankAccount: => KrMediumRiskFlag := MAP(COUNT(BankAccountEvent.Transaction(KrMediumRiskBankFlag=1))>0 => 1, 0);
BankAccount: => KrLowRiskFlag := MAP(COUNT(BankAccountEvent.Transaction(KrLowRiskBankFlag=1))>0 => 1, 0);
BankAccount: => SafeFlag := MAP(COUNT(BankAccountEvent.Transaction(SafeFlag=1))>0 => 1, 0);
BankAccount: => ContributorSafeFlag := MAP(COUNT(BankAccountEvent.Transaction(ContributorSafeFlag=1))>0 => 1, 0);

BankAccount: => LastEventDate := MAX(BankAccountEvent.Transaction, EventDate);
BankAccount: => KrLastEventDate := MAX(BankAccountEvent.Transaction(KrHighRiskBankFlag=1 OR KrMediumRiskBankFlag = 1 OR KrLowRiskBankFlag=1), EventDate);
BankAccount: => KrEventAfterLastKnownRiskCount := COUNT(BankAccountEvent(Transaction.EventDate > BankAccount.KrLastEventDate));
BankAccount: => KrEventAfterLastKnownRiskFlag := MAP(KrEventAfterLastKnownRiskCount>0=>1, 0);

BankAccount: => KrBnk800Flag := MAP(COUNT(BankAccountEvent.Transaction(KrBnk800Flag=1))>0 => 1, 0);
BankAccount: => KrBnk801Flag := MAP(COUNT(BankAccountEvent.Transaction(KrBnk801Flag=1))>0 => 1, 0);
BankAccount: => KrBnk802Flag := MAP(COUNT(BankAccountEvent.Transaction(KrBnk802Flag=1))>0 => 1, 0);
BankAccount: => KrBnk890Flag := MAP(COUNT(BankAccountEvent.Transaction(KrBnk890Flag=1))>0 => 1, 0);
BankAccount: => KrBnk891Flag := MAP(COUNT(BankAccountEvent.Transaction(KrBnk891Flag=1))>0 => 1, 0);
BankAccount: => KrBnk892Flag := MAP(COUNT(BankAccountEvent.Transaction(KrBnk892Flag=1))>0 => 1, 0);
BankAccount: => KrBnk893Flag := MAP(COUNT(BankAccountEvent.Transaction(KrBnk893Flag=1))>0 => 1, 0);

// Velocity
BankAccount: => VlEvent1AllCount := COUNT(BankAccountEvent.Transaction(Age<2));
BankAccount: => VlEvent7AllCount := COUNT(BankAccountEvent.Transaction(Age<8));
BankAccount: => VlEvent30AllDayCount := COUNT(BankAccountEvent.Transaction(Age<31));
BankAccount: => VlEvent365AllDayCount := COUNT(BankAccountEvent.Transaction(Age<366));

BankAccount: => VlEvent7AllActiveFlag := MAP(VlEvent7AllCount > 0 => 1, 0);
BankAccount: => VlEvent30AllActiveFlag := MAP(VlEvent30AllDayCount > 0 => 1, 0);

BankAccount: => VlEvent1Count := COUNT(BankAccountEvent.Transaction(InCustomerPopulation = 1 AND Age<2));
BankAccount: => VlEvent7Count := COUNT(BankAccountEvent.Transaction(InCustomerPopulation = 1 AND Age<8));
BankAccount: => VlEvent30Count := COUNT(BankAccountEvent.Transaction(InCustomerPopulation = 1 AND Age<31));
BankAccount: => VlEvent365Count := COUNT(BankAccountEvent.Transaction(InCustomerPopulation = 1 AND Age<366));

BankAccount: => VlEvent7ActiveFlag := MAP(VlEvent7Count > 0 => 1, 0);
BankAccount: => VlEvent30ActiveFlag := MAP(VlEvent30Count > 0 => 1, 0);

// Cluster Attributes
BankAccount: => ClAdjacentSafeIdentityCount := COUNT(PersonBankAccount.Subject(SafeFlag=1));
BankAccount: => ClAdjacentSafeFlag := MAP(ClAdjacentSafeIdentityCount > 0 => 1, 0);
BankAccount: => ClAdjacentNoSafeFlag := MAP(ClAdjacentSafeIdentityCount = 0 => 1, 0);

  // Adjacent high volume 
BankAccount: => ClIpHighIdentityCount := COUNT(PersonBankAccount.Subject.PersonPerson.ToPerson.PersonIpAddress(Ip.IdentityCount>10){Ip});
BankAccount: => ClSsnHighIdentityCount := COUNT(PersonBankAccount.Subject.PersonPerson.ToPerson.PersonSSN(Social.IdentityCount>10){Social});
BankAccount: => ClPhoneHighIdentityCount := COUNT(PersonBankAccount.Subject.PersonPerson.ToPerson.PersonPhone(PhoneNumber.IdentityCount>10){PhoneNumber});
BankAccount: => ClEmailHighIdentityCount := COUNT(PersonBankAccount.Subject.PersonPerson.ToPerson.PersonEmail(Emailof.IdentityCount>10){Emailof});
BankAccount: => ClBankAccountHighIdentityCount := COUNT(PersonBankAccount.Subject.PersonPerson.ToPerson.PersonBankAccount(Account.IdentityCount>10){Account});
BankAccount: => ClDriversLicenseHighIdentityCount := COUNT(PersonBankAccount.Subject.PersonPerson.ToPerson.PersonDriversLicense(License.IdentityCount>10){License});
BankAccount: => ClAddressHighIdentityCount := COUNT(PersonBankAccount.Subject.PersonPerson.ToPerson.PersonAddress(Location.IdentityCount>10){Location});

BankAccount: => ClHighRiskRoutingCount := COUNT(PersonBankAccount.Subject.PersonPerson.ToPerson(KrHighRiskRouting=1){LexId}); // Count of Identities with high risk bank account routing.

BankAccount: => ClNoLexIdGt22Count := COUNT(PersonBankAccount.Subject.PersonPerson.ToPerson(NoLexIdGt22=1){LexId}); // Count within cluster of identities with no lexid and older than 22.
BankAccount: => ClDeathPriorToAllEventsIdentityCount := COUNT(PersonBankAccount.Subject.PersonPerson.ToPerson(DeathPriorToAllEvents=1){LexId}); // Count within cluster of identities that were deceased prior to all input. 
BankAccount: => ClHighRiskDeathPriorToAllEventsIdentityCount := COUNT(PersonBankAccount.Subject.PersonPerson.ToPerson(HighRiskDeathPriorToAllEvents=1){LexId});  // Count within cluster of death 5+ years prior to all input
BankAccount: => ClEventCount := COUNT(PersonBankAccount.Subject.PersonPerson.ToPerson.PersonEvent{Transaction}); //  // Count within cluster of all events/transactions
BankAccount: => ClElementCount := 0; 
BankAccount: => ClIdentityCount := COUNT(PersonBankAccount.Subject.PersonPerson.ToPerson{LexId});  // Count within cluster of Identities within 1 degree (temporarily putting 2nd degree for consistency in the UI) 20180807
BankAccount: => ClIdentityCountDecile := ClIdentityCount$^Decile; 
BankAccount: => ClIdentityCountPercentile := ClIdentityCount$^Percentile; 

BankAccount: => ClNas9IdentityCount := COUNT(PersonBankAccount.Subject.PersonPerson.ToPerson(Nas9Flag=1){LexId});  // Count within cluster with SSN and Last Name not associated with identity per public records
BankAccount: => ClNap3IdentityCount := COUNT(PersonBankAccount.Subject.PersonPerson.ToPerson(Nap3Flag=1){LexId}); // Count within cluster of Identities with Phone and Lastname not associated with identity per public records

BankAccount: => ClActive7IdentityCount := COUNT(PersonBankAccount.Subject.PersonPerson.ToPerson(VlEvent7ActiveFlag=1){LexId});  // Count within cluster of active identities in the last 7 days.
BankAccount: => ClActive30IdentityCount := COUNT(PersonBankAccount.Subject.PersonPerson.ToPerson(VlEvent30ActiveFlag=1){LexId});  // Count within cluster of active identities in the last 30 days.

BankAccount: => ClAddressCount := COUNT(PersonBankAccount.Subject.PersonPerson.ToPerson.PersonAddress.Location(InCustomerPopulation=1));  // Count within cluster of distict addresses within customer population
BankAccount: => ClIdentityEventAvg := CleanSpaces(REALFORMAT(ClEventCount / ClIdentityCount, 6, 2)); // Average number of events/transactions per identity within cluster.

BankAccount: => ClEmailCount := COUNT(PersonBankAccount.Subject.PersonPerson.ToPerson.PersonEmail{Emailof});
BankAccount: => ClHighRiskEmailCount := COUNT(PersonBankAccount.Subject.PersonPerson.ToPerson.PersonEmail(Emailof.isdisposableemail=1 OR Emailof.NotSafeLastDomainGt2 = 1){Emailof});
BankAccount: => ClHighRiskEmailTop10 := MAP(ClHighRiskEmailCount > ClHighRiskEmailCount$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);

BankAccount: => ClHighRiskPattern1Flag := MAP(ClIdentityCount > 9 => 1, 0); // High Identity Count Cluster
BankAccount: => ClHighRiskPattern2Flag := MAP(ClNas9IdentityCount > 10 AND ClNap3IdentityCount > 0 => 1, 0); // Pattern of Phone and Addresses not being associated with identities. 
BankAccount: => ClHighRiskPattern3Flag := MAP(ClHighRiskDeathPriorToAllEventsIdentityCount >  0 => 1, 0); // Pattern of associated deceased identities within the cluster.
BankAccount: => ClHighRiskPattern4Flag := MAP(ClIpHighRiskIdentityCount > 4 => 1, 0); // Velocity
BankAccount: => ClHighRiskPattern5Flag := MAP(ClHighKrIdentityCount > 4 => 1, 0); //Known Risk

BankAccount: => ClPRIdentityMatchCount := COUNT(PersonBankAccount.Subject.PersonPerson(VerifiedPRHit=1).ToPerson.PersonPerson(VerifiedPRHit=1).ToPerson{LexId}); // Count within cluster of Lexid Associates that match PR associates.    
BankAccount: => ClPRIdentityMatchPercent := ClPRIdentityMatchCount / ClIdentityCount; // Percent within cluster of Lexid Associates that match PR associates.    
BankAccount: => ClPRIdentityNoMatch := MAP(ClPRIdentityMatchCount=0 => 1, 0); // There are no relationships that match public records.

BankAccount: => ClNas9IdentityPercent := ClNas9IdentityCount / ClIdentityCount;
BankAccount: => ClNas9Top10 := MAP(ClNas9IdentityPercent > ClNas9IdentityPercent$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);

BankAccount: => ClNas3IdentityPercent := ClNap3IdentityCount / ClIdentityCount;
BankAccount: => ClNas3Top10 := MAP(ClNas3IdentityPercent > ClNas3IdentityPercent$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);

BankAccount: => ClHighRiskDeathPriorToAllEventsIdentityPercent := ClHighRiskDeathPriorToAllEventsIdentityCount / ClIdentityCount;
BankAccount: => ClHighRiskDeathPriorToAllEventsIdentityTop10 := MAP(ClHighRiskDeathPriorToAllEventsIdentityPercent > ClHighRiskDeathPriorToAllEventsIdentityPercent$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);

BankAccount: => ClIpHighRiskIdentityPercent := ClIpHighRiskIdentityCount / ClIdentityCount;

BankAccount: => ClHighKrIdentityCount := COUNT(PersonBankAccount.Subject.PersonPerson.ToPerson(KrHighRiskFlag=1){LexId});

BankAccount: => ClIpHighRiskIdentityTop10 := MAP(ClIpHighRiskIdentityCount > ClIpHighRiskIdentityCount$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);

BankAccount: => ClHighKrIdentityPercent := ClHighKrIdentityCount / ClIdentityCount;
BankAccount: => ClHighKrIdentityTop10 := MAP(ClHighKrIdentityPercent > ClHighKrIdentityPercent$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);

BankAccount: => ClKrNotKnownRiskKnownRiskElementIdentityCount := COUNT(PersonBankAccount.Subject.PersonPerson.ToPerson(KrNotKnownRiskHasKnownRiskElementFlag=1)); // count of identities that had an element flagged as known risk on their transactions
BankAccount: => ClKrEventAfterKnownRiskIdentityCount := COUNT(PersonBankAccount.Subject.PersonPerson.ToPerson(KrEventAfterKnownRiskFlag=1)); // count of identities that used a known risk element after the date of known risk

BankAccount: => ClIpNotUsIdentityCount := COUNT(PersonBankAccount.Subject.PersonPerson.ToPerson(IpNotUs=1){LexId});
BankAccount: => ClIpVpnIdentityCount := COUNT(PersonBankAccount.Subject.PersonPerson.ToPerson(IpVpn=1){LexId});
BankAccount: => ClIpHighRiskCityIdentityCount := COUNT(PersonBankAccount.Subject.PersonPerson.ToPerson(IpHighRiskCity=1){LexId});
BankAccount: => ClIpHostedIdentityCount := COUNT(PersonBankAccount.Subject.PersonPerson.ToPerson(IpHosted=1){LexId});
BankAccount: => ClIpTorIdentityCount := COUNT(PersonBankAccount.Subject.PersonPerson.ToPerson(IpTor=1){LexId});
BankAccount: => ClIpHighRiskIdentityCount := COUNT(PersonBankAccount.Subject.PersonPerson.ToPerson(IpTor=1 OR IpHosted=1 OR IpVpn=1 OR IpNotUs=1){LexId});

BankAccount: => ClIpHighRiskCount := COUNT(PersonBankAccount.Subject.PersonPerson.ToPerson.PersonIpAddress(Ip.IpTor=1 OR Ip.IpHosted=1 OR Ip.IpVpn=1 OR Ip.IpNotUs=1){Ip});

BankAccount: => ClIpNotUsEventCount := COUNT(PersonBankAccount.Subject.PersonPerson.ToPerson.PersonEvent(Transaction.IpNotUs=1){Transaction});
BankAccount: => ClIpVpnEventCount := COUNT(PersonBankAccount.Subject.PersonPerson.ToPerson.PersonEvent(Transaction.IpVpn=1){Transaction});
BankAccount: => ClIpHighRiskCityEventCount := COUNT(PersonBankAccount.Subject.PersonPerson.ToPerson.PersonEvent(Transaction.IpHighRiskCity=1){Transaction});
BankAccount: => ClIpHostedEventCount := COUNT(PersonBankAccount.Subject.PersonPerson.ToPerson.PersonEvent(Transaction.IpHosted=1){Transaction});
BankAccount: => ClIpTorEventCount := COUNT(PersonBankAccount.Subject.PersonPerson.ToPerson.PersonEvent(Transaction.IpTor=1){Transaction});

BankAccount: => ClBankIdentityCountGt2Count := COUNT(PersonBankAccount.Subject.PersonPerson.ToPerson.PersonBankAccount(Account.IdentityCountGt2=1){Account});
BankAccount: => ClBankIdentityCountGt2Top10 := MAP(ClBankIdentityCountGt2Count > ClBankIdentityCountGt2Count$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);

BankAccount: => ClEventCountPercentile := ClEventCount$^Percentile;
BankAccount: => ClActive30IdentityCountPercentile := ClActive30IdentityCount$^Percentile;
BankAccount: => ClActive7IdentityCountPercentile  := ClActive7IdentityCount$^Percentile;

BankAccount: => ClImpactWeight := ((ClIdentityCountPercentile * 0.3) + (ClEventCountPercentile * 0.3) + (ClActive30IdentityCountPercentile * 0.20) + (ClActive7IdentityCountPercentile * 0.20));


BankAccount: => Score := UID % 100;
BankAccount: => ClusterScore := 0;

/* DRIVERS LICENCE */

DriversLicense: => CustomerId := rCustomer.CustomerId;
DriversLicense: => IndustryType := rCustomer.IndustryType;
DriversLicense: => SourceCustomerCount := COUNT(SourceCustomers);
DriversLicense: => EntityContextUid := '_20' + OttoDriversLicenseId;
DriversLicense: => EntityType := 20;
DriversLicense: => Label := LicenseNumber;
DriversLicense: => InCustomerPopulation := MAP(COUNT(SourceCustomers(rSourceCustomer=rCustomer))>0 => 1, 0);
DriversLicense: => DtFirstSeen := MIN(DriversLicenseEvent.Transaction, EventDate);
DriversLicense: => DtLastSeen := MAX(DriversLicenseEvent.Transaction, EventDate);

DriversLicense: => IdentityCount := COUNT(PersonDriversLicense{Subject});
DriversLicense: => IdentityCountGt2 := MAP(IdentityCount > 2 => 1, 0);
DriversLicense: => EventCount := COUNT(DriversLicenseEvent);

// Hri Risk 

DriversLicense: => Hri41Flag := MAP(COUNT(DriversLicenseEvent.Transaction(Hri41Flag=1)) > 0 => 1, 0);
DriversLicense: => HriDfFlag := MAP(COUNT(DriversLicenseEvent.Transaction(HriDfFlag=1)) > 0 => 1, 0);

// Known Risk 
DriversLicense: => KrHighRiskFlag := MAP(COUNT(DriversLicenseEvent.Transaction(KrHighRiskDlFlag=1)) > 0 => 1, 0);
DriversLicense: => KrMediumRiskFlag := MAP(COUNT(DriversLicenseEvent.Transaction(KrMediumRiskDlFlag=1))>0 => 1, 0);
DriversLicense: => KrLowRiskFlag := MAP(COUNT(DriversLicenseEvent.Transaction(KrLowRiskDlFlag=1))>0 => 1, 0);
DriversLicense: => SafeFlag := MAP(COUNT(DriversLicenseEvent.Transaction(SafeFlag=1))>0 => 1, 0);
DriversLicense: => ContributorSafeFlag := MAP(COUNT(DriversLicenseEvent.Transaction(ContributorSafeFlag=1))>0 => 1, 0);

DriversLicense: => LastEventDate := MAX(DriversLicenseEvent.Transaction, EventDate);
DriversLicense: => KrLastEventDate := MAX(DriversLicenseEvent.Transaction(KrHighRiskDlFlag=1 OR KrMediumRiskDlFlag = 1 OR KrLowRiskDlFlag=1), EventDate);
DriversLicense: => KrEventAfterLastKnownRiskCount := COUNT(DriversLicenseEvent(Transaction.EventDate > DriversLicense.KrLastEventDate));
DriversLicense: => KrEventAfterLastKnownRiskFlag := MAP(KrEventAfterLastKnownRiskCount>0=>1, 0);

DriversLicense: => KrDl200Flag := MAP(COUNT(DriversLicenseEvent.Transaction(KrDl200Flag=1)) > 0 => 1, 0);
DriversLicense: => KrDl201Flag := MAP(COUNT(DriversLicenseEvent.Transaction(KrDl201Flag=1)) > 0 => 1, 0);
DriversLicense: => KrDl202Flag := MAP(COUNT(DriversLicenseEvent.Transaction(KrDl202Flag=1)) > 0 => 1, 0);
DriversLicense: => KrDl203Flag := MAP(COUNT(DriversLicenseEvent.Transaction(KrDl203Flag=1)) > 0 => 1, 0);
DriversLicense: => KrDl204Flag := MAP(COUNT(DriversLicenseEvent.Transaction(KrDl204Flag=1)) > 0 => 1, 0);
DriversLicense: => KrDl290Flag := MAP(COUNT(DriversLicenseEvent.Transaction(KrDl290Flag=1)) > 0 => 1, 0);
DriversLicense: => KrDl291Flag := MAP(COUNT(DriversLicenseEvent.Transaction(KrDl291Flag=1)) > 0 => 1, 0);
DriversLicense: => KrDl292Flag := MAP(COUNT(DriversLicenseEvent.Transaction(KrDl292Flag=1)) > 0 => 1, 0);
DriversLicense: => KrDl293Flag := MAP(COUNT(DriversLicenseEvent.Transaction(KrDl293Flag=1)) > 0 => 1, 0);


// Velocity
DriversLicense: => VlEvent1AllCount := COUNT(DriversLicenseEvent.Transaction(Age<2));
DriversLicense: => VlEvent7AllCount := COUNT(DriversLicenseEvent.Transaction(Age<8));
DriversLicense: => VlEvent30AllDayCount := COUNT(DriversLicenseEvent.Transaction(Age<31));
DriversLicense: => VlEvent365AllDayCount := COUNT(DriversLicenseEvent.Transaction(Age<366));

DriversLicense: => VlEvent7AllActiveFlag := MAP(VlEvent7AllCount > 0 => 1, 0);
DriversLicense: => VlEvent30AllActiveFlag := MAP(VlEvent30AllDayCount > 0 => 1, 0);

DriversLicense: => VlEvent1Count := COUNT(DriversLicenseEvent.Transaction(InCustomerPopulation = 1 AND Age<2));
DriversLicense: => VlEvent7Count := COUNT(DriversLicenseEvent.Transaction(InCustomerPopulation = 1 AND Age<8));
DriversLicense: => VlEvent30Count := COUNT(DriversLicenseEvent.Transaction(InCustomerPopulation = 1 AND Age<31));
DriversLicense: => VlEvent365Count := COUNT(DriversLicenseEvent.Transaction(InCustomerPopulation = 1 AND Age<366));

DriversLicense: => VlEvent7ActiveFlag := MAP(VlEvent7Count > 0 => 1, 0);
DriversLicense: => VlEvent30ActiveFlag := MAP(VlEvent30Count > 0 => 1, 0);

// Cluster Attributes
DriversLicense: => ClAdjacentSafeIdentityCount := COUNT(PersonDriversLicense.Subject(SafeFlag=1));
DriversLicense: => ClAdjacentSafeFlag := MAP(ClAdjacentSafeIdentityCount > 0 => 1, 0);
DriversLicense: => ClAdjacentNoSafeFlag := MAP(ClAdjacentSafeIdentityCount = 0 => 1, 0);

  // Adjacent high volume 
DriversLicense: => ClIpHighIdentityCount := COUNT(PersonDriversLicense.Subject.PersonPerson.ToPerson.PersonIpAddress(Ip.IdentityCount>10){Ip});
DriversLicense: => ClSsnHighIdentityCount := COUNT(PersonDriversLicense.Subject.PersonPerson.ToPerson.PersonSSN(Social.IdentityCount>10){Social});
DriversLicense: => ClPhoneHighIdentityCount := COUNT(PersonDriversLicense.Subject.PersonPerson.ToPerson.PersonPhone(PhoneNumber.IdentityCount>10){PhoneNumber});
DriversLicense: => ClEmailHighIdentityCount := COUNT(PersonDriversLicense.Subject.PersonPerson.ToPerson.PersonEmail(Emailof.IdentityCount>10){Emailof});
DriversLicense: => ClBankAccountHighIdentityCount := COUNT(PersonDriversLicense.Subject.PersonPerson.ToPerson.PersonBankAccount(Account.IdentityCount>10){Account});
DriversLicense: => ClDriversLicenseHighIdentityCount := COUNT(PersonDriversLicense.Subject.PersonPerson.ToPerson.PersonDriversLicense(License.IdentityCount>10){License});
DriversLicense: => ClAddressHighIdentityCount := COUNT(PersonDriversLicense.Subject.PersonPerson.ToPerson.PersonAddress(Location.IdentityCount>10){Location});

DriversLicense: => ClHighRiskRoutingCount := COUNT(PersonDriversLicense.Subject.PersonPerson.ToPerson(KrHighRiskRouting=1){LexId}); // Count of Identities with high risk bank account routing.

DriversLicense: => ClNoLexIdGt22Count := COUNT(PersonDriversLicense.Subject.PersonPerson.ToPerson(NoLexIdGt22=1){LexId}); // Count within cluster of identities with no lexid and older than 22.
DriversLicense: => ClDeathPriorToAllEventsIdentityCount := COUNT(PersonDriversLicense.Subject.PersonPerson.ToPerson(DeathPriorToAllEvents=1){LexId}); // Count within cluster of identities that were deceased prior to all input. 
DriversLicense: => ClHighRiskDeathPriorToAllEventsIdentityCount := COUNT(PersonDriversLicense.Subject.PersonPerson.ToPerson(HighRiskDeathPriorToAllEvents=1){LexId});  // Count within cluster of death 5+ years prior to all input
DriversLicense: => ClEventCount := COUNT(PersonDriversLicense.Subject.PersonPerson.ToPerson.PersonEvent{Transaction}); //  // Count within cluster of all events/transactions
DriversLicense: => ClElementCount := 0; 
DriversLicense: => ClIdentityCount := COUNT(PersonDriversLicense.Subject.PersonPerson.ToPerson{LexId});  // Count within cluster of Identities within 1 degree (temporarily putting 2nd degree for consistency in the UI) 20180807
DriversLicense: => ClIdentityCountDecile := ClIdentityCount$^Decile; 
DriversLicense: => ClIdentityCountPercentile := ClIdentityCount$^Percentile; 

DriversLicense: => ClNas9IdentityCount := COUNT(PersonDriversLicense.Subject.PersonPerson.ToPerson(Nas9Flag=1){LexId});  // Count within cluster with SSN and Last Name not associated with identity per public records
DriversLicense: => ClNap3IdentityCount := COUNT(PersonDriversLicense.Subject.PersonPerson.ToPerson(Nap3Flag=1){LexId}); // Count within cluster of Identities with Phone and Lastname not associated with identity per public records
DriversLicense: => ClHighKrIdentityCount := COUNT(PersonDriversLicense.Subject.PersonPerson.ToPerson(KrHighRiskFlag=1){LexId});
DriversLicense: => ClKrNotKnownRiskKnownRiskElementIdentityCount := COUNT(PersonDriversLicense.Subject.PersonPerson.ToPerson(KrNotKnownRiskHasKnownRiskElementFlag=1)); // count of identities that had an element flagged as known risk on their transactions
DriversLicense: => ClKrEventAfterKnownRiskIdentityCount := COUNT(PersonDriversLicense.Subject.PersonPerson.ToPerson(KrEventAfterKnownRiskFlag=1)); // count of identities that used a known risk element after the date of known risk

DriversLicense: => ClActive7IdentityCount := COUNT(PersonDriversLicense.Subject.PersonPerson.ToPerson(VlEvent7ActiveFlag=1){LexId});  // Count within cluster of active identities in the last 7 days.
DriversLicense: => ClActive30IdentityCount := COUNT(PersonDriversLicense.Subject.PersonPerson.ToPerson(VlEvent30ActiveFlag=1){LexId});  // Count within cluster of active identities in the last 30 days.

DriversLicense: => ClAddressCount := COUNT(PersonDriversLicense.Subject.PersonPerson.ToPerson.PersonAddress.Location(InCustomerPopulation=1));  // Count within cluster of distict addresses within customer population
DriversLicense: => ClIdentityEventAvg := CleanSpaces(REALFORMAT(ClEventCount / ClIdentityCount, 6, 2)); // Average number of events/transactions per identity within cluster.

DriversLicense: => ClEmailCount := COUNT(PersonDriversLicense.Subject.PersonPerson.ToPerson.PersonEmail{Emailof});
DriversLicense: => ClHighRiskEmailCount := COUNT(PersonDriversLicense.Subject.PersonPerson.ToPerson.PersonEmail(Emailof.isdisposableemail=1 OR Emailof.NotSafeLastDomainGt2 = 1){Emailof});
DriversLicense: => ClHighRiskEmailTop10 := MAP(ClHighRiskEmailCount > ClHighRiskEmailCount$GROUP{ClIdentityCountPercentile}:Percentile(70) => 1, 0);

DriversLicense: => ClHighRiskPattern1Flag := MAP(ClIdentityCount > 9 => 1, 0); // High Identity Count Cluster
DriversLicense: => ClHighRiskPattern2Flag := MAP(ClNas9IdentityCount > 10 AND ClNap3IdentityCount > 0 => 1, 0); // Pattern of Phone and Addresses not being associated with identities. 
DriversLicense: => ClHighRiskPattern3Flag := MAP(ClHighRiskDeathPriorToAllEventsIdentityCount >  0 => 1, 0); // Pattern of associated deceased identities within the cluster.
DriversLicense: => ClHighRiskPattern4Flag := MAP(ClIpHighRiskIdentityCount > 4 => 1, 0); // Velocity
DriversLicense: => ClHighRiskPattern5Flag := MAP(ClHighKrIdentityCount > 4 => 1, 0); //Known Risk

DriversLicense: => ClPRIdentityMatchCount := COUNT(PersonDriversLicense.Subject.PersonPerson(VerifiedPRHit=1).ToPerson.PersonPerson(VerifiedPRHit=1).ToPerson{LexId}); // Count within cluster of Lexid Associates that match PR associates.    
DriversLicense: => ClPRIdentityMatchPercent := ClPRIdentityMatchCount / ClIdentityCount; // Percent within cluster of Lexid Associates that match PR associates.    
DriversLicense: => ClPRIdentityNoMatch := MAP(ClPRIdentityMatchCount=0 => 1, 0); // There are no relationships that match public records.

DriversLicense: => ClNas9IdentityPercent := ClNas9IdentityCount / ClIdentityCount;
DriversLicense: => ClNas9Top10 := MAP(ClNas9IdentityPercent > ClNas9IdentityPercent$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);

DriversLicense: => ClNas3IdentityPercent := ClNap3IdentityCount / ClIdentityCount;
DriversLicense: => ClNas3Top10 := MAP(ClNas3IdentityPercent > ClNas3IdentityPercent$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);

DriversLicense: => ClHighRiskDeathPriorToAllEventsIdentityPercent := ClHighRiskDeathPriorToAllEventsIdentityCount / ClIdentityCount;
DriversLicense: => ClHighRiskDeathPriorToAllEventsIdentityTop10 := MAP(ClHighRiskDeathPriorToAllEventsIdentityPercent > ClHighRiskDeathPriorToAllEventsIdentityPercent$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);

DriversLicense: => ClIpHighRiskIdentityPercent := ClIpHighRiskIdentityCount / ClIdentityCount;
DriversLicense: => ClIpHighRiskIdentityTop10 := MAP(ClIpHighRiskIdentityCount > ClIpHighRiskIdentityCount$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);

DriversLicense: => ClHighKrIdentityPercent := ClHighKrIdentityCount / ClIdentityCount;
DriversLicense: => ClHighKrIdentityTop10 := MAP(ClHighKrIdentityPercent > ClHighKrIdentityPercent$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);

DriversLicense: => ClIpNotUsIdentityCount := COUNT(PersonDriversLicense.Subject.PersonPerson.ToPerson(IpNotUs=1){LexId});
DriversLicense: => ClIpVpnIdentityCount := COUNT(PersonDriversLicense.Subject.PersonPerson.ToPerson(IpVpn=1){LexId});
DriversLicense: => ClIpHighRiskCityIdentityCount := COUNT(PersonDriversLicense.Subject.PersonPerson.ToPerson(IpHighRiskCity=1){LexId});
DriversLicense: => ClIpHostedIdentityCount := COUNT(PersonDriversLicense.Subject.PersonPerson.ToPerson(IpHosted=1){LexId});
DriversLicense: => ClIpTorIdentityCount := COUNT(PersonDriversLicense.Subject.PersonPerson.ToPerson(IpTor=1){LexId});
DriversLicense: => ClIpHighRiskIdentityCount := COUNT(PersonDriversLicense.Subject.PersonPerson.ToPerson(IpTor=1 OR IpHosted=1 OR IpVpn=1 OR IpNotUs=1){LexId});

DriversLicense: => ClIpHighRiskCount := COUNT(PersonDriversLicense.Subject.PersonPerson.ToPerson.PersonIpAddress(Ip.IpTor=1 OR Ip.IpHosted=1 OR Ip.IpVpn=1 OR Ip.IpNotUs=1){Ip});

DriversLicense: => ClIpNotUsEventCount := COUNT(PersonDriversLicense.Subject.PersonPerson.ToPerson.PersonEvent(Transaction.IpNotUs=1){Transaction});
DriversLicense: => ClIpVpnEventCount := COUNT(PersonDriversLicense.Subject.PersonPerson.ToPerson.PersonEvent(Transaction.IpVpn=1){Transaction});
DriversLicense: => ClIpHighRiskCityEventCount := COUNT(PersonDriversLicense.Subject.PersonPerson.ToPerson.PersonEvent(Transaction.IpHighRiskCity=1){Transaction});
DriversLicense: => ClIpHostedEventCount := COUNT(PersonDriversLicense.Subject.PersonPerson.ToPerson.PersonEvent(Transaction.IpHosted=1){Transaction});
DriversLicense: => ClIpTorEventCount := COUNT(PersonDriversLicense.Subject.PersonPerson.ToPerson.PersonEvent(Transaction.IpTor=1){Transaction});

DriversLicense: => ClBankIdentityCountGt2Count := COUNT(PersonDriversLicense.Subject.PersonPerson.ToPerson.PersonBankAccount(Account.IdentityCountGt2=1){Account});
DriversLicense: => ClBankIdentityCountGt2Top10 := MAP(ClBankIdentityCountGt2Count > ClBankIdentityCountGt2Count$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);

DriversLicense: => ClEventCountPercentile := ClEventCount$^Percentile;
DriversLicense: => ClActive30IdentityCountPercentile := ClActive30IdentityCount$^Percentile;
DriversLicense: => ClActive7IdentityCountPercentile  := ClActive7IdentityCount$^Percentile;

DriversLicense: => ClImpactWeight := ((ClIdentityCountPercentile * 0.3) + (ClEventCountPercentile * 0.3) + (ClActive30IdentityCountPercentile * 0.20) + (ClActive7IdentityCountPercentile * 0.20));

DriversLicense: => Score := UID % 100;
DriversLicense: => ClusterScore := 0;


/* IP ADDRESS */

InternetProtocol: => CustomerId := rCustomer.CustomerId;
InternetProtocol: => IndustryType := rCustomer.IndustryType;
InternetProtocol: => SourceCustomerCount := COUNT(SourceCustomers);
InternetProtocol: => EntityContextUid := '_18' + OttoIpAddressId;
InternetProtocol: => Label := IpAddress;
InternetProtocol: => EntityType := 18;
InternetProtocol: => InCustomerPopulation := MAP(COUNT(SourceCustomers(rSourceCustomer=rCustomer))>0 => 1, 0);
InternetProtocol: => DtFirstSeen := MIN(InternetProtocolEvent.Transaction, EventDate);
InternetProtocol: => DtLastSeen := MAX(InternetProtocolEvent.Transaction, EventDate);


InternetProtocol: => IdentityCount := COUNT(PersonIpAddress{Subject});
InternetProtocol: => EventCount := COUNT(InternetProtocolEvent);

InternetProtocol: => IpNotUs := MAP(COUNT(InternetProtocolEvent.Transaction(IpNotUs=1))>0 => 1, 0); 
InternetProtocol: => IpVpn := MAP(COUNT(InternetProtocolEvent.Transaction(IpVpn=1))>0 => 1, 0); 
InternetProtocol: => IpHighRiskCity := MAP(COUNT(InternetProtocolEvent.Transaction(IpHighRiskCity=1))>0 => 1, 0); 
InternetProtocol: => IpHosted := MAP(COUNT(InternetProtocolEvent.Transaction(IpHosted=1))>0 => 1, 0); 
InternetProtocol: => IpTor := MAP(COUNT(InternetProtocolEvent.Transaction(IpTor=1))>0 => 1, 0); 

// Known Risk 
InternetProtocol: => KrHighRiskFlag := MAP(COUNT(InternetProtocolEvent.Transaction(KrHighRiskIpAddressFlag=1)) > 0 => 1, 0);
InternetProtocol: => KrMediumRiskFlag := MAP(COUNT(InternetProtocolEvent.Transaction(KrMediumRiskIpAddressFlag=1)) > 0 => 1, 0);
InternetProtocol: => KrLowRiskFlag := MAP(COUNT(InternetProtocolEvent.Transaction(KrLowRiskIpAddressFlag=1)) > 0 => 1, 0);
InternetProtocol: => SafeFlag := MAP(COUNT(InternetProtocolEvent.Transaction(SafeFlag=1))>0 => 1, 0);
InternetProtocol: => ContributorSafeFlag := MAP(COUNT(InternetProtocolEvent.Transaction(ContributorSafeFlag=1))>0 => 1, 0);

InternetProtocol: => KrIp600Flag := MAP(COUNT(InternetProtocolEvent.Transaction(KrIp600Flag=1))>0 => 1, 0);
InternetProtocol: => KrIp601Flag := MAP(COUNT(InternetProtocolEvent.Transaction(KrIp601Flag=1))>0 => 1, 0);
InternetProtocol: => KrIp602Flag := MAP(COUNT(InternetProtocolEvent.Transaction(KrIp602Flag=1))>0 => 1, 0);
InternetProtocol: => KrIp603Flag := MAP(COUNT(InternetProtocolEvent.Transaction(KrIp603Flag=1))>0 => 1, 0);
InternetProtocol: => KrIp604Flag := MAP(COUNT(InternetProtocolEvent.Transaction(KrIp604Flag=1))>0 => 1, 0);
InternetProtocol: => KrIp605Flag := MAP(COUNT(InternetProtocolEvent.Transaction(KrIp605Flag=1))>0 => 1, 0);
InternetProtocol: => KrIp690Flag := MAP(COUNT(InternetProtocolEvent.Transaction(KrIp690Flag=1))>0 => 1, 0);
InternetProtocol: => KrIp691Flag := MAP(COUNT(InternetProtocolEvent.Transaction(KrIp691Flag=1))>0 => 1, 0);
InternetProtocol: => KrIp692Flag := MAP(COUNT(InternetProtocolEvent.Transaction(KrIp692Flag=1))>0 => 1, 0);
InternetProtocol: => KrIp693Flag := MAP(COUNT(InternetProtocolEvent.Transaction(KrIp693Flag=1))>0 => 1, 0);
InternetProtocol: => KrIp1000Flag := MAP(COUNT(InternetProtocolEvent.Transaction(KrIp1000Flag=1))>0 => 1, 0);
InternetProtocol: => KrIp1001Flag := MAP(COUNT(InternetProtocolEvent.Transaction(KrIp1001Flag=1))>0 => 1, 0);
InternetProtocol: => KrIp1090Flag := MAP(COUNT(InternetProtocolEvent.Transaction(KrIp1090Flag=1))>0 => 1, 0);
InternetProtocol: => KrIp1091Flag := MAP(COUNT(InternetProtocolEvent.Transaction(KrIp1091Flag=1))>0 => 1, 0);
InternetProtocol: => KrIp1092Flag := MAP(COUNT(InternetProtocolEvent.Transaction(KrIp1092Flag=1))>0 => 1, 0);
InternetProtocol: => KrIp1093Flag := MAP(COUNT(InternetProtocolEvent.Transaction(KrIp1093Flag=1))>0 => 1, 0);


InternetProtocol: => LastEventDate := MAX(InternetProtocolEvent.Transaction, EventDate);
InternetProtocol: => KrLastEventDate := MAX(InternetProtocolEvent.Transaction(KrHighRiskIpAddressFlag=1 OR KrMediumRiskIpAddressFlag=1 OR KrLowRiskIpAddressFlag=1), EventDate);
InternetProtocol: => KrEventAfterLastKnownRiskCount := COUNT(InternetProtocolEvent(Transaction.EventDate > InternetProtocol.KrLastEventDate));
InternetProtocol: => KrEventAfterLastKnownRiskFlag := MAP(KrEventAfterLastKnownRiskCount>0=>1, 0);

// Velocity

InternetProtocol: => VlEvent1AllCount := COUNT(InternetProtocolEvent.Transaction(Age<2));
InternetProtocol: => VlEvent7AllCount := COUNT(InternetProtocolEvent.Transaction(Age<8));
InternetProtocol: => VlEvent30AllDayCount := COUNT(InternetProtocolEvent.Transaction(Age<31));
InternetProtocol: => VlEvent365AllDayCount := COUNT(InternetProtocolEvent.Transaction(Age<366));

InternetProtocol: => VlEvent7AllActiveFlag := MAP(VlEvent7AllCount > 0 => 1, 0);
InternetProtocol: => VlEvent30AllActiveFlag := MAP(VlEvent30AllDayCount > 0 => 1, 0);

InternetProtocol: => VlEvent1Count := COUNT(InternetProtocolEvent.Transaction(InCustomerPopulation = 1 AND Age<2));
InternetProtocol: => VlEvent7Count := COUNT(InternetProtocolEvent.Transaction(InCustomerPopulation = 1 AND Age<8));
InternetProtocol: => VlEvent30Count := COUNT(InternetProtocolEvent.Transaction(InCustomerPopulation = 1 AND Age<31));
InternetProtocol: => VlEvent365Count := COUNT(InternetProtocolEvent.Transaction(InCustomerPopulation = 1 AND Age<366));

InternetProtocol: => VlEvent7ActiveFlag := MAP(VlEvent7Count > 0 => 1, 0);
InternetProtocol: => VlEvent30ActiveFlag := MAP(VlEvent30Count > 0 => 1, 0);
   

// Cluster Attributes 
InternetProtocol: => ClAdjacentSafeIdentityCount := COUNT(PersonIpAddress.Subject(SafeFlag=1));
InternetProtocol: => ClAdjacentSafeFlag := MAP(ClAdjacentSafeIdentityCount > 0 => 1, 0);
InternetProtocol: => ClAdjacentNoSafeFlag := MAP(ClAdjacentSafeIdentityCount = 0 => 1, 0);

  // Adjacent high volume 
InternetProtocol: => ClIpHighIdentityCount := COUNT(PersonIpAddress.Subject.PersonPerson.ToPerson.PersonIpAddress(Ip.IdentityCount>10){Ip});
InternetProtocol: => ClSsnHighIdentityCount := COUNT(PersonIpAddress.Subject.PersonPerson.ToPerson.PersonSSN(Social.IdentityCount>10){Social});
InternetProtocol: => ClPhoneHighIdentityCount := COUNT(PersonIpAddress.Subject.PersonPerson.ToPerson.PersonPhone(PhoneNumber.IdentityCount>10){PhoneNumber});
InternetProtocol: => ClEmailHighIdentityCount := COUNT(PersonIpAddress.Subject.PersonPerson.ToPerson.PersonEmail(Emailof.IdentityCount>10){Emailof});
InternetProtocol: => ClBankAccountHighIdentityCount := COUNT(PersonIpAddress.Subject.PersonPerson.ToPerson.PersonBankAccount(Account.IdentityCount>10){Account});
InternetProtocol: => ClDriversLicenseHighIdentityCount := COUNT(PersonIpAddress.Subject.PersonPerson.ToPerson.PersonDriversLicense(License.IdentityCount>10){License});
InternetProtocol: => ClAddressHighIdentityCount := COUNT(PersonIpAddress.Subject.PersonPerson.ToPerson.PersonAddress(Location.IdentityCount>10){Location});

InternetProtocol: => ClHighRiskRoutingCount := COUNT(PersonIpAddress.Subject.PersonPerson.ToPerson(KrHighRiskRouting=1){LexId}); // Count of Identities with high risk bank account routing.

InternetProtocol: => ClNoLexIdGt22Count := COUNT(PersonIpAddress.Subject.PersonPerson.ToPerson(NoLexIdGt22=1){LexId}); // Count within cluster of identities with no lexid and older than 22.
InternetProtocol: => ClDeathPriorToAllEventsIdentityCount := COUNT(PersonIpAddress.Subject.PersonPerson.ToPerson(DeathPriorToAllEvents=1){LexId}); // Count within cluster of identities that were deceased prior to all input. 
InternetProtocol: => ClHighRiskDeathPriorToAllEventsIdentityCount := COUNT(PersonIpAddress.Subject.PersonPerson.ToPerson(HighRiskDeathPriorToAllEvents=1){LexId});  // Count within cluster of death 5+ years prior to all input
InternetProtocol: => ClEventCount := COUNT(PersonIpAddress.Subject.PersonPerson.ToPerson.PersonEvent{Transaction}); //  // Count within cluster of all events/transactions
InternetProtocol: => ClElementCount := 0; 
InternetProtocol: => ClIdentityCount := COUNT(PersonIpAddress.Subject.PersonPerson.ToPerson{LexId});  // Count within cluster of Identities within 1 degree (temporarily putting 2nd degree for consistency in the UI) 20180807
InternetProtocol: => ClIdentityCountDecile := ClIdentityCount$^Decile; 
InternetProtocol: => ClIdentityCountPercentile := ClIdentityCount$^Percentile; 

InternetProtocol: => ClNas9IdentityCount := COUNT(PersonIpAddress.Subject.PersonPerson.ToPerson(Nas9Flag=1){LexId});  // Count within cluster with SSN and Last Name not associated with identity per public records
InternetProtocol: => ClNap3IdentityCount := COUNT(PersonIpAddress.Subject.PersonPerson.ToPerson(Nap3Flag=1){LexId}); // Count within cluster of Identities with Phone and Lastname not associated with identity per public records
InternetProtocol: => ClHighKrIdentityCount := COUNT(PersonIpAddress.Subject.PersonPerson.ToPerson(KrHighRiskFlag=1){LexId});
InternetProtocol: => ClActive7IdentityCount := COUNT(PersonIpAddress.Subject.PersonPerson.ToPerson(VlEvent7ActiveFlag=1){LexId});  // Count within cluster of active identities in the last 7 days.
InternetProtocol: => ClActive30IdentityCount := COUNT(PersonIpAddress.Subject.PersonPerson.ToPerson(VlEvent30ActiveFlag=1){LexId});  // Count within cluster of active identities in the last 30 days.

InternetProtocol: => ClAddressCount := COUNT(PersonIpAddress.Subject.PersonPerson.ToPerson.PersonAddress.Location(InCustomerPopulation=1));  // Count within cluster of distict addresses within customer population
InternetProtocol: => ClIdentityEventAvg := CleanSpaces(REALFORMAT(ClEventCount / ClIdentityCount, 6, 2)); // Average number of events/transactions per identity within cluster.

InternetProtocol: => ClEmailCount := COUNT(PersonIpAddress.Subject.PersonPerson.ToPerson.PersonEmail{Emailof});
InternetProtocol: => ClHighRiskEmailCount := COUNT(PersonIpAddress.Subject.PersonPerson.ToPerson.PersonEmail(Emailof.isdisposableemail=1 OR Emailof.NotSafeLastDomainGt2 = 1){Emailof});
InternetProtocol: => ClHighRiskEmailTop10 := MAP(ClHighRiskEmailCount > ClHighRiskEmailCount$GROUP{ClIdentityCountPercentile}:Percentile(70) => 1, 0);

InternetProtocol: => ClHighRiskPattern1Flag := MAP(ClIdentityCount > 9 => 1, 0); // High Identity Count Cluster
InternetProtocol: => ClHighRiskPattern2Flag := MAP(ClNas9IdentityCount > 10 AND ClNap3IdentityCount > 0 => 1, 0); // Pattern of Phone and Addresses not being associated with identities. 
InternetProtocol: => ClHighRiskPattern3Flag := MAP(ClHighRiskDeathPriorToAllEventsIdentityCount >  0 => 1, 0); // Pattern of associated deceased identities within the cluster.
InternetProtocol: => ClHighRiskPattern4Flag := MAP(ClIpHighRiskIdentityCount > 4 => 1, 0); // Velocity
InternetProtocol: => ClHighRiskPattern5Flag := MAP(ClHighKrIdentityCount > 4 => 1, 0); //Known Risk

InternetProtocol: => ClPRIdentityMatchCount := COUNT(PersonIpAddress.Subject.PersonPerson(VerifiedPRHit=1).ToPerson.PersonPerson(VerifiedPRHit=1).ToPerson{LexId}); // Count within cluster of Lexid Associates that match PR associates.    
InternetProtocol: => ClPRIdentityMatchPercent := ClPRIdentityMatchCount / ClIdentityCount; // Percent within cluster of Lexid Associates that match PR associates.    
InternetProtocol: => ClPRIdentityNoMatch := MAP(ClPRIdentityMatchCount=0 => 1, 0); // There are no relationships that match public records.

InternetProtocol: => ClNas9IdentityPercent := ClNas9IdentityCount / ClIdentityCount;
InternetProtocol: => ClNas9Top10 := MAP(ClNas9IdentityPercent > ClNas9IdentityPercent$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);

InternetProtocol: => ClNas3IdentityPercent := ClNap3IdentityCount / ClIdentityCount;
InternetProtocol: => ClNas3Top10 := MAP(ClNas3IdentityPercent > ClNas3IdentityPercent$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);

InternetProtocol: => ClHighRiskDeathPriorToAllEventsIdentityPercent := ClHighRiskDeathPriorToAllEventsIdentityCount / ClIdentityCount;
InternetProtocol: => ClHighRiskDeathPriorToAllEventsIdentityTop10 := MAP(ClHighRiskDeathPriorToAllEventsIdentityPercent > ClHighRiskDeathPriorToAllEventsIdentityPercent$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);

InternetProtocol: => ClIpHighRiskIdentityPercent := ClIpHighRiskIdentityCount / ClIdentityCount;
InternetProtocol: => ClIpHighRiskIdentityTop10 := MAP(ClIpHighRiskIdentityCount > ClIpHighRiskIdentityCount$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);

InternetProtocol: => ClHighKrIdentityPercent := ClHighKrIdentityCount / ClIdentityCount;
InternetProtocol: => ClHighKrIdentityTop10 := MAP(ClHighKrIdentityPercent > ClHighKrIdentityPercent$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);
InternetProtocol: => ClKrNotKnownRiskKnownRiskElementIdentityCount := COUNT(PersonIpAddress.Subject.PersonPerson.ToPerson(KrNotKnownRiskHasKnownRiskElementFlag=1)); // count of identities that had an element flagged as known risk on their transactions
InternetProtocol: => ClKrEventAfterKnownRiskIdentityCount := COUNT(PersonIpAddress.Subject.PersonPerson.ToPerson(KrEventAfterKnownRiskFlag=1)); // count of identities that used a known risk element after the date of known risk

InternetProtocol: => ClIpHighRiskCount := COUNT(PersonIpAddress.Subject.PersonPerson.ToPerson.PersonIpAddress(Ip.IpTor=1 OR Ip.IpHosted=1 OR Ip.IpVpn=1 OR Ip.IpNotUs=1){Ip});

InternetProtocol: => ClIpNotUsIdentityCount := COUNT(PersonIpAddress.Subject.PersonPerson.ToPerson(IpNotUs=1){LexId});
InternetProtocol: => ClIpVpnIdentityCount := COUNT(PersonIpAddress.Subject.PersonPerson.ToPerson(IpVpn=1){LexId});
InternetProtocol: => ClIpHighRiskCityIdentityCount := COUNT(PersonIpAddress.Subject.PersonPerson.ToPerson(IpHighRiskCity=1){LexId});
InternetProtocol: => ClIpHostedIdentityCount := COUNT(PersonIpAddress.Subject.PersonPerson.ToPerson(IpHosted=1){LexId});
InternetProtocol: => ClIpTorIdentityCount := COUNT(PersonIpAddress.Subject.PersonPerson.ToPerson(IpTor=1){LexId});
InternetProtocol: => ClIpHighRiskIdentityCount := COUNT(PersonIpAddress.Subject.PersonPerson.ToPerson(IpTor=1 OR IpHosted=1 OR IpVpn=1 OR IpNotUs=1){LexId});

InternetProtocol: => ClIpNotUsEventCount := COUNT(PersonIpAddress.Subject.PersonPerson.ToPerson.PersonEvent(Transaction.IpNotUs=1){Transaction});
InternetProtocol: => ClIpVpnEventCount := COUNT(PersonIpAddress.Subject.PersonPerson.ToPerson.PersonEvent(Transaction.IpVpn=1){Transaction});
InternetProtocol: => ClIpHighRiskCityEventCount := COUNT(PersonIpAddress.Subject.PersonPerson.ToPerson.PersonEvent(Transaction.IpHighRiskCity=1){Transaction});
InternetProtocol: => ClIpHostedEventCount := COUNT(PersonIpAddress.Subject.PersonPerson.ToPerson.PersonEvent(Transaction.IpHosted=1){Transaction});
InternetProtocol: => ClIpTorEventCount := COUNT(PersonIpAddress.Subject.PersonPerson.ToPerson.PersonEvent(Transaction.IpTor=1){Transaction});

InternetProtocol: => ClBankIdentityCountGt2Count := COUNT(PersonIpAddress.Subject.PersonPerson.ToPerson.PersonBankAccount(Account.IdentityCountGt2=1){Account});
InternetProtocol: => ClBankIdentityCountGt2Top10 := MAP(ClBankIdentityCountGt2Count > ClBankIdentityCountGt2Count$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);

InternetProtocol: => ClEventCountPercentile := ClEventCount$^Percentile;
InternetProtocol: => ClActive30IdentityCountPercentile := ClActive30IdentityCount$^Percentile;
InternetProtocol: => ClActive7IdentityCountPercentile  := ClActive7IdentityCount$^Percentile;

InternetProtocol: => ClImpactWeight := ((ClIdentityCountPercentile * 0.3) + (ClEventCountPercentile * 0.3) + (ClActive30IdentityCountPercentile * 0.20) + (ClActive7IdentityCountPercentile * 0.20));

InternetProtocol: => Score := UID % 100;
InternetProtocol: => ClusterScore := 0;


Address: => CustomerId := rCustomer.CustomerId;
Address: => IndustryType := rCustomer.IndustryType;
Address: => InCustomerPopulation := MAP(COUNT(SourceCustomers(rSourceCustomer=rCustomer))>0 => 1, 0);
Address: => SourceCustomerCount := COUNT(SourceCustomers);
Address: => FullAddress := CleanSpaces(TRIM(TRIM(PrimaryRange) + ' ' + TRIM(TRIM(Predirectional) + ' ' + TRIM(TRIM(PrimaryName) + ' ' + TRIM(TRIM(Suffix) + ' ' + TRIM(TRIM(Postdirectional) + ' ' + TRIM(TRIM(UnitDesignation) + ' ' + TRIM(TRIM(SecondaryRange) + ' ' + TRIM(TRIM(VanityCity) + ' ' + TRIM(State))))))))));
Address: => StreetAddress := CleanSpaces(TRIM(TRIM(PrimaryRange) + ' ' + TRIM(TRIM(Predirectional) + ' ' + TRIM(TRIM(PrimaryName) + ' ' + TRIM(TRIM(Suffix) + ' ' + TRIM(TRIM(Postdirectional) + ' ' + TRIM(TRIM(UnitDesignation) + ' ' + TRIM(TRIM(SecondaryRange)))))))));
Address: => EntityContextUid := '_09' + OttoAddressId;
Address: => EntityType := 9;
Address: => DtFirstSeen := MIN(AddressEvent.Transaction, EventDate);
Address: => DtLastSeen := MAX(AddressEvent.Transaction, EventDate);
Address: => NotInJurisdictionState := MAP(State != rCustomer.JurisdictionState => 1, 0);
Address: => InvalidAddress := MAP(ACECleanerErrorCode IN ['E101','E212','E213','E214','E216','E302','E412','E413','E420','E421','E422','E423','E425','E427','E428','E429','E430','E431','E439','E500','E501','E502','E503','E504','E505','E600'] => 1, 0);
Address: => AddressIsVacant := MAX(AddressEvent, Transaction.AddressIsVacant);
Address: => AddressIsCmra := MAX(AddressEvent, Transaction.AddressIsCmra);
Address: => AddressIsPoBox := MAX(AddressEvent, Transaction.AddressIsPoBox);

Address: => EventCount := COUNT(AddressEvent);

Address: => IdentityCount := COUNT(PersonAddress{Subject});
Address: => HighFrequencyFlag := MAP(IdentityCount >= 20 => 1, 0);

Address: => AllPersonCount := COUNT(PersonAddress);
Address: => AllHighFrequencyFlag := MAP(AllPersonCount >= 20 => 1, 0);

Address: => DeceasedPersonCount := COUNT(PersonAddress(Subject.Deceased = 1 AND Subject.InCustomerPopulation=1));
Address: => DeceasedPersonPercent := DeceasedPersonCount / IdentityCount;

Address: => AllDeceasedPersonCount := COUNT(PersonAddress(Subject.Deceased = 1));
Address: => AllDeceasedPersonPercent := AllDeceasedPersonCount / AllPersonCount;

Address: => DeceasedMatchPersonCount := COUNT(PersonAddress(Subject.Deceased = 1 AND Subject.InCustomerPopulation=1 AND Subject.DeceasedMatch = 1));
Address: => DeceasedMatchPersonPercent := DeceasedMatchPersonCount / IdentityCount;               

Address: => AllDeceasedMatchPersonCount := COUNT(PersonAddress(Subject.Deceased = 1 AND Subject.DeceasedMatch = 1));
Address: => AllDeceasedMatchPersonPercent := AllDeceasedMatchPersonCount / AllPersonCount;               

Address: => HighRiskDeathPriorToAllEventsPersonCount := SUM(PersonAddress(Subject.InCustomerPopulation=1), Subject.HighRiskDeathPriorToAllEvents); 
Address: => HighRiskDeathPriorToAllEventsPersonPercent := HighRiskDeathPriorToAllEventsPersonCount / IdentityCount;

Address: => HighRiskDeathPriorToAllEventsPercentFlag := MAP(HighRiskDeathPriorToAllEventsPersonPercent > 0.10 => 1, 0);

Address: => AllHighRiskDeathPriorToAllEventsPersonCount := SUM(PersonAddress, Subject.HighRiskDeathPriorToAllEvents); 
Address: => AllHighRiskDeathPriorToAllEventsPersonPercent := AllHighRiskDeathPriorToAllEventsPersonCount / IdentityCount;

Address: => AllHighRiskDeathPriorToAllEventsPersonPercentFlag := MAP(AllHighRiskDeathPriorToAllEventsPersonPercent > 0.10 => 1, 0);

Address: => Score := MAX(PersonAddress.Subject, Score);
Address: => ClusterScore := MEDIAN(PersonAddress.Subject, Score);



Address: => Hri11Flag := MAP(COUNT(AddressEvent.Transaction(Hri11Flag=1)) > 0 => 1, 0);
Address: => Hri12Flag := MAP(COUNT(AddressEvent.Transaction(Hri12Flag=1)) > 0 => 1, 0);
Address: => Hri14Flag := MAP(COUNT(AddressEvent.Transaction(Hri14Flag=1)) > 0 => 1, 0);
Address: => Hri25Flag := MAP(COUNT(AddressEvent.Transaction(Hri25Flag=1)) > 0 => 1, 0);
Address: => Hri30Flag := MAP(COUNT(AddressEvent.Transaction(Hri30Flag=1)) > 0 => 1, 0);
Address: => Hri50Flag := MAP(COUNT(AddressEvent.Transaction(Hri50Flag=1)) > 0 => 1, 0);
Address: => HriCoFlag := MAP(COUNT(AddressEvent.Transaction(HriCoFlag=1)) > 0 => 1, 0);
Address: => HriMoFlag := MAP(COUNT(AddressEvent.Transaction(HriMoFlag=1)) > 0 => 1, 0);
Address: => HriPaFlag := MAP(COUNT(AddressEvent.Transaction(HriPaFlag=1)) > 0 => 1, 0);
Address: => HriPoFlag := MAP(COUNT(AddressEvent.Transaction(HriPoFlag=1)) > 0 => 1, 0);
Address: => HriVaFlag := MAP(COUNT(AddressEvent.Transaction(HriVaFlag=1)) > 0 => 1, 0);


// Velocity

Address: => VlEvent1AllCount := COUNT(AddressEvent.Transaction(Age<2));
Address: => VlEvent7AllCount := COUNT(AddressEvent.Transaction(Age<8));
Address: => VlEvent30AllDayCount := COUNT(AddressEvent.Transaction(Age<31));
Address: => VlEvent365AllDayCount := COUNT(AddressEvent.Transaction(Age<366));

Address: => VlEvent7AllActiveFlag := MAP(VlEvent7AllCount > 0 => 1, 0);
Address: => VlEvent30AllActiveFlag := MAP(VlEvent30AllDayCount > 0 => 1, 0);

Address: => VlEvent1Count := COUNT(AddressEvent.Transaction(InCustomerPopulation = 1 AND Age<2));
Address: => VlEvent7Count := COUNT(AddressEvent.Transaction(InCustomerPopulation = 1 AND Age<8));
Address: => VlEvent30Count := COUNT(AddressEvent.Transaction(InCustomerPopulation = 1 AND Age<31));
Address: => VlEvent365Count := COUNT(AddressEvent.Transaction(InCustomerPopulation = 1 AND Age<366));

Address: => VlEvent7ActiveFlag := MAP(VlEvent7Count > 0 => 1, 0);
Address: => VlEvent30ActiveFlag := MAP(VlEvent30Count > 0 => 1, 0);


// Known Risk  
Address: => KrHighRiskFlag := MAP(COUNT(AddressEvent.Transaction(KrHighRiskAddressFlag=1))>0 => 1, 0);
Address: => KrMediumRiskFlag := MAP(COUNT(AddressEvent.Transaction(KrMediumRiskAddressFlag=1))>0 => 1, 0);
Address: => KrLowRiskFlag := MAP(COUNT(AddressEvent.Transaction(KrLowRiskAddressFlag=1))>0 => 1, 0);
Address: => SafeFlag := MAP(COUNT(AddressEvent.Transaction(SafeFlag=1))>0 => 1, 0);
Address: => ContributorSafeFlag := MAP(COUNT(AddressEvent.Transaction(ContributorSafeFlag=1))>0 => 1, 0);

Address: => KrAddr300Flag := MAP(COUNT(AddressEvent.Transaction(KrAddr300Flag=1))>0 => 1, 0);
Address: => KrAddr301Flag := MAP(COUNT(AddressEvent.Transaction(KrAddr301Flag=1))>0 => 1, 0);
Address: => KrAddr302Flag := MAP(COUNT(AddressEvent.Transaction(KrAddr302Flag=1))>0 => 1, 0);
Address: => KrAddr303Flag := MAP(COUNT(AddressEvent.Transaction(KrAddr303Flag=1))>0 => 1, 0);
Address: => KrAddr390Flag := MAP(COUNT(AddressEvent.Transaction(KrAddr390Flag=1))>0 => 1, 0);
Address: => KrAddr391Flag := MAP(COUNT(AddressEvent.Transaction(KrAddr391Flag=1))>0 => 1, 0);
Address: => KrAddr392Flag := MAP(COUNT(AddressEvent.Transaction(KrAddr392Flag=1))>0 => 1, 0);
Address: => KrAddr393Flag := MAP(COUNT(AddressEvent.Transaction(KrAddr393Flag=1))>0 => 1, 0);

Address: => LastEventDate := MAX(AddressEvent.Transaction, EventDate);
Address: => KrLastEventDate := MAX(AddressEvent.Transaction(KrHighRiskAddressFlag=1 OR KrMediumRiskAddressFlag=1 OR KrLowRiskAddressFlag=1), EventDate);
Address: => KrEventAfterLastKnownRiskCount := COUNT(AddressEvent(Transaction.EventDate > Address.KrLastEventDate));
Address: => KrEventAfterLastKnownRiskFlag := MAP(KrEventAfterLastKnownRiskCount>0=>1, 0);

// Cluster Attributes
Address: => ClAdjacentSafeIdentityCount := COUNT(PersonAddress.Subject(SafeFlag=1));
Address: => ClAdjacentSafeFlag := MAP(ClAdjacentSafeIdentityCount > 0 => 1, 0);
Address: => ClAdjacentNoSafeFlag := MAP(ClAdjacentSafeIdentityCount = 0 => 1, 0);

  // Adjacent high volume 
Address: => ClIpHighIdentityCount := COUNT(PersonAddress.Subject.PersonPerson.ToPerson.PersonIpAddress(Ip.IdentityCount>10){Ip});
Address: => ClSsnHighIdentityCount := COUNT(PersonAddress.Subject.PersonPerson.ToPerson.PersonSSN(Social.IdentityCount>10){Social});
Address: => ClPhoneHighIdentityCount := COUNT(PersonAddress.Subject.PersonPerson.ToPerson.PersonPhone(PhoneNumber.IdentityCount>10){PhoneNumber});
Address: => ClEmailHighIdentityCount := COUNT(PersonAddress.Subject.PersonPerson.ToPerson.PersonEmail(Emailof.IdentityCount>10){Emailof});
Address: => ClBankAccountHighIdentityCount := COUNT(PersonAddress.Subject.PersonPerson.ToPerson.PersonBankAccount(Account.IdentityCount>10){Account});
Address: => ClDriversLicenseHighIdentityCount := COUNT(PersonAddress.Subject.PersonPerson.ToPerson.PersonDriversLicense(License.IdentityCount>10){License});
Address: => ClAddressHighIdentityCount := COUNT(PersonAddress.Subject.PersonPerson.ToPerson.PersonAddress(Location.IdentityCount>10){Location});

Address: => ClHighRiskRoutingCount := COUNT(PersonAddress.Subject.PersonPerson.ToPerson(KrHighRiskRouting=1){LexId}); // Count of Identities with high risk bank account routing.

Address: => ClNoLexIdGt22Count := COUNT(PersonAddress.Subject.PersonPerson.ToPerson(NoLexIdGt22=1){LexId}); // Count within cluster of identities with no lexid and older than 22.
Address: => ClDeathPriorToAllEventsIdentityCount := COUNT(PersonAddress.Subject.PersonPerson.ToPerson(DeathPriorToAllEvents=1){LexId}); // Count within cluster of identities that were deceased prior to all input. 
Address: => ClHighRiskDeathPriorToAllEventsIdentityCount := COUNT(PersonAddress.Subject.PersonPerson.ToPerson(HighRiskDeathPriorToAllEvents=1){LexId});  // Count within cluster of death 5+ years prior to all input
Address: => ClEventCount := COUNT(PersonAddress.Subject.PersonPerson.ToPerson.PersonEvent{Transaction}); //  // Count within cluster of all events/transactions
Address: => ClElementCount := 0; 
Address: => ClIdentityCount := COUNT(PersonAddress.Subject.PersonPerson.ToPerson{LexId});  // Count within cluster of Identities within 1 degree (temporarily putting 2nd degree for consistency in the UI) 20180807
Address: => ClIdentityCountDecile := ClIdentityCount$^Decile; 
Address: => ClIdentityCountPercentile := ClIdentityCount$^Percentile; 

Address: => ClNas9IdentityCount := COUNT(PersonAddress.Subject.PersonPerson.ToPerson(Nas9Flag=1){LexId});  // Count within cluster with SSN and Last Name not associated with identity per public records
Address: => ClNap3IdentityCount := COUNT(PersonAddress.Subject.PersonPerson.ToPerson(Nap3Flag=1){LexId}); // Count within cluster of Identities with Phone and Lastname not associated with identity per public records
Address: => ClHighKrIdentityCount := COUNT(PersonAddress.Subject.PersonPerson.ToPerson(KrHighRiskFlag=1){LexId});
Address: => ClActive7IdentityCount := COUNT(PersonAddress.Subject.PersonPerson.ToPerson(VlEvent7ActiveFlag=1){LexId});  // Count within cluster of active identities in the last 7 days.
Address: => ClActive30IdentityCount := COUNT(PersonAddress.Subject.PersonPerson.ToPerson(VlEvent30ActiveFlag=1){LexId});  // Count within cluster of active identities in the last 30 days.

Address: => ClAddressCount := COUNT(PersonAddress.Subject.PersonPerson.ToPerson.PersonAddress.Location(InCustomerPopulation=1));  // Count within cluster of distict addresses within customer population
Address: => ClIdentityEventAvg := CleanSpaces(REALFORMAT(ClEventCount / ClIdentityCount, 6, 2)); // Average number of events/transactions per identity within cluster.

Address: => ClEmailCount := COUNT(PersonAddress.Subject.PersonPerson.ToPerson.PersonEmail{Emailof});
Address: => ClHighRiskEmailCount := COUNT(PersonAddress.Subject.PersonPerson.ToPerson.PersonEmail(Emailof.isdisposableemail=1 OR Emailof.NotSafeLastDomainGt2 = 1){Emailof});
Address: => ClHighRiskEmailTop10 := MAP(ClHighRiskEmailCount > ClHighRiskEmailCount$GROUP{ClIdentityCountPercentile}:Percentile(70) => 1, 0);

Address: => ClHighRiskPattern1Flag := MAP(ClIdentityCount > 9 => 1, 0); // High Identity Count Cluster
Address: => ClHighRiskPattern2Flag := MAP(ClNas9IdentityCount > 10 AND ClNap3IdentityCount > 0 => 1, 0); // Pattern of Phone and Addresses not being associated with identities. 
Address: => ClHighRiskPattern3Flag := MAP(ClHighRiskDeathPriorToAllEventsIdentityCount >  0 => 1, 0); // Pattern of associated deceased identities within the cluster.
Address: => ClHighRiskPattern4Flag := MAP(ClIpHighRiskIdentityCount > 4 => 1, 0); // Velocity
Address: => ClHighRiskPattern5Flag := MAP(ClHighKrIdentityCount > 4 => 1, 0); //Known Risk

Address: => ClPRIdentityMatchCount := COUNT(PersonAddress.Subject.PersonPerson(VerifiedPRHit=1).ToPerson.PersonPerson(VerifiedPRHit=1).ToPerson{LexId}); // Count within cluster of Lexid Associates that match PR associates.    
Address: => ClPRIdentityMatchPercent := ClPRIdentityMatchCount / ClIdentityCount; // Percent within cluster of Lexid Associates that match PR associates.    
Address: => ClPRIdentityNoMatch := MAP(ClPRIdentityMatchCount=0 => 1, 0); // There are no relationships that match public records.

Address: => ClNas9IdentityPercent := ClNas9IdentityCount / ClIdentityCount;
Address: => ClNas9Top10 := MAP(ClNas9IdentityPercent > ClNas9IdentityPercent$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);

Address: => ClNas3IdentityPercent := ClNap3IdentityCount / ClIdentityCount;
Address: => ClNas3Top10 := MAP(ClNas3IdentityPercent > ClNas3IdentityPercent$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);

Address: => ClHighRiskDeathPriorToAllEventsIdentityPercent := ClHighRiskDeathPriorToAllEventsIdentityCount / ClIdentityCount;
Address: => ClHighRiskDeathPriorToAllEventsIdentityTop10 := MAP(ClHighRiskDeathPriorToAllEventsIdentityPercent > ClHighRiskDeathPriorToAllEventsIdentityPercent$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);

Address: => ClIpHighRiskIdentityPercent := ClIpHighRiskIdentityCount / ClIdentityCount;
Address: => ClIpHighRiskIdentityTop10 := MAP(ClIpHighRiskIdentityCount > ClIpHighRiskIdentityCount$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);

Address: => ClHighKrIdentityPercent := ClHighKrIdentityCount / ClIdentityCount;
Address: => ClHighKrIdentityTop10 := MAP(ClHighKrIdentityPercent > ClHighKrIdentityPercent$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);
Address: => ClKrNotKnownRiskKnownRiskElementIdentityCount := COUNT(PersonAddress.Subject.PersonPerson.ToPerson(KrNotKnownRiskHasKnownRiskElementFlag=1)); // count of identities that had an element flagged as known risk on their transactions
Address: => ClKrEventAfterKnownRiskIdentityCount := COUNT(PersonAddress.Subject.PersonPerson.ToPerson(KrEventAfterKnownRiskFlag=1)); // count of identities that used a known risk element after the date of known risk

Address: => ClIpHighRiskCount := COUNT(PersonAddress.Subject.PersonPerson.ToPerson.PersonIpAddress(Ip.IpTor=1 OR Ip.IpHosted=1 OR Ip.IpVpn=1 OR Ip.IpNotUs=1){Ip});

Address: => ClIpNotUsIdentityCount := COUNT(PersonAddress.Subject.PersonPerson.ToPerson(IpNotUs=1){LexId});
Address: => ClIpVpnIdentityCount := COUNT(PersonAddress.Subject.PersonPerson.ToPerson(IpVpn=1){LexId});
Address: => ClIpHighRiskCityIdentityCount := COUNT(PersonAddress.Subject.PersonPerson.ToPerson(IpHighRiskCity=1){LexId});
Address: => ClIpHostedIdentityCount := COUNT(PersonAddress.Subject.PersonPerson.ToPerson(IpHosted=1){LexId});
Address: => ClIpTorIdentityCount := COUNT(PersonAddress.Subject.PersonPerson.ToPerson(IpTor=1){LexId});
Address: => ClIpHighRiskIdentityCount := COUNT(PersonAddress.Subject.PersonPerson.ToPerson(IpTor=1 OR IpHosted=1 OR IpVpn=1 OR IpNotUs=1){LexId});

Address: => ClIpNotUsEventCount := COUNT(PersonAddress.Subject.PersonPerson.ToPerson.PersonEvent(Transaction.IpNotUs=1){Transaction});
Address: => ClIpVpnEventCount := COUNT(PersonAddress.Subject.PersonPerson.ToPerson.PersonEvent(Transaction.IpVpn=1){Transaction});
Address: => ClIpHighRiskCityEventCount := COUNT(PersonAddress.Subject.PersonPerson.ToPerson.PersonEvent(Transaction.IpHighRiskCity=1){Transaction});
Address: => ClIpHostedEventCount := COUNT(PersonAddress.Subject.PersonPerson.ToPerson.PersonEvent(Transaction.IpHosted=1){Transaction});
Address: => ClIpTorEventCount := COUNT(PersonAddress.Subject.PersonPerson.ToPerson.PersonEvent(Transaction.IpTor=1){Transaction});

Address: => ClBankIdentityCountGt2Count := COUNT(PersonAddress.Subject.PersonPerson.ToPerson.PersonBankAccount(Account.IdentityCountGt2=1){Account});
Address: => ClBankIdentityCountGt2Top10 := MAP(ClBankIdentityCountGt2Count > ClBankIdentityCountGt2Count$GROUP{ClIdentityCountPercentile}:Percentile(90) => 1, 0);

Address: => ClEventCountPercentile := ClEventCount$^Percentile;
Address: => ClActive30IdentityCountPercentile := ClActive30IdentityCount$^Percentile;
Address: => ClActive7IdentityCountPercentile  := ClActive7IdentityCount$^Percentile;

Address: => ClImpactWeight := ((ClIdentityCountPercentile * 0.3) + (ClEventCountPercentile * 0.3) + (ClActive30IdentityCountPercentile * 0.20) + (ClActive7IdentityCountPercentile * 0.20));

Customer: => PersonCount := COUNT(PersonAddress(Subject.InCustomerPopulation=1){Subject});
Customer: => AllPersonCount := COUNT(PersonAddress{Subject});
Customer: => DeceasedPersonCount := COUNT(PersonAddress(Subject.InCustomerPopulation=1 AND Subject.Deceased=1){Subject});
Customer: => DeceasedPersonPercent := DeceasedPersonCount / PersonCount;
Customer: => AllDeceasedPersonCount := COUNT(PersonAddress(Subject.Deceased=1){Subject});
Customer: => AllDeceasedPersonPercent := AllDeceasedPersonCount / AllPersonCount;

Customer: => AllDeceasedMatchedPersonCount := COUNT(PersonAddress(Subject.DeceasedMatch=1));
Customer: => AllDeceasedMatchedPercent := AllDeceasedMatchedPersonCount / AllPersonCount;

Customer: => AddressCount := COUNT(PersonAddress(Location.InCustomerPopulation=1){Location});
Customer: => AllAddressCount := COUNT(PersonAddress{Location});
Customer: => HighFrequencyAddressCount := SUM(PersonAddress(Location.InCustomerPopulation=1){Location}, Location.HighFrequencyFlag);
Customer: => AllHighFrequencyAddressCount := SUM(PersonAddress{Location}, Location.HighFrequencyFlag);
Customer: => HighFrequencyAddressPercent := HighFrequencyAddressCount / AddressCount;
Customer: => AllHighFrequencyAddressPercent := AllHighFrequencyAddressCount / AllAddressCount;
Customer: => PersonEventCountAverage := CustomerPerson.Subject.EventCount$Ave;
Customer: => PersonEventCountMedian := CustomerPerson.Subject.EventCount$Median;
Customer: => PersonAddressCountAverage := CustomerPerson.Subject.AddressCount$Ave;
Customer: => PersonAddressCountMedian := CustomerPerson.Subject.AddressCount$Median;

Customer: => JurisdictionStateTop := ONLY(TOPN(States, 1, -StateCount));
Customer: => JurisdictionState := JurisdictionStateTop.State;

Customer: => EventDateMax := MAX(PersonEvent/*(Transaction.EventTypeCount=0)*/, EventDate); // only count non-performance data rows. The reason is that after the fact people will be validating and that will move the max date.


QUERY: Temp <= Event;

/*PersonPerson
{rCustomer, FromPerson.LexId, ToPerson.LexId, PublicRecords,
    ContributoryRecords,
    SameAddressEmailMatch,
    SameAddressSsnMatch,
    SameAddressPhoneNumberMatch,
    NonHighFrequencyAddressCount,
    SameAddressSameDayCount,
    HighFrequencySameAddressSameDayCount,
    SharedAddressCount,
		ToPerson.Deceased,
    ToPerson.DeceasedEventCount,
		ToPerson.DeathPriorToAllEvents
		
    }
;	
*/

QUERY: showCustomerPersonEvent <= Event;
QUERY: showCustomerPerson <= Person;
QUERY: showCustomer <= Customer;
QUERY: showCustomerAddress <= Address;
QUERY: showCustomerAddressPerson <= PersonAddress;
QUERY: showCustomerEmail <= Email;
QUERY: showCustomerInternetProtocol <= InternetProtocol;
QUERY: showCustomerPhone <= Phone;
QUERY: showCustomerSocialSecurityNumber <= SocialSecurityNumber;
QUERY: showCustomerBank <= Bank;
QUERY: showCustomerBankAccount <= BankAccount;
QUERY: showCustomerDriversLicense <= DriversLicense;


// Entities in the correct shape with labels etc..
  // These need to be joined first before the entities are appended together.
//QUERY: showCustomerPersonGraphEntities <= Person{Subject.EntityContextUid, Subject.Label, EntityType := 1}; 
// edges are drawn ONLY FROM PERSON to other entities.

QUERY: showCustomerPersonEntities <= Person
                            {
                              SourceCustomer := rCustomer,
                              rCustomer.CustomerId,
                              rCustomer.IndustryType,
                              EntityContextUid,
                              EntityType,
                              Label,
                              Score,
                              ClusterScore,
                              ClEventCount,
                              ClIdentityCount,
															ClElementCount,
                              ClAddressCount,
                              ClIdentityCountPercentile,
                              ClEventCountPercentile,
                              ClImpactWeight,

                              InCustomerPopulation,
                              ContributorSafeFlag,
                              SafeFlag,

                              ClHighRiskPattern1Flag,
                              ClHighRiskPattern2Flag,
                              ClHighRiskPattern3Flag,
                              ClHighRiskPattern4Flag,
                              ClHighRiskPattern5Flag,

                              KrHighRiskFlag,
                              KrMediumRiskFlag,
                              KrLowRiskFlag,

                              CurrentlyIncarceratedFlag,
                              FraudOffensesFlag,
                              AssociatedWithIncarceratedFlag,
                              AssociatedWithFraudOffensesFlag,
                              
                              DeceasedMatch,
															DateOfBirth,
															DeceasedMatchDateOfDeath,
															Age,
															IsMinor,
															
															
                              DeathPriorToAllEvents,
                              Nas9Flag,
                              Nap3Flag,
															DtFirstSeen,
															DtLastSeen,
                              
                              {
                                // Make this unidirectional so we only draw one edge in the graph between people.
                                PersonPerson(FromPerson < ToPerson).ToPerson.EntityContextUid, PersonPerson(FromPerson < ToPerson).ToPerson.DtFirstSeen, PersonPerson(FromPerson < ToPerson).ToPerson.DtLastSeen
                              },
															
                              {
                                PersonAddress.Location.EntityContextUid, PersonAddress.DtFirstSeen, PersonAddress.DtLastSeen
                              },
															{
															  PersonIpAddress.Ip.EntityContextUid, PersonIpAddress.DtFirstSeen, PersonIpAddress.DtLastSeen
															},
                              {
															  PersonSSN.Social.EntityContextUid, PersonSSN.DtFirstSeen, PersonSSN.DtLastSeen
															},
															{
															 PersonPhone.PhoneNumber.EntityContextUid, PersonPhone.DtFirstSeen, PersonPhone.DtLastSeen
															},
                              {
                               PersonEmail.Emailof.EntityContextUid, PersonEmail.DtFirstSeen, PersonEmail.DtLastSeen
                              },
                              {
                               PersonBankAccount.Account.EntityContextUid, PersonBankAccount.DtFirstSeen, PersonBankAccount.DtLastSeen
                              },
                              {
                               PersonDriversLicense.License.EntityContextUid, PersonDriversLicense.DtFirstSeen, PersonDriversLicense.DtLastSeen
                              }
                              /*
                              {
                                PersonAddress.Location.EntityContextUid
                              },
															{
															  PersonIpAddress.Ip.EntityContextUid
															},
                              {
															  PersonSSN.Social.EntityContextUid
															},
															{
															 PersonPhone.PhoneNumber.EntityContextUid
															},
                              {
                               PersonEmail.Emailof.EntityContextUid
                              },
                              {
                               PersonBankAccount.Account.EntityContextUid
                              },
                              {
                               PersonDriversLicense.License.EntityContextUid
                              }   
                              */                           
                            };

QUERY: showCustomerAddressEntities <= Address
                            {
                              SourceCustomer := rCustomer, 
                              rCustomer.CustomerId,
                              rCustomer.IndustryType,
                              EntityContextUid,
                              Label := StreetAddress,
                              Score,
                              ClusterScore,
                              EntityType,
                              Latitude,
                              Longitude,
															StreetAddress,
															VanityCity,
															State,
															Zip,
															
                              ClusterScore,
                              ClEventCount,
                              ClIdentityCount,
															ClElementCount,
                              ClAddressCount,
                              ClIdentityCountPercentile,
                              ClEventCountPercentile,
                              ClImpactWeight,

                              InCustomerPopulation,
                              ContributorSafeFlag,
                              SafeFlag,

                              ClHighRiskPattern1Flag,
                              ClHighRiskPattern2Flag,
                              ClHighRiskPattern3Flag,
                              ClHighRiskPattern4Flag,
                              ClHighRiskPattern5Flag,
                              
                              KrHighRiskFlag,
                              KrMediumRiskFlag,
                              KrLowRiskFlag,
                              
                              PersonCount := IdentityCount,
                              HighFrequencyFlag,
                              HighRiskDeathPriorToAllEventsPercentFlag,
                              AllHighRiskDeathPriorToAllEventsPersonPercentFlag,
                              DeceasedPersonCount,
															DtFirstSeen,
															DtLastSeen

                            };

QUERY: showCustomerIpAddressEntities <= InternetProtocol
                            {
                              SourceCustomer := rCustomer, 
                              rCustomer.CustomerId,
                              rCustomer.IndustryType,
                              EntityContextUid,
                              Label,
                              Score,
                              ClusterScore,
                              EntityType,

                              PersonCount := IdentityCount,
															
                              ClusterScore,
                              ClEventCount,
                              ClIdentityCount,
															ClElementCount,
                              ClAddressCount,
                              ClIdentityCountPercentile,
                              ClEventCountPercentile,
                              ClImpactWeight,

                              InCustomerPopulation,
                              ContributorSafeFlag,
                              SafeFlag,

                              ClHighRiskPattern1Flag,
                              ClHighRiskPattern2Flag,
                              ClHighRiskPattern3Flag,
                              ClHighRiskPattern4Flag,
                              ClHighRiskPattern5Flag,

															DtFirstSeen,
															DtLastSeen,
                              
                              KrHighRiskFlag,
                              KrMediumRiskFlag,
                              KrLowRiskFlag
/*                              
                              PersonCount := IdentityCount,
                              HighFrequencyFlag,
                              HighRiskDeathPriorToAllEventsPercentFlag,
                              AllHighRiskDeathPriorToAllEventsPersonPercentFlag,
                              DeceasedPersonCount
*/                              

                            };

QUERY: showCustomerSsnEntities <= SocialSecurityNumber 
                            {
                              SourceCustomer := rCustomer, 
                              rCustomer.CustomerId,
                              rCustomer.IndustryType,
                              EntityContextUid,
                              Label,
                              Score,
                              ClusterScore,
                              EntityType,

                              PersonCount := IdentityCount,
															
                              ClusterScore,
                              ClEventCount,
                              ClIdentityCount,
															ClElementCount,
                              ClAddressCount,
                              ClIdentityCountPercentile,
                              ClEventCountPercentile,
                              ClImpactWeight,

                              InCustomerPopulation,
                              ContributorSafeFlag,
                              SafeFlag,

                              ClHighRiskPattern1Flag,
                              ClHighRiskPattern2Flag,
                              ClHighRiskPattern3Flag,
                              ClHighRiskPattern4Flag,
                              ClHighRiskPattern5Flag,
															DtFirstSeen,
															DtLastSeen,
                              
                              KrHighRiskFlag,
                              KrMediumRiskFlag,
                              KrLowRiskFlag

                            };

QUERY: showCustomerPhoneEntities <= Phone 
                            {
                              SourceCustomer := rCustomer, 
                              rCustomer.CustomerId,
                              rCustomer.IndustryType,
                              EntityContextUid,
                              Label,
                              Score,
                              ClusterScore,
                              EntityType,

                              PersonCount := IdentityCount,
															
                              ClusterScore,
                              ClEventCount,
                              ClIdentityCount,
															ClElementCount,
                              ClAddressCount,
                              ClIdentityCountPercentile,
                              ClEventCountPercentile,
                              ClImpactWeight,

                              InCustomerPopulation,
                              ContributorSafeFlag,
                              SafeFlag,

                              KrHighRiskFlag,
                              KrMediumRiskFlag,
                              KrLowRiskFlag,
															
                              ClHighRiskPattern1Flag,
                              ClHighRiskPattern2Flag,
                              ClHighRiskPattern3Flag,
                              ClHighRiskPattern4Flag,
                              ClHighRiskPattern5Flag,
															DtFirstSeen,
															DtLastSeen
                              
                            };

QUERY: showCustomerEmailEntities <= Email 
                            {
                              SourceCustomer := rCustomer, 
                              rCustomer.CustomerId,
                              rCustomer.IndustryType,
                              EntityContextUid,
                              Label,
                              Score,
                              ClusterScore,
                              EntityType,

                              PersonCount := IdentityCount,
															
                              ClusterScore,
                              ClEventCount,
                              ClIdentityCount,
															ClElementCount,
                              ClAddressCount,
                              ClIdentityCountPercentile,
                              ClEventCountPercentile,
                              ClImpactWeight,

                              InCustomerPopulation,
                              ContributorSafeFlag,
                              SafeFlag,

                              ClHighRiskPattern1Flag,
                              ClHighRiskPattern2Flag,
                              ClHighRiskPattern3Flag,
                              ClHighRiskPattern4Flag,
                              ClHighRiskPattern5Flag,

                              KrHighRiskFlag,
                              KrMediumRiskFlag,
                              KrLowRiskFlag,

															DtFirstSeen,
															DtLastSeen
                              
                            };
                            
                            
QUERY: showCustomerBankAccountEntities <= BankAccount 
                            {
                              SourceCustomer := rCustomer, 
                              rCustomer.CustomerId,
                              rCustomer.IndustryType,
                              EntityContextUid,
                              Label,
                              Score,
                              ClusterScore,
                              EntityType,
                              rBank.RoutingNumber,
                              AccountNumber,
                              AbbreviatedBankname,
                              PersonCount := IdentityCount,
															
                              ClusterScore,
                              ClEventCount,
                              ClIdentityCount,
															ClElementCount,
                              ClAddressCount,
                              ClIdentityCountPercentile,
                              ClEventCountPercentile,
                              ClImpactWeight,

                              InCustomerPopulation,
                              ContributorSafeFlag,
                              SafeFlag,

                              ClHighRiskPattern1Flag,
                              ClHighRiskPattern2Flag,
                              ClHighRiskPattern3Flag,
                              ClHighRiskPattern4Flag,
                              ClHighRiskPattern5Flag,
                              
                              KrHighRiskFlag,
                              KrMediumRiskFlag,
                              KrLowRiskFlag,
															DtFirstSeen,
															DtLastSeen
                              
                              
/*
                              PersonCount := IdentityCount,
                              HighFrequencyFlag,
                              HighRiskDeathPriorToAllEventsPercentFlag,
                              AllHighRiskDeathPriorToAllEventsPersonPercentFlag,
                              DeceasedPersonCount
*/                              

                            };
                            
QUERY: showCustomerDriversLicenseEntities <= DriversLicense 
                            {
                              SourceCustomer := rCustomer, 
                              rCustomer.CustomerId,
                              rCustomer.IndustryType,
                              EntityContextUid,
                              Label,
                              Score,
                              ClusterScore,
                              EntityType,

                              PersonCount := IdentityCount,
															
                              ClusterScore,
                              ClEventCount,
                              ClIdentityCount,
															ClElementCount,
                              ClAddressCount,
                              ClIdentityCountPercentile,
                              ClEventCountPercentile,
                              ClImpactWeight,

                              InCustomerPopulation,
                              ContributorSafeFlag,
                              SafeFlag,

                              ClHighRiskPattern1Flag,
                              ClHighRiskPattern2Flag,
                              ClHighRiskPattern3Flag,
                              ClHighRiskPattern4Flag,
                              ClHighRiskPattern5Flag,
                              
                              LicenseState := State,
                              InCustomerPopulation,
                              ContributorSafeFlag,
                              SafeFlag,
                              
                              KrHighRiskFlag,
                              KrMediumRiskFlag,
                              KrLowRiskFlag,
															DtFirstSeen,
															DtLastSeen

                            };                            
                                                        
QUERY: showCustomerPersonTreeEntities <= PersonPerson
                            {
                              SourceCustomer := rCustomer,
                              rCustomer.CustomerId,
                              rCustomer.IndustryType,
                              TreeUid := FromPerson.EntityContextUid,
                              // need to exclude self here.
                              ToPerson.EntityContextUid
                            };

QUERY: showCustomerAddressPersonTreeEntities <= PersonAddress
                            {
                              SourceCustomer := rCustomer,
                              rCustomer.CustomerId,
                              rCustomer.IndustryType,
                              TreeUid := Location.EntityContextUid,
                              // need to exclude self here.
                              Subject.EntityContextUid
                            };

QUERY: showCustomerPersonAddressTreeEntities <= PersonAddress
                            {
                              SourceCustomer := rCustomer,
                              rCustomer.CustomerId,
                              rCustomer.IndustryType,
                              TreeUid := Location.EntityContextUid,
                              // need to exclude self here.
                              Subject.EntityContextUid
                            };                            



QUERY: showCustomerPersonSSNTreeEntities <= PersonSSN 
                            {
                              SourceCustomer := rCustomer,
                              rCustomer.CustomerId,
                              rCustomer.IndustryType,
                              TreeUid := Social.EntityContextUid,
                              // need to exclude self here.
                              Subject.EntityContextUid
													  };

QUERY: showCustomerPersonIpTreeEntities <= PersonIpAddress 
                            {
                              SourceCustomer := rCustomer,
                              rCustomer.CustomerId,
                              rCustomer.IndustryType,
                              TreeUid := Ip.EntityContextUid,
                              // need to exclude self here.
                              Subject.EntityContextUid
													  };

QUERY: showCustomerPersonPhoneTreeEntities <= PersonPhone 
                            {
                              SourceCustomer := rCustomer,
                              rCustomer.CustomerId,
                              rCustomer.IndustryType,
                              TreeUid := PhoneNumber.EntityContextUid,
                              // need to exclude self here.
                              Subject.EntityContextUid
													  };

// In Progress...
QUERY: showCustomerPersonEmailTreeEntities <= PersonEmail 
                            {
                              SourceCustomer := rCustomer,
                              rCustomer.CustomerId,
                              rCustomer.IndustryType,
                              TreeUid := Emailof.EntityContextUid,
                              // need to exclude self here.
                              Subject.EntityContextUid
													  };

QUERY: showCustomerPersonBankAccountTreeEntities <= PersonBankAccount 
                            {
                              SourceCustomer := rCustomer,
                              rCustomer.CustomerId,
                              rCustomer.IndustryType,
                              TreeUid := Account.EntityContextUid,
                              // need to exclude self here.
                              Subject.EntityContextUid
													  };

QUERY: showCustomerPersonDriversLicenseTreeEntities <= PersonDriversLicense
                            {
                              SourceCustomer := rCustomer,
                              rCustomer.CustomerId,
                              rCustomer.IndustryType,
                              TreeUid := License.EntityContextUid,
                              // need to exclude self here.
                              Subject.EntityContextUid
													  };
