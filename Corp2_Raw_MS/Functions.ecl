IMPORT corp2, ut, address;

EXPORT FUNCTIONS := Module

  EXPORT RemoveQuotes(string s) := function
			 return corp2.t2u(regexreplace('["]{1,}',s,''));
		end;
		 
  EXPORT FormatPhone(string s) := function
			 string in_num := stringlib.stringfilter(s,'0123456789x');
			 integer num_len := length(in_num);
			 string out_num := map(num_len > 10 => in_num[1..3] +'-'+ in_num[4..6] +'-'+ in_num[7..10] +' '+ in_num[11..],
			  										 num_len = 10 => in_num[1..3] +'-'+ in_num[4..6] +'-'+ in_num[7..10],
			  										 in_num);															
			 return corp2.t2u(out_num);
     end;
		 
	EXPORT 	PreCleanAddr(string s) := function
		   string out_addr := regexreplace('^SAME$|^SAME | SAME |^NONE$|^NONE | NONE |^NULL$|^NULL | NULL |;',corp2.t2u(s),' ');
			 return corp2.t2u(out_addr);
     end;			

	EXPORT Format_RA_Entity(string s) := function
	     out_str := map(ut.IsCompany(s) => s,
			                stringLib.stringFind(s,',',1) > 0 => Address.CleanPersonLFM73(s)[6..70],
											s);
	     return corp2.t2u(out_str);
     end;
  
	EXPORT Decode_Country(string code)
	   := map(corp2.t2u(code) in ['US','USA','AL','AK','AS','AZ','AR','CA','CO','CT','DE','DC','FM',
															  'FL','GA','GU','HI','ID','IL','IN','IA','KS','KY','LA','ME','MH',
																'MD','MA','MI','MN','MS','MO','MT','NE','NV','NH','NJ','NM','NY',
																'NC','ND','MP','OH','OK','OR','PW','PA','PR','RI','SC','SD','TN',
																'TX','UT','VT','VI','VA','WA','WV','WI','WY','AE','AP','AA','CZ']    
																         => 'US',
		        corp2.t2u(code) = 'AFG'      => 'AFGHANISTAN',
						corp2.t2u(code) = 'AUT'      => 'AUSTRIA',
						corp2.t2u(code) = 'CAN'      => 'CANADA',
					  corp2.t2u(code) = 'CHN'      => 'CHINA',
						corp2.t2u(code) = 'DEU'      => 'GERMANY',
						corp2.t2u(code) = 'FINLAND'  => 'FINLAND',
						corp2.t2u(code) = 'KNA'      => 'SAINT KITTS AND NEVIS',
					  corp2.t2u(code) = 'NLD'      => 'NETHERLANDS',
						corp2.t2u(code) in ['XX',''] => '',
						'**|'+ corp2.t2u(code));
						
   EXPORT Decode_state(string code) 
	    := case(corp2.t2u(code),
						'AL'=>'ALABAMA',
						'AK'=>'ALASKA',
						'AS'=>'AMERICAN SAMOA',
						'AZ'=>'ARIZONA',
						'AR'=>'ARKANSAS',
						'CA'=>'CALIFORNIA',
						'CO'=>'COLORADO',
						'CT'=>'CONNECTICUT',
						'DE'=>'DELAWARE',
						'DC'=>'DISTRICT OF COLUMBIA',
						'FM'=>'FEDERATED STATES OF MICRONESIA',
						'FL'=>'FLORIDA',
						'GA'=>'GEORGIA',
						'GU'=>'GUAM',
						'HI'=>'HAWAII',
						'ID'=>'IDAHO',
						'IL'=>'ILLINOIS',
						'IN'=>'INDIANA',
						'IA'=>'IOWA',
						'KS'=>'KANSAS',
						'KY'=>'KENTUCKY',
						'LA'=>'LOUISIANA',
						'ME'=>'MAINE',
						'MH'=>'MARSHALL ISLANDS',
						'MD'=>'MARYLAND',
						'MA'=>'MASSACHUSETTS',
						'MI'=>'MICHIGAN',
						'MN'=>'MINNESOTA',
						'MS'=>'MISSISSIPPI',
						'MO'=>'MISSOURI',
						'MT'=>'MONTANA',
						'NE'=>'NEBRASKA',
						'NV'=>'NEVADA',
						'NH'=>'NEW HAMPSHIRE',
						'NJ'=>'NEW JERSEY',
						'NM'=>'NEW MEXICO',
						'NY'=>'NEW YORK',
						'NC'=>'NORTH CAROLINA',
						'ND'=>'NORTH DAKOTA',
						'MP'=>'NORTHERN MARIANA ISLANDS',
						'OH'=>'OHIO',
						'OK'=>'OKLAHOMA',
						'OR'=>'OREGON',
						'PW'=>'PALAU',
						'PA'=>'PENNSYLVANIA',
						'PR'=>'PUERTO RICO',
						'RI'=>'RHODE ISLAND',
						'SC'=>'SOUTH CAROLINA',
						'SD'=>'SOUTH DAKOTA',
						'TN'=>'TENNESSEE',
						'TX'=>'TEXAS',
						'UT'=>'UTAH',
						'VT'=>'VERMONT',
						'VI'=>'VIRGIN ISLANDS',
						'VA'=>'VIRGINIA',
						'WA'=>'WASHINGTON',
						'WV'=>'WEST VIRGINIA',
						'WI'=>'WISCONSIN',
						'WY'=>'WYOMING',
						'AE'=>'ARMED FORCES EUROPE, THE MIDDLE EAST AND CANADA',
						'AP'=>'ARMED FORCES PACIFIC',
						'AA'=>'ARMED FORCES AMERICAS EXCEPT CANADA',
						'CZ'=>'CANAL ZONE',
						'AB'=>'ALBERTA',
						'BC'=>'BRITISH COLUMBIA',
						'MB'=>'MANITOBA',
					 	'NB'=>'NEW BRUNSWICK',
						'NL'=>'NEWFOUNDLAND AND LABRADOR',
						'NT'=>'NORTHWEST TERRITORIES',
				 		'NS'=>'NOVA SCOTIA',
						'NU'=>'NUNAVUT',
				 		'ON'=>'ONTARIO',
						'PE'=>'PRINCE EDWARD ISLAND',
				 		'QC'=>'QUEBEC',
				 		'SK'=>'SASKATCHEWAN',
						'YT'=>'YUKON TERRITORY',
						''  =>'',
						'**|' + corp2.t2u(code));
						
	EXPORT Addr_Type_Code(string strValue) := 
					case(corp2.t2u(strValue),
							'BUSINESS'                        => 'B',
							'BUSINESSPRINCIPALMAILING'        => 'PM',
							'BUSINESSPRINCIPALPHYSICAL'       => 'PP',
							'DOMESTICBUSINESSPRINCIPALOFFICE' => 'D',
							'FOREIGNBUSINESSPRINCIPALOFFICE'  => 'F',
							'OFFICEWHERERECORDSAREKEPT'       => 'RO',
							'MAILING'                         => 'M',
							'PHYSICAL'                        => 'P',
							'PREVIOUSMAILING'                 => 'PR',
							'PREVIOUSPRINCIPALOFFICE'         => 'PPO',
							'PRINCIPALOFFICE'                 => 'PO',
							'RESIDENCE'                       => 'R',
							'OTHER'                           => 'O',
							'');
					
	EXPORT Addr_Type_Desc(string strValue) := 
					case(corp2.t2u(strValue),
							'BUSINESS'                        => 'BUSINESS',
							'BUSINESSPRINCIPALMAILING'        => 'BUSINESS PRINCIPAL MAILING',
							'BUSINESSPRINCIPALPHYSICAL'       => 'BUSINESS PRINCIPAL PHYSICAL',
							'DOMESTICBUSINESSPRINCIPALOFFICE' => 'DOMESTIC BUSINESS PRINCIPAL OFFICE',
							'FOREIGNBUSINESSPRINCIPALOFFICE'  => 'FOREIGN BUSINESS PRINCIPAL OFFICE',
							'OFFICEWHERERECORDSAREKEPT'       => 'RECORDS OFFICE',
							'MAILING'                         => 'MAILING',
							'PHYSICAL'                        => 'PHYSICAL',
							'PREVIOUSMAILING'                 => 'PRIOR',
							'PREVIOUSPRINCIPALOFFICE'         => 'PREVIOUS PRINCIPAL OFFICE',
							'PRINCIPALOFFICE'                 => 'PRINCIPAL OFFICE',
							'RESIDENCE'                       => 'RESIDENCE',
							'OTHER'                           => 'OTHER',
							'');
	
	EXPORT Cont_Title_Desc(string strValue) := 
					case(corp2.t2u(strValue),
						'ASSISTANTSECRETARY'      => 'ASSISTANT SECRETARY',
						'ASSISTANTTREASURER'      => 'ASSISTANT TREASURER',
						'ATTORNEYINFACT'          => 'ATTORYNEY IN FACT',
						'CHIEFEXECUTIVEOFFICER'   => 'CHIEF EXECUTIVE OFFICER',
					  'CHIEFFINANCIALOFFICER'   => 'CHIEF FINANCIAL OFFICER',
					  'CHIEFINFORMATIONOFFICER' => 'CHIEF INFORMATION OFFICER',
					  'CHIEFOPERATIONSOFFICER'  => 'CHIEF OPERATIONS OFFICER',
					  'CLERK'                   => 'CLERK',
					  'CHAIRMAN'                => 'CHAIRMAN',
					  'DIRECTOR'                => 'DIRECTOR',
					  'GENERALPARTNER'          => 'GENERAL PARTNER',
					  'INCORPORATOR'            => 'INCORPORATOR',
					  'LIMITEDPARTNER'          => 'LIMITED PARTNER',
					  'MANAGER'                 => 'MANAGER',
					  'MANAGINGAGENT'           => 'MANAGING AGENT',
					  'MANAGINGPARTNER'         => 'MANAGING PARTNER',
					  'MEMBER'                  => 'MEMBER',
					  'OFFICER'                 => 'OFFICER',
					  'ORGANIZER'               => 'ORGANIZER',
					  'PARTNER'                 => 'PARTNER',
					  'PRESIDENT'               => 'PRESIDENT',
					  'SECRETARY'               => 'SECRETARY',
					  'SOLEPROPRIETOR'          => 'SOLE PROPRIETOR',
					  'TREASURER'               => 'TREASURER',
					  'TRUSTEE'                 => 'TRUSTEE',
					  'VICEPRESIDENT'           => 'VICE PRESIDENT',
						'NOTITLE' 								=> '',
						'OTHER' 									=> '',
						'UNDEFINED' 							=> '',
						''                        => '',
            '**|'+corp2.t2u(strValue));
					
  EXPORT Cont_Type_Desc(string strValue) := 
						case(corp2.t2u(strValue),
							'CHAIRMAN'            => 'CHAIRMAN',
							'CONTACT'             => 'CONTACT',
							'DIRECTOR'            => 'DIRECTOR',
							'INCORPORATOR'        => 'INCORPORATOR',
							'INDEPENDENTAUDITOR'  => 'INDEPENDENT AUDITOR',
							'MANAGER'             => 'MANAGER',
							'MEMBER'              => 'MEMBER',
							'OFFICER'             => 'OFFICER',
							'ORGANIZER'           => 'ORGANIZER',
							'OWNER'               => 'OWNER',
							'PARTNER'             => 'PARTNER',
							'SHAREHOLDER'         => 'SHAREHOLDER',
							''                    => '',
							'**|'+corp2.t2u(strValue));

   EXPORT Date_Type_Desc(string strValue) := 
						case(corp2.t2u(strValue),
							'APPROVED'             => 'APPROVED',
							'ANNUALMEETINGDATE'    => 'ANNUAL MEETING DATE',
							'DURATION'             => 'DURATION DATE',
							'EXPIRE'               => 'EXPIRATION DATE',
							'FILED'                => 'FILED',
							'FUTUREEFFECTIVEDATE'  => 'FUTURE EFFECTIVE DATE',
							'SUBMITTED'            => 'SUBMITTED',
							'AMENDMENTADOPTEDDATE' => 'AMENDMENT ADOPTED DATE',
							''                     => '',
							corp2.t2u(strValue));
					
	EXPORT Entity_Type_Code(string strValue) := 
						case(corp2.t2u(strValue),
							'PROFITCORPORATION'           => 'PROFIT CORPORATION',
							'NONPROFITCORPORATION'        => 'NON-PROFIT CORPORATION',
							'LIMITEDLIABILITYCOMPANY'     => 'LIMITED LIABILITY COMPANY',
							'LIMITEDPARTNERSHIP'          => 'LIMITED PARTNERSHIP',
							'LIMITEDLIABILITYPARTNERSHIP' => 'LIMITED LIABILITY PARTNERSHIP',
							'GENERALPARTNERSHIP'          => 'GENERAL PARTNERSHIP',
							'BUSINESSTRUST'               => 'BUSINESS TRUST',
							'SOLEPROPRIETORSHIP'          => 'SOLE PROPRIETORSHIP',
							'COOPERATIVE'                 => 'COOPERATIVE',
							'NAMERESERVATION'             => '',
							'**|'+corp2.t2u(strValue));
					
	EXPORT Entity_Standing(string strValue) := 
						case(corp2.t2u(strValue),
							'ACTIVE'                                            => 'ACTIVE',
							'ADMINISTRATIVELYDISSOLVED'                         => 'ADMINISTRATIVELY DISSOLVED',
							'CANCELLED'                                         => 'CANCELLED',
							'CONVERTED'                                         => 'CONVERTED',
							'DISSOLVED'                                         => 'DISSOLVED',
							'EXPIRED'                                           => 'EXPIRED',
							'FORFEITED'                                         => 'FORFEITED',
							'INACTIVE'                                          => 'INACTIVE',
							'INTENTTODISSOLVE'                                  => 'INTENT TO DISSOLVE',
							'INTENTTODISSOLVEANNUALREPORT'                      => 'INTENT TO DISSOLVE ANNUAL REPORT',
							'INTENTTODISSOLVEANNUALREPORT_REGISTEREDAGENT'      => 'INTENT TO DISSOLVE ANNUAL REPORT REGISTERED AGENT',
							'INTENTTODISSOLVEANNUALREPORT_TAX'                  => 'INTENT TO DISSOLVE ANNUAL REPORT TAX',
							'INTENTTODISSOLVEANNUALREPORT_REGISTEREDAGENT_TAX'  => 'INTENT TO DISSOLVE ANNUAL REPORT REGISTERED AGENT TAX',
							'INTENTTODISSOLVEREGISTEREDAGENT'                   => 'INTENT TO DISSOLVE REGISTERED AGENT',
							'INTENTTODISSOLVEREGISTEREDAGENT_TAX'               => 'INTENT TO DISSOLVE REGISTERED AGENT TAX',
							'INTENTTODISSOLVETAX'                               => 'INTENT TO DISSOLVE TAX',
							'MERGED'                                            => 'MERGED',
							'NAMERESERVED'                                      => 'NAME RESERVED',
							'NOTFOUND'                                          => 'NOT FOUND',
							'REVOKED'                                           => 'REVOKED',
							'UNDEFINED'                                         => 'UNDEFINED',
							'VOLUNTARYDISSOLVED'                                => 'VOLUNTARY DISSOLVED',
							'WITHDRAWN'                                         => 'WITHDRAWN',
							'WITHDRAWNBYMERGER'                                 => 'WITHDRAWN BY MERGER',
							'GOOD'                                              => 'GOOD STANDING', // DF-19224
							''					                                        => '',
							'**|'+corp2.t2u(strValue));
										
	EXPORT Event_Type_Desc(string strValue) := 
					case(corp2.t2u(strValue),
						'ADMIN CORRECTION'              		 => 'ADMIN CORRECTION',
						'ADMIN DISSOLUTION'           		   => 'ADMIN DISSOLUTION',
						'AGENT ADDRESS CHANGE'               => 'AGENT ADDRESS CHANGE',
						'AGENT REGISTRATION'                 => 'AGENT REGISTRATION',
						'AGENT RESIGNATION'                  => 'AGENT RESIGNATION',
						'AMENDMENT FORM'                     => 'AMENDMENT FORM',
						'ANNUAL REPORT PROBLEM'              => 'ANNUAL REPORT PROBLEM',
						'AR PAYMENT RECEIVED'                => 'AR PAYMENT RECEIVED',
						'BUSINESS CONVERSION'             	 => 'BUSINESS CONVERSION',
						'BUSINESS DOMESTICATION'             => 'BUSINESS DOMESTICATION',
						'CORRECTION'                         => 'CORRECTION',
						'CORRECTION AMENDMENT FORM'          => 'CORRECTION AMENDMENT FORM',
						'DISSOLUTION'                        => 'DISSOLUTION',
						'EXPIRATION'        						     => 'EXPIRATION',
						'FAILURE TO FILE AR'              	 => 'FAILURE TO FILE AR',
						'FICTITIOUS NAME AMENDMENT'          => 'FICTITIOUS NAME AMENDMENT',
						'FICTITIOUS NAME ASSIGNMENT'         => 'FICTITIOUS NAME ASSIGNMENT',
						'FICTITIOUS NAME REGISTRATION'       => 'FICTITIOUS NAME REGISTRATION',
						'FICTITIOUS NAME RENEWAL'            => 'FICTITIOUS NAME RENEWAL',
						'FICTITIOUS NAME RESERVATION'        => 'FICTITIOUS NAME RESERVATION',
						'FICTITIOUS NAME WITHDRAWAL'         => 'FICTICIOUS NAME WITHDRAWAL',
						'FORM REQUEST'             					 => 'FORM REQUEST',
						'FORMATION'                          => 'FORMATION',
						'FORMATION FORM'                     => 'FORMATION FORM',
						'MERGER'                             => 'MERGER',
						'MISC DOCUMENT'              				 => 'MISC DOCUMENT',
						'NAME RESERVATION'                   => 'NAME RESERVATION',
						'NAMERESERVATION'                    => 'NAME RESERVATION',
						'NAME RESERVATION FORM'              => 'NAME RESERVATION FORM',
						'NAME RESERVATION TRANSFER'          => 'NAME RESERVATION TRANSFER',
						'NAMERESERVATIONTRANSFER'            => 'NAME RESERVATION TRANSFER',
						'NON-PROFIT STATUS REPORT'           => 'NON-PROFIT STATUS REPORT',
						'NOTICE TO DISSOLVE/REVOKE'          => 'NOTICE TO DISSOLVE/REVOKE',
						'PROBLEM REPORT'                   	 => 'PROBLEM REPORT',
						'PROFILE'                            => 'PROFILE',
						'REGISTERED AGENT CHANGE OF ADDRESS' => 'REGISTERED AGENT CHANGE OF ADDRESS',
						'REINSTATEMENT'                      => 'REINSTATEMENT',
						'REINSTATEMENT TAX'                  => 'REINSTATEMENT TAX',
						'RENEWAL'                     			 => 'RENEWAL',
						'RESTATE ARTICLES OF INCORPORATION'  => 'RESTATE ARTICLES OF INCORPORATION',
						'RESTATEMENT'                        => 'RESTATEMENT',
						'REVOCATION'                         => 'REVOCATION',
						'STATUS REPORT'                      => 'STATUS REPORT',
						'TRANSFER OF NAME RESERVATION'       => 'TRANSFER OF NAME RESERVATION',
						'UNDETERMINED EVENT'                 => 'UNDETERMINED EVENT',
						'WITHDRAWAL'                         => 'WITHDRAWAL',
						'**|'+corp2.t2u(strValue));
					
	EXPORT Name_Type_Code(string strValue) := 
						case(corp2.t2u(strValue),
							 'ALIAS'                  => '06',
							 'DBA'                    => '02',
							 'FICTITIOUSNAME'         => 'F',
							 'PREVALIAS'              => 'P',
							 'PREVIOUSFICTITIOUSNAME' => 'P',
							 'PREVLEGAL'              => 'P',
							 'NOTYPE'                 => '',
							 '');
					
	EXPORT Name_Type_Desc(string strValue) := 
						case(corp2.t2u(strValue),
							'ALIAS'                  => 'ASSUMED',
							'DBA'                    => 'DBA',
							'FICTITIOUSNAME'         => 'FICTITIOUS BUSINESS NAME',
							'PREVALIAS'              => 'PRIOR',
							'PREVIOUSFICTITIOUSNAME' => 'PRIOR',
							'PREVLEGAL'              => 'PRIOR',
						  'NOTYPE'                 => '',
							''                       => '',
							corp2.t2u(strValue));
  
	EXPORT PurposeType_Desc(string strValue) :=  
	     map(corp2.t2u(strValue) in ['NOTYPE','OTHER']                => '',
	         corp2.t2u(strValue) = 'SCHOOLSOREDUCATIONALINSTITUTIONS' => 'SCHOOLS OR EDUCATIONAL INSTITUTIONS',
					 corp2.t2u(strValue) = 'HOMELESSSHELTER'                  => 'HOMELESS SHELTER',
					 corp2.t2u(strValue) = 'RECREATIONVENUES'                 => 'RECREATION VENUES',
					 corp2.t2u(strValue) = 'HOMEOWNERSASSOCIATION'            => 'HOMEOWNERS ASSOCIATION',
					 corp2.t2u(strValue));					
		
	EXPORT Stock_Class_Desc(string strValue) := 
	         case(corp2.t2u(strValue),
							'COMMON'           => 'COMMON',
							'COMMONNONVOTING'  => 'COMMON NON-VOTING',
							'COMMONA'          => 'COMMON A',
							'COMMONANONVOTING' => 'COMMON A NON-VOTING',
							'COMMONB'          => 'COMMON B',
							'COMMONBNONVOTING' => 'COMMON B NON-VOTING',
							'COMMONC'          => 'COMMON C',
							'COMMONCNONVOTING' => 'COMMON C NON-VOTING',
							'PREFERRED'        => 'PREFERRED',
							'PREFERREDA'       => 'PREFERRED A',
							'PREFERREDB'       => 'PREFERRED B',
							'OTHER'            => 'OTHER',
							'UNDEFINED'        => '',
							''                 => '',
							'**|'+corp2.t2u(strValue));
	end;
         
                            

