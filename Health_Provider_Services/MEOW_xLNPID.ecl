IMPORT SALT311;
// @param MultiRec - if set to true then multiple records may have the same Reference and a consolidated result will be produced
// @param ButNot - set of IDs that will NOT be considered as part of the result
 
EXPORT MEOW_xLNPID(DATASET(Process_xLNPID_Layouts.InputLayout) in, BOOLEAN MultiRec = FALSE,SET OF SALT311.UIDType ButNot=[]) := MODULE
Process_xLNPID_Layouts.OutputLayout GetResults(Process_xLNPID_Layouts.InputLayout le) := TRANSFORM
// Need to calculate lengths for EDIT fields
  UNSIGNED1 FNAME_len := LENGTH(TRIM(le.FNAME));
  UNSIGNED1 MNAME_len := LENGTH(TRIM(le.MNAME));
  UNSIGNED1 LNAME_len := LENGTH(TRIM(le.LNAME));
  UNSIGNED1 SSN_len := LENGTH(TRIM(le.SSN));
  UNSIGNED1 CNSMR_SSN_len := LENGTH(TRIM(le.CNSMR_SSN));
  UNSIGNED1 C_LIC_NBR_len := LENGTH(TRIM(le.C_LIC_NBR));
  SELF.keys_tried := IF (Key_HealthProvider_NAMEL.CanSearch(le),1 << 1,0) + IF (Key_HealthProvider_FNAME.CanSearch(le),1 << 2,0) + IF (Key_HealthProvider_NAMED.CanSearch(le),1 << 3,0) + IF (Key_HealthProvider_LNAME.CanSearch(le),1 << 4,0) + IF (Key_HealthProvider_MNAME.CanSearch(le),1 << 5,0) + IF (Key_HealthProvider_ADDRESS.CanSearch(le),1 << 6,0) + IF (Key_HealthProvider_ZIP_PR.CanSearch(le),1 << 7,0) + IF (Key_HealthProvider_SSN_LP.CanSearch(le),1 << 8,0) + IF (Key_HealthProvider_CNSMR_SSN_LP.CanSearch(le),1 << 9,0) + IF (Key_HealthProvider_DOB_LP.CanSearch(le),1 << 10,0) + IF (Key_HealthProvider_CNSMR_DOB_LP.CanSearch(le),1 << 11,0) + IF (Key_HealthProvider_PHONE_LP.CanSearch(le),1 << 12,0) + IF (Key_HealthProvider_LIC.CanSearch(le),1 << 13,0) + IF (Key_HealthProvider_VEN.CanSearch(le),1 << 14,0) + IF (Key_HealthProvider_TAX.CanSearch(le),1 << 15,0) + IF (Key_HealthProvider_BILLING_TAX.CanSearch(le),1 << 16,0) + IF (Key_HealthProvider_DEA.CanSearch(le),1 << 17,0) + IF (Key_HealthProvider_NPI.CanSearch(le),1 << 18,0) + IF (Key_HealthProvider_BILLING_NPI.CanSearch(le),1 << 19,0) + IF (Key_HealthProvider_UPN.CanSearch(le),1 << 20,0) + IF (Key_HealthProvider_LEXID.CanSearch(le),1 << 21,0) + IF (Key_HealthProvider_BID.CanSearch(le),1 << 22,0) + IF (Key_HealthProvider_SRC_RID.CanSearch(le),1 << 23,0) + IF (Key_HealthProvider_RID.CanSearch(le),1 << 24,0);
  fetchResults0 := ROLLUP(IF ( SELF.keys_tried>0,
    MERGE(
    SORTED(IF(Health_Provider_Services.Key_HealthProvider_NAMEL.CanSearch(le),Key_HealthProvider_NAMEL.ScoredLNPIDFetch(param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_ST := le.ST,param_C_LIC_NBR := le.C_LIC_NBR,param_C_LIC_NBR_len := C_LIC_NBR_len,param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_GENDER := le.GENDER,param_SNAME := le.SNAME,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_PRIM_RANGE := le.PRIM_RANGE,param_PRIM_NAME := le.PRIM_NAME,param_SEC_RANGE := le.SEC_RANGE,param_V_CITY_NAME := le.V_CITY_NAME,param_ZIP := le.ZIP,param_DOB := (UNSIGNED4)le.DOB,param_LIC_STATE := le.LIC_STATE,param_NPI_NUMBER := le.NPI_NUMBER,param_BILLING_TAX_ID := le.BILLING_TAX_ID)),LNPID)
    ,SORTED(IF((~Health_Provider_Services.Key_HealthProvider_NAMEL.CanSearch(le)),IF(Health_Provider_Services.Key_HealthProvider_FNAME.CanSearch(le),Key_HealthProvider_FNAME.ScoredLNPIDFetch(param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_ST := le.ST,param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_GENDER := le.GENDER,param_SNAME := le.SNAME,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_PRIM_RANGE := le.PRIM_RANGE,param_PRIM_NAME := le.PRIM_NAME,param_SEC_RANGE := le.SEC_RANGE,param_V_CITY_NAME := le.V_CITY_NAME,param_ZIP := le.ZIP,param_DOB := (UNSIGNED4)le.DOB,param_C_LIC_NBR := le.C_LIC_NBR,param_C_LIC_NBR_len := C_LIC_NBR_len,param_LIC_STATE := le.LIC_STATE,param_NPI_NUMBER := le.NPI_NUMBER,param_BILLING_TAX_ID := le.BILLING_TAX_ID))),LNPID)
    ,SORTED(IF(Health_Provider_Services.Key_HealthProvider_NAMED.CanSearch(le),Key_HealthProvider_NAMED.ScoredLNPIDFetch(param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_ZIP := le.ZIP,param_C_LIC_NBR := le.C_LIC_NBR,param_C_LIC_NBR_len := C_LIC_NBR_len,param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_GENDER := le.GENDER,param_SNAME := le.SNAME,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_PRIM_RANGE := le.PRIM_RANGE,param_PRIM_NAME := le.PRIM_NAME,param_SEC_RANGE := le.SEC_RANGE,param_V_CITY_NAME := le.V_CITY_NAME,param_ST := le.ST,param_DOB := (UNSIGNED4)le.DOB,param_LIC_STATE := le.LIC_STATE,param_NPI_NUMBER := le.NPI_NUMBER,param_BILLING_TAX_ID := le.BILLING_TAX_ID)),LNPID)
    ,SORTED(IF((~Health_Provider_Services.Key_HealthProvider_NAMED.CanSearch(le)),IF(Health_Provider_Services.Key_HealthProvider_LNAME.CanSearch(le),Key_HealthProvider_LNAME.ScoredLNPIDFetch(param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_ZIP := le.ZIP,param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_GENDER := le.GENDER,param_SNAME := le.SNAME,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_PRIM_RANGE := le.PRIM_RANGE,param_PRIM_NAME := le.PRIM_NAME,param_SEC_RANGE := le.SEC_RANGE,param_V_CITY_NAME := le.V_CITY_NAME,param_ST := le.ST,param_DOB := (UNSIGNED4)le.DOB,param_C_LIC_NBR := le.C_LIC_NBR,param_C_LIC_NBR_len := C_LIC_NBR_len,param_LIC_STATE := le.LIC_STATE,param_NPI_NUMBER := le.NPI_NUMBER,param_BILLING_TAX_ID := le.BILLING_TAX_ID))),LNPID)
    ,SORTED(IF(Health_Provider_Services.Key_HealthProvider_MNAME.CanSearch(le),Key_HealthProvider_MNAME.ScoredLNPIDFetch(param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_ST := le.ST,param_GENDER := le.GENDER,param_SNAME := le.SNAME,param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_PRIM_RANGE := le.PRIM_RANGE,param_PRIM_NAME := le.PRIM_NAME,param_SEC_RANGE := le.SEC_RANGE,param_V_CITY_NAME := le.V_CITY_NAME,param_ZIP := le.ZIP,param_DOB := (UNSIGNED4)le.DOB,param_C_LIC_NBR := le.C_LIC_NBR,param_C_LIC_NBR_len := C_LIC_NBR_len,param_LIC_STATE := le.LIC_STATE,param_NPI_NUMBER := le.NPI_NUMBER,param_BILLING_TAX_ID := le.BILLING_TAX_ID)),LNPID)
    ,SORTED(IF(Health_Provider_Services.Key_HealthProvider_ADDRESS.CanSearch(le),Key_HealthProvider_ADDRESS.ScoredLNPIDFetch(param_PRIM_RANGE := le.PRIM_RANGE,param_PRIM_NAME := le.PRIM_NAME,param_ZIP := le.ZIP,param_SEC_RANGE := le.SEC_RANGE,param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_V_CITY_NAME := le.V_CITY_NAME,param_ST := le.ST,param_GENDER := le.GENDER,param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_SNAME := le.SNAME,param_DOB := (UNSIGNED4)le.DOB,param_C_LIC_NBR := le.C_LIC_NBR,param_C_LIC_NBR_len := C_LIC_NBR_len,param_LIC_STATE := le.LIC_STATE,param_BILLING_TAX_ID := le.BILLING_TAX_ID)),LNPID)
    ,SORTED(IF(Health_Provider_Services.Key_HealthProvider_ZIP_PR.CanSearch(le),Key_HealthProvider_ZIP_PR.ScoredLNPIDFetch(param_PRIM_NAME := le.PRIM_NAME,param_ZIP := le.ZIP,param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_PRIM_RANGE := le.PRIM_RANGE,param_SEC_RANGE := le.SEC_RANGE,param_V_CITY_NAME := le.V_CITY_NAME,param_ST := le.ST,param_GENDER := le.GENDER,param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_SNAME := le.SNAME,param_DOB := (UNSIGNED4)le.DOB,param_C_LIC_NBR := le.C_LIC_NBR,param_C_LIC_NBR_len := C_LIC_NBR_len,param_LIC_STATE := le.LIC_STATE,param_BILLING_TAX_ID := le.BILLING_TAX_ID)),LNPID)
    ,SORTED(IF(Health_Provider_Services.Key_HealthProvider_SSN_LP.CanSearch(le),Key_HealthProvider_SSN_LP.ScoredLNPIDFetch(param_SSN := le.SSN,param_SSN_len := SSN_len,param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_V_CITY_NAME := le.V_CITY_NAME,param_ST := le.ST,param_GENDER := le.GENDER,param_SNAME := le.SNAME,param_DOB := (UNSIGNED4)le.DOB,param_C_LIC_NBR := le.C_LIC_NBR,param_C_LIC_NBR_len := C_LIC_NBR_len,param_LIC_STATE := le.LIC_STATE)),LNPID)
    ,SORTED(IF(Health_Provider_Services.Key_HealthProvider_CNSMR_SSN_LP.CanSearch(le),Key_HealthProvider_CNSMR_SSN_LP.ScoredLNPIDFetch(param_CNSMR_SSN := le.CNSMR_SSN,param_CNSMR_SSN_len := CNSMR_SSN_len,param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_V_CITY_NAME := le.V_CITY_NAME,param_ST := le.ST,param_GENDER := le.GENDER,param_SNAME := le.SNAME,param_CNSMR_DOB := (UNSIGNED4)le.CNSMR_DOB,param_C_LIC_NBR := le.C_LIC_NBR,param_C_LIC_NBR_len := C_LIC_NBR_len,param_LIC_STATE := le.LIC_STATE)),LNPID)
    ,SORTED(IF(Health_Provider_Services.Key_HealthProvider_DOB_LP.CanSearch(le),Key_HealthProvider_DOB_LP.ScoredLNPIDFetch(param_DOB := (UNSIGNED4)le.DOB,param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_ST := le.ST,param_V_CITY_NAME := le.V_CITY_NAME,param_SSN := le.SSN,param_SSN_len := SSN_len,param_GENDER := le.GENDER,param_SNAME := le.SNAME)),LNPID)
    ,SORTED(IF(Health_Provider_Services.Key_HealthProvider_CNSMR_DOB_LP.CanSearch(le),Key_HealthProvider_CNSMR_DOB_LP.ScoredLNPIDFetch(param_CNSMR_DOB := (UNSIGNED4)le.CNSMR_DOB,param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_ST := le.ST,param_V_CITY_NAME := le.V_CITY_NAME,param_CNSMR_SSN := le.CNSMR_SSN,param_CNSMR_SSN_len := CNSMR_SSN_len,param_GENDER := le.GENDER,param_SNAME := le.SNAME)),LNPID)
    ,SORTED(IF(Health_Provider_Services.Key_HealthProvider_PHONE_LP.CanSearch(le),Key_HealthProvider_PHONE_LP.ScoredLNPIDFetch(param_PHONE := le.PHONE,param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_DOB := (UNSIGNED4)le.DOB,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_SNAME := le.SNAME,param_V_CITY_NAME := le.V_CITY_NAME,param_ST := le.ST,param_SSN := le.SSN,param_SSN_len := SSN_len)),LNPID)
    ,SORTED(IF(Health_Provider_Services.Key_HealthProvider_LIC.CanSearch(le),Key_HealthProvider_LIC.ScoredLNPIDFetch(param_C_LIC_NBR := le.C_LIC_NBR,param_C_LIC_NBR_len := C_LIC_NBR_len,param_LIC_STATE := le.LIC_STATE,param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_SSN := le.SSN,param_SSN_len := SSN_len,param_GENDER := le.GENDER,param_SNAME := le.SNAME,param_DOB := (UNSIGNED4)le.DOB)),LNPID)
    ,SORTED(IF(Health_Provider_Services.Key_HealthProvider_VEN.CanSearch(le),Key_HealthProvider_VEN.ScoredLNPIDFetch(param_VENDOR_ID := le.VENDOR_ID,param_SRC := le.SRC,param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_SNAME := le.SNAME,param_GENDER := le.GENDER,param_DOB := (UNSIGNED4)le.DOB)),LNPID)
    ,SORTED(IF(Health_Provider_Services.Key_HealthProvider_TAX.CanSearch(le),Key_HealthProvider_TAX.ScoredLNPIDFetch(param_TAX_ID := le.TAX_ID,param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_SNAME := le.SNAME,param_GENDER := le.GENDER,param_DOB := (UNSIGNED4)le.DOB,param_C_LIC_NBR := le.C_LIC_NBR,param_C_LIC_NBR_len := C_LIC_NBR_len,param_LIC_STATE := le.LIC_STATE)),LNPID)
    ,SORTED(IF(Health_Provider_Services.Key_HealthProvider_BILLING_TAX.CanSearch(le),Key_HealthProvider_BILLING_TAX.ScoredLNPIDFetch(param_BILLING_TAX_ID := le.BILLING_TAX_ID,param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_SNAME := le.SNAME,param_GENDER := le.GENDER,param_DOB := (UNSIGNED4)le.DOB,param_C_LIC_NBR := le.C_LIC_NBR,param_C_LIC_NBR_len := C_LIC_NBR_len,param_LIC_STATE := le.LIC_STATE)),LNPID)
    ,SORTED(IF(Health_Provider_Services.Key_HealthProvider_DEA.CanSearch(le),Key_HealthProvider_DEA.ScoredLNPIDFetch(param_DEA_NUMBER := le.DEA_NUMBER,param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_SNAME := le.SNAME,param_GENDER := le.GENDER,param_DOB := (UNSIGNED4)le.DOB,param_C_LIC_NBR := le.C_LIC_NBR,param_C_LIC_NBR_len := C_LIC_NBR_len,param_LIC_STATE := le.LIC_STATE)),LNPID)
    ,SORTED(IF(Health_Provider_Services.Key_HealthProvider_NPI.CanSearch(le),Key_HealthProvider_NPI.ScoredLNPIDFetch(param_NPI_NUMBER := le.NPI_NUMBER,param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_SNAME := le.SNAME,param_GENDER := le.GENDER,param_DOB := (UNSIGNED4)le.DOB,param_C_LIC_NBR := le.C_LIC_NBR,param_C_LIC_NBR_len := C_LIC_NBR_len,param_LIC_STATE := le.LIC_STATE)),LNPID)
    ,SORTED(IF(Health_Provider_Services.Key_HealthProvider_BILLING_NPI.CanSearch(le),Key_HealthProvider_BILLING_NPI.ScoredLNPIDFetch(param_BILLING_NPI_NUMBER := le.BILLING_NPI_NUMBER,param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_SNAME := le.SNAME,param_GENDER := le.GENDER,param_DOB := (UNSIGNED4)le.DOB,param_C_LIC_NBR := le.C_LIC_NBR,param_C_LIC_NBR_len := C_LIC_NBR_len,param_LIC_STATE := le.LIC_STATE)),LNPID)
    ,SORTED(IF(Health_Provider_Services.Key_HealthProvider_UPN.CanSearch(le),Key_HealthProvider_UPN.ScoredLNPIDFetch(param_UPIN := le.UPIN,param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_SNAME := le.SNAME,param_GENDER := le.GENDER,param_DOB := (UNSIGNED4)le.DOB,param_C_LIC_NBR := le.C_LIC_NBR,param_C_LIC_NBR_len := C_LIC_NBR_len,param_LIC_STATE := le.LIC_STATE)),LNPID)
    ,SORTED(IF(Health_Provider_Services.Key_HealthProvider_LEXID.CanSearch(le),Key_HealthProvider_LEXID.ScoredLNPIDFetch(param_DID := le.DID,param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_SNAME := le.SNAME,param_GENDER := le.GENDER,param_DOB := (UNSIGNED4)le.DOB,param_C_LIC_NBR := le.C_LIC_NBR,param_C_LIC_NBR_len := C_LIC_NBR_len,param_LIC_STATE := le.LIC_STATE)),LNPID)
    ,SORTED(IF(Health_Provider_Services.Key_HealthProvider_BID.CanSearch(le),Key_HealthProvider_BID.ScoredLNPIDFetch(param_BDID := le.BDID,param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_SNAME := le.SNAME,param_GENDER := le.GENDER,param_DOB := (UNSIGNED4)le.DOB,param_C_LIC_NBR := le.C_LIC_NBR,param_C_LIC_NBR_len := C_LIC_NBR_len,param_LIC_STATE := le.LIC_STATE)),LNPID)
    ,SORTED(IF(Health_Provider_Services.Key_HealthProvider_SRC_RID.CanSearch(le),Key_HealthProvider_SRC_RID.ScoredLNPIDFetch(param_SOURCE_RID := le.SOURCE_RID,param_SRC := le.SRC,param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_DOB := (UNSIGNED4)le.DOB,param_V_CITY_NAME := le.V_CITY_NAME,param_ST := le.ST,param_GENDER := le.GENDER,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_SNAME := le.SNAME)),LNPID)
    ,SORTED(IF(Health_Provider_Services.Key_HealthProvider_RID.CanSearch(le),Key_HealthProvider_RID.ScoredLNPIDFetch(param_RID := le.RID)),LNPID),SORTED(LNPID)) /* Merged */
    ,SORTED(Key_HealthProvider_.ScoredLNPIDFetch(param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_SNAME := le.SNAME,param_GENDER := le.GENDER,param_PRIM_RANGE := le.PRIM_RANGE,param_PRIM_NAME := le.PRIM_NAME,param_SEC_RANGE := le.SEC_RANGE,param_V_CITY_NAME := le.V_CITY_NAME,param_ST := le.ST,param_ZIP := le.ZIP,param_SSN := le.SSN,param_SSN_len := SSN_len,param_CNSMR_SSN := le.CNSMR_SSN,param_CNSMR_SSN_len := CNSMR_SSN_len,param_DOB := (UNSIGNED4)le.DOB,param_CNSMR_DOB := (UNSIGNED4)le.CNSMR_DOB,param_PHONE := le.PHONE,param_LIC_STATE := le.LIC_STATE,param_C_LIC_NBR := le.C_LIC_NBR,param_C_LIC_NBR_len := C_LIC_NBR_len,param_TAX_ID := le.TAX_ID,param_BILLING_TAX_ID := le.BILLING_TAX_ID,param_DEA_NUMBER := le.DEA_NUMBER,param_VENDOR_ID := le.VENDOR_ID,param_NPI_NUMBER := le.NPI_NUMBER,param_BILLING_NPI_NUMBER := le.BILLING_NPI_NUMBER,param_UPIN := le.UPIN,param_DID := le.DID,param_BDID := le.BDID,param_SRC := le.SRC,param_SOURCE_RID := le.SOURCE_RID,param_RID := le.RID,param_MAINNAME := le.MAINNAME,param_FULLNAME := le.FULLNAME,param_ADDR1 := le.ADDR1,param_LOCALE := le.LOCALE,param_ADDRESS := le.ADDRESS),LNPID)) /* IF */ 
 
    , RIGHT.LNPID > 0 AND LEFT.LNPID = RIGHT.LNPID, Process_xLNPID_Layouts.Combine_Scores(LEFT, RIGHT))((LNPID NOT IN ButNot) AND (SALT311.DebugMode OR ~ForceFailed OR ButNot <> [])); // Warning - is a fetch to keys etc
  fetchResults := TOPN(fetchResults0(LNPID > 0),le.MaxIDs + 1,-Weight) & fetchResults0(LNPID = 0);
  SELF.Results := PROJECT(CHOOSEN(Process_xLNPID_Layouts.AdjustKeysUsedAndFailed(fetchResults), le.MaxIDs), TRANSFORM(RECORDOF(LEFT), SELF.reference := le.UniqueId, SELF := LEFT));
  SELF.IsTruncated := COUNT(fetchResults) > le.MaxIDs;
  Process_xLNPID_Layouts.MAC_Add_ResolutionFlags()
  SELF := le;
END;
  RR0 := PROJECT(in(Entered_LNPID=0),GetResults(left),PREFETCH(Config.MeowPrefetch,PARALLEL));
  Process_xLNPID_Layouts.OutputLayout rl(RR0 le,RR0 ri) := TRANSFORM
    SELF.keys_tried := le.keys_tried | ri.keys_tried; // If either tried it was tried
    mergedResults := TOPN(ROLLUP( SORT( le.Results+ri.Results, LNPID )
    , RIGHT.LNPID > 0 AND LEFT.LNPID = RIGHT.LNPID, Process_xLNPID_Layouts.Combine_Scores(LEFT, RIGHT))((LNPID NOT IN ButNot) AND (SALT311.DebugMode OR ~ForceFailed OR ButNot <> [])),le.MaxIds + 1,-Weight);
    SELF.Results := CHOOSEN(mergedResults, le.MaxIds);
    SELF.IsTruncated := ((le.IsTruncated OR ri.IsTruncated) AND COUNT(mergedResults) = le.MaxIds) OR COUNT(mergedResults) > le.MaxIds;
    SELF := le;
  END;
  RR1 := ROLLUP( SORT( RR0, UniqueId ), LEFT.UniqueId=RIGHT.UniqueId, rl(LEFT,RIGHT));
  RR20 := IF ( MultiRec, RR1, RR0 );
  Process_xLNPID_Layouts.OutputLayout AdjustScores(RR0 le) := TRANSFORM // Adjust scores for non-exact matches if needed
    SELF.Results := UNGROUP(Process_xLNPID_Layouts.AdjustScoresForNonExactMatches(le.Results));
    SELF := le;
  END;
  RR2 := PROJECT(RR20,AdjustScores(LEFT));
  Process_xLNPID_Layouts.OutputLayout PruneByLead(RR0 le) := TRANSFORM // Prune out the weak results if good ones exist
    SELF.Results := le.Results(weight >= MAX(le.Results,weight)-le.LeadThreshold);
    SELF.IsTruncated := le.IsTruncated AND COUNT(SELF.Results) = le.MaxIds;
    SELF := le;
  END;
  RR3 := RR2(LeadThreshold=0)+PROJECT(RR2(LeadThreshold<>0),PruneByLead(LEFT));
  SALT311.MAC_External_AddPcnt(RR3,Process_xLNPID_Layouts.LayoutScoredFetch,Results,Process_xLNPID_Layouts.OutputLayout,23,RR4);
  EXPORT Raw_Results := IF(EXISTS(RR0),RR4);
// Pass-thru any records which already had the LNPID on them
  Process_xLNPID_Layouts.id_stream_layout ptt(in le) := TRANSFORM
    SELF.UniqueId := le.UniqueId;
    SELF.IsTruncated := FALSE;
    SELF.LNPID := le.Entered_LNPID;
    SELF.Weight := Config.MatchThreshold; // Assume at least 'threshold' met
    SELF.Score := 100;
  END;
  SHARED pass_thru := PROJECT(in(~(Entered_LNPID=0)),ptt(LEFT));
// Transform to process 'real' results
  Process_xLNPID_Layouts.id_stream_layout n(Raw_Results le,UNSIGNED c) := TRANSFORM
    SELF.UniqueId := le.UniqueId;
    SELF.IsTruncated := le.IsTruncated;
    SELF.KeysUsed := le.Results[c].keys_used;
    SELF.KeysFailed := le.Results[c].keys_failed;
    SELF := le.Results[c];
  END;
  EXPORT Uid_Results0 := NORMALIZE(Raw_Results,COUNT(LEFT.Results),n(LEFT,COUNTER));
  EXPORT Uid_Results := Uid_Results0+pass_thru;
  EXPORT Raw_Data := Process_xLNPID_Layouts.Fetch_Stream(Uid_Results);
 
  // This macro can be used to score any data with field names matching the header standard to the input criteria
  EXPORT ScoreData(RD,Inv) := FUNCTIONMACRO
    Layout_Matched_Data := RECORD
      RD;
      BOOLEAN FullMatch_Required; // If the input enquiry is insisting upon full record match
      BOOLEAN Has_Fullmatch; // This UID has a fully matching record
      BOOLEAN RecordsOnly; // If the input enquiry only wants matching records returned
      BOOLEAN Is_Fullmatch; // This record matches completely
      INTEGER2 Record_Score; // Score for this particular record
      INTEGER2 Match_FNAME;
      INTEGER2 Match_MNAME;
      INTEGER2 Match_LNAME;
      INTEGER2 Match_SNAME;
      INTEGER2 Match_GENDER;
      INTEGER2 Match_PRIM_RANGE;
      INTEGER2 Match_PRIM_NAME;
      INTEGER2 Match_SEC_RANGE;
      INTEGER2 Match_V_CITY_NAME;
      INTEGER2 Match_ST;
      INTEGER2 Match_ZIP;
      INTEGER2 Match_SSN;
      INTEGER2 Match_CNSMR_SSN;
      INTEGER2 Match_DOB;
      INTEGER2 Match_CNSMR_DOB;
      INTEGER2 Match_PHONE;
      INTEGER2 Match_LIC_STATE;
      INTEGER2 Match_C_LIC_NBR;
      INTEGER2 Match_TAX_ID;
      INTEGER2 Match_BILLING_TAX_ID;
      INTEGER2 Match_DEA_NUMBER;
      INTEGER2 Match_VENDOR_ID;
      INTEGER2 Match_NPI_NUMBER;
      INTEGER2 Match_BILLING_NPI_NUMBER;
      INTEGER2 Match_UPIN;
      INTEGER2 Match_DID;
      INTEGER2 Match_BDID;
      INTEGER2 Match_SRC;
      INTEGER2 Match_SOURCE_RID;
      INTEGER2 Match_RID;
      INTEGER2 Match_MAINNAME;
      INTEGER2 Match_FULLNAME;
      INTEGER2 Match_ADDR1;
      INTEGER2 Match_LOCALE;
      INTEGER2 Match_ADDRESS;
    END;
    IMPORT SALT311,Health_Provider_Services;
    Layout_Matched_Data score_fields(RD le,Inv ri) := TRANSFORM
    SELF.Match_FNAME := MAP ( ri.FNAME = (TYPEOF(ri.FNAME))'' => SALT311.HeaderSearchMatchCode.NoSearchCriteria, le.FNAME = (TYPEOF(ri.FNAME))'' => SALT311.HeaderSearchMatchCode.BlankField,SALT311.MatchCode.GroupHeaderSearchCodes(Health_Provider_Services.match_methods(Health_Provider_Services.File_HealthProvider).match_FNAME(le.FNAME,ri.FNAME,0,0,FALSE)));
    SELF.Match_MNAME := MAP ( ri.MNAME = (TYPEOF(ri.MNAME))'' => SALT311.HeaderSearchMatchCode.NoSearchCriteria, le.MNAME = (TYPEOF(ri.MNAME))'' => SALT311.HeaderSearchMatchCode.BlankField,SALT311.MatchCode.GroupHeaderSearchCodes(Health_Provider_Services.match_methods(Health_Provider_Services.File_HealthProvider).match_MNAME(le.MNAME,ri.MNAME,0,0,FALSE)));
    SELF.Match_LNAME := MAP ( ri.LNAME = (TYPEOF(ri.LNAME))'' => SALT311.HeaderSearchMatchCode.NoSearchCriteria, le.LNAME = (TYPEOF(ri.LNAME))'' => SALT311.HeaderSearchMatchCode.BlankField,SALT311.MatchCode.GroupHeaderSearchCodes(Health_Provider_Services.match_methods(Health_Provider_Services.File_HealthProvider).match_LNAME(le.LNAME,ri.LNAME,0,0,FALSE)));
    SELF.Match_SNAME := MAP ( ri.SNAME = (TYPEOF(ri.SNAME))'' => SALT311.HeaderSearchMatchCode.NoSearchCriteria, le.SNAME = (TYPEOF(ri.SNAME))'' => SALT311.HeaderSearchMatchCode.BlankField,SALT311.MatchCode.GroupHeaderSearchCodes(Health_Provider_Services.match_methods(Health_Provider_Services.File_HealthProvider).match_SNAME(le.SNAME,ri.SNAME,FALSE)));
    SELF.Match_GENDER := MAP ( ri.GENDER = (TYPEOF(ri.GENDER))'' => SALT311.HeaderSearchMatchCode.NoSearchCriteria, le.GENDER = (TYPEOF(ri.GENDER))'' => SALT311.HeaderSearchMatchCode.BlankField,SALT311.MatchCode.GroupHeaderSearchCodes(Health_Provider_Services.match_methods(Health_Provider_Services.File_HealthProvider).match_GENDER(le.GENDER,ri.GENDER,FALSE)));
    SELF.Match_PRIM_RANGE := MAP ( ri.PRIM_RANGE = (TYPEOF(ri.PRIM_RANGE))'' => SALT311.HeaderSearchMatchCode.NoSearchCriteria, le.PRIM_RANGE = (TYPEOF(ri.PRIM_RANGE))'' => SALT311.HeaderSearchMatchCode.BlankField,SALT311.MatchCode.GroupHeaderSearchCodes(Health_Provider_Services.match_methods(Health_Provider_Services.File_HealthProvider).match_PRIM_RANGE(le.PRIM_RANGE,ri.PRIM_RANGE,FALSE)));
    SELF.Match_PRIM_NAME := MAP ( ri.PRIM_NAME = (TYPEOF(ri.PRIM_NAME))'' => SALT311.HeaderSearchMatchCode.NoSearchCriteria, le.PRIM_NAME = (TYPEOF(ri.PRIM_NAME))'' => SALT311.HeaderSearchMatchCode.BlankField,SALT311.MatchCode.GroupHeaderSearchCodes(Health_Provider_Services.match_methods(Health_Provider_Services.File_HealthProvider).match_PRIM_NAME(le.PRIM_NAME,ri.PRIM_NAME,FALSE)));
    SELF.Match_SEC_RANGE := MAP ( ri.SEC_RANGE = (TYPEOF(ri.SEC_RANGE))'' => SALT311.HeaderSearchMatchCode.NoSearchCriteria, le.SEC_RANGE = (TYPEOF(ri.SEC_RANGE))'' => SALT311.HeaderSearchMatchCode.BlankField,SALT311.MatchCode.GroupHeaderSearchCodes(Health_Provider_Services.match_methods(Health_Provider_Services.File_HealthProvider).match_SEC_RANGE(le.SEC_RANGE,ri.SEC_RANGE,FALSE)));
    SELF.Match_V_CITY_NAME := MAP ( ri.V_CITY_NAME = (TYPEOF(ri.V_CITY_NAME))'' => SALT311.HeaderSearchMatchCode.NoSearchCriteria, le.V_CITY_NAME = (TYPEOF(ri.V_CITY_NAME))'' => SALT311.HeaderSearchMatchCode.BlankField,SALT311.MatchCode.GroupHeaderSearchCodes(Health_Provider_Services.match_methods(Health_Provider_Services.File_HealthProvider).match_V_CITY_NAME(le.V_CITY_NAME,ri.V_CITY_NAME,FALSE)));
    SELF.Match_ST := MAP ( ri.ST = (TYPEOF(ri.ST))'' => SALT311.HeaderSearchMatchCode.NoSearchCriteria, le.ST = (TYPEOF(ri.ST))'' => SALT311.HeaderSearchMatchCode.BlankField,SALT311.MatchCode.GroupHeaderSearchCodes(Health_Provider_Services.match_methods(Health_Provider_Services.File_HealthProvider).match_ST(le.ST,ri.ST,FALSE)));
    SELF.Match_ZIP := MAP ( ri.ZIP = (TYPEOF(ri.ZIP))'' => SALT311.HeaderSearchMatchCode.NoSearchCriteria, le.ZIP = (TYPEOF(ri.ZIP))'' => SALT311.HeaderSearchMatchCode.BlankField,SALT311.MatchCode.GroupHeaderSearchCodes(Health_Provider_Services.match_methods(Health_Provider_Services.File_HealthProvider).match_ZIP(le.ZIP,ri.ZIP,FALSE)));
    SELF.Match_SSN := MAP ( ri.SSN = (TYPEOF(ri.SSN))'' => SALT311.HeaderSearchMatchCode.NoSearchCriteria, le.SSN = (TYPEOF(ri.SSN))'' => SALT311.HeaderSearchMatchCode.BlankField,SALT311.MatchCode.GroupHeaderSearchCodes(Health_Provider_Services.match_methods(Health_Provider_Services.File_HealthProvider).match_SSN(le.SSN,ri.SSN,0,0,FALSE)));
    SELF.Match_CNSMR_SSN := MAP ( ri.CNSMR_SSN = (TYPEOF(ri.CNSMR_SSN))'' => SALT311.HeaderSearchMatchCode.NoSearchCriteria, le.CNSMR_SSN = (TYPEOF(ri.CNSMR_SSN))'' => SALT311.HeaderSearchMatchCode.BlankField,SALT311.MatchCode.GroupHeaderSearchCodes(Health_Provider_Services.match_methods(Health_Provider_Services.File_HealthProvider).match_CNSMR_SSN(le.CNSMR_SSN,ri.CNSMR_SSN,0,0,FALSE)));
    SELF.Match_DOB := SALT311.Fn_DobMatch_FuzzyScore((UNSIGNED)le.DOB,(UNSIGNED)ri.DOB);
    SELF.Match_CNSMR_DOB := SALT311.Fn_DobMatch_FuzzyScore((UNSIGNED)le.CNSMR_DOB,(UNSIGNED)ri.CNSMR_DOB);
    SELF.Match_PHONE := MAP ( ri.PHONE = (TYPEOF(ri.PHONE))'' => SALT311.HeaderSearchMatchCode.NoSearchCriteria, le.PHONE = (TYPEOF(ri.PHONE))'' => SALT311.HeaderSearchMatchCode.BlankField,SALT311.MatchCode.GroupHeaderSearchCodes(Health_Provider_Services.match_methods(Health_Provider_Services.File_HealthProvider).match_PHONE(le.PHONE,ri.PHONE,FALSE)));
    SELF.Match_LIC_STATE := MAP ( ri.LIC_STATE = (TYPEOF(ri.LIC_STATE))'' => SALT311.HeaderSearchMatchCode.NoSearchCriteria, le.LIC_STATE = (TYPEOF(ri.LIC_STATE))'' => SALT311.HeaderSearchMatchCode.BlankField,SALT311.MatchCode.GroupHeaderSearchCodes(Health_Provider_Services.match_methods(Health_Provider_Services.File_HealthProvider).match_LIC_STATE(le.LIC_STATE,ri.LIC_STATE,FALSE)));
    SELF.Match_C_LIC_NBR := MAP ( ri.C_LIC_NBR = (TYPEOF(ri.C_LIC_NBR))'' => SALT311.HeaderSearchMatchCode.NoSearchCriteria, le.C_LIC_NBR = (TYPEOF(ri.C_LIC_NBR))'' => SALT311.HeaderSearchMatchCode.BlankField,SALT311.MatchCode.GroupHeaderSearchCodes(Health_Provider_Services.match_methods(Health_Provider_Services.File_HealthProvider).match_C_LIC_NBR(le.C_LIC_NBR,ri.C_LIC_NBR,0,0,FALSE)));
    SELF.Match_TAX_ID := MAP ( ri.TAX_ID = (TYPEOF(ri.TAX_ID))'' => SALT311.HeaderSearchMatchCode.NoSearchCriteria, le.TAX_ID = (TYPEOF(ri.TAX_ID))'' => SALT311.HeaderSearchMatchCode.BlankField,SALT311.MatchCode.GroupHeaderSearchCodes(Health_Provider_Services.match_methods(Health_Provider_Services.File_HealthProvider).match_TAX_ID(le.TAX_ID,ri.TAX_ID,FALSE)));
    SELF.Match_BILLING_TAX_ID := MAP ( ri.BILLING_TAX_ID = (TYPEOF(ri.BILLING_TAX_ID))'' => SALT311.HeaderSearchMatchCode.NoSearchCriteria, le.BILLING_TAX_ID = (TYPEOF(ri.BILLING_TAX_ID))'' => SALT311.HeaderSearchMatchCode.BlankField,SALT311.MatchCode.GroupHeaderSearchCodes(Health_Provider_Services.match_methods(Health_Provider_Services.File_HealthProvider).match_BILLING_TAX_ID(le.BILLING_TAX_ID,ri.BILLING_TAX_ID,FALSE)));
    SELF.Match_DEA_NUMBER := MAP ( ri.DEA_NUMBER = (TYPEOF(ri.DEA_NUMBER))'' => SALT311.HeaderSearchMatchCode.NoSearchCriteria, le.DEA_NUMBER = (TYPEOF(ri.DEA_NUMBER))'' => SALT311.HeaderSearchMatchCode.BlankField,SALT311.MatchCode.GroupHeaderSearchCodes(Health_Provider_Services.match_methods(Health_Provider_Services.File_HealthProvider).match_DEA_NUMBER(le.DEA_NUMBER,ri.DEA_NUMBER,FALSE)));
    SELF.Match_VENDOR_ID := MAP ( ri.VENDOR_ID = (TYPEOF(ri.VENDOR_ID))'' => SALT311.HeaderSearchMatchCode.NoSearchCriteria, le.VENDOR_ID = (TYPEOF(ri.VENDOR_ID))'' => SALT311.HeaderSearchMatchCode.BlankField,SALT311.MatchCode.GroupHeaderSearchCodes(Health_Provider_Services.match_methods(Health_Provider_Services.File_HealthProvider).match_VENDOR_ID(le.VENDOR_ID,ri.VENDOR_ID,FALSE)));
    SELF.Match_NPI_NUMBER := MAP ( ri.NPI_NUMBER = (TYPEOF(ri.NPI_NUMBER))'' => SALT311.HeaderSearchMatchCode.NoSearchCriteria, le.NPI_NUMBER = (TYPEOF(ri.NPI_NUMBER))'' => SALT311.HeaderSearchMatchCode.BlankField,SALT311.MatchCode.GroupHeaderSearchCodes(Health_Provider_Services.match_methods(Health_Provider_Services.File_HealthProvider).match_NPI_NUMBER(le.NPI_NUMBER,ri.NPI_NUMBER,FALSE)));
    SELF.Match_BILLING_NPI_NUMBER := MAP ( ri.BILLING_NPI_NUMBER = (TYPEOF(ri.BILLING_NPI_NUMBER))'' => SALT311.HeaderSearchMatchCode.NoSearchCriteria, le.BILLING_NPI_NUMBER = (TYPEOF(ri.BILLING_NPI_NUMBER))'' => SALT311.HeaderSearchMatchCode.BlankField,SALT311.MatchCode.GroupHeaderSearchCodes(Health_Provider_Services.match_methods(Health_Provider_Services.File_HealthProvider).match_BILLING_NPI_NUMBER(le.BILLING_NPI_NUMBER,ri.BILLING_NPI_NUMBER,FALSE)));
    SELF.Match_UPIN := MAP ( ri.UPIN = (TYPEOF(ri.UPIN))'' => SALT311.HeaderSearchMatchCode.NoSearchCriteria, le.UPIN = (TYPEOF(ri.UPIN))'' => SALT311.HeaderSearchMatchCode.BlankField,SALT311.MatchCode.GroupHeaderSearchCodes(Health_Provider_Services.match_methods(Health_Provider_Services.File_HealthProvider).match_UPIN(le.UPIN,ri.UPIN,FALSE)));
    SELF.Match_DID := MAP ( ri.DID = (TYPEOF(ri.DID))'' => SALT311.HeaderSearchMatchCode.NoSearchCriteria, le.DID = (TYPEOF(ri.DID))'' => SALT311.HeaderSearchMatchCode.BlankField,SALT311.MatchCode.GroupHeaderSearchCodes(Health_Provider_Services.match_methods(Health_Provider_Services.File_HealthProvider).match_DID(le.DID,ri.DID,FALSE)));
    SELF.Match_BDID := MAP ( ri.BDID = (TYPEOF(ri.BDID))'' => SALT311.HeaderSearchMatchCode.NoSearchCriteria, le.BDID = (TYPEOF(ri.BDID))'' => SALT311.HeaderSearchMatchCode.BlankField,SALT311.MatchCode.GroupHeaderSearchCodes(Health_Provider_Services.match_methods(Health_Provider_Services.File_HealthProvider).match_BDID(le.BDID,ri.BDID,FALSE)));
    SELF.Match_SRC := MAP ( ri.SRC = (TYPEOF(ri.SRC))'' => SALT311.HeaderSearchMatchCode.NoSearchCriteria, le.SRC = (TYPEOF(ri.SRC))'' => SALT311.HeaderSearchMatchCode.BlankField,SALT311.MatchCode.GroupHeaderSearchCodes(Health_Provider_Services.match_methods(Health_Provider_Services.File_HealthProvider).match_SRC(le.SRC,ri.SRC,FALSE)));
    SELF.Match_SOURCE_RID := MAP ( ri.SOURCE_RID = (TYPEOF(ri.SOURCE_RID))'' => SALT311.HeaderSearchMatchCode.NoSearchCriteria, le.SOURCE_RID = (TYPEOF(ri.SOURCE_RID))'' => SALT311.HeaderSearchMatchCode.BlankField,SALT311.MatchCode.GroupHeaderSearchCodes(Health_Provider_Services.match_methods(Health_Provider_Services.File_HealthProvider).match_SOURCE_RID(le.SOURCE_RID,ri.SOURCE_RID,FALSE)));
    SELF.Match_RID := MAP ( ri.RID = (TYPEOF(ri.RID))'' => SALT311.HeaderSearchMatchCode.NoSearchCriteria, le.RID = (TYPEOF(ri.RID))'' => SALT311.HeaderSearchMatchCode.BlankField,SALT311.MatchCode.GroupHeaderSearchCodes(Health_Provider_Services.match_methods(Health_Provider_Services.File_HealthProvider).match_RID(le.RID,ri.RID,FALSE)));
    ri_MAINNAME := SALT311.Fn_WordBag_AppendSpecs_Fake((SALT311.StrType)ri.MAINNAME);//For later scoring
    le_MAINNAME := SALT311.Fn_WordBag_AppendSpecs_Fake(TRIM((SALT311.StrType)le.FNAME) + ' ' + TRIM((SALT311.StrType)le.MNAME) + ' ' + TRIM((SALT311.StrType)le.LNAME));//For later scoring
    SELF.Match_MAINNAME := MAP ( ri.MAINNAME = (typeof(ri.MAINNAME))'' => SALT311.HeaderSearchMatchCode.NoSearchCriteria, le_MAINNAME = (typeof(ri.MAINNAME))'' => SALT311.HeaderSearchMatchCode.BlankField, ri_MAINNAME = le_MAINNAME => SALT311.HeaderSearchMatchCode.Match,SALT311.MatchBagOfWords(le_MAINNAME,ri_MAINNAME,31744,1) > Health_Provider_Services.Config.MAINNAME_Force * 100 => SALT311.HeaderSearchMatchCode.FuzzyMatch, SALT311.HeaderSearchMatchCode.NoMatch);
    ri_FULLNAME := SALT311.Fn_WordBag_AppendSpecs_Fake((SALT311.StrType)ri.FULLNAME);//For later scoring
    le_FULLNAME := SALT311.Fn_WordBag_AppendSpecs_Fake(TRIM((SALT311.StrType)le.FNAME) + ' ' + TRIM((SALT311.StrType)le.MNAME) + ' ' + TRIM((SALT311.StrType)le.LNAME) + ' ' + TRIM((SALT311.StrType)le.SNAME));//For later scoring
    SELF.Match_FULLNAME := MAP ( ri.FULLNAME = (typeof(ri.FULLNAME))'' => SALT311.HeaderSearchMatchCode.NoSearchCriteria, le_FULLNAME = (typeof(ri.FULLNAME))'' => SALT311.HeaderSearchMatchCode.BlankField, ri_FULLNAME = le_FULLNAME => SALT311.HeaderSearchMatchCode.Match, SALT311.HeaderSearchMatchCode.NoMatch);
    ri_ADDR1 := SALT311.Fn_WordBag_AppendSpecs_Fake((SALT311.StrType)ri.ADDR1);//For later scoring
    le_ADDR1 := SALT311.Fn_WordBag_AppendSpecs_Fake(TRIM((SALT311.StrType)le.PRIM_NAME) + ' ' + TRIM((SALT311.StrType)le.PRIM_RANGE) + ' ' + TRIM((SALT311.StrType)le.SEC_RANGE));//For later scoring
    SELF.Match_ADDR1 := MAP ( ri.ADDR1 = (typeof(ri.ADDR1))'' => SALT311.HeaderSearchMatchCode.NoSearchCriteria, le_ADDR1 = (typeof(ri.ADDR1))'' => SALT311.HeaderSearchMatchCode.BlankField, ri_ADDR1 = le_ADDR1 => SALT311.HeaderSearchMatchCode.Match, SALT311.HeaderSearchMatchCode.NoMatch);
    ri_LOCALE := SALT311.Fn_WordBag_AppendSpecs_Fake((SALT311.StrType)ri.LOCALE);//For later scoring
    le_LOCALE := SALT311.Fn_WordBag_AppendSpecs_Fake(TRIM((SALT311.StrType)le.V_CITY_NAME) + ' ' + TRIM((SALT311.StrType)le.ST) + ' ' + TRIM((SALT311.StrType)le.ZIP));//For later scoring
    SELF.Match_LOCALE := MAP ( ri.LOCALE = (typeof(ri.LOCALE))'' => SALT311.HeaderSearchMatchCode.NoSearchCriteria, le_LOCALE = (typeof(ri.LOCALE))'' => SALT311.HeaderSearchMatchCode.BlankField, ri_LOCALE = le_LOCALE => SALT311.HeaderSearchMatchCode.Match, SALT311.HeaderSearchMatchCode.NoMatch);
    ri_ADDRESS := SALT311.Fn_WordBag_AppendSpecs_Fake((SALT311.StrType)ri.ADDRESS);//For later scoring
    le_ADDRESS := SALT311.Fn_WordBag_AppendSpecs_Fake(TRIM((SALT311.StrType)le.PRIM_NAME) + ' ' + TRIM((SALT311.StrType)le.PRIM_RANGE) + ' ' + TRIM((SALT311.StrType)le.SEC_RANGE) + ' ' + TRIM((SALT311.StrType)le.V_CITY_NAME) + ' ' + TRIM((SALT311.StrType)le.ST) + ' ' + TRIM((SALT311.StrType)le.ZIP));//For later scoring
    SELF.Match_ADDRESS := MAP ( ri.ADDRESS = (typeof(ri.ADDRESS))'' => SALT311.HeaderSearchMatchCode.NoSearchCriteria, le_ADDRESS = (typeof(ri.ADDRESS))'' => SALT311.HeaderSearchMatchCode.BlankField, ri_ADDRESS = le_ADDRESS => SALT311.HeaderSearchMatchCode.Match, SALT311.HeaderSearchMatchCode.NoMatch);
      SELF.Record_Score := SELF.Match_FNAME + SELF.Match_MNAME + SELF.Match_LNAME + SELF.Match_SNAME + SELF.Match_GENDER + SELF.Match_PRIM_RANGE + SELF.Match_PRIM_NAME + SELF.Match_SEC_RANGE + SELF.Match_V_CITY_NAME + SELF.Match_ST + SELF.Match_ZIP + SELF.Match_SSN + SELF.Match_CNSMR_SSN + SELF.Match_DOB + SELF.Match_CNSMR_DOB + SELF.Match_PHONE + SELF.Match_LIC_STATE + SELF.Match_C_LIC_NBR + SELF.Match_TAX_ID + SELF.Match_BILLING_TAX_ID + SELF.Match_DEA_NUMBER + SELF.Match_VENDOR_ID + SELF.Match_NPI_NUMBER + SELF.Match_BILLING_NPI_NUMBER + SELF.Match_UPIN + SELF.Match_DID + SELF.Match_BDID + SELF.Match_SRC + SELF.Match_SOURCE_RID + SELF.Match_RID + SELF.Match_MAINNAME + SELF.Match_FULLNAME + SELF.Match_ADDR1 + SELF.Match_LOCALE + SELF.Match_ADDRESS;
      SELF.Is_FullMatch := SELF.Match_FNAME>=0 AND SELF.Match_MNAME>=0 AND SELF.Match_LNAME>=0 AND SELF.Match_SNAME>=0 AND SELF.Match_GENDER>=0 AND SELF.Match_PRIM_RANGE>=0 AND SELF.Match_PRIM_NAME>=0 AND SELF.Match_SEC_RANGE>=0 AND SELF.Match_V_CITY_NAME>=0 AND SELF.Match_ST>=0 AND SELF.Match_ZIP>=0 AND SELF.Match_SSN>=0 AND SELF.Match_CNSMR_SSN>=0 AND SELF.Match_DOB>=0 AND SELF.Match_CNSMR_DOB>=0 AND SELF.Match_PHONE>=0 AND SELF.Match_LIC_STATE>=0 AND SELF.Match_C_LIC_NBR>=0 AND SELF.Match_TAX_ID>=0 AND SELF.Match_BILLING_TAX_ID>=0 AND SELF.Match_DEA_NUMBER>=0 AND SELF.Match_VENDOR_ID>=0 AND SELF.Match_NPI_NUMBER>=0 AND SELF.Match_BILLING_NPI_NUMBER>=0 AND SELF.Match_UPIN>=0 AND SELF.Match_DID>=0 AND SELF.Match_BDID>=0 AND SELF.Match_SRC>=0 AND SELF.Match_SOURCE_RID>=0 AND SELF.Match_RID>=0 AND SELF.Match_MAINNAME>=0 AND SELF.Match_FULLNAME>=0 AND SELF.Match_ADDR1>=0 AND SELF.Match_LOCALE>=0 AND SELF.Match_ADDRESS>=0;
      SELF.Has_FullMatch := SELF.Is_FullMatch; // Filled in later using iterate
      SELF.FullMatch_Required := ri.FullMatch;
      SELF.RecordsOnly := ri.MatchRecords;
      SELF := le;
    END;
    ScoredData := JOIN(RD,Inv,LEFT.UniqueId=RIGHT.UniqueId,score_fields(LEFT,RIGHT));
    Layout_Matched_Data prop_full(ScoredData le,ScoredData ri) := TRANSFORM
  	  SELF.Has_FullMatch := ri.Has_FullMatch OR le.Has_FullMatch AND le.LNPID=ri.LNPID AND le.UniqueId=ri.UniqueId;
      SELF := ri;
    END;
    RETURN ITERATE( SORT( ScoredData,UniqueId,-Has_FullMatch ),prop_full(LEFT,RIGHT) );
  ENDMACRO;
 
  i := ScoreData(Raw_Data,In);
  // Now narrow down to the required records - note this can be switched per UniqueId
  i1 := i(Has_FullMatch OR ~FullMatch_Required,~RecordsOnly OR Is_FullMatch OR ~FullMatch_Required AND Record_Score>0);
  W1 := IF ( i1.RecordsOnly,i1.Record_Score,i1.Weight );
  EXPORT Data_ := DEDUP(SORT(i1,UniqueId,-W1,LNPID,-(Record_Score+Weight-W1)),WHOLE RECORD);
  // Now create 'data bombs' suitable for a remote deep dive search
  // We might want to reduce the number of results 'cleverly' over time - for now slap it all in there
  Process_xLNPID_Layouts.InputLayout tr(Raw_Data le) := TRANSFORM
    SELF.Entered_LNPID := 0; // Blank out the specific IDs
    SELF := le;
    SELF.LeadThreshold := 0;
    SELF.MaxIds := 50;
    SELF := []
;  END;
// If there are any simple prop fields; they can be applied here
  DSAfter_SNAME := SALT311.MAC_Field_Prop_Do(Raw_Data,SNAME,LNPID);
  DSAfter_SSN := SALT311.MAC_Field_Prop_Do(DSAfter_SNAME,SSN,LNPID);
  DSAfter_CNSMR_SSN := SALT311.MAC_Field_Prop_Do(DSAfter_SSN,CNSMR_SSN,LNPID);
  DSAfter_DOB := SALT311.MAC_Field_Prop_Do(DSAfter_CNSMR_SSN,DOB,LNPID);
  DSAfter_CNSMR_DOB := SALT311.MAC_Field_Prop_Do(DSAfter_DOB,CNSMR_DOB,LNPID);
  DSAfter_C_LIC_NBR := SALT311.MAC_Field_Prop_Do(DSAfter_CNSMR_DOB,C_LIC_NBR,LNPID);
  DSAfter_BILLING_TAX_ID := SALT311.MAC_Field_Prop_Do(DSAfter_C_LIC_NBR,BILLING_TAX_ID,LNPID);
  DSAfter_DEA_NUMBER := SALT311.MAC_Field_Prop_Do(DSAfter_BILLING_TAX_ID,DEA_NUMBER,LNPID);
  DSAfter_NPI_NUMBER := SALT311.MAC_Field_Prop_Do(DSAfter_DEA_NUMBER,NPI_NUMBER,LNPID);
  DSAfter_UPIN := SALT311.MAC_Field_Prop_Do(DSAfter_NPI_NUMBER,UPIN,LNPID);
  DSAfter_SRC := SALT311.MAC_Field_Prop_Do(DSAfter_UPIN,SRC,LNPID);
  ds := PROJECT(DSAfter_SRC,tr(LEFT));
  EXPORT DataToSearch := DEDUP(ds,WHOLE RECORD,ALL);
Process_xLNPID_Layouts.OutputLayout GetResultsSpecific(Process_xLNPID_Layouts.InputLayout le,STRING LinkPathName) := TRANSFORM
// Need to calculate lengths for EDIT fields
  UNSIGNED1 FNAME_len := LENGTH(TRIM(le.FNAME));
  UNSIGNED1 MNAME_len := LENGTH(TRIM(le.MNAME));
  UNSIGNED1 LNAME_len := LENGTH(TRIM(le.LNAME));
  UNSIGNED1 SSN_len := LENGTH(TRIM(le.SSN));
  UNSIGNED1 CNSMR_SSN_len := LENGTH(TRIM(le.CNSMR_SSN));
  UNSIGNED1 C_LIC_NBR_len := LENGTH(TRIM(le.C_LIC_NBR));
  SELF.keys_tried := MAP(
        LinkPathName = 'NAMEL' =>  + IF (Key_HealthProvider_NAMEL.CanSearch(le),1 << 1,0),
        LinkPathName = 'FNAME' =>  + IF (Key_HealthProvider_FNAME.CanSearch(le),1 << 2,0),
        LinkPathName = 'NAMEC' =>  + IF (Key_HealthProvider_NAMED.CanSearch(le),1 << 3,0),
        LinkPathName = 'LNAME' =>  + IF (Key_HealthProvider_LNAME.CanSearch(le),1 << 4,0),
        LinkPathName = 'MNAME' =>  + IF (Key_HealthProvider_MNAME.CanSearch(le),1 << 5,0),
        LinkPathName = 'ADDRESS' =>  + IF (Key_HealthProvider_ADDRESS.CanSearch(le),1 << 6,0),
        LinkPathName = 'ZIP_PR' =>  + IF (Key_HealthProvider_ZIP_PR.CanSearch(le),1 << 7,0),
        LinkPathName = 'SSN_LP' =>  + IF (Key_HealthProvider_SSN_LP.CanSearch(le),1 << 8,0),
        LinkPathName = 'CNSMR_SSN_LP' =>  + IF (Key_HealthProvider_CNSMR_SSN_LP.CanSearch(le),1 << 9,0),
        LinkPathName = 'DOB_LP' =>  + IF (Key_HealthProvider_DOB_LP.CanSearch(le),1 << 10,0),
        LinkPathName = 'CNSMR_DOB_LP' =>  + IF (Key_HealthProvider_CNSMR_DOB_LP.CanSearch(le),1 << 11,0),
        LinkPathName = 'PHONE_LP' =>  + IF (Key_HealthProvider_PHONE_LP.CanSearch(le),1 << 12,0),
        LinkPathName = 'LIC' =>  + IF (Key_HealthProvider_LIC.CanSearch(le),1 << 13,0),
        LinkPathName = 'VEN' =>  + IF (Key_HealthProvider_VEN.CanSearch(le),1 << 14,0),
        LinkPathName = 'TAX' =>  + IF (Key_HealthProvider_TAX.CanSearch(le),1 << 15,0),
        LinkPathName = 'BILLING_TAX' =>  + IF (Key_HealthProvider_BILLING_TAX.CanSearch(le),1 << 16,0),
        LinkPathName = 'DEA' =>  + IF (Key_HealthProvider_DEA.CanSearch(le),1 << 17,0),
        LinkPathName = 'NPI' =>  + IF (Key_HealthProvider_NPI.CanSearch(le),1 << 18,0),
        LinkPathName = 'BILLING_NPI' =>  + IF (Key_HealthProvider_BILLING_NPI.CanSearch(le),1 << 19,0),
        LinkPathName = 'UPN' =>  + IF (Key_HealthProvider_UPN.CanSearch(le),1 << 20,0),
        LinkPathName = 'LEXID' =>  + IF (Key_HealthProvider_LEXID.CanSearch(le),1 << 21,0),
        LinkPathName = 'BID' =>  + IF (Key_HealthProvider_BID.CanSearch(le),1 << 22,0),
        LinkPathName = 'SRC_RID' =>  + IF (Key_HealthProvider_SRC_RID.CanSearch(le),1 << 23,0),
        LinkPathName = 'RID' =>  + IF (Key_HealthProvider_RID.CanSearch(le),1 << 24,0),0);
  fetchResults := MAP(
        LinkPathName = 'NAMEL' => IF(Key_HealthProvider_NAMEL.CanSearch(le),SORTED(IF(Health_Provider_Services.Key_HealthProvider_NAMEL.CanSearch(le),Key_HealthProvider_NAMEL.ScoredLNPIDFetch(param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_ST := le.ST,param_C_LIC_NBR := le.C_LIC_NBR,param_C_LIC_NBR_len := C_LIC_NBR_len,param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_GENDER := le.GENDER,param_SNAME := le.SNAME,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_PRIM_RANGE := le.PRIM_RANGE,param_PRIM_NAME := le.PRIM_NAME,param_SEC_RANGE := le.SEC_RANGE,param_V_CITY_NAME := le.V_CITY_NAME,param_ZIP := le.ZIP,param_DOB := (UNSIGNED4)le.DOB,param_LIC_STATE := le.LIC_STATE,param_NPI_NUMBER := le.NPI_NUMBER,param_BILLING_TAX_ID := le.BILLING_TAX_ID)),LNPID),DATASET([],Process_xLNPID_Layouts.LayoutScoredFetch)),
        LinkPathName = 'FNAME' => IF(Key_HealthProvider_FNAME.CanSearch(le),SORTED(IF((~Health_Provider_Services.Key_HealthProvider_NAMEL.CanSearch(le)),IF(Health_Provider_Services.Key_HealthProvider_FNAME.CanSearch(le),Key_HealthProvider_FNAME.ScoredLNPIDFetch(param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_ST := le.ST,param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_GENDER := le.GENDER,param_SNAME := le.SNAME,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_PRIM_RANGE := le.PRIM_RANGE,param_PRIM_NAME := le.PRIM_NAME,param_SEC_RANGE := le.SEC_RANGE,param_V_CITY_NAME := le.V_CITY_NAME,param_ZIP := le.ZIP,param_DOB := (UNSIGNED4)le.DOB,param_C_LIC_NBR := le.C_LIC_NBR,param_C_LIC_NBR_len := C_LIC_NBR_len,param_LIC_STATE := le.LIC_STATE,param_NPI_NUMBER := le.NPI_NUMBER,param_BILLING_TAX_ID := le.BILLING_TAX_ID))),LNPID),DATASET([],Process_xLNPID_Layouts.LayoutScoredFetch)),
        LinkPathName = 'NAMEC' => IF(Key_HealthProvider_NAMED.CanSearch(le),SORTED(IF(Health_Provider_Services.Key_HealthProvider_NAMED.CanSearch(le),Key_HealthProvider_NAMED.ScoredLNPIDFetch(param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_ZIP := le.ZIP,param_C_LIC_NBR := le.C_LIC_NBR,param_C_LIC_NBR_len := C_LIC_NBR_len,param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_GENDER := le.GENDER,param_SNAME := le.SNAME,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_PRIM_RANGE := le.PRIM_RANGE,param_PRIM_NAME := le.PRIM_NAME,param_SEC_RANGE := le.SEC_RANGE,param_V_CITY_NAME := le.V_CITY_NAME,param_ST := le.ST,param_DOB := (UNSIGNED4)le.DOB,param_LIC_STATE := le.LIC_STATE,param_NPI_NUMBER := le.NPI_NUMBER,param_BILLING_TAX_ID := le.BILLING_TAX_ID)),LNPID),DATASET([],Process_xLNPID_Layouts.LayoutScoredFetch)),
        LinkPathName = 'LNAME' => IF(Key_HealthProvider_LNAME.CanSearch(le),SORTED(IF((~Health_Provider_Services.Key_HealthProvider_NAMED.CanSearch(le)),IF(Health_Provider_Services.Key_HealthProvider_LNAME.CanSearch(le),Key_HealthProvider_LNAME.ScoredLNPIDFetch(param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_ZIP := le.ZIP,param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_GENDER := le.GENDER,param_SNAME := le.SNAME,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_PRIM_RANGE := le.PRIM_RANGE,param_PRIM_NAME := le.PRIM_NAME,param_SEC_RANGE := le.SEC_RANGE,param_V_CITY_NAME := le.V_CITY_NAME,param_ST := le.ST,param_DOB := (UNSIGNED4)le.DOB,param_C_LIC_NBR := le.C_LIC_NBR,param_C_LIC_NBR_len := C_LIC_NBR_len,param_LIC_STATE := le.LIC_STATE,param_NPI_NUMBER := le.NPI_NUMBER,param_BILLING_TAX_ID := le.BILLING_TAX_ID))),LNPID),DATASET([],Process_xLNPID_Layouts.LayoutScoredFetch)),
        LinkPathName = 'MNAME' => IF(Key_HealthProvider_MNAME.CanSearch(le),SORTED(IF(Health_Provider_Services.Key_HealthProvider_MNAME.CanSearch(le),Key_HealthProvider_MNAME.ScoredLNPIDFetch(param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_ST := le.ST,param_GENDER := le.GENDER,param_SNAME := le.SNAME,param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_PRIM_RANGE := le.PRIM_RANGE,param_PRIM_NAME := le.PRIM_NAME,param_SEC_RANGE := le.SEC_RANGE,param_V_CITY_NAME := le.V_CITY_NAME,param_ZIP := le.ZIP,param_DOB := (UNSIGNED4)le.DOB,param_C_LIC_NBR := le.C_LIC_NBR,param_C_LIC_NBR_len := C_LIC_NBR_len,param_LIC_STATE := le.LIC_STATE,param_NPI_NUMBER := le.NPI_NUMBER,param_BILLING_TAX_ID := le.BILLING_TAX_ID)),LNPID),DATASET([],Process_xLNPID_Layouts.LayoutScoredFetch)),
        LinkPathName = 'ADDRESS' => IF(Key_HealthProvider_ADDRESS.CanSearch(le),SORTED(IF(Health_Provider_Services.Key_HealthProvider_ADDRESS.CanSearch(le),Key_HealthProvider_ADDRESS.ScoredLNPIDFetch(param_PRIM_RANGE := le.PRIM_RANGE,param_PRIM_NAME := le.PRIM_NAME,param_ZIP := le.ZIP,param_SEC_RANGE := le.SEC_RANGE,param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_V_CITY_NAME := le.V_CITY_NAME,param_ST := le.ST,param_GENDER := le.GENDER,param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_SNAME := le.SNAME,param_DOB := (UNSIGNED4)le.DOB,param_C_LIC_NBR := le.C_LIC_NBR,param_C_LIC_NBR_len := C_LIC_NBR_len,param_LIC_STATE := le.LIC_STATE,param_BILLING_TAX_ID := le.BILLING_TAX_ID)),LNPID),DATASET([],Process_xLNPID_Layouts.LayoutScoredFetch)),
        LinkPathName = 'ZIP_PR' => IF(Key_HealthProvider_ZIP_PR.CanSearch(le),SORTED(IF(Health_Provider_Services.Key_HealthProvider_ZIP_PR.CanSearch(le),Key_HealthProvider_ZIP_PR.ScoredLNPIDFetch(param_PRIM_NAME := le.PRIM_NAME,param_ZIP := le.ZIP,param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_PRIM_RANGE := le.PRIM_RANGE,param_SEC_RANGE := le.SEC_RANGE,param_V_CITY_NAME := le.V_CITY_NAME,param_ST := le.ST,param_GENDER := le.GENDER,param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_SNAME := le.SNAME,param_DOB := (UNSIGNED4)le.DOB,param_C_LIC_NBR := le.C_LIC_NBR,param_C_LIC_NBR_len := C_LIC_NBR_len,param_LIC_STATE := le.LIC_STATE,param_BILLING_TAX_ID := le.BILLING_TAX_ID)),LNPID),DATASET([],Process_xLNPID_Layouts.LayoutScoredFetch)),
        LinkPathName = 'SSN_LP' => IF(Key_HealthProvider_SSN_LP.CanSearch(le),SORTED(IF(Health_Provider_Services.Key_HealthProvider_SSN_LP.CanSearch(le),Key_HealthProvider_SSN_LP.ScoredLNPIDFetch(param_SSN := le.SSN,param_SSN_len := SSN_len,param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_V_CITY_NAME := le.V_CITY_NAME,param_ST := le.ST,param_GENDER := le.GENDER,param_SNAME := le.SNAME,param_DOB := (UNSIGNED4)le.DOB,param_C_LIC_NBR := le.C_LIC_NBR,param_C_LIC_NBR_len := C_LIC_NBR_len,param_LIC_STATE := le.LIC_STATE)),LNPID),DATASET([],Process_xLNPID_Layouts.LayoutScoredFetch)),
        LinkPathName = 'CNSMR_SSN_LP' => IF(Key_HealthProvider_CNSMR_SSN_LP.CanSearch(le),SORTED(IF(Health_Provider_Services.Key_HealthProvider_CNSMR_SSN_LP.CanSearch(le),Key_HealthProvider_CNSMR_SSN_LP.ScoredLNPIDFetch(param_CNSMR_SSN := le.CNSMR_SSN,param_CNSMR_SSN_len := CNSMR_SSN_len,param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_V_CITY_NAME := le.V_CITY_NAME,param_ST := le.ST,param_GENDER := le.GENDER,param_SNAME := le.SNAME,param_CNSMR_DOB := (UNSIGNED4)le.CNSMR_DOB,param_C_LIC_NBR := le.C_LIC_NBR,param_C_LIC_NBR_len := C_LIC_NBR_len,param_LIC_STATE := le.LIC_STATE)),LNPID),DATASET([],Process_xLNPID_Layouts.LayoutScoredFetch)),
        LinkPathName = 'DOB_LP' => IF(Key_HealthProvider_DOB_LP.CanSearch(le),SORTED(IF(Health_Provider_Services.Key_HealthProvider_DOB_LP.CanSearch(le),Key_HealthProvider_DOB_LP.ScoredLNPIDFetch(param_DOB := (UNSIGNED4)le.DOB,param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_ST := le.ST,param_V_CITY_NAME := le.V_CITY_NAME,param_SSN := le.SSN,param_SSN_len := SSN_len,param_GENDER := le.GENDER,param_SNAME := le.SNAME)),LNPID),DATASET([],Process_xLNPID_Layouts.LayoutScoredFetch)),
        LinkPathName = 'CNSMR_DOB_LP' => IF(Key_HealthProvider_CNSMR_DOB_LP.CanSearch(le),SORTED(IF(Health_Provider_Services.Key_HealthProvider_CNSMR_DOB_LP.CanSearch(le),Key_HealthProvider_CNSMR_DOB_LP.ScoredLNPIDFetch(param_CNSMR_DOB := (UNSIGNED4)le.CNSMR_DOB,param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_ST := le.ST,param_V_CITY_NAME := le.V_CITY_NAME,param_CNSMR_SSN := le.CNSMR_SSN,param_CNSMR_SSN_len := CNSMR_SSN_len,param_GENDER := le.GENDER,param_SNAME := le.SNAME)),LNPID),DATASET([],Process_xLNPID_Layouts.LayoutScoredFetch)),
        LinkPathName = 'PHONE_LP' => IF(Key_HealthProvider_PHONE_LP.CanSearch(le),SORTED(IF(Health_Provider_Services.Key_HealthProvider_PHONE_LP.CanSearch(le),Key_HealthProvider_PHONE_LP.ScoredLNPIDFetch(param_PHONE := le.PHONE,param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_DOB := (UNSIGNED4)le.DOB,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_SNAME := le.SNAME,param_V_CITY_NAME := le.V_CITY_NAME,param_ST := le.ST,param_SSN := le.SSN,param_SSN_len := SSN_len)),LNPID),DATASET([],Process_xLNPID_Layouts.LayoutScoredFetch)),
        LinkPathName = 'LIC' => IF(Key_HealthProvider_LIC.CanSearch(le),SORTED(IF(Health_Provider_Services.Key_HealthProvider_LIC.CanSearch(le),Key_HealthProvider_LIC.ScoredLNPIDFetch(param_C_LIC_NBR := le.C_LIC_NBR,param_C_LIC_NBR_len := C_LIC_NBR_len,param_LIC_STATE := le.LIC_STATE,param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_SSN := le.SSN,param_SSN_len := SSN_len,param_GENDER := le.GENDER,param_SNAME := le.SNAME,param_DOB := (UNSIGNED4)le.DOB)),LNPID),DATASET([],Process_xLNPID_Layouts.LayoutScoredFetch)),
        LinkPathName = 'VEN' => IF(Key_HealthProvider_VEN.CanSearch(le),SORTED(IF(Health_Provider_Services.Key_HealthProvider_VEN.CanSearch(le),Key_HealthProvider_VEN.ScoredLNPIDFetch(param_VENDOR_ID := le.VENDOR_ID,param_SRC := le.SRC,param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_SNAME := le.SNAME,param_GENDER := le.GENDER,param_DOB := (UNSIGNED4)le.DOB)),LNPID),DATASET([],Process_xLNPID_Layouts.LayoutScoredFetch)),
        LinkPathName = 'TAX' => IF(Key_HealthProvider_TAX.CanSearch(le),SORTED(IF(Health_Provider_Services.Key_HealthProvider_TAX.CanSearch(le),Key_HealthProvider_TAX.ScoredLNPIDFetch(param_TAX_ID := le.TAX_ID,param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_SNAME := le.SNAME,param_GENDER := le.GENDER,param_DOB := (UNSIGNED4)le.DOB,param_C_LIC_NBR := le.C_LIC_NBR,param_C_LIC_NBR_len := C_LIC_NBR_len,param_LIC_STATE := le.LIC_STATE)),LNPID),DATASET([],Process_xLNPID_Layouts.LayoutScoredFetch)),
        LinkPathName = 'BILLING_TAX' => IF(Key_HealthProvider_BILLING_TAX.CanSearch(le),SORTED(IF(Health_Provider_Services.Key_HealthProvider_BILLING_TAX.CanSearch(le),Key_HealthProvider_BILLING_TAX.ScoredLNPIDFetch(param_BILLING_TAX_ID := le.BILLING_TAX_ID,param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_SNAME := le.SNAME,param_GENDER := le.GENDER,param_DOB := (UNSIGNED4)le.DOB,param_C_LIC_NBR := le.C_LIC_NBR,param_C_LIC_NBR_len := C_LIC_NBR_len,param_LIC_STATE := le.LIC_STATE)),LNPID),DATASET([],Process_xLNPID_Layouts.LayoutScoredFetch)),
        LinkPathName = 'DEA' => IF(Key_HealthProvider_DEA.CanSearch(le),SORTED(IF(Health_Provider_Services.Key_HealthProvider_DEA.CanSearch(le),Key_HealthProvider_DEA.ScoredLNPIDFetch(param_DEA_NUMBER := le.DEA_NUMBER,param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_SNAME := le.SNAME,param_GENDER := le.GENDER,param_DOB := (UNSIGNED4)le.DOB,param_C_LIC_NBR := le.C_LIC_NBR,param_C_LIC_NBR_len := C_LIC_NBR_len,param_LIC_STATE := le.LIC_STATE)),LNPID),DATASET([],Process_xLNPID_Layouts.LayoutScoredFetch)),
        LinkPathName = 'NPI' => IF(Key_HealthProvider_NPI.CanSearch(le),SORTED(IF(Health_Provider_Services.Key_HealthProvider_NPI.CanSearch(le),Key_HealthProvider_NPI.ScoredLNPIDFetch(param_NPI_NUMBER := le.NPI_NUMBER,param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_SNAME := le.SNAME,param_GENDER := le.GENDER,param_DOB := (UNSIGNED4)le.DOB,param_C_LIC_NBR := le.C_LIC_NBR,param_C_LIC_NBR_len := C_LIC_NBR_len,param_LIC_STATE := le.LIC_STATE)),LNPID),DATASET([],Process_xLNPID_Layouts.LayoutScoredFetch)),
        LinkPathName = 'BILLING_NPI' => IF(Key_HealthProvider_BILLING_NPI.CanSearch(le),SORTED(IF(Health_Provider_Services.Key_HealthProvider_BILLING_NPI.CanSearch(le),Key_HealthProvider_BILLING_NPI.ScoredLNPIDFetch(param_BILLING_NPI_NUMBER := le.BILLING_NPI_NUMBER,param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_SNAME := le.SNAME,param_GENDER := le.GENDER,param_DOB := (UNSIGNED4)le.DOB,param_C_LIC_NBR := le.C_LIC_NBR,param_C_LIC_NBR_len := C_LIC_NBR_len,param_LIC_STATE := le.LIC_STATE)),LNPID),DATASET([],Process_xLNPID_Layouts.LayoutScoredFetch)),
        LinkPathName = 'UPN' => IF(Key_HealthProvider_UPN.CanSearch(le),SORTED(IF(Health_Provider_Services.Key_HealthProvider_UPN.CanSearch(le),Key_HealthProvider_UPN.ScoredLNPIDFetch(param_UPIN := le.UPIN,param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_SNAME := le.SNAME,param_GENDER := le.GENDER,param_DOB := (UNSIGNED4)le.DOB,param_C_LIC_NBR := le.C_LIC_NBR,param_C_LIC_NBR_len := C_LIC_NBR_len,param_LIC_STATE := le.LIC_STATE)),LNPID),DATASET([],Process_xLNPID_Layouts.LayoutScoredFetch)),
        LinkPathName = 'LEXID' => IF(Key_HealthProvider_LEXID.CanSearch(le),SORTED(IF(Health_Provider_Services.Key_HealthProvider_LEXID.CanSearch(le),Key_HealthProvider_LEXID.ScoredLNPIDFetch(param_DID := le.DID,param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_SNAME := le.SNAME,param_GENDER := le.GENDER,param_DOB := (UNSIGNED4)le.DOB,param_C_LIC_NBR := le.C_LIC_NBR,param_C_LIC_NBR_len := C_LIC_NBR_len,param_LIC_STATE := le.LIC_STATE)),LNPID),DATASET([],Process_xLNPID_Layouts.LayoutScoredFetch)),
        LinkPathName = 'BID' => IF(Key_HealthProvider_BID.CanSearch(le),SORTED(IF(Health_Provider_Services.Key_HealthProvider_BID.CanSearch(le),Key_HealthProvider_BID.ScoredLNPIDFetch(param_BDID := le.BDID,param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_SNAME := le.SNAME,param_GENDER := le.GENDER,param_DOB := (UNSIGNED4)le.DOB,param_C_LIC_NBR := le.C_LIC_NBR,param_C_LIC_NBR_len := C_LIC_NBR_len,param_LIC_STATE := le.LIC_STATE)),LNPID),DATASET([],Process_xLNPID_Layouts.LayoutScoredFetch)),
        LinkPathName = 'SRC_RID' => IF(Key_HealthProvider_SRC_RID.CanSearch(le),SORTED(IF(Health_Provider_Services.Key_HealthProvider_SRC_RID.CanSearch(le),Key_HealthProvider_SRC_RID.ScoredLNPIDFetch(param_SOURCE_RID := le.SOURCE_RID,param_SRC := le.SRC,param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_DOB := (UNSIGNED4)le.DOB,param_V_CITY_NAME := le.V_CITY_NAME,param_ST := le.ST,param_GENDER := le.GENDER,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_SNAME := le.SNAME)),LNPID),DATASET([],Process_xLNPID_Layouts.LayoutScoredFetch)),
        LinkPathName = 'RID' => IF(Key_HealthProvider_RID.CanSearch(le),SORTED(IF(Health_Provider_Services.Key_HealthProvider_RID.CanSearch(le),Key_HealthProvider_RID.ScoredLNPIDFetch(param_RID := le.RID)),LNPID),DATASET([],Process_xLNPID_Layouts.LayoutScoredFetch)),
    SORTED(Key_HealthProvider_.ScoredLNPIDFetch(param_FNAME := le.FNAME,param_FNAME_len := FNAME_len,param_MNAME := le.MNAME,param_MNAME_len := MNAME_len,param_LNAME := le.LNAME,param_LNAME_len := LNAME_len,param_SNAME := le.SNAME,param_GENDER := le.GENDER,param_PRIM_RANGE := le.PRIM_RANGE,param_PRIM_NAME := le.PRIM_NAME,param_SEC_RANGE := le.SEC_RANGE,param_V_CITY_NAME := le.V_CITY_NAME,param_ST := le.ST,param_ZIP := le.ZIP,param_SSN := le.SSN,param_SSN_len := SSN_len,param_CNSMR_SSN := le.CNSMR_SSN,param_CNSMR_SSN_len := CNSMR_SSN_len,param_DOB := (UNSIGNED4)le.DOB,param_CNSMR_DOB := (UNSIGNED4)le.CNSMR_DOB,param_PHONE := le.PHONE,param_LIC_STATE := le.LIC_STATE,param_C_LIC_NBR := le.C_LIC_NBR,param_C_LIC_NBR_len := C_LIC_NBR_len,param_TAX_ID := le.TAX_ID,param_BILLING_TAX_ID := le.BILLING_TAX_ID,param_DEA_NUMBER := le.DEA_NUMBER,param_VENDOR_ID := le.VENDOR_ID,param_NPI_NUMBER := le.NPI_NUMBER,param_BILLING_NPI_NUMBER := le.BILLING_NPI_NUMBER,param_UPIN := le.UPIN,param_DID := le.DID,param_BDID := le.BDID,param_SRC := le.SRC,param_SOURCE_RID := le.SOURCE_RID,param_RID := le.RID,param_MAINNAME := le.MAINNAME,param_FULLNAME := le.FULLNAME,param_ADDR1 := le.ADDR1,param_LOCALE := le.LOCALE,param_ADDRESS := le.ADDRESS),LNPID));
  SELF.Results := PROJECT(CHOOSEN(fetchResults, le.MaxIDs), TRANSFORM(RECORDOF(LEFT), SELF.reference := le.UniqueId, SELF := LEFT));
  SELF.IsTruncated := COUNT(fetchResults) > le.MaxIDs;
  Process_xLNPID_Layouts.MAC_Add_ResolutionFlags()
  SELF := le;
END;
  EXPORT DirectLNPIDFetch(STRING LpName):= PROJECT(in(Entered_LNPID=0),GetResultsSpecific(left,LpName),PREFETCH(Config.MeowPrefetch,PARALLEL));
END;
 
