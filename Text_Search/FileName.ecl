// Make a file name from the parts
export FileName(FileName_Info info, Types.FileType dataType, 
								BOOLEAN fPhysical=FALSE, INTEGER gen=0) := FUNCTION
	wgen := MAP(gen < 0           => 1,
              info.gens < gen+1 => info.gens,
              gen+1);
	STRING MapType(INTEGER fileType) := CASE(fileType,
													Types.FileTypeEnum.Doc 				=> V'DOC',
													Types.FileTypeEnum.Inv 				=> V'INV',
													Types.FileTypeEnum.WordNdx		=> V'IDX',
													Types.FileTypeEnum.SegList		=> V'SEGLIST',
													Types.FileTypeEnum.SegListX		=> V'XSEGLIST',
													Types.FileTypeEnum.Dictionary => V'DICT',
													Types.FileTypeEnum.DictIndx2	=> V'DICTINDX2',
													Types.FileTypeEnum.DocIndx 		=> V'DOCNDX',
													Types.FileTypeEnum.NominalNdx3=> V'NIDX3',
													Types.FileTypeEnum.DocSeg			=> V'DOCSEG',
													Types.FileTypeEnum.DocSegNdx	=> V'DSNDX',
													Types.FileTypeEnum.DictStat		=> V'DSTAT2',
													Types.FileTypeEnum.DictStatX	=> V'XDSTAT2',
													Types.FileTypeEnum.NStatX			=> V'XNSTAT',
													Types.FileTypeEnum.ExternalKeyIn  => V'EXKEYI',
													Types.FileTypeEnum.ExternalKeyOut => V'EXKEYO',
													Types.FileTypeEnum.DictIndx3  => V'DICTINDX3',
													Types.FileTypeEnum.LocalDictX => V'DtlDictX',
													Types.FileTypeEnum.LocalDictX2 => V'DtlDictX2',
                          Types.FileTypeEnum.ExtKeyIn2 => V'EXKEYI2',
                          Types.FileTypeEnum.ExtKeyOut2 => V'EXKEYO2',
                          Types.FileTypeEnum.DictStats2 => V'DSTATV2',
													Types.FileTypeEnum.FieldNdx => V'FIELDNDX',
														V'UNKNOWN');
	STRING MapClass(INTEGER fileType) := CASE(fileType,
													Types.FileTypeEnum.Doc 				=> V'BASE',
													Types.FileTypeEnum.Inv 				=> V'BASE',
													Types.FileTypeEnum.WordNdx		=> V'KEY',
													Types.FileTypeEnum.SegList		=> V'BASE',
													Types.FileTypeEnum.SegListX		=> V'KEY',
													Types.FileTypeEnum.Dictionary => V'BASE',
													Types.FileTypeEnum.DictIndx2	=> V'KEY',
													Types.FileTypeEnum.DocIndx 		=> V'KEY',
													Types.FileTypeEnum.NominalNdx3=> V'KEY',
													Types.FileTypeEnum.DocSeg			=> V'BASE',
													Types.FileTypeEnum.DocSegNdx	=> V'KEY',
													Types.FileTypeEnum.DictStat		=> V'BASE',
													Types.FileTypeEnum.DictStatX	=> V'KEY',
													Types.FileTypeEnum.NStatX			=> V'KEY',
													Types.FileTypeEnum.ExternalKeyIn  => V'KEY',
													Types.FileTypeEnum.ExternalKeyOut => V'KEY',
													Types.FileTypeEnum.DictIndx3  => V'KEY',
													Types.FileTypeEnum.LocalDictX => V'KEY',
													Types.FileTypeEnum.LocalDictX2 => V'KEY',
                          Types.FileTypeEnum.ExtKeyIn2 => V'KEY',
                          Types.FileTypeEnum.ExtKeyOut2 => V'KEY',
                          Types.FileTypeEnum.DictStats2 => V'KEY',
													Types.FileTypeEnum.FieldNdx => V'KEY',
													V'UNKNOWN');
	STRING rslt := info.stem + '::' + mapClass(dataType) 
					+ '::' + info.srcType
					+ '::' + IF(fPhysical, info.qual, info.genSet[wgen])
					+ '::' + MapType(dataType);
	RETURN rslt;
END;