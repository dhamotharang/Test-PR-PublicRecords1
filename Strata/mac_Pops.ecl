/*
	Automatically generate standard STRATA population stats based on the layout of the passed in dataset
	makes it easier to generate and/or run these types of stats
	If pOutputEcl is set to 'true', it will output the ecl generated by the macro as a string, so it can 
		be copy-pasted into an attribute or builder window and run(useful for generating static population stats)
	Else, it will generate the ecl and then run it, generating the stats themselves.
*/
export mac_Pops(

	 pDataset																			// input dataset
	,pOutput																			// Named output to run ecl generated by macro
	,pGroupByField							= '\'\''					// Field that the table should be grouped on
	,pDefaultGroupbyField				= '\'nogrouping\''// If group by field not set, use this name for default group by field
	,pDefaultGroupbyFieldtype		= '\'unsigned1\''	// default field type for default group by field
	,pDefaultGroupbyFieldValue	= '0'							// default value for default group by field
	,pOutputEcl									= 'false'					// Should output the ecl as a string(for testing) or actually run the ecl
	,pShouldExport							= 'true'					// should export output parameter(so can access outside of a module)
	,pShouldRemoveFieldsInSet		= 'true'					// Should the fields in the following parameter(pSetFields) be removed from the stats, or should they be the only ones kept?
	,pSetFields									= '[]'						// remove/keep these fields from population stats(based on whether pShouldRemoveFieldsInSet is true or not)
	,pKeepFieldNamesSame				= 'false'					// don't append countrue, countnonblank, etc to field names in table
	,pRemoveprefix							= ''							// Remove prefix of field(s).
	,pShouldRemoveExpression		= 'true'					// Should the field masks in the following parameter(pMatchExpression) be NOT'd?
	,pMatchExpression						= '\'\''					// remove/keep these field masks from population stats(based on whether pShouldRemoveExpression is true or not)
	,pKeepGroupByField					= 'false'					// keep group by field in layout
) :=
macro

	LOADXML('<xml/>');
	#EXPORTXML(pDataset_MetaInfo, recordof(pDataset))

	#uniquename(ldataset					)
	#uniquename(loutput						)
	#uniquename(fieldname					)
	#uniquename(groupbyfield			)
	#uniquename(setgroupbyfields	)
	#uniquename(name							)
	#uniquename(named_layout			)
	#uniquename(stringfiller			)
	#uniquename(lenName						)
	#uniquename(fillernonzero			)
	#uniquename(fillernonblank		)
	#uniquename(fillertrue				)
	#uniquename(moutput						)
	#uniquename(dDataset					)
	#uniquename(Layout_pInput_stat)
	#uniquename(pInput_stat				)
	#uniquename(pInput_prep				)
	#uniquename(CountNonZero			)
	#uniquename(CountNonBlank			)
	#uniquename(CountTrue					)
	#uniquename(lSetFields				)
	#uniquename(lMatchSetFields		)
	#uniquename(lRemoveprefix			)
	#uniquename(lMatchExpression	)
	#uniquename(last_layout				)

	#SET(lSetFields				,stringlib.stringtouppercase(#TEXT(pSetFields)))

	#SET(stringfiller, '                                                                           ')
	#SET(ldataset	,trim(#TEXT(pDataset),all))
	#SET(lRemoveprefix	,#TEXT(pRemoveprefix))
	#SET(lMatchExpression	,#TEXT(pMatchExpression))
	
	#if(pShouldExport = true)
		#SET(moutput	,'export ' + trim(#TEXT(pOutput),all))
	#ELSE
		#SET(moutput	,trim(#TEXT(pOutput),all))
	#END

	#if(pOutputEcl = true)	// unmangle these vars if outputting as ecl.
		#SET(dDataset						,'pDataset')
		#SET(Layout_pInput_stat	,'Layout_pInput_stat')
		#SET(pInput_stat				,'pInput_stat')
		#SET(pInput_prep				,'pInput_prep')
	#END

	#SET(loutput	,%'dDataset'% + ' := ' + %'ldataset'% + ';\n')
	
	#IF(pGroupByField	= '')
		#APPEND(loutput	,%'pInput_prep'% + ' := project(' + %'dDataset'% + ',transform({recordof(' + %'dDataset'% + '),'+ pDefaultGroupbyFieldtype + ' ' + pDefaultGroupbyField + ' := ' + #TEXT(pDefaultGroupbyFieldValue) + '}, self := left));\n');
	#ELSE
		#APPEND(loutput	,%'pInput_prep'% + ' := ' + %'dDataset'% + ';\n');
	#END
	#APPEND(loutput	,%'Layout_pInput_stat'% + '  :=\n')
	#APPEND(loutput	,'record\n')
	#APPEND(loutput	,'	unsigned8 CountGroup  := count(group);\n')
	#IF(pGroupByField	= '')
		#APPEND(loutput	,'	' + %'pInput_prep'% + '.' + pDefaultGroupbyField + ';\n')
		#SET(groupbyfield	,pDefaultGroupbyField)
		#SET(setgroupbyfields	,'[]' )
	#ELSE
		#APPEND(loutput	,'	' + %'pInput_prep'% + '.' + regexreplace(',',pGroupByField,';\n	' + %'pInput_prep'% + '.',nocase) + ';\n')
		#SET(groupbyfield	,pGroupByField)
		#SET(setgroupbyfields	,'[\'' + stringlib.stringtouppercase(regexreplace(',',pGroupByField,'\',\'',nocase)) + '\']' )
	#END

	#SET(named_layout	, '')
	#SET(name					, '')
	#if(pOutputEcl = true)
		#SET(fieldname		, '')
	#END
	#FOR (pDataset_MetaInfo)
		#FOR (Field)
			#IF(%'@isRecord'% = '1' and %'named_layout'% = '')
				#SET(named_layout	,%'@name'%)
				#SET(last_layout	,%'@name'%)
			#ELSEIF(%'@isRecord'% = '1' and %'named_layout'% != '')
				#SET(named_layout	, %'named_layout'% + '.' + %'@name'%)
				#SET(fieldname		, regexreplace('[.]',%'named_layout'%,'_'))
				#SET(last_layout	, %'@name'%)
			#ELSE	// not start of named layout
				#IF(%'@type'% = '')
					#IF(%'@name'% = %'named_layout'%)	//end of named layout
						#SET(named_layout	, '')
					#ELSE															//end of named layout, move back one name
						#SET(named_layout	, regexreplace('[.]' + %'last_layout'%,%'named_layout'%,''))
						#SET(fieldname		, regexreplace('[_]' + %'last_layout'%,%'named_layout'%,''))
					#END
				#ELSE	// type != ''
					#IF(%'named_layout'% != '')
						#SET(name, %'named_layout'% + '.' + %'@name'%)
						#SET(fieldname, regexreplace('[.]',%'named_layout'%,'_') + '_' + %'@name'%)
					#ELSE
						#SET(name, %'@name'%)
						#SET(fieldname, %'@name'%)
					#END
					#IF(%'lRemoveprefix'% != '')
//						#SET(fieldname	,%lRemoveprefix% + '::' + %'fieldname'%)
						#SET(fieldname	,regexreplace(%lRemoveprefix%	,%'fieldname'%	,'',nocase))
					#END
					
					#SET(lenName				,length(trim(%'fieldname'%,left,right)))
					#SET(fillernonzero	,%'stringfiller'%[1..(75 - (%lenName% - 1	))])
					#SET(fillernonblank	,%'stringfiller'%[1..(75 - (%lenName%			))])
					#SET(fillertrue			,%'stringfiller'%[1..(75 - (%lenName% - 4	))])
					#IF(pKeepFieldNamesSame = true)
						#SET(CountNonZero		, '')
						#SET(CountNonBlank	, '')
						#SET(CountTrue			, '')
					#ELSE
						#SET(CountNonZero		, '_CountNonZero'	)
						#SET(CountNonBlank	, '_CountNonBlank')
						#SET(CountTrue			, '_CountTrue'		)
					#END
					
					#IF(		(pKeepGroupByField = true or (pKeepGroupByField = false and stringlib.stringtouppercase(trim(%'name'%,left,right)) not in %setgroupbyfields%))
							and (			(pShouldRemoveFieldsInSet = true  and stringlib.stringtouppercase(trim(%'name'%,left,right)) not in %lSetFields%)
										or  (pShouldRemoveFieldsInSet = false and stringlib.stringtouppercase(trim(%'name'%,left,right))	   in %lSetFields%))
							and (			(pShouldRemoveExpression = true  and (%lMatchExpression% = '' or (%lMatchExpression% <> '' and not 	regexfind(%lMatchExpression%, trim(%'name'%,left,right),nocase))))
										or  (pShouldRemoveExpression = false and (%lMatchExpression% = '' or (%lMatchExpression% <> '' and 			regexfind(%lMatchExpression%, trim(%'name'%,left,right),nocase))))
									)
						)
						#IF(%'@type'% = 'integer' or %'@type'% = 'unsigned')
							#APPEND(loutput, '	unsigned8 ' + %'fieldname'% + %'CountNonZero'% + %'fillernonzero'%	+ ' := sum(group, if(' + %'pInput_prep'% + '.' + %'name'% + %'fillernonblank'%	+ ' <> 0   ,1,0));\n');
						#ELSEIF(%'@type'% = 'string' or %'@type'% = 'qstring')                                                                                                         
							#APPEND(loutput, '	unsigned8 ' + %'fieldname'% + %'CountNonBlank'%+ %'fillernonblank'%	+ ' := sum(group, if(' + %'pInput_prep'% + '.' + %'name'% + %'fillernonblank'%	+ ' <> \'\'  ,1,0));\n');
						#ELSEIF(%'@type'% = 'boolean')                                                                                                        
							#APPEND(loutput, '	unsigned8 ' + %'fieldname'% + %'CountTrue'%    + %'fillertrue'%			+ ' := sum(group, if(' + %'pInput_prep'% + '.' + %'name'% + %'fillernonblank'%	+ '  = true,1,0));\n');
						#ELSEIF(%'@type'% = 'data')                                                                                                         
							#APPEND(loutput, '	unsigned8 ' + %'fieldname'% + %'CountNonBlank'%+ %'fillernonblank'%	+ ' := sum(group, if(' + %'pInput_prep'% + '.' + %'name'% + %'fillernonblank'%	+ ' <> x\'\' ,1,0));\n');
						#ELSEIF(%'@type'% = 'real')                                                                                                         
							#APPEND(loutput, '	unsigned8 ' + %'fieldname'% + %'CountNonZero'% + %'fillernonzero'%	+ ' := sum(group, if(' + %'pInput_prep'% + '.' + %'name'% + %'fillernonblank'%	+ ' <> 0.0  ,1,0));\n');
						#END
					#END
				#END
			#END
		#END
	#END

	#APPEND(loutput, 'end;\n');
	#APPEND(loutput, %'pInput_stat'% + ' := table(' + %'pInput_prep'% + ', ' + %'Layout_pInput_stat'% + ' ,' + %'groupbyfield'% + '  , few);\n');
	#APPEND(loutput, %'moutput'% + ' := ' + %'pInput_stat'% + ';\n');
	
	#if(pOutputEcl = true)
		#if(pShouldExport = true)
			export pOutput := %'loutput'%;
		#ELSE
			pOutput := %'loutput'%;
		#END
	#ELSE
		%loutput%;
	#END

endmacro;