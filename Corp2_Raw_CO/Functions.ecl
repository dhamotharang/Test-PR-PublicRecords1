IMPORT corp2, corp2_mapping, corp2_raw_co;

EXPORT Functions := Module

		//********************************************************************
		//CorpForeignDomesticInd: returns "corp_foreign_domestic_ind".
		//********************************************************************
		EXPORT CorpForeignDomesticInd(STRING s) := FUNCTION
		
		uc_s	:= corp2.t2u(s);

		RETURN map(uc_s in ['CS','CU'] 																													=> 'D',
							 uc_s in ['DC55','DC55-PBC','DC56','DC56-PBC'] 																=> 'D',
							 uc_s in ['DLCA','DLLC','DLLLP','DLLP','DLP','DLPA']													=> 'D',
							 uc_s in ['DNC','DNCDT','DNCIC','DNCSL','DNCWC']															=> 'D',
							 uc_s in ['DPC','DPCCU','DPCDT','DPCIC','DPC-PBC','DPC-PBC','DPCSL','DPCWC']	=> 'D',
							 uc_s in ['DT'] 																															=> 'D',
							 uc_s in ['GP'] 																															=> 'D',
							 uc_s in ['IC'] 																															=> 'D',
							 uc_s in ['SL'] 																															=> 'D',
							 uc_s in ['UNA'] 																															=> 'D',
							 uc_s in ['WC'] 																															=> 'D',
							 uc_s in ['FCOOP']																														=> 'F',
							 uc_s in ['FLCA','FLLC','FLLLP','FLLP','FLP','FLPA']													=> 'F',
							 uc_s in ['FNC','FNCCU','FNCDT','FNCIC','FNCSL','FNCWC']											=> 'F',
							 uc_s in ['FO']																																=> 'F',
							 uc_s in ['FPC','FPCCU','FPCDT','FPCIC','FPCSL','FPCWC']											=> 'F',
							 ''
							);

		END;
		
		//********************************************************************
		//CorpTypeTable: returns "corp_orig_org_structure_desc".
		//********************************************************************
		EXPORT CorpTypeTable(STRING s) := FUNCTION
		
		uc_s	:= corp2.t2u(s);

		RETURN case(uc_s,
								'CS'				=>'CORPORATION SOLE', 
								'CU'				=>'CREDIT UNION',
								'DC55'			=>'COOPERATIVE ASSOCIATION',								
								'DC55-PBC'	=>'COOPERATIVE ASSOCIATION-PUBLIC BENEFIT CORPORATION',
								'DC56'			=>'DOMESTIC CO-OP (STATUE 56)',
								'DC56-PBC'	=>'COOPERATIVE-PUBLIC BENEFIT CORPORATION',
								'DLCA'			=>'LIMITED COOPERATIVE ASSOCIATION',
								'DLLC'			=>'DOMESTIC LIMITED LIABILITY COMPANY',
								'DLLLP'			=>'DOMESTIC LIMITED LIABILITY LIMITED PARTNERSHIP',
								'DLLP'			=>'DOMESTIC LIMITED LIABILITY PARTNERSHIP',
								'DLP'				=>'DOMESTIC LIMITED PARTNERSHIP',
								'DLPA'			=>'DOMESTIC LIMITED PARTNERSHIP ASSOCIATION',
								'DNC'				=>'DOMESTIC NON-PROFIT',
								'DNCDT'			=>'NONPROFIT CORPORATION DITCH COMPANY',
								'DNCIC'			=>'NONPROFIT CORPORATION INSURANCE COMPANY',
								'DNCSL'			=>'NONPROFIT CORPORATION SAVINGS & LOAN',
								'DNCWC'			=>'NONPROFIT CORPORATION WATER COMPANY',
								'DPC'				=>'DOMESTIC PROFIT',
								'DPC-PBC'		=>'CORPORATION-PUBLIC BENEFIT CORPORATION',
								'DPCCU'			=>'CORPORATION CREDIT UNION',
								'DPCDT'			=>'CORPORATION DITCH COMPANY',
								'DPCIC'			=>'CORPORATION INSURANCE COMPANY',
								'DPCSL'			=>'CORPORATION SAVINGS & LOAN',
								'DPCWC'			=>'CORPORATION WATER COMPANY',
								'DT'				=>'DITCH COMPANY',
								'FCOOP'			=>'FOREIGN CO-OP',
								'FLCA'			=>'FOREIGN LIMITED COOPERATIVE ASSOCIATION',
								'FLLC'			=>'FOREIGN LIMITED LIABILITY COMPANY',
								'FLLLP'			=>'FOREIGN LIMITED LIABILITY LIMITED PARTNERSHIP',
								'FLLP'			=>'FOREIGN LIMITED LIABILITY PARTNERSHIP',
								'FLP'				=>'FOREIGN LIMITED PARTNERSHIP',
								'FLPA'			=>'FOREIGN LIMITED PARTNERSHIP ASSOCIATION',
								'FNC'				=>'FOREIGN NONPROFIT',
								'FNCCU'			=>'FOREIGN NONPROFIT CORPORATION CREDIT UNION',
								'FNCDT'			=>'FOREIGN NONPROFIT CORPORATION DITCH COMPANY',
								'FNCIC'			=>'FOREIGN NONPROFIT CORPORATION INSURANCE COMPANY',
								'FNCSL'			=>'FOREIGN NONPROFIT CORPORATION SAVINGS & LOAN',
								'FNCWC'			=>'FOREIGN NONPROFIT CORPORATION WATER COMPANY',
								'FO'				=>'FOREIGN OTHER',
								'FPC'				=>'FOREIGN PROFIT',
								'FPCCU'			=>'FOREIGN CORPORATION CREDIT UNION',
								'FPCDT'			=>'FOREIGN CORPORATION DITCH COMPANY',
								'FPCIC'			=>'FOREIGN CORPORATION INSURANCE COMPANY',
								'FPCSL'			=>'FOREIGN CORPORATION SAVINGS & LOAN',
								'FPCWC'			=>'FOREIGN CORPORATION WATER COMPANY',
								'GP'				=>'GENERAL PARTNERSHIP',
								'IC'				=>'INSURANCE COMPANY',
								'SL'				=>'SAVINGS & LOAN',
								'UNA'				=>'UNINCORPORATED NONPROFIT ASSOCIATION',
								'WC'				=>'WATER COMPANY',
								 '**|'+uc_s
								);

		END;

		//********************************************************************
		//CorpLegalName: returns cleaned corp_legal_name per CI.
		//********************************************************************
		EXPORT CorpLegalName(STRING state_origin, STRING state_desc, STRING s) := FUNCTION
						uc_s	:= corp2.t2u(s);
						name	:=  regexreplace('(,*[ ]*DELINQUENT[ ]*|,*[ ]*DISSOLVED[ ]*|,*[ ]*RELINQUISHED[ ]*|,*[ ]*WITHDRAWN[ ]*|,*[ ]*TERMINATED[ ]*|,*[ ]*COLORADO AUTHORITY RELINQUISHED[ ]*|,*[ ]*COLORADO AUTHORITY TERMINATED[ ]*)(JANUARY|FEBRUARY|MARCH|APRIL|MAY|JUNE|JULY|AUGUST|SEPTEMBER|OCTOBER|NOVEMBER|DECEMBER).*',uc_s, ''); 														
						return corp2_mapping.fCleanBusinessName(state_origin, state_desc, name).BusinessName;
		END;
		
		//********************************************************************
		//ContFullName: returns cleaned cont_full_name per CI.
		//********************************************************************
		EXPORT ContFullName(STRING state_origin, STRING state_desc, STRING s) := FUNCTION
						uc_s	:= corp2.t2u(s);
						name	:=  regexreplace('(,*[ ]*DELINQUENT[ ]*|,*[ ]*DISSOLVED[ ]*|,*[ ]*RELINQUISHED[ ]*|,*[ ]*WITHDRAWN[ ]*|,*[ ]*TERMINATED[ ]*|,*[ ]*COLORADO AUTHORITY RELINQUISHED[ ]*|,*[ ]*COLORADO AUTHORITY TERMINATED[ ]*)(JANUARY|FEBRUARY|MARCH|APRIL|MAY|JUNE|JULY|AUGUST|SEPTEMBER|OCTOBER|NOVEMBER|DECEMBER).*',uc_s, ''); 														
						return corp2_mapping.fCleanBusinessName(state_origin, state_desc, name).BusinessName;
		END;
		
		//********************************************************************
		//Jurisdiction: Cleans and standardizes the state data.
		//********************************************************************
		EXPORT Jurisdiction(STRING s) := FUNCTION
						uc_s							:= stringlib.stringfilterout(corp2.t2u(s),'`()><-.#/0123456789');
						prepped_s					:= corp2.t2u(regexreplace(',',uc_s,' ')); 
						PatternInvalid1		:= '^CONSULATE CORPORATION STATE|^SECRETARY OF STATE THE STATE|^SECRETARY OF STATE OF |SECRETARY OF STATE$|^GREAT STATE OF |^THE STATE OF|^STATE OF|^STARE OF|^SATE OF|^STAE OF |STATE WIDE$|STATEWIDE$|^INTRASTATE|HOME STATE$|STATE$|^STATE LINE';
						PatternInvalid2		:= '^COMMONWEALTH OF |^THE COMMONWEALTH OF |^COMMENWEALTH OF |^FORMED IN |FORM CORPORATION|^NORTH AMERICA|THIRD JUDICIAL DISTRICT$|BROADWAY$|^MEMORANDUM OF UNDERSTANDING|^BUSINESS CONSULTING';
						PatternInvalid3		:= 'JANUARY|MARCH|APRIL|MAY|JUNE|JULY|AUGUST|SEPTEMBER|OCTOBER|NOVEMBER|DECEMBER|^ALL LEGAL ENTITIES|^CONSULATE CORPORATION STATE|^ORIGINALLY FILLED IN |COSAME AS ADDRESS$|^SERVICING CONTRACTS';
						PatternInvalid4		:= '^ORGANIZED PURSUANT TO|BERKELEY POLICY ASSOCIATES';
						PatternInvalid5		:= 'DIV OF CORPORATIONS$|CORPORATION COMMISSION$|^SCORPORATION|CORPORATION|^INCORPORATED IN |^INCORPORATED|INCORPORATED$|FLL|^OTH|NOT ACCPLICABLE|^THE MOON OF EARTH|THE MOON|NO CHANGE|^FEDERALLY CHARTERED US CORP|FEDERAL CHARTER|COUNTY OF$|^NATIONAL BANK|AS OF$';	
						PatternInvalid6		:= '^FEDERAL SAVINGS BANK|FEDERALLY RECOGNIZED TAXEXEMP|^GENERAL PARTNERSHIP|^PERPETUAL|^LLC FORMED IN|LLC|^PRESIDENT|^FEDERALLY RECOGNIZED TAXEXEMP|^FEDERAL|^REGISTERED INVESTMENT ADVISORY| AS OF$|ET SEQ AND';
						PatternInvalid7		:= '^NATIVE AMERICAN TRIBAL COMPANY|^NATIVE AMERICAN TRIBALLY OWNED|^TRIBALLY OWNED & CHARTERED|^TRIBALLY OWNED|^NATIONAL CREDIT UNION ASSOC|^NATIONAL|^NA|^GODS GALACTIC ZENTOR|GRAND JUNCTION CO|GUANGDONG|^ECCLESIASTICAL|^KJV AUTHORIZED';
						temp1							:= regexreplace(PatternInvalid1,prepped_s,'');
						temp2							:= regexreplace(PatternInvalid2,temp1,'');
						temp3							:= regexreplace(PatternInvalid3,temp2,'');
						temp4							:= regexreplace(PatternInvalid4,temp3,'');
						temp5							:= regexreplace(PatternInvalid5,temp4,'');
						temp6							:= regexreplace(PatternInvalid6,temp5,'');
						temp7							:= regexreplace(PatternInvalid7,temp6,'');
						temp							:= corp2.t2u(temp7);
						tempnospaces			:= stringlib.stringfilterout(temp,' ');

						//* After removing "bad" words, the data is checked for mis-spelled words.
						Jurisdiction1	:= map(
																		 tempnospaces = 'ARIZON'												=> 'ARIZONA',
																		 tempnospaces = 'CALIFONRIA' 										=> 'CALIFORNIA',
																		 tempnospaces = 'CALIFRONIA' 										=> 'CALIFORNIA',
																		 tempnospaces = 'CALIFORNIS' 										=> 'CALIFORNIA',
																		 tempnospaces = 'CALIOFORNIA'						 				=> 'CALIFORNIA',
																		 tempnospaces = 'CALIF'						 							=> 'CALIFORNIA',
																		 tempnospaces = 'CONNECTICUTT'	 								=> 'CONNECTICUT',
																		 tempnospaces = 'CONNETICUT'					 					=> 'CONNECTICUT',
																		 tempnospaces = 'DEAWARE'						 						=> 'DELAWARE',
																		 tempnospaces = 'DELAWAR' 											=> 'DELAWARE',
																		 tempnospaces = 'DELAWAYEUSA' 									=> 'DELAWARE',
																		 tempnospaces = 'DELEWARE'						 					=> 'DELAWARE',
																		 tempnospaces = 'DEELAWARE'											=> 'DELAWARE',
																		 tempnospaces = 'DELAWARAE'											=> 'DELAWARE',
																		 tempnospaces = 'DELAWRE'												=> 'DELAWARE',
																		 tempnospaces = 'DELWARE'												=> 'DELAWARE',
																		 tempnospaces = 'DLEAWARE'											=> 'DELAWARE',
																		 tempnospaces = 'DELWSARE'											=> 'DELAWARE',
																		 tempnospaces = 'DELAWAYE'											=> 'DELAWARE',
																		 tempnospaces = 'DELAWAER'											=> 'DELAWARE',
																		 tempnospaces = 'DELAWQRE'											=> 'DELAWARE',
																		 tempnospaces = 'DELAWARD'											=> 'DELAWARE',
																		 tempnospaces = 'DELEWAREUSA'										=> 'DELAWARE',
																		 tempnospaces = 'FLORIDIA'											=> 'FLORIDA',
																		 tempnospaces = 'GEORIA'												=> 'GEORGIA',
																		 tempnospaces = 'GEORGA'												=> 'GEORGIA',
																		 tempnospaces = 'ILINOIS'												=> 'ILLINOIS',
																		 tempnospaces = 'ILLNOIS'												=> 'ILLINOIS',
																		 tempnospaces = 'ILLINIOS'											=> 'ILLINOIS',
																		 tempnospaces = 'ILLINOS'												=> 'ILLINOIS',
																		 tempnospaces = 'ILLONOIS'											=> 'ILLINOIS',
																		 tempnospaces = 'KANSA'													=> 'KANSAS',
																		 tempnospaces = 'LOUSIANA'											=> 'LOUISIANA',
																		 tempnospaces = 'MASSACHUSSETTS'								=> 'MASSACHUSETTS',
																		 tempnospaces = 'MASSACHUSETTES'								=> 'MASSACHUSETTS',
																		 tempnospaces = 'MINNESOSTA'										=> 'MINNESOTA',
																		 tempnospaces = 'MINESOTA'											=> 'MINNESOTA',
																		 tempnospaces = 'VADA'													=> 'NEVADA',
																		 tempnospaces = 'NAVADA'												=> 'NEVADA',
																		 tempnospaces = 'NEVADAA'												=> 'NEVADA',
																		 tempnospaces = 'NEVEDA'												=> 'NEVADA',
																		 tempnospaces = 'NEWHAMPHIRE'										=> 'NEW HAMPSHIRE',
																		 tempnospaces = 'NEWJERSEY'											=> 'NEW JERSEY',													 
																		 tempnospaces = 'NEWYORK'												=> 'NEW YORK',
																		 tempnospaces = 'NYC'														=> 'NEW YORK',
																		 tempnospaces = 'NORHTCAROLINA'									=> 'NORTH CAROLINA',
																		 tempnospaces = 'NCUSA'													=> 'NORTH CAROLINA',
																		 tempnospaces = 'OKLHOMA'												=> 'OKLAHOMA',
																		 tempnospaces = 'ORGEON'												=> 'OREGON',
																		 tempnospaces = 'PENNYSLVANIA'									=> 'PENNSYLVANIA',
																		 tempnospaces = 'PENNSULVANIA'									=> 'PENNSYLVANIA',
																		 tempnospaces = 'RHODEISLANE'										=> 'RHODE ISLAND',
																		 tempnospaces = 'SOUTHDA'												=> 'SOUTH DAKOTA',
																		 tempnospaces = 'TENNEESSEE'										=> 'TENNESSEE',
																		 tempnospaces = 'TENNESSE'											=> 'TENNESSEE',
																		 tempnospaces = 'TENN'													=> 'TENNESSEE',
																		 tempnospaces = 'TEXSAS'												=> 'TEXAS',
																		 tempnospaces = 'TEXS'													=> 'TEXAS',
																		 tempnospaces = 'UNITEDKINGDON'									=> 'UNITED KINGDOM',
																		 tempnospaces = 'US'														=> 'US',
																		 tempnospaces = 'USA'														=> 'US',
																		 tempnospaces = 'UNITEDS'												=> 'US',																		 
																		 tempnospaces = 'UNITEDST'											=> 'US',
																		 tempnospaces = 'UNITEDSTATESOFAMER'						=> 'US',
																		 tempnospaces = 'UNITEDSTATESOFAMERICA'					=> 'US',
																		 tempnospaces = 'THEUNITEDSTATESOFAMERICA'			=> 'US',
																		 tempnospaces = 'VIRGINA'												=> 'VIRGINIA',
																		 tempnospaces = 'VIRIGINIA'											=> 'VIRGINIA',
																		 tempnospaces = 'VIRGNIA'												=> 'VIRGINIA',
																		 tempnospaces = 'DISTRICTOFCOLUIMBIA'						=> 'DISTRICT OF COLUMBIA',
																		 tempnospaces = 'DISTRICTOFCOLOMBIA' 						=> 'DISTRICT OF COLUMBIA',
																		 tempnospaces = 'DISTRICTOFCOLUBIA'						 	=> 'DISTRICT OF COLUMBIA',
																		 tempnospaces = 'DISTRICTOFCOLUMIBA'					 	=> 'DISTRICT OF COLUMBIA',
																		 tempnospaces = 'WASHINGTONDC'					 				=> 'DISTRICT OF COLUMBIA',
																		 tempnospaces = 'WISONSON'					 						=> 'WISCONSIN',
																		 tempnospaces = 'WOMING' 												=> 'WYOMING',
																		 tempnospaces = 'WYOMIN'					 							=> 'WYOMING',
																		 tempnospaces = 'WYOMIBNG' 											=> 'WYOMING',													 
																		 ''
																		 );	

						//* After removing "bad" words, the data is then checked for the jurisdiction descriptions (us-state)
						Jurisdiction2	:= map(
																		 stringlib.stringfind(temp,'ALABAMA',1) 																				<> 0 => 'ALABAMA',
																		 stringlib.stringfind(temp,'ALASKA',1) 																					<> 0 => 'ALASKA',
																		 stringlib.stringfind(temp,'AMERICAN SAMOA',1)																	<> 0 => 'AMERICAN SAMOA',
																		 stringlib.stringfind(temp,'ARIZONA',1) 																				<> 0 => 'ARIZONA',
																		 stringlib.stringfind(temp,'ARKANSAS',1)	 																			<> 0 => 'ARKANSAS',
																		 stringlib.stringfind(temp,'CALIFORNIA',1)	 																		<> 0 => 'CALIFORNIA',
																		 stringlib.stringfind(temp,'CANAL ZONE',1) 																			<> 0 => 'CANAL ZONE',
																		 stringlib.stringfind(temp,'COLORADO',1)		 																		<> 0 => 'COLORADO',
																		 stringlib.stringfind(temp,'CONNECTICUT',1)		 																	<> 0 => 'CONNECTICUT',
																		 stringlib.stringfind(temp,'DELAWARE',1)		 																		<> 0 => 'DELAWARE',
																		 stringlib.stringfind(temp,'DISTRICT OF COLUMBIA',1)				 										<> 0 => 'DISTRICT OF COLUMBIA',
																		 stringlib.stringfind(temp,'FLORIDA',1)		 																			<> 0 => 'FLORIDA',
																		 stringlib.stringfind(temp,'GEORGIA',1)		 																			<> 0 => 'GEORGIA',
																		 stringlib.stringfind(temp,'GUAM',1)			 																			<> 0 => 'GUAM',
																		 stringlib.stringfind(temp,'HAWAII',1)		 																			<> 0 => 'HAWAII',
																		 stringlib.stringfind(temp,'IDAHO',1) 																					<> 0 => 'IDAHO',
																		 stringlib.stringfind(temp,'ILLINOIS',1) 																				<> 0 => 'ILLINOIS',
																		 stringlib.stringfind(temp,'INDIANA',1) 																				<> 0 => 'INDIANA',
																		 stringlib.stringfind(temp,'IOWA',1) 																						<> 0 => 'IOWA',
																		 stringlib.stringfind(temp,'KANSAS',1) 																					<> 0 => 'KANSAS',
																		 stringlib.stringfind(temp,'KENTUCKY',1) 																				<> 0 => 'KENTUCKY',
																		 stringlib.stringfind(temp,'LOUISIANA',1) 																			<> 0 => 'LOUISIANA',
																		 stringlib.stringfind(temp,'MAINE',1) 																					<> 0 => 'MAINE',
																		 stringlib.stringfind(temp,'MARYLAND',1) 																				<> 0 => 'MARYLAND',
																		 stringlib.stringfind(temp,'MASSACHUSETTS',1)		 																<> 0 => 'MASSACHUSETTS',
																		 stringlib.stringfind(temp,'MICHIGAN',1)				 																<> 0 => 'MICHIGAN',
																		 stringlib.stringfind(temp,'MINNESOTA',1)			 																	<> 0 => 'MINNESOTA',
																		 stringlib.stringfind(temp,'MISSISSIPPI',1)		 																	<> 0 => 'MISSISSIPPI',
																		 stringlib.stringfind(temp,'MISSOURI',1) 																				<> 0 => 'MISSOURI',
																		 stringlib.stringfind(temp,'MONTANA',1) 																				<> 0 => 'MONTANA',
																		 stringlib.stringfind(temp,'NEBRASKA',1) 																				<> 0 => 'NEBRASKA',
																		 stringlib.stringfind(temp,'NEVADA',1) 																					<> 0 => 'NEVADA',
																		 stringlib.stringfind(temp,'NEW HAMPSHIRE',1)		 																<> 0 => 'NEW HAMPSHIRE',
																		 stringlib.stringfind(temp,'NEW JERSEY',1) 																			<> 0 => 'NEW JERSEY',
																		 stringlib.stringfind(temp,'NEW MEXICO',1) 																			<> 0 => 'NEW MEXICO',
																		 stringlib.stringfind(temp,'NEW YORK',1) 																				<> 0 => 'NEW YORK',
																		 stringlib.stringfind(temp,'NORTH CAROLINA',1)	 																<> 0 => 'NORTH CAROLINA',
																		 stringlib.stringfind(temp,'NORTH DAKOTA',1)		 																<> 0 => 'NORTH DAKOTA',
																		 stringlib.stringfind(temp,'OHIO',1)		 																				<> 0 => 'OHIO',
																		 stringlib.stringfind(temp,'OKLAHOMA',1)	 																			<> 0 => 'OKLAHOMA',
																		 stringlib.stringfind(temp,'OREGON',1)		 																			<> 0 => 'OREGON',
																		 stringlib.stringfind(temp,'PENNSYLVANIA',1)	 																	<> 0 => 'PENNSYLVANIA',
																		 stringlib.stringfind(temp,'RAND WEST',1)	 																			<> 0 => 'WEST VIRGINIA',
																		 stringlib.stringfind(temp,'RHODE ISLAND',1)	 																	<> 0 => 'RHODE ISLAND',
																		 stringlib.stringfind(temp,'SOUTH CAROLINA',1)	 																<> 0 => 'SOUTH CAROLINA',
																		 stringlib.stringfind(temp,'SOUTH DAKOTA',1) 																		<> 0 => 'SOUTH DAKOTA',
																		 stringlib.stringfind(temp,'TENNESSEE',1)	 																			<> 0 => 'TENNESSEE',
																		 stringlib.stringfind(temp,'TEXAS',1)			 																			<> 0 => 'TEXAS',
																		 stringlib.stringfind(temp,'UTAH',1)			 																			<> 0 => 'UTAH',
																		 stringlib.stringfind(temp,'VERMONT',1)		 																			<> 0 => 'VERMONT',
																		 stringlib.stringfind(temp,'VIRGIN ISLANDS',1)	 																<> 0 => 'VIRGIN ISLANDS',
																		 stringlib.stringfind(temp,'VIRGINIA',1)		 																		<> 0 => 'VIRGINIA',
																		 stringlib.stringfind(temp,'WASHINGTON',1)	 																		<> 0 => 'WASHINGTON',
																		 stringlib.stringfind(temp,'WEST VIRGINIA',1)		 																<> 0 => 'WEST VIRGINIA',
																		 stringlib.stringfind(temp,'WISCONSIN',1)		 																		<> 0 => 'WISCONSIN',
																		 stringlib.stringfind(temp,'WYOMING',1)			 																		<> 0 => 'WYOMING',
																		 stringlib.stringfind(temp,'ARMED FORCES EUROPE THE MIDDLE EAST AND CANADA',1) 	<> 0 => 'ARMED FORCES EUROPE THE MIDDLE EAST AND CANADA',
																		 stringlib.stringfind(temp,'ARMED FORCES PACIFIC',1) 														<> 0 => 'ARMED FORCES PACIFIC',
																		 stringlib.stringfind(temp,'ARMED FORCES (AMERICAS EXCEPT CANADA)',1) 					<> 0 => 'ARMED FORCES (AMERICAS EXCEPT CANADA)',
																		 stringlib.stringfind(temp,'OTHER S&C AMERICAN',1) 															<> 0 => 'OTHER S&C AMERICAN',
																		 stringlib.stringfind(temp,'UNITED STATES',1) 																	<> 0 => 'US',
																		 ''
																		 );

						//* After removing "bad" words, the data is then checked for the jurisdiction descriptions (non-us state)
						Jurisdiction3	:= map(		 stringlib.stringfind(temp,'AFRICA',1)																					<> 0 => 'AFRICA',
																		 stringlib.stringfind(temp,'ANTIGUA AND BARBUDA',1)															<> 0 => 'ANTIGUA AND BARBUDA',
																		 stringlib.stringfind(temp,'ARGENTINA',1)																				<> 0 => 'ARGENTINA',
																		 stringlib.stringfind(temp,'AUSTRALIA',1) 																			<> 0 => 'AUSTRALIA',
																		 stringlib.stringfind(temp,'BAHAMA',1) 																					<> 0 => 'BAHAMAS',
																		 stringlib.stringfind(temp,'BARBADOS',1) 																				<> 0 => 'BARBADOS',
																		 stringlib.stringfind(temp,'BEIJING',1) 																				<> 0 => 'BEIJING',
																		 stringlib.stringfind(temp,'BELARUS',1) 																				<> 0 => 'BELARUS',
																		 stringlib.stringfind(temp,'BELGIUM',1) 																				<> 0 => 'BELGIUM',
																		 stringlib.stringfind(temp,'BELIZE',1) 																					<> 0 => 'BELIZE',
																		 stringlib.stringfind(temp,'BERMUDA',1)		 																			<> 0 => 'BERMUDA',
																		 stringlib.stringfind(temp,'BRAZIL',1) 																					<> 0 => 'BRAZIL',
																		 stringlib.stringfind(temp,'BRITISH VIRGI',1) 																	<> 0 => 'BRITISH VIRGIN ISLANDS',
																		 stringlib.stringfind(temp,'BRITISH WEST INDIES',1) 														<> 0 => 'BRITISH WEST INDIES',
																		 stringlib.stringfind(temp,'BULGARIA',1) 																				<> 0 => 'BULGARIA',
																		 stringlib.stringfind(temp,'CAMBODIA',1)			 																	<> 0 => 'CAMBODIA',
																		 stringlib.stringfind(temp,'CAMEROON',1)			 																	<> 0 => 'CAMEROON',
																		 stringlib.stringfind(temp,'CANADA',1)			 																		<> 0 => 'CANADA',
																		 stringlib.stringfind(temp,'CAYMAN ISLAND',1) 																	<> 0 => 'CAYMAN ISLANDS',
																		 stringlib.stringfind(temp,'CHEROKEE NATION',1)																	<> 0 => 'CHEROKEE NATION',
																		 stringlib.stringfind(temp,'CHINA',1) 																					<> 0 => 'CHINA',
																		 stringlib.stringfind(temp,'COLUMBIA',1)		 																		<> 0 => 'COLUMBIA',
																		 stringlib.stringfind(temp,'CONFEDERATED SALISH',1) 														<> 0 => 'CONFEDERATED SALISH AND KOOTENAI TRIBES',																		 
																		 stringlib.stringfind(temp,'COOK ISLANDS',1)																		<> 0 => 'COOK ISLANDS',
																		 stringlib.stringfind(temp,'COSTA RICA',1)																			<> 0 => 'COSTA RICA',
																		 stringlib.stringfind(temp,'CURACAO',1)																					<> 0 => 'CURACAO',
																		 stringlib.stringfind(temp,'DENMARK',1)																					<> 0 => 'DENMARK',
																		 stringlib.stringfind(temp,'DOMINICAN REPUBLIC',1)	 														<> 0 => 'DOMINICAN REPUBLIC',
																		 stringlib.stringfind(temp,'ECUADOR',1)		 																			<> 0 => 'ECUADOR',
																		 stringlib.stringfind(temp,'EGYPT',1)		 																				<> 0 => 'EGYPT',
																		 stringlib.stringfind(temp,'ENGLAND',1)		 																			<> 0 => 'ENGLAND',
																		 stringlib.stringfind(temp,'ENGLAND & WALES',1)		 															<> 0 => 'ENGLAND AND WALES',
																		 stringlib.stringfind(temp,'ENGLAND AND WALES',1)		 														<> 0 => 'ENGLAND AND WALES',
																		 stringlib.stringfind(temp,'EUROPE',1)		 																			<> 0 => 'EUROPE',
																		 stringlib.stringfind(temp,'FEDERATED STATES OF MICRONESIA',1)	 								<> 0 => 'FEDERATED STATES OF MICRONESIA',
																		 stringlib.stringfind(temp,'FOUNDATION UNDER SWISS LAW',1)	 										<> 0 => 'SWITZERLAND',
																		 stringlib.stringfind(temp,'FRANCE',1) 																					<> 0 => 'FRANCE',
																		 stringlib.stringfind(temp,'GERMANY',1)																					<> 0 => 'GERMANY',
																		 stringlib.stringfind(temp,'GRENADINES',1)																			<> 0 => 'ST VINCENT AND THE GRENADINES',
																		 stringlib.stringfind(temp,'GREAT BRITAIN',1)	 																	<> 0 => 'GREAT BRITAIN',
																		 stringlib.stringfind(temp,'HONG KONG',1)		 																		<> 0 => 'HONG KONG',
																		 stringlib.stringfind(temp,'ICELAND',1) 																				<> 0 => 'ICELAND',
																		 stringlib.stringfind(temp,'IIPAY NATION OF SANTA YSABEL',1)		 								<> 0 => 'IIPAY NATION OF SANTA YSABEL',
																		 stringlib.stringfind(temp,'INDIA',1) 																					<> 0 => 'INDIA',
																		 stringlib.stringfind(temp,'IRELAND',1) 																				<> 0 => 'IRELAND',
																		 stringlib.stringfind(temp,'ISLE OF MAN',1)																			<> 0 => 'ISLE OF MAN',
																		 stringlib.stringfind(temp,'ISRAEL',1)																					<> 0 => 'ISRAEL',
																		 stringlib.stringfind(temp,'ITALY',1)																						<> 0 => 'ITALY',
																		 stringlib.stringfind(temp,'JAPAN',1) 																					<> 0 => 'JAPAN',
																		 stringlib.stringfind(temp,'JERSEY CHANNEL ISLANDS',1) 													<> 0 => 'JERSEY CHANNEL ISLANDS',
																		 stringlib.stringfind(temp,'JERSY CHANNEL ISLANDS',1) 													<> 0 => 'JERSEY CHANNEL ISLANDS',
																		 stringlib.stringfind(temp,'KITT',1) 																						<> 0 => 'SAINT KITTS AND NEVIS',
																		 stringlib.stringfind(temp,'KOREA',1) 																					<> 0 => 'KOREA',
																		 stringlib.stringfind(temp,'LATIN AMERICAS',1) 																	<> 0 => 'LATIN AMERICAS',
																		 stringlib.stringfind(temp,'LIBERIA',1) 																				<> 0 => 'LIBERIA',
																		 stringlib.stringfind(temp,'LIECHTENSTEIN',1) 																	<> 0 => 'LIECHTENSTEIN',
																		 stringlib.stringfind(temp,'PERU',1) 																						<> 0 => 'PERU',
																		 stringlib.stringfind(temp,'LITHUANIA',1) 																			<> 0 => 'LITHUANIA',
																		 stringlib.stringfind(temp,'LUXEMBOURG',1) 																			<> 0 => 'LUXEMBOURG',
																		 stringlib.stringfind(temp,'MADAGASCAR',1) 																			<> 0 => 'MADAGASCAR',
																		 stringlib.stringfind(temp,'MALAYSIA',1) 																				<> 0 => 'MALAYSIA',
																		 stringlib.stringfind(temp,'MAURITIUS',1) 																			<> 0 => 'MAURITIUS',
																		 stringlib.stringfind(temp,'MONGOLIA',1) 																				<> 0 => 'MONGOLIA',
																		 stringlib.stringfind(temp,'MARSHALL I',1) 																			<> 0 => 'MARSHALL ISLANDS',																		 
																		 stringlib.stringfind(temp,'MARSHALL ISLANDS',1) 																<> 0 => 'MARSHALL ISLANDS',
																		 stringlib.stringfind(temp,'MEXICO',1)			 																		<> 0 => 'MEXICO',
																		 stringlib.stringfind(temp,'NETHERLANDS',1) 																		<> 0 => 'NETHERLANDS',
																		 stringlib.stringfind(temp,'NEVIS',1) 																					<> 0 => 'SAINT KITTS AND NEVIS',
																		 stringlib.stringfind(temp,'NEW ZEALAND',1) 																		<> 0 => 'NEW ZEALAND',
																		 stringlib.stringfind(temp,'NIGERIA',1) 																				<> 0 => 'NIGERIA',
																		 stringlib.stringfind(temp,'NORTHERN MARIANA ISLANDS',1) 												<> 0 => 'NORTHERN MARIANA ISLANDS',
																		 stringlib.stringfind(temp,'NOVA SCOTIA CANADA',1) 															<> 0 => 'CANADA',
																		 stringlib.stringfind(temp,'OTHER ASIA',1) 																			<> 0 => 'OTHER ASIA',
																		 stringlib.stringfind(temp,'PALAU',1)		 																				<> 0 => 'PALAU',
																		 stringlib.stringfind(temp,'PANAMA',1) 																					<> 0 => 'PANAMA',
																		 stringlib.stringfind(temp,'PHILIPPINES',1) 																		<> 0 => 'PHILIPPINES',
																		 stringlib.stringfind(temp,'PHILLIPPINES',1) 																		<> 0 => 'PHILIPPINES',
																		 stringlib.stringfind(temp,'PUERTO RICO',1)		 																	<> 0 => 'PUERTO RICO',
																		 stringlib.stringfind(temp,'RUSSIA',1) 																					<> 0 => 'RUSSIA',
																		 stringlib.stringfind(temp,'SCOTLAND',1) 																				<> 0 => 'SCOTLAND',
																		 stringlib.stringfind(temp,'SCHAFFHAUSEN',1) 																		<> 0 => 'SWITZERLAND',
																		 stringlib.stringfind(temp,'SINGAPORE',1) 																			<> 0 => 'SINGAPORE',
																		 stringlib.stringfind(temp,'SOUTH KOREA',1) 																		<> 0 => 'SOUTH KOREA',
																		 stringlib.stringfind(temp,'SPAIN',1) 																					<> 0 => 'SPAIN',
																		 stringlib.stringfind(temp,'SWEDEN',1) 																					<> 0 => 'SWEDEN',
																		 stringlib.stringfind(temp,'SWITZERLAND',1) 																		<> 0 => 'SWITZERLAND',
																		 stringlib.stringfind(temp,'TANZANIA',1) 																				<> 0 => 'TANZANIA',
																		 stringlib.stringfind(temp,'TAIWAN ROC',1) 																			<> 0 => 'TAIWAN ROC',
																		 stringlib.stringfind(temp,'CCTHITA',1)																					<> 0 => 'TRIBAL LAW OF CCTHITA',
																		 stringlib.stringfind(temp,'COEUR DALENE',1)																		<> 0 => 'COEUR DALENE TRIBE',
																		 stringlib.stringfind(temp,'TONOACA',1)																					<> 0 => 'TRIBAL LAW OF TOTONACA TRIBE',
																		 stringlib.stringfind(temp,'TURKS & CAICOS',1) 																	<> 0 => 'TURKS AND CAICOS ISLANDS',
																		 stringlib.stringfind(temp,'TURKS AND CAICOS',1) 																<> 0 => 'TURKS AND CAICOS ISLANDS',
																		 stringlib.stringfind(temp,'UKRAINE',1) 																				<> 0 => 'UKRAINE',
																		 stringlib.stringfind(temp,'UNITED ARAB EMIRATES',1) 														<> 0 => 'UNITED ARAB EMIRATES',
																		 stringlib.stringfind(temp,'UNITED MEXICAN STATES',1) 													<> 0 => 'UNITED MEXICAN STATES',
																		 stringlib.stringfind(temp,'UNITED KINGDOM',1) 																	<> 0 => 'UNITED KINGDOM',
																		 stringlib.stringfind(temp,'URAGUAY',1) 																				<> 0 => 'URAGUAY',
																		 stringlib.stringfind(temp,'VAJO NATION',1) 																		<> 0 => 'NAVAJO NATION',
																		 stringlib.stringfind(temp,'VANUATU',1) 																				<> 0 => 'VANUATU',
																		 stringlib.stringfind(temp,'VENEZUELA',1) 																			<> 0 => 'VENEZUELA',
																		 stringlib.stringfind(temp,'WHALES',1) 																					<> 0 => 'WHALES',
																		 ''
																		 );
																		 
						//* After removing "bad" words, the data is then checked for only the jurisdiction code.
						Jurisdiction4	:= map(//state jurisdictions
																		 tempnospaces = 'AL'  => 'ALABAMA',
																		 tempnospaces = 'AK'  => 'ALASKA',
																		 tempnospaces = 'AZ'  => 'ARIZONA',
																		 tempnospaces = 'ARI' => 'ARIZONA',													 
																		 tempnospaces = 'AR'  => 'ARKANSAS',
																		 tempnospaces = 'ARK'	=> 'ARKANSAS',													 
																		 tempnospaces = 'CA' 	=> 'CALIFORNIA',
																		 tempnospaces = 'CAL'	=> 'CALIFORNIA',
																		 tempnospaces = 'CIV'	=> 'COTE DIVOIRE IVORY COAST',
																		 tempnospaces = 'CO' 	=> 'COLORADO',
																		 tempnospaces = 'COL'	=> 'COLORADO',													 
																		 tempnospaces = 'CT' 	=> 'CONNECTICUT',
																		 tempnospaces = 'CON'	=> 'CONNECTICUT',													 
																		 tempnospaces = 'DE' 	=> 'DELAWARE',
																		 tempnospaces = 'DEL'	=> 'DELAWARE',													 
																		 tempnospaces = 'DC' 	=> 'DISTRICT OF COLUMBIA',
																		 tempnospaces = 'DIS'	=> 'DISTRICT OF COLUMBIA',	
																		 tempnospaces = 'FL' 	=> 'FLORIDA',
																		 tempnospaces = 'GA' 	=> 'GEORGIA',
																		 tempnospaces = 'GEO'	=> 'GEORGIA',
																		 tempnospaces = 'GU' 	=> 'GUAM',
																		 tempnospaces = 'HI' 	=> 'HAWAII',
																		 tempnospaces = 'HAW'	=> 'HAWAII',													 
																		 tempnospaces = 'ID' 	=> 'IDAHO',
																		 tempnospaces = 'IDA'	=> 'IDAHO',													 
																		 tempnospaces = 'IL' 	=> 'ILLINOIS',
																		 tempnospaces = 'ILL'	=> 'ILLINOIS',													 
																		 tempnospaces = 'IN' 	=> 'INDIANA',
																		 tempnospaces = 'IND'	=> 'INDIANA',													 
																		 tempnospaces = 'IA' 	=> 'IOWA',
																		 tempnospaces = 'IOW'	=> 'IOWA',													 
																		 tempnospaces = 'KS' 	=> 'KANSAS',
																		 tempnospaces = 'KAN'	=> 'KANSAS',													 
																		 tempnospaces = 'KY' 	=> 'KENTUCKY',
																		 tempnospaces = 'KEN'	=> 'KENTUCKY',													 
																		 tempnospaces = 'LA' 	=> 'LOUISIANA',
																		 tempnospaces = 'LOU'	=> 'LOUISIANA',													 
																		 tempnospaces = 'ME' 	=> 'MAINE',
																		 tempnospaces = 'MAI'	=> 'MAINE',													 
																		 tempnospaces = 'MD' 	=> 'MARYLAND',
																		 tempnospaces = 'MAR'	=> 'MARYLAND',													 
																		 tempnospaces = 'MA' 	=> 'MASSACHUSETTS',
																		 tempnospaces = 'MAS'	=> 'MASSACHUSETTS',
																		 tempnospaces = 'MI' 	=> 'MICHIGAN',
																		 tempnospaces = 'MIC'	=> 'MICHIGAN',													 
																		 tempnospaces = 'MN' 	=> 'MINNESOTA',
																		 tempnospaces = 'MIN'	=> 'MINNESOTA',
																		 tempnospaces = 'MS' 	=> 'MISSISSIPPI',
																		 tempnospaces = 'MO' 	=> 'MISSOURI',
																		 tempnospaces = 'MT' 	=> 'MONTANA',
																		 tempnospaces = 'MON'	=> 'MONTANA',													 
																		 tempnospaces = 'NE' 	=> 'NEBRASKA',
																		 tempnospaces = 'NEB'	=> 'NEBRASKA',													 
																		 tempnospaces = 'NV' 	=> 'NEVADA',
																		 tempnospaces = 'NEV'	=> 'NEVADA',													 
																		 tempnospaces = 'NH' 	=> 'NEW HAMPSHIRE',
																		 tempnospaces = 'NJ' 	=> 'NEW JERSEY',
																		 tempnospaces = 'NM' 	=> 'NEW MEXICO',
																		 tempnospaces = 'NY' 	=> 'NEW YORK',
																		 tempnospaces = 'NYS'	=> 'NEW YORK',
																		 tempnospaces = 'NC' 	=> 'NORTH CAROLINA',
																		 tempnospaces = 'ND' 	=> 'NORTH DAKOTA',
																		 tempnospaces = 'OH' 	=> 'OHIO',
																		 tempnospaces = 'OHI'	=> 'OHIO',													 
																		 tempnospaces = 'OK' 	=> 'OKLAHOMA',
																		 tempnospaces = 'OKL'	=> 'OKLAHOMA',
																		 tempnospaces = 'OR' 	=> 'OREGON',
																		 tempnospaces = 'ORE'	=> 'OREGON',													 
																		 tempnospaces = 'PA' 	=> 'PENNSYLVANIA',
																		 tempnospaces = 'PEN'	=> 'PENNSYLVANIA',													 
																		 tempnospaces = 'RI' 	=> 'RHODE ISLAND',
																		 tempnospaces = 'RHO'	=> 'RHODE ISLAND',													 
																		 tempnospaces = 'SC' 	=> 'SOUTH CAROLINA',
																		 tempnospaces = 'SD' 	=> 'SOUTH DAKOTA',
																		 tempnospaces = 'TN' 	=> 'TENNESSEE',
																		 tempnospaces = 'TEN'	=> 'TENNESSEE',													 
																		 tempnospaces = 'TX' 	=> 'TEXAS',
																		 tempnospaces = 'TEX'	=> 'TEXAS',													 
																		 tempnospaces = 'UT' 	=> 'UTAH',
																		 tempnospaces = 'UTA'	=> 'UTAH',													 
																		 tempnospaces = 'VT' 	=> 'VERMONT',
																		 tempnospaces = 'VER'	=> 'VERMONT',													 
																		 tempnospaces = 'VI' 	=> 'VIRGIN ISLANDS',
																		 tempnospaces = 'VA' 	=> 'VIRGINIA',
																		 tempnospaces = 'VIR'	=> 'VIRGINIA',
																		 tempnospaces = 'WA' 	=> 'WASHINGTON',
																		 tempnospaces = 'WAS'	=> 'WASHINGTON',
																		 tempnospaces = 'WV' 	=> 'WEST VIRGINIA',
																		 tempnospaces = 'WES'	=> 'WEST VIRGINIA',													 
																		 tempnospaces = 'WI' 	=> 'WISCONSIN',
																		 tempnospaces = 'WIS'	=> 'WISCONSIN',													 
																		 tempnospaces = 'WY' 	=> 'WYOMING',
																		 tempnospaces = 'WYO'	=> 'WYOMING',
																		 //starts non-state jurisdictions
																		 tempnospaces = 'AB' 	=> 'CANADA',
																		 tempnospaces = 'BC' 	=> 'CANADA',
																		 tempnospaces = 'MB' 	=> 'CANADA',
																		 tempnospaces = 'NB' 	=> 'CANADA',
																		 tempnospaces = 'ON' 	=> 'CANADA',
																		 tempnospaces = 'PE' 	=> 'CANADA',
																		 tempnospaces = 'QC' 	=> 'CANADA',																		 
																		 tempnospaces = 'SK' 	=> 'CANADA',
																		 tempnospaces = 'AF' 	=> 'AFRICA',	 
																		 tempnospaces = 'AFR'	=> 'AFRICA',													 
																		 tempnospaces = 'ARG'	=> 'ARGENTINA',													 
																		 tempnospaces = 'AE' 	=> 'ARMED FORCES EUROPE THE MIDDLE EAST AND CANADA',
																		 tempnospaces = 'AP' 	=> 'ARMED FORCES PACIFIC',
																		 tempnospaces = 'AA' 	=> 'ARMED FORCES (AMERICAS EXCEPT CANADA)',
																		 tempnospaces = 'AS' 	=> 'AMERICAN SAMOA',													 
																		 tempnospaces = 'AU' 	=> 'AUSTRALIA',
																		 tempnospaces = 'BR' 	=> 'BAHAMAS',													 
																		 tempnospaces = 'BR' 	=> 'BARBADOS',
																		 tempnospaces = 'BAR'	=> 'BARBADOS',													 
																		 tempnospaces = 'BL' 	=> 'BELGIUM',
																		 tempnospaces = 'BEL'	=> 'BELGIUM',													 
																		 tempnospaces = 'BE' 	=> 'BERMUDA',
																		 tempnospaces = 'BW' 	=> 'BRITISH WEST INDIES',
																		 tempnospaces = 'BRI'	=> 'BRITISH WEST INDIES',													 
																		 tempnospaces = 'CAY'	=> 'CAYMAN ISLANDS',
																		 tempnospaces = 'CD' 	=> 'CANADA',
																		 tempnospaces = 'CAN'	=> 'CANADA',													 
																		 tempnospaces = 'CZ' 	=> 'CANAL ZONE',													 
																		 tempnospaces = 'CH' 	=> 'CHINA',
																		 tempnospaces = 'CHI'	=> 'CHINA',													 
																		 tempnospaces = 'CB' 	=> 'COLUMBIA',
																		 tempnospaces = 'COL'	=> 'COLUMBIA',
																		 tempnospaces = 'CI' 	=> 'COOK ISLANDS',
																		 tempnospaces = 'CNMI'=> 'NORTHERN MARIANA ISLANDS',
																		 tempnospaces = 'COS'	=> 'COSTA RICA',
																		 tempnospaces = 'EGY'	=> 'EGYPT',													 
																		 tempnospaces = 'EU' 	=> 'EUROPE',
																		 tempnospaces = 'EUR'	=> 'EUROPE',
																		 tempnospaces = 'FC' 	=> 'FEDERATED CHARTERED',																		 
																		 tempnospaces = 'FM' 	=> 'FEDERATED STATES OF MICRONESIA',													 
																		 tempnospaces = 'FR' 	=> 'FRANCE',
																		 tempnospaces = 'FRA'	=> 'FRANCE',													 
																		 tempnospaces = 'GR' 	=> 'GERMANY',													 
																		 tempnospaces = 'GB' 	=> 'GREAT BRITAIN',
																		 tempnospaces = 'GL' 	=> 'GREENLAND',																		 
																		 tempnospaces = 'HK' 	=> 'HONG KONG',
																		 tempnospaces = 'HON'	=> 'HONG KONG',
																		 tempnospaces = 'II' 	=> 'INDIA',
																		 tempnospaces = 'IE' 	=> 'IRELAND',
																		 tempnospaces = 'IRE'	=> 'IRELAND',													 
																		 tempnospaces = 'ITA'	=> 'ITALY',													 
																		 tempnospaces = 'JA' 	=> 'JAPAN',
																		 tempnospaces = 'JAP'	=> 'JAPAN',
																		 tempnospaces = 'LX' 	=> 'LUXEMBOURG',
																		 tempnospaces = 'LUX'	=> 'LUXEMBOURG',
																		 tempnospaces = 'MH' 	=> 'MARSHALL ISLANDS',
																		 tempnospaces = 'MX' 	=> 'MEXICO',
																		 tempnospaces = 'MEX'	=> 'MEXICO',			
																		 tempnospaces = 'NL' 	=> 'NETHERLANDS',
																		 tempnospaces = 'NET'	=> 'NETHERLANDS',
																		 tempnospaces = 'MP' 	=> 'NORTHERN MARIANA ISLANDS',													 
																		 tempnospaces = 'NS' 	=> 'CANADA',
																		 tempnospaces = 'NOV'	=> 'CANADA',													 
																		 tempnospaces = 'OA' 	=> 'OTHER ASIA',
																		 tempnospaces = 'SA' 	=> 'OTHER S&C AMERICAN',
																		 tempnospaces = 'PN' 	=> 'PANAMA',
																		 tempnospaces = 'PAN'	=> 'PANAMA',
																		 tempnospaces = 'PW' 	=> 'PALAU',																		 
																		 tempnospaces = 'PH' 	=> 'PHILIPPINES',
																		 tempnospaces = 'PHI'	=> 'PHILIPPINES',
																		 tempnospaces = 'PR' 	=> 'PUERTO RICO',													 
																		 tempnospaces = 'PUE'	=> 'PUERTO RICO',
																		 tempnospaces = 'RUS'	=> 'RUSSIA',													 
																		 tempnospaces = 'SL' 	=> 'SCOTLAND',
																		 tempnospaces = 'SCO'	=> 'SCOTLAND',
																		 tempnospaces = 'SPA'	=> 'SPAIN',
																		 tempnospaces = 'SWI'	=> 'SWITZERLAND',
																		 tempnospaces = 'TUR'	=> 'TURKEY',													 
																		 tempnospaces = 'US' 	=> 'US',											 
																		 tempnospaces = 'UK' 	=> 'UNITED KINGDOM',
																		 tempnospaces = 'UNI'	=> 'UNITED KINGDOM',
																		 tempnospaces = 'UKR'	=> 'UKRAINE',													 
																		 ''
																		);
						
						//* After removing "bad" words, the data is then checked for the jurisdiction code within the data.
						Jurisdiction5	:= map(
																		 regexfind('^AL | AL$| AL ',temp,0) 																						<>'' => 'ALABAMA',
																		 regexfind('^AK | AK$| AK ',temp,0) 																						<>'' => 'ALASKA',
																		 regexfind('^AS | AS$| AS ',temp,0)																							<>'' => 'AMERICAN SAMOA',
																		 regexfind('^AZ | AZ$| AZ ',temp,0)																							<>'' => 'ARIZONA',
																		 regexfind('^AR | AR$| AR ',temp,0)	 																						<>'' => 'ARKANSAS',
																		 regexfind('^CA | CA$| CA ',temp,0)	 																						<>'' => 'CALIFORNIA',
																		 regexfind('^CO | CO$| CO ',temp,0)								 															<>'' => 'COLORADO',
																		 regexfind('^CT | CT$| CT ',temp,0)		 																					<>'' => 'CONNECTICUT',
																		 regexfind('^DE | DE$| DE ',temp,0)		 																					<>'' => 'DELAWARE',
																		 regexfind('^DC | DC$| DC ',temp,0)																 							<>'' => 'DISTRICT OF COLUMBIA',
																		 regexfind('^FM | FM$| FM ',temp,0)																		 					<>'' => 'FEDERATED STATES OF MICRONESIA',
																		 regexfind('^FL | FL$| FL ',temp,0)							 																<>'' => 'FLORIDA',
																		 regexfind('^GA | GA$| GA ',temp,0)		 																					<>'' => 'GEORGIA',
																		 regexfind('^GU | GU$| GU ',temp,0)			 																				<>'' => 'GUAM',
																		 regexfind('^HI | HI$| HI ',temp,0)							 																<>'' => 'HAWAII',
																		 regexfind('^ID | ID$| ID ',temp,0) 																						<>'' => 'IDAHO',
																		 regexfind('^IL | IL$| IL ',temp,0) 																						<>'' => 'ILLINOIS',
																		 regexfind('^IN | IN$| IN ',temp,0) 																						<>'' => 'INDIANA',
																		 regexfind('^IA | IA$| IA ',temp,0) 																						<>'' => 'IOWA',
																		 regexfind('^KS | KS$| KS ',temp,0) 																						<>'' => 'KANSAS',
																		 regexfind('^KY | KY$| KY ',temp,0) 																						<>'' => 'KENTUCKY',
																		 regexfind('^LA | LA$| LA ',temp,0) 																						<>'' => 'LOUISIANA',
																		 regexfind('^ME | ME$| ME ',temp,0) 																						<>'' => 'MAINE',
																		 regexfind('^MH | MH$| MH ',temp,0) 																						<>'' => 'MARSHALL ISLANDS',
																		 regexfind('^MD | MD$| MD ',temp,0) 																						<>'' => 'MARYLAND',
																		 regexfind('^MA | MA$| MA ',temp,0)										 													<>'' => 'MASSACHUSETTS',
																		 regexfind('^MI | MI$| MI ',temp,0)				 																			<>'' => 'MICHIGAN',
																		 regexfind('^MN | MN$| MN ',temp,0)			 																				<>'' => 'MINNESOTA',
																		 regexfind('^MS | MS$| MS ',temp,0)									 														<>'' => 'MISSISSIPPI',
																		 regexfind('^MO | MO$| MO ',temp,0) 																						<>'' => 'MISSOURI',
																		 regexfind('^MT | MT$| MT ',temp,0) 																						<>'' => 'MONTANA',
																		 regexfind('^NE | NE$| NE ',temp,0) 																						<>'' => 'NEBRASKA',
																		 regexfind('^NV | NV$| NV ',temp,0) 																						<>'' => 'NEVADA',
																		 regexfind('^NH | NH$| NH ',temp,0)										 													<>'' => 'NEW HAMPSHIRE',
																		 regexfind('^NJ | NJ$| NJ ',temp,0) 																						<>'' => 'NEW JERSEY',
																		 regexfind('^NM | NM$| NM |^N M',temp,0) 																				<>'' => 'NEW MEXICO',
																		 regexfind('^NY | NY$| NY ',temp,0) 																						<>'' => 'NEW YORK',
																		 regexfind('^NC | NC$| NC ',temp,0)	 																						<>'' => 'NORTH CAROLINA',
																		 regexfind('^ND | ND$| ND ',temp,0)										 													<>'' => 'NORTH DAKOTA',
																		 regexfind('^MP | MP$| MP ',temp,0) 																						<>'' => 'NORTHERN MARIANA ISLANDS',
																		 regexfind('^OH | OH$| OH ',temp,0)						 																	<>'' => 'OHIO',
																		 regexfind('^OK | OK$| OK ',temp,0)	 																						<>'' => 'OKLAHOMA',
																		 regexfind('^OR | OR$| OR ',temp,0)		 																					<>'' => 'OREGON',
																		 regexfind('^PW | PW$| PW ',temp,0)		 																					<>'' => 'PALAU',
																		 regexfind('^PA | PA$| PA ',temp,0)									 														<>'' => 'PENNSYLVANIA',
																		 regexfind('^PR | PR$| PR ',temp,0)		 																					<>'' => 'PUERTO RICO',
																		 regexfind('^RI | RI$| RI ',temp,0)	 																						<>'' => 'RHODE ISLAND',
																		 regexfind('^SC | SC$| SC ',temp,0)										 													<>'' => 'SOUTH CAROLINA',
																		 regexfind('^SD | SD$| SD ',temp,0) 																						<>'' => 'SOUTH DAKOTA',
																		 regexfind('^TN | TN$| TN ',temp,0)							 																<>'' => 'TENNESSEE',
																		 regexfind('^TX | TX$| TX ',temp,0)			 																				<>'' => 'TEXAS',
																		 regexfind('^UT | UT$| UT ',temp,0)			 																				<>'' => 'UTAH',
																		 regexfind('^VT | VT$| VT ',temp,0)		 																					<>'' => 'VERMONT',
																		 regexfind('^VI | VI$| VI ',temp,0)										 													<>'' => 'VIRGIN ISLANDS',
																		 regexfind('^VA | VA$| VA ',temp,0)		 																					<>'' => 'VIRGINIA',
																		 regexfind('^WA | WA$| WA ',temp,0)	 																						<>'' => 'WASHINGTON',
																		 regexfind('^WV | WV$| WV ',temp,0)										 													<>'' => 'WEST VIRGINIA',
																		 regexfind('^WI | WI$| WI ',temp,0)		 																					<>'' => 'WISCONSIN',
																		 regexfind('^WY | WY$| WY ',temp,0)			 																				<>'' => 'WYOMING',
																		 regexfind('^AE | AE$| AE ',temp,0) 																						<>'' => 'ARMED FORCES EUROPE THE MIDDLE EAST AND CANADA',
																		 regexfind('^AP | AP$| AP ',temp,0) 																						<>'' => 'ARMED FORCES PACIFIC',
																		 regexfind('^AA | AA$| AA ',temp,0) 																						<>'' => 'ARMED FORCES (AMERICAS EXCEPT CANADA)',
																		 regexfind('^CB | CB$| CB ',temp,0)								 															<>'' => 'COLUMBIA',
																		 regexfind('^UK | UK$| UK ',temp,0)									 														<>'' => 'UNITED KINGDOM',
																		 regexfind('^GB | GB$| GB ',temp,0)	 																						<>'' => 'GREAT BRITAIN',
																		 regexfind('^CD | CD$| CD ',temp,0)								 															<>'' => 'CANADA',
																		 regexfind('^HK | HK$| HK ',temp,0)		 																					<>'' => 'HONG KONG',
																		 regexfind('^MX | MX$| MX ',temp,0)			 																				<>'' => 'MEXICO',
																		 regexfind('^EU | EU$| EU ',temp,0)							 																<>'' => 'EUROPE',
																		 regexfind('^CI | CI$| CI ',temp,0)																							<>'' => 'COOK ISLANDS',
																		 regexfind('^SA | SA$| SA ',temp,0) 																						<>'' => 'OTHER S&C AMERICAN',
																		 regexfind('^II | II$| II ',temp,0)					 																		<>'' => 'INDIA',
																		 regexfind('^SL | SL$| SL ',temp,0) 																						<>'' => 'SCOTLAND',
																		 regexfind('^US | US$| US ',temp,0) 																						<>'' => 'US',
																		 regexfind('^BE | BE$| BE ',temp,0)							 																<>'' => 'BERMUDA',
																		 regexfind('^FR | FR$| FR ',temp,0) 																						<>'' => 'FRANCE',
																		 regexfind('^JA | JA$| JA ',temp,0) 																						<>'' => 'JAPAN',
																		 regexfind('^MH | MH$| MH ',temp,0) 																						<>'' => 'MARSHALL ISLANDS',
																		 regexfind('^NL | NL$| NL ',temp,0) 																						<>'' => 'NETHERLANDS',
																		 regexfind('^NS | NS$| NS ',temp,0) 																						<>'' => 'CANADA',
																		 regexfind('^OA | OA$| OA ',temp,0) 																						<>'' => 'OTHER ASIA',
																		 regexfind('^BR | BR$| BR ',temp,0) 																						<>'' => 'BARBADOS',
																		 regexfind('^AF | AF$| AF ',temp,0)	 																						<>'' => 'AFRICA',
																		 regexfind('^IE | IE$| IE ',temp,0) 																						<>'' => 'IRELAND',
																		 regexfind('^AU | AU$| AU ',temp,0) 																						<>'' => 'AUSTRALIA',
																		 regexfind('^LX | LX$| LX ',temp,0) 																						<>'' => 'LUXEMBOURG',
																		 regexfind('^CH | CH$| CH ',temp,0)					 																		<>'' => 'CHINA',
																		 regexfind('^CZ | CZ$| CZ ',temp,0) 																						<>'' => 'CANAL ZONE',
																		 regexfind('^PH | PH$| PH ',temp,0) 																						<>'' => 'PHILIPPINES',
																		 regexfind('^BL | BL$| BL ',temp,0)						 																	<>'' => 'BELGIUM',
																		 regexfind('^BW | BW$| BW ',temp,0) 																						<>'' => 'BRITISH WEST INDIES',
																		 regexfind('^GR | GR$| GR ',temp,0)		 																					<>'' => 'GERMANY',
																		 regexfind('^PN | PN$| PN ',temp,0) 																						<>'' => 'PANAMA',
																		 ''
																		);
						
						//* After removing "bad" words, the data is then checked for the cities, counties, etc.													
						Jurisdiction6	:= map(
																		 regexfind('PHOENIX',							temp,0)																				<>'' => 'ARIZONA',	
																		 regexfind('ARIZ$',								temp,0)																				<>'' => 'ARIZONA',
																		 regexfind('MARICOPA',						temp,0)																				<>'' => 'ARIZONA',
																		 regexfind('LOS ANGELES',					temp,0)		 																		<>'' => 'CALIFORNIA',
																		 regexfind('SAN LUIS OBISPO',			temp,0)		 																		<>'' => 'CALIFORNIA',
																		 regexfind('SACRAMENTO',					temp,0)		 																		<>'' => 'CALIFORNIA',
																		 regexfind('ALBERTA',							temp,0) 																			<>'' => 'CANADA',
																		 regexfind(' CAN$',								temp,0) 																			<>'' => 'CANADA',
																		 regexfind('NOVA SCOTIA',					temp,0) 																			<>'' => 'CANADA',
																		 regexfind('ONTARIO',							temp,0) 																			<>'' => 'CANADA',
																		 regexfind('QUEBEC',							temp,0)					 															<>'' => 'CANADA',
																		 regexfind('TORONTO',							temp,0) 																			<>'' => 'CANADA',
																		 regexfind('ADAMS',								temp,0) 																			<>'' => 'COLORADO',																		 
																		 regexfind('ADAMS COUNTY',				temp,0) 																			<>'' => 'COLORADO',																		 
																		 regexfind('ARAPAHOE COUNTY',			temp,0) 																			<>'' => 'COLORADO',
																		 regexfind('AURORA',							temp,0) 																			<>'' => 'COLORADO',
																		 regexfind('BOULDER',							temp,0) 																			<>'' => 'COLORADO',
																		 regexfind('BOULDER COUNTY',			temp,0) 																			<>'' => 'COLORADO',
																		 regexfind('CLARK COUNTY',				temp,0) 																			<>'' => 'COLORADO',
																		 regexfind('CLAY COUNTY',					temp,0) 																			<>'' => 'COLORADO',
																		 regexfind('RIO BLANCO',					temp,0) 																			<>'' => 'COLORADO',
																		 regexfind('DENVER',							temp,0)						 														<>'' => 'COLORADO',
																		 regexfind('DOUGLAS COUNTY',			temp,0)						 														<>'' => 'COLORADO',													 
																		 regexfind('JEFFERSON COUNTY',		temp,0)						 														<>'' => 'COLORADO',													 
																		 regexfind('LARIMER COUNTY',			temp,0)						 														<>'' => 'COLORADO',	
																		 regexfind('LAS ANIMAS COUNTY',		temp,0)						 														<>'' => 'COLORADO',	
																		 regexfind('LINCOLN COUNTY',			temp,0)						 														<>'' => 'COLORADO',	
																		 regexfind('ROUTT COUNTY',				temp,0)						 														<>'' => 'COLORADO',													 
																		 regexfind('WELD COUNTY',					temp,0)						 														<>'' => 'COLORADO',	
																		 regexfind('MINNEAPOLIS',					temp,0) 																			<>'' => 'MINNESOTA',
																		 regexfind('WAKE COUNTY',					temp,0) 																			<>'' => 'NORTH CAROLINA',
																		 regexfind('PHILADELPHIA COUNTY',	temp,0) 																			<>'' => 'PENNSYLVANIA',
																		 regexfind('TENNESSE',						temp,0) 																			<>'' => 'TENNESSEE',													 
																		 regexfind('SALT LAKE CITY',			temp,0) 																			<>'' => 'UTAH',
																		 ''
																		);													

						RETURN map(corp2.t2u(temp) = '' 				 => '',												//allow for blank jurisdication
											 corp2.t2u(Jurisdiction1)<> '' => corp2.t2u(Jurisdiction1), //bad spelling fixed
											 corp2.t2u(Jurisdiction2)<> '' => corp2.t2u(Jurisdiction2),	//jurisdiction us state description found
											 corp2.t2u(Jurisdiction3)<> '' => corp2.t2u(Jurisdiction3),	//jurisdiction non-us state description found
											 corp2.t2u(Jurisdiction4)<> '' => corp2.t2u(Jurisdiction4),	//jurisdiction code found
											 corp2.t2u(Jurisdiction5)<> '' => corp2.t2u(Jurisdiction5),	//jurisdiction found via city
											 corp2.t2u(Jurisdiction6)<> '' => corp2.t2u(Jurisdiction6),	//jurisdiction found via city											 
											 '**|'+temp //no jurisdiction found and returning astericks to cause scrubs to fail on record
											);
		END;
		
		//****************************************************************************
		//State_Codes: returns the state code.
		//****************************************************************************
		EXPORT State_Desc_Translation(string s) := FUNCTION
					 
					 uc_s := corp2.t2u(stringlib.stringfilter(corp2.t2u(s),' ABCDEFGHIJKLMNOPQRSTUVWXYZ'));

	         RETURN map(uc_s = 'ALABAMA' 																				=> 'AL',
											uc_s = 'ALASKA' 																				=> 'AK', 
											uc_s = 'ARKANSAS' 																			=> 'AR', 
											uc_s = 'AMERICAN SAMOA' 																=> 'AS', 
											uc_s = 'ARIZONA' 																				=> 'AZ',
											uc_s = 'ARMED FORCES (AMERICAS EXCEPT CANADA)'					=> 'AA',
											uc_s = 'ARMED FORCES EUROPE THE MIDDLE EAST AND CANADA'	=> 'AE',
											uc_s = 'ARMED FORCES PACIFIC'														=> 'AP',											
											uc_s = 'CALIFORNIA' 																		=> 'CA', 
											uc_s = 'CANAL ZONE' 																		=> 'CZ',
											uc_s = 'COLORADO' 																			=> 'CO', 
											uc_s = 'CONNECTICUT'													 					=> 'CT', 
											uc_s = 'DISTRICT OF COLUMBIA'														=> 'DC', 
											uc_s = 'DELAWARE' 																			=> 'DE', 
											uc_s = 'FLORIDA' 																				=> 'FL', 
											uc_s = 'GEORGIA'													 							=> 'GA', 
											uc_s = 'GUAM' 																					=> 'GU', 
											uc_s = 'HAWAII'																					=> 'HI', 	
											uc_s = 'IOWA' 																					=> 'IA', 
											uc_s = 'IDAHO' 																					=> 'ID', 
											uc_s = 'ILLINOIS' 																			=> 'IL', 
											uc_s = 'INDIANA'														 						=> 'IN', 
											uc_s = 'KANSAS' 																				=> 'KS', 
											uc_s = 'KENTUCKY'														 						=> 'KY', 
											uc_s = 'LOUISIANA' 																			=> 'LA', 
											uc_s = 'MASSACHUSETTS' 																	=> 'MA', 
											uc_s = 'MARYLAND'																				=> 'MD', 
											uc_s = 'MAINE' 																					=> 'ME', 
											uc_s = 'MICHIGAN' 																			=> 'MI', 
											uc_s = 'MINNESOTA'													 						=> 'MN', 
											uc_s = 'MISSOURI' 																			=> 'MO', 
											uc_s = 'MISSISSIPPI' 																		=> 'MS', 
											uc_s = 'MONTANA' 																				=> 'MT', 
											uc_s = 'NORTH CAROLINA' 																=> 'NC', 
											uc_s = 'NORTH DAKOTA' 																	=> 'ND', 
											uc_s = 'NEBRASKA' 																			=> 'NE', 
											uc_s = 'NEW HAMPSHIRE'													 				=> 'NH', 
											uc_s = 'NEW JERSEY' 																		=> 'NJ', 
											uc_s = 'NEW MEXICO'														 					=> 'NM', 
											uc_s = 'NEVADA' 																				=> 'NV', 
											uc_s = 'NEW YORK'														 						=> 'NY', 
											uc_s = 'OHIO' 																					=> 'OH', 
											uc_s = 'OKLAHOMA' 																			=> 'OK', 
											uc_s = 'OREGON' 																				=> 'OR', 
											uc_s = 'PENNSYLVANIA' 																	=> 'PA', 
											uc_s = 'RHODE ISLAND'																 		=> 'RI', 
											uc_s = 'SOUTH CAROLINA' 																=> 'SC', 
											uc_s = 'SOUTH DAKOTA'															 			=> 'SD', 
											uc_s = 'TENNESSEE' 																			=> 'TN', 
											uc_s = 'TEXAS' 																					=> 'TX', 
											uc_s = 'UNITED STATES' 																	=> 'US', 
											uc_s = 'UTAH' 																					=> 'UT', 
											uc_s = 'VIRGINIA' 																			=> 'VA', 
											uc_s = 'VIRGIN ISLANDS' 																=> 'VI',		
											uc_s = 'VERMONT' 																				=> 'VT', 
											uc_s = 'WASHINGTON' 																		=> 'WA', 
											uc_s = 'WISCONSIN' 																			=> 'WI', 
											uc_s = 'WEST VIRGINIA'													 				=> 'WV', 
											uc_s = 'WYOMING' 																				=> 'WY',
											'**|'+uc_s
										 );
		END;                                

		//****************************************************************************
		//Foreign_Desc_Translation: returns whether the description is valid or not.
		//****************************************************************************
		EXPORT Foreign_Desc_Translation(string s) := FUNCTION

					 uc_s := corp2.t2u(stringlib.stringfilter(corp2.t2u(s),' ABCDEFGHIJKLMNOPQRSTUVWXYZ'));

	         RETURN map(uc_s = ''																												=> '',
											uc_s = 'AFRICA' 																								=> 'AF',											
											uc_s = 'ANTIGUA AND BARBUDA' 																		=> 'ATG',
											uc_s = 'ARGENTINA' 																							=> 'ARG',
											uc_s = 'AUSTRALIA' 																							=> 'AU',											
											uc_s = 'BAHAMAS' 																								=> 'BHS',
											uc_s = 'BAHRAIN' 																								=> 'BHR',
											uc_s = 'BARBADOS' 																							=> 'BR',											
											uc_s = 'BEIJING'																								=> 'CHN',
											uc_s = 'BELARUS'																								=> 'BLR',
											uc_s = 'BELGIUM' 																								=> 'BL',
											uc_s = 'BELIZE'																									=> 'BLZ',
											uc_s = 'BERMUDA' 																								=> 'BE',
											uc_s = 'BRAZIL' 																								=> 'BRA',
											uc_s = 'BRITISH VIRGIN ISLANDS' 																=> 'VGB',
											uc_s = 'BRITISH WEST INDIES' 																		=> 'BW',
											uc_s = 'BULGARIA'																								=> 'BGR',
											uc_s = 'CAMBODIA' 																							=> 'KHM',
											uc_s = 'CAMEROON' 																							=> 'CMR',
											uc_s = 'CANADA' 																								=> 'CD',											
											uc_s = 'CAYMAN ISLANDS' 																				=> 'CYM',
											uc_s = 'CHEROKEE NATION'																			  => '',  //A TRIBAL NATION 
											uc_s = 'CHINA' 																									=> 'CH',
											uc_s = 'COEUR DALENE TRIBE' 																		=> '',  //A TRIBAL NATION
											uc_s = 'COTE DIVOIRE IVORY COAST'																=> 'CIV',
											uc_s = 'COLUMBIA' 																							=> 'CB',											
											uc_s = 'CONFEDERATED SALISH AND KOOTENAI TRIBES' 								=> '',  //A TRIBAL NATION
											uc_s = 'COOK ISLANDS' 																					=> 'CI',
											uc_s = 'COSTA RICA'																							=> 'CRI',
											uc_s = 'CURACAO' 																								=> 'CUW',
											uc_s = 'DENMARK'																								=> 'DNK',
											uc_s = 'DOMINICAN REPUBLIC' 																		=> 'DOM',
											uc_s = 'ECUADOR' 																								=> 'ECU',
											uc_s = 'EGYPT' 																									=> 'EGY',
											uc_s = 'ENGLAND'																							  => 'ENG',
											uc_s = 'EUROPE' 																								=> 'EU',
											uc_s = 'FEDERATED CHARTERED' 																		=> 'FC',
											uc_s = 'FEDERATED STATES OF MICRONESIA' 												=> 'FM',
											uc_s = 'FRANCE' 																								=> 'FR',
											uc_s = 'GERMANY' 																								=> 'GR',
											uc_s = 'GREAT BRITAIN' 																					=> 'GB',
											uc_s = 'GREENLAND' 																							=> 'GRL',
											uc_s = 'HONG KONG' 																							=> 'HK',											
											uc_s = 'ICELAND' 																								=> 'ISL',
											uc_s = 'IIPAY NATION OF SANTA YSABEL' 													=> '',  //A TRIBAL NATION 
											uc_s = 'INDIA' 																									=> 'II',
											uc_s = 'IRELAND' 																								=> 'IE',											
											uc_s = 'ISLE OF MAN' 																						=> 'IMN',
											uc_s = 'ISRAEL' 																								=> 'ISR',
											uc_s = 'ITALY' 																									=> 'ITA',
											uc_s = 'JAPAN' 																									=> 'JA',
											uc_s = 'JERSEY CHANNEL ISLANDS' 																=> 'JEY',
											uc_s = 'KOREA' 																									=> 'KOR',
											uc_s = 'LATIN AMERICAS' 																				=> '',
											uc_s = 'LIBERIA' 																								=> 'LBR',
											uc_s = 'LIECHTENSTEIN' 																					=> 'LIE',
											uc_s = 'LITHUANIA' 																							=> 'LTU',
											uc_s = 'LUXEMBOURG' 																						=> 'LX',
											uc_s = 'MADAGASCAR' 																						=> 'MDG',
											uc_s = 'MALAYSIA' 																							=> 'MYS',
											uc_s = 'MARSHALL ISLANDS' 																			=> 'MH',
											uc_s = 'MAURITIUS' 																							=> 'MUS',
											uc_s = 'MEXICO' 																								=> 'MX',
											uc_s = 'MONGOLIA' 																							=> 'MNG',
											uc_s = 'NAVAJO NATION' 																					=> '',  //A TRIBAL NATION 
											uc_s = 'NETHERLANDS' 																						=> 'NL',
											uc_s = 'NEW ZEALAND' 																						=> 'NZL',
											uc_s = 'NIGERIA' 																								=> 'NGA',
											uc_s = 'NORTHERN MARIANA ISLANDS' 															=> 'MP',
											uc_s = 'NOVA SCOTIA CANADA' 																		=> 'NS',
											uc_s = 'OTHER ASIA' 																						=> 'OA',
											uc_s = 'OTHER S&C AMERICAN' 																		=> 'SA',
											uc_s = 'PALAU' 																									=> 'PW',
											uc_s = 'PANAMA' 																								=> 'PN',											
											uc_s = 'PERU' 																									=> 'PER',
											uc_s = 'PHILIPPINES' 																						=> 'PH',
											uc_s = 'PUERTO RICO' 																						=> 'PR',											
											uc_s = 'RUSSIA' 																								=> 'RUS',
											uc_s = 'SAINT KITTS AND NEVIS' 																	=> 'KNA',
											uc_s = 'SCOTLAND' 																							=> 'SL',
											uc_s = 'SINGAPORE' 																							=> 'SGP',
											uc_s = 'SPAIN' 																									=> 'ESP',
											uc_s = 'ST VINCENT AND THE GRENADINES'													=> 'VCT',
											uc_s = 'SWEDEN' 																								=> 'SWE',
											uc_s = 'SWITZERLAND' 																						=> 'CHE',
											uc_s = 'TANZANIA' 																							=> 'TZA',
											uc_s = 'TAIWAN ROC' 																						=> 'TWN',
											uc_s = 'TRIBAL LAW OF CCTHITA'																	=> 'US',
											uc_s = 'CENTRAL COUNCIL OF TH ITA'															=> 'AK',
											uc_s = 'TRIBAL LAW OF TOTONACO TRIBE O'													=> 'MEX',
											uc_s = 'TRIBAL LAW OF TOTONACA TRIBE'														=> 'MEX',
											uc_s = 'TURKS AND CAICOS ISLANDS' 															=> 'TCA',
											uc_s = 'UKRAINE' 																								=> 'UKR',
											uc_s = 'UNITED ARAB EMIRATES' 																	=> 'ARE',
											uc_s = 'UNITED KINGDOM' 																				=> 'UK',
											uc_s = 'UNITED MEXICAN STATES' 																	=> 'MEX',
											uc_s = 'URAGUAY' 																								=> 'URY',
											uc_s = 'UNDER THE CCTHITA DO ENT'																=> 'US',      											
											uc_s = 'US' 																										=> 'US',
											uc_s = 'VANUATU' 																								=> 'VUT',
											uc_s = 'VENEZUELA' 																							=> 'VEN',
											uc_s = 'WHALES' 																								=> 'WLS',
											'**|'+uc_s
										 );
		END;

		//****************************************************************************
		//CorpForgnStateCD: returns "corp_forgn_state_cd".
		//****************************************************************************
		EXPORT CorpForgnStateCD(STRING s) := FUNCTION

					 uc_s := corp2.t2u(stringlib.stringfilter(corp2.t2u(s),' ABCDEFGHIJKLMNOPQRSTUVWXYZ'));

					 unknown_state_codes := ['C','FK','FS','J','MPA','OT','TS','WE','YW'];

	         RETURN map(uc_s in [unknown_state_codes]								 => '',
											State_Desc_Translation(uc_s)[1..2] 	 <> '**' => State_Desc_Translation(uc_s),
											Foreign_Desc_Translation(uc_s)[1..2] <> '**' => Foreign_Desc_Translation(uc_s),
											'**|'+uc_s
										 );
		END;

		//****************************************************************************
		//CorpForgnStateDesc: returns "corp_forgn_state_desc".
		//****************************************************************************
		EXPORT CorpForgnStateDesc(string s) := FUNCTION

					 uc_s := corp2.t2u(stringlib.stringfilter(corp2.t2u(s),' ABCDEFGHIJKLMNOPQRSTUVWXYZ'));

					 unknown_state_codes := ['C','FK','FS','J','MPA','OT','TS','WE','YW'];

	         RETURN map(uc_s in [unknown_state_codes]								 => '',
											State_Desc_Translation(uc_s)[1..2] <> '**'	 => uc_s,					 
											Foreign_Desc_Translation(uc_s)[1..2] <> '**' => uc_s,
											'**|'+uc_s
										 );
		END;

		//****************************************************************************
		//CorpForProfitInd: returns the "corp_for_profit_ind"
		//****************************************************************************
		EXPORT CorpForProfitInd(STRING s) := FUNCTION
					uc_s    := corp2.t2u(s);
					RETURN map(uc_s in ['DNC','DNCCU','DNCDT','DNCIC',
															'DNCSL','DNCWC','DPC-PBC',
															'FNC','FNCCU','FNCDT','FNCIC',
															'FNCSL','FNCWC','UNA'] 	=> 'N',
										 uc_s in ['DPC','FPC'] 						=> 'Y',																								 
										 ''
										);	
		END;

END;